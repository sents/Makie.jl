~~~
<div id="768d8322-4392-4730-849e-d603c5a70ca2" data-jscall-id="subsession-application-dom">
  <div>
    <div>
      <script src="data:application/javascript;base64,// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var ca = "136", Gy = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
}, Vy = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
}, uu = 0, tl = 1, du = 2, Wy = 3, qy = 0, Hc = 1, fu = 2, ir = 3, Ai = 0, it = 1, Ci = 2, kc = 1, Xy = 2, vn = 0, sr = 1, nl = 2, il = 3, rl = 4, pu = 5, _i = 100, mu = 101, gu = 102, sl = 103, ol = 104, xu = 200, yu = 201, vu = 202, _u = 203, Gc = 204, Vc = 205, Mu = 206, bu = 207, wu = 208, Su = 209, Tu = 210, Eu = 0, Au = 1, Cu = 2, ea = 3, Lu = 4, Ru = 5, Pu = 6, Iu = 7, Vs = 0, Du = 1, Fu = 2, _n = 0, Nu = 1, Bu = 2, zu = 3, Uu = 4, Ou = 5, ha = 300, Bi = 301, zi = 302, Ds = 303, Fs = 304, Pr = 306, Ws = 307, Ns = 1e3, vt = 1001, Bs = 1002, rt = 1003, ta = 1004, Jy = 1004, na = 1005, Yy = 1005, tt = 1006, Wc = 1007, Zy = 1007, Ui = 1008, $y = 1008, rn = 1009, Hu = 1010, ku = 1011, cr = 1012, Gu = 1013, Ps = 1014, nn = 1015, kn = 1016, Vu = 1017, Wu = 1018, qu = 1019, Ti = 1020, Xu = 1021, Gn = 1022, ct = 1023, Ju = 1024, Yu = 1025, Vn = 1026, Li = 1027, Zu = 1028, $u = 1029, ju = 1030, Qu = 1031, Ku = 1032, ed = 1033, al = 33776, ll = 33777, cl = 33778, hl = 33779, ul = 35840, dl = 35841, fl = 35842, pl = 35843, td = 36196, ml = 37492, gl = 37496, nd = 37808, id = 37809, rd = 37810, sd = 37811, od = 37812, ad = 37813, ld = 37814, cd = 37815, hd = 37816, ud = 37817, dd = 37818, fd = 37819, pd = 37820, md = 37821, gd = 36492, xd = 37840, yd = 37841, vd = 37842, _d = 37843, Md = 37844, bd = 37845, wd = 37846, Sd = 37847, Td = 37848, Ed = 37849, Ad = 37850, Cd = 37851, Ld = 37852, Rd = 37853, Pd = 2200, Id = 2201, Dd = 2202, zs = 2300, Us = 2301, yo = 2302, Mi = 2400, bi = 2401, Os = 2402, ua = 2500, qc = 2501, Fd = 0, jy = 1, Qy = 2, Nt = 3e3, Oi = 3001, Nd = 3200, Bd = 3201, Hi = 0, zd = 1, Ky = 0, vo = 7680, e0 = 7681, t0 = 7682, n0 = 7683, i0 = 34055, r0 = 34056, s0 = 5386, o0 = 512, a0 = 513, l0 = 514, c0 = 515, h0 = 516, u0 = 517, d0 = 518, Ud = 519, hr = 35044, ur = 35048, f0 = 35040, p0 = 35045, m0 = 35049, g0 = 35041, x0 = 35046, y0 = 35050, v0 = 35042, _0 = "100", xl = "300 es", En = class {
    addEventListener(e, t) {
        this._listeners === void 0 && (this._listeners = {});
        let n = this._listeners;
        n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
    }
    hasEventListener(e, t) {
        if (this._listeners === void 0) return !1;
        let n = this._listeners;
        return n[e] !== void 0 && n[e].indexOf(t) !== -1;
    }
    removeEventListener(e, t) {
        if (this._listeners === void 0) return;
        let i = this._listeners[e];
        if (i !== void 0) {
            let r = i.indexOf(t);
            r !== -1 && i.splice(r, 1);
        }
    }
    dispatchEvent(e) {
        if (this._listeners === void 0) return;
        let n = this._listeners[e.type];
        if (n !== void 0) {
            e.target = this;
            let i = n.slice(0);
            for(let r = 0, o = i.length; r < o; r++)i[r].call(this, e);
            e.target = null;
        }
    }
}, pt = [];
for(let s = 0; s < 256; s++)pt[s] = (s < 16 ? "0" : "") + s.toString(16);
var Vr = 1234567, Wn = Math.PI / 180, dr = 180 / Math.PI;
function Et() {
    let s = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
    return (pt[s & 255] + pt[s >> 8 & 255] + pt[s >> 16 & 255] + pt[s >> 24 & 255] + "-" + pt[e & 255] + pt[e >> 8 & 255] + "-" + pt[e >> 16 & 15 | 64] + pt[e >> 24 & 255] + "-" + pt[t & 63 | 128] + pt[t >> 8 & 255] + "-" + pt[t >> 16 & 255] + pt[t >> 24 & 255] + pt[n & 255] + pt[n >> 8 & 255] + pt[n >> 16 & 255] + pt[n >> 24 & 255]).toUpperCase();
}
function mt(s, e, t) {
    return Math.max(e, Math.min(t, s));
}
function da(s, e) {
    return (s % e + e) % e;
}
function Od(s, e, t, n, i) {
    return n + (s - e) * (i - n) / (t - e);
}
function Hd(s, e, t) {
    return s !== e ? (t - s) / (e - s) : 0;
}
function or(s, e, t) {
    return (1 - t) * s + t * e;
}
function kd(s, e, t, n) {
    return or(s, e, 1 - Math.exp(-t * n));
}
function Gd(s, e = 1) {
    return e - Math.abs(da(s, e * 2) - e);
}
function Vd(s, e, t) {
    return s <= e ? 0 : s >= t ? 1 : (s = (s - e) / (t - e), s * s * (3 - 2 * s));
}
function Wd(s, e, t) {
    return s <= e ? 0 : s >= t ? 1 : (s = (s - e) / (t - e), s * s * s * (s * (s * 6 - 15) + 10));
}
function qd(s, e) {
    return s + Math.floor(Math.random() * (e - s + 1));
}
function Xd(s, e) {
    return s + Math.random() * (e - s);
}
function Jd(s) {
    return s * (.5 - Math.random());
}
function Yd(s) {
    return s !== void 0 && (Vr = s % 2147483647), Vr = Vr * 16807 % 2147483647, (Vr - 1) / 2147483646;
}
function Zd(s) {
    return s * Wn;
}
function $d(s) {
    return s * dr;
}
function ia(s) {
    return (s & s - 1) === 0 && s !== 0;
}
function Xc(s) {
    return Math.pow(2, Math.ceil(Math.log(s) / Math.LN2));
}
function Jc(s) {
    return Math.pow(2, Math.floor(Math.log(s) / Math.LN2));
}
function jd(s, e, t, n, i) {
    let r = Math.cos, o = Math.sin, a = r(t / 2), l = o(t / 2), c = r((e + n) / 2), h = o((e + n) / 2), u = r((e - n) / 2), d = o((e - n) / 2), f = r((n - e) / 2), m = o((n - e) / 2);
    switch(i){
        case "XYX":
            s.set(a * h, l * u, l * d, a * c);
            break;
        case "YZY":
            s.set(l * d, a * h, l * u, a * c);
            break;
        case "ZXZ":
            s.set(l * u, l * d, a * h, a * c);
            break;
        case "XZX":
            s.set(a * h, l * m, l * f, a * c);
            break;
        case "YXY":
            s.set(l * f, a * h, l * m, a * c);
            break;
        case "ZYZ":
            s.set(l * m, l * f, a * h, a * c);
            break;
        default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
    }
}
var M0 = Object.freeze({
    __proto__: null,
    DEG2RAD: Wn,
    RAD2DEG: dr,
    generateUUID: Et,
    clamp: mt,
    euclideanModulo: da,
    mapLinear: Od,
    inverseLerp: Hd,
    lerp: or,
    damp: kd,
    pingpong: Gd,
    smoothstep: Vd,
    smootherstep: Wd,
    randInt: qd,
    randFloat: Xd,
    randFloatSpread: Jd,
    seededRandom: Yd,
    degToRad: Zd,
    radToDeg: $d,
    isPowerOfTwo: ia,
    ceilPowerOfTwo: Xc,
    floorPowerOfTwo: Jc,
    setQuaternionFromProperEuler: jd
}), X = class {
    constructor(e = 0, t = 0){
        this.x = e, this.y = t;
    }
    get width() {
        return this.x;
    }
    set width(e) {
        this.x = e;
    }
    get height() {
        return this.y;
    }
    set height(e) {
        this.y = e;
    }
    set(e, t) {
        return this.x = e, this.y = t, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this;
    }
    add(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this);
    }
    addScalar(e) {
        return this.x += e, this.y += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this;
    }
    sub(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this);
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this;
    }
    divide(e) {
        return this.x /= e.x, this.y /= e.y, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    applyMatrix3(e) {
        let t = this.x, n = this.y, i = e.elements;
        return this.x = i[0] * t + i[3] * n + i[6], this.y = i[1] * t + i[4] * n + i[7], this;
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
    }
    roundToZero() {
        return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y;
    }
    cross(e) {
        return this.x * e.y - this.y * e.x;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    angle() {
        return Math.atan2(-this.y, -this.x) + Math.PI;
    }
    distanceTo(e) {
        return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
        let t = this.x - e.x, n = this.y - e.y;
        return t * t + n * n;
    }
    manhattanDistanceTo(e) {
        return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e;
    }
    fromBufferAttribute(e, t, n) {
        return n !== void 0 && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this;
    }
    rotateAround(e, t) {
        let n = Math.cos(t), i = Math.sin(t), r = this.x - e.x, o = this.y - e.y;
        return this.x = r * n - o * i + e.x, this.y = r * i + o * n + e.y, this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y;
    }
};
X.prototype.isVector2 = !0;
var lt = class {
    constructor(){
        this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
    }
    set(e, t, n, i, r, o, a, l, c) {
        let h = this.elements;
        return h[0] = e, h[1] = i, h[2] = a, h[3] = t, h[4] = r, h[5] = l, h[6] = n, h[7] = o, h[8] = c, this;
    }
    identity() {
        return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
    }
    copy(e) {
        let t = this.elements, n = e.elements;
        return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
    }
    extractBasis(e, t, n) {
        return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
    }
    setFromMatrix4(e) {
        let t = e.elements;
        return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this;
    }
    multiply(e) {
        return this.multiplyMatrices(this, e);
    }
    premultiply(e) {
        return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
        let n = e.elements, i = t.elements, r = this.elements, o = n[0], a = n[3], l = n[6], c = n[1], h = n[4], u = n[7], d = n[2], f = n[5], m = n[8], x = i[0], v = i[3], g = i[6], p = i[1], _ = i[4], y = i[7], b = i[2], A = i[5], L = i[8];
        return r[0] = o * x + a * p + l * b, r[3] = o * v + a * _ + l * A, r[6] = o * g + a * y + l * L, r[1] = c * x + h * p + u * b, r[4] = c * v + h * _ + u * A, r[7] = c * g + h * y + u * L, r[2] = d * x + f * p + m * b, r[5] = d * v + f * _ + m * A, r[8] = d * g + f * y + m * L, this;
    }
    multiplyScalar(e) {
        let t = this.elements;
        return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
    }
    determinant() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], o = e[4], a = e[5], l = e[6], c = e[7], h = e[8];
        return t * o * h - t * a * c - n * r * h + n * a * l + i * r * c - i * o * l;
    }
    invert() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], o = e[4], a = e[5], l = e[6], c = e[7], h = e[8], u = h * o - a * c, d = a * l - h * r, f = c * r - o * l, m = t * u + n * d + i * f;
        if (m === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        let x = 1 / m;
        return e[0] = u * x, e[1] = (i * c - h * n) * x, e[2] = (a * n - i * o) * x, e[3] = d * x, e[4] = (h * t - i * l) * x, e[5] = (i * r - a * t) * x, e[6] = f * x, e[7] = (n * l - c * t) * x, e[8] = (o * t - n * r) * x, this;
    }
    transpose() {
        let e, t = this.elements;
        return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
    }
    getNormalMatrix(e) {
        return this.setFromMatrix4(e).invert().transpose();
    }
    transposeIntoArray(e) {
        let t = this.elements;
        return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
    }
    setUvTransform(e, t, n, i, r, o, a) {
        let l = Math.cos(r), c = Math.sin(r);
        return this.set(n * l, n * c, -n * (l * o + c * a) + o + e, -i * c, i * l, -i * (-c * o + l * a) + a + t, 0, 0, 1), this;
    }
    scale(e, t) {
        let n = this.elements;
        return n[0] *= e, n[3] *= e, n[6] *= e, n[1] *= t, n[4] *= t, n[7] *= t, this;
    }
    rotate(e) {
        let t = Math.cos(e), n = Math.sin(e), i = this.elements, r = i[0], o = i[3], a = i[6], l = i[1], c = i[4], h = i[7];
        return i[0] = t * r + n * l, i[3] = t * o + n * c, i[6] = t * a + n * h, i[1] = -n * r + t * l, i[4] = -n * o + t * c, i[7] = -n * a + t * h, this;
    }
    translate(e, t) {
        let n = this.elements;
        return n[0] += e * n[2], n[3] += e * n[5], n[6] += e * n[8], n[1] += t * n[2], n[4] += t * n[5], n[7] += t * n[8], this;
    }
    equals(e) {
        let t = this.elements, n = e.elements;
        for(let i = 0; i < 9; i++)if (t[i] !== n[i]) return !1;
        return !0;
    }
    fromArray(e, t = 0) {
        for(let n = 0; n < 9; n++)this.elements[n] = e[n + t];
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.elements;
        return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
    }
    clone() {
        return new this.constructor().fromArray(this.elements);
    }
};
lt.prototype.isMatrix3 = !0;
function Yc(s) {
    if (s.length === 0) return -1 / 0;
    let e = s[0];
    for(let t = 1, n = s.length; t < n; ++t)s[t] > e && (e = s[t]);
    return e;
}
var Qd = {
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array
};
function wi(s, e) {
    return new Qd[s](e);
}
function qs(s) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", s);
}
var ti, Yn = class {
    static getDataURL(e) {
        if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u") return e.src;
        let t;
        if (e instanceof HTMLCanvasElement) t = e;
        else {
            ti === void 0 && (ti = qs("canvas")), ti.width = e.width, ti.height = e.height;
            let n = ti.getContext("2d");
            e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = ti;
        }
        return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", .6)) : t.toDataURL("image/png");
    }
}, Kd = 0, ot = class extends En {
    constructor(e = ot.DEFAULT_IMAGE, t = ot.DEFAULT_MAPPING, n = vt, i = vt, r = tt, o = Ui, a = ct, l = rn, c = 1, h = Nt){
        super();
        Object.defineProperty(this, "id", {
            value: Kd++
        }), this.uuid = Et(), this.name = "", this.image = e, this.mipmaps = [], this.mapping = t, this.wrapS = n, this.wrapT = i, this.magFilter = r, this.minFilter = o, this.anisotropy = c, this.format = a, this.internalFormat = null, this.type = l, this.offset = new X(0, 0), this.repeat = new X(1, 1), this.center = new X(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new lt, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = h, this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1;
    }
    updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.name = e.name, this.image = e.image, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.encoding = e.encoding, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        if (!t && e.textures[this.uuid] !== void 0) return e.textures[this.uuid];
        let n = {
            metadata: {
                version: 4.5,
                type: "Texture",
                generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            mapping: this.mapping,
            repeat: [
                this.repeat.x,
                this.repeat.y
            ],
            offset: [
                this.offset.x,
                this.offset.y
            ],
            center: [
                this.center.x,
                this.center.y
            ],
            rotation: this.rotation,
            wrap: [
                this.wrapS,
                this.wrapT
            ],
            format: this.format,
            type: this.type,
            encoding: this.encoding,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
        };
        if (this.image !== void 0) {
            let i = this.image;
            if (i.uuid === void 0 && (i.uuid = Et()), !t && e.images[i.uuid] === void 0) {
                let r;
                if (Array.isArray(i)) {
                    r = [];
                    for(let o = 0, a = i.length; o < a; o++)i[o].isDataTexture ? r.push(_o(i[o].image)) : r.push(_o(i[o]));
                } else r = _o(i);
                e.images[i.uuid] = {
                    uuid: i.uuid,
                    url: r
                };
            }
            n.image = i.uuid;
        }
        return JSON.stringify(this.userData) !== "{}" && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    transformUv(e) {
        if (this.mapping !== ha) return e;
        if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1) switch(this.wrapS){
            case Ns:
                e.x = e.x - Math.floor(e.x);
                break;
            case vt:
                e.x = e.x < 0 ? 0 : 1;
                break;
            case Bs:
                Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
                break;
        }
        if (e.y < 0 || e.y > 1) switch(this.wrapT){
            case Ns:
                e.y = e.y - Math.floor(e.y);
                break;
            case vt:
                e.y = e.y < 0 ? 0 : 1;
                break;
            case Bs:
                Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
                break;
        }
        return this.flipY && (e.y = 1 - e.y), e;
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
};
ot.DEFAULT_IMAGE = void 0;
ot.DEFAULT_MAPPING = ha;
ot.prototype.isTexture = !0;
function _o(s) {
    return typeof HTMLImageElement < "u" && s instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && s instanceof ImageBitmap ? Yn.getDataURL(s) : s.data ? {
        data: Array.prototype.slice.call(s.data),
        width: s.width,
        height: s.height,
        type: s.data.constructor.name
    } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
var Ve = class {
    constructor(e = 0, t = 0, n = 0, i = 1){
        this.x = e, this.y = t, this.z = n, this.w = i;
    }
    get width() {
        return this.z;
    }
    set width(e) {
        this.z = e;
    }
    get height() {
        return this.w;
    }
    set height(e) {
        this.w = e;
    }
    set(e, t, n, i) {
        return this.x = e, this.y = t, this.z = n, this.w = i, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this.z = e, this.w = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setZ(e) {
        return this.z = e, this;
    }
    setW(e) {
        return this.w = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            case 2:
                this.z = t;
                break;
            case 3:
                this.w = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
    }
    add(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this);
    }
    addScalar(e) {
        return this.x += e, this.y += e, this.z += e, this.w += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
    }
    sub(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this);
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
    }
    multiply(e) {
        return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
    }
    applyMatrix4(e) {
        let t = this.x, n = this.y, i = this.z, r = this.w, o = e.elements;
        return this.x = o[0] * t + o[4] * n + o[8] * i + o[12] * r, this.y = o[1] * t + o[5] * n + o[9] * i + o[13] * r, this.z = o[2] * t + o[6] * n + o[10] * i + o[14] * r, this.w = o[3] * t + o[7] * n + o[11] * i + o[15] * r, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    setAxisAngleFromQuaternion(e) {
        this.w = 2 * Math.acos(e.w);
        let t = Math.sqrt(1 - e.w * e.w);
        return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
    }
    setAxisAngleFromRotationMatrix(e) {
        let t, n, i, r, l = e.elements, c = l[0], h = l[4], u = l[8], d = l[1], f = l[5], m = l[9], x = l[2], v = l[6], g = l[10];
        if (Math.abs(h - d) < .01 && Math.abs(u - x) < .01 && Math.abs(m - v) < .01) {
            if (Math.abs(h + d) < .1 && Math.abs(u + x) < .1 && Math.abs(m + v) < .1 && Math.abs(c + f + g - 3) < .1) return this.set(1, 0, 0, 0), this;
            t = Math.PI;
            let _ = (c + 1) / 2, y = (f + 1) / 2, b = (g + 1) / 2, A = (h + d) / 4, L = (u + x) / 4, I = (m + v) / 4;
            return _ > y && _ > b ? _ < .01 ? (n = 0, i = .707106781, r = .707106781) : (n = Math.sqrt(_), i = A / n, r = L / n) : y > b ? y < .01 ? (n = .707106781, i = 0, r = .707106781) : (i = Math.sqrt(y), n = A / i, r = I / i) : b < .01 ? (n = .707106781, i = .707106781, r = 0) : (r = Math.sqrt(b), n = L / r, i = I / r), this.set(n, i, r, t), this;
        }
        let p = Math.sqrt((v - m) * (v - m) + (u - x) * (u - x) + (d - h) * (d - h));
        return Math.abs(p) < .001 && (p = 1), this.x = (v - m) / p, this.y = (u - x) / p, this.z = (d - h) / p, this.w = Math.acos((c + f + g - 1) / 2), this;
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
    }
    roundToZero() {
        return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
    }
    equals(e) {
        return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
    }
    fromBufferAttribute(e, t, n) {
        return n !== void 0 && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y, yield this.z, yield this.w;
    }
};
Ve.prototype.isVector4 = !0;
var At = class extends En {
    constructor(e, t, n = {}){
        super();
        this.width = e, this.height = t, this.depth = 1, this.scissor = new Ve(0, 0, e, t), this.scissorTest = !1, this.viewport = new Ve(0, 0, e, t), this.texture = new ot(void 0, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), this.texture.isRenderTargetTexture = !0, this.texture.image = {
            width: e,
            height: t,
            depth: 1
        }, this.texture.generateMipmaps = n.generateMipmaps !== void 0 ? n.generateMipmaps : !1, this.texture.internalFormat = n.internalFormat !== void 0 ? n.internalFormat : null, this.texture.minFilter = n.minFilter !== void 0 ? n.minFilter : tt, this.depthBuffer = n.depthBuffer !== void 0 ? n.depthBuffer : !0, this.stencilBuffer = n.stencilBuffer !== void 0 ? n.stencilBuffer : !1, this.depthTexture = n.depthTexture !== void 0 ? n.depthTexture : null;
    }
    setTexture(e) {
        e.image = {
            width: this.width,
            height: this.height,
            depth: this.depth
        }, this.texture = e;
    }
    setSize(e, t, n = 1) {
        (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.image = {
            ...this.texture.image
        }, this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.depthTexture = e.depthTexture, this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
};
At.prototype.isWebGLRenderTarget = !0;
var Zc = class extends At {
    constructor(e, t, n){
        super(e, t);
        let i = this.texture;
        this.texture = [];
        for(let r = 0; r < n; r++)this.texture[r] = i.clone();
    }
    setSize(e, t, n = 1) {
        if (this.width !== e || this.height !== t || this.depth !== n) {
            this.width = e, this.height = t, this.depth = n;
            for(let i = 0, r = this.texture.length; i < r; i++)this.texture[i].image.width = e, this.texture[i].image.height = t, this.texture[i].image.depth = n;
            this.dispose();
        }
        return this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t), this;
    }
    copy(e) {
        this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.set(0, 0, this.width, this.height), this.scissor.set(0, 0, this.width, this.height), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.depthTexture = e.depthTexture, this.texture.length = 0;
        for(let t = 0, n = e.texture.length; t < n; t++)this.texture[t] = e.texture[t].clone();
        return this;
    }
};
Zc.prototype.isWebGLMultipleRenderTargets = !0;
var Xs = class extends At {
    constructor(e, t, n = {}){
        super(e, t, n);
        this.samples = 4, this.ignoreDepthForMultisampleCopy = n.ignoreDepth !== void 0 ? n.ignoreDepth : !0, this.useRenderToTexture = n.useRenderToTexture !== void 0 ? n.useRenderToTexture : !1, this.useRenderbuffer = this.useRenderToTexture === !1;
    }
    copy(e) {
        return super.copy.call(this, e), this.samples = e.samples, this.useRenderToTexture = e.useRenderToTexture, this.useRenderbuffer = e.useRenderbuffer, this;
    }
};
Xs.prototype.isWebGLMultisampleRenderTarget = !0;
var gt = class {
    constructor(e = 0, t = 0, n = 0, i = 1){
        this._x = e, this._y = t, this._z = n, this._w = i;
    }
    static slerp(e, t, n, i) {
        return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."), n.slerpQuaternions(e, t, i);
    }
    static slerpFlat(e, t, n, i, r, o, a) {
        let l = n[i + 0], c = n[i + 1], h = n[i + 2], u = n[i + 3], d = r[o + 0], f = r[o + 1], m = r[o + 2], x = r[o + 3];
        if (a === 0) {
            e[t + 0] = l, e[t + 1] = c, e[t + 2] = h, e[t + 3] = u;
            return;
        }
        if (a === 1) {
            e[t + 0] = d, e[t + 1] = f, e[t + 2] = m, e[t + 3] = x;
            return;
        }
        if (u !== x || l !== d || c !== f || h !== m) {
            let v = 1 - a, g = l * d + c * f + h * m + u * x, p = g >= 0 ? 1 : -1, _ = 1 - g * g;
            if (_ > Number.EPSILON) {
                let b = Math.sqrt(_), A = Math.atan2(b, g * p);
                v = Math.sin(v * A) / b, a = Math.sin(a * A) / b;
            }
            let y = a * p;
            if (l = l * v + d * y, c = c * v + f * y, h = h * v + m * y, u = u * v + x * y, v === 1 - a) {
                let b = 1 / Math.sqrt(l * l + c * c + h * h + u * u);
                l *= b, c *= b, h *= b, u *= b;
            }
        }
        e[t] = l, e[t + 1] = c, e[t + 2] = h, e[t + 3] = u;
    }
    static multiplyQuaternionsFlat(e, t, n, i, r, o) {
        let a = n[i], l = n[i + 1], c = n[i + 2], h = n[i + 3], u = r[o], d = r[o + 1], f = r[o + 2], m = r[o + 3];
        return e[t] = a * m + h * u + l * f - c * d, e[t + 1] = l * m + h * d + c * u - a * f, e[t + 2] = c * m + h * f + a * d - l * u, e[t + 3] = h * m - a * u - l * d - c * f, e;
    }
    get x() {
        return this._x;
    }
    set x(e) {
        this._x = e, this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(e) {
        this._y = e, this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(e) {
        this._z = e, this._onChangeCallback();
    }
    get w() {
        return this._w;
    }
    set w(e) {
        this._w = e, this._onChangeCallback();
    }
    set(e, t, n, i) {
        return this._x = e, this._y = t, this._z = n, this._w = i, this._onChangeCallback(), this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(e) {
        return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
    }
    setFromEuler(e, t) {
        if (!(e && e.isEuler)) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
        let n = e._x, i = e._y, r = e._z, o = e._order, a = Math.cos, l = Math.sin, c = a(n / 2), h = a(i / 2), u = a(r / 2), d = l(n / 2), f = l(i / 2), m = l(r / 2);
        switch(o){
            case "XYZ":
                this._x = d * h * u + c * f * m, this._y = c * f * u - d * h * m, this._z = c * h * m + d * f * u, this._w = c * h * u - d * f * m;
                break;
            case "YXZ":
                this._x = d * h * u + c * f * m, this._y = c * f * u - d * h * m, this._z = c * h * m - d * f * u, this._w = c * h * u + d * f * m;
                break;
            case "ZXY":
                this._x = d * h * u - c * f * m, this._y = c * f * u + d * h * m, this._z = c * h * m + d * f * u, this._w = c * h * u - d * f * m;
                break;
            case "ZYX":
                this._x = d * h * u - c * f * m, this._y = c * f * u + d * h * m, this._z = c * h * m - d * f * u, this._w = c * h * u + d * f * m;
                break;
            case "YZX":
                this._x = d * h * u + c * f * m, this._y = c * f * u + d * h * m, this._z = c * h * m - d * f * u, this._w = c * h * u - d * f * m;
                break;
            case "XZY":
                this._x = d * h * u - c * f * m, this._y = c * f * u - d * h * m, this._z = c * h * m + d * f * u, this._w = c * h * u + d * f * m;
                break;
            default:
                console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + o);
        }
        return t !== !1 && this._onChangeCallback(), this;
    }
    setFromAxisAngle(e, t) {
        let n = t / 2, i = Math.sin(n);
        return this._x = e.x * i, this._y = e.y * i, this._z = e.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e) {
        let t = e.elements, n = t[0], i = t[4], r = t[8], o = t[1], a = t[5], l = t[9], c = t[2], h = t[6], u = t[10], d = n + a + u;
        if (d > 0) {
            let f = .5 / Math.sqrt(d + 1);
            this._w = .25 / f, this._x = (h - l) * f, this._y = (r - c) * f, this._z = (o - i) * f;
        } else if (n > a && n > u) {
            let f = 2 * Math.sqrt(1 + n - a - u);
            this._w = (h - l) / f, this._x = .25 * f, this._y = (i + o) / f, this._z = (r + c) / f;
        } else if (a > u) {
            let f = 2 * Math.sqrt(1 + a - n - u);
            this._w = (r - c) / f, this._x = (i + o) / f, this._y = .25 * f, this._z = (l + h) / f;
        } else {
            let f = 2 * Math.sqrt(1 + u - n - a);
            this._w = (o - i) / f, this._x = (r + c) / f, this._y = (l + h) / f, this._z = .25 * f;
        }
        return this._onChangeCallback(), this;
    }
    setFromUnitVectors(e, t) {
        let n = e.dot(t) + 1;
        return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
    }
    angleTo(e) {
        return 2 * Math.acos(Math.abs(mt(this.dot(e), -1, 1)));
    }
    rotateTowards(e, t) {
        let n = this.angleTo(e);
        if (n === 0) return this;
        let i = Math.min(1, t / n);
        return this.slerp(e, i), this;
    }
    identity() {
        return this.set(0, 0, 0, 1);
    }
    invert() {
        return this.conjugate();
    }
    conjugate() {
        return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
    }
    dot(e) {
        return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
    }
    lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
        let e = this.length();
        return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
    }
    multiply(e, t) {
        return t !== void 0 ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(e, t)) : this.multiplyQuaternions(this, e);
    }
    premultiply(e) {
        return this.multiplyQuaternions(e, this);
    }
    multiplyQuaternions(e, t) {
        let n = e._x, i = e._y, r = e._z, o = e._w, a = t._x, l = t._y, c = t._z, h = t._w;
        return this._x = n * h + o * a + i * c - r * l, this._y = i * h + o * l + r * a - n * c, this._z = r * h + o * c + n * l - i * a, this._w = o * h - n * a - i * l - r * c, this._onChangeCallback(), this;
    }
    slerp(e, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(e);
        let n = this._x, i = this._y, r = this._z, o = this._w, a = o * e._w + n * e._x + i * e._y + r * e._z;
        if (a < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, a = -a) : this.copy(e), a >= 1) return this._w = o, this._x = n, this._y = i, this._z = r, this;
        let l = 1 - a * a;
        if (l <= Number.EPSILON) {
            let f = 1 - t;
            return this._w = f * o + t * this._w, this._x = f * n + t * this._x, this._y = f * i + t * this._y, this._z = f * r + t * this._z, this.normalize(), this._onChangeCallback(), this;
        }
        let c = Math.sqrt(l), h = Math.atan2(c, a), u = Math.sin((1 - t) * h) / c, d = Math.sin(t * h) / c;
        return this._w = o * u + this._w * d, this._x = n * u + this._x * d, this._y = i * u + this._y * d, this._z = r * u + this._z * d, this._onChangeCallback(), this;
    }
    slerpQuaternions(e, t, n) {
        this.copy(e).slerp(t, n);
    }
    random() {
        let e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), i = 2 * Math.PI * Math.random(), r = 2 * Math.PI * Math.random();
        return this.set(t * Math.cos(i), n * Math.sin(r), n * Math.cos(r), t * Math.sin(i));
    }
    equals(e) {
        return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
    }
    fromArray(e, t = 0) {
        return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
    }
    fromBufferAttribute(e, t) {
        return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this;
    }
    _onChange(e) {
        return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {}
};
gt.prototype.isQuaternion = !0;
var M = class {
    constructor(e = 0, t = 0, n = 0){
        this.x = e, this.y = t, this.z = n;
    }
    set(e, t, n) {
        return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
    }
    setScalar(e) {
        return this.x = e, this.y = e, this.z = e, this;
    }
    setX(e) {
        return this.x = e, this;
    }
    setY(e) {
        return this.y = e, this;
    }
    setZ(e) {
        return this.z = e, this;
    }
    setComponent(e, t) {
        switch(e){
            case 0:
                this.x = t;
                break;
            case 1:
                this.y = t;
                break;
            case 2:
                this.z = t;
                break;
            default:
                throw new Error("index is out of range: " + e);
        }
        return this;
    }
    getComponent(e) {
        switch(e){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error("index is out of range: " + e);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z);
    }
    copy(e) {
        return this.x = e.x, this.y = e.y, this.z = e.z, this;
    }
    add(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this.z += e.z, this);
    }
    addScalar(e) {
        return this.x += e, this.y += e, this.z += e, this;
    }
    addVectors(e, t) {
        return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
    }
    addScaledVector(e, t) {
        return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
    }
    sub(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this.z -= e.z, this);
    }
    subScalar(e) {
        return this.x -= e, this.y -= e, this.z -= e, this;
    }
    subVectors(e, t) {
        return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
    }
    multiply(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(e, t)) : (this.x *= e.x, this.y *= e.y, this.z *= e.z, this);
    }
    multiplyScalar(e) {
        return this.x *= e, this.y *= e, this.z *= e, this;
    }
    multiplyVectors(e, t) {
        return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
    }
    applyEuler(e) {
        return e && e.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(yl.setFromEuler(e));
    }
    applyAxisAngle(e, t) {
        return this.applyQuaternion(yl.setFromAxisAngle(e, t));
    }
    applyMatrix3(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements;
        return this.x = r[0] * t + r[3] * n + r[6] * i, this.y = r[1] * t + r[4] * n + r[7] * i, this.z = r[2] * t + r[5] * n + r[8] * i, this;
    }
    applyNormalMatrix(e) {
        return this.applyMatrix3(e).normalize();
    }
    applyMatrix4(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements, o = 1 / (r[3] * t + r[7] * n + r[11] * i + r[15]);
        return this.x = (r[0] * t + r[4] * n + r[8] * i + r[12]) * o, this.y = (r[1] * t + r[5] * n + r[9] * i + r[13]) * o, this.z = (r[2] * t + r[6] * n + r[10] * i + r[14]) * o, this;
    }
    applyQuaternion(e) {
        let t = this.x, n = this.y, i = this.z, r = e.x, o = e.y, a = e.z, l = e.w, c = l * t + o * i - a * n, h = l * n + a * t - r * i, u = l * i + r * n - o * t, d = -r * t - o * n - a * i;
        return this.x = c * l + d * -r + h * -a - u * -o, this.y = h * l + d * -o + u * -r - c * -a, this.z = u * l + d * -a + c * -o - h * -r, this;
    }
    project(e) {
        return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
    }
    unproject(e) {
        return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
    }
    transformDirection(e) {
        let t = this.x, n = this.y, i = this.z, r = e.elements;
        return this.x = r[0] * t + r[4] * n + r[8] * i, this.y = r[1] * t + r[5] * n + r[9] * i, this.z = r[2] * t + r[6] * n + r[10] * i, this.normalize();
    }
    divide(e) {
        return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
    }
    divideScalar(e) {
        return this.multiplyScalar(1 / e);
    }
    min(e) {
        return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
    }
    max(e) {
        return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
    }
    clamp(e, t) {
        return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
    }
    clampScalar(e, t) {
        return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
    }
    clampLength(e, t) {
        let n = this.length();
        return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
    }
    floor() {
        return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
    }
    ceil() {
        return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
    }
    round() {
        return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
    }
    roundToZero() {
        return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
    }
    negate() {
        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
    }
    dot(e) {
        return this.x * e.x + this.y * e.y + this.z * e.z;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(e) {
        return this.normalize().multiplyScalar(e);
    }
    lerp(e, t) {
        return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
    }
    lerpVectors(e, t, n) {
        return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
    }
    cross(e, t) {
        return t !== void 0 ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(e, t)) : this.crossVectors(this, e);
    }
    crossVectors(e, t) {
        let n = e.x, i = e.y, r = e.z, o = t.x, a = t.y, l = t.z;
        return this.x = i * l - r * a, this.y = r * o - n * l, this.z = n * a - i * o, this;
    }
    projectOnVector(e) {
        let t = e.lengthSq();
        if (t === 0) return this.set(0, 0, 0);
        let n = e.dot(this) / t;
        return this.copy(e).multiplyScalar(n);
    }
    projectOnPlane(e) {
        return Mo.copy(this).projectOnVector(e), this.sub(Mo);
    }
    reflect(e) {
        return this.sub(Mo.copy(e).multiplyScalar(2 * this.dot(e)));
    }
    angleTo(e) {
        let t = Math.sqrt(this.lengthSq() * e.lengthSq());
        if (t === 0) return Math.PI / 2;
        let n = this.dot(e) / t;
        return Math.acos(mt(n, -1, 1));
    }
    distanceTo(e) {
        return Math.sqrt(this.distanceToSquared(e));
    }
    distanceToSquared(e) {
        let t = this.x - e.x, n = this.y - e.y, i = this.z - e.z;
        return t * t + n * n + i * i;
    }
    manhattanDistanceTo(e) {
        return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
    }
    setFromSpherical(e) {
        return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
    }
    setFromSphericalCoords(e, t, n) {
        let i = Math.sin(t) * e;
        return this.x = i * Math.sin(n), this.y = Math.cos(t) * e, this.z = i * Math.cos(n), this;
    }
    setFromCylindrical(e) {
        return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
    }
    setFromCylindricalCoords(e, t, n) {
        return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
    }
    setFromMatrixPosition(e) {
        let t = e.elements;
        return this.x = t[12], this.y = t[13], this.z = t[14], this;
    }
    setFromMatrixScale(e) {
        let t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), i = this.setFromMatrixColumn(e, 2).length();
        return this.x = t, this.y = n, this.z = i, this;
    }
    setFromMatrixColumn(e, t) {
        return this.fromArray(e.elements, t * 4);
    }
    setFromMatrix3Column(e, t) {
        return this.fromArray(e.elements, t * 3);
    }
    equals(e) {
        return e.x === this.x && e.y === this.y && e.z === this.z;
    }
    fromArray(e, t = 0) {
        return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
    }
    fromBufferAttribute(e, t, n) {
        return n !== void 0 && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
    }
    random() {
        return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
    }
    randomDirection() {
        let e = (Math.random() - .5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
        return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
    }
    *[Symbol.iterator]() {
        yield this.x, yield this.y, yield this.z;
    }
};
M.prototype.isVector3 = !0;
var Mo = new M, yl = new gt, Lt = class {
    constructor(e = new M(1 / 0, 1 / 0, 1 / 0), t = new M(-1 / 0, -1 / 0, -1 / 0)){
        this.min = e, this.max = t;
    }
    set(e, t) {
        return this.min.copy(e), this.max.copy(t), this;
    }
    setFromArray(e) {
        let t = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0;
        for(let l = 0, c = e.length; l < c; l += 3){
            let h = e[l], u = e[l + 1], d = e[l + 2];
            h < t && (t = h), u < n && (n = u), d < i && (i = d), h > r && (r = h), u > o && (o = u), d > a && (a = d);
        }
        return this.min.set(t, n, i), this.max.set(r, o, a), this;
    }
    setFromBufferAttribute(e) {
        let t = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0;
        for(let l = 0, c = e.count; l < c; l++){
            let h = e.getX(l), u = e.getY(l), d = e.getZ(l);
            h < t && (t = h), u < n && (n = u), d < i && (i = d), h > r && (r = h), u > o && (o = u), d > a && (a = d);
        }
        return this.min.set(t, n, i), this.max.set(r, o, a), this;
    }
    setFromPoints(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]);
        return this;
    }
    setFromCenterAndSize(e, t) {
        let n = Ji.copy(t).multiplyScalar(.5);
        return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
    }
    setFromObject(e) {
        return this.makeEmpty(), this.expandByObject(e);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.min.copy(e.min), this.max.copy(e.max), this;
    }
    makeEmpty() {
        return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
    }
    isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(e) {
        return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5);
    }
    getSize(e) {
        return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
    }
    expandByPoint(e) {
        return this.min.min(e), this.max.max(e), this;
    }
    expandByVector(e) {
        return this.min.sub(e), this.max.add(e), this;
    }
    expandByScalar(e) {
        return this.min.addScalar(-e), this.max.addScalar(e), this;
    }
    expandByObject(e) {
        e.updateWorldMatrix(!1, !1);
        let t = e.geometry;
        t !== void 0 && (t.boundingBox === null && t.computeBoundingBox(), bo.copy(t.boundingBox), bo.applyMatrix4(e.matrixWorld), this.union(bo));
        let n = e.children;
        for(let i = 0, r = n.length; i < r; i++)this.expandByObject(n[i]);
        return this;
    }
    containsPoint(e) {
        return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
    }
    containsBox(e) {
        return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
    }
    getParameter(e, t) {
        return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(e) {
        return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
    }
    intersectsSphere(e) {
        return this.clampPoint(e.center, Ji), Ji.distanceToSquared(e.center) <= e.radius * e.radius;
    }
    intersectsPlane(e) {
        let t, n;
        return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
    }
    intersectsTriangle(e) {
        if (this.isEmpty()) return !1;
        this.getCenter(Yi), Wr.subVectors(this.max, Yi), ni.subVectors(e.a, Yi), ii.subVectors(e.b, Yi), ri.subVectors(e.c, Yi), un.subVectors(ii, ni), dn.subVectors(ri, ii), Pn.subVectors(ni, ri);
        let t = [
            0,
            -un.z,
            un.y,
            0,
            -dn.z,
            dn.y,
            0,
            -Pn.z,
            Pn.y,
            un.z,
            0,
            -un.x,
            dn.z,
            0,
            -dn.x,
            Pn.z,
            0,
            -Pn.x,
            -un.y,
            un.x,
            0,
            -dn.y,
            dn.x,
            0,
            -Pn.y,
            Pn.x,
            0
        ];
        return !wo(t, ni, ii, ri, Wr) || (t = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ], !wo(t, ni, ii, ri, Wr)) ? !1 : (qr.crossVectors(un, dn), t = [
            qr.x,
            qr.y,
            qr.z
        ], wo(t, ni, ii, ri, Wr));
    }
    clampPoint(e, t) {
        return t.copy(e).clamp(this.min, this.max);
    }
    distanceToPoint(e) {
        return Ji.copy(e).clamp(this.min, this.max).sub(e).length();
    }
    getBoundingSphere(e) {
        return this.getCenter(e.center), e.radius = this.getSize(Ji).length() * .5, e;
    }
    intersect(e) {
        return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
    }
    union(e) {
        return this.min.min(e.min), this.max.max(e.max), this;
    }
    applyMatrix4(e) {
        return this.isEmpty() ? this : ($t[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), $t[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), $t[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), $t[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), $t[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), $t[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), $t[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), $t[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints($t), this);
    }
    translate(e) {
        return this.min.add(e), this.max.add(e), this;
    }
    equals(e) {
        return e.min.equals(this.min) && e.max.equals(this.max);
    }
};
Lt.prototype.isBox3 = !0;
var $t = [
    new M,
    new M,
    new M,
    new M,
    new M,
    new M,
    new M,
    new M
], Ji = new M, bo = new Lt, ni = new M, ii = new M, ri = new M, un = new M, dn = new M, Pn = new M, Yi = new M, Wr = new M, qr = new M, In = new M;
function wo(s, e, t, n, i) {
    for(let r = 0, o = s.length - 3; r <= o; r += 3){
        In.fromArray(s, r);
        let a = i.x * Math.abs(In.x) + i.y * Math.abs(In.y) + i.z * Math.abs(In.z), l = e.dot(In), c = t.dot(In), h = n.dot(In);
        if (Math.max(-Math.max(l, c, h), Math.min(l, c, h)) > a) return !1;
    }
    return !0;
}
var ef = new Lt, vl = new M, Xr = new M, So = new M, An = class {
    constructor(e = new M, t = -1){
        this.center = e, this.radius = t;
    }
    set(e, t) {
        return this.center.copy(e), this.radius = t, this;
    }
    setFromPoints(e, t) {
        let n = this.center;
        t !== void 0 ? n.copy(t) : ef.setFromPoints(e).getCenter(n);
        let i = 0;
        for(let r = 0, o = e.length; r < o; r++)i = Math.max(i, n.distanceToSquared(e[r]));
        return this.radius = Math.sqrt(i), this;
    }
    copy(e) {
        return this.center.copy(e.center), this.radius = e.radius, this;
    }
    isEmpty() {
        return this.radius < 0;
    }
    makeEmpty() {
        return this.center.set(0, 0, 0), this.radius = -1, this;
    }
    containsPoint(e) {
        return e.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(e) {
        return e.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(e) {
        let t = this.radius + e.radius;
        return e.center.distanceToSquared(this.center) <= t * t;
    }
    intersectsBox(e) {
        return e.intersectsSphere(this);
    }
    intersectsPlane(e) {
        return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(e, t) {
        let n = this.center.distanceToSquared(e);
        return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
    }
    getBoundingBox(e) {
        return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
    }
    applyMatrix4(e) {
        return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
    }
    translate(e) {
        return this.center.add(e), this;
    }
    expandByPoint(e) {
        So.subVectors(e, this.center);
        let t = So.lengthSq();
        if (t > this.radius * this.radius) {
            let n = Math.sqrt(t), i = (n - this.radius) * .5;
            this.center.add(So.multiplyScalar(i / n)), this.radius += i;
        }
        return this;
    }
    union(e) {
        return this.center.equals(e.center) === !0 ? Xr.set(0, 0, 1).multiplyScalar(e.radius) : Xr.subVectors(e.center, this.center).normalize().multiplyScalar(e.radius), this.expandByPoint(vl.copy(e.center).add(Xr)), this.expandByPoint(vl.copy(e.center).sub(Xr)), this;
    }
    equals(e) {
        return e.center.equals(this.center) && e.radius === this.radius;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, jt = new M, To = new M, Jr = new M, fn = new M, Eo = new M, Yr = new M, Ao = new M, Cn = class {
    constructor(e = new M, t = new M(0, 0, -1)){
        this.origin = e, this.direction = t;
    }
    set(e, t) {
        return this.origin.copy(e), this.direction.copy(t), this;
    }
    copy(e) {
        return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
    }
    at(e, t) {
        return t.copy(this.direction).multiplyScalar(e).add(this.origin);
    }
    lookAt(e) {
        return this.direction.copy(e).sub(this.origin).normalize(), this;
    }
    recast(e) {
        return this.origin.copy(this.at(e, jt)), this;
    }
    closestPointToPoint(e, t) {
        t.subVectors(e, this.origin);
        let n = t.dot(this.direction);
        return n < 0 ? t.copy(this.origin) : t.copy(this.direction).multiplyScalar(n).add(this.origin);
    }
    distanceToPoint(e) {
        return Math.sqrt(this.distanceSqToPoint(e));
    }
    distanceSqToPoint(e) {
        let t = jt.subVectors(e, this.origin).dot(this.direction);
        return t < 0 ? this.origin.distanceToSquared(e) : (jt.copy(this.direction).multiplyScalar(t).add(this.origin), jt.distanceToSquared(e));
    }
    distanceSqToSegment(e, t, n, i) {
        To.copy(e).add(t).multiplyScalar(.5), Jr.copy(t).sub(e).normalize(), fn.copy(this.origin).sub(To);
        let r = e.distanceTo(t) * .5, o = -this.direction.dot(Jr), a = fn.dot(this.direction), l = -fn.dot(Jr), c = fn.lengthSq(), h = Math.abs(1 - o * o), u, d, f, m;
        if (h > 0) if (u = o * l - a, d = o * a - l, m = r * h, u >= 0) if (d >= -m) if (d <= m) {
            let x = 1 / h;
            u *= x, d *= x, f = u * (u + o * d + 2 * a) + d * (o * u + d + 2 * l) + c;
        } else d = r, u = Math.max(0, -(o * d + a)), f = -u * u + d * (d + 2 * l) + c;
        else d = -r, u = Math.max(0, -(o * d + a)), f = -u * u + d * (d + 2 * l) + c;
        else d <= -m ? (u = Math.max(0, -(-o * r + a)), d = u > 0 ? -r : Math.min(Math.max(-r, -l), r), f = -u * u + d * (d + 2 * l) + c) : d <= m ? (u = 0, d = Math.min(Math.max(-r, -l), r), f = d * (d + 2 * l) + c) : (u = Math.max(0, -(o * r + a)), d = u > 0 ? r : Math.min(Math.max(-r, -l), r), f = -u * u + d * (d + 2 * l) + c);
        else d = o > 0 ? -r : r, u = Math.max(0, -(o * d + a)), f = -u * u + d * (d + 2 * l) + c;
        return n && n.copy(this.direction).multiplyScalar(u).add(this.origin), i && i.copy(Jr).multiplyScalar(d).add(To), f;
    }
    intersectSphere(e, t) {
        jt.subVectors(e.center, this.origin);
        let n = jt.dot(this.direction), i = jt.dot(jt) - n * n, r = e.radius * e.radius;
        if (i > r) return null;
        let o = Math.sqrt(r - i), a = n - o, l = n + o;
        return a < 0 && l < 0 ? null : a < 0 ? this.at(l, t) : this.at(a, t);
    }
    intersectsSphere(e) {
        return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
    }
    distanceToPlane(e) {
        let t = e.normal.dot(this.direction);
        if (t === 0) return e.distanceToPoint(this.origin) === 0 ? 0 : null;
        let n = -(this.origin.dot(e.normal) + e.constant) / t;
        return n >= 0 ? n : null;
    }
    intersectPlane(e, t) {
        let n = this.distanceToPlane(e);
        return n === null ? null : this.at(n, t);
    }
    intersectsPlane(e) {
        let t = e.distanceToPoint(this.origin);
        return t === 0 || e.normal.dot(this.direction) * t < 0;
    }
    intersectBox(e, t) {
        let n, i, r, o, a, l, c = 1 / this.direction.x, h = 1 / this.direction.y, u = 1 / this.direction.z, d = this.origin;
        return c >= 0 ? (n = (e.min.x - d.x) * c, i = (e.max.x - d.x) * c) : (n = (e.max.x - d.x) * c, i = (e.min.x - d.x) * c), h >= 0 ? (r = (e.min.y - d.y) * h, o = (e.max.y - d.y) * h) : (r = (e.max.y - d.y) * h, o = (e.min.y - d.y) * h), n > o || r > i || ((r > n || n !== n) && (n = r), (o < i || i !== i) && (i = o), u >= 0 ? (a = (e.min.z - d.z) * u, l = (e.max.z - d.z) * u) : (a = (e.max.z - d.z) * u, l = (e.min.z - d.z) * u), n > l || a > i) || ((a > n || n !== n) && (n = a), (l < i || i !== i) && (i = l), i < 0) ? null : this.at(n >= 0 ? n : i, t);
    }
    intersectsBox(e) {
        return this.intersectBox(e, jt) !== null;
    }
    intersectTriangle(e, t, n, i, r) {
        Eo.subVectors(t, e), Yr.subVectors(n, e), Ao.crossVectors(Eo, Yr);
        let o = this.direction.dot(Ao), a;
        if (o > 0) {
            if (i) return null;
            a = 1;
        } else if (o < 0) a = -1, o = -o;
        else return null;
        fn.subVectors(this.origin, e);
        let l = a * this.direction.dot(Yr.crossVectors(fn, Yr));
        if (l < 0) return null;
        let c = a * this.direction.dot(Eo.cross(fn));
        if (c < 0 || l + c > o) return null;
        let h = -a * fn.dot(Ao);
        return h < 0 ? null : this.at(h / o, r);
    }
    applyMatrix4(e) {
        return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
    }
    equals(e) {
        return e.origin.equals(this.origin) && e.direction.equals(this.direction);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, pe = class {
    constructor(){
        this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
    }
    set(e, t, n, i, r, o, a, l, c, h, u, d, f, m, x, v) {
        let g = this.elements;
        return g[0] = e, g[4] = t, g[8] = n, g[12] = i, g[1] = r, g[5] = o, g[9] = a, g[13] = l, g[2] = c, g[6] = h, g[10] = u, g[14] = d, g[3] = f, g[7] = m, g[11] = x, g[15] = v, this;
    }
    identity() {
        return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    clone() {
        return new pe().fromArray(this.elements);
    }
    copy(e) {
        let t = this.elements, n = e.elements;
        return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
    }
    copyPosition(e) {
        let t = this.elements, n = e.elements;
        return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
    }
    setFromMatrix3(e) {
        let t = e.elements;
        return this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1), this;
    }
    extractBasis(e, t, n) {
        return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
    }
    makeBasis(e, t, n) {
        return this.set(e.x, t.x, n.x, 0, e.y, t.y, n.y, 0, e.z, t.z, n.z, 0, 0, 0, 0, 1), this;
    }
    extractRotation(e) {
        let t = this.elements, n = e.elements, i = 1 / si.setFromMatrixColumn(e, 0).length(), r = 1 / si.setFromMatrixColumn(e, 1).length(), o = 1 / si.setFromMatrixColumn(e, 2).length();
        return t[0] = n[0] * i, t[1] = n[1] * i, t[2] = n[2] * i, t[3] = 0, t[4] = n[4] * r, t[5] = n[5] * r, t[6] = n[6] * r, t[7] = 0, t[8] = n[8] * o, t[9] = n[9] * o, t[10] = n[10] * o, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromEuler(e) {
        e && e.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
        let t = this.elements, n = e.x, i = e.y, r = e.z, o = Math.cos(n), a = Math.sin(n), l = Math.cos(i), c = Math.sin(i), h = Math.cos(r), u = Math.sin(r);
        if (e.order === "XYZ") {
            let d = o * h, f = o * u, m = a * h, x = a * u;
            t[0] = l * h, t[4] = -l * u, t[8] = c, t[1] = f + m * c, t[5] = d - x * c, t[9] = -a * l, t[2] = x - d * c, t[6] = m + f * c, t[10] = o * l;
        } else if (e.order === "YXZ") {
            let d = l * h, f = l * u, m = c * h, x = c * u;
            t[0] = d + x * a, t[4] = m * a - f, t[8] = o * c, t[1] = o * u, t[5] = o * h, t[9] = -a, t[2] = f * a - m, t[6] = x + d * a, t[10] = o * l;
        } else if (e.order === "ZXY") {
            let d = l * h, f = l * u, m = c * h, x = c * u;
            t[0] = d - x * a, t[4] = -o * u, t[8] = m + f * a, t[1] = f + m * a, t[5] = o * h, t[9] = x - d * a, t[2] = -o * c, t[6] = a, t[10] = o * l;
        } else if (e.order === "ZYX") {
            let d = o * h, f = o * u, m = a * h, x = a * u;
            t[0] = l * h, t[4] = m * c - f, t[8] = d * c + x, t[1] = l * u, t[5] = x * c + d, t[9] = f * c - m, t[2] = -c, t[6] = a * l, t[10] = o * l;
        } else if (e.order === "YZX") {
            let d = o * l, f = o * c, m = a * l, x = a * c;
            t[0] = l * h, t[4] = x - d * u, t[8] = m * u + f, t[1] = u, t[5] = o * h, t[9] = -a * h, t[2] = -c * h, t[6] = f * u + m, t[10] = d - x * u;
        } else if (e.order === "XZY") {
            let d = o * l, f = o * c, m = a * l, x = a * c;
            t[0] = l * h, t[4] = -u, t[8] = c * h, t[1] = d * u + x, t[5] = o * h, t[9] = f * u - m, t[2] = m * u - f, t[6] = a * h, t[10] = x * u + d;
        }
        return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
    }
    makeRotationFromQuaternion(e) {
        return this.compose(tf, e, nf);
    }
    lookAt(e, t, n) {
        let i = this.elements;
        return St.subVectors(e, t), St.lengthSq() === 0 && (St.z = 1), St.normalize(), pn.crossVectors(n, St), pn.lengthSq() === 0 && (Math.abs(n.z) === 1 ? St.x += 1e-4 : St.z += 1e-4, St.normalize(), pn.crossVectors(n, St)), pn.normalize(), Zr.crossVectors(St, pn), i[0] = pn.x, i[4] = Zr.x, i[8] = St.x, i[1] = pn.y, i[5] = Zr.y, i[9] = St.y, i[2] = pn.z, i[6] = Zr.z, i[10] = St.z, this;
    }
    multiply(e, t) {
        return t !== void 0 ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(e, t)) : this.multiplyMatrices(this, e);
    }
    premultiply(e) {
        return this.multiplyMatrices(e, this);
    }
    multiplyMatrices(e, t) {
        let n = e.elements, i = t.elements, r = this.elements, o = n[0], a = n[4], l = n[8], c = n[12], h = n[1], u = n[5], d = n[9], f = n[13], m = n[2], x = n[6], v = n[10], g = n[14], p = n[3], _ = n[7], y = n[11], b = n[15], A = i[0], L = i[4], I = i[8], k = i[12], B = i[1], P = i[5], w = i[9], E = i[13], D = i[2], U = i[6], F = i[10], O = i[14], ne = i[3], ce = i[7], V = i[11], W = i[15];
        return r[0] = o * A + a * B + l * D + c * ne, r[4] = o * L + a * P + l * U + c * ce, r[8] = o * I + a * w + l * F + c * V, r[12] = o * k + a * E + l * O + c * W, r[1] = h * A + u * B + d * D + f * ne, r[5] = h * L + u * P + d * U + f * ce, r[9] = h * I + u * w + d * F + f * V, r[13] = h * k + u * E + d * O + f * W, r[2] = m * A + x * B + v * D + g * ne, r[6] = m * L + x * P + v * U + g * ce, r[10] = m * I + x * w + v * F + g * V, r[14] = m * k + x * E + v * O + g * W, r[3] = p * A + _ * B + y * D + b * ne, r[7] = p * L + _ * P + y * U + b * ce, r[11] = p * I + _ * w + y * F + b * V, r[15] = p * k + _ * E + y * O + b * W, this;
    }
    multiplyScalar(e) {
        let t = this.elements;
        return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
    }
    determinant() {
        let e = this.elements, t = e[0], n = e[4], i = e[8], r = e[12], o = e[1], a = e[5], l = e[9], c = e[13], h = e[2], u = e[6], d = e[10], f = e[14], m = e[3], x = e[7], v = e[11], g = e[15];
        return m * (+r * l * u - i * c * u - r * a * d + n * c * d + i * a * f - n * l * f) + x * (+t * l * f - t * c * d + r * o * d - i * o * f + i * c * h - r * l * h) + v * (+t * c * u - t * a * f - r * o * u + n * o * f + r * a * h - n * c * h) + g * (-i * a * h - t * l * u + t * a * d + i * o * u - n * o * d + n * l * h);
    }
    transpose() {
        let e = this.elements, t;
        return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
    }
    setPosition(e, t, n) {
        let i = this.elements;
        return e.isVector3 ? (i[12] = e.x, i[13] = e.y, i[14] = e.z) : (i[12] = e, i[13] = t, i[14] = n), this;
    }
    invert() {
        let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], o = e[4], a = e[5], l = e[6], c = e[7], h = e[8], u = e[9], d = e[10], f = e[11], m = e[12], x = e[13], v = e[14], g = e[15], p = u * v * c - x * d * c + x * l * f - a * v * f - u * l * g + a * d * g, _ = m * d * c - h * v * c - m * l * f + o * v * f + h * l * g - o * d * g, y = h * x * c - m * u * c + m * a * f - o * x * f - h * a * g + o * u * g, b = m * u * l - h * x * l - m * a * d + o * x * d + h * a * v - o * u * v, A = t * p + n * _ + i * y + r * b;
        if (A === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        let L = 1 / A;
        return e[0] = p * L, e[1] = (x * d * r - u * v * r - x * i * f + n * v * f + u * i * g - n * d * g) * L, e[2] = (a * v * r - x * l * r + x * i * c - n * v * c - a * i * g + n * l * g) * L, e[3] = (u * l * r - a * d * r - u * i * c + n * d * c + a * i * f - n * l * f) * L, e[4] = _ * L, e[5] = (h * v * r - m * d * r + m * i * f - t * v * f - h * i * g + t * d * g) * L, e[6] = (m * l * r - o * v * r - m * i * c + t * v * c + o * i * g - t * l * g) * L, e[7] = (o * d * r - h * l * r + h * i * c - t * d * c - o * i * f + t * l * f) * L, e[8] = y * L, e[9] = (m * u * r - h * x * r - m * n * f + t * x * f + h * n * g - t * u * g) * L, e[10] = (o * x * r - m * a * r + m * n * c - t * x * c - o * n * g + t * a * g) * L, e[11] = (h * a * r - o * u * r - h * n * c + t * u * c + o * n * f - t * a * f) * L, e[12] = b * L, e[13] = (h * x * i - m * u * i + m * n * d - t * x * d - h * n * v + t * u * v) * L, e[14] = (m * a * i - o * x * i - m * n * l + t * x * l + o * n * v - t * a * v) * L, e[15] = (o * u * i - h * a * i + h * n * l - t * u * l - o * n * d + t * a * d) * L, this;
    }
    scale(e) {
        let t = this.elements, n = e.x, i = e.y, r = e.z;
        return t[0] *= n, t[4] *= i, t[8] *= r, t[1] *= n, t[5] *= i, t[9] *= r, t[2] *= n, t[6] *= i, t[10] *= r, t[3] *= n, t[7] *= i, t[11] *= r, this;
    }
    getMaxScaleOnAxis() {
        let e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
        return Math.sqrt(Math.max(t, n, i));
    }
    makeTranslation(e, t, n) {
        return this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, n, 0, 0, 0, 1), this;
    }
    makeRotationX(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(1, 0, 0, 0, 0, t, -n, 0, 0, n, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationY(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, 0, n, 0, 0, 1, 0, 0, -n, 0, t, 0, 0, 0, 0, 1), this;
    }
    makeRotationZ(e) {
        let t = Math.cos(e), n = Math.sin(e);
        return this.set(t, -n, 0, 0, n, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
    }
    makeRotationAxis(e, t) {
        let n = Math.cos(t), i = Math.sin(t), r = 1 - n, o = e.x, a = e.y, l = e.z, c = r * o, h = r * a;
        return this.set(c * o + n, c * a - i * l, c * l + i * a, 0, c * a + i * l, h * a + n, h * l - i * o, 0, c * l - i * a, h * l + i * o, r * l * l + n, 0, 0, 0, 0, 1), this;
    }
    makeScale(e, t, n) {
        return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
    }
    makeShear(e, t, n, i, r, o) {
        return this.set(1, n, r, 0, e, 1, o, 0, t, i, 1, 0, 0, 0, 0, 1), this;
    }
    compose(e, t, n) {
        let i = this.elements, r = t._x, o = t._y, a = t._z, l = t._w, c = r + r, h = o + o, u = a + a, d = r * c, f = r * h, m = r * u, x = o * h, v = o * u, g = a * u, p = l * c, _ = l * h, y = l * u, b = n.x, A = n.y, L = n.z;
        return i[0] = (1 - (x + g)) * b, i[1] = (f + y) * b, i[2] = (m - _) * b, i[3] = 0, i[4] = (f - y) * A, i[5] = (1 - (d + g)) * A, i[6] = (v + p) * A, i[7] = 0, i[8] = (m + _) * L, i[9] = (v - p) * L, i[10] = (1 - (d + x)) * L, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1, this;
    }
    decompose(e, t, n) {
        let i = this.elements, r = si.set(i[0], i[1], i[2]).length(), o = si.set(i[4], i[5], i[6]).length(), a = si.set(i[8], i[9], i[10]).length();
        this.determinant() < 0 && (r = -r), e.x = i[12], e.y = i[13], e.z = i[14], It.copy(this);
        let c = 1 / r, h = 1 / o, u = 1 / a;
        return It.elements[0] *= c, It.elements[1] *= c, It.elements[2] *= c, It.elements[4] *= h, It.elements[5] *= h, It.elements[6] *= h, It.elements[8] *= u, It.elements[9] *= u, It.elements[10] *= u, t.setFromRotationMatrix(It), n.x = r, n.y = o, n.z = a, this;
    }
    makePerspective(e, t, n, i, r, o) {
        o === void 0 && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
        let a = this.elements, l = 2 * r / (t - e), c = 2 * r / (n - i), h = (t + e) / (t - e), u = (n + i) / (n - i), d = -(o + r) / (o - r), f = -2 * o * r / (o - r);
        return a[0] = l, a[4] = 0, a[8] = h, a[12] = 0, a[1] = 0, a[5] = c, a[9] = u, a[13] = 0, a[2] = 0, a[6] = 0, a[10] = d, a[14] = f, a[3] = 0, a[7] = 0, a[11] = -1, a[15] = 0, this;
    }
    makeOrthographic(e, t, n, i, r, o) {
        let a = this.elements, l = 1 / (t - e), c = 1 / (n - i), h = 1 / (o - r), u = (t + e) * l, d = (n + i) * c, f = (o + r) * h;
        return a[0] = 2 * l, a[4] = 0, a[8] = 0, a[12] = -u, a[1] = 0, a[5] = 2 * c, a[9] = 0, a[13] = -d, a[2] = 0, a[6] = 0, a[10] = -2 * h, a[14] = -f, a[3] = 0, a[7] = 0, a[11] = 0, a[15] = 1, this;
    }
    equals(e) {
        let t = this.elements, n = e.elements;
        for(let i = 0; i < 16; i++)if (t[i] !== n[i]) return !1;
        return !0;
    }
    fromArray(e, t = 0) {
        for(let n = 0; n < 16; n++)this.elements[n] = e[n + t];
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.elements;
        return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
    }
};
pe.prototype.isMatrix4 = !0;
var si = new M, It = new pe, tf = new M(0, 0, 0), nf = new M(1, 1, 1), pn = new M, Zr = new M, St = new M, _l = new pe, Ml = new gt, Zn = class {
    constructor(e = 0, t = 0, n = 0, i = Zn.DefaultOrder){
        this._x = e, this._y = t, this._z = n, this._order = i;
    }
    get x() {
        return this._x;
    }
    set x(e) {
        this._x = e, this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(e) {
        this._y = e, this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(e) {
        this._z = e, this._onChangeCallback();
    }
    get order() {
        return this._order;
    }
    set order(e) {
        this._order = e, this._onChangeCallback();
    }
    set(e, t, n, i = this._order) {
        return this._x = e, this._y = t, this._z = n, this._order = i, this._onChangeCallback(), this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(e) {
        return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
    }
    setFromRotationMatrix(e, t = this._order, n = !0) {
        let i = e.elements, r = i[0], o = i[4], a = i[8], l = i[1], c = i[5], h = i[9], u = i[2], d = i[6], f = i[10];
        switch(t){
            case "XYZ":
                this._y = Math.asin(mt(a, -1, 1)), Math.abs(a) < .9999999 ? (this._x = Math.atan2(-h, f), this._z = Math.atan2(-o, r)) : (this._x = Math.atan2(d, c), this._z = 0);
                break;
            case "YXZ":
                this._x = Math.asin(-mt(h, -1, 1)), Math.abs(h) < .9999999 ? (this._y = Math.atan2(a, f), this._z = Math.atan2(l, c)) : (this._y = Math.atan2(-u, r), this._z = 0);
                break;
            case "ZXY":
                this._x = Math.asin(mt(d, -1, 1)), Math.abs(d) < .9999999 ? (this._y = Math.atan2(-u, f), this._z = Math.atan2(-o, c)) : (this._y = 0, this._z = Math.atan2(l, r));
                break;
            case "ZYX":
                this._y = Math.asin(-mt(u, -1, 1)), Math.abs(u) < .9999999 ? (this._x = Math.atan2(d, f), this._z = Math.atan2(l, r)) : (this._x = 0, this._z = Math.atan2(-o, c));
                break;
            case "YZX":
                this._z = Math.asin(mt(l, -1, 1)), Math.abs(l) < .9999999 ? (this._x = Math.atan2(-h, c), this._y = Math.atan2(-u, r)) : (this._x = 0, this._y = Math.atan2(a, f));
                break;
            case "XZY":
                this._z = Math.asin(-mt(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(d, c), this._y = Math.atan2(a, r)) : (this._x = Math.atan2(-h, f), this._y = 0);
                break;
            default:
                console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
        }
        return this._order = t, n === !0 && this._onChangeCallback(), this;
    }
    setFromQuaternion(e, t, n) {
        return _l.makeRotationFromQuaternion(e), this.setFromRotationMatrix(_l, t, n);
    }
    setFromVector3(e, t = this._order) {
        return this.set(e.x, e.y, e.z, t);
    }
    reorder(e) {
        return Ml.setFromEuler(this), this.setFromQuaternion(Ml, e);
    }
    equals(e) {
        return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
    }
    fromArray(e) {
        return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
    }
    toVector3(e) {
        return e ? e.set(this._x, this._y, this._z) : new M(this._x, this._y, this._z);
    }
    _onChange(e) {
        return this._onChangeCallback = e, this;
    }
    _onChangeCallback() {}
};
Zn.prototype.isEuler = !0;
Zn.DefaultOrder = "XYZ";
Zn.RotationOrders = [
    "XYZ",
    "YZX",
    "ZXY",
    "XZY",
    "YXZ",
    "ZYX"
];
var Js = class {
    constructor(){
        this.mask = 1;
    }
    set(e) {
        this.mask = (1 << e | 0) >>> 0;
    }
    enable(e) {
        this.mask |= 1 << e | 0;
    }
    enableAll() {
        this.mask = -1;
    }
    toggle(e) {
        this.mask ^= 1 << e | 0;
    }
    disable(e) {
        this.mask &= ~(1 << e | 0);
    }
    disableAll() {
        this.mask = 0;
    }
    test(e) {
        return (this.mask & e.mask) !== 0;
    }
    isEnabled(e) {
        return (this.mask & (1 << e | 0)) !== 0;
    }
}, rf = 0, bl = new M, oi = new gt, Qt = new pe, $r = new M, Zi = new M, sf = new M, of = new gt, wl = new M(1, 0, 0), Sl = new M(0, 1, 0), Tl = new M(0, 0, 1), af = {
    type: "added"
}, El = {
    type: "removed"
}, Ne = class extends En {
    constructor(){
        super();
        Object.defineProperty(this, "id", {
            value: rf++
        }), this.uuid = Et(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Ne.DefaultUp.clone();
        let e = new M, t = new Zn, n = new gt, i = new M(1, 1, 1);
        function r() {
            n.setFromEuler(t, !1);
        }
        function o() {
            t.setFromQuaternion(n, void 0, !1);
        }
        t._onChange(r), n._onChange(o), Object.defineProperties(this, {
            position: {
                configurable: !0,
                enumerable: !0,
                value: e
            },
            rotation: {
                configurable: !0,
                enumerable: !0,
                value: t
            },
            quaternion: {
                configurable: !0,
                enumerable: !0,
                value: n
            },
            scale: {
                configurable: !0,
                enumerable: !0,
                value: i
            },
            modelViewMatrix: {
                value: new pe
            },
            normalMatrix: {
                value: new lt
            }
        }), this.matrix = new pe, this.matrixWorld = new pe, this.matrixAutoUpdate = Ne.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = !1, this.layers = new Js, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
    }
    onBeforeRender() {}
    onAfterRender() {}
    applyMatrix4(e) {
        this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(e) {
        return this.quaternion.premultiply(e), this;
    }
    setRotationFromAxisAngle(e, t) {
        this.quaternion.setFromAxisAngle(e, t);
    }
    setRotationFromEuler(e) {
        this.quaternion.setFromEuler(e, !0);
    }
    setRotationFromMatrix(e) {
        this.quaternion.setFromRotationMatrix(e);
    }
    setRotationFromQuaternion(e) {
        this.quaternion.copy(e);
    }
    rotateOnAxis(e, t) {
        return oi.setFromAxisAngle(e, t), this.quaternion.multiply(oi), this;
    }
    rotateOnWorldAxis(e, t) {
        return oi.setFromAxisAngle(e, t), this.quaternion.premultiply(oi), this;
    }
    rotateX(e) {
        return this.rotateOnAxis(wl, e);
    }
    rotateY(e) {
        return this.rotateOnAxis(Sl, e);
    }
    rotateZ(e) {
        return this.rotateOnAxis(Tl, e);
    }
    translateOnAxis(e, t) {
        return bl.copy(e).applyQuaternion(this.quaternion), this.position.add(bl.multiplyScalar(t)), this;
    }
    translateX(e) {
        return this.translateOnAxis(wl, e);
    }
    translateY(e) {
        return this.translateOnAxis(Sl, e);
    }
    translateZ(e) {
        return this.translateOnAxis(Tl, e);
    }
    localToWorld(e) {
        return e.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(e) {
        return e.applyMatrix4(Qt.copy(this.matrixWorld).invert());
    }
    lookAt(e, t, n) {
        e.isVector3 ? $r.copy(e) : $r.set(e, t, n);
        let i = this.parent;
        this.updateWorldMatrix(!0, !1), Zi.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Qt.lookAt(Zi, $r, this.up) : Qt.lookAt($r, Zi, this.up), this.quaternion.setFromRotationMatrix(Qt), i && (Qt.extractRotation(i.matrixWorld), oi.setFromRotationMatrix(Qt), this.quaternion.premultiply(oi.invert()));
    }
    add(e) {
        if (arguments.length > 1) {
            for(let t = 0; t < arguments.length; t++)this.add(arguments[t]);
            return this;
        }
        return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(af)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
    }
    remove(e) {
        if (arguments.length > 1) {
            for(let n = 0; n < arguments.length; n++)this.remove(arguments[n]);
            return this;
        }
        let t = this.children.indexOf(e);
        return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(El)), this;
    }
    removeFromParent() {
        let e = this.parent;
        return e !== null && e.remove(this), this;
    }
    clear() {
        for(let e = 0; e < this.children.length; e++){
            let t = this.children[e];
            t.parent = null, t.dispatchEvent(El);
        }
        return this.children.length = 0, this;
    }
    attach(e) {
        return this.updateWorldMatrix(!0, !1), Qt.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), Qt.multiply(e.parent.matrixWorld)), e.applyMatrix4(Qt), this.add(e), e.updateWorldMatrix(!1, !0), this;
    }
    getObjectById(e) {
        return this.getObjectByProperty("id", e);
    }
    getObjectByName(e) {
        return this.getObjectByProperty("name", e);
    }
    getObjectByProperty(e, t) {
        if (this[e] === t) return this;
        for(let n = 0, i = this.children.length; n < i; n++){
            let o = this.children[n].getObjectByProperty(e, t);
            if (o !== void 0) return o;
        }
    }
    getWorldPosition(e) {
        return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(e) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Zi, e, sf), e;
    }
    getWorldScale(e) {
        return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Zi, of, e), e;
    }
    getWorldDirection(e) {
        this.updateWorldMatrix(!0, !1);
        let t = this.matrixWorld.elements;
        return e.set(t[8], t[9], t[10]).normalize();
    }
    raycast() {}
    traverse(e) {
        e(this);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++)t[n].traverse(e);
    }
    traverseVisible(e) {
        if (this.visible === !1) return;
        e(this);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++)t[n].traverseVisible(e);
    }
    traverseAncestors(e) {
        let t = this.parent;
        t !== null && (e(t), t.traverseAncestors(e));
    }
    updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
    }
    updateMatrixWorld(e) {
        this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
        let t = this.children;
        for(let n = 0, i = t.length; n < i; n++)t[n].updateMatrixWorld(e);
    }
    updateWorldMatrix(e, t) {
        let n = this.parent;
        if (e === !0 && n !== null && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
            let i = this.children;
            for(let r = 0, o = i.length; r < o; r++)i[r].updateWorldMatrix(!1, !0);
        }
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string", n = {};
        t && (e = {
            geometries: {},
            materials: {},
            textures: {},
            images: {},
            shapes: {},
            skeletons: {},
            animations: {}
        }, n.metadata = {
            version: 4.5,
            type: "Object",
            generator: "Object3D.toJSON"
        });
        let i = {};
        i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === !0 && (i.castShadow = !0), this.receiveShadow === !0 && (i.receiveShadow = !0), this.visible === !1 && (i.visible = !1), this.frustumCulled === !1 && (i.frustumCulled = !1), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), JSON.stringify(this.userData) !== "{}" && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON()));
        function r(a, l) {
            return a[l.uuid] === void 0 && (a[l.uuid] = l.toJSON(e)), l.uuid;
        }
        if (this.isScene) this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && (i.environment = this.environment.toJSON(e).uuid);
        else if (this.isMesh || this.isLine || this.isPoints) {
            i.geometry = r(e.geometries, this.geometry);
            let a = this.geometry.parameters;
            if (a !== void 0 && a.shapes !== void 0) {
                let l = a.shapes;
                if (Array.isArray(l)) for(let c = 0, h = l.length; c < h; c++){
                    let u = l[c];
                    r(e.shapes, u);
                }
                else r(e.shapes, l);
            }
        }
        if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (r(e.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) {
            let a = [];
            for(let l = 0, c = this.material.length; l < c; l++)a.push(r(e.materials, this.material[l]));
            i.material = a;
        } else i.material = r(e.materials, this.material);
        if (this.children.length > 0) {
            i.children = [];
            for(let a = 0; a < this.children.length; a++)i.children.push(this.children[a].toJSON(e).object);
        }
        if (this.animations.length > 0) {
            i.animations = [];
            for(let a = 0; a < this.animations.length; a++){
                let l = this.animations[a];
                i.animations.push(r(e.animations, l));
            }
        }
        if (t) {
            let a = o(e.geometries), l = o(e.materials), c = o(e.textures), h = o(e.images), u = o(e.shapes), d = o(e.skeletons), f = o(e.animations);
            a.length > 0 && (n.geometries = a), l.length > 0 && (n.materials = l), c.length > 0 && (n.textures = c), h.length > 0 && (n.images = h), u.length > 0 && (n.shapes = u), d.length > 0 && (n.skeletons = d), f.length > 0 && (n.animations = f);
        }
        return n.object = i, n;
        function o(a) {
            let l = [];
            for(let c in a){
                let h = a[c];
                delete h.metadata, l.push(h);
            }
            return l;
        }
    }
    clone(e) {
        return new this.constructor().copy(this, e);
    }
    copy(e, t = !0) {
        if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0) for(let n = 0; n < e.children.length; n++){
            let i = e.children[n];
            this.add(i.clone());
        }
        return this;
    }
};
Ne.DefaultUp = new M(0, 1, 0);
Ne.DefaultMatrixAutoUpdate = !0;
Ne.prototype.isObject3D = !0;
var Dt = new M, Kt = new M, Co = new M, en = new M, ai = new M, li = new M, Al = new M, Lo = new M, Ro = new M, Po = new M, nt = class {
    constructor(e = new M, t = new M, n = new M){
        this.a = e, this.b = t, this.c = n;
    }
    static getNormal(e, t, n, i) {
        i.subVectors(n, t), Dt.subVectors(e, t), i.cross(Dt);
        let r = i.lengthSq();
        return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0);
    }
    static getBarycoord(e, t, n, i, r) {
        Dt.subVectors(i, t), Kt.subVectors(n, t), Co.subVectors(e, t);
        let o = Dt.dot(Dt), a = Dt.dot(Kt), l = Dt.dot(Co), c = Kt.dot(Kt), h = Kt.dot(Co), u = o * c - a * a;
        if (u === 0) return r.set(-2, -1, -1);
        let d = 1 / u, f = (c * l - a * h) * d, m = (o * h - a * l) * d;
        return r.set(1 - f - m, m, f);
    }
    static containsPoint(e, t, n, i) {
        return this.getBarycoord(e, t, n, i, en), en.x >= 0 && en.y >= 0 && en.x + en.y <= 1;
    }
    static getUV(e, t, n, i, r, o, a, l) {
        return this.getBarycoord(e, t, n, i, en), l.set(0, 0), l.addScaledVector(r, en.x), l.addScaledVector(o, en.y), l.addScaledVector(a, en.z), l;
    }
    static isFrontFacing(e, t, n, i) {
        return Dt.subVectors(n, t), Kt.subVectors(e, t), Dt.cross(Kt).dot(i) < 0;
    }
    set(e, t, n) {
        return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
    }
    setFromPointsAndIndices(e, t, n, i) {
        return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
    }
    setFromAttributeAndIndices(e, t, n, i) {
        return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, i), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
    }
    getArea() {
        return Dt.subVectors(this.c, this.b), Kt.subVectors(this.a, this.b), Dt.cross(Kt).length() * .5;
    }
    getMidpoint(e) {
        return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(e) {
        return nt.getNormal(this.a, this.b, this.c, e);
    }
    getPlane(e) {
        return e.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(e, t) {
        return nt.getBarycoord(e, this.a, this.b, this.c, t);
    }
    getUV(e, t, n, i, r) {
        return nt.getUV(e, this.a, this.b, this.c, t, n, i, r);
    }
    containsPoint(e) {
        return nt.containsPoint(e, this.a, this.b, this.c);
    }
    isFrontFacing(e) {
        return nt.isFrontFacing(this.a, this.b, this.c, e);
    }
    intersectsBox(e) {
        return e.intersectsTriangle(this);
    }
    closestPointToPoint(e, t) {
        let n = this.a, i = this.b, r = this.c, o, a;
        ai.subVectors(i, n), li.subVectors(r, n), Lo.subVectors(e, n);
        let l = ai.dot(Lo), c = li.dot(Lo);
        if (l <= 0 && c <= 0) return t.copy(n);
        Ro.subVectors(e, i);
        let h = ai.dot(Ro), u = li.dot(Ro);
        if (h >= 0 && u <= h) return t.copy(i);
        let d = l * u - h * c;
        if (d <= 0 && l >= 0 && h <= 0) return o = l / (l - h), t.copy(n).addScaledVector(ai, o);
        Po.subVectors(e, r);
        let f = ai.dot(Po), m = li.dot(Po);
        if (m >= 0 && f <= m) return t.copy(r);
        let x = f * c - l * m;
        if (x <= 0 && c >= 0 && m <= 0) return a = c / (c - m), t.copy(n).addScaledVector(li, a);
        let v = h * m - f * u;
        if (v <= 0 && u - h >= 0 && f - m >= 0) return Al.subVectors(r, i), a = (u - h) / (u - h + (f - m)), t.copy(i).addScaledVector(Al, a);
        let g = 1 / (v + x + d);
        return o = x * g, a = d * g, t.copy(n).addScaledVector(ai, o).addScaledVector(li, a);
    }
    equals(e) {
        return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
    }
}, lf = 0, dt = class extends En {
    constructor(){
        super();
        Object.defineProperty(this, "id", {
            value: lf++
        }), this.uuid = Et(), this.name = "", this.type = "Material", this.fog = !0, this.blending = sr, this.side = Ai, this.vertexColors = !1, this.opacity = 1, this.format = ct, this.transparent = !1, this.blendSrc = Gc, this.blendDst = Vc, this.blendEquation = _i, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = ea, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = Ud, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = vo, this.stencilZFail = vo, this.stencilZPass = vo, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
    }
    get alphaTest() {
        return this._alphaTest;
    }
    set alphaTest(e) {
        this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
    }
    onBuild() {}
    onBeforeRender() {}
    onBeforeCompile() {}
    customProgramCacheKey() {
        return this.onBeforeCompile.toString();
    }
    setValues(e) {
        if (e !== void 0) for(let t in e){
            let n = e[t];
            if (n === void 0) {
                console.warn("THREE.Material: '" + t + "' parameter is undefined.");
                continue;
            }
            if (t === "shading") {
                console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = n === kc;
                continue;
            }
            let i = this[t];
            if (i === void 0) {
                console.warn("THREE." + this.type + ": '" + t + "' is not a property of this material.");
                continue;
            }
            i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[t] = n;
        }
    }
    toJSON(e) {
        let t = e === void 0 || typeof e == "string";
        t && (e = {
            textures: {},
            images: {}
        });
        let n = {
            metadata: {
                version: 4.5,
                type: "Material",
                generator: "Material.toJSON"
            }
        };
        n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== sr && (n.blending = this.blending), this.side !== Ai && (n.side = this.side), this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.format !== ct && (n.format = this.format), this.transparent === !0 && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaToCoverage === !0 && (n.alphaToCoverage = this.alphaToCoverage), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = this.premultipliedAlpha), this.wireframe === !0 && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = this.flatShading), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), JSON.stringify(this.userData) !== "{}" && (n.userData = this.userData);
        function i(r) {
            let o = [];
            for(let a in r){
                let l = r[a];
                delete l.metadata, o.push(l);
            }
            return o;
        }
        if (t) {
            let r = i(e.textures), o = i(e.images);
            r.length > 0 && (n.textures = r), o.length > 0 && (n.images = o);
        }
        return n;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.name = e.name, this.fog = e.fog, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.format = e.format, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
        let t = e.clippingPlanes, n = null;
        if (t !== null) {
            let i = t.length;
            n = new Array(i);
            for(let r = 0; r !== i; ++r)n[r] = t[r].clone();
        }
        return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
};
dt.prototype.isMaterial = !0;
var $c = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
}, Ft = {
    h: 0,
    s: 0,
    l: 0
}, jr = {
    h: 0,
    s: 0,
    l: 0
};
function Io(s, e, t) {
    return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? s + (e - s) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? s + (e - s) * 6 * (2 / 3 - t) : s;
}
function Do(s) {
    return s < .04045 ? s * .0773993808 : Math.pow(s * .9478672986 + .0521327014, 2.4);
}
function Fo(s) {
    return s < .0031308 ? s * 12.92 : 1.055 * Math.pow(s, .41666) - .055;
}
var ae = class {
    constructor(e, t, n){
        return t === void 0 && n === void 0 ? this.set(e) : this.setRGB(e, t, n);
    }
    set(e) {
        return e && e.isColor ? this.copy(e) : typeof e == "number" ? this.setHex(e) : typeof e == "string" && this.setStyle(e), this;
    }
    setScalar(e) {
        return this.r = e, this.g = e, this.b = e, this;
    }
    setHex(e) {
        return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, this;
    }
    setRGB(e, t, n) {
        return this.r = e, this.g = t, this.b = n, this;
    }
    setHSL(e, t, n) {
        if (e = da(e, 1), t = mt(t, 0, 1), n = mt(n, 0, 1), t === 0) this.r = this.g = this.b = n;
        else {
            let i = n <= .5 ? n * (1 + t) : n + t - n * t, r = 2 * n - i;
            this.r = Io(r, i, e + 1 / 3), this.g = Io(r, i, e), this.b = Io(r, i, e - 1 / 3);
        }
        return this;
    }
    setStyle(e) {
        function t(i) {
            i !== void 0 && parseFloat(i) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
        }
        let n;
        if (n = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)) {
            let i, r = n[1], o = n[2];
            switch(r){
                case "rgb":
                case "rgba":
                    if (i = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return this.r = Math.min(255, parseInt(i[1], 10)) / 255, this.g = Math.min(255, parseInt(i[2], 10)) / 255, this.b = Math.min(255, parseInt(i[3], 10)) / 255, t(i[4]), this;
                    if (i = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return this.r = Math.min(100, parseInt(i[1], 10)) / 100, this.g = Math.min(100, parseInt(i[2], 10)) / 100, this.b = Math.min(100, parseInt(i[3], 10)) / 100, t(i[4]), this;
                    break;
                case "hsl":
                case "hsla":
                    if (i = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) {
                        let a = parseFloat(i[1]) / 360, l = parseInt(i[2], 10) / 100, c = parseInt(i[3], 10) / 100;
                        return t(i[4]), this.setHSL(a, l, c);
                    }
                    break;
            }
        } else if (n = /^\#([A-Fa-f\d]+)$/.exec(e)) {
            let i = n[1], r = i.length;
            if (r === 3) return this.r = parseInt(i.charAt(0) + i.charAt(0), 16) / 255, this.g = parseInt(i.charAt(1) + i.charAt(1), 16) / 255, this.b = parseInt(i.charAt(2) + i.charAt(2), 16) / 255, this;
            if (r === 6) return this.r = parseInt(i.charAt(0) + i.charAt(1), 16) / 255, this.g = parseInt(i.charAt(2) + i.charAt(3), 16) / 255, this.b = parseInt(i.charAt(4) + i.charAt(5), 16) / 255, this;
        }
        return e && e.length > 0 ? this.setColorName(e) : this;
    }
    setColorName(e) {
        let t = $c[e.toLowerCase()];
        return t !== void 0 ? this.setHex(t) : console.warn("THREE.Color: Unknown color " + e), this;
    }
    clone() {
        return new this.constructor(this.r, this.g, this.b);
    }
    copy(e) {
        return this.r = e.r, this.g = e.g, this.b = e.b, this;
    }
    copySRGBToLinear(e) {
        return this.r = Do(e.r), this.g = Do(e.g), this.b = Do(e.b), this;
    }
    copyLinearToSRGB(e) {
        return this.r = Fo(e.r), this.g = Fo(e.g), this.b = Fo(e.b), this;
    }
    convertSRGBToLinear() {
        return this.copySRGBToLinear(this), this;
    }
    convertLinearToSRGB() {
        return this.copyLinearToSRGB(this), this;
    }
    getHex() {
        return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
    }
    getHexString() {
        return ("000000" + this.getHex().toString(16)).slice(-6);
    }
    getHSL(e) {
        let t = this.r, n = this.g, i = this.b, r = Math.max(t, n, i), o = Math.min(t, n, i), a, l, c = (o + r) / 2;
        if (o === r) a = 0, l = 0;
        else {
            let h = r - o;
            switch(l = c <= .5 ? h / (r + o) : h / (2 - r - o), r){
                case t:
                    a = (n - i) / h + (n < i ? 6 : 0);
                    break;
                case n:
                    a = (i - t) / h + 2;
                    break;
                case i:
                    a = (t - n) / h + 4;
                    break;
            }
            a /= 6;
        }
        return e.h = a, e.s = l, e.l = c, e;
    }
    getStyle() {
        return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
    }
    offsetHSL(e, t, n) {
        return this.getHSL(Ft), Ft.h += e, Ft.s += t, Ft.l += n, this.setHSL(Ft.h, Ft.s, Ft.l), this;
    }
    add(e) {
        return this.r += e.r, this.g += e.g, this.b += e.b, this;
    }
    addColors(e, t) {
        return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
    }
    addScalar(e) {
        return this.r += e, this.g += e, this.b += e, this;
    }
    sub(e) {
        return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
    }
    multiply(e) {
        return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
    }
    multiplyScalar(e) {
        return this.r *= e, this.g *= e, this.b *= e, this;
    }
    lerp(e, t) {
        return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
    }
    lerpColors(e, t, n) {
        return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
    }
    lerpHSL(e, t) {
        this.getHSL(Ft), e.getHSL(jr);
        let n = or(Ft.h, jr.h, t), i = or(Ft.s, jr.s, t), r = or(Ft.l, jr.l, t);
        return this.setHSL(n, i, r), this;
    }
    equals(e) {
        return e.r === this.r && e.g === this.g && e.b === this.b;
    }
    fromArray(e, t = 0) {
        return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
    }
    toArray(e = [], t = 0) {
        return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
    }
    fromBufferAttribute(e, t) {
        return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), e.normalized === !0 && (this.r /= 255, this.g /= 255, this.b /= 255), this;
    }
    toJSON() {
        return this.getHex();
    }
};
ae.NAMES = $c;
ae.prototype.isColor = !0;
ae.prototype.r = 1;
ae.prototype.g = 1;
ae.prototype.b = 1;
var hn = class extends dt {
    constructor(e){
        super();
        this.type = "MeshBasicMaterial", this.color = new ae(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Vs, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this;
    }
};
hn.prototype.isMeshBasicMaterial = !0;
var Je = new M, Qr = new X, Ue = class {
    constructor(e, t, n){
        if (Array.isArray(e)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n === !0, this.usage = hr, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0;
    }
    onUploadCallback() {}
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    copy(e) {
        return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this;
    }
    copyAt(e, t, n) {
        e *= this.itemSize, n *= t.itemSize;
        for(let i = 0, r = this.itemSize; i < r; i++)this.array[e + i] = t.array[n + i];
        return this;
    }
    copyArray(e) {
        return this.array.set(e), this;
    }
    copyColorsArray(e) {
        let t = this.array, n = 0;
        for(let i = 0, r = e.length; i < r; i++){
            let o = e[i];
            o === void 0 && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i), o = new ae), t[n++] = o.r, t[n++] = o.g, t[n++] = o.b;
        }
        return this;
    }
    copyVector2sArray(e) {
        let t = this.array, n = 0;
        for(let i = 0, r = e.length; i < r; i++){
            let o = e[i];
            o === void 0 && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i), o = new X), t[n++] = o.x, t[n++] = o.y;
        }
        return this;
    }
    copyVector3sArray(e) {
        let t = this.array, n = 0;
        for(let i = 0, r = e.length; i < r; i++){
            let o = e[i];
            o === void 0 && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i), o = new M), t[n++] = o.x, t[n++] = o.y, t[n++] = o.z;
        }
        return this;
    }
    copyVector4sArray(e) {
        let t = this.array, n = 0;
        for(let i = 0, r = e.length; i < r; i++){
            let o = e[i];
            o === void 0 && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i), o = new Ve), t[n++] = o.x, t[n++] = o.y, t[n++] = o.z, t[n++] = o.w;
        }
        return this;
    }
    applyMatrix3(e) {
        if (this.itemSize === 2) for(let t = 0, n = this.count; t < n; t++)Qr.fromBufferAttribute(this, t), Qr.applyMatrix3(e), this.setXY(t, Qr.x, Qr.y);
        else if (this.itemSize === 3) for(let t = 0, n = this.count; t < n; t++)Je.fromBufferAttribute(this, t), Je.applyMatrix3(e), this.setXYZ(t, Je.x, Je.y, Je.z);
        return this;
    }
    applyMatrix4(e) {
        for(let t = 0, n = this.count; t < n; t++)Je.x = this.getX(t), Je.y = this.getY(t), Je.z = this.getZ(t), Je.applyMatrix4(e), this.setXYZ(t, Je.x, Je.y, Je.z);
        return this;
    }
    applyNormalMatrix(e) {
        for(let t = 0, n = this.count; t < n; t++)Je.x = this.getX(t), Je.y = this.getY(t), Je.z = this.getZ(t), Je.applyNormalMatrix(e), this.setXYZ(t, Je.x, Je.y, Je.z);
        return this;
    }
    transformDirection(e) {
        for(let t = 0, n = this.count; t < n; t++)Je.x = this.getX(t), Je.y = this.getY(t), Je.z = this.getZ(t), Je.transformDirection(e), this.setXYZ(t, Je.x, Je.y, Je.z);
        return this;
    }
    set(e, t = 0) {
        return this.array.set(e, t), this;
    }
    getX(e) {
        return this.array[e * this.itemSize];
    }
    setX(e, t) {
        return this.array[e * this.itemSize] = t, this;
    }
    getY(e) {
        return this.array[e * this.itemSize + 1];
    }
    setY(e, t) {
        return this.array[e * this.itemSize + 1] = t, this;
    }
    getZ(e) {
        return this.array[e * this.itemSize + 2];
    }
    setZ(e, t) {
        return this.array[e * this.itemSize + 2] = t, this;
    }
    getW(e) {
        return this.array[e * this.itemSize + 3];
    }
    setW(e, t) {
        return this.array[e * this.itemSize + 3] = t, this;
    }
    setXY(e, t, n) {
        return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this;
    }
    setXYZ(e, t, n, i) {
        return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this;
    }
    setXYZW(e, t, n, i, r) {
        return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this.array[e + 3] = r, this;
    }
    onUpload(e) {
        return this.onUploadCallback = e, this;
    }
    clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
        let e = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.prototype.slice.call(this.array),
            normalized: this.normalized
        };
        return this.name !== "" && (e.name = this.name), this.usage !== hr && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e;
    }
};
Ue.prototype.isBufferAttribute = !0;
var jc = class extends Ue {
    constructor(e, t, n){
        super(new Int8Array(e), t, n);
    }
}, Qc = class extends Ue {
    constructor(e, t, n){
        super(new Uint8Array(e), t, n);
    }
}, Kc = class extends Ue {
    constructor(e, t, n){
        super(new Uint8ClampedArray(e), t, n);
    }
}, eh = class extends Ue {
    constructor(e, t, n){
        super(new Int16Array(e), t, n);
    }
}, Ys = class extends Ue {
    constructor(e, t, n){
        super(new Uint16Array(e), t, n);
    }
}, th = class extends Ue {
    constructor(e, t, n){
        super(new Int32Array(e), t, n);
    }
}, Zs = class extends Ue {
    constructor(e, t, n){
        super(new Uint32Array(e), t, n);
    }
}, nh = class extends Ue {
    constructor(e, t, n){
        super(new Uint16Array(e), t, n);
    }
};
nh.prototype.isFloat16BufferAttribute = !0;
var de = class extends Ue {
    constructor(e, t, n){
        super(new Float32Array(e), t, n);
    }
}, ih = class extends Ue {
    constructor(e, t, n){
        super(new Float64Array(e), t, n);
    }
}, cf = 0, Rt = new pe, No = new Ne, ci = new M, Tt = new Lt, $i = new Lt, ht = new M, _e = class extends En {
    constructor(){
        super();
        Object.defineProperty(this, "id", {
            value: cf++
        }), this.uuid = Et(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
            start: 0,
            count: 1 / 0
        }, this.userData = {};
    }
    getIndex() {
        return this.index;
    }
    setIndex(e) {
        return Array.isArray(e) ? this.index = new (Yc(e) > 65535 ? Zs : Ys)(e, 1) : this.index = e, this;
    }
    getAttribute(e) {
        return this.attributes[e];
    }
    setAttribute(e, t) {
        return this.attributes[e] = t, this;
    }
    deleteAttribute(e) {
        return delete this.attributes[e], this;
    }
    hasAttribute(e) {
        return this.attributes[e] !== void 0;
    }
    addGroup(e, t, n = 0) {
        this.groups.push({
            start: e,
            count: t,
            materialIndex: n
        });
    }
    clearGroups() {
        this.groups = [];
    }
    setDrawRange(e, t) {
        this.drawRange.start = e, this.drawRange.count = t;
    }
    applyMatrix4(e) {
        let t = this.attributes.position;
        t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
        let n = this.attributes.normal;
        if (n !== void 0) {
            let r = new lt().getNormalMatrix(e);
            n.applyNormalMatrix(r), n.needsUpdate = !0;
        }
        let i = this.attributes.tangent;
        return i !== void 0 && (i.transformDirection(e), i.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
    }
    applyQuaternion(e) {
        return Rt.makeRotationFromQuaternion(e), this.applyMatrix4(Rt), this;
    }
    rotateX(e) {
        return Rt.makeRotationX(e), this.applyMatrix4(Rt), this;
    }
    rotateY(e) {
        return Rt.makeRotationY(e), this.applyMatrix4(Rt), this;
    }
    rotateZ(e) {
        return Rt.makeRotationZ(e), this.applyMatrix4(Rt), this;
    }
    translate(e, t, n) {
        return Rt.makeTranslation(e, t, n), this.applyMatrix4(Rt), this;
    }
    scale(e, t, n) {
        return Rt.makeScale(e, t, n), this.applyMatrix4(Rt), this;
    }
    lookAt(e) {
        return No.lookAt(e), No.updateMatrix(), this.applyMatrix4(No.matrix), this;
    }
    center() {
        return this.computeBoundingBox(), this.boundingBox.getCenter(ci).negate(), this.translate(ci.x, ci.y, ci.z), this;
    }
    setFromPoints(e) {
        let t = [];
        for(let n = 0, i = e.length; n < i; n++){
            let r = e[n];
            t.push(r.x, r.y, r.z || 0);
        }
        return this.setAttribute("position", new de(t, 3)), this;
    }
    computeBoundingBox() {
        this.boundingBox === null && (this.boundingBox = new Lt);
        let e = this.attributes.position, t = this.morphAttributes.position;
        if (e && e.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(new M(-1 / 0, -1 / 0, -1 / 0), new M(1 / 0, 1 / 0, 1 / 0));
            return;
        }
        if (e !== void 0) {
            if (this.boundingBox.setFromBufferAttribute(e), t) for(let n = 0, i = t.length; n < i; n++){
                let r = t[n];
                Tt.setFromBufferAttribute(r), this.morphTargetsRelative ? (ht.addVectors(this.boundingBox.min, Tt.min), this.boundingBox.expandByPoint(ht), ht.addVectors(this.boundingBox.max, Tt.max), this.boundingBox.expandByPoint(ht)) : (this.boundingBox.expandByPoint(Tt.min), this.boundingBox.expandByPoint(Tt.max));
            }
        } else this.boundingBox.makeEmpty();
        (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
        this.boundingSphere === null && (this.boundingSphere = new An);
        let e = this.attributes.position, t = this.morphAttributes.position;
        if (e && e.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new M, 1 / 0);
            return;
        }
        if (e) {
            let n = this.boundingSphere.center;
            if (Tt.setFromBufferAttribute(e), t) for(let r = 0, o = t.length; r < o; r++){
                let a = t[r];
                $i.setFromBufferAttribute(a), this.morphTargetsRelative ? (ht.addVectors(Tt.min, $i.min), Tt.expandByPoint(ht), ht.addVectors(Tt.max, $i.max), Tt.expandByPoint(ht)) : (Tt.expandByPoint($i.min), Tt.expandByPoint($i.max));
            }
            Tt.getCenter(n);
            let i = 0;
            for(let r = 0, o = e.count; r < o; r++)ht.fromBufferAttribute(e, r), i = Math.max(i, n.distanceToSquared(ht));
            if (t) for(let r = 0, o = t.length; r < o; r++){
                let a = t[r], l = this.morphTargetsRelative;
                for(let c = 0, h = a.count; c < h; c++)ht.fromBufferAttribute(a, c), l && (ci.fromBufferAttribute(e, c), ht.add(ci)), i = Math.max(i, n.distanceToSquared(ht));
            }
            this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
    }
    computeTangents() {
        let e = this.index, t = this.attributes;
        if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
            console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
            return;
        }
        let n = e.array, i = t.position.array, r = t.normal.array, o = t.uv.array, a = i.length / 3;
        t.tangent === void 0 && this.setAttribute("tangent", new Ue(new Float32Array(4 * a), 4));
        let l = t.tangent.array, c = [], h = [];
        for(let B = 0; B < a; B++)c[B] = new M, h[B] = new M;
        let u = new M, d = new M, f = new M, m = new X, x = new X, v = new X, g = new M, p = new M;
        function _(B, P, w) {
            u.fromArray(i, B * 3), d.fromArray(i, P * 3), f.fromArray(i, w * 3), m.fromArray(o, B * 2), x.fromArray(o, P * 2), v.fromArray(o, w * 2), d.sub(u), f.sub(u), x.sub(m), v.sub(m);
            let E = 1 / (x.x * v.y - v.x * x.y);
            !isFinite(E) || (g.copy(d).multiplyScalar(v.y).addScaledVector(f, -x.y).multiplyScalar(E), p.copy(f).multiplyScalar(x.x).addScaledVector(d, -v.x).multiplyScalar(E), c[B].add(g), c[P].add(g), c[w].add(g), h[B].add(p), h[P].add(p), h[w].add(p));
        }
        let y = this.groups;
        y.length === 0 && (y = [
            {
                start: 0,
                count: n.length
            }
        ]);
        for(let B = 0, P = y.length; B < P; ++B){
            let w = y[B], E = w.start, D = w.count;
            for(let U = E, F = E + D; U < F; U += 3)_(n[U + 0], n[U + 1], n[U + 2]);
        }
        let b = new M, A = new M, L = new M, I = new M;
        function k(B) {
            L.fromArray(r, B * 3), I.copy(L);
            let P = c[B];
            b.copy(P), b.sub(L.multiplyScalar(L.dot(P))).normalize(), A.crossVectors(I, P);
            let E = A.dot(h[B]) < 0 ? -1 : 1;
            l[B * 4] = b.x, l[B * 4 + 1] = b.y, l[B * 4 + 2] = b.z, l[B * 4 + 3] = E;
        }
        for(let B = 0, P = y.length; B < P; ++B){
            let w = y[B], E = w.start, D = w.count;
            for(let U = E, F = E + D; U < F; U += 3)k(n[U + 0]), k(n[U + 1]), k(n[U + 2]);
        }
    }
    computeVertexNormals() {
        let e = this.index, t = this.getAttribute("position");
        if (t !== void 0) {
            let n = this.getAttribute("normal");
            if (n === void 0) n = new Ue(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
            else for(let d = 0, f = n.count; d < f; d++)n.setXYZ(d, 0, 0, 0);
            let i = new M, r = new M, o = new M, a = new M, l = new M, c = new M, h = new M, u = new M;
            if (e) for(let d = 0, f = e.count; d < f; d += 3){
                let m = e.getX(d + 0), x = e.getX(d + 1), v = e.getX(d + 2);
                i.fromBufferAttribute(t, m), r.fromBufferAttribute(t, x), o.fromBufferAttribute(t, v), h.subVectors(o, r), u.subVectors(i, r), h.cross(u), a.fromBufferAttribute(n, m), l.fromBufferAttribute(n, x), c.fromBufferAttribute(n, v), a.add(h), l.add(h), c.add(h), n.setXYZ(m, a.x, a.y, a.z), n.setXYZ(x, l.x, l.y, l.z), n.setXYZ(v, c.x, c.y, c.z);
            }
            else for(let d = 0, f = t.count; d < f; d += 3)i.fromBufferAttribute(t, d + 0), r.fromBufferAttribute(t, d + 1), o.fromBufferAttribute(t, d + 2), h.subVectors(o, r), u.subVectors(i, r), h.cross(u), n.setXYZ(d + 0, h.x, h.y, h.z), n.setXYZ(d + 1, h.x, h.y, h.z), n.setXYZ(d + 2, h.x, h.y, h.z);
            this.normalizeNormals(), n.needsUpdate = !0;
        }
    }
    merge(e, t) {
        if (!(e && e.isBufferGeometry)) {
            console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", e);
            return;
        }
        t === void 0 && (t = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
        let n = this.attributes;
        for(let i in n){
            if (e.attributes[i] === void 0) continue;
            let o = n[i].array, a = e.attributes[i], l = a.array, c = a.itemSize * t, h = Math.min(l.length, o.length - c);
            for(let u = 0, d = c; u < h; u++, d++)o[d] = l[u];
        }
        return this;
    }
    normalizeNormals() {
        let e = this.attributes.normal;
        for(let t = 0, n = e.count; t < n; t++)ht.fromBufferAttribute(e, t), ht.normalize(), e.setXYZ(t, ht.x, ht.y, ht.z);
    }
    toNonIndexed() {
        function e(a, l) {
            let c = a.array, h = a.itemSize, u = a.normalized, d = new c.constructor(l.length * h), f = 0, m = 0;
            for(let x = 0, v = l.length; x < v; x++){
                a.isInterleavedBufferAttribute ? f = l[x] * a.data.stride + a.offset : f = l[x] * h;
                for(let g = 0; g < h; g++)d[m++] = c[f++];
            }
            return new Ue(d, h, u);
        }
        if (this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
        let t = new _e, n = this.index.array, i = this.attributes;
        for(let a in i){
            let l = i[a], c = e(l, n);
            t.setAttribute(a, c);
        }
        let r = this.morphAttributes;
        for(let a in r){
            let l = [], c = r[a];
            for(let h = 0, u = c.length; h < u; h++){
                let d = c[h], f = e(d, n);
                l.push(f);
            }
            t.morphAttributes[a] = l;
        }
        t.morphTargetsRelative = this.morphTargetsRelative;
        let o = this.groups;
        for(let a = 0, l = o.length; a < l; a++){
            let c = o[a];
            t.addGroup(c.start, c.count, c.materialIndex);
        }
        return t;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.5,
                type: "BufferGeometry",
                generator: "BufferGeometry.toJSON"
            }
        };
        if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
            let l = this.parameters;
            for(let c in l)l[c] !== void 0 && (e[c] = l[c]);
            return e;
        }
        e.data = {
            attributes: {}
        };
        let t = this.index;
        t !== null && (e.data.index = {
            type: t.array.constructor.name,
            array: Array.prototype.slice.call(t.array)
        });
        let n = this.attributes;
        for(let l in n){
            let c = n[l];
            e.data.attributes[l] = c.toJSON(e.data);
        }
        let i = {}, r = !1;
        for(let l in this.morphAttributes){
            let c = this.morphAttributes[l], h = [];
            for(let u = 0, d = c.length; u < d; u++){
                let f = c[u];
                h.push(f.toJSON(e.data));
            }
            h.length > 0 && (i[l] = h, r = !0);
        }
        r && (e.data.morphAttributes = i, e.data.morphTargetsRelative = this.morphTargetsRelative);
        let o = this.groups;
        o.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(o)));
        let a = this.boundingSphere;
        return a !== null && (e.data.boundingSphere = {
            center: a.center.toArray(),
            radius: a.radius
        }), e;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
        let t = {};
        this.name = e.name;
        let n = e.index;
        n !== null && this.setIndex(n.clone(t));
        let i = e.attributes;
        for(let c in i){
            let h = i[c];
            this.setAttribute(c, h.clone(t));
        }
        let r = e.morphAttributes;
        for(let c in r){
            let h = [], u = r[c];
            for(let d = 0, f = u.length; d < f; d++)h.push(u[d].clone(t));
            this.morphAttributes[c] = h;
        }
        this.morphTargetsRelative = e.morphTargetsRelative;
        let o = e.groups;
        for(let c = 0, h = o.length; c < h; c++){
            let u = o[c];
            this.addGroup(u.start, u.count, u.materialIndex);
        }
        let a = e.boundingBox;
        a !== null && (this.boundingBox = a.clone());
        let l = e.boundingSphere;
        return l !== null && (this.boundingSphere = l.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, e.parameters !== void 0 && (this.parameters = Object.assign({}, e.parameters)), this;
    }
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
};
_e.prototype.isBufferGeometry = !0;
var Cl = new pe, hi = new Cn, Bo = new An, mn = new M, gn = new M, xn = new M, zo = new M, Uo = new M, Oo = new M, Kr = new M, es = new M, ts = new M, ns = new X, is = new X, rs = new X, Ho = new M, ss = new M, st = class extends Ne {
    constructor(e = new _e, t = new hn){
        super();
        this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e) {
        return super.copy(e), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = e.material, this.geometry = e.geometry, this;
    }
    updateMorphTargets() {
        let e = this.geometry;
        if (e.isBufferGeometry) {
            let t = e.morphAttributes, n = Object.keys(t);
            if (n.length > 0) {
                let i = t[n[0]];
                if (i !== void 0) {
                    this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                    for(let r = 0, o = i.length; r < o; r++){
                        let a = i[r].name || String(r);
                        this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r;
                    }
                }
            }
        } else {
            let t = e.morphTargets;
            t !== void 0 && t.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
    }
    raycast(e, t) {
        let n = this.geometry, i = this.material, r = this.matrixWorld;
        if (i === void 0 || (n.boundingSphere === null && n.computeBoundingSphere(), Bo.copy(n.boundingSphere), Bo.applyMatrix4(r), e.ray.intersectsSphere(Bo) === !1) || (Cl.copy(r).invert(), hi.copy(e.ray).applyMatrix4(Cl), n.boundingBox !== null && hi.intersectsBox(n.boundingBox) === !1)) return;
        let o;
        if (n.isBufferGeometry) {
            let a = n.index, l = n.attributes.position, c = n.morphAttributes.position, h = n.morphTargetsRelative, u = n.attributes.uv, d = n.attributes.uv2, f = n.groups, m = n.drawRange;
            if (a !== null) if (Array.isArray(i)) for(let x = 0, v = f.length; x < v; x++){
                let g = f[x], p = i[g.materialIndex], _ = Math.max(g.start, m.start), y = Math.min(a.count, Math.min(g.start + g.count, m.start + m.count));
                for(let b = _, A = y; b < A; b += 3){
                    let L = a.getX(b), I = a.getX(b + 1), k = a.getX(b + 2);
                    o = os(this, p, e, hi, l, c, h, u, d, L, I, k), o && (o.faceIndex = Math.floor(b / 3), o.face.materialIndex = g.materialIndex, t.push(o));
                }
            }
            else {
                let x = Math.max(0, m.start), v = Math.min(a.count, m.start + m.count);
                for(let g = x, p = v; g < p; g += 3){
                    let _ = a.getX(g), y = a.getX(g + 1), b = a.getX(g + 2);
                    o = os(this, i, e, hi, l, c, h, u, d, _, y, b), o && (o.faceIndex = Math.floor(g / 3), t.push(o));
                }
            }
            else if (l !== void 0) if (Array.isArray(i)) for(let x = 0, v = f.length; x < v; x++){
                let g = f[x], p = i[g.materialIndex], _ = Math.max(g.start, m.start), y = Math.min(l.count, Math.min(g.start + g.count, m.start + m.count));
                for(let b = _, A = y; b < A; b += 3){
                    let L = b, I = b + 1, k = b + 2;
                    o = os(this, p, e, hi, l, c, h, u, d, L, I, k), o && (o.faceIndex = Math.floor(b / 3), o.face.materialIndex = g.materialIndex, t.push(o));
                }
            }
            else {
                let x = Math.max(0, m.start), v = Math.min(l.count, m.start + m.count);
                for(let g = x, p = v; g < p; g += 3){
                    let _ = g, y = g + 1, b = g + 2;
                    o = os(this, i, e, hi, l, c, h, u, d, _, y, b), o && (o.faceIndex = Math.floor(g / 3), t.push(o));
                }
            }
        } else n.isGeometry && console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
};
st.prototype.isMesh = !0;
function hf(s, e, t, n, i, r, o, a) {
    let l;
    if (e.side === it ? l = n.intersectTriangle(o, r, i, !0, a) : l = n.intersectTriangle(i, r, o, e.side !== Ci, a), l === null) return null;
    ss.copy(a), ss.applyMatrix4(s.matrixWorld);
    let c = t.ray.origin.distanceTo(ss);
    return c < t.near || c > t.far ? null : {
        distance: c,
        point: ss.clone(),
        object: s
    };
}
function os(s, e, t, n, i, r, o, a, l, c, h, u) {
    mn.fromBufferAttribute(i, c), gn.fromBufferAttribute(i, h), xn.fromBufferAttribute(i, u);
    let d = s.morphTargetInfluences;
    if (r && d) {
        Kr.set(0, 0, 0), es.set(0, 0, 0), ts.set(0, 0, 0);
        for(let m = 0, x = r.length; m < x; m++){
            let v = d[m], g = r[m];
            v !== 0 && (zo.fromBufferAttribute(g, c), Uo.fromBufferAttribute(g, h), Oo.fromBufferAttribute(g, u), o ? (Kr.addScaledVector(zo, v), es.addScaledVector(Uo, v), ts.addScaledVector(Oo, v)) : (Kr.addScaledVector(zo.sub(mn), v), es.addScaledVector(Uo.sub(gn), v), ts.addScaledVector(Oo.sub(xn), v)));
        }
        mn.add(Kr), gn.add(es), xn.add(ts);
    }
    s.isSkinnedMesh && (s.boneTransform(c, mn), s.boneTransform(h, gn), s.boneTransform(u, xn));
    let f = hf(s, e, t, n, mn, gn, xn, Ho);
    if (f) {
        a && (ns.fromBufferAttribute(a, c), is.fromBufferAttribute(a, h), rs.fromBufferAttribute(a, u), f.uv = nt.getUV(Ho, mn, gn, xn, ns, is, rs, new X)), l && (ns.fromBufferAttribute(l, c), is.fromBufferAttribute(l, h), rs.fromBufferAttribute(l, u), f.uv2 = nt.getUV(Ho, mn, gn, xn, ns, is, rs, new X));
        let m = {
            a: c,
            b: h,
            c: u,
            normal: new M,
            materialIndex: 0
        };
        nt.getNormal(mn, gn, xn, m.normal), f.face = m;
    }
    return f;
}
var wn = class extends _e {
    constructor(e = 1, t = 1, n = 1, i = 1, r = 1, o = 1){
        super();
        this.type = "BoxGeometry", this.parameters = {
            width: e,
            height: t,
            depth: n,
            widthSegments: i,
            heightSegments: r,
            depthSegments: o
        };
        let a = this;
        i = Math.floor(i), r = Math.floor(r), o = Math.floor(o);
        let l = [], c = [], h = [], u = [], d = 0, f = 0;
        m("z", "y", "x", -1, -1, n, t, e, o, r, 0), m("z", "y", "x", 1, -1, n, t, -e, o, r, 1), m("x", "z", "y", 1, 1, e, n, t, i, o, 2), m("x", "z", "y", 1, -1, e, n, -t, i, o, 3), m("x", "y", "z", 1, -1, e, t, n, i, r, 4), m("x", "y", "z", -1, -1, e, t, -n, i, r, 5), this.setIndex(l), this.setAttribute("position", new de(c, 3)), this.setAttribute("normal", new de(h, 3)), this.setAttribute("uv", new de(u, 2));
        function m(x, v, g, p, _, y, b, A, L, I, k) {
            let B = y / L, P = b / I, w = y / 2, E = b / 2, D = A / 2, U = L + 1, F = I + 1, O = 0, ne = 0, ce = new M;
            for(let V = 0; V < F; V++){
                let W = V * P - E;
                for(let he = 0; he < U; he++){
                    let le = he * B - w;
                    ce[x] = le * p, ce[v] = W * _, ce[g] = D, c.push(ce.x, ce.y, ce.z), ce[x] = 0, ce[v] = 0, ce[g] = A > 0 ? 1 : -1, h.push(ce.x, ce.y, ce.z), u.push(he / L), u.push(1 - V / I), O += 1;
                }
            }
            for(let V = 0; V < I; V++)for(let W = 0; W < L; W++){
                let he = d + W + U * V, le = d + W + U * (V + 1), fe = d + (W + 1) + U * (V + 1), Be = d + (W + 1) + U * V;
                l.push(he, le, Be), l.push(le, fe, Be), ne += 6;
            }
            a.addGroup(f, ne, k), f += ne, d += O;
        }
    }
    static fromJSON(e) {
        return new wn(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
    }
};
function Ri(s) {
    let e = {};
    for(let t in s){
        e[t] = {};
        for(let n in s[t]){
            let i = s[t][n];
            i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? e[t][n] = i.clone() : Array.isArray(i) ? e[t][n] = i.slice() : e[t][n] = i;
        }
    }
    return e;
}
function yt(s) {
    let e = {};
    for(let t = 0; t < s.length; t++){
        let n = Ri(s[t]);
        for(let i in n)e[i] = n[i];
    }
    return e;
}
var uf = {
    clone: Ri,
    merge: yt
}, df = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, ff = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`, sn = class extends dt {
    constructor(e){
        super();
        this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = df, this.fragmentShader = ff, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.extensions = {
            derivatives: !1,
            fragDepth: !1,
            drawBuffers: !1,
            shaderTextureLOD: !1
        }, this.defaultAttributeValues = {
            color: [
                1,
                1,
                1
            ],
            uv: [
                0,
                0
            ],
            uv2: [
                0,
                0
            ]
        }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && (e.attributes !== void 0 && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(e));
    }
    copy(e) {
        return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = Ri(e.uniforms), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        t.glslVersion = this.glslVersion, t.uniforms = {};
        for(let i in this.uniforms){
            let o = this.uniforms[i].value;
            o && o.isTexture ? t.uniforms[i] = {
                type: "t",
                value: o.toJSON(e).uuid
            } : o && o.isColor ? t.uniforms[i] = {
                type: "c",
                value: o.getHex()
            } : o && o.isVector2 ? t.uniforms[i] = {
                type: "v2",
                value: o.toArray()
            } : o && o.isVector3 ? t.uniforms[i] = {
                type: "v3",
                value: o.toArray()
            } : o && o.isVector4 ? t.uniforms[i] = {
                type: "v4",
                value: o.toArray()
            } : o && o.isMatrix3 ? t.uniforms[i] = {
                type: "m3",
                value: o.toArray()
            } : o && o.isMatrix4 ? t.uniforms[i] = {
                type: "m4",
                value: o.toArray()
            } : t.uniforms[i] = {
                value: o
            };
        }
        Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader;
        let n = {};
        for(let i in this.extensions)this.extensions[i] === !0 && (n[i] = !0);
        return Object.keys(n).length > 0 && (t.extensions = n), t;
    }
};
sn.prototype.isShaderMaterial = !0;
var Ir = class extends Ne {
    constructor(){
        super();
        this.type = "Camera", this.matrixWorldInverse = new pe, this.projectionMatrix = new pe, this.projectionMatrixInverse = new pe;
    }
    copy(e, t) {
        return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this;
    }
    getWorldDirection(e) {
        this.updateWorldMatrix(!0, !1);
        let t = this.matrixWorld.elements;
        return e.set(-t[8], -t[9], -t[10]).normalize();
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(e, t) {
        super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
        return new this.constructor().copy(this);
    }
};
Ir.prototype.isCamera = !0;
var ut = class extends Ir {
    constructor(e = 50, t = 1, n = .1, i = 2e3){
        super();
        this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
    }
    copy(e, t) {
        return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
    }
    setFocalLength(e) {
        let t = .5 * this.getFilmHeight() / e;
        this.fov = dr * 2 * Math.atan(t), this.updateProjectionMatrix();
    }
    getFocalLength() {
        let e = Math.tan(Wn * .5 * this.fov);
        return .5 * this.getFilmHeight() / e;
    }
    getEffectiveFOV() {
        return dr * 2 * Math.atan(Math.tan(Wn * .5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    setViewOffset(e, t, n, i, r, o) {
        this.aspect = e / t, this.view === null && (this.view = {
            enabled: !0,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = o, this.updateProjectionMatrix();
    }
    clearViewOffset() {
        this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        let e = this.near, t = e * Math.tan(Wn * .5 * this.fov) / this.zoom, n = 2 * t, i = this.aspect * n, r = -.5 * i, o = this.view;
        if (this.view !== null && this.view.enabled) {
            let l = o.fullWidth, c = o.fullHeight;
            r += o.offsetX * i / l, t -= o.offsetY * n / c, i *= o.width / l, n *= o.height / c;
        }
        let a = this.filmOffset;
        a !== 0 && (r += e * a / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, t, t - n, e, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
    }
};
ut.prototype.isPerspectiveCamera = !0;
var ui = 90, di = 1, $s = class extends Ne {
    constructor(e, t, n){
        super();
        if (this.type = "CubeCamera", n.isWebGLCubeRenderTarget !== !0) {
            console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
            return;
        }
        this.renderTarget = n;
        let i = new ut(ui, di, e, t);
        i.layers = this.layers, i.up.set(0, -1, 0), i.lookAt(new M(1, 0, 0)), this.add(i);
        let r = new ut(ui, di, e, t);
        r.layers = this.layers, r.up.set(0, -1, 0), r.lookAt(new M(-1, 0, 0)), this.add(r);
        let o = new ut(ui, di, e, t);
        o.layers = this.layers, o.up.set(0, 0, 1), o.lookAt(new M(0, 1, 0)), this.add(o);
        let a = new ut(ui, di, e, t);
        a.layers = this.layers, a.up.set(0, 0, -1), a.lookAt(new M(0, -1, 0)), this.add(a);
        let l = new ut(ui, di, e, t);
        l.layers = this.layers, l.up.set(0, -1, 0), l.lookAt(new M(0, 0, 1)), this.add(l);
        let c = new ut(ui, di, e, t);
        c.layers = this.layers, c.up.set(0, -1, 0), c.lookAt(new M(0, 0, -1)), this.add(c);
    }
    update(e, t) {
        this.parent === null && this.updateMatrixWorld();
        let n = this.renderTarget, [i, r, o, a, l, c] = this.children, h = e.xr.enabled, u = e.getRenderTarget();
        e.xr.enabled = !1;
        let d = n.texture.generateMipmaps;
        n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0), e.render(t, i), e.setRenderTarget(n, 1), e.render(t, r), e.setRenderTarget(n, 2), e.render(t, o), e.setRenderTarget(n, 3), e.render(t, a), e.setRenderTarget(n, 4), e.render(t, l), n.texture.generateMipmaps = d, e.setRenderTarget(n, 5), e.render(t, c), e.setRenderTarget(u), e.xr.enabled = h;
    }
}, ki = class extends ot {
    constructor(e, t, n, i, r, o, a, l, c, h){
        e = e !== void 0 ? e : [], t = t !== void 0 ? t : Bi;
        super(e, t, n, i, r, o, a, l, c, h);
        this.flipY = !1;
    }
    get images() {
        return this.image;
    }
    set images(e) {
        this.image = e;
    }
};
ki.prototype.isCubeTexture = !0;
var js = class extends At {
    constructor(e, t, n){
        Number.isInteger(t) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), t = n);
        super(e, e, t);
        t = t || {}, this.texture = new ki(void 0, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.encoding), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : tt, this.texture._needsFlipEnvMap = !1;
    }
    fromEquirectangularTexture(e, t) {
        this.texture.type = t.type, this.texture.format = ct, this.texture.encoding = t.encoding, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
        let n = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        }, i = new wn(5, 5, 5), r = new sn({
            name: "CubemapFromEquirect",
            uniforms: Ri(n.uniforms),
            vertexShader: n.vertexShader,
            fragmentShader: n.fragmentShader,
            side: it,
            blending: vn
        });
        r.uniforms.tEquirect.value = t;
        let o = new st(i, r), a = t.minFilter;
        return t.minFilter === Ui && (t.minFilter = tt), new $s(1, 10, this).update(e, o), t.minFilter = a, o.geometry.dispose(), o.material.dispose(), this;
    }
    clear(e, t, n, i) {
        let r = e.getRenderTarget();
        for(let o = 0; o < 6; o++)e.setRenderTarget(this, o), e.clear(t, n, i);
        e.setRenderTarget(r);
    }
};
js.prototype.isWebGLCubeRenderTarget = !0;
var ko = new M, pf = new M, mf = new lt, Wt = class {
    constructor(e = new M(1, 0, 0), t = 0){
        this.normal = e, this.constant = t;
    }
    set(e, t) {
        return this.normal.copy(e), this.constant = t, this;
    }
    setComponents(e, t, n, i) {
        return this.normal.set(e, t, n), this.constant = i, this;
    }
    setFromNormalAndCoplanarPoint(e, t) {
        return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
    }
    setFromCoplanarPoints(e, t, n) {
        let i = ko.subVectors(n, t).cross(pf.subVectors(e, t)).normalize();
        return this.setFromNormalAndCoplanarPoint(i, e), this;
    }
    copy(e) {
        return this.normal.copy(e.normal), this.constant = e.constant, this;
    }
    normalize() {
        let e = 1 / this.normal.length();
        return this.normal.multiplyScalar(e), this.constant *= e, this;
    }
    negate() {
        return this.constant *= -1, this.normal.negate(), this;
    }
    distanceToPoint(e) {
        return this.normal.dot(e) + this.constant;
    }
    distanceToSphere(e) {
        return this.distanceToPoint(e.center) - e.radius;
    }
    projectPoint(e, t) {
        return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e);
    }
    intersectLine(e, t) {
        let n = e.delta(ko), i = this.normal.dot(n);
        if (i === 0) return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
        let r = -(e.start.dot(this.normal) + this.constant) / i;
        return r < 0 || r > 1 ? null : t.copy(n).multiplyScalar(r).add(e.start);
    }
    intersectsLine(e) {
        let t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
        return t < 0 && n > 0 || n < 0 && t > 0;
    }
    intersectsBox(e) {
        return e.intersectsPlane(this);
    }
    intersectsSphere(e) {
        return e.intersectsPlane(this);
    }
    coplanarPoint(e) {
        return e.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(e, t) {
        let n = t || mf.getNormalMatrix(e), i = this.coplanarPoint(ko).applyMatrix4(e), r = this.normal.applyMatrix3(n).normalize();
        return this.constant = -i.dot(r), this;
    }
    translate(e) {
        return this.constant -= e.dot(this.normal), this;
    }
    equals(e) {
        return e.normal.equals(this.normal) && e.constant === this.constant;
    }
    clone() {
        return new this.constructor().copy(this);
    }
};
Wt.prototype.isPlane = !0;
var fi = new An, as = new M, Dr = class {
    constructor(e = new Wt, t = new Wt, n = new Wt, i = new Wt, r = new Wt, o = new Wt){
        this.planes = [
            e,
            t,
            n,
            i,
            r,
            o
        ];
    }
    set(e, t, n, i, r, o) {
        let a = this.planes;
        return a[0].copy(e), a[1].copy(t), a[2].copy(n), a[3].copy(i), a[4].copy(r), a[5].copy(o), this;
    }
    copy(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++)t[n].copy(e.planes[n]);
        return this;
    }
    setFromProjectionMatrix(e) {
        let t = this.planes, n = e.elements, i = n[0], r = n[1], o = n[2], a = n[3], l = n[4], c = n[5], h = n[6], u = n[7], d = n[8], f = n[9], m = n[10], x = n[11], v = n[12], g = n[13], p = n[14], _ = n[15];
        return t[0].setComponents(a - i, u - l, x - d, _ - v).normalize(), t[1].setComponents(a + i, u + l, x + d, _ + v).normalize(), t[2].setComponents(a + r, u + c, x + f, _ + g).normalize(), t[3].setComponents(a - r, u - c, x - f, _ - g).normalize(), t[4].setComponents(a - o, u - h, x - m, _ - p).normalize(), t[5].setComponents(a + o, u + h, x + m, _ + p).normalize(), this;
    }
    intersectsObject(e) {
        let t = e.geometry;
        return t.boundingSphere === null && t.computeBoundingSphere(), fi.copy(t.boundingSphere).applyMatrix4(e.matrixWorld), this.intersectsSphere(fi);
    }
    intersectsSprite(e) {
        return fi.center.set(0, 0, 0), fi.radius = .7071067811865476, fi.applyMatrix4(e.matrixWorld), this.intersectsSphere(fi);
    }
    intersectsSphere(e) {
        let t = this.planes, n = e.center, i = -e.radius;
        for(let r = 0; r < 6; r++)if (t[r].distanceToPoint(n) < i) return !1;
        return !0;
    }
    intersectsBox(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++){
            let i = t[n];
            if (as.x = i.normal.x > 0 ? e.max.x : e.min.x, as.y = i.normal.y > 0 ? e.max.y : e.min.y, as.z = i.normal.z > 0 ? e.max.z : e.min.z, i.distanceToPoint(as) < 0) return !1;
        }
        return !0;
    }
    containsPoint(e) {
        let t = this.planes;
        for(let n = 0; n < 6; n++)if (t[n].distanceToPoint(e) < 0) return !1;
        return !0;
    }
    clone() {
        return new this.constructor().copy(this);
    }
};
function rh() {
    let s = null, e = !1, t = null, n = null;
    function i(r, o) {
        t(r, o), n = s.requestAnimationFrame(i);
    }
    return {
        start: function() {
            e !== !0 && t !== null && (n = s.requestAnimationFrame(i), e = !0);
        },
        stop: function() {
            s.cancelAnimationFrame(n), e = !1;
        },
        setAnimationLoop: function(r) {
            t = r;
        },
        setContext: function(r) {
            s = r;
        }
    };
}
function gf(s, e) {
    let t = e.isWebGL2, n = new WeakMap;
    function i(c, h) {
        let u = c.array, d = c.usage, f = s.createBuffer();
        s.bindBuffer(h, f), s.bufferData(h, u, d), c.onUploadCallback();
        let m = 5126;
        return u instanceof Float32Array ? m = 5126 : u instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : u instanceof Uint16Array ? c.isFloat16BufferAttribute ? t ? m = 5131 : console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.") : m = 5123 : u instanceof Int16Array ? m = 5122 : u instanceof Uint32Array ? m = 5125 : u instanceof Int32Array ? m = 5124 : u instanceof Int8Array ? m = 5120 : (u instanceof Uint8Array || u instanceof Uint8ClampedArray) && (m = 5121), {
            buffer: f,
            type: m,
            bytesPerElement: u.BYTES_PER_ELEMENT,
            version: c.version
        };
    }
    function r(c, h, u) {
        let d = h.array, f = h.updateRange;
        s.bindBuffer(u, c), f.count === -1 ? s.bufferSubData(u, 0, d) : (t ? s.bufferSubData(u, f.offset * d.BYTES_PER_ELEMENT, d, f.offset, f.count) : s.bufferSubData(u, f.offset * d.BYTES_PER_ELEMENT, d.subarray(f.offset, f.offset + f.count)), f.count = -1);
    }
    function o(c) {
        return c.isInterleavedBufferAttribute && (c = c.data), n.get(c);
    }
    function a(c) {
        c.isInterleavedBufferAttribute && (c = c.data);
        let h = n.get(c);
        h && (s.deleteBuffer(h.buffer), n.delete(c));
    }
    function l(c, h) {
        if (c.isGLBufferAttribute) {
            let d = n.get(c);
            (!d || d.version < c.version) && n.set(c, {
                buffer: c.buffer,
                type: c.type,
                bytesPerElement: c.elementSize,
                version: c.version
            });
            return;
        }
        c.isInterleavedBufferAttribute && (c = c.data);
        let u = n.get(c);
        u === void 0 ? n.set(c, i(c, h)) : u.version < c.version && (r(u.buffer, c, h), u.version = c.version);
    }
    return {
        get: o,
        remove: a,
        update: l
    };
}
var Pi = class extends _e {
    constructor(e = 1, t = 1, n = 1, i = 1){
        super();
        this.type = "PlaneGeometry", this.parameters = {
            width: e,
            height: t,
            widthSegments: n,
            heightSegments: i
        };
        let r = e / 2, o = t / 2, a = Math.floor(n), l = Math.floor(i), c = a + 1, h = l + 1, u = e / a, d = t / l, f = [], m = [], x = [], v = [];
        for(let g = 0; g < h; g++){
            let p = g * d - o;
            for(let _ = 0; _ < c; _++){
                let y = _ * u - r;
                m.push(y, -p, 0), x.push(0, 0, 1), v.push(_ / a), v.push(1 - g / l);
            }
        }
        for(let g = 0; g < l; g++)for(let p = 0; p < a; p++){
            let _ = p + c * g, y = p + c * (g + 1), b = p + 1 + c * (g + 1), A = p + 1 + c * g;
            f.push(_, y, A), f.push(y, b, A);
        }
        this.setIndex(f), this.setAttribute("position", new de(m, 3)), this.setAttribute("normal", new de(x, 3)), this.setAttribute("uv", new de(v, 2));
    }
    static fromJSON(e) {
        return new Pi(e.width, e.height, e.widthSegments, e.heightSegments);
    }
}, xf = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`, yf = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, vf = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, _f = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, Mf = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, bf = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, wf = "vec3 transformed = vec3( position );", Sf = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, Tf = `vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`, Ef = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, Af = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, Cf = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, Lf = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, Rf = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, Pf = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, If = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, Df = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, Ff = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, Nf = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`, Bf = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		return texture2D( envMap, uv ).rgb;
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, zf = `vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, Uf = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, Of = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`, Hf = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, kf = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, Gf = "gl_FragColor = linearToOutputTexel( gl_FragColor );", Vf = `vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, Wf = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
		envColor = envMapTexelToLinear( envColor );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, qf = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, Xf = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, Jf = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, Yf = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, Zf = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, $f = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, jf = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, Qf = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, Kf = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`, ep = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		lightMapIrradiance *= PI;
	#endif
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, tp = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, np = `vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );
		#endif
	}
	#pragma unroll_loop_end
#endif`, ip = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, rp = `#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec;
			#ifdef ENVMAP_MODE_REFLECTION
				reflectVec = reflect( - viewDir, normal );
				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			#else
				reflectVec = refract( - viewDir, normal, refractionRatio );
			#endif
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`, sp = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, op = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`, ap = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, lp = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`, cp = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`, hp = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, up = `
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, dp = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, fp = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`, pp = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, mp = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, gp = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, xp = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, yp = `#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`, vp = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, _p = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, Mp = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, bp = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`, wp = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, Sp = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, Tp = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform vec2 morphTargetsTextureSize;
		vec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {
			float texelIndex = float( vertexIndex * stride + offset );
			float y = floor( texelIndex / morphTargetsTextureSize.x );
			float x = texelIndex - y * morphTargetsTextureSize.x;
			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );
			return texture( morphTargetsTexture, morphUV ).xyz;
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, Ep = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			#ifndef USE_MORPHNORMALS
				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];
			#else
				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];
			#endif
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, Ap = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`, Cp = `#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, Lp = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, Rp = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, Pp = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, Ip = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`, Dp = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`, Fp = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`, Np = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`, Bp = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, zp = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`, Up = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, Op = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, Hp = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, kp = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, Gp = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`, Vp = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, Wp = `#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, qp = `#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, Xp = `#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`, Jp = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, Yp = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, Zp = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`, $p = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, jp = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, Qp = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, Kp = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, em = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, tm = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, nm = `#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationColor, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );
#endif`, im = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( float roughness, float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef TEXTURE_LOD_EXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,
		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,
		vec3 attenuationColor, float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`, rm = `#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`, sm = `#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`, om = `#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`, am = `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`, lm = `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`, cm = `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`, hm = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`, um = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, dm = `uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, fm = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, pm = `#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, mm = `#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, gm = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, xm = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, ym = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, vm = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, _m = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, Mm = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, bm = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, wm = `#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, Sm = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Tm = `#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Em = `uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Am = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, Cm = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Lm = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`, Rm = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`, Pm = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Im = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Dm = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, Fm = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Nm = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Bm = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, zm = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, Um = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Om = `#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Hm = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, km = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, Gm = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, Fe = {
    alphamap_fragment: xf,
    alphamap_pars_fragment: yf,
    alphatest_fragment: vf,
    alphatest_pars_fragment: _f,
    aomap_fragment: Mf,
    aomap_pars_fragment: bf,
    begin_vertex: wf,
    beginnormal_vertex: Sf,
    bsdfs: Tf,
    bumpmap_pars_fragment: Ef,
    clipping_planes_fragment: Af,
    clipping_planes_pars_fragment: Cf,
    clipping_planes_pars_vertex: Lf,
    clipping_planes_vertex: Rf,
    color_fragment: Pf,
    color_pars_fragment: If,
    color_pars_vertex: Df,
    color_vertex: Ff,
    common: Nf,
    cube_uv_reflection_fragment: Bf,
    defaultnormal_vertex: zf,
    displacementmap_pars_vertex: Uf,
    displacementmap_vertex: Of,
    emissivemap_fragment: Hf,
    emissivemap_pars_fragment: kf,
    encodings_fragment: Gf,
    encodings_pars_fragment: Vf,
    envmap_fragment: Wf,
    envmap_common_pars_fragment: qf,
    envmap_pars_fragment: Xf,
    envmap_pars_vertex: Jf,
    envmap_physical_pars_fragment: rp,
    envmap_vertex: Yf,
    fog_vertex: Zf,
    fog_pars_vertex: $f,
    fog_fragment: jf,
    fog_pars_fragment: Qf,
    gradientmap_pars_fragment: Kf,
    lightmap_fragment: ep,
    lightmap_pars_fragment: tp,
    lights_lambert_vertex: np,
    lights_pars_begin: ip,
    lights_toon_fragment: sp,
    lights_toon_pars_fragment: op,
    lights_phong_fragment: ap,
    lights_phong_pars_fragment: lp,
    lights_physical_fragment: cp,
    lights_physical_pars_fragment: hp,
    lights_fragment_begin: up,
    lights_fragment_maps: dp,
    lights_fragment_end: fp,
    logdepthbuf_fragment: pp,
    logdepthbuf_pars_fragment: mp,
    logdepthbuf_pars_vertex: gp,
    logdepthbuf_vertex: xp,
    map_fragment: yp,
    map_pars_fragment: vp,
    map_particle_fragment: _p,
    map_particle_pars_fragment: Mp,
    metalnessmap_fragment: bp,
    metalnessmap_pars_fragment: wp,
    morphnormal_vertex: Sp,
    morphtarget_pars_vertex: Tp,
    morphtarget_vertex: Ep,
    normal_fragment_begin: Ap,
    normal_fragment_maps: Cp,
    normal_pars_fragment: Lp,
    normal_pars_vertex: Rp,
    normal_vertex: Pp,
    normalmap_pars_fragment: Ip,
    clearcoat_normal_fragment_begin: Dp,
    clearcoat_normal_fragment_maps: Fp,
    clearcoat_pars_fragment: Np,
    output_fragment: Bp,
    packing: zp,
    premultiplied_alpha_fragment: Up,
    project_vertex: Op,
    dithering_fragment: Hp,
    dithering_pars_fragment: kp,
    roughnessmap_fragment: Gp,
    roughnessmap_pars_fragment: Vp,
    shadowmap_pars_fragment: Wp,
    shadowmap_pars_vertex: qp,
    shadowmap_vertex: Xp,
    shadowmask_pars_fragment: Jp,
    skinbase_vertex: Yp,
    skinning_pars_vertex: Zp,
    skinning_vertex: $p,
    skinnormal_vertex: jp,
    specularmap_fragment: Qp,
    specularmap_pars_fragment: Kp,
    tonemapping_fragment: em,
    tonemapping_pars_fragment: tm,
    transmission_fragment: nm,
    transmission_pars_fragment: im,
    uv_pars_fragment: rm,
    uv_pars_vertex: sm,
    uv_vertex: om,
    uv2_pars_fragment: am,
    uv2_pars_vertex: lm,
    uv2_vertex: cm,
    worldpos_vertex: hm,
    background_vert: um,
    background_frag: dm,
    cube_vert: fm,
    cube_frag: pm,
    depth_vert: mm,
    depth_frag: gm,
    distanceRGBA_vert: xm,
    distanceRGBA_frag: ym,
    equirect_vert: vm,
    equirect_frag: _m,
    linedashed_vert: Mm,
    linedashed_frag: bm,
    meshbasic_vert: wm,
    meshbasic_frag: Sm,
    meshlambert_vert: Tm,
    meshlambert_frag: Em,
    meshmatcap_vert: Am,
    meshmatcap_frag: Cm,
    meshnormal_vert: Lm,
    meshnormal_frag: Rm,
    meshphong_vert: Pm,
    meshphong_frag: Im,
    meshphysical_vert: Dm,
    meshphysical_frag: Fm,
    meshtoon_vert: Nm,
    meshtoon_frag: Bm,
    points_vert: zm,
    points_frag: Um,
    shadow_vert: Om,
    shadow_frag: Hm,
    sprite_vert: km,
    sprite_frag: Gm
}, ie = {
    common: {
        diffuse: {
            value: new ae(16777215)
        },
        opacity: {
            value: 1
        },
        map: {
            value: null
        },
        uvTransform: {
            value: new lt
        },
        uv2Transform: {
            value: new lt
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: .98
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalScale: {
            value: new X(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 25e-5
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2e3
        },
        fogColor: {
            value: new ae(16777215)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {},
                color: {}
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {}
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        spotShadowMap: {
            value: []
        },
        spotShadowMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                decay: {},
                distance: {}
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {}
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {},
                skyColor: {},
                groundColor: {}
            }
        },
        rectAreaLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                width: {},
                height: {}
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: new ae(16777215)
        },
        opacity: {
            value: 1
        },
        size: {
            value: 1
        },
        scale: {
            value: 1
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new lt
        }
    },
    sprite: {
        diffuse: {
            value: new ae(16777215)
        },
        opacity: {
            value: 1
        },
        center: {
            value: new X(.5, .5)
        },
        rotation: {
            value: 0
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new lt
        }
    }
}, qt = {
    basic: {
        uniforms: yt([
            ie.common,
            ie.specularmap,
            ie.envmap,
            ie.aomap,
            ie.lightmap,
            ie.fog
        ]),
        vertexShader: Fe.meshbasic_vert,
        fragmentShader: Fe.meshbasic_frag
    },
    lambert: {
        uniforms: yt([
            ie.common,
            ie.specularmap,
            ie.envmap,
            ie.aomap,
            ie.lightmap,
            ie.emissivemap,
            ie.fog,
            ie.lights,
            {
                emissive: {
                    value: new ae(0)
                }
            }
        ]),
        vertexShader: Fe.meshlambert_vert,
        fragmentShader: Fe.meshlambert_frag
    },
    phong: {
        uniforms: yt([
            ie.common,
            ie.specularmap,
            ie.envmap,
            ie.aomap,
            ie.lightmap,
            ie.emissivemap,
            ie.bumpmap,
            ie.normalmap,
            ie.displacementmap,
            ie.fog,
            ie.lights,
            {
                emissive: {
                    value: new ae(0)
                },
                specular: {
                    value: new ae(1118481)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: Fe.meshphong_vert,
        fragmentShader: Fe.meshphong_frag
    },
    standard: {
        uniforms: yt([
            ie.common,
            ie.envmap,
            ie.aomap,
            ie.lightmap,
            ie.emissivemap,
            ie.bumpmap,
            ie.normalmap,
            ie.displacementmap,
            ie.roughnessmap,
            ie.metalnessmap,
            ie.fog,
            ie.lights,
            {
                emissive: {
                    value: new ae(0)
                },
                roughness: {
                    value: 1
                },
                metalness: {
                    value: 0
                },
                envMapIntensity: {
                    value: 1
                }
            }
        ]),
        vertexShader: Fe.meshphysical_vert,
        fragmentShader: Fe.meshphysical_frag
    },
    toon: {
        uniforms: yt([
            ie.common,
            ie.aomap,
            ie.lightmap,
            ie.emissivemap,
            ie.bumpmap,
            ie.normalmap,
            ie.displacementmap,
            ie.gradientmap,
            ie.fog,
            ie.lights,
            {
                emissive: {
                    value: new ae(0)
                }
            }
        ]),
        vertexShader: Fe.meshtoon_vert,
        fragmentShader: Fe.meshtoon_frag
    },
    matcap: {
        uniforms: yt([
            ie.common,
            ie.bumpmap,
            ie.normalmap,
            ie.displacementmap,
            ie.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: Fe.meshmatcap_vert,
        fragmentShader: Fe.meshmatcap_frag
    },
    points: {
        uniforms: yt([
            ie.points,
            ie.fog
        ]),
        vertexShader: Fe.points_vert,
        fragmentShader: Fe.points_frag
    },
    dashed: {
        uniforms: yt([
            ie.common,
            ie.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: Fe.linedashed_vert,
        fragmentShader: Fe.linedashed_frag
    },
    depth: {
        uniforms: yt([
            ie.common,
            ie.displacementmap
        ]),
        vertexShader: Fe.depth_vert,
        fragmentShader: Fe.depth_frag
    },
    normal: {
        uniforms: yt([
            ie.common,
            ie.bumpmap,
            ie.normalmap,
            ie.displacementmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: Fe.meshnormal_vert,
        fragmentShader: Fe.meshnormal_frag
    },
    sprite: {
        uniforms: yt([
            ie.sprite,
            ie.fog
        ]),
        vertexShader: Fe.sprite_vert,
        fragmentShader: Fe.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: new lt
            },
            t2D: {
                value: null
            }
        },
        vertexShader: Fe.background_vert,
        fragmentShader: Fe.background_frag
    },
    cube: {
        uniforms: yt([
            ie.envmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: Fe.cube_vert,
        fragmentShader: Fe.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: Fe.equirect_vert,
        fragmentShader: Fe.equirect_frag
    },
    distanceRGBA: {
        uniforms: yt([
            ie.common,
            ie.displacementmap,
            {
                referencePosition: {
                    value: new M
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1e3
                }
            }
        ]),
        vertexShader: Fe.distanceRGBA_vert,
        fragmentShader: Fe.distanceRGBA_frag
    },
    shadow: {
        uniforms: yt([
            ie.lights,
            ie.fog,
            {
                color: {
                    value: new ae(0)
                },
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: Fe.shadow_vert,
        fragmentShader: Fe.shadow_frag
    }
};
qt.physical = {
    uniforms: yt([
        qt.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatNormalScale: {
                value: new X(1, 1)
            },
            clearcoatNormalMap: {
                value: null
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: new ae(0)
            },
            sheenColorMap: {
                value: null
            },
            sheenRoughness: {
                value: 0
            },
            sheenRoughnessMap: {
                value: null
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionSamplerSize: {
                value: new X
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: new ae(0)
            },
            specularIntensity: {
                value: 0
            },
            specularIntensityMap: {
                value: null
            },
            specularColor: {
                value: new ae(1, 1, 1)
            },
            specularColorMap: {
                value: null
            }
        }
    ]),
    vertexShader: Fe.meshphysical_vert,
    fragmentShader: Fe.meshphysical_frag
};
function Vm(s, e, t, n, i) {
    let r = new ae(0), o = 0, a, l, c = null, h = 0, u = null;
    function d(m, x) {
        let v = !1, g = x.isScene === !0 ? x.background : null;
        g && g.isTexture && (g = e.get(g));
        let p = s.xr, _ = p.getSession && p.getSession();
        _ && _.environmentBlendMode === "additive" && (g = null), g === null ? f(r, o) : g && g.isColor && (f(g, 1), v = !0), (s.autoClear || v) && s.clear(s.autoClearColor, s.autoClearDepth, s.autoClearStencil), g && (g.isCubeTexture || g.mapping === Pr) ? (l === void 0 && (l = new st(new wn(1, 1, 1), new sn({
            name: "BackgroundCubeMaterial",
            uniforms: Ri(qt.cube.uniforms),
            vertexShader: qt.cube.vertexShader,
            fragmentShader: qt.cube.fragmentShader,
            side: it,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
        })), l.geometry.deleteAttribute("normal"), l.geometry.deleteAttribute("uv"), l.onBeforeRender = function(y, b, A) {
            this.matrixWorld.copyPosition(A.matrixWorld);
        }, Object.defineProperty(l.material, "envMap", {
            get: function() {
                return this.uniforms.envMap.value;
            }
        }), n.update(l)), l.material.uniforms.envMap.value = g, l.material.uniforms.flipEnvMap.value = g.isCubeTexture && g.isRenderTargetTexture === !1 ? -1 : 1, (c !== g || h !== g.version || u !== s.toneMapping) && (l.material.needsUpdate = !0, c = g, h = g.version, u = s.toneMapping), m.unshift(l, l.geometry, l.material, 0, 0, null)) : g && g.isTexture && (a === void 0 && (a = new st(new Pi(2, 2), new sn({
            name: "BackgroundMaterial",
            uniforms: Ri(qt.background.uniforms),
            vertexShader: qt.background.vertexShader,
            fragmentShader: qt.background.fragmentShader,
            side: Ai,
            depthTest: !1,
            depthWrite: !1,
            fog: !1
        })), a.geometry.deleteAttribute("normal"), Object.defineProperty(a.material, "map", {
            get: function() {
                return this.uniforms.t2D.value;
            }
        }), n.update(a)), a.material.uniforms.t2D.value = g, g.matrixAutoUpdate === !0 && g.updateMatrix(), a.material.uniforms.uvTransform.value.copy(g.matrix), (c !== g || h !== g.version || u !== s.toneMapping) && (a.material.needsUpdate = !0, c = g, h = g.version, u = s.toneMapping), m.unshift(a, a.geometry, a.material, 0, 0, null));
    }
    function f(m, x) {
        t.buffers.color.setClear(m.r, m.g, m.b, x, i);
    }
    return {
        getClearColor: function() {
            return r;
        },
        setClearColor: function(m, x = 1) {
            r.set(m), o = x, f(r, o);
        },
        getClearAlpha: function() {
            return o;
        },
        setClearAlpha: function(m) {
            o = m, f(r, o);
        },
        render: d
    };
}
function Wm(s, e, t, n) {
    let i = s.getParameter(34921), r = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), o = n.isWebGL2 || r !== null, a = {}, l = x(null), c = l;
    function h(E, D, U, F, O) {
        let ne = !1;
        if (o) {
            let ce = m(F, U, D);
            c !== ce && (c = ce, d(c.object)), ne = v(F, O), ne && g(F, O);
        } else {
            let ce = D.wireframe === !0;
            (c.geometry !== F.id || c.program !== U.id || c.wireframe !== ce) && (c.geometry = F.id, c.program = U.id, c.wireframe = ce, ne = !0);
        }
        E.isInstancedMesh === !0 && (ne = !0), O !== null && t.update(O, 34963), ne && (L(E, D, U, F), O !== null && s.bindBuffer(34963, t.get(O).buffer));
    }
    function u() {
        return n.isWebGL2 ? s.createVertexArray() : r.createVertexArrayOES();
    }
    function d(E) {
        return n.isWebGL2 ? s.bindVertexArray(E) : r.bindVertexArrayOES(E);
    }
    function f(E) {
        return n.isWebGL2 ? s.deleteVertexArray(E) : r.deleteVertexArrayOES(E);
    }
    function m(E, D, U) {
        let F = U.wireframe === !0, O = a[E.id];
        O === void 0 && (O = {}, a[E.id] = O);
        let ne = O[D.id];
        ne === void 0 && (ne = {}, O[D.id] = ne);
        let ce = ne[F];
        return ce === void 0 && (ce = x(u()), ne[F] = ce), ce;
    }
    function x(E) {
        let D = [], U = [], F = [];
        for(let O = 0; O < i; O++)D[O] = 0, U[O] = 0, F[O] = 0;
        return {
            geometry: null,
            program: null,
            wireframe: !1,
            newAttributes: D,
            enabledAttributes: U,
            attributeDivisors: F,
            object: E,
            attributes: {},
            index: null
        };
    }
    function v(E, D) {
        let U = c.attributes, F = E.attributes, O = 0;
        for(let ne in F){
            let ce = U[ne], V = F[ne];
            if (ce === void 0 || ce.attribute !== V || ce.data !== V.data) return !0;
            O++;
        }
        return c.attributesNum !== O || c.index !== D;
    }
    function g(E, D) {
        let U = {}, F = E.attributes, O = 0;
        for(let ne in F){
            let ce = F[ne], V = {};
            V.attribute = ce, ce.data && (V.data = ce.data), U[ne] = V, O++;
        }
        c.attributes = U, c.attributesNum = O, c.index = D;
    }
    function p() {
        let E = c.newAttributes;
        for(let D = 0, U = E.length; D < U; D++)E[D] = 0;
    }
    function _(E) {
        y(E, 0);
    }
    function y(E, D) {
        let U = c.newAttributes, F = c.enabledAttributes, O = c.attributeDivisors;
        U[E] = 1, F[E] === 0 && (s.enableVertexAttribArray(E), F[E] = 1), O[E] !== D && ((n.isWebGL2 ? s : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](E, D), O[E] = D);
    }
    function b() {
        let E = c.newAttributes, D = c.enabledAttributes;
        for(let U = 0, F = D.length; U < F; U++)D[U] !== E[U] && (s.disableVertexAttribArray(U), D[U] = 0);
    }
    function A(E, D, U, F, O, ne) {
        n.isWebGL2 === !0 && (U === 5124 || U === 5125) ? s.vertexAttribIPointer(E, D, U, O, ne) : s.vertexAttribPointer(E, D, U, F, O, ne);
    }
    function L(E, D, U, F) {
        if (n.isWebGL2 === !1 && (E.isInstancedMesh || F.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null) return;
        p();
        let O = F.attributes, ne = U.getAttributes(), ce = D.defaultAttributeValues;
        for(let V in ne){
            let W = ne[V];
            if (W.location >= 0) {
                let he = O[V];
                if (he === void 0 && (V === "instanceMatrix" && E.instanceMatrix && (he = E.instanceMatrix), V === "instanceColor" && E.instanceColor && (he = E.instanceColor)), he !== void 0) {
                    let le = he.normalized, fe = he.itemSize, Be = t.get(he);
                    if (Be === void 0) continue;
                    let Y = Be.buffer, Ce = Be.type, ye = Be.bytesPerElement;
                    if (he.isInterleavedBufferAttribute) {
                        let ge = he.data, xe = ge.stride, Oe = he.offset;
                        if (ge && ge.isInstancedInterleavedBuffer) {
                            for(let G = 0; G < W.locationSize; G++)y(W.location + G, ge.meshPerAttribute);
                            E.isInstancedMesh !== !0 && F._maxInstanceCount === void 0 && (F._maxInstanceCount = ge.meshPerAttribute * ge.count);
                        } else for(let G = 0; G < W.locationSize; G++)_(W.location + G);
                        s.bindBuffer(34962, Y);
                        for(let G = 0; G < W.locationSize; G++)A(W.location + G, fe / W.locationSize, Ce, le, xe * ye, (Oe + fe / W.locationSize * G) * ye);
                    } else {
                        if (he.isInstancedBufferAttribute) {
                            for(let ge = 0; ge < W.locationSize; ge++)y(W.location + ge, he.meshPerAttribute);
                            E.isInstancedMesh !== !0 && F._maxInstanceCount === void 0 && (F._maxInstanceCount = he.meshPerAttribute * he.count);
                        } else for(let ge = 0; ge < W.locationSize; ge++)_(W.location + ge);
                        s.bindBuffer(34962, Y);
                        for(let ge = 0; ge < W.locationSize; ge++)A(W.location + ge, fe / W.locationSize, Ce, le, fe * ye, fe / W.locationSize * ge * ye);
                    }
                } else if (ce !== void 0) {
                    let le = ce[V];
                    if (le !== void 0) switch(le.length){
                        case 2:
                            s.vertexAttrib2fv(W.location, le);
                            break;
                        case 3:
                            s.vertexAttrib3fv(W.location, le);
                            break;
                        case 4:
                            s.vertexAttrib4fv(W.location, le);
                            break;
                        default:
                            s.vertexAttrib1fv(W.location, le);
                    }
                }
            }
        }
        b();
    }
    function I() {
        P();
        for(let E in a){
            let D = a[E];
            for(let U in D){
                let F = D[U];
                for(let O in F)f(F[O].object), delete F[O];
                delete D[U];
            }
            delete a[E];
        }
    }
    function k(E) {
        if (a[E.id] === void 0) return;
        let D = a[E.id];
        for(let U in D){
            let F = D[U];
            for(let O in F)f(F[O].object), delete F[O];
            delete D[U];
        }
        delete a[E.id];
    }
    function B(E) {
        for(let D in a){
            let U = a[D];
            if (U[E.id] === void 0) continue;
            let F = U[E.id];
            for(let O in F)f(F[O].object), delete F[O];
            delete U[E.id];
        }
    }
    function P() {
        w(), c !== l && (c = l, d(c.object));
    }
    function w() {
        l.geometry = null, l.program = null, l.wireframe = !1;
    }
    return {
        setup: h,
        reset: P,
        resetDefaultState: w,
        dispose: I,
        releaseStatesOfGeometry: k,
        releaseStatesOfProgram: B,
        initAttributes: p,
        enableAttribute: _,
        disableUnusedAttributes: b
    };
}
function qm(s, e, t, n) {
    let i = n.isWebGL2, r;
    function o(c) {
        r = c;
    }
    function a(c, h) {
        s.drawArrays(r, c, h), t.update(h, r, 1);
    }
    function l(c, h, u) {
        if (u === 0) return;
        let d, f;
        if (i) d = s, f = "drawArraysInstanced";
        else if (d = e.get("ANGLE_instanced_arrays"), f = "drawArraysInstancedANGLE", d === null) {
            console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
        }
        d[f](r, c, h, u), t.update(h, r, u);
    }
    this.setMode = o, this.render = a, this.renderInstances = l;
}
function Xm(s, e, t) {
    let n;
    function i() {
        if (n !== void 0) return n;
        if (e.has("EXT_texture_filter_anisotropic") === !0) {
            let L = e.get("EXT_texture_filter_anisotropic");
            n = s.getParameter(L.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else n = 0;
        return n;
    }
    function r(L) {
        if (L === "highp") {
            if (s.getShaderPrecisionFormat(35633, 36338).precision > 0 && s.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp";
            L = "mediump";
        }
        return L === "mediump" && s.getShaderPrecisionFormat(35633, 36337).precision > 0 && s.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp";
    }
    let o = typeof WebGL2RenderingContext < "u" && s instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext < "u" && s instanceof WebGL2ComputeRenderingContext, a = t.precision !== void 0 ? t.precision : "highp", l = r(a);
    l !== a && (console.warn("THREE.WebGLRenderer:", a, "not supported, using", l, "instead."), a = l);
    let c = o || e.has("WEBGL_draw_buffers"), h = t.logarithmicDepthBuffer === !0, u = s.getParameter(34930), d = s.getParameter(35660), f = s.getParameter(3379), m = s.getParameter(34076), x = s.getParameter(34921), v = s.getParameter(36347), g = s.getParameter(36348), p = s.getParameter(36349), _ = d > 0, y = o || e.has("OES_texture_float"), b = _ && y, A = o ? s.getParameter(36183) : 0;
    return {
        isWebGL2: o,
        drawBuffers: c,
        getMaxAnisotropy: i,
        getMaxPrecision: r,
        precision: a,
        logarithmicDepthBuffer: h,
        maxTextures: u,
        maxVertexTextures: d,
        maxTextureSize: f,
        maxCubemapSize: m,
        maxAttributes: x,
        maxVertexUniforms: v,
        maxVaryings: g,
        maxFragmentUniforms: p,
        vertexTextures: _,
        floatFragmentTextures: y,
        floatVertexTextures: b,
        maxSamples: A
    };
}
function Jm(s) {
    let e = this, t = null, n = 0, i = !1, r = !1, o = new Wt, a = new lt, l = {
        value: null,
        needsUpdate: !1
    };
    this.uniform = l, this.numPlanes = 0, this.numIntersection = 0, this.init = function(u, d, f) {
        let m = u.length !== 0 || d || n !== 0 || i;
        return i = d, t = h(u, f, 0), n = u.length, m;
    }, this.beginShadows = function() {
        r = !0, h(null);
    }, this.endShadows = function() {
        r = !1, c();
    }, this.setState = function(u, d, f) {
        let m = u.clippingPlanes, x = u.clipIntersection, v = u.clipShadows, g = s.get(u);
        if (!i || m === null || m.length === 0 || r && !v) r ? h(null) : c();
        else {
            let p = r ? 0 : n, _ = p * 4, y = g.clippingState || null;
            l.value = y, y = h(m, d, _, f);
            for(let b = 0; b !== _; ++b)y[b] = t[b];
            g.clippingState = y, this.numIntersection = x ? this.numPlanes : 0, this.numPlanes += p;
        }
    };
    function c() {
        l.value !== t && (l.value = t, l.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
    }
    function h(u, d, f, m) {
        let x = u !== null ? u.length : 0, v = null;
        if (x !== 0) {
            if (v = l.value, m !== !0 || v === null) {
                let g = f + x * 4, p = d.matrixWorldInverse;
                a.getNormalMatrix(p), (v === null || v.length < g) && (v = new Float32Array(g));
                for(let _ = 0, y = f; _ !== x; ++_, y += 4)o.copy(u[_]).applyMatrix4(p, a), o.normal.toArray(v, y), v[y + 3] = o.constant;
            }
            l.value = v, l.needsUpdate = !0;
        }
        return e.numPlanes = x, e.numIntersection = 0, v;
    }
}
function Ym(s) {
    let e = new WeakMap;
    function t(o, a) {
        return a === Ds ? o.mapping = Bi : a === Fs && (o.mapping = zi), o;
    }
    function n(o) {
        if (o && o.isTexture && o.isRenderTargetTexture === !1) {
            let a = o.mapping;
            if (a === Ds || a === Fs) if (e.has(o)) {
                let l = e.get(o).texture;
                return t(l, o.mapping);
            } else {
                let l = o.image;
                if (l && l.height > 0) {
                    let c = s.getRenderTarget(), h = new js(l.height / 2);
                    return h.fromEquirectangularTexture(s, o), e.set(o, h), s.setRenderTarget(c), o.addEventListener("dispose", i), t(h.texture, o.mapping);
                } else return null;
            }
        }
        return o;
    }
    function i(o) {
        let a = o.target;
        a.removeEventListener("dispose", i);
        let l = e.get(a);
        l !== void 0 && (e.delete(a), l.dispose());
    }
    function r() {
        e = new WeakMap;
    }
    return {
        get: n,
        dispose: r
    };
}
var Fr = class extends Ir {
    constructor(e = -1, t = 1, n = 1, i = -1, r = .1, o = 2e3){
        super();
        this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = i, this.near = r, this.far = o, this.updateProjectionMatrix();
    }
    copy(e, t) {
        return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
    }
    setViewOffset(e, t, n, i, r, o) {
        this.view === null && (this.view = {
            enabled: !0,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = o, this.updateProjectionMatrix();
    }
    clearViewOffset() {
        this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        let e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2, r = n - e, o = n + e, a = i + t, l = i - t;
        if (this.view !== null && this.view.enabled) {
            let c = (this.right - this.left) / this.view.fullWidth / this.zoom, h = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            r += c * this.view.offsetX, o = r + c * this.view.width, a -= h * this.view.offsetY, l = a - h * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(r, o, a, l, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
    }
};
Fr.prototype.isOrthographicCamera = !0;
var Gi = class extends sn {
    constructor(e){
        super(e);
        this.type = "RawShaderMaterial";
    }
};
Gi.prototype.isRawShaderMaterial = !0;
var Ei = 4, Mn = 8, Vt = Math.pow(2, Mn), sh = [
    .125,
    .215,
    .35,
    .446,
    .526,
    .582
], oh = Mn - Ei + 1 + sh.length, pi = 20, Hs = {
    [Nt]: 0,
    [Oi]: 1
}, Go = new Fr, { _lodPlanes: ji , _sizeLods: Ll , _sigmas: ls  } = Zm(), Rl = new ae, Vo = null, On = (1 + Math.sqrt(5)) / 2, mi = 1 / On, Pl = [
    new M(1, 1, 1),
    new M(-1, 1, 1),
    new M(1, 1, -1),
    new M(-1, 1, -1),
    new M(0, On, mi),
    new M(0, On, -mi),
    new M(mi, 0, On),
    new M(-mi, 0, On),
    new M(On, mi, 0),
    new M(-On, mi, 0)
], ah = class {
    constructor(e){
        this._renderer = e, this._pingPongRenderTarget = null, this._blurMaterial = $m(pi), this._equirectShader = null, this._cubemapShader = null, this._compileMaterial(this._blurMaterial);
    }
    fromScene(e, t = 0, n = .1, i = 100) {
        Vo = this._renderer.getRenderTarget();
        let r = this._allocateTargets();
        return this._sceneToCubeUV(e, n, i, r), t > 0 && this._blur(r, 0, 0, t), this._applyPMREM(r), this._cleanup(r), r;
    }
    fromEquirectangular(e) {
        return this._fromTexture(e);
    }
    fromCubemap(e) {
        return this._fromTexture(e);
    }
    compileCubemapShader() {
        this._cubemapShader === null && (this._cubemapShader = Fl(), this._compileMaterial(this._cubemapShader));
    }
    compileEquirectangularShader() {
        this._equirectShader === null && (this._equirectShader = Dl(), this._compileMaterial(this._equirectShader));
    }
    dispose() {
        this._blurMaterial.dispose(), this._cubemapShader !== null && this._cubemapShader.dispose(), this._equirectShader !== null && this._equirectShader.dispose();
        for(let e = 0; e < ji.length; e++)ji[e].dispose();
    }
    _cleanup(e) {
        this._pingPongRenderTarget.dispose(), this._renderer.setRenderTarget(Vo), e.scissorTest = !1, cs(e, 0, 0, e.width, e.height);
    }
    _fromTexture(e) {
        Vo = this._renderer.getRenderTarget();
        let t = this._allocateTargets(e);
        return this._textureToCubeUV(e, t), this._applyPMREM(t), this._cleanup(t), t;
    }
    _allocateTargets(e) {
        let t = {
            magFilter: tt,
            minFilter: tt,
            generateMipmaps: !1,
            type: kn,
            format: ct,
            encoding: Nt,
            depthBuffer: !1
        }, n = Il(t);
        return n.depthBuffer = !e, this._pingPongRenderTarget = Il(t), n;
    }
    _compileMaterial(e) {
        let t = new st(ji[0], e);
        this._renderer.compile(t, Go);
    }
    _sceneToCubeUV(e, t, n, i) {
        let a = new ut(90, 1, t, n), l = [
            1,
            -1,
            1,
            1,
            1,
            1
        ], c = [
            1,
            1,
            1,
            -1,
            -1,
            -1
        ], h = this._renderer, u = h.autoClear, d = h.toneMapping;
        h.getClearColor(Rl), h.toneMapping = _n, h.autoClear = !1;
        let f = new hn({
            name: "PMREM.Background",
            side: it,
            depthWrite: !1,
            depthTest: !1
        }), m = new st(new wn, f), x = !1, v = e.background;
        v ? v.isColor && (f.color.copy(v), e.background = null, x = !0) : (f.color.copy(Rl), x = !0);
        for(let g = 0; g < 6; g++){
            let p = g % 3;
            p == 0 ? (a.up.set(0, l[g], 0), a.lookAt(c[g], 0, 0)) : p == 1 ? (a.up.set(0, 0, l[g]), a.lookAt(0, c[g], 0)) : (a.up.set(0, l[g], 0), a.lookAt(0, 0, c[g])), cs(i, p * Vt, g > 2 ? Vt : 0, Vt, Vt), h.setRenderTarget(i), x && h.render(m, a), h.render(e, a);
        }
        m.geometry.dispose(), m.material.dispose(), h.toneMapping = d, h.autoClear = u, e.background = v;
    }
    _setEncoding(e, t) {
        this._renderer.capabilities.isWebGL2 === !0 && t.format === ct && t.type === rn && t.encoding === Oi ? e.value = Hs[Nt] : e.value = Hs[t.encoding];
    }
    _textureToCubeUV(e, t) {
        let n = this._renderer, i = e.mapping === Bi || e.mapping === zi;
        i ? this._cubemapShader == null && (this._cubemapShader = Fl()) : this._equirectShader == null && (this._equirectShader = Dl());
        let r = i ? this._cubemapShader : this._equirectShader, o = new st(ji[0], r), a = r.uniforms;
        a.envMap.value = e, i || a.texelSize.value.set(1 / e.image.width, 1 / e.image.height), this._setEncoding(a.inputEncoding, e), cs(t, 0, 0, 3 * Vt, 2 * Vt), n.setRenderTarget(t), n.render(o, Go);
    }
    _applyPMREM(e) {
        let t = this._renderer, n = t.autoClear;
        t.autoClear = !1;
        for(let i = 1; i < oh; i++){
            let r = Math.sqrt(ls[i] * ls[i] - ls[i - 1] * ls[i - 1]), o = Pl[(i - 1) % Pl.length];
            this._blur(e, i - 1, i, r, o);
        }
        t.autoClear = n;
    }
    _blur(e, t, n, i, r) {
        let o = this._pingPongRenderTarget;
        this._halfBlur(e, o, t, n, i, "latitudinal", r), this._halfBlur(o, e, n, n, i, "longitudinal", r);
    }
    _halfBlur(e, t, n, i, r, o, a) {
        let l = this._renderer, c = this._blurMaterial;
        o !== "latitudinal" && o !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!");
        let h = 3, u = new st(ji[i], c), d = c.uniforms, f = Ll[n] - 1, m = isFinite(r) ? Math.PI / (2 * f) : 2 * Math.PI / (2 * pi - 1), x = r / m, v = isFinite(r) ? 1 + Math.floor(h * x) : pi;
        v > pi && console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${v} samples when the maximum is set to ${pi}`);
        let g = [], p = 0;
        for(let A = 0; A < pi; ++A){
            let L = A / x, I = Math.exp(-L * L / 2);
            g.push(I), A == 0 ? p += I : A < v && (p += 2 * I);
        }
        for(let A = 0; A < g.length; A++)g[A] = g[A] / p;
        d.envMap.value = e.texture, d.samples.value = v, d.weights.value = g, d.latitudinal.value = o === "latitudinal", a && (d.poleAxis.value = a), d.dTheta.value = m, d.mipInt.value = Mn - n;
        let _ = Ll[i], y = 3 * Math.max(0, Vt - 2 * _), b = (i === 0 ? 0 : 2 * Vt) + 2 * _ * (i > Mn - Ei ? i - Mn + Ei : 0);
        cs(t, y, b, 3 * _, 2 * _), l.setRenderTarget(t), l.render(u, Go);
    }
};
function Zm() {
    let s = [], e = [], t = [], n = Mn;
    for(let i = 0; i < oh; i++){
        let r = Math.pow(2, n);
        e.push(r);
        let o = 1 / r;
        i > Mn - Ei ? o = sh[i - Mn + Ei - 1] : i == 0 && (o = 0), t.push(o);
        let a = 1 / (r - 1), l = -a / 2, c = 1 + a / 2, h = [
            l,
            l,
            c,
            l,
            c,
            c,
            l,
            l,
            c,
            c,
            l,
            c
        ], u = 6, d = 6, f = 3, m = 2, x = 1, v = new Float32Array(f * d * u), g = new Float32Array(m * d * u), p = new Float32Array(x * d * u);
        for(let y = 0; y < u; y++){
            let b = y % 3 * 2 / 3 - 1, A = y > 2 ? 0 : -1, L = [
                b,
                A,
                0,
                b + 2 / 3,
                A,
                0,
                b + 2 / 3,
                A + 1,
                0,
                b,
                A,
                0,
                b + 2 / 3,
                A + 1,
                0,
                b,
                A + 1,
                0
            ];
            v.set(L, f * d * y), g.set(h, m * d * y);
            let I = [
                y,
                y,
                y,
                y,
                y,
                y
            ];
            p.set(I, x * d * y);
        }
        let _ = new _e;
        _.setAttribute("position", new Ue(v, f)), _.setAttribute("uv", new Ue(g, m)), _.setAttribute("faceIndex", new Ue(p, x)), s.push(_), n > Ei && n--;
    }
    return {
        _lodPlanes: s,
        _sizeLods: e,
        _sigmas: t
    };
}
function Il(s) {
    let e = new At(3 * Vt, 3 * Vt, s);
    return e.texture.mapping = Pr, e.texture.name = "PMREM.cubeUv", e.scissorTest = !0, e;
}
function cs(s, e, t, n, i) {
    s.viewport.set(e, t, n, i), s.scissor.set(e, t, n, i);
}
function $m(s) {
    let e = new Float32Array(s), t = new M(0, 1, 0);
    return new Gi({
        name: "SphericalGaussianBlur",
        defines: {
            n: s
        },
        uniforms: {
            envMap: {
                value: null
            },
            samples: {
                value: 1
            },
            weights: {
                value: e
            },
            latitudinal: {
                value: !1
            },
            dTheta: {
                value: 0
            },
            mipInt: {
                value: 0
            },
            poleAxis: {
                value: t
            }
        },
        vertexShader: fa(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${pa()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
        blending: vn,
        depthTest: !1,
        depthWrite: !1
    });
}
function Dl() {
    let s = new X(1, 1);
    return new Gi({
        name: "EquirectangularToCubeUV",
        uniforms: {
            envMap: {
                value: null
            },
            texelSize: {
                value: s
            },
            inputEncoding: {
                value: Hs[Nt]
            }
        },
        vertexShader: fa(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${pa()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

			}
		`,
        blending: vn,
        depthTest: !1,
        depthWrite: !1
    });
}
function Fl() {
    return new Gi({
        name: "CubemapToCubeUV",
        uniforms: {
            envMap: {
                value: null
            },
            inputEncoding: {
                value: Hs[Nt]
            }
        },
        vertexShader: fa(),
        fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${pa()}

			void main() {

				gl_FragColor = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) );

			}
		`,
        blending: vn,
        depthTest: !1,
        depthWrite: !1
    });
}
function fa() {
    return `

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function pa() {
    return `

		uniform int inputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else {

				return sRGBToLinear( value );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`;
}
function jm(s) {
    let e = new WeakMap, t = null;
    function n(a) {
        if (a && a.isTexture && a.isRenderTargetTexture === !1) {
            let l = a.mapping, c = l === Ds || l === Fs, h = l === Bi || l === zi;
            if (c || h) {
                if (e.has(a)) return e.get(a).texture;
                {
                    let u = a.image;
                    if (c && u && u.height > 0 || h && u && i(u)) {
                        let d = s.getRenderTarget();
                        t === null && (t = new ah(s));
                        let f = c ? t.fromEquirectangular(a) : t.fromCubemap(a);
                        return e.set(a, f), s.setRenderTarget(d), a.addEventListener("dispose", r), f.texture;
                    } else return null;
                }
            }
        }
        return a;
    }
    function i(a) {
        let l = 0, c = 6;
        for(let h = 0; h < c; h++)a[h] !== void 0 && l++;
        return l === c;
    }
    function r(a) {
        let l = a.target;
        l.removeEventListener("dispose", r);
        let c = e.get(l);
        c !== void 0 && (e.delete(l), c.dispose());
    }
    function o() {
        e = new WeakMap, t !== null && (t.dispose(), t = null);
    }
    return {
        get: n,
        dispose: o
    };
}
function Qm(s) {
    let e = {};
    function t(n) {
        if (e[n] !== void 0) return e[n];
        let i;
        switch(n){
            case "WEBGL_depth_texture":
                i = s.getExtension("WEBGL_depth_texture") || s.getExtension("MOZ_WEBGL_depth_texture") || s.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
            case "EXT_texture_filter_anisotropic":
                i = s.getExtension("EXT_texture_filter_anisotropic") || s.getExtension("MOZ_EXT_texture_filter_anisotropic") || s.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
            case "WEBGL_compressed_texture_s3tc":
                i = s.getExtension("WEBGL_compressed_texture_s3tc") || s.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
            case "WEBGL_compressed_texture_pvrtc":
                i = s.getExtension("WEBGL_compressed_texture_pvrtc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
            default:
                i = s.getExtension(n);
        }
        return e[n] = i, i;
    }
    return {
        has: function(n) {
            return t(n) !== null;
        },
        init: function(n) {
            n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
        },
        get: function(n) {
            let i = t(n);
            return i === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), i;
        }
    };
}
function Km(s, e, t, n) {
    let i = {}, r = new WeakMap;
    function o(u) {
        let d = u.target;
        d.index !== null && e.remove(d.index);
        for(let m in d.attributes)e.remove(d.attributes[m]);
        d.removeEventListener("dispose", o), delete i[d.id];
        let f = r.get(d);
        f && (e.remove(f), r.delete(d)), n.releaseStatesOfGeometry(d), d.isInstancedBufferGeometry === !0 && delete d._maxInstanceCount, t.memory.geometries--;
    }
    function a(u, d) {
        return i[d.id] === !0 || (d.addEventListener("dispose", o), i[d.id] = !0, t.memory.geometries++), d;
    }
    function l(u) {
        let d = u.attributes;
        for(let m in d)e.update(d[m], 34962);
        let f = u.morphAttributes;
        for(let m in f){
            let x = f[m];
            for(let v = 0, g = x.length; v < g; v++)e.update(x[v], 34962);
        }
    }
    function c(u) {
        let d = [], f = u.index, m = u.attributes.position, x = 0;
        if (f !== null) {
            let p = f.array;
            x = f.version;
            for(let _ = 0, y = p.length; _ < y; _ += 3){
                let b = p[_ + 0], A = p[_ + 1], L = p[_ + 2];
                d.push(b, A, A, L, L, b);
            }
        } else {
            let p = m.array;
            x = m.version;
            for(let _ = 0, y = p.length / 3 - 1; _ < y; _ += 3){
                let b = _ + 0, A = _ + 1, L = _ + 2;
                d.push(b, A, A, L, L, b);
            }
        }
        let v = new (Yc(d) > 65535 ? Zs : Ys)(d, 1);
        v.version = x;
        let g = r.get(u);
        g && e.remove(g), r.set(u, v);
    }
    function h(u) {
        let d = r.get(u);
        if (d) {
            let f = u.index;
            f !== null && d.version < f.version && c(u);
        } else c(u);
        return r.get(u);
    }
    return {
        get: a,
        update: l,
        getWireframeAttribute: h
    };
}
function eg(s, e, t, n) {
    let i = n.isWebGL2, r;
    function o(d) {
        r = d;
    }
    let a, l;
    function c(d) {
        a = d.type, l = d.bytesPerElement;
    }
    function h(d, f) {
        s.drawElements(r, f, a, d * l), t.update(f, r, 1);
    }
    function u(d, f, m) {
        if (m === 0) return;
        let x, v;
        if (i) x = s, v = "drawElementsInstanced";
        else if (x = e.get("ANGLE_instanced_arrays"), v = "drawElementsInstancedANGLE", x === null) {
            console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
        }
        x[v](r, f, a, d * l, m), t.update(f, r, m);
    }
    this.setMode = o, this.setIndex = c, this.render = h, this.renderInstances = u;
}
function tg(s) {
    let e = {
        geometries: 0,
        textures: 0
    }, t = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    function n(r, o, a) {
        switch(t.calls++, o){
            case 4:
                t.triangles += a * (r / 3);
                break;
            case 1:
                t.lines += a * (r / 2);
                break;
            case 3:
                t.lines += a * (r - 1);
                break;
            case 2:
                t.lines += a * r;
                break;
            case 0:
                t.points += a * r;
                break;
            default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", o);
                break;
        }
    }
    function i() {
        t.frame++, t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
    }
    return {
        memory: e,
        render: t,
        programs: null,
        autoReset: !0,
        reset: i,
        update: n
    };
}
var Qs = class extends ot {
    constructor(e = null, t = 1, n = 1, i = 1){
        super(null);
        this.image = {
            data: e,
            width: t,
            height: n,
            depth: i
        }, this.magFilter = rt, this.minFilter = rt, this.wrapR = vt, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
};
Qs.prototype.isDataTexture2DArray = !0;
function ng(s, e) {
    return s[0] - e[0];
}
function ig(s, e) {
    return Math.abs(e[1]) - Math.abs(s[1]);
}
function Nl(s, e) {
    let t = 1, n = e.isInterleavedBufferAttribute ? e.data.array : e.array;
    n instanceof Int8Array ? t = 127 : n instanceof Int16Array ? t = 32767 : n instanceof Int32Array ? t = 2147483647 : console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ", n), s.divideScalar(t);
}
function rg(s, e, t) {
    let n = {}, i = new Float32Array(8), r = new WeakMap, o = new M, a = [];
    for(let c = 0; c < 8; c++)a[c] = [
        c,
        0
    ];
    function l(c, h, u, d) {
        let f = c.morphTargetInfluences;
        if (e.isWebGL2 === !0) {
            let m = h.morphAttributes.position.length, x = r.get(h);
            if (x === void 0 || x.count !== m) {
                x !== void 0 && x.texture.dispose();
                let p = h.morphAttributes.normal !== void 0, _ = h.morphAttributes.position, y = h.morphAttributes.normal || [], b = h.attributes.position.count, A = p === !0 ? 2 : 1, L = b * A, I = 1;
                L > e.maxTextureSize && (I = Math.ceil(L / e.maxTextureSize), L = e.maxTextureSize);
                let k = new Float32Array(L * I * 4 * m), B = new Qs(k, L, I, m);
                B.format = ct, B.type = nn, B.needsUpdate = !0;
                let P = A * 4;
                for(let w = 0; w < m; w++){
                    let E = _[w], D = y[w], U = L * I * 4 * w;
                    for(let F = 0; F < E.count; F++){
                        o.fromBufferAttribute(E, F), E.normalized === !0 && Nl(o, E);
                        let O = F * P;
                        k[U + O + 0] = o.x, k[U + O + 1] = o.y, k[U + O + 2] = o.z, k[U + O + 3] = 0, p === !0 && (o.fromBufferAttribute(D, F), D.normalized === !0 && Nl(o, D), k[U + O + 4] = o.x, k[U + O + 5] = o.y, k[U + O + 6] = o.z, k[U + O + 7] = 0);
                    }
                }
                x = {
                    count: m,
                    texture: B,
                    size: new X(L, I)
                }, r.set(h, x);
            }
            let v = 0;
            for(let p = 0; p < f.length; p++)v += f[p];
            let g = h.morphTargetsRelative ? 1 : 1 - v;
            d.getUniforms().setValue(s, "morphTargetBaseInfluence", g), d.getUniforms().setValue(s, "morphTargetInfluences", f), d.getUniforms().setValue(s, "morphTargetsTexture", x.texture, t), d.getUniforms().setValue(s, "morphTargetsTextureSize", x.size);
        } else {
            let m = f === void 0 ? 0 : f.length, x = n[h.id];
            if (x === void 0 || x.length !== m) {
                x = [];
                for(let y = 0; y < m; y++)x[y] = [
                    y,
                    0
                ];
                n[h.id] = x;
            }
            for(let y = 0; y < m; y++){
                let b = x[y];
                b[0] = y, b[1] = f[y];
            }
            x.sort(ig);
            for(let y = 0; y < 8; y++)y < m && x[y][1] ? (a[y][0] = x[y][0], a[y][1] = x[y][1]) : (a[y][0] = Number.MAX_SAFE_INTEGER, a[y][1] = 0);
            a.sort(ng);
            let v = h.morphAttributes.position, g = h.morphAttributes.normal, p = 0;
            for(let y = 0; y < 8; y++){
                let b = a[y], A = b[0], L = b[1];
                A !== Number.MAX_SAFE_INTEGER && L ? (v && h.getAttribute("morphTarget" + y) !== v[A] && h.setAttribute("morphTarget" + y, v[A]), g && h.getAttribute("morphNormal" + y) !== g[A] && h.setAttribute("morphNormal" + y, g[A]), i[y] = L, p += L) : (v && h.hasAttribute("morphTarget" + y) === !0 && h.deleteAttribute("morphTarget" + y), g && h.hasAttribute("morphNormal" + y) === !0 && h.deleteAttribute("morphNormal" + y), i[y] = 0);
            }
            let _ = h.morphTargetsRelative ? 1 : 1 - p;
            d.getUniforms().setValue(s, "morphTargetBaseInfluence", _), d.getUniforms().setValue(s, "morphTargetInfluences", i);
        }
    }
    return {
        update: l
    };
}
function sg(s, e, t, n) {
    let i = new WeakMap;
    function r(l) {
        let c = n.render.frame, h = l.geometry, u = e.get(l, h);
        return i.get(u) !== c && (e.update(u), i.set(u, c)), l.isInstancedMesh && (l.hasEventListener("dispose", a) === !1 && l.addEventListener("dispose", a), t.update(l.instanceMatrix, 34962), l.instanceColor !== null && t.update(l.instanceColor, 34962)), u;
    }
    function o() {
        i = new WeakMap;
    }
    function a(l) {
        let c = l.target;
        c.removeEventListener("dispose", a), t.remove(c.instanceMatrix), c.instanceColor !== null && t.remove(c.instanceColor);
    }
    return {
        update: r,
        dispose: o
    };
}
var ma = class extends ot {
    constructor(e = null, t = 1, n = 1, i = 1){
        super(null);
        this.image = {
            data: e,
            width: t,
            height: n,
            depth: i
        }, this.magFilter = rt, this.minFilter = rt, this.wrapR = vt, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
};
ma.prototype.isDataTexture3D = !0;
var lh = new ot, ch = new Qs, hh = new ma, uh = new ki, Bl = [], zl = [], Ul = new Float32Array(16), Ol = new Float32Array(9), Hl = new Float32Array(4);
function Vi(s, e, t) {
    let n = s[0];
    if (n <= 0 || n > 0) return s;
    let i = e * t, r = Bl[i];
    if (r === void 0 && (r = new Float32Array(i), Bl[i] = r), e !== 0) {
        n.toArray(r, 0);
        for(let o = 1, a = 0; o !== e; ++o)a += t, s[o].toArray(r, a);
    }
    return r;
}
function Mt(s, e) {
    if (s.length !== e.length) return !1;
    for(let t = 0, n = s.length; t < n; t++)if (s[t] !== e[t]) return !1;
    return !0;
}
function _t(s, e) {
    for(let t = 0, n = e.length; t < n; t++)s[t] = e[t];
}
function Ks(s, e) {
    let t = zl[e];
    t === void 0 && (t = new Int32Array(e), zl[e] = t);
    for(let n = 0; n !== e; ++n)t[n] = s.allocateTextureUnit();
    return t;
}
function og(s, e) {
    let t = this.cache;
    t[0] !== e && (s.uniform1f(this.addr, e), t[0] = e);
}
function ag(s, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
    else {
        if (Mt(t, e)) return;
        s.uniform2fv(this.addr, e), _t(t, e);
    }
}
function lg(s, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
    else if (e.r !== void 0) (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (s.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
    else {
        if (Mt(t, e)) return;
        s.uniform3fv(this.addr, e), _t(t, e);
    }
}
function cg(s, e) {
    let t = this.cache;
    if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
    else {
        if (Mt(t, e)) return;
        s.uniform4fv(this.addr, e), _t(t, e);
    }
}
function hg(s, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (Mt(t, e)) return;
        s.uniformMatrix2fv(this.addr, !1, e), _t(t, e);
    } else {
        if (Mt(t, n)) return;
        Hl.set(n), s.uniformMatrix2fv(this.addr, !1, Hl), _t(t, n);
    }
}
function ug(s, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (Mt(t, e)) return;
        s.uniformMatrix3fv(this.addr, !1, e), _t(t, e);
    } else {
        if (Mt(t, n)) return;
        Ol.set(n), s.uniformMatrix3fv(this.addr, !1, Ol), _t(t, n);
    }
}
function dg(s, e) {
    let t = this.cache, n = e.elements;
    if (n === void 0) {
        if (Mt(t, e)) return;
        s.uniformMatrix4fv(this.addr, !1, e), _t(t, e);
    } else {
        if (Mt(t, n)) return;
        Ul.set(n), s.uniformMatrix4fv(this.addr, !1, Ul), _t(t, n);
    }
}
function fg(s, e) {
    let t = this.cache;
    t[0] !== e && (s.uniform1i(this.addr, e), t[0] = e);
}
function pg(s, e) {
    let t = this.cache;
    Mt(t, e) || (s.uniform2iv(this.addr, e), _t(t, e));
}
function mg(s, e) {
    let t = this.cache;
    Mt(t, e) || (s.uniform3iv(this.addr, e), _t(t, e));
}
function gg(s, e) {
    let t = this.cache;
    Mt(t, e) || (s.uniform4iv(this.addr, e), _t(t, e));
}
function xg(s, e) {
    let t = this.cache;
    t[0] !== e && (s.uniform1ui(this.addr, e), t[0] = e);
}
function yg(s, e) {
    let t = this.cache;
    Mt(t, e) || (s.uniform2uiv(this.addr, e), _t(t, e));
}
function vg(s, e) {
    let t = this.cache;
    Mt(t, e) || (s.uniform3uiv(this.addr, e), _t(t, e));
}
function _g(s, e) {
    let t = this.cache;
    Mt(t, e) || (s.uniform4uiv(this.addr, e), _t(t, e));
}
function Mg(s, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.safeSetTexture2D(e || lh, i);
}
function bg(s, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.setTexture3D(e || hh, i);
}
function wg(s, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.safeSetTextureCube(e || uh, i);
}
function Sg(s, e, t) {
    let n = this.cache, i = t.allocateTextureUnit();
    n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.setTexture2DArray(e || ch, i);
}
function Tg(s) {
    switch(s){
        case 5126:
            return og;
        case 35664:
            return ag;
        case 35665:
            return lg;
        case 35666:
            return cg;
        case 35674:
            return hg;
        case 35675:
            return ug;
        case 35676:
            return dg;
        case 5124:
        case 35670:
            return fg;
        case 35667:
        case 35671:
            return pg;
        case 35668:
        case 35672:
            return mg;
        case 35669:
        case 35673:
            return gg;
        case 5125:
            return xg;
        case 36294:
            return yg;
        case 36295:
            return vg;
        case 36296:
            return _g;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return Mg;
        case 35679:
        case 36299:
        case 36307:
            return bg;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return wg;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return Sg;
    }
}
function Eg(s, e) {
    s.uniform1fv(this.addr, e);
}
function Ag(s, e) {
    let t = Vi(e, this.size, 2);
    s.uniform2fv(this.addr, t);
}
function Cg(s, e) {
    let t = Vi(e, this.size, 3);
    s.uniform3fv(this.addr, t);
}
function Lg(s, e) {
    let t = Vi(e, this.size, 4);
    s.uniform4fv(this.addr, t);
}
function Rg(s, e) {
    let t = Vi(e, this.size, 4);
    s.uniformMatrix2fv(this.addr, !1, t);
}
function Pg(s, e) {
    let t = Vi(e, this.size, 9);
    s.uniformMatrix3fv(this.addr, !1, t);
}
function Ig(s, e) {
    let t = Vi(e, this.size, 16);
    s.uniformMatrix4fv(this.addr, !1, t);
}
function Dg(s, e) {
    s.uniform1iv(this.addr, e);
}
function Fg(s, e) {
    s.uniform2iv(this.addr, e);
}
function Ng(s, e) {
    s.uniform3iv(this.addr, e);
}
function Bg(s, e) {
    s.uniform4iv(this.addr, e);
}
function zg(s, e) {
    s.uniform1uiv(this.addr, e);
}
function Ug(s, e) {
    s.uniform2uiv(this.addr, e);
}
function Og(s, e) {
    s.uniform3uiv(this.addr, e);
}
function Hg(s, e) {
    s.uniform4uiv(this.addr, e);
}
function kg(s, e, t) {
    let n = e.length, i = Ks(t, n);
    s.uniform1iv(this.addr, i);
    for(let r = 0; r !== n; ++r)t.safeSetTexture2D(e[r] || lh, i[r]);
}
function Gg(s, e, t) {
    let n = e.length, i = Ks(t, n);
    s.uniform1iv(this.addr, i);
    for(let r = 0; r !== n; ++r)t.setTexture3D(e[r] || hh, i[r]);
}
function Vg(s, e, t) {
    let n = e.length, i = Ks(t, n);
    s.uniform1iv(this.addr, i);
    for(let r = 0; r !== n; ++r)t.safeSetTextureCube(e[r] || uh, i[r]);
}
function Wg(s, e, t) {
    let n = e.length, i = Ks(t, n);
    s.uniform1iv(this.addr, i);
    for(let r = 0; r !== n; ++r)t.setTexture2DArray(e[r] || ch, i[r]);
}
function qg(s) {
    switch(s){
        case 5126:
            return Eg;
        case 35664:
            return Ag;
        case 35665:
            return Cg;
        case 35666:
            return Lg;
        case 35674:
            return Rg;
        case 35675:
            return Pg;
        case 35676:
            return Ig;
        case 5124:
        case 35670:
            return Dg;
        case 35667:
        case 35671:
            return Fg;
        case 35668:
        case 35672:
            return Ng;
        case 35669:
        case 35673:
            return Bg;
        case 5125:
            return zg;
        case 36294:
            return Ug;
        case 36295:
            return Og;
        case 36296:
            return Hg;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return kg;
        case 35679:
        case 36299:
        case 36307:
            return Gg;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return Vg;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return Wg;
    }
}
function Xg(s, e, t) {
    this.id = s, this.addr = t, this.cache = [], this.setValue = Tg(e.type);
}
function dh(s, e, t) {
    this.id = s, this.addr = t, this.cache = [], this.size = e.size, this.setValue = qg(e.type);
}
dh.prototype.updateCache = function(s) {
    let e = this.cache;
    s instanceof Float32Array && e.length !== s.length && (this.cache = new Float32Array(s.length)), _t(e, s);
};
function fh(s) {
    this.id = s, this.seq = [], this.map = {};
}
fh.prototype.setValue = function(s, e, t) {
    let n = this.seq;
    for(let i = 0, r = n.length; i !== r; ++i){
        let o = n[i];
        o.setValue(s, e[o.id], t);
    }
};
var Wo = /(\w+)(\])?(\[|\.)?/g;
function kl(s, e) {
    s.seq.push(e), s.map[e.id] = e;
}
function Jg(s, e, t) {
    let n = s.name, i = n.length;
    for(Wo.lastIndex = 0;;){
        let r = Wo.exec(n), o = Wo.lastIndex, a = r[1], l = r[2] === "]", c = r[3];
        if (l && (a = a | 0), c === void 0 || c === "[" && o + 2 === i) {
            kl(t, c === void 0 ? new Xg(a, s, e) : new dh(a, s, e));
            break;
        } else {
            let u = t.map[a];
            u === void 0 && (u = new fh(a), kl(t, u)), t = u;
        }
    }
}
function bn(s, e) {
    this.seq = [], this.map = {};
    let t = s.getProgramParameter(e, 35718);
    for(let n = 0; n < t; ++n){
        let i = s.getActiveUniform(e, n), r = s.getUniformLocation(e, i.name);
        Jg(i, r, this);
    }
}
bn.prototype.setValue = function(s, e, t, n) {
    let i = this.map[e];
    i !== void 0 && i.setValue(s, t, n);
};
bn.prototype.setOptional = function(s, e, t) {
    let n = e[t];
    n !== void 0 && this.setValue(s, t, n);
};
bn.upload = function(s, e, t, n) {
    for(let i = 0, r = e.length; i !== r; ++i){
        let o = e[i], a = t[o.id];
        a.needsUpdate !== !1 && o.setValue(s, a.value, n);
    }
};
bn.seqWithValue = function(s, e) {
    let t = [];
    for(let n = 0, i = s.length; n !== i; ++n){
        let r = s[n];
        r.id in e && t.push(r);
    }
    return t;
};
function Gl(s, e, t) {
    let n = s.createShader(e);
    return s.shaderSource(n, t), s.compileShader(n), n;
}
var Yg = 0;
function Zg(s) {
    let e = s.split(`
`);
    for(let t = 0; t < e.length; t++)e[t] = t + 1 + ": " + e[t];
    return e.join(`
`);
}
function ph(s) {
    switch(s){
        case Nt:
            return [
                "Linear",
                "( value )"
            ];
        case Oi:
            return [
                "sRGB",
                "( value )"
            ];
        default:
            return console.warn("THREE.WebGLProgram: Unsupported encoding:", s), [
                "Linear",
                "( value )"
            ];
    }
}
function Vl(s, e, t) {
    let n = s.getShaderParameter(e, 35713), i = s.getShaderInfoLog(e).trim();
    return n && i === "" ? "" : t.toUpperCase() + `

` + i + `

` + Zg(s.getShaderSource(e));
}
function Dn(s, e) {
    let t = ph(e);
    return "vec4 " + s + "( vec4 value ) { return " + t[0] + "ToLinear" + t[1] + "; }";
}
function $g(s, e) {
    let t = ph(e);
    return "vec4 " + s + "( vec4 value ) { return LinearTo" + t[0] + t[1] + "; }";
}
function jg(s, e) {
    let t;
    switch(e){
        case Nu:
            t = "Linear";
            break;
        case Bu:
            t = "Reinhard";
            break;
        case zu:
            t = "OptimizedCineon";
            break;
        case Uu:
            t = "ACESFilmic";
            break;
        case Ou:
            t = "Custom";
            break;
        default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
    }
    return "vec3 " + s + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function Qg(s) {
    return [
        s.extensionDerivatives || s.envMapCubeUV || s.bumpMap || s.tangentSpaceNormalMap || s.clearcoatNormalMap || s.flatShading || s.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
        (s.extensionFragDepth || s.logarithmicDepthBuffer) && s.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
        s.extensionDrawBuffers && s.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
        (s.extensionShaderTextureLOD || s.envMap || s.transmission) && s.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ].filter(rr).join(`
`);
}
function Kg(s) {
    let e = [];
    for(let t in s){
        let n = s[t];
        n !== !1 && e.push("#define " + t + " " + n);
    }
    return e.join(`
`);
}
function ex(s, e) {
    let t = {}, n = s.getProgramParameter(e, 35721);
    for(let i = 0; i < n; i++){
        let r = s.getActiveAttrib(e, i), o = r.name, a = 1;
        r.type === 35674 && (a = 2), r.type === 35675 && (a = 3), r.type === 35676 && (a = 4), t[o] = {
            type: r.type,
            location: s.getAttribLocation(e, o),
            locationSize: a
        };
    }
    return t;
}
function rr(s) {
    return s !== "";
}
function Wl(s, e) {
    return s.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function ql(s, e) {
    return s.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
var tx = /^[ \t]*#include +<([\w\d./]+)>/gm;
function ra(s) {
    return s.replace(tx, nx);
}
function nx(s, e) {
    let t = Fe[e];
    if (t === void 0) throw new Error("Can not resolve #include <" + e + ">");
    return ra(t);
}
var ix = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, rx = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function Xl(s) {
    return s.replace(rx, mh).replace(ix, sx);
}
function sx(s, e, t, n) {
    return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."), mh(s, e, t, n);
}
function mh(s, e, t, n) {
    let i = "";
    for(let r = parseInt(e); r < parseInt(t); r++)i += n.replace(/\[\s*i\s*\]/g, "[ " + r + " ]").replace(/UNROLLED_LOOP_INDEX/g, r);
    return i;
}
function Jl(s) {
    let e = "precision " + s.precision + ` float;
precision ` + s.precision + " int;";
    return s.precision === "highp" ? e += `
#define HIGH_PRECISION` : s.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : s.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function ox(s) {
    let e = "SHADOWMAP_TYPE_BASIC";
    return s.shadowMapType === Hc ? e = "SHADOWMAP_TYPE_PCF" : s.shadowMapType === fu ? e = "SHADOWMAP_TYPE_PCF_SOFT" : s.shadowMapType === ir && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function ax(s) {
    let e = "ENVMAP_TYPE_CUBE";
    if (s.envMap) switch(s.envMapMode){
        case Bi:
        case zi:
            e = "ENVMAP_TYPE_CUBE";
            break;
        case Pr:
        case Ws:
            e = "ENVMAP_TYPE_CUBE_UV";
            break;
    }
    return e;
}
function lx(s) {
    let e = "ENVMAP_MODE_REFLECTION";
    if (s.envMap) switch(s.envMapMode){
        case zi:
        case Ws:
            e = "ENVMAP_MODE_REFRACTION";
            break;
    }
    return e;
}
function cx(s) {
    let e = "ENVMAP_BLENDING_NONE";
    if (s.envMap) switch(s.combine){
        case Vs:
            e = "ENVMAP_BLENDING_MULTIPLY";
            break;
        case Du:
            e = "ENVMAP_BLENDING_MIX";
            break;
        case Fu:
            e = "ENVMAP_BLENDING_ADD";
            break;
    }
    return e;
}
function hx(s, e, t, n) {
    let i = s.getContext(), r = t.defines, o = t.vertexShader, a = t.fragmentShader, l = ox(t), c = ax(t), h = lx(t), u = cx(t), d = t.isWebGL2 ? "" : Qg(t), f = Kg(r), m = i.createProgram(), x, v, g = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
    t.isRawShaderMaterial ? (x = [
        f
    ].filter(rr).join(`
`), x.length > 0 && (x += `
`), v = [
        d,
        f
    ].filter(rr).join(`
`), v.length > 0 && (v += `
`)) : (x = [
        Jl(t),
        "#define SHADER_NAME " + t.shaderName,
        f,
        t.instancing ? "#define USE_INSTANCING" : "",
        t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        t.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
        "#define MAX_BONES " + t.maxBones,
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.map ? "#define USE_MAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + h : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMap && t.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        t.normalMap && t.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.displacementMap && t.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
        t.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
        t.vertexTangents ? "#define USE_TANGENT" : "",
        t.vertexColors ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUvs ? "#define USE_UV" : "",
        t.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.skinning ? "#define USE_SKINNING" : "",
        t.useVertexTexture ? "#define BONE_TEXTURE" : "",
        t.morphTargets ? "#define USE_MORPHTARGETS" : "",
        t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
        t.morphTargets && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
        t.morphTargets && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + l : "",
        t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        `
`
    ].filter(rr).join(`
`), v = [
        d,
        Jl(t),
        "#define SHADER_NAME " + t.shaderName,
        f,
        t.useFog && t.fog ? "#define USE_FOG" : "",
        t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
        t.map ? "#define USE_MAP" : "",
        t.matcap ? "#define USE_MATCAP" : "",
        t.envMap ? "#define USE_ENVMAP" : "",
        t.envMap ? "#define " + c : "",
        t.envMap ? "#define " + h : "",
        t.envMap ? "#define " + u : "",
        t.lightMap ? "#define USE_LIGHTMAP" : "",
        t.aoMap ? "#define USE_AOMAP" : "",
        t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        t.bumpMap ? "#define USE_BUMPMAP" : "",
        t.normalMap ? "#define USE_NORMALMAP" : "",
        t.normalMap && t.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
        t.normalMap && t.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
        t.clearcoat ? "#define USE_CLEARCOAT" : "",
        t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        t.specularMap ? "#define USE_SPECULARMAP" : "",
        t.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
        t.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
        t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        t.metalnessMap ? "#define USE_METALNESSMAP" : "",
        t.alphaMap ? "#define USE_ALPHAMAP" : "",
        t.alphaTest ? "#define USE_ALPHATEST" : "",
        t.sheen ? "#define USE_SHEEN" : "",
        t.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
        t.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
        t.transmission ? "#define USE_TRANSMISSION" : "",
        t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        t.vertexTangents ? "#define USE_TANGENT" : "",
        t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
        t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        t.vertexUvs ? "#define USE_UV" : "",
        t.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
        t.gradientMap ? "#define USE_GRADIENTMAP" : "",
        t.flatShading ? "#define FLAT_SHADED" : "",
        t.doubleSided ? "#define DOUBLE_SIDED" : "",
        t.flipSided ? "#define FLIP_SIDED" : "",
        t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        t.shadowMapEnabled ? "#define " + l : "",
        t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        t.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
        t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        (t.extensionShaderTextureLOD || t.envMap) && t.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        t.toneMapping !== _n ? "#define TONE_MAPPING" : "",
        t.toneMapping !== _n ? Fe.tonemapping_pars_fragment : "",
        t.toneMapping !== _n ? jg("toneMapping", t.toneMapping) : "",
        t.dithering ? "#define DITHERING" : "",
        t.format === Gn ? "#define OPAQUE" : "",
        Fe.encodings_pars_fragment,
        t.map ? Dn("mapTexelToLinear", t.mapEncoding) : "",
        t.matcap ? Dn("matcapTexelToLinear", t.matcapEncoding) : "",
        t.envMap ? Dn("envMapTexelToLinear", t.envMapEncoding) : "",
        t.emissiveMap ? Dn("emissiveMapTexelToLinear", t.emissiveMapEncoding) : "",
        t.specularColorMap ? Dn("specularColorMapTexelToLinear", t.specularColorMapEncoding) : "",
        t.sheenColorMap ? Dn("sheenColorMapTexelToLinear", t.sheenColorMapEncoding) : "",
        t.lightMap ? Dn("lightMapTexelToLinear", t.lightMapEncoding) : "",
        $g("linearToOutputTexel", t.outputEncoding),
        t.depthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
        `
`
    ].filter(rr).join(`
`)), o = ra(o), o = Wl(o, t), o = ql(o, t), a = ra(a), a = Wl(a, t), a = ql(a, t), o = Xl(o), a = Xl(a), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (g = `#version 300 es
`, x = [
        "precision mediump sampler2DArray;",
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
    ].join(`
`) + `
` + x, v = [
        "#define varying in",
        t.glslVersion === xl ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        t.glslVersion === xl ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
    ].join(`
`) + `
` + v);
    let p = g + x + o, _ = g + v + a, y = Gl(i, 35633, p), b = Gl(i, 35632, _);
    if (i.attachShader(m, y), i.attachShader(m, b), t.index0AttributeName !== void 0 ? i.bindAttribLocation(m, 0, t.index0AttributeName) : t.morphTargets === !0 && i.bindAttribLocation(m, 0, "position"), i.linkProgram(m), s.debug.checkShaderErrors) {
        let I = i.getProgramInfoLog(m).trim(), k = i.getShaderInfoLog(y).trim(), B = i.getShaderInfoLog(b).trim(), P = !0, w = !0;
        if (i.getProgramParameter(m, 35714) === !1) {
            P = !1;
            let E = Vl(i, y, "vertex"), D = Vl(i, b, "fragment");
            console.error("THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(m, 35715) + `

Program Info Log: ` + I + `
` + E + `
` + D);
        } else I !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", I) : (k === "" || B === "") && (w = !1);
        w && (this.diagnostics = {
            runnable: P,
            programLog: I,
            vertexShader: {
                log: k,
                prefix: x
            },
            fragmentShader: {
                log: B,
                prefix: v
            }
        });
    }
    i.deleteShader(y), i.deleteShader(b);
    let A;
    this.getUniforms = function() {
        return A === void 0 && (A = new bn(i, m)), A;
    };
    let L;
    return this.getAttributes = function() {
        return L === void 0 && (L = ex(i, m)), L;
    }, this.destroy = function() {
        n.releaseStatesOfProgram(this), i.deleteProgram(m), this.program = void 0;
    }, this.name = t.shaderName, this.id = Yg++, this.cacheKey = e, this.usedTimes = 1, this.program = m, this.vertexShader = y, this.fragmentShader = b, this;
}
var ux = 0, gh = class {
    constructor(){
        this.shaderCache = new Map, this.materialCache = new Map;
    }
    update(e) {
        let t = e.vertexShader, n = e.fragmentShader, i = this._getShaderStage(t), r = this._getShaderStage(n), o = this._getShaderCacheForMaterial(e);
        return o.has(i) === !1 && (o.add(i), i.usedTimes++), o.has(r) === !1 && (o.add(r), r.usedTimes++), this;
    }
    remove(e) {
        let t = this.materialCache.get(e);
        for (let n of t)n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n);
        return this.materialCache.delete(e), this;
    }
    getVertexShaderID(e) {
        return this._getShaderStage(e.vertexShader).id;
    }
    getFragmentShaderID(e) {
        return this._getShaderStage(e.fragmentShader).id;
    }
    dispose() {
        this.shaderCache.clear(), this.materialCache.clear();
    }
    _getShaderCacheForMaterial(e) {
        let t = this.materialCache;
        return t.has(e) === !1 && t.set(e, new Set), t.get(e);
    }
    _getShaderStage(e) {
        let t = this.shaderCache;
        if (t.has(e) === !1) {
            let n = new xh;
            t.set(e, n);
        }
        return t.get(e);
    }
}, xh = class {
    constructor(){
        this.id = ux++, this.usedTimes = 0;
    }
};
function dx(s, e, t, n, i, r, o) {
    let a = new Js, l = new gh, c = [], h = i.isWebGL2, u = i.logarithmicDepthBuffer, d = i.floatVertexTextures, f = i.maxVertexUniforms, m = i.vertexTextures, x = i.precision, v = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
    };
    function g(w) {
        let D = w.skeleton.bones;
        if (d) return 1024;
        {
            let F = Math.floor((f - 20) / 4), O = Math.min(F, D.length);
            return O < D.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + D.length + " bones. This GPU supports " + O + "."), 0) : O;
        }
    }
    function p(w) {
        let E;
        return w && w.isTexture ? E = w.encoding : w && w.isWebGLRenderTarget ? (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), E = w.texture.encoding) : E = Nt, h && w && w.isTexture && w.format === ct && w.type === rn && w.encoding === Oi && (E = Nt), E;
    }
    function _(w, E, D, U, F) {
        let O = U.fog, ne = w.isMeshStandardMaterial ? U.environment : null, ce = (w.isMeshStandardMaterial ? t : e).get(w.envMap || ne), V = v[w.type], W = F.isSkinnedMesh ? g(F) : 0;
        w.precision !== null && (x = i.getMaxPrecision(w.precision), x !== w.precision && console.warn("THREE.WebGLProgram.getParameters:", w.precision, "not supported, using", x, "instead."));
        let he, le, fe, Be;
        if (V) {
            let xe = qt[V];
            he = xe.vertexShader, le = xe.fragmentShader;
        } else he = w.vertexShader, le = w.fragmentShader, l.update(w), fe = l.getVertexShaderID(w), Be = l.getFragmentShaderID(w);
        let Y = s.getRenderTarget(), Ce = w.alphaTest > 0, ye = w.clearcoat > 0;
        return {
            isWebGL2: h,
            shaderID: V,
            shaderName: w.type,
            vertexShader: he,
            fragmentShader: le,
            defines: w.defines,
            customVertexShaderID: fe,
            customFragmentShaderID: Be,
            isRawShaderMaterial: w.isRawShaderMaterial === !0,
            glslVersion: w.glslVersion,
            precision: x,
            instancing: F.isInstancedMesh === !0,
            instancingColor: F.isInstancedMesh === !0 && F.instanceColor !== null,
            supportsVertexTextures: m,
            outputEncoding: Y !== null ? p(Y.texture) : s.outputEncoding,
            map: !!w.map,
            mapEncoding: p(w.map),
            matcap: !!w.matcap,
            matcapEncoding: p(w.matcap),
            envMap: !!ce,
            envMapMode: ce && ce.mapping,
            envMapEncoding: p(ce),
            envMapCubeUV: !!ce && (ce.mapping === Pr || ce.mapping === Ws),
            lightMap: !!w.lightMap,
            lightMapEncoding: p(w.lightMap),
            aoMap: !!w.aoMap,
            emissiveMap: !!w.emissiveMap,
            emissiveMapEncoding: p(w.emissiveMap),
            bumpMap: !!w.bumpMap,
            normalMap: !!w.normalMap,
            objectSpaceNormalMap: w.normalMapType === zd,
            tangentSpaceNormalMap: w.normalMapType === Hi,
            clearcoat: ye,
            clearcoatMap: ye && !!w.clearcoatMap,
            clearcoatRoughnessMap: ye && !!w.clearcoatRoughnessMap,
            clearcoatNormalMap: ye && !!w.clearcoatNormalMap,
            displacementMap: !!w.displacementMap,
            roughnessMap: !!w.roughnessMap,
            metalnessMap: !!w.metalnessMap,
            specularMap: !!w.specularMap,
            specularIntensityMap: !!w.specularIntensityMap,
            specularColorMap: !!w.specularColorMap,
            specularColorMapEncoding: p(w.specularColorMap),
            alphaMap: !!w.alphaMap,
            alphaTest: Ce,
            gradientMap: !!w.gradientMap,
            sheen: w.sheen > 0,
            sheenColorMap: !!w.sheenColorMap,
            sheenColorMapEncoding: p(w.sheenColorMap),
            sheenRoughnessMap: !!w.sheenRoughnessMap,
            transmission: w.transmission > 0,
            transmissionMap: !!w.transmissionMap,
            thicknessMap: !!w.thicknessMap,
            combine: w.combine,
            vertexTangents: !!w.normalMap && !!F.geometry && !!F.geometry.attributes.tangent,
            vertexColors: w.vertexColors,
            vertexAlphas: w.vertexColors === !0 && !!F.geometry && !!F.geometry.attributes.color && F.geometry.attributes.color.itemSize === 4,
            vertexUvs: !!w.map || !!w.bumpMap || !!w.normalMap || !!w.specularMap || !!w.alphaMap || !!w.emissiveMap || !!w.roughnessMap || !!w.metalnessMap || !!w.clearcoatMap || !!w.clearcoatRoughnessMap || !!w.clearcoatNormalMap || !!w.displacementMap || !!w.transmissionMap || !!w.thicknessMap || !!w.specularIntensityMap || !!w.specularColorMap || !!w.sheenColorMap || !!w.sheenRoughnessMap,
            uvsVertexOnly: !(!!w.map || !!w.bumpMap || !!w.normalMap || !!w.specularMap || !!w.alphaMap || !!w.emissiveMap || !!w.roughnessMap || !!w.metalnessMap || !!w.clearcoatNormalMap || w.transmission > 0 || !!w.transmissionMap || !!w.thicknessMap || !!w.specularIntensityMap || !!w.specularColorMap || w.sheen > 0 || !!w.sheenColorMap || !!w.sheenRoughnessMap) && !!w.displacementMap,
            fog: !!O,
            useFog: w.fog,
            fogExp2: O && O.isFogExp2,
            flatShading: !!w.flatShading,
            sizeAttenuation: w.sizeAttenuation,
            logarithmicDepthBuffer: u,
            skinning: F.isSkinnedMesh === !0 && W > 0,
            maxBones: W,
            useVertexTexture: d,
            morphTargets: !!F.geometry && !!F.geometry.morphAttributes.position,
            morphNormals: !!F.geometry && !!F.geometry.morphAttributes.normal,
            morphTargetsCount: !!F.geometry && !!F.geometry.morphAttributes.position ? F.geometry.morphAttributes.position.length : 0,
            numDirLights: E.directional.length,
            numPointLights: E.point.length,
            numSpotLights: E.spot.length,
            numRectAreaLights: E.rectArea.length,
            numHemiLights: E.hemi.length,
            numDirLightShadows: E.directionalShadowMap.length,
            numPointLightShadows: E.pointShadowMap.length,
            numSpotLightShadows: E.spotShadowMap.length,
            numClippingPlanes: o.numPlanes,
            numClipIntersection: o.numIntersection,
            format: w.format,
            dithering: w.dithering,
            shadowMapEnabled: s.shadowMap.enabled && D.length > 0,
            shadowMapType: s.shadowMap.type,
            toneMapping: w.toneMapped ? s.toneMapping : _n,
            physicallyCorrectLights: s.physicallyCorrectLights,
            premultipliedAlpha: w.premultipliedAlpha,
            doubleSided: w.side === Ci,
            flipSided: w.side === it,
            depthPacking: w.depthPacking !== void 0 ? w.depthPacking : !1,
            index0AttributeName: w.index0AttributeName,
            extensionDerivatives: w.extensions && w.extensions.derivatives,
            extensionFragDepth: w.extensions && w.extensions.fragDepth,
            extensionDrawBuffers: w.extensions && w.extensions.drawBuffers,
            extensionShaderTextureLOD: w.extensions && w.extensions.shaderTextureLOD,
            rendererExtensionFragDepth: h || n.has("EXT_frag_depth"),
            rendererExtensionDrawBuffers: h || n.has("WEBGL_draw_buffers"),
            rendererExtensionShaderTextureLod: h || n.has("EXT_shader_texture_lod"),
            customProgramCacheKey: w.customProgramCacheKey()
        };
    }
    function y(w) {
        let E = [];
        if (w.shaderID ? E.push(w.shaderID) : (E.push(w.customVertexShaderID), E.push(w.customFragmentShaderID)), w.defines !== void 0) for(let D in w.defines)E.push(D), E.push(w.defines[D]);
        return w.isRawShaderMaterial === !1 && (b(E, w), A(E, w), E.push(s.outputEncoding)), E.push(w.customProgramCacheKey), E.join();
    }
    function b(w, E) {
        w.push(E.precision), w.push(E.outputEncoding), w.push(E.mapEncoding), w.push(E.matcapEncoding), w.push(E.envMapMode), w.push(E.envMapEncoding), w.push(E.lightMapEncoding), w.push(E.emissiveMapEncoding), w.push(E.combine), w.push(E.vertexUvs), w.push(E.fogExp2), w.push(E.sizeAttenuation), w.push(E.maxBones), w.push(E.morphTargetsCount), w.push(E.numDirLights), w.push(E.numPointLights), w.push(E.numSpotLights), w.push(E.numHemiLights), w.push(E.numRectAreaLights), w.push(E.numDirLightShadows), w.push(E.numPointLightShadows), w.push(E.numSpotLightShadows), w.push(E.shadowMapType), w.push(E.toneMapping), w.push(E.numClippingPlanes), w.push(E.numClipIntersection), w.push(E.format), w.push(E.specularColorMapEncoding), w.push(E.sheenColorMapEncoding);
    }
    function A(w, E) {
        a.disableAll(), E.isWebGL2 && a.enable(0), E.supportsVertexTextures && a.enable(1), E.instancing && a.enable(2), E.instancingColor && a.enable(3), E.map && a.enable(4), E.matcap && a.enable(5), E.envMap && a.enable(6), E.envMapCubeUV && a.enable(7), E.lightMap && a.enable(8), E.aoMap && a.enable(9), E.emissiveMap && a.enable(10), E.bumpMap && a.enable(11), E.normalMap && a.enable(12), E.objectSpaceNormalMap && a.enable(13), E.tangentSpaceNormalMap && a.enable(14), E.clearcoat && a.enable(15), E.clearcoatMap && a.enable(16), E.clearcoatRoughnessMap && a.enable(17), E.clearcoatNormalMap && a.enable(18), E.displacementMap && a.enable(19), E.specularMap && a.enable(20), E.roughnessMap && a.enable(21), E.metalnessMap && a.enable(22), E.gradientMap && a.enable(23), E.alphaMap && a.enable(24), E.alphaTest && a.enable(25), E.vertexColors && a.enable(26), E.vertexAlphas && a.enable(27), E.vertexUvs && a.enable(28), E.vertexTangents && a.enable(29), E.uvsVertexOnly && a.enable(30), E.fog && a.enable(31), w.push(a.mask), a.disableAll(), E.useFog && a.enable(0), E.flatShading && a.enable(1), E.logarithmicDepthBuffer && a.enable(2), E.skinning && a.enable(3), E.useVertexTexture && a.enable(4), E.morphTargets && a.enable(5), E.morphNormals && a.enable(6), E.premultipliedAlpha && a.enable(7), E.shadowMapEnabled && a.enable(8), E.physicallyCorrectLights && a.enable(9), E.doubleSided && a.enable(10), E.flipSided && a.enable(11), E.depthPacking && a.enable(12), E.dithering && a.enable(13), E.specularIntensityMap && a.enable(14), E.specularColorMap && a.enable(15), E.transmission && a.enable(16), E.transmissionMap && a.enable(17), E.thicknessMap && a.enable(18), E.sheen && a.enable(19), E.sheenColorMap && a.enable(20), E.sheenRoughnessMap && a.enable(21), w.push(a.mask);
    }
    function L(w) {
        let E = v[w.type], D;
        if (E) {
            let U = qt[E];
            D = uf.clone(U.uniforms);
        } else D = w.uniforms;
        return D;
    }
    function I(w, E) {
        let D;
        for(let U = 0, F = c.length; U < F; U++){
            let O = c[U];
            if (O.cacheKey === E) {
                D = O, ++D.usedTimes;
                break;
            }
        }
        return D === void 0 && (D = new hx(s, E, w, r), c.push(D)), D;
    }
    function k(w) {
        if (--w.usedTimes === 0) {
            let E = c.indexOf(w);
            c[E] = c[c.length - 1], c.pop(), w.destroy();
        }
    }
    function B(w) {
        l.remove(w);
    }
    function P() {
        l.dispose();
    }
    return {
        getParameters: _,
        getProgramCacheKey: y,
        getUniforms: L,
        acquireProgram: I,
        releaseProgram: k,
        releaseShaderCache: B,
        programs: c,
        dispose: P
    };
}
function fx() {
    let s = new WeakMap;
    function e(r) {
        let o = s.get(r);
        return o === void 0 && (o = {}, s.set(r, o)), o;
    }
    function t(r) {
        s.delete(r);
    }
    function n(r, o, a) {
        s.get(r)[o] = a;
    }
    function i() {
        s = new WeakMap;
    }
    return {
        get: e,
        remove: t,
        update: n,
        dispose: i
    };
}
function px(s, e) {
    return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.material.id !== e.material.id ? s.material.id - e.material.id : s.z !== e.z ? s.z - e.z : s.id - e.id;
}
function Yl(s, e) {
    return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.z !== e.z ? e.z - s.z : s.id - e.id;
}
function Zl() {
    let s = [], e = 0, t = [], n = [], i = [];
    function r() {
        e = 0, t.length = 0, n.length = 0, i.length = 0;
    }
    function o(u, d, f, m, x, v) {
        let g = s[e];
        return g === void 0 ? (g = {
            id: u.id,
            object: u,
            geometry: d,
            material: f,
            groupOrder: m,
            renderOrder: u.renderOrder,
            z: x,
            group: v
        }, s[e] = g) : (g.id = u.id, g.object = u, g.geometry = d, g.material = f, g.groupOrder = m, g.renderOrder = u.renderOrder, g.z = x, g.group = v), e++, g;
    }
    function a(u, d, f, m, x, v) {
        let g = o(u, d, f, m, x, v);
        f.transmission > 0 ? n.push(g) : f.transparent === !0 ? i.push(g) : t.push(g);
    }
    function l(u, d, f, m, x, v) {
        let g = o(u, d, f, m, x, v);
        f.transmission > 0 ? n.unshift(g) : f.transparent === !0 ? i.unshift(g) : t.unshift(g);
    }
    function c(u, d) {
        t.length > 1 && t.sort(u || px), n.length > 1 && n.sort(d || Yl), i.length > 1 && i.sort(d || Yl);
    }
    function h() {
        for(let u = e, d = s.length; u < d; u++){
            let f = s[u];
            if (f.id === null) break;
            f.id = null, f.object = null, f.geometry = null, f.material = null, f.group = null;
        }
    }
    return {
        opaque: t,
        transmissive: n,
        transparent: i,
        init: r,
        push: a,
        unshift: l,
        finish: h,
        sort: c
    };
}
function mx() {
    let s = new WeakMap;
    function e(n, i) {
        let r;
        return s.has(n) === !1 ? (r = new Zl, s.set(n, [
            r
        ])) : i >= s.get(n).length ? (r = new Zl, s.get(n).push(r)) : r = s.get(n)[i], r;
    }
    function t() {
        s = new WeakMap;
    }
    return {
        get: e,
        dispose: t
    };
}
function gx() {
    let s = {};
    return {
        get: function(e) {
            if (s[e.id] !== void 0) return s[e.id];
            let t;
            switch(e.type){
                case "DirectionalLight":
                    t = {
                        direction: new M,
                        color: new ae
                    };
                    break;
                case "SpotLight":
                    t = {
                        position: new M,
                        direction: new M,
                        color: new ae,
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case "PointLight":
                    t = {
                        position: new M,
                        color: new ae,
                        distance: 0,
                        decay: 0
                    };
                    break;
                case "HemisphereLight":
                    t = {
                        direction: new M,
                        skyColor: new ae,
                        groundColor: new ae
                    };
                    break;
                case "RectAreaLight":
                    t = {
                        color: new ae,
                        position: new M,
                        halfWidth: new M,
                        halfHeight: new M
                    };
                    break;
            }
            return s[e.id] = t, t;
        }
    };
}
function xx() {
    let s = {};
    return {
        get: function(e) {
            if (s[e.id] !== void 0) return s[e.id];
            let t;
            switch(e.type){
                case "DirectionalLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new X
                    };
                    break;
                case "SpotLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new X
                    };
                    break;
                case "PointLight":
                    t = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new X,
                        shadowCameraNear: 1,
                        shadowCameraFar: 1e3
                    };
                    break;
            }
            return s[e.id] = t, t;
        }
    };
}
var yx = 0;
function vx(s, e) {
    return (e.castShadow ? 1 : 0) - (s.castShadow ? 1 : 0);
}
function _x(s, e) {
    let t = new gx, n = xx(), i = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotShadow: [],
        spotShadowMap: [],
        spotShadowMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: []
    };
    for(let h = 0; h < 9; h++)i.probe.push(new M);
    let r = new M, o = new pe, a = new pe;
    function l(h, u) {
        let d = 0, f = 0, m = 0;
        for(let k = 0; k < 9; k++)i.probe[k].set(0, 0, 0);
        let x = 0, v = 0, g = 0, p = 0, _ = 0, y = 0, b = 0, A = 0;
        h.sort(vx);
        let L = u !== !0 ? Math.PI : 1;
        for(let k = 0, B = h.length; k < B; k++){
            let P = h[k], w = P.color, E = P.intensity, D = P.distance, U = P.shadow && P.shadow.map ? P.shadow.map.texture : null;
            if (P.isAmbientLight) d += w.r * E * L, f += w.g * E * L, m += w.b * E * L;
            else if (P.isLightProbe) for(let F = 0; F < 9; F++)i.probe[F].addScaledVector(P.sh.coefficients[F], E);
            else if (P.isDirectionalLight) {
                let F = t.get(P);
                if (F.color.copy(P.color).multiplyScalar(P.intensity * L), P.castShadow) {
                    let O = P.shadow, ne = n.get(P);
                    ne.shadowBias = O.bias, ne.shadowNormalBias = O.normalBias, ne.shadowRadius = O.radius, ne.shadowMapSize = O.mapSize, i.directionalShadow[x] = ne, i.directionalShadowMap[x] = U, i.directionalShadowMatrix[x] = P.shadow.matrix, y++;
                }
                i.directional[x] = F, x++;
            } else if (P.isSpotLight) {
                let F = t.get(P);
                if (F.position.setFromMatrixPosition(P.matrixWorld), F.color.copy(w).multiplyScalar(E * L), F.distance = D, F.coneCos = Math.cos(P.angle), F.penumbraCos = Math.cos(P.angle * (1 - P.penumbra)), F.decay = P.decay, P.castShadow) {
                    let O = P.shadow, ne = n.get(P);
                    ne.shadowBias = O.bias, ne.shadowNormalBias = O.normalBias, ne.shadowRadius = O.radius, ne.shadowMapSize = O.mapSize, i.spotShadow[g] = ne, i.spotShadowMap[g] = U, i.spotShadowMatrix[g] = P.shadow.matrix, A++;
                }
                i.spot[g] = F, g++;
            } else if (P.isRectAreaLight) {
                let F = t.get(P);
                F.color.copy(w).multiplyScalar(E), F.halfWidth.set(P.width * .5, 0, 0), F.halfHeight.set(0, P.height * .5, 0), i.rectArea[p] = F, p++;
            } else if (P.isPointLight) {
                let F = t.get(P);
                if (F.color.copy(P.color).multiplyScalar(P.intensity * L), F.distance = P.distance, F.decay = P.decay, P.castShadow) {
                    let O = P.shadow, ne = n.get(P);
                    ne.shadowBias = O.bias, ne.shadowNormalBias = O.normalBias, ne.shadowRadius = O.radius, ne.shadowMapSize = O.mapSize, ne.shadowCameraNear = O.camera.near, ne.shadowCameraFar = O.camera.far, i.pointShadow[v] = ne, i.pointShadowMap[v] = U, i.pointShadowMatrix[v] = P.shadow.matrix, b++;
                }
                i.point[v] = F, v++;
            } else if (P.isHemisphereLight) {
                let F = t.get(P);
                F.skyColor.copy(P.color).multiplyScalar(E * L), F.groundColor.copy(P.groundColor).multiplyScalar(E * L), i.hemi[_] = F, _++;
            }
        }
        p > 0 && (e.isWebGL2 || s.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = ie.LTC_FLOAT_1, i.rectAreaLTC2 = ie.LTC_FLOAT_2) : s.has("OES_texture_half_float_linear") === !0 ? (i.rectAreaLTC1 = ie.LTC_HALF_1, i.rectAreaLTC2 = ie.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = d, i.ambient[1] = f, i.ambient[2] = m;
        let I = i.hash;
        (I.directionalLength !== x || I.pointLength !== v || I.spotLength !== g || I.rectAreaLength !== p || I.hemiLength !== _ || I.numDirectionalShadows !== y || I.numPointShadows !== b || I.numSpotShadows !== A) && (i.directional.length = x, i.spot.length = g, i.rectArea.length = p, i.point.length = v, i.hemi.length = _, i.directionalShadow.length = y, i.directionalShadowMap.length = y, i.pointShadow.length = b, i.pointShadowMap.length = b, i.spotShadow.length = A, i.spotShadowMap.length = A, i.directionalShadowMatrix.length = y, i.pointShadowMatrix.length = b, i.spotShadowMatrix.length = A, I.directionalLength = x, I.pointLength = v, I.spotLength = g, I.rectAreaLength = p, I.hemiLength = _, I.numDirectionalShadows = y, I.numPointShadows = b, I.numSpotShadows = A, i.version = yx++);
    }
    function c(h, u) {
        let d = 0, f = 0, m = 0, x = 0, v = 0, g = u.matrixWorldInverse;
        for(let p = 0, _ = h.length; p < _; p++){
            let y = h[p];
            if (y.isDirectionalLight) {
                let b = i.directional[d];
                b.direction.setFromMatrixPosition(y.matrixWorld), r.setFromMatrixPosition(y.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(g), d++;
            } else if (y.isSpotLight) {
                let b = i.spot[m];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(g), b.direction.setFromMatrixPosition(y.matrixWorld), r.setFromMatrixPosition(y.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(g), m++;
            } else if (y.isRectAreaLight) {
                let b = i.rectArea[x];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(g), a.identity(), o.copy(y.matrixWorld), o.premultiply(g), a.extractRotation(o), b.halfWidth.set(y.width * .5, 0, 0), b.halfHeight.set(0, y.height * .5, 0), b.halfWidth.applyMatrix4(a), b.halfHeight.applyMatrix4(a), x++;
            } else if (y.isPointLight) {
                let b = i.point[f];
                b.position.setFromMatrixPosition(y.matrixWorld), b.position.applyMatrix4(g), f++;
            } else if (y.isHemisphereLight) {
                let b = i.hemi[v];
                b.direction.setFromMatrixPosition(y.matrixWorld), b.direction.transformDirection(g), b.direction.normalize(), v++;
            }
        }
    }
    return {
        setup: l,
        setupView: c,
        state: i
    };
}
function $l(s, e) {
    let t = new _x(s, e), n = [], i = [];
    function r() {
        n.length = 0, i.length = 0;
    }
    function o(u) {
        n.push(u);
    }
    function a(u) {
        i.push(u);
    }
    function l(u) {
        t.setup(n, u);
    }
    function c(u) {
        t.setupView(n, u);
    }
    return {
        init: r,
        state: {
            lightsArray: n,
            shadowsArray: i,
            lights: t
        },
        setupLights: l,
        setupLightsView: c,
        pushLight: o,
        pushShadow: a
    };
}
function Mx(s, e) {
    let t = new WeakMap;
    function n(r, o = 0) {
        let a;
        return t.has(r) === !1 ? (a = new $l(s, e), t.set(r, [
            a
        ])) : o >= t.get(r).length ? (a = new $l(s, e), t.get(r).push(a)) : a = t.get(r)[o], a;
    }
    function i() {
        t = new WeakMap;
    }
    return {
        get: n,
        dispose: i
    };
}
var eo = class extends dt {
    constructor(e){
        super();
        this.type = "MeshDepthMaterial", this.depthPacking = Nd, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
    }
};
eo.prototype.isMeshDepthMaterial = !0;
var to = class extends dt {
    constructor(e){
        super();
        this.type = "MeshDistanceMaterial", this.referencePosition = new M, this.nearDistance = 1, this.farDistance = 1e3, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.referencePosition.copy(e.referencePosition), this.nearDistance = e.nearDistance, this.farDistance = e.farDistance, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
    }
};
to.prototype.isMeshDistanceMaterial = !0;
var bx = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, wx = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function yh(s, e, t) {
    let n = new Dr, i = new X, r = new X, o = new Ve, a = new eo({
        depthPacking: Bd
    }), l = new to, c = {}, h = t.maxTextureSize, u = {
        0: it,
        1: Ai,
        2: Ci
    }, d = new sn({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new X
            },
            radius: {
                value: 4
            }
        },
        vertexShader: bx,
        fragmentShader: wx
    }), f = d.clone();
    f.defines.HORIZONTAL_PASS = 1;
    let m = new _e;
    m.setAttribute("position", new Ue(new Float32Array([
        -1,
        -1,
        .5,
        3,
        -1,
        .5,
        -1,
        3,
        .5
    ]), 3));
    let x = new st(m, d), v = this;
    this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = Hc, this.render = function(y, b, A) {
        if (v.enabled === !1 || v.autoUpdate === !1 && v.needsUpdate === !1 || y.length === 0) return;
        let L = s.getRenderTarget(), I = s.getActiveCubeFace(), k = s.getActiveMipmapLevel(), B = s.state;
        B.setBlending(vn), B.buffers.color.setClear(1, 1, 1, 1), B.buffers.depth.setTest(!0), B.setScissorTest(!1);
        for(let P = 0, w = y.length; P < w; P++){
            let E = y[P], D = E.shadow;
            if (D === void 0) {
                console.warn("THREE.WebGLShadowMap:", E, "has no shadow.");
                continue;
            }
            if (D.autoUpdate === !1 && D.needsUpdate === !1) continue;
            i.copy(D.mapSize);
            let U = D.getFrameExtents();
            if (i.multiply(U), r.copy(D.mapSize), (i.x > h || i.y > h) && (i.x > h && (r.x = Math.floor(h / U.x), i.x = r.x * U.x, D.mapSize.x = r.x), i.y > h && (r.y = Math.floor(h / U.y), i.y = r.y * U.y, D.mapSize.y = r.y)), D.map === null && !D.isPointLightShadow && this.type === ir) {
                let O = {
                    minFilter: tt,
                    magFilter: tt,
                    format: ct
                };
                D.map = new At(i.x, i.y, O), D.map.texture.name = E.name + ".shadowMap", D.mapPass = new At(i.x, i.y, O), D.camera.updateProjectionMatrix();
            }
            if (D.map === null) {
                let O = {
                    minFilter: rt,
                    magFilter: rt,
                    format: ct
                };
                D.map = new At(i.x, i.y, O), D.map.texture.name = E.name + ".shadowMap", D.camera.updateProjectionMatrix();
            }
            s.setRenderTarget(D.map), s.clear();
            let F = D.getViewportCount();
            for(let O = 0; O < F; O++){
                let ne = D.getViewport(O);
                o.set(r.x * ne.x, r.y * ne.y, r.x * ne.z, r.y * ne.w), B.viewport(o), D.updateMatrices(E, O), n = D.getFrustum(), _(b, A, D.camera, E, this.type);
            }
            !D.isPointLightShadow && this.type === ir && g(D, A), D.needsUpdate = !1;
        }
        v.needsUpdate = !1, s.setRenderTarget(L, I, k);
    };
    function g(y, b) {
        let A = e.update(x);
        d.defines.VSM_SAMPLES !== y.blurSamples && (d.defines.VSM_SAMPLES = y.blurSamples, f.defines.VSM_SAMPLES = y.blurSamples, d.needsUpdate = !0, f.needsUpdate = !0), d.uniforms.shadow_pass.value = y.map.texture, d.uniforms.resolution.value = y.mapSize, d.uniforms.radius.value = y.radius, s.setRenderTarget(y.mapPass), s.clear(), s.renderBufferDirect(b, null, A, d, x, null), f.uniforms.shadow_pass.value = y.mapPass.texture, f.uniforms.resolution.value = y.mapSize, f.uniforms.radius.value = y.radius, s.setRenderTarget(y.map), s.clear(), s.renderBufferDirect(b, null, A, f, x, null);
    }
    function p(y, b, A, L, I, k, B) {
        let P = null, w = L.isPointLight === !0 ? y.customDistanceMaterial : y.customDepthMaterial;
        if (w !== void 0 ? P = w : P = L.isPointLight === !0 ? l : a, s.localClippingEnabled && A.clipShadows === !0 && A.clippingPlanes.length !== 0 || A.displacementMap && A.displacementScale !== 0 || A.alphaMap && A.alphaTest > 0) {
            let E = P.uuid, D = A.uuid, U = c[E];
            U === void 0 && (U = {}, c[E] = U);
            let F = U[D];
            F === void 0 && (F = P.clone(), U[D] = F), P = F;
        }
        return P.visible = A.visible, P.wireframe = A.wireframe, B === ir ? P.side = A.shadowSide !== null ? A.shadowSide : A.side : P.side = A.shadowSide !== null ? A.shadowSide : u[A.side], P.alphaMap = A.alphaMap, P.alphaTest = A.alphaTest, P.clipShadows = A.clipShadows, P.clippingPlanes = A.clippingPlanes, P.clipIntersection = A.clipIntersection, P.displacementMap = A.displacementMap, P.displacementScale = A.displacementScale, P.displacementBias = A.displacementBias, P.wireframeLinewidth = A.wireframeLinewidth, P.linewidth = A.linewidth, L.isPointLight === !0 && P.isMeshDistanceMaterial === !0 && (P.referencePosition.setFromMatrixPosition(L.matrixWorld), P.nearDistance = I, P.farDistance = k), P;
    }
    function _(y, b, A, L, I) {
        if (y.visible === !1) return;
        if (y.layers.test(b.layers) && (y.isMesh || y.isLine || y.isPoints) && (y.castShadow || y.receiveShadow && I === ir) && (!y.frustumCulled || n.intersectsObject(y))) {
            y.modelViewMatrix.multiplyMatrices(A.matrixWorldInverse, y.matrixWorld);
            let P = e.update(y), w = y.material;
            if (Array.isArray(w)) {
                let E = P.groups;
                for(let D = 0, U = E.length; D < U; D++){
                    let F = E[D], O = w[F.materialIndex];
                    if (O && O.visible) {
                        let ne = p(y, P, O, L, A.near, A.far, I);
                        s.renderBufferDirect(A, null, P, ne, y, F);
                    }
                }
            } else if (w.visible) {
                let E = p(y, P, w, L, A.near, A.far, I);
                s.renderBufferDirect(A, null, P, E, y, null);
            }
        }
        let B = y.children;
        for(let P = 0, w = B.length; P < w; P++)_(B[P], b, A, L, I);
    }
}
function Sx(s, e, t) {
    let n = t.isWebGL2;
    function i() {
        let R = !1, ee = new Ve, Q = null, Ee = new Ve(0, 0, 0, 0);
        return {
            setMask: function(me) {
                Q !== me && !R && (s.colorMask(me, me, me, me), Q = me);
            },
            setLocked: function(me) {
                R = me;
            },
            setClear: function(me, Re, oe, Le, Xe) {
                Xe === !0 && (me *= Le, Re *= Le, oe *= Le), ee.set(me, Re, oe, Le), Ee.equals(ee) === !1 && (s.clearColor(me, Re, oe, Le), Ee.copy(ee));
            },
            reset: function() {
                R = !1, Q = null, Ee.set(-1, 0, 0, 0);
            }
        };
    }
    function r() {
        let R = !1, ee = null, Q = null, Ee = null;
        return {
            setTest: function(me) {
                me ? le(2929) : fe(2929);
            },
            setMask: function(me) {
                ee !== me && !R && (s.depthMask(me), ee = me);
            },
            setFunc: function(me) {
                if (Q !== me) {
                    if (me) switch(me){
                        case Eu:
                            s.depthFunc(512);
                            break;
                        case Au:
                            s.depthFunc(519);
                            break;
                        case Cu:
                            s.depthFunc(513);
                            break;
                        case ea:
                            s.depthFunc(515);
                            break;
                        case Lu:
                            s.depthFunc(514);
                            break;
                        case Ru:
                            s.depthFunc(518);
                            break;
                        case Pu:
                            s.depthFunc(516);
                            break;
                        case Iu:
                            s.depthFunc(517);
                            break;
                        default:
                            s.depthFunc(515);
                    }
                    else s.depthFunc(515);
                    Q = me;
                }
            },
            setLocked: function(me) {
                R = me;
            },
            setClear: function(me) {
                Ee !== me && (s.clearDepth(me), Ee = me);
            },
            reset: function() {
                R = !1, ee = null, Q = null, Ee = null;
            }
        };
    }
    function o() {
        let R = !1, ee = null, Q = null, Ee = null, me = null, Re = null, oe = null, Le = null, Xe = null;
        return {
            setTest: function(We) {
                R || (We ? le(2960) : fe(2960));
            },
            setMask: function(We) {
                ee !== We && !R && (s.stencilMask(We), ee = We);
            },
            setFunc: function(We, Ut, Ot) {
                (Q !== We || Ee !== Ut || me !== Ot) && (s.stencilFunc(We, Ut, Ot), Q = We, Ee = Ut, me = Ot);
            },
            setOp: function(We, Ut, Ot) {
                (Re !== We || oe !== Ut || Le !== Ot) && (s.stencilOp(We, Ut, Ot), Re = We, oe = Ut, Le = Ot);
            },
            setLocked: function(We) {
                R = We;
            },
            setClear: function(We) {
                Xe !== We && (s.clearStencil(We), Xe = We);
            },
            reset: function() {
                R = !1, ee = null, Q = null, Ee = null, me = null, Re = null, oe = null, Le = null, Xe = null;
            }
        };
    }
    let a = new i, l = new r, c = new o, h = {}, u = {}, d = null, f = !1, m = null, x = null, v = null, g = null, p = null, _ = null, y = null, b = !1, A = null, L = null, I = null, k = null, B = null, P = s.getParameter(35661), w = !1, E = 0, D = s.getParameter(7938);
    D.indexOf("WebGL") !== -1 ? (E = parseFloat(/^WebGL (\d)/.exec(D)[1]), w = E >= 1) : D.indexOf("OpenGL ES") !== -1 && (E = parseFloat(/^OpenGL ES (\d)/.exec(D)[1]), w = E >= 2);
    let U = null, F = {}, O = s.getParameter(3088), ne = s.getParameter(2978), ce = new Ve().fromArray(O), V = new Ve().fromArray(ne);
    function W(R, ee, Q) {
        let Ee = new Uint8Array(4), me = s.createTexture();
        s.bindTexture(R, me), s.texParameteri(R, 10241, 9728), s.texParameteri(R, 10240, 9728);
        for(let Re = 0; Re < Q; Re++)s.texImage2D(ee + Re, 0, 6408, 1, 1, 0, 6408, 5121, Ee);
        return me;
    }
    let he = {};
    he[3553] = W(3553, 3553, 1), he[34067] = W(34067, 34069, 6), a.setClear(0, 0, 0, 1), l.setClear(1), c.setClear(0), le(2929), l.setFunc(ea), Oe(!1), G(tl), le(2884), ge(vn);
    function le(R) {
        h[R] !== !0 && (s.enable(R), h[R] = !0);
    }
    function fe(R) {
        h[R] !== !1 && (s.disable(R), h[R] = !1);
    }
    function Be(R, ee) {
        return u[R] !== ee ? (s.bindFramebuffer(R, ee), u[R] = ee, n && (R === 36009 && (u[36160] = ee), R === 36160 && (u[36009] = ee)), !0) : !1;
    }
    function Y(R) {
        return d !== R ? (s.useProgram(R), d = R, !0) : !1;
    }
    let Ce = {
        [_i]: 32774,
        [mu]: 32778,
        [gu]: 32779
    };
    if (n) Ce[sl] = 32775, Ce[ol] = 32776;
    else {
        let R = e.get("EXT_blend_minmax");
        R !== null && (Ce[sl] = R.MIN_EXT, Ce[ol] = R.MAX_EXT);
    }
    let ye = {
        [xu]: 0,
        [yu]: 1,
        [vu]: 768,
        [Gc]: 770,
        [Tu]: 776,
        [wu]: 774,
        [Mu]: 772,
        [_u]: 769,
        [Vc]: 771,
        [Su]: 775,
        [bu]: 773
    };
    function ge(R, ee, Q, Ee, me, Re, oe, Le) {
        if (R === vn) {
            f === !0 && (fe(3042), f = !1);
            return;
        }
        if (f === !1 && (le(3042), f = !0), R !== pu) {
            if (R !== m || Le !== b) {
                if ((x !== _i || p !== _i) && (s.blendEquation(32774), x = _i, p = _i), Le) switch(R){
                    case sr:
                        s.blendFuncSeparate(1, 771, 1, 771);
                        break;
                    case nl:
                        s.blendFunc(1, 1);
                        break;
                    case il:
                        s.blendFuncSeparate(0, 0, 769, 771);
                        break;
                    case rl:
                        s.blendFuncSeparate(0, 768, 0, 770);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", R);
                        break;
                }
                else switch(R){
                    case sr:
                        s.blendFuncSeparate(770, 771, 1, 771);
                        break;
                    case nl:
                        s.blendFunc(770, 1);
                        break;
                    case il:
                        s.blendFunc(0, 769);
                        break;
                    case rl:
                        s.blendFunc(0, 768);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", R);
                        break;
                }
                v = null, g = null, _ = null, y = null, m = R, b = Le;
            }
            return;
        }
        me = me || ee, Re = Re || Q, oe = oe || Ee, (ee !== x || me !== p) && (s.blendEquationSeparate(Ce[ee], Ce[me]), x = ee, p = me), (Q !== v || Ee !== g || Re !== _ || oe !== y) && (s.blendFuncSeparate(ye[Q], ye[Ee], ye[Re], ye[oe]), v = Q, g = Ee, _ = Re, y = oe), m = R, b = null;
    }
    function xe(R, ee) {
        R.side === Ci ? fe(2884) : le(2884);
        let Q = R.side === it;
        ee && (Q = !Q), Oe(Q), R.blending === sr && R.transparent === !1 ? ge(vn) : ge(R.blending, R.blendEquation, R.blendSrc, R.blendDst, R.blendEquationAlpha, R.blendSrcAlpha, R.blendDstAlpha, R.premultipliedAlpha), l.setFunc(R.depthFunc), l.setTest(R.depthTest), l.setMask(R.depthWrite), a.setMask(R.colorWrite);
        let Ee = R.stencilWrite;
        c.setTest(Ee), Ee && (c.setMask(R.stencilWriteMask), c.setFunc(R.stencilFunc, R.stencilRef, R.stencilFuncMask), c.setOp(R.stencilFail, R.stencilZFail, R.stencilZPass)), K(R.polygonOffset, R.polygonOffsetFactor, R.polygonOffsetUnits), R.alphaToCoverage === !0 ? le(32926) : fe(32926);
    }
    function Oe(R) {
        A !== R && (R ? s.frontFace(2304) : s.frontFace(2305), A = R);
    }
    function G(R) {
        R !== uu ? (le(2884), R !== L && (R === tl ? s.cullFace(1029) : R === du ? s.cullFace(1028) : s.cullFace(1032))) : fe(2884), L = R;
    }
    function j(R) {
        R !== I && (w && s.lineWidth(R), I = R);
    }
    function K(R, ee, Q) {
        R ? (le(32823), (k !== ee || B !== Q) && (s.polygonOffset(ee, Q), k = ee, B = Q)) : fe(32823);
    }
    function ue(R) {
        R ? le(3089) : fe(3089);
    }
    function se(R) {
        R === void 0 && (R = 33984 + P - 1), U !== R && (s.activeTexture(R), U = R);
    }
    function Se(R, ee) {
        U === null && se();
        let Q = F[U];
        Q === void 0 && (Q = {
            type: void 0,
            texture: void 0
        }, F[U] = Q), (Q.type !== R || Q.texture !== ee) && (s.bindTexture(R, ee || he[R]), Q.type = R, Q.texture = ee);
    }
    function Te() {
        let R = F[U];
        R !== void 0 && R.type !== void 0 && (s.bindTexture(R.type, null), R.type = void 0, R.texture = void 0);
    }
    function Pe() {
        try {
            s.compressedTexImage2D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function Ye() {
        try {
            s.texSubImage2D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function C() {
        try {
            s.texSubImage3D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function T() {
        try {
            s.compressedTexSubImage2D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function J() {
        try {
            s.texStorage2D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function $() {
        try {
            s.texStorage3D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function re() {
        try {
            s.texImage2D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function Z() {
        try {
            s.texImage3D.apply(s, arguments);
        } catch (R) {
            console.error("THREE.WebGLState:", R);
        }
    }
    function Me(R) {
        ce.equals(R) === !1 && (s.scissor(R.x, R.y, R.z, R.w), ce.copy(R));
    }
    function ve(R) {
        V.equals(R) === !1 && (s.viewport(R.x, R.y, R.z, R.w), V.copy(R));
    }
    function te() {
        s.disable(3042), s.disable(2884), s.disable(2929), s.disable(32823), s.disable(3089), s.disable(2960), s.disable(32926), s.blendEquation(32774), s.blendFunc(1, 0), s.blendFuncSeparate(1, 0, 1, 0), s.colorMask(!0, !0, !0, !0), s.clearColor(0, 0, 0, 0), s.depthMask(!0), s.depthFunc(513), s.clearDepth(1), s.stencilMask(4294967295), s.stencilFunc(519, 0, 4294967295), s.stencilOp(7680, 7680, 7680), s.clearStencil(0), s.cullFace(1029), s.frontFace(2305), s.polygonOffset(0, 0), s.activeTexture(33984), s.bindFramebuffer(36160, null), n === !0 && (s.bindFramebuffer(36009, null), s.bindFramebuffer(36008, null)), s.useProgram(null), s.lineWidth(1), s.scissor(0, 0, s.canvas.width, s.canvas.height), s.viewport(0, 0, s.canvas.width, s.canvas.height), h = {}, U = null, F = {}, u = {}, d = null, f = !1, m = null, x = null, v = null, g = null, p = null, _ = null, y = null, b = !1, A = null, L = null, I = null, k = null, B = null, ce.set(0, 0, s.canvas.width, s.canvas.height), V.set(0, 0, s.canvas.width, s.canvas.height), a.reset(), l.reset(), c.reset();
    }
    return {
        buffers: {
            color: a,
            depth: l,
            stencil: c
        },
        enable: le,
        disable: fe,
        bindFramebuffer: Be,
        useProgram: Y,
        setBlending: ge,
        setMaterial: xe,
        setFlipSided: Oe,
        setCullFace: G,
        setLineWidth: j,
        setPolygonOffset: K,
        setScissorTest: ue,
        activeTexture: se,
        bindTexture: Se,
        unbindTexture: Te,
        compressedTexImage2D: Pe,
        texImage2D: re,
        texImage3D: Z,
        texStorage2D: J,
        texStorage3D: $,
        texSubImage2D: Ye,
        texSubImage3D: C,
        compressedTexSubImage2D: T,
        scissor: Me,
        viewport: ve,
        reset: te
    };
}
function Tx(s, e, t, n, i, r, o) {
    let a = i.isWebGL2, l = i.maxTextures, c = i.maxCubemapSize, h = i.maxTextureSize, u = i.maxSamples, f = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : void 0, m = new WeakMap, x, v = !1;
    try {
        v = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch  {}
    function g(C, T) {
        return v ? new OffscreenCanvas(C, T) : qs("canvas");
    }
    function p(C, T, J, $) {
        let re = 1;
        if ((C.width > $ || C.height > $) && (re = $ / Math.max(C.width, C.height)), re < 1 || T === !0) if (typeof HTMLImageElement < "u" && C instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && C instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && C instanceof ImageBitmap) {
            let Z = T ? Jc : Math.floor, Me = Z(re * C.width), ve = Z(re * C.height);
            x === void 0 && (x = g(Me, ve));
            let te = J ? g(Me, ve) : x;
            return te.width = Me, te.height = ve, te.getContext("2d").drawImage(C, 0, 0, Me, ve), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + C.width + "x" + C.height + ") to (" + Me + "x" + ve + ")."), te;
        } else return "data" in C && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + C.width + "x" + C.height + ")."), C;
        return C;
    }
    function _(C) {
        return ia(C.width) && ia(C.height);
    }
    function y(C) {
        return a ? !1 : C.wrapS !== vt || C.wrapT !== vt || C.minFilter !== rt && C.minFilter !== tt;
    }
    function b(C, T) {
        return C.generateMipmaps && T && C.minFilter !== rt && C.minFilter !== tt;
    }
    function A(C) {
        s.generateMipmap(C);
    }
    function L(C, T, J, $) {
        if (a === !1) return T;
        if (C !== null) {
            if (s[C] !== void 0) return s[C];
            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + C + "'");
        }
        let re = T;
        return T === 6403 && (J === 5126 && (re = 33326), J === 5131 && (re = 33325), J === 5121 && (re = 33321)), T === 6407 && (J === 5126 && (re = 34837), J === 5131 && (re = 34843), J === 5121 && (re = 32849)), T === 6408 && (J === 5126 && (re = 34836), J === 5131 && (re = 34842), J === 5121 && (re = $ === Oi ? 35907 : 32856)), (re === 33325 || re === 33326 || re === 34842 || re === 34836) && e.get("EXT_color_buffer_float"), re;
    }
    function I(C, T, J) {
        return b(C, J) === !0 || C.isFramebufferTexture && C.minFilter !== rt && C.minFilter !== tt ? Math.log2(Math.max(T.width, T.height)) + 1 : C.mipmaps !== void 0 && C.mipmaps.length > 0 ? C.mipmaps.length : C.isCompressedTexture && Array.isArray(C.image) ? T.mipmaps.length : 1;
    }
    function k(C) {
        return C === rt || C === ta || C === na ? 9728 : 9729;
    }
    function B(C) {
        let T = C.target;
        T.removeEventListener("dispose", B), w(T), T.isVideoTexture && m.delete(T), o.memory.textures--;
    }
    function P(C) {
        let T = C.target;
        T.removeEventListener("dispose", P), E(T);
    }
    function w(C) {
        let T = n.get(C);
        T.__webglInit !== void 0 && (s.deleteTexture(T.__webglTexture), n.remove(C));
    }
    function E(C) {
        let T = C.texture, J = n.get(C), $ = n.get(T);
        if (!!C) {
            if ($.__webglTexture !== void 0 && (s.deleteTexture($.__webglTexture), o.memory.textures--), C.depthTexture && C.depthTexture.dispose(), C.isWebGLCubeRenderTarget) for(let re = 0; re < 6; re++)s.deleteFramebuffer(J.__webglFramebuffer[re]), J.__webglDepthbuffer && s.deleteRenderbuffer(J.__webglDepthbuffer[re]);
            else s.deleteFramebuffer(J.__webglFramebuffer), J.__webglDepthbuffer && s.deleteRenderbuffer(J.__webglDepthbuffer), J.__webglMultisampledFramebuffer && s.deleteFramebuffer(J.__webglMultisampledFramebuffer), J.__webglColorRenderbuffer && s.deleteRenderbuffer(J.__webglColorRenderbuffer), J.__webglDepthRenderbuffer && s.deleteRenderbuffer(J.__webglDepthRenderbuffer);
            if (C.isWebGLMultipleRenderTargets) for(let re = 0, Z = T.length; re < Z; re++){
                let Me = n.get(T[re]);
                Me.__webglTexture && (s.deleteTexture(Me.__webglTexture), o.memory.textures--), n.remove(T[re]);
            }
            n.remove(T), n.remove(C);
        }
    }
    let D = 0;
    function U() {
        D = 0;
    }
    function F() {
        let C = D;
        return C >= l && console.warn("THREE.WebGLTextures: Trying to use " + C + " texture units while this GPU supports only " + l), D += 1, C;
    }
    function O(C, T) {
        let J = n.get(C);
        if (C.isVideoTexture && se(C), C.version > 0 && J.__version !== C.version) {
            let $ = C.image;
            if ($ === void 0) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
            else if ($.complete === !1) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
                Be(J, C, T);
                return;
            }
        }
        t.activeTexture(33984 + T), t.bindTexture(3553, J.__webglTexture);
    }
    function ne(C, T) {
        let J = n.get(C);
        if (C.version > 0 && J.__version !== C.version) {
            Be(J, C, T);
            return;
        }
        t.activeTexture(33984 + T), t.bindTexture(35866, J.__webglTexture);
    }
    function ce(C, T) {
        let J = n.get(C);
        if (C.version > 0 && J.__version !== C.version) {
            Be(J, C, T);
            return;
        }
        t.activeTexture(33984 + T), t.bindTexture(32879, J.__webglTexture);
    }
    function V(C, T) {
        let J = n.get(C);
        if (C.version > 0 && J.__version !== C.version) {
            Y(J, C, T);
            return;
        }
        t.activeTexture(33984 + T), t.bindTexture(34067, J.__webglTexture);
    }
    let W = {
        [Ns]: 10497,
        [vt]: 33071,
        [Bs]: 33648
    }, he = {
        [rt]: 9728,
        [ta]: 9984,
        [na]: 9986,
        [tt]: 9729,
        [Wc]: 9985,
        [Ui]: 9987
    };
    function le(C, T, J) {
        if (J ? (s.texParameteri(C, 10242, W[T.wrapS]), s.texParameteri(C, 10243, W[T.wrapT]), (C === 32879 || C === 35866) && s.texParameteri(C, 32882, W[T.wrapR]), s.texParameteri(C, 10240, he[T.magFilter]), s.texParameteri(C, 10241, he[T.minFilter])) : (s.texParameteri(C, 10242, 33071), s.texParameteri(C, 10243, 33071), (C === 32879 || C === 35866) && s.texParameteri(C, 32882, 33071), (T.wrapS !== vt || T.wrapT !== vt) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), s.texParameteri(C, 10240, k(T.magFilter)), s.texParameteri(C, 10241, k(T.minFilter)), T.minFilter !== rt && T.minFilter !== tt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), e.has("EXT_texture_filter_anisotropic") === !0) {
            let $ = e.get("EXT_texture_filter_anisotropic");
            if (T.type === nn && e.has("OES_texture_float_linear") === !1 || a === !1 && T.type === kn && e.has("OES_texture_half_float_linear") === !1) return;
            (T.anisotropy > 1 || n.get(T).__currentAnisotropy) && (s.texParameterf(C, $.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(T.anisotropy, i.getMaxAnisotropy())), n.get(T).__currentAnisotropy = T.anisotropy);
        }
    }
    function fe(C, T) {
        C.__webglInit === void 0 && (C.__webglInit = !0, T.addEventListener("dispose", B), C.__webglTexture = s.createTexture(), o.memory.textures++);
    }
    function Be(C, T, J) {
        let $ = 3553;
        T.isDataTexture2DArray && ($ = 35866), T.isDataTexture3D && ($ = 32879), fe(C, T), t.activeTexture(33984 + J), t.bindTexture($, C.__webglTexture), s.pixelStorei(37440, T.flipY), s.pixelStorei(37441, T.premultiplyAlpha), s.pixelStorei(3317, T.unpackAlignment), s.pixelStorei(37443, 0);
        let re = y(T) && _(T.image) === !1, Z = p(T.image, re, !1, h), Me = _(Z) || a, ve = r.convert(T.format), te = r.convert(T.type), R = L(T.internalFormat, ve, te, T.encoding);
        le($, T, Me);
        let ee, Q = T.mipmaps, Ee = a && T.isVideoTexture !== !0, me = C.__version === void 0, Re = I(T, Z, Me);
        if (T.isDepthTexture) R = 6402, a ? T.type === nn ? R = 36012 : T.type === Ps ? R = 33190 : T.type === Ti ? R = 35056 : R = 33189 : T.type === nn && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), T.format === Vn && R === 6402 && T.type !== cr && T.type !== Ps && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), T.type = cr, te = r.convert(T.type)), T.format === Li && R === 6402 && (R = 34041, T.type !== Ti && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), T.type = Ti, te = r.convert(T.type))), Ee && me ? t.texStorage2D(3553, 1, R, Z.width, Z.height) : t.texImage2D(3553, 0, R, Z.width, Z.height, 0, ve, te, null);
        else if (T.isDataTexture) if (Q.length > 0 && Me) {
            Ee && me && t.texStorage2D(3553, Re, R, Q[0].width, Q[0].height);
            for(let oe = 0, Le = Q.length; oe < Le; oe++)ee = Q[oe], Ee ? t.texSubImage2D(3553, 0, 0, 0, ee.width, ee.height, ve, te, ee.data) : t.texImage2D(3553, oe, R, ee.width, ee.height, 0, ve, te, ee.data);
            T.generateMipmaps = !1;
        } else Ee ? (me && t.texStorage2D(3553, Re, R, Z.width, Z.height), t.texSubImage2D(3553, 0, 0, 0, Z.width, Z.height, ve, te, Z.data)) : t.texImage2D(3553, 0, R, Z.width, Z.height, 0, ve, te, Z.data);
        else if (T.isCompressedTexture) {
            Ee && me && t.texStorage2D(3553, Re, R, Q[0].width, Q[0].height);
            for(let oe = 0, Le = Q.length; oe < Le; oe++)ee = Q[oe], T.format !== ct && T.format !== Gn ? ve !== null ? Ee ? t.compressedTexSubImage2D(3553, oe, 0, 0, ee.width, ee.height, ve, ee.data) : t.compressedTexImage2D(3553, oe, R, ee.width, ee.height, 0, ee.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : Ee ? t.texSubImage2D(3553, oe, 0, 0, ee.width, ee.height, ve, te, ee.data) : t.texImage2D(3553, oe, R, ee.width, ee.height, 0, ve, te, ee.data);
        } else if (T.isDataTexture2DArray) Ee ? (me && t.texStorage3D(35866, Re, R, Z.width, Z.height, Z.depth), t.texSubImage3D(35866, 0, 0, 0, 0, Z.width, Z.height, Z.depth, ve, te, Z.data)) : t.texImage3D(35866, 0, R, Z.width, Z.height, Z.depth, 0, ve, te, Z.data);
        else if (T.isDataTexture3D) Ee ? (me && t.texStorage3D(32879, Re, R, Z.width, Z.height, Z.depth), t.texSubImage3D(32879, 0, 0, 0, 0, Z.width, Z.height, Z.depth, ve, te, Z.data)) : t.texImage3D(32879, 0, R, Z.width, Z.height, Z.depth, 0, ve, te, Z.data);
        else if (T.isFramebufferTexture) Ee && me ? t.texStorage2D(3553, Re, R, Z.width, Z.height) : t.texImage2D(3553, 0, R, Z.width, Z.height, 0, ve, te, null);
        else if (Q.length > 0 && Me) {
            Ee && me && t.texStorage2D(3553, Re, R, Q[0].width, Q[0].height);
            for(let oe = 0, Le = Q.length; oe < Le; oe++)ee = Q[oe], Ee ? t.texSubImage2D(3553, oe, 0, 0, ve, te, ee) : t.texImage2D(3553, oe, R, ve, te, ee);
            T.generateMipmaps = !1;
        } else Ee ? (me && t.texStorage2D(3553, Re, R, Z.width, Z.height), t.texSubImage2D(3553, 0, 0, 0, ve, te, Z)) : t.texImage2D(3553, 0, R, ve, te, Z);
        b(T, Me) && A($), C.__version = T.version, T.onUpdate && T.onUpdate(T);
    }
    function Y(C, T, J) {
        if (T.image.length !== 6) return;
        fe(C, T), t.activeTexture(33984 + J), t.bindTexture(34067, C.__webglTexture), s.pixelStorei(37440, T.flipY), s.pixelStorei(37441, T.premultiplyAlpha), s.pixelStorei(3317, T.unpackAlignment), s.pixelStorei(37443, 0);
        let $ = T && (T.isCompressedTexture || T.image[0].isCompressedTexture), re = T.image[0] && T.image[0].isDataTexture, Z = [];
        for(let oe = 0; oe < 6; oe++)!$ && !re ? Z[oe] = p(T.image[oe], !1, !0, c) : Z[oe] = re ? T.image[oe].image : T.image[oe];
        let Me = Z[0], ve = _(Me) || a, te = r.convert(T.format), R = r.convert(T.type), ee = L(T.internalFormat, te, R, T.encoding), Q = a && T.isVideoTexture !== !0, Ee = C.__version === void 0, me = I(T, Me, ve);
        le(34067, T, ve);
        let Re;
        if ($) {
            Q && Ee && t.texStorage2D(34067, me, ee, Me.width, Me.height);
            for(let oe = 0; oe < 6; oe++){
                Re = Z[oe].mipmaps;
                for(let Le = 0; Le < Re.length; Le++){
                    let Xe = Re[Le];
                    T.format !== ct && T.format !== Gn ? te !== null ? Q ? t.compressedTexSubImage2D(34069 + oe, Le, 0, 0, Xe.width, Xe.height, te, Xe.data) : t.compressedTexImage2D(34069 + oe, Le, ee, Xe.width, Xe.height, 0, Xe.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : Q ? t.texSubImage2D(34069 + oe, Le, 0, 0, Xe.width, Xe.height, te, R, Xe.data) : t.texImage2D(34069 + oe, Le, ee, Xe.width, Xe.height, 0, te, R, Xe.data);
                }
            }
        } else {
            Re = T.mipmaps, Q && Ee && (Re.length > 0 && me++, t.texStorage2D(34067, me, ee, Z[0].width, Z[0].height));
            for(let oe = 0; oe < 6; oe++)if (re) {
                Q ? t.texSubImage2D(34069 + oe, 0, 0, 0, Z[oe].width, Z[oe].height, te, R, Z[oe].data) : t.texImage2D(34069 + oe, 0, ee, Z[oe].width, Z[oe].height, 0, te, R, Z[oe].data);
                for(let Le = 0; Le < Re.length; Le++){
                    let We = Re[Le].image[oe].image;
                    Q ? t.texSubImage2D(34069 + oe, Le + 1, 0, 0, We.width, We.height, te, R, We.data) : t.texImage2D(34069 + oe, Le + 1, ee, We.width, We.height, 0, te, R, We.data);
                }
            } else {
                Q ? t.texSubImage2D(34069 + oe, 0, 0, 0, te, R, Z[oe]) : t.texImage2D(34069 + oe, 0, ee, te, R, Z[oe]);
                for(let Le = 0; Le < Re.length; Le++){
                    let Xe = Re[Le];
                    Q ? t.texSubImage2D(34069 + oe, Le + 1, 0, 0, te, R, Xe.image[oe]) : t.texImage2D(34069 + oe, Le + 1, ee, te, R, Xe.image[oe]);
                }
            }
        }
        b(T, ve) && A(34067), C.__version = T.version, T.onUpdate && T.onUpdate(T);
    }
    function Ce(C, T, J, $, re) {
        let Z = r.convert(J.format), Me = r.convert(J.type), ve = L(J.internalFormat, Z, Me, J.encoding);
        n.get(T).__hasExternalTextures || (re === 32879 || re === 35866 ? t.texImage3D(re, 0, ve, T.width, T.height, T.depth, 0, Z, Me, null) : t.texImage2D(re, 0, ve, T.width, T.height, 0, Z, Me, null)), t.bindFramebuffer(36160, C), T.useRenderToTexture ? f.framebufferTexture2DMultisampleEXT(36160, $, re, n.get(J).__webglTexture, 0, ue(T)) : s.framebufferTexture2D(36160, $, re, n.get(J).__webglTexture, 0), t.bindFramebuffer(36160, null);
    }
    function ye(C, T, J) {
        if (s.bindRenderbuffer(36161, C), T.depthBuffer && !T.stencilBuffer) {
            let $ = 33189;
            if (J || T.useRenderToTexture) {
                let re = T.depthTexture;
                re && re.isDepthTexture && (re.type === nn ? $ = 36012 : re.type === Ps && ($ = 33190));
                let Z = ue(T);
                T.useRenderToTexture ? f.renderbufferStorageMultisampleEXT(36161, Z, $, T.width, T.height) : s.renderbufferStorageMultisample(36161, Z, $, T.width, T.height);
            } else s.renderbufferStorage(36161, $, T.width, T.height);
            s.framebufferRenderbuffer(36160, 36096, 36161, C);
        } else if (T.depthBuffer && T.stencilBuffer) {
            let $ = ue(T);
            J && T.useRenderbuffer ? s.renderbufferStorageMultisample(36161, $, 35056, T.width, T.height) : T.useRenderToTexture ? f.renderbufferStorageMultisampleEXT(36161, $, 35056, T.width, T.height) : s.renderbufferStorage(36161, 34041, T.width, T.height), s.framebufferRenderbuffer(36160, 33306, 36161, C);
        } else {
            let $ = T.isWebGLMultipleRenderTargets === !0 ? T.texture[0] : T.texture, re = r.convert($.format), Z = r.convert($.type), Me = L($.internalFormat, re, Z, $.encoding), ve = ue(T);
            J && T.useRenderbuffer ? s.renderbufferStorageMultisample(36161, ve, Me, T.width, T.height) : T.useRenderToTexture ? f.renderbufferStorageMultisampleEXT(36161, ve, Me, T.width, T.height) : s.renderbufferStorage(36161, Me, T.width, T.height);
        }
        s.bindRenderbuffer(36161, null);
    }
    function ge(C, T) {
        if (T && T.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
        if (t.bindFramebuffer(36160, C), !(T.depthTexture && T.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
        (!n.get(T.depthTexture).__webglTexture || T.depthTexture.image.width !== T.width || T.depthTexture.image.height !== T.height) && (T.depthTexture.image.width = T.width, T.depthTexture.image.height = T.height, T.depthTexture.needsUpdate = !0), O(T.depthTexture, 0);
        let $ = n.get(T.depthTexture).__webglTexture, re = ue(T);
        if (T.depthTexture.format === Vn) T.useRenderToTexture ? f.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, $, 0, re) : s.framebufferTexture2D(36160, 36096, 3553, $, 0);
        else if (T.depthTexture.format === Li) T.useRenderToTexture ? f.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, $, 0, re) : s.framebufferTexture2D(36160, 33306, 3553, $, 0);
        else throw new Error("Unknown depthTexture format");
    }
    function xe(C) {
        let T = n.get(C), J = C.isWebGLCubeRenderTarget === !0;
        if (C.depthTexture && !T.__autoAllocateDepthBuffer) {
            if (J) throw new Error("target.depthTexture not supported in Cube render targets");
            ge(T.__webglFramebuffer, C);
        } else if (J) {
            T.__webglDepthbuffer = [];
            for(let $ = 0; $ < 6; $++)t.bindFramebuffer(36160, T.__webglFramebuffer[$]), T.__webglDepthbuffer[$] = s.createRenderbuffer(), ye(T.__webglDepthbuffer[$], C, !1);
        } else t.bindFramebuffer(36160, T.__webglFramebuffer), T.__webglDepthbuffer = s.createRenderbuffer(), ye(T.__webglDepthbuffer, C, !1);
        t.bindFramebuffer(36160, null);
    }
    function Oe(C, T, J) {
        let $ = n.get(C);
        T !== void 0 && Ce($.__webglFramebuffer, C, C.texture, 36064, 3553), J !== void 0 && xe(C);
    }
    function G(C) {
        let T = C.texture, J = n.get(C), $ = n.get(T);
        C.addEventListener("dispose", P), C.isWebGLMultipleRenderTargets !== !0 && ($.__webglTexture === void 0 && ($.__webglTexture = s.createTexture()), $.__version = T.version, o.memory.textures++);
        let re = C.isWebGLCubeRenderTarget === !0, Z = C.isWebGLMultipleRenderTargets === !0, Me = T.isDataTexture3D || T.isDataTexture2DArray, ve = _(C) || a;
        if (a && T.format === Gn && (T.type === nn || T.type === kn) && (T.format = ct, console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")), re) {
            J.__webglFramebuffer = [];
            for(let te = 0; te < 6; te++)J.__webglFramebuffer[te] = s.createFramebuffer();
        } else if (J.__webglFramebuffer = s.createFramebuffer(), Z) if (i.drawBuffers) {
            let te = C.texture;
            for(let R = 0, ee = te.length; R < ee; R++){
                let Q = n.get(te[R]);
                Q.__webglTexture === void 0 && (Q.__webglTexture = s.createTexture(), o.memory.textures++);
            }
        } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
        else if (C.useRenderbuffer) if (a) {
            J.__webglMultisampledFramebuffer = s.createFramebuffer(), J.__webglColorRenderbuffer = s.createRenderbuffer(), s.bindRenderbuffer(36161, J.__webglColorRenderbuffer);
            let te = r.convert(T.format), R = r.convert(T.type), ee = L(T.internalFormat, te, R, T.encoding), Q = ue(C);
            s.renderbufferStorageMultisample(36161, Q, ee, C.width, C.height), t.bindFramebuffer(36160, J.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(36160, 36064, 36161, J.__webglColorRenderbuffer), s.bindRenderbuffer(36161, null), C.depthBuffer && (J.__webglDepthRenderbuffer = s.createRenderbuffer(), ye(J.__webglDepthRenderbuffer, C, !0)), t.bindFramebuffer(36160, null);
        } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        if (re) {
            t.bindTexture(34067, $.__webglTexture), le(34067, T, ve);
            for(let te = 0; te < 6; te++)Ce(J.__webglFramebuffer[te], C, T, 36064, 34069 + te);
            b(T, ve) && A(34067), t.unbindTexture();
        } else if (Z) {
            let te = C.texture;
            for(let R = 0, ee = te.length; R < ee; R++){
                let Q = te[R], Ee = n.get(Q);
                t.bindTexture(3553, Ee.__webglTexture), le(3553, Q, ve), Ce(J.__webglFramebuffer, C, Q, 36064 + R, 3553), b(Q, ve) && A(3553);
            }
            t.unbindTexture();
        } else {
            let te = 3553;
            Me && (a ? te = T.isDataTexture3D ? 32879 : 35866 : console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")), t.bindTexture(te, $.__webglTexture), le(te, T, ve), Ce(J.__webglFramebuffer, C, T, 36064, te), b(T, ve) && A(te), t.unbindTexture();
        }
        C.depthBuffer && xe(C);
    }
    function j(C) {
        let T = _(C) || a, J = C.isWebGLMultipleRenderTargets === !0 ? C.texture : [
            C.texture
        ];
        for(let $ = 0, re = J.length; $ < re; $++){
            let Z = J[$];
            if (b(Z, T)) {
                let Me = C.isWebGLCubeRenderTarget ? 34067 : 3553, ve = n.get(Z).__webglTexture;
                t.bindTexture(Me, ve), A(Me), t.unbindTexture();
            }
        }
    }
    function K(C) {
        if (C.useRenderbuffer) if (a) {
            let T = C.width, J = C.height, $ = 16384, re = [
                36064
            ], Z = C.stencilBuffer ? 33306 : 36096;
            C.depthBuffer && re.push(Z), C.ignoreDepthForMultisampleCopy || (C.depthBuffer && ($ |= 256), C.stencilBuffer && ($ |= 1024));
            let Me = n.get(C);
            t.bindFramebuffer(36008, Me.__webglMultisampledFramebuffer), t.bindFramebuffer(36009, Me.__webglFramebuffer), C.ignoreDepthForMultisampleCopy && (s.invalidateFramebuffer(36008, [
                Z
            ]), s.invalidateFramebuffer(36009, [
                Z
            ])), s.blitFramebuffer(0, 0, T, J, 0, 0, T, J, $, 9728), s.invalidateFramebuffer(36008, re), t.bindFramebuffer(36008, null), t.bindFramebuffer(36009, Me.__webglMultisampledFramebuffer);
        } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
    }
    function ue(C) {
        return a && (C.useRenderbuffer || C.useRenderToTexture) ? Math.min(u, C.samples) : 0;
    }
    function se(C) {
        let T = o.render.frame;
        m.get(C) !== T && (m.set(C, T), C.update());
    }
    let Se = !1, Te = !1;
    function Pe(C, T) {
        C && C.isWebGLRenderTarget && (Se === !1 && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), Se = !0), C = C.texture), O(C, T);
    }
    function Ye(C, T) {
        C && C.isWebGLCubeRenderTarget && (Te === !1 && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), Te = !0), C = C.texture), V(C, T);
    }
    this.allocateTextureUnit = F, this.resetTextureUnits = U, this.setTexture2D = O, this.setTexture2DArray = ne, this.setTexture3D = ce, this.setTextureCube = V, this.rebindTextures = Oe, this.setupRenderTarget = G, this.updateRenderTargetMipmap = j, this.updateMultisampleRenderTarget = K, this.setupDepthRenderbuffer = xe, this.setupFrameBufferTexture = Ce, this.safeSetTexture2D = Pe, this.safeSetTextureCube = Ye;
}
function Ex(s, e, t) {
    let n = t.isWebGL2;
    function i(r) {
        let o;
        if (r === rn) return 5121;
        if (r === Vu) return 32819;
        if (r === Wu) return 32820;
        if (r === qu) return 33635;
        if (r === Hu) return 5120;
        if (r === ku) return 5122;
        if (r === cr) return 5123;
        if (r === Gu) return 5124;
        if (r === Ps) return 5125;
        if (r === nn) return 5126;
        if (r === kn) return n ? 5131 : (o = e.get("OES_texture_half_float"), o !== null ? o.HALF_FLOAT_OES : null);
        if (r === Xu) return 6406;
        if (r === Gn) return 6407;
        if (r === ct) return 6408;
        if (r === Ju) return 6409;
        if (r === Yu) return 6410;
        if (r === Vn) return 6402;
        if (r === Li) return 34041;
        if (r === Zu) return 6403;
        if (r === $u) return 36244;
        if (r === ju) return 33319;
        if (r === Qu) return 33320;
        if (r === Ku) return 36248;
        if (r === ed) return 36249;
        if (r === al || r === ll || r === cl || r === hl) if (o = e.get("WEBGL_compressed_texture_s3tc"), o !== null) {
            if (r === al) return o.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (r === ll) return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (r === cl) return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (r === hl) return o.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else return null;
        if (r === ul || r === dl || r === fl || r === pl) if (o = e.get("WEBGL_compressed_texture_pvrtc"), o !== null) {
            if (r === ul) return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (r === dl) return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (r === fl) return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (r === pl) return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else return null;
        if (r === td) return o = e.get("WEBGL_compressed_texture_etc1"), o !== null ? o.COMPRESSED_RGB_ETC1_WEBGL : null;
        if ((r === ml || r === gl) && (o = e.get("WEBGL_compressed_texture_etc"), o !== null)) {
            if (r === ml) return o.COMPRESSED_RGB8_ETC2;
            if (r === gl) return o.COMPRESSED_RGBA8_ETC2_EAC;
        }
        if (r === nd || r === id || r === rd || r === sd || r === od || r === ad || r === ld || r === cd || r === hd || r === ud || r === dd || r === fd || r === pd || r === md || r === xd || r === yd || r === vd || r === _d || r === Md || r === bd || r === wd || r === Sd || r === Td || r === Ed || r === Ad || r === Cd || r === Ld || r === Rd) return o = e.get("WEBGL_compressed_texture_astc"), o !== null ? r : null;
        if (r === gd) return o = e.get("EXT_texture_compression_bptc"), o !== null ? r : null;
        if (r === Ti) return n ? 34042 : (o = e.get("WEBGL_depth_texture"), o !== null ? o.UNSIGNED_INT_24_8_WEBGL : null);
    }
    return {
        convert: i
    };
}
var ga = class extends ut {
    constructor(e = []){
        super();
        this.cameras = e;
    }
};
ga.prototype.isArrayCamera = !0;
var Hn = class extends Ne {
    constructor(){
        super();
        this.type = "Group";
    }
};
Hn.prototype.isGroup = !0;
var Ax = {
    type: "move"
}, Is = class {
    constructor(){
        this._targetRay = null, this._grip = null, this._hand = null;
    }
    getHandSpace() {
        return this._hand === null && (this._hand = new Hn, this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = {
            pinching: !1
        }), this._hand;
    }
    getTargetRaySpace() {
        return this._targetRay === null && (this._targetRay = new Hn, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new M, this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new M), this._targetRay;
    }
    getGripSpace() {
        return this._grip === null && (this._grip = new Hn, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new M, this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new M), this._grip;
    }
    dispatchEvent(e) {
        return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
    }
    disconnect(e) {
        return this.dispatchEvent({
            type: "disconnected",
            data: e
        }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
    }
    update(e, t, n) {
        let i = null, r = null, o = null, a = this._targetRay, l = this._grip, c = this._hand;
        if (e && t.session.visibilityState !== "visible-blurred") if (a !== null && (i = t.getPose(e.targetRaySpace, n), i !== null && (a.matrix.fromArray(i.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale), i.linearVelocity ? (a.hasLinearVelocity = !0, a.linearVelocity.copy(i.linearVelocity)) : a.hasLinearVelocity = !1, i.angularVelocity ? (a.hasAngularVelocity = !0, a.angularVelocity.copy(i.angularVelocity)) : a.hasAngularVelocity = !1, this.dispatchEvent(Ax))), c && e.hand) {
            o = !0;
            for (let x of e.hand.values()){
                let v = t.getJointPose(x, n);
                if (c.joints[x.jointName] === void 0) {
                    let p = new Hn;
                    p.matrixAutoUpdate = !1, p.visible = !1, c.joints[x.jointName] = p, c.add(p);
                }
                let g = c.joints[x.jointName];
                v !== null && (g.matrix.fromArray(v.transform.matrix), g.matrix.decompose(g.position, g.rotation, g.scale), g.jointRadius = v.radius), g.visible = v !== null;
            }
            let h = c.joints["index-finger-tip"], u = c.joints["thumb-tip"], d = h.position.distanceTo(u.position), f = .02, m = .005;
            c.inputState.pinching && d > f + m ? (c.inputState.pinching = !1, this.dispatchEvent({
                type: "pinchend",
                handedness: e.handedness,
                target: this
            })) : !c.inputState.pinching && d <= f - m && (c.inputState.pinching = !0, this.dispatchEvent({
                type: "pinchstart",
                handedness: e.handedness,
                target: this
            }));
        } else l !== null && e.gripSpace && (r = t.getPose(e.gripSpace, n), r !== null && (l.matrix.fromArray(r.transform.matrix), l.matrix.decompose(l.position, l.rotation, l.scale), r.linearVelocity ? (l.hasLinearVelocity = !0, l.linearVelocity.copy(r.linearVelocity)) : l.hasLinearVelocity = !1, r.angularVelocity ? (l.hasAngularVelocity = !0, l.angularVelocity.copy(r.angularVelocity)) : l.hasAngularVelocity = !1));
        return a !== null && (a.visible = i !== null), l !== null && (l.visible = r !== null), c !== null && (c.visible = o !== null), this;
    }
}, ks = class extends ot {
    constructor(e, t, n, i, r, o, a, l, c, h){
        if (h = h !== void 0 ? h : Vn, h !== Vn && h !== Li) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        n === void 0 && h === Vn && (n = cr), n === void 0 && h === Li && (n = Ti);
        super(null, i, r, o, a, l, h, n, c);
        this.image = {
            width: e,
            height: t
        }, this.magFilter = a !== void 0 ? a : rt, this.minFilter = l !== void 0 ? l : rt, this.flipY = !1, this.generateMipmaps = !1;
    }
};
ks.prototype.isDepthTexture = !0;
var vh = class extends En {
    constructor(e, t){
        super();
        let n = this, i = null, r = 1, o = null, a = "local-floor", l = e.extensions.has("WEBGL_multisampled_render_to_texture"), c = null, h = null, u = null, d = null, f = !1, m = null, x = t.getContextAttributes(), v = null, g = null, p = [], _ = new Map, y = new ut;
        y.layers.enable(1), y.viewport = new Ve;
        let b = new ut;
        b.layers.enable(2), b.viewport = new Ve;
        let A = [
            y,
            b
        ], L = new ga;
        L.layers.enable(1), L.layers.enable(2);
        let I = null, k = null;
        this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(V) {
            let W = p[V];
            return W === void 0 && (W = new Is, p[V] = W), W.getTargetRaySpace();
        }, this.getControllerGrip = function(V) {
            let W = p[V];
            return W === void 0 && (W = new Is, p[V] = W), W.getGripSpace();
        }, this.getHand = function(V) {
            let W = p[V];
            return W === void 0 && (W = new Is, p[V] = W), W.getHandSpace();
        };
        function B(V) {
            let W = _.get(V.inputSource);
            W && W.dispatchEvent({
                type: V.type,
                data: V.inputSource
            });
        }
        function P() {
            _.forEach(function(V, W) {
                V.disconnect(W);
            }), _.clear(), I = null, k = null, e.setRenderTarget(v), d = null, u = null, h = null, i = null, g = null, ce.stop(), n.isPresenting = !1, n.dispatchEvent({
                type: "sessionend"
            });
        }
        this.setFramebufferScaleFactor = function(V) {
            r = V, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        }, this.setReferenceSpaceType = function(V) {
            a = V, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        }, this.getReferenceSpace = function() {
            return o;
        }, this.getBaseLayer = function() {
            return u !== null ? u : d;
        }, this.getBinding = function() {
            return h;
        }, this.getFrame = function() {
            return m;
        }, this.getSession = function() {
            return i;
        }, this.setSession = async function(V) {
            if (i = V, i !== null) {
                if (v = e.getRenderTarget(), i.addEventListener("select", B), i.addEventListener("selectstart", B), i.addEventListener("selectend", B), i.addEventListener("squeeze", B), i.addEventListener("squeezestart", B), i.addEventListener("squeezeend", B), i.addEventListener("end", P), i.addEventListener("inputsourceschange", w), x.xrCompatible !== !0 && await t.makeXRCompatible(), i.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
                    let W = {
                        antialias: i.renderState.layers === void 0 ? x.antialias : !0,
                        alpha: x.alpha,
                        depth: x.depth,
                        stencil: x.stencil,
                        framebufferScaleFactor: r
                    };
                    d = new XRWebGLLayer(i, t, W), i.updateRenderState({
                        baseLayer: d
                    }), g = new At(d.framebufferWidth, d.framebufferHeight, {
                        format: ct,
                        type: rn,
                        encoding: e.outputEncoding
                    });
                } else {
                    f = x.antialias;
                    let W = null, he = null, le = null;
                    x.depth && (le = x.stencil ? 35056 : 33190, W = x.stencil ? Li : Vn, he = x.stencil ? Ti : cr);
                    let fe = {
                        colorFormat: x.alpha || f ? 32856 : 32849,
                        depthFormat: le,
                        scaleFactor: r
                    };
                    h = new XRWebGLBinding(i, t), u = h.createProjectionLayer(fe), i.updateRenderState({
                        layers: [
                            u
                        ]
                    }), f ? g = new Xs(u.textureWidth, u.textureHeight, {
                        format: ct,
                        type: rn,
                        depthTexture: new ks(u.textureWidth, u.textureHeight, he, void 0, void 0, void 0, void 0, void 0, void 0, W),
                        stencilBuffer: x.stencil,
                        ignoreDepth: u.ignoreDepthValues,
                        useRenderToTexture: l,
                        encoding: e.outputEncoding
                    }) : g = new At(u.textureWidth, u.textureHeight, {
                        format: x.alpha ? ct : Gn,
                        type: rn,
                        depthTexture: new ks(u.textureWidth, u.textureHeight, he, void 0, void 0, void 0, void 0, void 0, void 0, W),
                        stencilBuffer: x.stencil,
                        ignoreDepth: u.ignoreDepthValues,
                        encoding: e.outputEncoding
                    });
                }
                this.setFoveation(1), o = await i.requestReferenceSpace(a), ce.setContext(i), ce.start(), n.isPresenting = !0, n.dispatchEvent({
                    type: "sessionstart"
                });
            }
        };
        function w(V) {
            let W = i.inputSources;
            for(let he = 0; he < p.length; he++)_.set(W[he], p[he]);
            for(let he = 0; he < V.removed.length; he++){
                let le = V.removed[he], fe = _.get(le);
                fe && (fe.dispatchEvent({
                    type: "disconnected",
                    data: le
                }), _.delete(le));
            }
            for(let he = 0; he < V.added.length; he++){
                let le = V.added[he], fe = _.get(le);
                fe && fe.dispatchEvent({
                    type: "connected",
                    data: le
                });
            }
        }
        let E = new M, D = new M;
        function U(V, W, he) {
            E.setFromMatrixPosition(W.matrixWorld), D.setFromMatrixPosition(he.matrixWorld);
            let le = E.distanceTo(D), fe = W.projectionMatrix.elements, Be = he.projectionMatrix.elements, Y = fe[14] / (fe[10] - 1), Ce = fe[14] / (fe[10] + 1), ye = (fe[9] + 1) / fe[5], ge = (fe[9] - 1) / fe[5], xe = (fe[8] - 1) / fe[0], Oe = (Be[8] + 1) / Be[0], G = Y * xe, j = Y * Oe, K = le / (-xe + Oe), ue = K * -xe;
            W.matrixWorld.decompose(V.position, V.quaternion, V.scale), V.translateX(ue), V.translateZ(K), V.matrixWorld.compose(V.position, V.quaternion, V.scale), V.matrixWorldInverse.copy(V.matrixWorld).invert();
            let se = Y + K, Se = Ce + K, Te = G - ue, Pe = j + (le - ue), Ye = ye * Ce / Se * se, C = ge * Ce / Se * se;
            V.projectionMatrix.makePerspective(Te, Pe, Ye, C, se, Se);
        }
        function F(V, W) {
            W === null ? V.matrixWorld.copy(V.matrix) : V.matrixWorld.multiplyMatrices(W.matrixWorld, V.matrix), V.matrixWorldInverse.copy(V.matrixWorld).invert();
        }
        this.updateCamera = function(V) {
            if (i === null) return;
            L.near = b.near = y.near = V.near, L.far = b.far = y.far = V.far, (I !== L.near || k !== L.far) && (i.updateRenderState({
                depthNear: L.near,
                depthFar: L.far
            }), I = L.near, k = L.far);
            let W = V.parent, he = L.cameras;
            F(L, W);
            for(let fe = 0; fe < he.length; fe++)F(he[fe], W);
            L.matrixWorld.decompose(L.position, L.quaternion, L.scale), V.position.copy(L.position), V.quaternion.copy(L.quaternion), V.scale.copy(L.scale), V.matrix.copy(L.matrix), V.matrixWorld.copy(L.matrixWorld);
            let le = V.children;
            for(let fe = 0, Be = le.length; fe < Be; fe++)le[fe].updateMatrixWorld(!0);
            he.length === 2 ? U(L, y, b) : L.projectionMatrix.copy(y.projectionMatrix);
        }, this.getCamera = function() {
            return L;
        }, this.getFoveation = function() {
            if (u !== null) return u.fixedFoveation;
            if (d !== null) return d.fixedFoveation;
        }, this.setFoveation = function(V) {
            u !== null && (u.fixedFoveation = V), d !== null && d.fixedFoveation !== void 0 && (d.fixedFoveation = V);
        };
        let O = null;
        function ne(V, W) {
            if (c = W.getViewerPose(o), m = W, c !== null) {
                let le = c.views;
                d !== null && (e.setRenderTargetFramebuffer(g, d.framebuffer), e.setRenderTarget(g));
                let fe = !1;
                le.length !== L.cameras.length && (L.cameras.length = 0, fe = !0);
                for(let Be = 0; Be < le.length; Be++){
                    let Y = le[Be], Ce = null;
                    if (d !== null) Ce = d.getViewport(Y);
                    else {
                        let ge = h.getViewSubImage(u, Y);
                        Ce = ge.viewport, Be === 0 && (e.setRenderTargetTextures(g, ge.colorTexture, u.ignoreDepthValues ? void 0 : ge.depthStencilTexture), e.setRenderTarget(g));
                    }
                    let ye = A[Be];
                    ye.matrix.fromArray(Y.transform.matrix), ye.projectionMatrix.fromArray(Y.projectionMatrix), ye.viewport.set(Ce.x, Ce.y, Ce.width, Ce.height), Be === 0 && L.matrix.copy(ye.matrix), fe === !0 && L.cameras.push(ye);
                }
            }
            let he = i.inputSources;
            for(let le = 0; le < p.length; le++){
                let fe = p[le], Be = he[le];
                fe.update(Be, W, o);
            }
            O && O(V, W), m = null;
        }
        let ce = new rh;
        ce.setAnimationLoop(ne), this.setAnimationLoop = function(V) {
            O = V;
        }, this.dispose = function() {};
    }
};
function Cx(s) {
    function e(g, p) {
        g.fogColor.value.copy(p.color), p.isFog ? (g.fogNear.value = p.near, g.fogFar.value = p.far) : p.isFogExp2 && (g.fogDensity.value = p.density);
    }
    function t(g, p, _, y, b) {
        p.isMeshBasicMaterial ? n(g, p) : p.isMeshLambertMaterial ? (n(g, p), l(g, p)) : p.isMeshToonMaterial ? (n(g, p), h(g, p)) : p.isMeshPhongMaterial ? (n(g, p), c(g, p)) : p.isMeshStandardMaterial ? (n(g, p), p.isMeshPhysicalMaterial ? d(g, p, b) : u(g, p)) : p.isMeshMatcapMaterial ? (n(g, p), f(g, p)) : p.isMeshDepthMaterial ? (n(g, p), m(g, p)) : p.isMeshDistanceMaterial ? (n(g, p), x(g, p)) : p.isMeshNormalMaterial ? (n(g, p), v(g, p)) : p.isLineBasicMaterial ? (i(g, p), p.isLineDashedMaterial && r(g, p)) : p.isPointsMaterial ? o(g, p, _, y) : p.isSpriteMaterial ? a(g, p) : p.isShadowMaterial ? (g.color.value.copy(p.color), g.opacity.value = p.opacity) : p.isShaderMaterial && (p.uniformsNeedUpdate = !1);
    }
    function n(g, p) {
        g.opacity.value = p.opacity, p.color && g.diffuse.value.copy(p.color), p.emissive && g.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity), p.map && (g.map.value = p.map), p.alphaMap && (g.alphaMap.value = p.alphaMap), p.specularMap && (g.specularMap.value = p.specularMap), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
        let _ = s.get(p).envMap;
        _ && (g.envMap.value = _, g.flipEnvMap.value = _.isCubeTexture && _.isRenderTargetTexture === !1 ? -1 : 1, g.reflectivity.value = p.reflectivity, g.ior.value = p.ior, g.refractionRatio.value = p.refractionRatio), p.lightMap && (g.lightMap.value = p.lightMap, g.lightMapIntensity.value = p.lightMapIntensity), p.aoMap && (g.aoMap.value = p.aoMap, g.aoMapIntensity.value = p.aoMapIntensity);
        let y;
        p.map ? y = p.map : p.specularMap ? y = p.specularMap : p.displacementMap ? y = p.displacementMap : p.normalMap ? y = p.normalMap : p.bumpMap ? y = p.bumpMap : p.roughnessMap ? y = p.roughnessMap : p.metalnessMap ? y = p.metalnessMap : p.alphaMap ? y = p.alphaMap : p.emissiveMap ? y = p.emissiveMap : p.clearcoatMap ? y = p.clearcoatMap : p.clearcoatNormalMap ? y = p.clearcoatNormalMap : p.clearcoatRoughnessMap ? y = p.clearcoatRoughnessMap : p.specularIntensityMap ? y = p.specularIntensityMap : p.specularColorMap ? y = p.specularColorMap : p.transmissionMap ? y = p.transmissionMap : p.thicknessMap ? y = p.thicknessMap : p.sheenColorMap ? y = p.sheenColorMap : p.sheenRoughnessMap && (y = p.sheenRoughnessMap), y !== void 0 && (y.isWebGLRenderTarget && (y = y.texture), y.matrixAutoUpdate === !0 && y.updateMatrix(), g.uvTransform.value.copy(y.matrix));
        let b;
        p.aoMap ? b = p.aoMap : p.lightMap && (b = p.lightMap), b !== void 0 && (b.isWebGLRenderTarget && (b = b.texture), b.matrixAutoUpdate === !0 && b.updateMatrix(), g.uv2Transform.value.copy(b.matrix));
    }
    function i(g, p) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity;
    }
    function r(g, p) {
        g.dashSize.value = p.dashSize, g.totalSize.value = p.dashSize + p.gapSize, g.scale.value = p.scale;
    }
    function o(g, p, _, y) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, g.size.value = p.size * _, g.scale.value = y * .5, p.map && (g.map.value = p.map), p.alphaMap && (g.alphaMap.value = p.alphaMap), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
        let b;
        p.map ? b = p.map : p.alphaMap && (b = p.alphaMap), b !== void 0 && (b.matrixAutoUpdate === !0 && b.updateMatrix(), g.uvTransform.value.copy(b.matrix));
    }
    function a(g, p) {
        g.diffuse.value.copy(p.color), g.opacity.value = p.opacity, g.rotation.value = p.rotation, p.map && (g.map.value = p.map), p.alphaMap && (g.alphaMap.value = p.alphaMap), p.alphaTest > 0 && (g.alphaTest.value = p.alphaTest);
        let _;
        p.map ? _ = p.map : p.alphaMap && (_ = p.alphaMap), _ !== void 0 && (_.matrixAutoUpdate === !0 && _.updateMatrix(), g.uvTransform.value.copy(_.matrix));
    }
    function l(g, p) {
        p.emissiveMap && (g.emissiveMap.value = p.emissiveMap);
    }
    function c(g, p) {
        g.specular.value.copy(p.specular), g.shininess.value = Math.max(p.shininess, 1e-4), p.emissiveMap && (g.emissiveMap.value = p.emissiveMap), p.bumpMap && (g.bumpMap.value = p.bumpMap, g.bumpScale.value = p.bumpScale, p.side === it && (g.bumpScale.value *= -1)), p.normalMap && (g.normalMap.value = p.normalMap, g.normalScale.value.copy(p.normalScale), p.side === it && g.normalScale.value.negate()), p.displacementMap && (g.displacementMap.value = p.displacementMap, g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias);
    }
    function h(g, p) {
        p.gradientMap && (g.gradientMap.value = p.gradientMap), p.emissiveMap && (g.emissiveMap.value = p.emissiveMap), p.bumpMap && (g.bumpMap.value = p.bumpMap, g.bumpScale.value = p.bumpScale, p.side === it && (g.bumpScale.value *= -1)), p.normalMap && (g.normalMap.value = p.normalMap, g.normalScale.value.copy(p.normalScale), p.side === it && g.normalScale.value.negate()), p.displacementMap && (g.displacementMap.value = p.displacementMap, g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias);
    }
    function u(g, p) {
        g.roughness.value = p.roughness, g.metalness.value = p.metalness, p.roughnessMap && (g.roughnessMap.value = p.roughnessMap), p.metalnessMap && (g.metalnessMap.value = p.metalnessMap), p.emissiveMap && (g.emissiveMap.value = p.emissiveMap), p.bumpMap && (g.bumpMap.value = p.bumpMap, g.bumpScale.value = p.bumpScale, p.side === it && (g.bumpScale.value *= -1)), p.normalMap && (g.normalMap.value = p.normalMap, g.normalScale.value.copy(p.normalScale), p.side === it && g.normalScale.value.negate()), p.displacementMap && (g.displacementMap.value = p.displacementMap, g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias), s.get(p).envMap && (g.envMapIntensity.value = p.envMapIntensity);
    }
    function d(g, p, _) {
        u(g, p), g.ior.value = p.ior, p.sheen > 0 && (g.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen), g.sheenRoughness.value = p.sheenRoughness, p.sheenColorMap && (g.sheenColorMap.value = p.sheenColorMap), p.sheenRoughnessMap && (g.sheenRoughnessMap.value = p.sheenRoughnessMap)), p.clearcoat > 0 && (g.clearcoat.value = p.clearcoat, g.clearcoatRoughness.value = p.clearcoatRoughness, p.clearcoatMap && (g.clearcoatMap.value = p.clearcoatMap), p.clearcoatRoughnessMap && (g.clearcoatRoughnessMap.value = p.clearcoatRoughnessMap), p.clearcoatNormalMap && (g.clearcoatNormalScale.value.copy(p.clearcoatNormalScale), g.clearcoatNormalMap.value = p.clearcoatNormalMap, p.side === it && g.clearcoatNormalScale.value.negate())), p.transmission > 0 && (g.transmission.value = p.transmission, g.transmissionSamplerMap.value = _.texture, g.transmissionSamplerSize.value.set(_.width, _.height), p.transmissionMap && (g.transmissionMap.value = p.transmissionMap), g.thickness.value = p.thickness, p.thicknessMap && (g.thicknessMap.value = p.thicknessMap), g.attenuationDistance.value = p.attenuationDistance, g.attenuationColor.value.copy(p.attenuationColor)), g.specularIntensity.value = p.specularIntensity, g.specularColor.value.copy(p.specularColor), p.specularIntensityMap && (g.specularIntensityMap.value = p.specularIntensityMap), p.specularColorMap && (g.specularColorMap.value = p.specularColorMap);
    }
    function f(g, p) {
        p.matcap && (g.matcap.value = p.matcap), p.bumpMap && (g.bumpMap.value = p.bumpMap, g.bumpScale.value = p.bumpScale, p.side === it && (g.bumpScale.value *= -1)), p.normalMap && (g.normalMap.value = p.normalMap, g.normalScale.value.copy(p.normalScale), p.side === it && g.normalScale.value.negate()), p.displacementMap && (g.displacementMap.value = p.displacementMap, g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias);
    }
    function m(g, p) {
        p.displacementMap && (g.displacementMap.value = p.displacementMap, g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias);
    }
    function x(g, p) {
        p.displacementMap && (g.displacementMap.value = p.displacementMap, g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias), g.referencePosition.value.copy(p.referencePosition), g.nearDistance.value = p.nearDistance, g.farDistance.value = p.farDistance;
    }
    function v(g, p) {
        p.bumpMap && (g.bumpMap.value = p.bumpMap, g.bumpScale.value = p.bumpScale, p.side === it && (g.bumpScale.value *= -1)), p.normalMap && (g.normalMap.value = p.normalMap, g.normalScale.value.copy(p.normalScale), p.side === it && g.normalScale.value.negate()), p.displacementMap && (g.displacementMap.value = p.displacementMap, g.displacementScale.value = p.displacementScale, g.displacementBias.value = p.displacementBias);
    }
    return {
        refreshFogUniforms: e,
        refreshMaterialUniforms: t
    };
}
function Lx() {
    let s = qs("canvas");
    return s.style.display = "block", s;
}
function qe(s = {}) {
    let e = s.canvas !== void 0 ? s.canvas : Lx(), t = s.context !== void 0 ? s.context : null, n = s.alpha !== void 0 ? s.alpha : !1, i = s.depth !== void 0 ? s.depth : !0, r = s.stencil !== void 0 ? s.stencil : !0, o = s.antialias !== void 0 ? s.antialias : !1, a = s.premultipliedAlpha !== void 0 ? s.premultipliedAlpha : !0, l = s.preserveDrawingBuffer !== void 0 ? s.preserveDrawingBuffer : !1, c = s.powerPreference !== void 0 ? s.powerPreference : "default", h = s.failIfMajorPerformanceCaveat !== void 0 ? s.failIfMajorPerformanceCaveat : !1, u = null, d = null, f = [], m = [];
    this.domElement = e, this.debug = {
        checkShaderErrors: !0
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.outputEncoding = Nt, this.physicallyCorrectLights = !1, this.toneMapping = _n, this.toneMappingExposure = 1;
    let x = this, v = !1, g = 0, p = 0, _ = null, y = -1, b = null, A = new Ve, L = new Ve, I = null, k = e.width, B = e.height, P = 1, w = null, E = null, D = new Ve(0, 0, k, B), U = new Ve(0, 0, k, B), F = !1, O = [], ne = new Dr, ce = !1, V = !1, W = null, he = new pe, le = new M, fe = {
        background: null,
        fog: null,
        environment: null,
        overrideMaterial: null,
        isScene: !0
    };
    function Be() {
        return _ === null ? P : 1;
    }
    let Y = t;
    function Ce(S, N) {
        for(let H = 0; H < S.length; H++){
            let z = S[H], q = e.getContext(z, N);
            if (q !== null) return q;
        }
        return null;
    }
    try {
        let S = {
            alpha: n,
            depth: i,
            stencil: r,
            antialias: o,
            premultipliedAlpha: a,
            preserveDrawingBuffer: l,
            powerPreference: c,
            failIfMajorPerformanceCaveat: h
        };
        if ("setAttribute" in e && e.setAttribute("data-engine", `three.js r${ca}`), e.addEventListener("webglcontextlost", Ee, !1), e.addEventListener("webglcontextrestored", me, !1), Y === null) {
            let N = [
                "webgl2",
                "webgl",
                "experimental-webgl"
            ];
            if (x.isWebGL1Renderer === !0 && N.shift(), Y = Ce(N, S), Y === null) throw Ce(N) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
        }
        Y.getShaderPrecisionFormat === void 0 && (Y.getShaderPrecisionFormat = function() {
            return {
                rangeMin: 1,
                rangeMax: 1,
                precision: 1
            };
        });
    } catch (S) {
        throw console.error("THREE.WebGLRenderer: " + S.message), S;
    }
    let ye, ge, xe, Oe, G, j, K, ue, se, Se, Te, Pe, Ye, C, T, J, $, re, Z, Me, ve, te, R;
    function ee() {
        ye = new Qm(Y), ge = new Xm(Y, ye, s), ye.init(ge), te = new Ex(Y, ye, ge), xe = new Sx(Y, ye, ge), O[0] = 1029, Oe = new tg(Y), G = new fx, j = new Tx(Y, ye, xe, G, ge, te, Oe), K = new Ym(x), ue = new jm(x), se = new gf(Y, ge), R = new Wm(Y, ye, se, ge), Se = new Km(Y, se, Oe, R), Te = new sg(Y, Se, se, Oe), Z = new rg(Y, ge, j), J = new Jm(G), Pe = new dx(x, K, ue, ye, ge, R, J), Ye = new Cx(G), C = new mx, T = new Mx(ye, ge), re = new Vm(x, K, xe, Te, a), $ = new yh(x, Te, ge), Me = new qm(Y, ye, Oe, ge), ve = new eg(Y, ye, Oe, ge), Oe.programs = Pe.programs, x.capabilities = ge, x.extensions = ye, x.properties = G, x.renderLists = C, x.shadowMap = $, x.state = xe, x.info = Oe;
    }
    ee();
    let Q = new vh(x, Y);
    this.xr = Q, this.getContext = function() {
        return Y;
    }, this.getContextAttributes = function() {
        return Y.getContextAttributes();
    }, this.forceContextLoss = function() {
        let S = ye.get("WEBGL_lose_context");
        S && S.loseContext();
    }, this.forceContextRestore = function() {
        let S = ye.get("WEBGL_lose_context");
        S && S.restoreContext();
    }, this.getPixelRatio = function() {
        return P;
    }, this.setPixelRatio = function(S) {
        S !== void 0 && (P = S, this.setSize(k, B, !1));
    }, this.getSize = function(S) {
        return S.set(k, B);
    }, this.setSize = function(S, N, H) {
        if (Q.isPresenting) {
            console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
            return;
        }
        k = S, B = N, e.width = Math.floor(S * P), e.height = Math.floor(N * P), H !== !1 && (e.style.width = S + "px", e.style.height = N + "px"), this.setViewport(0, 0, S, N);
    }, this.getDrawingBufferSize = function(S) {
        return S.set(k * P, B * P).floor();
    }, this.setDrawingBufferSize = function(S, N, H) {
        k = S, B = N, P = H, e.width = Math.floor(S * H), e.height = Math.floor(N * H), this.setViewport(0, 0, S, N);
    }, this.getCurrentViewport = function(S) {
        return S.copy(A);
    }, this.getViewport = function(S) {
        return S.copy(D);
    }, this.setViewport = function(S, N, H, z) {
        S.isVector4 ? D.set(S.x, S.y, S.z, S.w) : D.set(S, N, H, z), xe.viewport(A.copy(D).multiplyScalar(P).floor());
    }, this.getScissor = function(S) {
        return S.copy(U);
    }, this.setScissor = function(S, N, H, z) {
        S.isVector4 ? U.set(S.x, S.y, S.z, S.w) : U.set(S, N, H, z), xe.scissor(L.copy(U).multiplyScalar(P).floor());
    }, this.getScissorTest = function() {
        return F;
    }, this.setScissorTest = function(S) {
        xe.setScissorTest(F = S);
    }, this.setOpaqueSort = function(S) {
        w = S;
    }, this.setTransparentSort = function(S) {
        E = S;
    }, this.getClearColor = function(S) {
        return S.copy(re.getClearColor());
    }, this.setClearColor = function() {
        re.setClearColor.apply(re, arguments);
    }, this.getClearAlpha = function() {
        return re.getClearAlpha();
    }, this.setClearAlpha = function() {
        re.setClearAlpha.apply(re, arguments);
    }, this.clear = function(S, N, H) {
        let z = 0;
        (S === void 0 || S) && (z |= 16384), (N === void 0 || N) && (z |= 256), (H === void 0 || H) && (z |= 1024), Y.clear(z);
    }, this.clearColor = function() {
        this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
        this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
        this.clear(!1, !1, !0);
    }, this.dispose = function() {
        e.removeEventListener("webglcontextlost", Ee, !1), e.removeEventListener("webglcontextrestored", me, !1), C.dispose(), T.dispose(), G.dispose(), K.dispose(), ue.dispose(), Te.dispose(), R.dispose(), Pe.dispose(), Q.dispose(), Q.removeEventListener("sessionstart", Ut), Q.removeEventListener("sessionend", Ot), W && (W.dispose(), W = null), Ln.stop();
    };
    function Ee(S) {
        S.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), v = !0;
    }
    function me() {
        console.log("THREE.WebGLRenderer: Context Restored."), v = !1;
        let S = Oe.autoReset, N = $.enabled, H = $.autoUpdate, z = $.needsUpdate, q = $.type;
        ee(), Oe.autoReset = S, $.enabled = N, $.autoUpdate = H, $.needsUpdate = z, $.type = q;
    }
    function Re(S) {
        let N = S.target;
        N.removeEventListener("dispose", Re), oe(N);
    }
    function oe(S) {
        Le(S), G.remove(S);
    }
    function Le(S) {
        let N = G.get(S).programs;
        N !== void 0 && (N.forEach(function(H) {
            Pe.releaseProgram(H);
        }), S.isShaderMaterial && Pe.releaseShaderCache(S));
    }
    this.renderBufferDirect = function(S, N, H, z, q, be) {
        N === null && (N = fe);
        let Ae = q.isMesh && q.matrixWorld.determinant() < 0, Ie = lu(S, N, H, z, q);
        xe.setMaterial(z, Ae);
        let we = H.index, He = H.attributes.position;
        if (we === null) {
            if (He === void 0 || He.count === 0) return;
        } else if (we.count === 0) return;
        let De = 1;
        z.wireframe === !0 && (we = Se.getWireframeAttribute(H), De = 2), R.setup(q, z, Ie, H, we);
        let ze, je = Me;
        we !== null && (ze = se.get(we), je = ve, je.setIndex(ze));
        let Rn = we !== null ? we.count : He.count, ei = H.drawRange.start * De, Ge = H.drawRange.count * De, Ht = be !== null ? be.start * De : 0, at = be !== null ? be.count * De : 1 / 0, kt = Math.max(ei, Ht), Gr = Math.min(Rn, ei + Ge, Ht + at) - 1, Gt = Math.max(0, Gr - kt + 1);
        if (Gt !== 0) {
            if (q.isMesh) z.wireframe === !0 ? (xe.setLineWidth(z.wireframeLinewidth * Be()), je.setMode(1)) : je.setMode(4);
            else if (q.isLine) {
                let Zt = z.linewidth;
                Zt === void 0 && (Zt = 1), xe.setLineWidth(Zt * Be()), q.isLineSegments ? je.setMode(1) : q.isLineLoop ? je.setMode(2) : je.setMode(3);
            } else q.isPoints ? je.setMode(0) : q.isSprite && je.setMode(4);
            if (q.isInstancedMesh) je.renderInstances(kt, Gt, q.count);
            else if (H.isInstancedBufferGeometry) {
                let Zt = Math.min(H.instanceCount, H._maxInstanceCount);
                je.renderInstances(kt, Gt, Zt);
            } else je.render(kt, Gt);
        }
    }, this.compile = function(S, N) {
        d = T.get(S), d.init(), m.push(d), S.traverseVisible(function(H) {
            H.isLight && H.layers.test(N.layers) && (d.pushLight(H), H.castShadow && d.pushShadow(H));
        }), d.setupLights(x.physicallyCorrectLights), S.traverse(function(H) {
            let z = H.material;
            if (z) if (Array.isArray(z)) for(let q = 0; q < z.length; q++){
                let be = z[q];
                xo(be, S, H);
            }
            else xo(z, S, H);
        }), m.pop(), d = null;
    };
    let Xe = null;
    function We(S) {
        Xe && Xe(S);
    }
    function Ut() {
        Ln.stop();
    }
    function Ot() {
        Ln.start();
    }
    let Ln = new rh;
    Ln.setAnimationLoop(We), typeof window < "u" && Ln.setContext(window), this.setAnimationLoop = function(S) {
        Xe = S, Q.setAnimationLoop(S), S === null ? Ln.stop() : Ln.start();
    }, Q.addEventListener("sessionstart", Ut), Q.addEventListener("sessionend", Ot), this.render = function(S, N) {
        if (N !== void 0 && N.isCamera !== !0) {
            console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
            return;
        }
        if (v === !0) return;
        S.autoUpdate === !0 && S.updateMatrixWorld(), N.parent === null && N.updateMatrixWorld(), Q.enabled === !0 && Q.isPresenting === !0 && (Q.cameraAutoUpdate === !0 && Q.updateCamera(N), N = Q.getCamera()), S.isScene === !0 && S.onBeforeRender(x, S, N, _), d = T.get(S, m.length), d.init(), m.push(d), he.multiplyMatrices(N.projectionMatrix, N.matrixWorldInverse), ne.setFromProjectionMatrix(he), V = this.localClippingEnabled, ce = J.init(this.clippingPlanes, V, N), u = C.get(S, f.length), u.init(), f.push(u), Qa(S, N, 0, x.sortObjects), u.finish(), x.sortObjects === !0 && u.sort(w, E), ce === !0 && J.beginShadows();
        let H = d.state.shadowsArray;
        if ($.render(H, S, N), ce === !0 && J.endShadows(), this.info.autoReset === !0 && this.info.reset(), re.render(u, S), d.setupLights(x.physicallyCorrectLights), N.isArrayCamera) {
            let z = N.cameras;
            for(let q = 0, be = z.length; q < be; q++){
                let Ae = z[q];
                Ka(u, S, Ae, Ae.viewport);
            }
        } else Ka(u, S, N);
        _ !== null && (j.updateMultisampleRenderTarget(_), j.updateRenderTargetMipmap(_)), S.isScene === !0 && S.onAfterRender(x, S, N), xe.buffers.depth.setTest(!0), xe.buffers.depth.setMask(!0), xe.buffers.color.setMask(!0), xe.setPolygonOffset(!1), R.resetDefaultState(), y = -1, b = null, m.pop(), m.length > 0 ? d = m[m.length - 1] : d = null, f.pop(), f.length > 0 ? u = f[f.length - 1] : u = null;
    };
    function Qa(S, N, H, z) {
        if (S.visible === !1) return;
        if (S.layers.test(N.layers)) {
            if (S.isGroup) H = S.renderOrder;
            else if (S.isLOD) S.autoUpdate === !0 && S.update(N);
            else if (S.isLight) d.pushLight(S), S.castShadow && d.pushShadow(S);
            else if (S.isSprite) {
                if (!S.frustumCulled || ne.intersectsSprite(S)) {
                    z && le.setFromMatrixPosition(S.matrixWorld).applyMatrix4(he);
                    let Ae = Te.update(S), Ie = S.material;
                    Ie.visible && u.push(S, Ae, Ie, H, le.z, null);
                }
            } else if ((S.isMesh || S.isLine || S.isPoints) && (S.isSkinnedMesh && S.skeleton.frame !== Oe.render.frame && (S.skeleton.update(), S.skeleton.frame = Oe.render.frame), !S.frustumCulled || ne.intersectsObject(S))) {
                z && le.setFromMatrixPosition(S.matrixWorld).applyMatrix4(he);
                let Ae = Te.update(S), Ie = S.material;
                if (Array.isArray(Ie)) {
                    let we = Ae.groups;
                    for(let He = 0, De = we.length; He < De; He++){
                        let ze = we[He], je = Ie[ze.materialIndex];
                        je && je.visible && u.push(S, Ae, je, H, le.z, ze);
                    }
                } else Ie.visible && u.push(S, Ae, Ie, H, le.z, null);
            }
        }
        let be = S.children;
        for(let Ae = 0, Ie = be.length; Ae < Ie; Ae++)Qa(be[Ae], N, H, z);
    }
    function Ka(S, N, H, z) {
        let q = S.opaque, be = S.transmissive, Ae = S.transparent;
        d.setupLightsView(H), be.length > 0 && ou(q, N, H), z && xe.viewport(A.copy(z)), q.length > 0 && kr(q, N, H), be.length > 0 && kr(be, N, H), Ae.length > 0 && kr(Ae, N, H);
    }
    function ou(S, N, H) {
        if (W === null) {
            let Ae = o === !0 && ge.isWebGL2 === !0 ? Xs : At;
            W = new Ae(1024, 1024, {
                generateMipmaps: !0,
                type: te.convert(kn) !== null ? kn : rn,
                minFilter: Ui,
                magFilter: rt,
                wrapS: vt,
                wrapT: vt,
                useRenderToTexture: ye.has("WEBGL_multisampled_render_to_texture")
            });
        }
        let z = x.getRenderTarget();
        x.setRenderTarget(W), x.clear();
        let q = x.toneMapping;
        x.toneMapping = _n, kr(S, N, H), x.toneMapping = q, j.updateMultisampleRenderTarget(W), j.updateRenderTargetMipmap(W), x.setRenderTarget(z);
    }
    function kr(S, N, H) {
        let z = N.isScene === !0 ? N.overrideMaterial : null;
        for(let q = 0, be = S.length; q < be; q++){
            let Ae = S[q], Ie = Ae.object, we = Ae.geometry, He = z === null ? Ae.material : z, De = Ae.group;
            Ie.layers.test(H.layers) && au(Ie, N, H, we, He, De);
        }
    }
    function au(S, N, H, z, q, be) {
        S.onBeforeRender(x, N, H, z, q, be), S.modelViewMatrix.multiplyMatrices(H.matrixWorldInverse, S.matrixWorld), S.normalMatrix.getNormalMatrix(S.modelViewMatrix), q.onBeforeRender(x, N, H, z, S, be), q.transparent === !0 && q.side === Ci ? (q.side = it, q.needsUpdate = !0, x.renderBufferDirect(H, N, z, q, S, be), q.side = Ai, q.needsUpdate = !0, x.renderBufferDirect(H, N, z, q, S, be), q.side = Ci) : x.renderBufferDirect(H, N, z, q, S, be), S.onAfterRender(x, N, H, z, q, be);
    }
    function xo(S, N, H) {
        N.isScene !== !0 && (N = fe);
        let z = G.get(S), q = d.state.lights, be = d.state.shadowsArray, Ae = q.state.version, Ie = Pe.getParameters(S, q.state, be, N, H), we = Pe.getProgramCacheKey(Ie), He = z.programs;
        z.environment = S.isMeshStandardMaterial ? N.environment : null, z.fog = N.fog, z.envMap = (S.isMeshStandardMaterial ? ue : K).get(S.envMap || z.environment), He === void 0 && (S.addEventListener("dispose", Re), He = new Map, z.programs = He);
        let De = He.get(we);
        if (De !== void 0) {
            if (z.currentProgram === De && z.lightsStateVersion === Ae) return el(S, Ie), De;
        } else Ie.uniforms = Pe.getUniforms(S), S.onBuild(H, Ie, x), S.onBeforeCompile(Ie, x), De = Pe.acquireProgram(Ie, we), He.set(we, De), z.uniforms = Ie.uniforms;
        let ze = z.uniforms;
        (!S.isShaderMaterial && !S.isRawShaderMaterial || S.clipping === !0) && (ze.clippingPlanes = J.uniform), el(S, Ie), z.needsLights = hu(S), z.lightsStateVersion = Ae, z.needsLights && (ze.ambientLightColor.value = q.state.ambient, ze.lightProbe.value = q.state.probe, ze.directionalLights.value = q.state.directional, ze.directionalLightShadows.value = q.state.directionalShadow, ze.spotLights.value = q.state.spot, ze.spotLightShadows.value = q.state.spotShadow, ze.rectAreaLights.value = q.state.rectArea, ze.ltc_1.value = q.state.rectAreaLTC1, ze.ltc_2.value = q.state.rectAreaLTC2, ze.pointLights.value = q.state.point, ze.pointLightShadows.value = q.state.pointShadow, ze.hemisphereLights.value = q.state.hemi, ze.directionalShadowMap.value = q.state.directionalShadowMap, ze.directionalShadowMatrix.value = q.state.directionalShadowMatrix, ze.spotShadowMap.value = q.state.spotShadowMap, ze.spotShadowMatrix.value = q.state.spotShadowMatrix, ze.pointShadowMap.value = q.state.pointShadowMap, ze.pointShadowMatrix.value = q.state.pointShadowMatrix);
        let je = De.getUniforms(), Rn = bn.seqWithValue(je.seq, ze);
        return z.currentProgram = De, z.uniformsList = Rn, De;
    }
    function el(S, N) {
        let H = G.get(S);
        H.outputEncoding = N.outputEncoding, H.instancing = N.instancing, H.skinning = N.skinning, H.morphTargets = N.morphTargets, H.morphNormals = N.morphNormals, H.morphTargetsCount = N.morphTargetsCount, H.numClippingPlanes = N.numClippingPlanes, H.numIntersection = N.numClipIntersection, H.vertexAlphas = N.vertexAlphas, H.vertexTangents = N.vertexTangents, H.toneMapping = N.toneMapping;
    }
    function lu(S, N, H, z, q) {
        N.isScene !== !0 && (N = fe), j.resetTextureUnits();
        let be = N.fog, Ae = z.isMeshStandardMaterial ? N.environment : null, Ie = _ === null ? x.outputEncoding : _.texture.encoding, we = (z.isMeshStandardMaterial ? ue : K).get(z.envMap || Ae), He = z.vertexColors === !0 && !!H.attributes.color && H.attributes.color.itemSize === 4, De = !!z.normalMap && !!H.attributes.tangent, ze = !!H.morphAttributes.position, je = !!H.morphAttributes.normal, Rn = H.morphAttributes.position ? H.morphAttributes.position.length : 0, ei = z.toneMapped ? x.toneMapping : _n, Ge = G.get(z), Ht = d.state.lights;
        if (ce === !0 && (V === !0 || S !== b)) {
            let Pt = S === b && z.id === y;
            J.setState(z, S, Pt);
        }
        let at = !1;
        z.version === Ge.__version ? (Ge.needsLights && Ge.lightsStateVersion !== Ht.state.version || Ge.outputEncoding !== Ie || q.isInstancedMesh && Ge.instancing === !1 || !q.isInstancedMesh && Ge.instancing === !0 || q.isSkinnedMesh && Ge.skinning === !1 || !q.isSkinnedMesh && Ge.skinning === !0 || Ge.envMap !== we || z.fog && Ge.fog !== be || Ge.numClippingPlanes !== void 0 && (Ge.numClippingPlanes !== J.numPlanes || Ge.numIntersection !== J.numIntersection) || Ge.vertexAlphas !== He || Ge.vertexTangents !== De || Ge.morphTargets !== ze || Ge.morphNormals !== je || Ge.toneMapping !== ei || ge.isWebGL2 === !0 && Ge.morphTargetsCount !== Rn) && (at = !0) : (at = !0, Ge.__version = z.version);
        let kt = Ge.currentProgram;
        at === !0 && (kt = xo(z, N, q));
        let Gr = !1, Gt = !1, Zt = !1, xt = kt.getUniforms(), Xi = Ge.uniforms;
        if (xe.useProgram(kt.program) && (Gr = !0, Gt = !0, Zt = !0), z.id !== y && (y = z.id, Gt = !0), Gr || b !== S) {
            if (xt.setValue(Y, "projectionMatrix", S.projectionMatrix), ge.logarithmicDepthBuffer && xt.setValue(Y, "logDepthBufFC", 2 / (Math.log(S.far + 1) / Math.LN2)), b !== S && (b = S, Gt = !0, Zt = !0), z.isShaderMaterial || z.isMeshPhongMaterial || z.isMeshToonMaterial || z.isMeshStandardMaterial || z.envMap) {
                let Pt = xt.map.cameraPosition;
                Pt !== void 0 && Pt.setValue(Y, le.setFromMatrixPosition(S.matrixWorld));
            }
            (z.isMeshPhongMaterial || z.isMeshToonMaterial || z.isMeshLambertMaterial || z.isMeshBasicMaterial || z.isMeshStandardMaterial || z.isShaderMaterial) && xt.setValue(Y, "isOrthographic", S.isOrthographicCamera === !0), (z.isMeshPhongMaterial || z.isMeshToonMaterial || z.isMeshLambertMaterial || z.isMeshBasicMaterial || z.isMeshStandardMaterial || z.isShaderMaterial || z.isShadowMaterial || q.isSkinnedMesh) && xt.setValue(Y, "viewMatrix", S.matrixWorldInverse);
        }
        if (q.isSkinnedMesh) {
            xt.setOptional(Y, q, "bindMatrix"), xt.setOptional(Y, q, "bindMatrixInverse");
            let Pt = q.skeleton;
            Pt && (ge.floatVertexTextures ? (Pt.boneTexture === null && Pt.computeBoneTexture(), xt.setValue(Y, "boneTexture", Pt.boneTexture, j), xt.setValue(Y, "boneTextureSize", Pt.boneTextureSize)) : xt.setOptional(Y, Pt, "boneMatrices"));
        }
        return !!H && (H.morphAttributes.position !== void 0 || H.morphAttributes.normal !== void 0) && Z.update(q, H, z, kt), (Gt || Ge.receiveShadow !== q.receiveShadow) && (Ge.receiveShadow = q.receiveShadow, xt.setValue(Y, "receiveShadow", q.receiveShadow)), Gt && (xt.setValue(Y, "toneMappingExposure", x.toneMappingExposure), Ge.needsLights && cu(Xi, Zt), be && z.fog && Ye.refreshFogUniforms(Xi, be), Ye.refreshMaterialUniforms(Xi, z, P, B, W), bn.upload(Y, Ge.uniformsList, Xi, j)), z.isShaderMaterial && z.uniformsNeedUpdate === !0 && (bn.upload(Y, Ge.uniformsList, Xi, j), z.uniformsNeedUpdate = !1), z.isSpriteMaterial && xt.setValue(Y, "center", q.center), xt.setValue(Y, "modelViewMatrix", q.modelViewMatrix), xt.setValue(Y, "normalMatrix", q.normalMatrix), xt.setValue(Y, "modelMatrix", q.matrixWorld), kt;
    }
    function cu(S, N) {
        S.ambientLightColor.needsUpdate = N, S.lightProbe.needsUpdate = N, S.directionalLights.needsUpdate = N, S.directionalLightShadows.needsUpdate = N, S.pointLights.needsUpdate = N, S.pointLightShadows.needsUpdate = N, S.spotLights.needsUpdate = N, S.spotLightShadows.needsUpdate = N, S.rectAreaLights.needsUpdate = N, S.hemisphereLights.needsUpdate = N;
    }
    function hu(S) {
        return S.isMeshLambertMaterial || S.isMeshToonMaterial || S.isMeshPhongMaterial || S.isMeshStandardMaterial || S.isShadowMaterial || S.isShaderMaterial && S.lights === !0;
    }
    this.getActiveCubeFace = function() {
        return g;
    }, this.getActiveMipmapLevel = function() {
        return p;
    }, this.getRenderTarget = function() {
        return _;
    }, this.setRenderTargetTextures = function(S, N, H) {
        G.get(S.texture).__webglTexture = N, G.get(S.depthTexture).__webglTexture = H;
        let z = G.get(S);
        z.__hasExternalTextures = !0, z.__hasExternalTextures && (z.__autoAllocateDepthBuffer = H === void 0, z.__autoAllocateDepthBuffer || S.useRenderToTexture && (console.warn("render-to-texture extension was disabled because an external texture was provided"), S.useRenderToTexture = !1, S.useRenderbuffer = !0));
    }, this.setRenderTargetFramebuffer = function(S, N) {
        let H = G.get(S);
        H.__webglFramebuffer = N, H.__useDefaultFramebuffer = N === void 0;
    }, this.setRenderTarget = function(S, N = 0, H = 0) {
        _ = S, g = N, p = H;
        let z = !0;
        if (S) {
            let we = G.get(S);
            we.__useDefaultFramebuffer !== void 0 ? (xe.bindFramebuffer(36160, null), z = !1) : we.__webglFramebuffer === void 0 ? j.setupRenderTarget(S) : we.__hasExternalTextures && j.rebindTextures(S, G.get(S.texture).__webglTexture, G.get(S.depthTexture).__webglTexture);
        }
        let q = null, be = !1, Ae = !1;
        if (S) {
            let we = S.texture;
            (we.isDataTexture3D || we.isDataTexture2DArray) && (Ae = !0);
            let He = G.get(S).__webglFramebuffer;
            S.isWebGLCubeRenderTarget ? (q = He[N], be = !0) : S.useRenderbuffer ? q = G.get(S).__webglMultisampledFramebuffer : q = He, A.copy(S.viewport), L.copy(S.scissor), I = S.scissorTest;
        } else A.copy(D).multiplyScalar(P).floor(), L.copy(U).multiplyScalar(P).floor(), I = F;
        if (xe.bindFramebuffer(36160, q) && ge.drawBuffers && z) {
            let we = !1;
            if (S) if (S.isWebGLMultipleRenderTargets) {
                let He = S.texture;
                if (O.length !== He.length || O[0] !== 36064) {
                    for(let De = 0, ze = He.length; De < ze; De++)O[De] = 36064 + De;
                    O.length = He.length, we = !0;
                }
            } else (O.length !== 1 || O[0] !== 36064) && (O[0] = 36064, O.length = 1, we = !0);
            else (O.length !== 1 || O[0] !== 1029) && (O[0] = 1029, O.length = 1, we = !0);
            we && (ge.isWebGL2 ? Y.drawBuffers(O) : ye.get("WEBGL_draw_buffers").drawBuffersWEBGL(O));
        }
        if (xe.viewport(A), xe.scissor(L), xe.setScissorTest(I), be) {
            let we = G.get(S.texture);
            Y.framebufferTexture2D(36160, 36064, 34069 + N, we.__webglTexture, H);
        } else if (Ae) {
            let we = G.get(S.texture), He = N || 0;
            Y.framebufferTextureLayer(36160, 36064, we.__webglTexture, H || 0, He);
        }
        y = -1;
    }, this.readRenderTargetPixels = function(S, N, H, z, q, be, Ae) {
        if (!(S && S.isWebGLRenderTarget)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
            return;
        }
        let Ie = G.get(S).__webglFramebuffer;
        if (S.isWebGLCubeRenderTarget && Ae !== void 0 && (Ie = Ie[Ae]), Ie) {
            xe.bindFramebuffer(36160, Ie);
            try {
                let we = S.texture, He = we.format, De = we.type;
                if (He !== ct && te.convert(He) !== Y.getParameter(35739)) {
                    console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                    return;
                }
                let ze = De === kn && (ye.has("EXT_color_buffer_half_float") || ge.isWebGL2 && ye.has("EXT_color_buffer_float"));
                if (De !== rn && te.convert(De) !== Y.getParameter(35738) && !(De === nn && (ge.isWebGL2 || ye.has("OES_texture_float") || ye.has("WEBGL_color_buffer_float"))) && !ze) {
                    console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                    return;
                }
                Y.checkFramebufferStatus(36160) === 36053 ? N >= 0 && N <= S.width - z && H >= 0 && H <= S.height - q && Y.readPixels(N, H, z, q, te.convert(He), te.convert(De), be) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
            } finally{
                let we = _ !== null ? G.get(_).__webglFramebuffer : null;
                xe.bindFramebuffer(36160, we);
            }
        }
    }, this.copyFramebufferToTexture = function(S, N, H = 0) {
        if (N.isFramebufferTexture !== !0) {
            console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");
            return;
        }
        let z = Math.pow(2, -H), q = Math.floor(N.image.width * z), be = Math.floor(N.image.height * z);
        j.setTexture2D(N, 0), Y.copyTexSubImage2D(3553, H, 0, 0, S.x, S.y, q, be), xe.unbindTexture();
    }, this.copyTextureToTexture = function(S, N, H, z = 0) {
        let q = N.image.width, be = N.image.height, Ae = te.convert(H.format), Ie = te.convert(H.type);
        j.setTexture2D(H, 0), Y.pixelStorei(37440, H.flipY), Y.pixelStorei(37441, H.premultiplyAlpha), Y.pixelStorei(3317, H.unpackAlignment), N.isDataTexture ? Y.texSubImage2D(3553, z, S.x, S.y, q, be, Ae, Ie, N.image.data) : N.isCompressedTexture ? Y.compressedTexSubImage2D(3553, z, S.x, S.y, N.mipmaps[0].width, N.mipmaps[0].height, Ae, N.mipmaps[0].data) : Y.texSubImage2D(3553, z, S.x, S.y, Ae, Ie, N.image), z === 0 && H.generateMipmaps && Y.generateMipmap(3553), xe.unbindTexture();
    }, this.copyTextureToTexture3D = function(S, N, H, z, q = 0) {
        if (x.isWebGL1Renderer) {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
            return;
        }
        let be = S.max.x - S.min.x + 1, Ae = S.max.y - S.min.y + 1, Ie = S.max.z - S.min.z + 1, we = te.convert(z.format), He = te.convert(z.type), De;
        if (z.isDataTexture3D) j.setTexture3D(z, 0), De = 32879;
        else if (z.isDataTexture2DArray) j.setTexture2DArray(z, 0), De = 35866;
        else {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
            return;
        }
        Y.pixelStorei(37440, z.flipY), Y.pixelStorei(37441, z.premultiplyAlpha), Y.pixelStorei(3317, z.unpackAlignment);
        let ze = Y.getParameter(3314), je = Y.getParameter(32878), Rn = Y.getParameter(3316), ei = Y.getParameter(3315), Ge = Y.getParameter(32877), Ht = H.isCompressedTexture ? H.mipmaps[0] : H.image;
        Y.pixelStorei(3314, Ht.width), Y.pixelStorei(32878, Ht.height), Y.pixelStorei(3316, S.min.x), Y.pixelStorei(3315, S.min.y), Y.pixelStorei(32877, S.min.z), H.isDataTexture || H.isDataTexture3D ? Y.texSubImage3D(De, q, N.x, N.y, N.z, be, Ae, Ie, we, He, Ht.data) : H.isCompressedTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), Y.compressedTexSubImage3D(De, q, N.x, N.y, N.z, be, Ae, Ie, we, Ht.data)) : Y.texSubImage3D(De, q, N.x, N.y, N.z, be, Ae, Ie, we, He, Ht), Y.pixelStorei(3314, ze), Y.pixelStorei(32878, je), Y.pixelStorei(3316, Rn), Y.pixelStorei(3315, ei), Y.pixelStorei(32877, Ge), q === 0 && z.generateMipmaps && Y.generateMipmap(De), xe.unbindTexture();
    }, this.initTexture = function(S) {
        j.setTexture2D(S, 0), xe.unbindTexture();
    }, this.resetState = function() {
        g = 0, p = 0, _ = null, xe.reset(), R.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
        detail: this
    }));
}
qe.prototype.isWebGLRenderer = !0;
var _h = class extends qe {
};
_h.prototype.isWebGL1Renderer = !0;
var Nr = class {
    constructor(e, t = 25e-5){
        this.name = "", this.color = new ae(e), this.density = t;
    }
    clone() {
        return new Nr(this.color, this.density);
    }
    toJSON() {
        return {
            type: "FogExp2",
            color: this.color.getHex(),
            density: this.density
        };
    }
};
Nr.prototype.isFogExp2 = !0;
var Br = class {
    constructor(e, t = 1, n = 1e3){
        this.name = "", this.color = new ae(e), this.near = t, this.far = n;
    }
    clone() {
        return new Br(this.color, this.near, this.far);
    }
    toJSON() {
        return {
            type: "Fog",
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        };
    }
};
Br.prototype.isFog = !0;
var no = class extends Ne {
    constructor(){
        super();
        this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.overrideMaterial = null, this.autoUpdate = !0, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: this
        }));
    }
    copy(e, t) {
        return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.autoUpdate = e.autoUpdate, this.matrixAutoUpdate = e.matrixAutoUpdate, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return this.fog !== null && (t.object.fog = this.fog.toJSON()), t;
    }
};
no.prototype.isScene = !0;
var $n = class {
    constructor(e, t){
        this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = hr, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0, this.uuid = Et();
    }
    onUploadCallback() {}
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setUsage(e) {
        return this.usage = e, this;
    }
    copy(e) {
        return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
    }
    copyAt(e, t, n) {
        e *= this.stride, n *= t.stride;
        for(let i = 0, r = this.stride; i < r; i++)this.array[e + i] = t.array[n + i];
        return this;
    }
    set(e, t = 0) {
        return this.array.set(e, t), this;
    }
    clone(e) {
        e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Et()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
        let t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
        return n.setUsage(this.usage), n;
    }
    onUpload(e) {
        return this.onUploadCallback = e, this;
    }
    toJSON(e) {
        return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Et()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer))), {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
        };
    }
};
$n.prototype.isInterleavedBuffer = !0;
var Ke = new M, Sn = class {
    constructor(e, t, n, i = !1){
        this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = i === !0;
    }
    get count() {
        return this.data.count;
    }
    get array() {
        return this.data.array;
    }
    set needsUpdate(e) {
        this.data.needsUpdate = e;
    }
    applyMatrix4(e) {
        for(let t = 0, n = this.data.count; t < n; t++)Ke.x = this.getX(t), Ke.y = this.getY(t), Ke.z = this.getZ(t), Ke.applyMatrix4(e), this.setXYZ(t, Ke.x, Ke.y, Ke.z);
        return this;
    }
    applyNormalMatrix(e) {
        for(let t = 0, n = this.count; t < n; t++)Ke.x = this.getX(t), Ke.y = this.getY(t), Ke.z = this.getZ(t), Ke.applyNormalMatrix(e), this.setXYZ(t, Ke.x, Ke.y, Ke.z);
        return this;
    }
    transformDirection(e) {
        for(let t = 0, n = this.count; t < n; t++)Ke.x = this.getX(t), Ke.y = this.getY(t), Ke.z = this.getZ(t), Ke.transformDirection(e), this.setXYZ(t, Ke.x, Ke.y, Ke.z);
        return this;
    }
    setX(e, t) {
        return this.data.array[e * this.data.stride + this.offset] = t, this;
    }
    setY(e, t) {
        return this.data.array[e * this.data.stride + this.offset + 1] = t, this;
    }
    setZ(e, t) {
        return this.data.array[e * this.data.stride + this.offset + 2] = t, this;
    }
    setW(e, t) {
        return this.data.array[e * this.data.stride + this.offset + 3] = t, this;
    }
    getX(e) {
        return this.data.array[e * this.data.stride + this.offset];
    }
    getY(e) {
        return this.data.array[e * this.data.stride + this.offset + 1];
    }
    getZ(e) {
        return this.data.array[e * this.data.stride + this.offset + 2];
    }
    getW(e) {
        return this.data.array[e * this.data.stride + this.offset + 3];
    }
    setXY(e, t, n) {
        return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
    }
    setXYZ(e, t, n, i) {
        return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this;
    }
    setXYZW(e, t, n, i, r) {
        return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this.data.array[e + 3] = r, this;
    }
    clone(e) {
        if (e === void 0) {
            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
            let t = [];
            for(let n = 0; n < this.count; n++){
                let i = n * this.data.stride + this.offset;
                for(let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]);
            }
            return new Ue(new this.array.constructor(t), this.itemSize, this.normalized);
        } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new Sn(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
    toJSON(e) {
        if (e === void 0) {
            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
            let t = [];
            for(let n = 0; n < this.count; n++){
                let i = n * this.data.stride + this.offset;
                for(let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]);
            }
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: t,
                normalized: this.normalized
            };
        } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
            isInterleavedBufferAttribute: !0,
            itemSize: this.itemSize,
            data: this.data.uuid,
            offset: this.offset,
            normalized: this.normalized
        };
    }
};
Sn.prototype.isInterleavedBufferAttribute = !0;
var io = class extends dt {
    constructor(e){
        super();
        this.type = "SpriteMaterial", this.color = new ae(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this;
    }
};
io.prototype.isSpriteMaterial = !0;
var gi, Qi = new M, xi = new M, yi = new M, vi = new X, Ki = new X, Mh = new pe, hs = new M, er = new M, us = new M, jl = new X, qo = new X, Ql = new X, ro = class extends Ne {
    constructor(e){
        super();
        if (this.type = "Sprite", gi === void 0) {
            gi = new _e;
            let t = new Float32Array([
                -.5,
                -.5,
                0,
                0,
                0,
                .5,
                -.5,
                0,
                1,
                0,
                .5,
                .5,
                0,
                1,
                1,
                -.5,
                .5,
                0,
                0,
                1
            ]), n = new $n(t, 5);
            gi.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]), gi.setAttribute("position", new Sn(n, 3, 0, !1)), gi.setAttribute("uv", new Sn(n, 2, 3, !1));
        }
        this.geometry = gi, this.material = e !== void 0 ? e : new io, this.center = new X(.5, .5);
    }
    raycast(e, t) {
        e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), xi.setFromMatrixScale(this.matrixWorld), Mh.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), yi.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && xi.multiplyScalar(-yi.z);
        let n = this.material.rotation, i, r;
        n !== 0 && (r = Math.cos(n), i = Math.sin(n));
        let o = this.center;
        ds(hs.set(-.5, -.5, 0), yi, o, xi, i, r), ds(er.set(.5, -.5, 0), yi, o, xi, i, r), ds(us.set(.5, .5, 0), yi, o, xi, i, r), jl.set(0, 0), qo.set(1, 0), Ql.set(1, 1);
        let a = e.ray.intersectTriangle(hs, er, us, !1, Qi);
        if (a === null && (ds(er.set(-.5, .5, 0), yi, o, xi, i, r), qo.set(0, 1), a = e.ray.intersectTriangle(hs, us, er, !1, Qi), a === null)) return;
        let l = e.ray.origin.distanceTo(Qi);
        l < e.near || l > e.far || t.push({
            distance: l,
            point: Qi.clone(),
            uv: nt.getUV(Qi, hs, er, us, jl, qo, Ql, new X),
            face: null,
            object: this
        });
    }
    copy(e) {
        return super.copy(e), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
    }
};
ro.prototype.isSprite = !0;
function ds(s, e, t, n, i, r) {
    vi.subVectors(s, t).addScalar(.5).multiply(n), i !== void 0 ? (Ki.x = r * vi.x - i * vi.y, Ki.y = i * vi.x + r * vi.y) : Ki.copy(vi), s.copy(e), s.x += Ki.x, s.y += Ki.y, s.applyMatrix4(Mh);
}
var fs = new M, Kl = new M, bh = class extends Ne {
    constructor(){
        super();
        this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
            levels: {
                enumerable: !0,
                value: []
            },
            isLOD: {
                value: !0
            }
        }), this.autoUpdate = !0;
    }
    copy(e) {
        super.copy(e, !1);
        let t = e.levels;
        for(let n = 0, i = t.length; n < i; n++){
            let r = t[n];
            this.addLevel(r.object.clone(), r.distance);
        }
        return this.autoUpdate = e.autoUpdate, this;
    }
    addLevel(e, t = 0) {
        t = Math.abs(t);
        let n = this.levels, i;
        for(i = 0; i < n.length && !(t < n[i].distance); i++);
        return n.splice(i, 0, {
            distance: t,
            object: e
        }), this.add(e), this;
    }
    getCurrentLevel() {
        return this._currentLevel;
    }
    getObjectForDistance(e) {
        let t = this.levels;
        if (t.length > 0) {
            let n, i;
            for(n = 1, i = t.length; n < i && !(e < t[n].distance); n++);
            return t[n - 1].object;
        }
        return null;
    }
    raycast(e, t) {
        if (this.levels.length > 0) {
            fs.setFromMatrixPosition(this.matrixWorld);
            let i = e.ray.origin.distanceTo(fs);
            this.getObjectForDistance(i).raycast(e, t);
        }
    }
    update(e) {
        let t = this.levels;
        if (t.length > 1) {
            fs.setFromMatrixPosition(e.matrixWorld), Kl.setFromMatrixPosition(this.matrixWorld);
            let n = fs.distanceTo(Kl) / e.zoom;
            t[0].object.visible = !0;
            let i, r;
            for(i = 1, r = t.length; i < r && n >= t[i].distance; i++)t[i - 1].object.visible = !1, t[i].object.visible = !0;
            for(this._currentLevel = i - 1; i < r; i++)t[i].object.visible = !1;
        }
    }
    toJSON(e) {
        let t = super.toJSON(e);
        this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
        let n = this.levels;
        for(let i = 0, r = n.length; i < r; i++){
            let o = n[i];
            t.object.levels.push({
                object: o.object.uuid,
                distance: o.distance
            });
        }
        return t;
    }
}, ec = new M, tc = new Ve, nc = new Ve, Rx = new M, ic = new pe, so = class extends st {
    constructor(e, t){
        super(e, t);
        this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new pe, this.bindMatrixInverse = new pe;
    }
    copy(e) {
        return super.copy(e), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, this;
    }
    bind(e, t) {
        this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
    }
    pose() {
        this.skeleton.pose();
    }
    normalizeSkinWeights() {
        let e = new Ve, t = this.geometry.attributes.skinWeight;
        for(let n = 0, i = t.count; n < i; n++){
            e.x = t.getX(n), e.y = t.getY(n), e.z = t.getZ(n), e.w = t.getW(n);
            let r = 1 / e.manhattanLength();
            r !== 1 / 0 ? e.multiplyScalar(r) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
        }
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
    boneTransform(e, t) {
        let n = this.skeleton, i = this.geometry;
        tc.fromBufferAttribute(i.attributes.skinIndex, e), nc.fromBufferAttribute(i.attributes.skinWeight, e), ec.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
        for(let r = 0; r < 4; r++){
            let o = nc.getComponent(r);
            if (o !== 0) {
                let a = tc.getComponent(r);
                ic.multiplyMatrices(n.bones[a].matrixWorld, n.boneInverses[a]), t.addScaledVector(Rx.copy(ec).applyMatrix4(ic), o);
            }
        }
        return t.applyMatrix4(this.bindMatrixInverse);
    }
};
so.prototype.isSkinnedMesh = !0;
var oo = class extends Ne {
    constructor(){
        super();
        this.type = "Bone";
    }
};
oo.prototype.isBone = !0;
var qn = class extends ot {
    constructor(e = null, t = 1, n = 1, i, r, o, a, l, c = rt, h = rt, u, d){
        super(null, o, a, l, c, h, i, r, u, d);
        this.image = {
            data: e,
            width: t,
            height: n
        }, this.magFilter = c, this.minFilter = h, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
    }
};
qn.prototype.isDataTexture = !0;
var rc = new pe, Px = new pe, ao = class {
    constructor(e = [], t = []){
        this.uuid = Et(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.frame = -1, this.init();
    }
    init() {
        let e = this.bones, t = this.boneInverses;
        if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0) this.calculateInverses();
        else if (e.length !== t.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
            for(let n = 0, i = this.bones.length; n < i; n++)this.boneInverses.push(new pe);
        }
    }
    calculateInverses() {
        this.boneInverses.length = 0;
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = new pe;
            this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
        }
    }
    pose() {
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = this.bones[e];
            n && n.matrixWorld.copy(this.boneInverses[e]).invert();
        }
        for(let e = 0, t = this.bones.length; e < t; e++){
            let n = this.bones[e];
            n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
        }
    }
    update() {
        let e = this.bones, t = this.boneInverses, n = this.boneMatrices, i = this.boneTexture;
        for(let r = 0, o = e.length; r < o; r++){
            let a = e[r] ? e[r].matrixWorld : Px;
            rc.multiplyMatrices(a, t[r]), rc.toArray(n, r * 16);
        }
        i !== null && (i.needsUpdate = !0);
    }
    clone() {
        return new ao(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
        let e = Math.sqrt(this.bones.length * 4);
        e = Xc(e), e = Math.max(e, 4);
        let t = new Float32Array(e * e * 4);
        t.set(this.boneMatrices);
        let n = new qn(t, e, e, ct, nn);
        return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this.boneTextureSize = e, this;
    }
    getBoneByName(e) {
        for(let t = 0, n = this.bones.length; t < n; t++){
            let i = this.bones[t];
            if (i.name === e) return i;
        }
    }
    dispose() {
        this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
    }
    fromJSON(e, t) {
        this.uuid = e.uuid;
        for(let n = 0, i = e.bones.length; n < i; n++){
            let r = e.bones[n], o = t[r];
            o === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", r), o = new oo), this.bones.push(o), this.boneInverses.push(new pe().fromArray(e.boneInverses[n]));
        }
        return this.init(), this;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.5,
                type: "Skeleton",
                generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
        };
        e.uuid = this.uuid;
        let t = this.bones, n = this.boneInverses;
        for(let i = 0, r = t.length; i < r; i++){
            let o = t[i];
            e.bones.push(o.uuid);
            let a = n[i];
            e.boneInverses.push(a.toArray());
        }
        return e;
    }
}, Xn = class extends Ue {
    constructor(e, t, n, i = 1){
        typeof n == "number" && (i = n, n = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));
        super(e, t, n);
        this.meshPerAttribute = i;
    }
    copy(e) {
        return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
    }
};
Xn.prototype.isInstancedBufferAttribute = !0;
var sc = new pe, oc = new pe, ps = [], tr = new st, xa = class extends st {
    constructor(e, t, n){
        super(e, t);
        this.instanceMatrix = new Xn(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.frustumCulled = !1;
    }
    copy(e) {
        return super.copy(e), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, this;
    }
    getColorAt(e, t) {
        t.fromArray(this.instanceColor.array, e * 3);
    }
    getMatrixAt(e, t) {
        t.fromArray(this.instanceMatrix.array, e * 16);
    }
    raycast(e, t) {
        let n = this.matrixWorld, i = this.count;
        if (tr.geometry = this.geometry, tr.material = this.material, tr.material !== void 0) for(let r = 0; r < i; r++){
            this.getMatrixAt(r, sc), oc.multiplyMatrices(n, sc), tr.matrixWorld = oc, tr.raycast(e, ps);
            for(let o = 0, a = ps.length; o < a; o++){
                let l = ps[o];
                l.instanceId = r, l.object = this, t.push(l);
            }
            ps.length = 0;
        }
    }
    setColorAt(e, t) {
        this.instanceColor === null && (this.instanceColor = new Xn(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
    }
    setMatrixAt(e, t) {
        t.toArray(this.instanceMatrix.array, e * 16);
    }
    updateMorphTargets() {}
    dispose() {
        this.dispatchEvent({
            type: "dispose"
        });
    }
};
xa.prototype.isInstancedMesh = !0;
var ft = class extends dt {
    constructor(e){
        super();
        this.type = "LineBasicMaterial", this.color = new ae(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this;
    }
};
ft.prototype.isLineBasicMaterial = !0;
var ac = new M, lc = new M, cc = new pe, Xo = new Cn, ms = new An, on = class extends Ne {
    constructor(e = new _e, t = new ft){
        super();
        this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e) {
        return super.copy(e), this.material = e.material, this.geometry = e.geometry, this;
    }
    computeLineDistances() {
        let e = this.geometry;
        if (e.isBufferGeometry) if (e.index === null) {
            let t = e.attributes.position, n = [
                0
            ];
            for(let i = 1, r = t.count; i < r; i++)ac.fromBufferAttribute(t, i - 1), lc.fromBufferAttribute(t, i), n[i] = n[i - 1], n[i] += ac.distanceTo(lc);
            e.setAttribute("lineDistance", new de(n, 1));
        } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        else e.isGeometry && console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        return this;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.matrixWorld, r = e.params.Line.threshold, o = n.drawRange;
        if (n.boundingSphere === null && n.computeBoundingSphere(), ms.copy(n.boundingSphere), ms.applyMatrix4(i), ms.radius += r, e.ray.intersectsSphere(ms) === !1) return;
        cc.copy(i).invert(), Xo.copy(e.ray).applyMatrix4(cc);
        let a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), l = a * a, c = new M, h = new M, u = new M, d = new M, f = this.isLineSegments ? 2 : 1;
        if (n.isBufferGeometry) {
            let m = n.index, v = n.attributes.position;
            if (m !== null) {
                let g = Math.max(0, o.start), p = Math.min(m.count, o.start + o.count);
                for(let _ = g, y = p - 1; _ < y; _ += f){
                    let b = m.getX(_), A = m.getX(_ + 1);
                    if (c.fromBufferAttribute(v, b), h.fromBufferAttribute(v, A), Xo.distanceSqToSegment(c, h, d, u) > l) continue;
                    d.applyMatrix4(this.matrixWorld);
                    let I = e.ray.origin.distanceTo(d);
                    I < e.near || I > e.far || t.push({
                        distance: I,
                        point: u.clone().applyMatrix4(this.matrixWorld),
                        index: _,
                        face: null,
                        faceIndex: null,
                        object: this
                    });
                }
            } else {
                let g = Math.max(0, o.start), p = Math.min(v.count, o.start + o.count);
                for(let _ = g, y = p - 1; _ < y; _ += f){
                    if (c.fromBufferAttribute(v, _), h.fromBufferAttribute(v, _ + 1), Xo.distanceSqToSegment(c, h, d, u) > l) continue;
                    d.applyMatrix4(this.matrixWorld);
                    let A = e.ray.origin.distanceTo(d);
                    A < e.near || A > e.far || t.push({
                        distance: A,
                        point: u.clone().applyMatrix4(this.matrixWorld),
                        index: _,
                        face: null,
                        faceIndex: null,
                        object: this
                    });
                }
            }
        } else n.isGeometry && console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
    updateMorphTargets() {
        let e = this.geometry;
        if (e.isBufferGeometry) {
            let t = e.morphAttributes, n = Object.keys(t);
            if (n.length > 0) {
                let i = t[n[0]];
                if (i !== void 0) {
                    this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                    for(let r = 0, o = i.length; r < o; r++){
                        let a = i[r].name || String(r);
                        this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r;
                    }
                }
            }
        } else {
            let t = e.morphTargets;
            t !== void 0 && t.length > 0 && console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
    }
};
on.prototype.isLine = !0;
var hc = new M, uc = new M, wt = class extends on {
    constructor(e, t){
        super(e, t);
        this.type = "LineSegments";
    }
    computeLineDistances() {
        let e = this.geometry;
        if (e.isBufferGeometry) if (e.index === null) {
            let t = e.attributes.position, n = [];
            for(let i = 0, r = t.count; i < r; i += 2)hc.fromBufferAttribute(t, i), uc.fromBufferAttribute(t, i + 1), n[i] = i === 0 ? 0 : n[i - 1], n[i + 1] = n[i] + hc.distanceTo(uc);
            e.setAttribute("lineDistance", new de(n, 1));
        } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        else e.isGeometry && console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        return this;
    }
};
wt.prototype.isLineSegments = !0;
var ya = class extends on {
    constructor(e, t){
        super(e, t);
        this.type = "LineLoop";
    }
};
ya.prototype.isLineLoop = !0;
var jn = class extends dt {
    constructor(e){
        super();
        this.type = "PointsMaterial", this.color = new ae(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this;
    }
};
jn.prototype.isPointsMaterial = !0;
var dc = new pe, sa = new Cn, gs = new An, xs = new M, zr = class extends Ne {
    constructor(e = new _e, t = new jn){
        super();
        this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
    }
    copy(e) {
        return super.copy(e), this.material = e.material, this.geometry = e.geometry, this;
    }
    raycast(e, t) {
        let n = this.geometry, i = this.matrixWorld, r = e.params.Points.threshold, o = n.drawRange;
        if (n.boundingSphere === null && n.computeBoundingSphere(), gs.copy(n.boundingSphere), gs.applyMatrix4(i), gs.radius += r, e.ray.intersectsSphere(gs) === !1) return;
        dc.copy(i).invert(), sa.copy(e.ray).applyMatrix4(dc);
        let a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), l = a * a;
        if (n.isBufferGeometry) {
            let c = n.index, u = n.attributes.position;
            if (c !== null) {
                let d = Math.max(0, o.start), f = Math.min(c.count, o.start + o.count);
                for(let m = d, x = f; m < x; m++){
                    let v = c.getX(m);
                    xs.fromBufferAttribute(u, v), fc(xs, v, l, i, e, t, this);
                }
            } else {
                let d = Math.max(0, o.start), f = Math.min(u.count, o.start + o.count);
                for(let m = d, x = f; m < x; m++)xs.fromBufferAttribute(u, m), fc(xs, m, l, i, e, t, this);
            }
        } else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
    }
    updateMorphTargets() {
        let e = this.geometry;
        if (e.isBufferGeometry) {
            let t = e.morphAttributes, n = Object.keys(t);
            if (n.length > 0) {
                let i = t[n[0]];
                if (i !== void 0) {
                    this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                    for(let r = 0, o = i.length; r < o; r++){
                        let a = i[r].name || String(r);
                        this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r;
                    }
                }
            }
        } else {
            let t = e.morphTargets;
            t !== void 0 && t.length > 0 && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
        }
    }
};
zr.prototype.isPoints = !0;
function fc(s, e, t, n, i, r, o) {
    let a = sa.distanceSqToPoint(s);
    if (a < t) {
        let l = new M;
        sa.closestPointToPoint(s, l), l.applyMatrix4(n);
        let c = i.ray.origin.distanceTo(l);
        if (c < i.near || c > i.far) return;
        r.push({
            distance: c,
            distanceToRay: Math.sqrt(a),
            point: l,
            index: e,
            face: null,
            object: o
        });
    }
}
var wh = class extends ot {
    constructor(e, t, n, i, r, o, a, l, c){
        super(e, t, n, i, r, o, a, l, c);
        this.format = a !== void 0 ? a : Gn, this.minFilter = o !== void 0 ? o : tt, this.magFilter = r !== void 0 ? r : tt, this.generateMipmaps = !1;
        let h = this;
        function u() {
            h.needsUpdate = !0, e.requestVideoFrameCallback(u);
        }
        "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(u);
    }
    clone() {
        return new this.constructor(this.image).copy(this);
    }
    update() {
        let e = this.image;
        "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
    }
};
wh.prototype.isVideoTexture = !0;
var Sh = class extends ot {
    constructor(e, t, n){
        super({
            width: e,
            height: t
        });
        this.format = n, this.magFilter = rt, this.minFilter = rt, this.generateMipmaps = !1, this.needsUpdate = !0;
    }
};
Sh.prototype.isFramebufferTexture = !0;
var va = class extends ot {
    constructor(e, t, n, i, r, o, a, l, c, h, u, d){
        super(null, o, a, l, c, h, i, r, u, d);
        this.image = {
            width: t,
            height: n
        }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
    }
};
va.prototype.isCompressedTexture = !0;
var Th = class extends ot {
    constructor(e, t, n, i, r, o, a, l, c){
        super(e, t, n, i, r, o, a, l, c);
        this.needsUpdate = !0;
    }
};
Th.prototype.isCanvasTexture = !0;
var fr = class extends _e {
    constructor(e = 1, t = 8, n = 0, i = Math.PI * 2){
        super();
        this.type = "CircleGeometry", this.parameters = {
            radius: e,
            segments: t,
            thetaStart: n,
            thetaLength: i
        }, t = Math.max(3, t);
        let r = [], o = [], a = [], l = [], c = new M, h = new X;
        o.push(0, 0, 0), a.push(0, 0, 1), l.push(.5, .5);
        for(let u = 0, d = 3; u <= t; u++, d += 3){
            let f = n + u / t * i;
            c.x = e * Math.cos(f), c.y = e * Math.sin(f), o.push(c.x, c.y, c.z), a.push(0, 0, 1), h.x = (o[d] / e + 1) / 2, h.y = (o[d + 1] / e + 1) / 2, l.push(h.x, h.y);
        }
        for(let u = 1; u <= t; u++)r.push(u, u + 1, 0);
        this.setIndex(r), this.setAttribute("position", new de(o, 3)), this.setAttribute("normal", new de(a, 3)), this.setAttribute("uv", new de(l, 2));
    }
    static fromJSON(e) {
        return new fr(e.radius, e.segments, e.thetaStart, e.thetaLength);
    }
}, Jn = class extends _e {
    constructor(e = 1, t = 1, n = 1, i = 8, r = 1, o = !1, a = 0, l = Math.PI * 2){
        super();
        this.type = "CylinderGeometry", this.parameters = {
            radiusTop: e,
            radiusBottom: t,
            height: n,
            radialSegments: i,
            heightSegments: r,
            openEnded: o,
            thetaStart: a,
            thetaLength: l
        };
        let c = this;
        i = Math.floor(i), r = Math.floor(r);
        let h = [], u = [], d = [], f = [], m = 0, x = [], v = n / 2, g = 0;
        p(), o === !1 && (e > 0 && _(!0), t > 0 && _(!1)), this.setIndex(h), this.setAttribute("position", new de(u, 3)), this.setAttribute("normal", new de(d, 3)), this.setAttribute("uv", new de(f, 2));
        function p() {
            let y = new M, b = new M, A = 0, L = (t - e) / n;
            for(let I = 0; I <= r; I++){
                let k = [], B = I / r, P = B * (t - e) + e;
                for(let w = 0; w <= i; w++){
                    let E = w / i, D = E * l + a, U = Math.sin(D), F = Math.cos(D);
                    b.x = P * U, b.y = -B * n + v, b.z = P * F, u.push(b.x, b.y, b.z), y.set(U, L, F).normalize(), d.push(y.x, y.y, y.z), f.push(E, 1 - B), k.push(m++);
                }
                x.push(k);
            }
            for(let I = 0; I < i; I++)for(let k = 0; k < r; k++){
                let B = x[k][I], P = x[k + 1][I], w = x[k + 1][I + 1], E = x[k][I + 1];
                h.push(B, P, E), h.push(P, w, E), A += 6;
            }
            c.addGroup(g, A, 0), g += A;
        }
        function _(y) {
            let b = m, A = new X, L = new M, I = 0, k = y === !0 ? e : t, B = y === !0 ? 1 : -1;
            for(let w = 1; w <= i; w++)u.push(0, v * B, 0), d.push(0, B, 0), f.push(.5, .5), m++;
            let P = m;
            for(let w = 0; w <= i; w++){
                let D = w / i * l + a, U = Math.cos(D), F = Math.sin(D);
                L.x = k * F, L.y = v * B, L.z = k * U, u.push(L.x, L.y, L.z), d.push(0, B, 0), A.x = U * .5 + .5, A.y = F * .5 * B + .5, f.push(A.x, A.y), m++;
            }
            for(let w = 0; w < i; w++){
                let E = b + w, D = P + w;
                y === !0 ? h.push(D, D + 1, E) : h.push(D + 1, D, E), I += 3;
            }
            c.addGroup(g, I, y === !0 ? 1 : 2), g += I;
        }
    }
    static fromJSON(e) {
        return new Jn(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
    }
}, pr = class extends Jn {
    constructor(e = 1, t = 1, n = 8, i = 1, r = !1, o = 0, a = Math.PI * 2){
        super(0, e, t, n, i, r, o, a);
        this.type = "ConeGeometry", this.parameters = {
            radius: e,
            height: t,
            radialSegments: n,
            heightSegments: i,
            openEnded: r,
            thetaStart: o,
            thetaLength: a
        };
    }
    static fromJSON(e) {
        return new pr(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
    }
}, an = class extends _e {
    constructor(e = [], t = [], n = 1, i = 0){
        super();
        this.type = "PolyhedronGeometry", this.parameters = {
            vertices: e,
            indices: t,
            radius: n,
            detail: i
        };
        let r = [], o = [];
        a(i), c(n), h(), this.setAttribute("position", new de(r, 3)), this.setAttribute("normal", new de(r.slice(), 3)), this.setAttribute("uv", new de(o, 2)), i === 0 ? this.computeVertexNormals() : this.normalizeNormals();
        function a(p) {
            let _ = new M, y = new M, b = new M;
            for(let A = 0; A < t.length; A += 3)f(t[A + 0], _), f(t[A + 1], y), f(t[A + 2], b), l(_, y, b, p);
        }
        function l(p, _, y, b) {
            let A = b + 1, L = [];
            for(let I = 0; I <= A; I++){
                L[I] = [];
                let k = p.clone().lerp(y, I / A), B = _.clone().lerp(y, I / A), P = A - I;
                for(let w = 0; w <= P; w++)w === 0 && I === A ? L[I][w] = k : L[I][w] = k.clone().lerp(B, w / P);
            }
            for(let I = 0; I < A; I++)for(let k = 0; k < 2 * (A - I) - 1; k++){
                let B = Math.floor(k / 2);
                k % 2 === 0 ? (d(L[I][B + 1]), d(L[I + 1][B]), d(L[I][B])) : (d(L[I][B + 1]), d(L[I + 1][B + 1]), d(L[I + 1][B]));
            }
        }
        function c(p) {
            let _ = new M;
            for(let y = 0; y < r.length; y += 3)_.x = r[y + 0], _.y = r[y + 1], _.z = r[y + 2], _.normalize().multiplyScalar(p), r[y + 0] = _.x, r[y + 1] = _.y, r[y + 2] = _.z;
        }
        function h() {
            let p = new M;
            for(let _ = 0; _ < r.length; _ += 3){
                p.x = r[_ + 0], p.y = r[_ + 1], p.z = r[_ + 2];
                let y = v(p) / 2 / Math.PI + .5, b = g(p) / Math.PI + .5;
                o.push(y, 1 - b);
            }
            m(), u();
        }
        function u() {
            for(let p = 0; p < o.length; p += 6){
                let _ = o[p + 0], y = o[p + 2], b = o[p + 4], A = Math.max(_, y, b), L = Math.min(_, y, b);
                A > .9 && L < .1 && (_ < .2 && (o[p + 0] += 1), y < .2 && (o[p + 2] += 1), b < .2 && (o[p + 4] += 1));
            }
        }
        function d(p) {
            r.push(p.x, p.y, p.z);
        }
        function f(p, _) {
            let y = p * 3;
            _.x = e[y + 0], _.y = e[y + 1], _.z = e[y + 2];
        }
        function m() {
            let p = new M, _ = new M, y = new M, b = new M, A = new X, L = new X, I = new X;
            for(let k = 0, B = 0; k < r.length; k += 9, B += 6){
                p.set(r[k + 0], r[k + 1], r[k + 2]), _.set(r[k + 3], r[k + 4], r[k + 5]), y.set(r[k + 6], r[k + 7], r[k + 8]), A.set(o[B + 0], o[B + 1]), L.set(o[B + 2], o[B + 3]), I.set(o[B + 4], o[B + 5]), b.copy(p).add(_).add(y).divideScalar(3);
                let P = v(b);
                x(A, B + 0, p, P), x(L, B + 2, _, P), x(I, B + 4, y, P);
            }
        }
        function x(p, _, y, b) {
            b < 0 && p.x === 1 && (o[_] = p.x - 1), y.x === 0 && y.z === 0 && (o[_] = b / 2 / Math.PI + .5);
        }
        function v(p) {
            return Math.atan2(p.z, -p.x);
        }
        function g(p) {
            return Math.atan2(-p.y, Math.sqrt(p.x * p.x + p.z * p.z));
        }
    }
    static fromJSON(e) {
        return new an(e.vertices, e.indices, e.radius, e.details);
    }
}, mr = class extends an {
    constructor(e = 1, t = 0){
        let n = (1 + Math.sqrt(5)) / 2, i = 1 / n, r = [
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            0,
            -i,
            -n,
            0,
            -i,
            n,
            0,
            i,
            -n,
            0,
            i,
            n,
            -i,
            -n,
            0,
            -i,
            n,
            0,
            i,
            -n,
            0,
            i,
            n,
            0,
            -n,
            0,
            -i,
            n,
            0,
            -i,
            -n,
            0,
            i,
            n,
            0,
            i
        ], o = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        super(r, o, e, t);
        this.type = "DodecahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new mr(e.radius, e.detail);
    }
}, ys = new M, vs = new M, Jo = new M, _s = new nt, _a = class extends _e {
    constructor(e = null, t = 1){
        super();
        if (this.type = "EdgesGeometry", this.parameters = {
            geometry: e,
            thresholdAngle: t
        }, e !== null) {
            let i = Math.pow(10, 4), r = Math.cos(Wn * t), o = e.getIndex(), a = e.getAttribute("position"), l = o ? o.count : a.count, c = [
                0,
                0,
                0
            ], h = [
                "a",
                "b",
                "c"
            ], u = new Array(3), d = {}, f = [];
            for(let m = 0; m < l; m += 3){
                o ? (c[0] = o.getX(m), c[1] = o.getX(m + 1), c[2] = o.getX(m + 2)) : (c[0] = m, c[1] = m + 1, c[2] = m + 2);
                let { a: x , b: v , c: g  } = _s;
                if (x.fromBufferAttribute(a, c[0]), v.fromBufferAttribute(a, c[1]), g.fromBufferAttribute(a, c[2]), _s.getNormal(Jo), u[0] = `${Math.round(x.x * i)},${Math.round(x.y * i)},${Math.round(x.z * i)}`, u[1] = `${Math.round(v.x * i)},${Math.round(v.y * i)},${Math.round(v.z * i)}`, u[2] = `${Math.round(g.x * i)},${Math.round(g.y * i)},${Math.round(g.z * i)}`, !(u[0] === u[1] || u[1] === u[2] || u[2] === u[0])) for(let p = 0; p < 3; p++){
                    let _ = (p + 1) % 3, y = u[p], b = u[_], A = _s[h[p]], L = _s[h[_]], I = `${y}_${b}`, k = `${b}_${y}`;
                    k in d && d[k] ? (Jo.dot(d[k].normal) <= r && (f.push(A.x, A.y, A.z), f.push(L.x, L.y, L.z)), d[k] = null) : I in d || (d[I] = {
                        index0: c[p],
                        index1: c[_],
                        normal: Jo.clone()
                    });
                }
            }
            for(let m in d)if (d[m]) {
                let { index0: x , index1: v  } = d[m];
                ys.fromBufferAttribute(a, x), vs.fromBufferAttribute(a, v), f.push(ys.x, ys.y, ys.z), f.push(vs.x, vs.y, vs.z);
            }
            this.setAttribute("position", new de(f, 3));
        }
    }
}, Ct = class {
    constructor(){
        this.type = "Curve", this.arcLengthDivisions = 200;
    }
    getPoint() {
        return console.warn("THREE.Curve: .getPoint() not implemented."), null;
    }
    getPointAt(e, t) {
        let n = this.getUtoTmapping(e);
        return this.getPoint(n, t);
    }
    getPoints(e = 5) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPoint(n / e));
        return t;
    }
    getSpacedPoints(e = 5) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPointAt(n / e));
        return t;
    }
    getLength() {
        let e = this.getLengths();
        return e[e.length - 1];
    }
    getLengths(e = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = !1;
        let t = [], n, i = this.getPoint(0), r = 0;
        t.push(0);
        for(let o = 1; o <= e; o++)n = this.getPoint(o / e), r += n.distanceTo(i), t.push(r), i = n;
        return this.cacheArcLengths = t, t;
    }
    updateArcLengths() {
        this.needsUpdate = !0, this.getLengths();
    }
    getUtoTmapping(e, t) {
        let n = this.getLengths(), i = 0, r = n.length, o;
        t ? o = t : o = e * n[r - 1];
        let a = 0, l = r - 1, c;
        for(; a <= l;)if (i = Math.floor(a + (l - a) / 2), c = n[i] - o, c < 0) a = i + 1;
        else if (c > 0) l = i - 1;
        else {
            l = i;
            break;
        }
        if (i = l, n[i] === o) return i / (r - 1);
        let h = n[i], d = n[i + 1] - h, f = (o - h) / d;
        return (i + f) / (r - 1);
    }
    getTangent(e, t) {
        let i = e - 1e-4, r = e + 1e-4;
        i < 0 && (i = 0), r > 1 && (r = 1);
        let o = this.getPoint(i), a = this.getPoint(r), l = t || (o.isVector2 ? new X : new M);
        return l.copy(a).sub(o).normalize(), l;
    }
    getTangentAt(e, t) {
        let n = this.getUtoTmapping(e);
        return this.getTangent(n, t);
    }
    computeFrenetFrames(e, t) {
        let n = new M, i = [], r = [], o = [], a = new M, l = new pe;
        for(let f = 0; f <= e; f++){
            let m = f / e;
            i[f] = this.getTangentAt(m, new M);
        }
        r[0] = new M, o[0] = new M;
        let c = Number.MAX_VALUE, h = Math.abs(i[0].x), u = Math.abs(i[0].y), d = Math.abs(i[0].z);
        h <= c && (c = h, n.set(1, 0, 0)), u <= c && (c = u, n.set(0, 1, 0)), d <= c && n.set(0, 0, 1), a.crossVectors(i[0], n).normalize(), r[0].crossVectors(i[0], a), o[0].crossVectors(i[0], r[0]);
        for(let f = 1; f <= e; f++){
            if (r[f] = r[f - 1].clone(), o[f] = o[f - 1].clone(), a.crossVectors(i[f - 1], i[f]), a.length() > Number.EPSILON) {
                a.normalize();
                let m = Math.acos(mt(i[f - 1].dot(i[f]), -1, 1));
                r[f].applyMatrix4(l.makeRotationAxis(a, m));
            }
            o[f].crossVectors(i[f], r[f]);
        }
        if (t === !0) {
            let f = Math.acos(mt(r[0].dot(r[e]), -1, 1));
            f /= e, i[0].dot(a.crossVectors(r[0], r[e])) > 0 && (f = -f);
            for(let m = 1; m <= e; m++)r[m].applyMatrix4(l.makeRotationAxis(i[m], f * m)), o[m].crossVectors(i[m], r[m]);
        }
        return {
            tangents: i,
            normals: r,
            binormals: o
        };
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.arcLengthDivisions = e.arcLengthDivisions, this;
    }
    toJSON() {
        let e = {
            metadata: {
                version: 4.5,
                type: "Curve",
                generator: "Curve.toJSON"
            }
        };
        return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
    }
    fromJSON(e) {
        return this.arcLengthDivisions = e.arcLengthDivisions, this;
    }
}, Ur = class extends Ct {
    constructor(e = 0, t = 0, n = 1, i = 1, r = 0, o = Math.PI * 2, a = !1, l = 0){
        super();
        this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = i, this.aStartAngle = r, this.aEndAngle = o, this.aClockwise = a, this.aRotation = l;
    }
    getPoint(e, t) {
        let n = t || new X, i = Math.PI * 2, r = this.aEndAngle - this.aStartAngle, o = Math.abs(r) < Number.EPSILON;
        for(; r < 0;)r += i;
        for(; r > i;)r -= i;
        r < Number.EPSILON && (o ? r = 0 : r = i), this.aClockwise === !0 && !o && (r === i ? r = -i : r = r - i);
        let a = this.aStartAngle + e * r, l = this.aX + this.xRadius * Math.cos(a), c = this.aY + this.yRadius * Math.sin(a);
        if (this.aRotation !== 0) {
            let h = Math.cos(this.aRotation), u = Math.sin(this.aRotation), d = l - this.aX, f = c - this.aY;
            l = d * h - f * u + this.aX, c = d * u + f * h + this.aY;
        }
        return n.set(l, c);
    }
    copy(e) {
        return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
    }
};
Ur.prototype.isEllipseCurve = !0;
var Ma = class extends Ur {
    constructor(e, t, n, i, r, o){
        super(e, t, n, n, i, r, o);
        this.type = "ArcCurve";
    }
};
Ma.prototype.isArcCurve = !0;
function ba() {
    let s = 0, e = 0, t = 0, n = 0;
    function i(r, o, a, l) {
        s = r, e = a, t = -3 * r + 3 * o - 2 * a - l, n = 2 * r - 2 * o + a + l;
    }
    return {
        initCatmullRom: function(r, o, a, l, c) {
            i(o, a, c * (a - r), c * (l - o));
        },
        initNonuniformCatmullRom: function(r, o, a, l, c, h, u) {
            let d = (o - r) / c - (a - r) / (c + h) + (a - o) / h, f = (a - o) / h - (l - o) / (h + u) + (l - a) / u;
            d *= h, f *= h, i(o, a, d, f);
        },
        calc: function(r) {
            let o = r * r, a = o * r;
            return s + e * r + t * o + n * a;
        }
    };
}
var Ms = new M, Yo = new ba, Zo = new ba, $o = new ba, wa = class extends Ct {
    constructor(e = [], t = !1, n = "centripetal", i = .5){
        super();
        this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = i;
    }
    getPoint(e, t = new M) {
        let n = t, i = this.points, r = i.length, o = (r - (this.closed ? 0 : 1)) * e, a = Math.floor(o), l = o - a;
        this.closed ? a += a > 0 ? 0 : (Math.floor(Math.abs(a) / r) + 1) * r : l === 0 && a === r - 1 && (a = r - 2, l = 1);
        let c, h;
        this.closed || a > 0 ? c = i[(a - 1) % r] : (Ms.subVectors(i[0], i[1]).add(i[0]), c = Ms);
        let u = i[a % r], d = i[(a + 1) % r];
        if (this.closed || a + 2 < r ? h = i[(a + 2) % r] : (Ms.subVectors(i[r - 1], i[r - 2]).add(i[r - 1]), h = Ms), this.curveType === "centripetal" || this.curveType === "chordal") {
            let f = this.curveType === "chordal" ? .5 : .25, m = Math.pow(c.distanceToSquared(u), f), x = Math.pow(u.distanceToSquared(d), f), v = Math.pow(d.distanceToSquared(h), f);
            x < 1e-4 && (x = 1), m < 1e-4 && (m = x), v < 1e-4 && (v = x), Yo.initNonuniformCatmullRom(c.x, u.x, d.x, h.x, m, x, v), Zo.initNonuniformCatmullRom(c.y, u.y, d.y, h.y, m, x, v), $o.initNonuniformCatmullRom(c.z, u.z, d.z, h.z, m, x, v);
        } else this.curveType === "catmullrom" && (Yo.initCatmullRom(c.x, u.x, d.x, h.x, this.tension), Zo.initCatmullRom(c.y, u.y, d.y, h.y, this.tension), $o.initCatmullRom(c.z, u.z, d.z, h.z, this.tension));
        return n.set(Yo.calc(l), Zo.calc(l), $o.calc(l)), n;
    }
    copy(e) {
        super.copy(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(i.clone());
        }
        return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
    }
    toJSON() {
        let e = super.toJSON();
        e.points = [];
        for(let t = 0, n = this.points.length; t < n; t++){
            let i = this.points[t];
            e.points.push(i.toArray());
        }
        return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(new M().fromArray(i));
        }
        return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
    }
};
wa.prototype.isCatmullRomCurve3 = !0;
function pc(s, e, t, n, i) {
    let r = (n - e) * .5, o = (i - t) * .5, a = s * s, l = s * a;
    return (2 * t - 2 * n + r + o) * l + (-3 * t + 3 * n - 2 * r - o) * a + r * s + t;
}
function Ix(s, e) {
    let t = 1 - s;
    return t * t * e;
}
function Dx(s, e) {
    return 2 * (1 - s) * s * e;
}
function Fx(s, e) {
    return s * s * e;
}
function ar(s, e, t, n) {
    return Ix(s, e) + Dx(s, t) + Fx(s, n);
}
function Nx(s, e) {
    let t = 1 - s;
    return t * t * t * e;
}
function Bx(s, e) {
    let t = 1 - s;
    return 3 * t * t * s * e;
}
function zx(s, e) {
    return 3 * (1 - s) * s * s * e;
}
function Ux(s, e) {
    return s * s * s * e;
}
function lr(s, e, t, n, i) {
    return Nx(s, e) + Bx(s, t) + zx(s, n) + Ux(s, i);
}
var lo = class extends Ct {
    constructor(e = new X, t = new X, n = new X, i = new X){
        super();
        this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
    }
    getPoint(e, t = new X) {
        let n = t, i = this.v0, r = this.v1, o = this.v2, a = this.v3;
        return n.set(lr(e, i.x, r.x, o.x, a.x), lr(e, i.y, r.y, o.y, a.y)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
    }
};
lo.prototype.isCubicBezierCurve = !0;
var Sa = class extends Ct {
    constructor(e = new M, t = new M, n = new M, i = new M){
        super();
        this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
    }
    getPoint(e, t = new M) {
        let n = t, i = this.v0, r = this.v1, o = this.v2, a = this.v3;
        return n.set(lr(e, i.x, r.x, o.x, a.x), lr(e, i.y, r.y, o.y, a.y), lr(e, i.z, r.z, o.z, a.z)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
    }
};
Sa.prototype.isCubicBezierCurve3 = !0;
var Or = class extends Ct {
    constructor(e = new X, t = new X){
        super();
        this.type = "LineCurve", this.v1 = e, this.v2 = t;
    }
    getPoint(e, t = new X) {
        let n = t;
        return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
    }
    getPointAt(e, t) {
        return this.getPoint(e, t);
    }
    getTangent(e, t) {
        let n = t || new X;
        return n.copy(this.v2).sub(this.v1).normalize(), n;
    }
    copy(e) {
        return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
};
Or.prototype.isLineCurve = !0;
var Eh = class extends Ct {
    constructor(e = new M, t = new M){
        super();
        this.type = "LineCurve3", this.isLineCurve3 = !0, this.v1 = e, this.v2 = t;
    }
    getPoint(e, t = new M) {
        let n = t;
        return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
    }
    getPointAt(e, t) {
        return this.getPoint(e, t);
    }
    copy(e) {
        return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
}, co = class extends Ct {
    constructor(e = new X, t = new X, n = new X){
        super();
        this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
    }
    getPoint(e, t = new X) {
        let n = t, i = this.v0, r = this.v1, o = this.v2;
        return n.set(ar(e, i.x, r.x, o.x), ar(e, i.y, r.y, o.y)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
};
co.prototype.isQuadraticBezierCurve = !0;
var ho = class extends Ct {
    constructor(e = new M, t = new M, n = new M){
        super();
        this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
    }
    getPoint(e, t = new M) {
        let n = t, i = this.v0, r = this.v1, o = this.v2;
        return n.set(ar(e, i.x, r.x, o.x), ar(e, i.y, r.y, o.y), ar(e, i.z, r.z, o.z)), n;
    }
    copy(e) {
        return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
    }
};
ho.prototype.isQuadraticBezierCurve3 = !0;
var uo = class extends Ct {
    constructor(e = []){
        super();
        this.type = "SplineCurve", this.points = e;
    }
    getPoint(e, t = new X) {
        let n = t, i = this.points, r = (i.length - 1) * e, o = Math.floor(r), a = r - o, l = i[o === 0 ? o : o - 1], c = i[o], h = i[o > i.length - 2 ? i.length - 1 : o + 1], u = i[o > i.length - 3 ? i.length - 1 : o + 2];
        return n.set(pc(a, l.x, c.x, h.x, u.x), pc(a, l.y, c.y, h.y, u.y)), n;
    }
    copy(e) {
        super.copy(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(i.clone());
        }
        return this;
    }
    toJSON() {
        let e = super.toJSON();
        e.points = [];
        for(let t = 0, n = this.points.length; t < n; t++){
            let i = this.points[t];
            e.points.push(i.toArray());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.points = [];
        for(let t = 0, n = e.points.length; t < n; t++){
            let i = e.points[t];
            this.points.push(new X().fromArray(i));
        }
        return this;
    }
};
uo.prototype.isSplineCurve = !0;
var Ta = Object.freeze({
    __proto__: null,
    ArcCurve: Ma,
    CatmullRomCurve3: wa,
    CubicBezierCurve: lo,
    CubicBezierCurve3: Sa,
    EllipseCurve: Ur,
    LineCurve: Or,
    LineCurve3: Eh,
    QuadraticBezierCurve: co,
    QuadraticBezierCurve3: ho,
    SplineCurve: uo
}), Ah = class extends Ct {
    constructor(){
        super();
        this.type = "CurvePath", this.curves = [], this.autoClose = !1;
    }
    add(e) {
        this.curves.push(e);
    }
    closePath() {
        let e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
        e.equals(t) || this.curves.push(new Or(t, e));
    }
    getPoint(e, t) {
        let n = e * this.getLength(), i = this.getCurveLengths(), r = 0;
        for(; r < i.length;){
            if (i[r] >= n) {
                let o = i[r] - n, a = this.curves[r], l = a.getLength(), c = l === 0 ? 0 : 1 - o / l;
                return a.getPointAt(c, t);
            }
            r++;
        }
        return null;
    }
    getLength() {
        let e = this.getCurveLengths();
        return e[e.length - 1];
    }
    updateArcLengths() {
        this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
    }
    getCurveLengths() {
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        let e = [], t = 0;
        for(let n = 0, i = this.curves.length; n < i; n++)t += this.curves[n].getLength(), e.push(t);
        return this.cacheLengths = e, e;
    }
    getSpacedPoints(e = 40) {
        let t = [];
        for(let n = 0; n <= e; n++)t.push(this.getPoint(n / e));
        return this.autoClose && t.push(t[0]), t;
    }
    getPoints(e = 12) {
        let t = [], n;
        for(let i = 0, r = this.curves; i < r.length; i++){
            let o = r[i], a = o && o.isEllipseCurve ? e * 2 : o && (o.isLineCurve || o.isLineCurve3) ? 1 : o && o.isSplineCurve ? e * o.points.length : e, l = o.getPoints(a);
            for(let c = 0; c < l.length; c++){
                let h = l[c];
                n && n.equals(h) || (t.push(h), n = h);
            }
        }
        return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
    }
    copy(e) {
        super.copy(e), this.curves = [];
        for(let t = 0, n = e.curves.length; t < n; t++){
            let i = e.curves[t];
            this.curves.push(i.clone());
        }
        return this.autoClose = e.autoClose, this;
    }
    toJSON() {
        let e = super.toJSON();
        e.autoClose = this.autoClose, e.curves = [];
        for(let t = 0, n = this.curves.length; t < n; t++){
            let i = this.curves[t];
            e.curves.push(i.toJSON());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
        for(let t = 0, n = e.curves.length; t < n; t++){
            let i = e.curves[t];
            this.curves.push(new Ta[i.type]().fromJSON(i));
        }
        return this;
    }
}, gr = class extends Ah {
    constructor(e){
        super();
        this.type = "Path", this.currentPoint = new X, e && this.setFromPoints(e);
    }
    setFromPoints(e) {
        this.moveTo(e[0].x, e[0].y);
        for(let t = 1, n = e.length; t < n; t++)this.lineTo(e[t].x, e[t].y);
        return this;
    }
    moveTo(e, t) {
        return this.currentPoint.set(e, t), this;
    }
    lineTo(e, t) {
        let n = new Or(this.currentPoint.clone(), new X(e, t));
        return this.curves.push(n), this.currentPoint.set(e, t), this;
    }
    quadraticCurveTo(e, t, n, i) {
        let r = new co(this.currentPoint.clone(), new X(e, t), new X(n, i));
        return this.curves.push(r), this.currentPoint.set(n, i), this;
    }
    bezierCurveTo(e, t, n, i, r, o) {
        let a = new lo(this.currentPoint.clone(), new X(e, t), new X(n, i), new X(r, o));
        return this.curves.push(a), this.currentPoint.set(r, o), this;
    }
    splineThru(e) {
        let t = [
            this.currentPoint.clone()
        ].concat(e), n = new uo(t);
        return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
    }
    arc(e, t, n, i, r, o) {
        let a = this.currentPoint.x, l = this.currentPoint.y;
        return this.absarc(e + a, t + l, n, i, r, o), this;
    }
    absarc(e, t, n, i, r, o) {
        return this.absellipse(e, t, n, n, i, r, o), this;
    }
    ellipse(e, t, n, i, r, o, a, l) {
        let c = this.currentPoint.x, h = this.currentPoint.y;
        return this.absellipse(e + c, t + h, n, i, r, o, a, l), this;
    }
    absellipse(e, t, n, i, r, o, a, l) {
        let c = new Ur(e, t, n, i, r, o, a, l);
        if (this.curves.length > 0) {
            let u = c.getPoint(0);
            u.equals(this.currentPoint) || this.lineTo(u.x, u.y);
        }
        this.curves.push(c);
        let h = c.getPoint(1);
        return this.currentPoint.copy(h), this;
    }
    copy(e) {
        return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
    }
    toJSON() {
        let e = super.toJSON();
        return e.currentPoint = this.currentPoint.toArray(), e;
    }
    fromJSON(e) {
        return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
    }
}, Xt = class extends gr {
    constructor(e){
        super(e);
        this.uuid = Et(), this.type = "Shape", this.holes = [];
    }
    getPointsHoles(e) {
        let t = [];
        for(let n = 0, i = this.holes.length; n < i; n++)t[n] = this.holes[n].getPoints(e);
        return t;
    }
    extractPoints(e) {
        return {
            shape: this.getPoints(e),
            holes: this.getPointsHoles(e)
        };
    }
    copy(e) {
        super.copy(e), this.holes = [];
        for(let t = 0, n = e.holes.length; t < n; t++){
            let i = e.holes[t];
            this.holes.push(i.clone());
        }
        return this;
    }
    toJSON() {
        let e = super.toJSON();
        e.uuid = this.uuid, e.holes = [];
        for(let t = 0, n = this.holes.length; t < n; t++){
            let i = this.holes[t];
            e.holes.push(i.toJSON());
        }
        return e;
    }
    fromJSON(e) {
        super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
        for(let t = 0, n = e.holes.length; t < n; t++){
            let i = e.holes[t];
            this.holes.push(new gr().fromJSON(i));
        }
        return this;
    }
}, Ox = {
    triangulate: function(s, e, t = 2) {
        let n = e && e.length, i = n ? e[0] * t : s.length, r = Ch(s, 0, i, t, !0), o = [];
        if (!r || r.next === r.prev) return o;
        let a, l, c, h, u, d, f;
        if (n && (r = Wx(s, e, r, t)), s.length > 80 * t) {
            a = c = s[0], l = h = s[1];
            for(let m = t; m < i; m += t)u = s[m], d = s[m + 1], u < a && (a = u), d < l && (l = d), u > c && (c = u), d > h && (h = d);
            f = Math.max(c - a, h - l), f = f !== 0 ? 1 / f : 0;
        }
        return xr(r, o, t, a, l, f), o;
    }
};
function Ch(s, e, t, n, i) {
    let r, o;
    if (i === ty(s, e, t, n) > 0) for(r = e; r < t; r += n)o = mc(r, s[r], s[r + 1], o);
    else for(r = t - n; r >= e; r -= n)o = mc(r, s[r], s[r + 1], o);
    return o && fo(o, o.next) && (vr(o), o = o.next), o;
}
function Tn(s, e) {
    if (!s) return s;
    e || (e = s);
    let t = s, n;
    do if (n = !1, !t.steiner && (fo(t, t.next) || $e(t.prev, t, t.next) === 0)) {
        if (vr(t), t = e = t.prev, t === t.next) break;
        n = !0;
    } else t = t.next;
    while (n || t !== e)
    return e;
}
function xr(s, e, t, n, i, r, o) {
    if (!s) return;
    !o && r && Zx(s, n, i, r);
    let a = s, l, c;
    for(; s.prev !== s.next;){
        if (l = s.prev, c = s.next, r ? kx(s, n, i, r) : Hx(s)) {
            e.push(l.i / t), e.push(s.i / t), e.push(c.i / t), vr(s), s = c.next, a = c.next;
            continue;
        }
        if (s = c, s === a) {
            o ? o === 1 ? (s = Gx(Tn(s), e, t), xr(s, e, t, n, i, r, 2)) : o === 2 && Vx(s, e, t, n, i, r) : xr(Tn(s), e, t, n, i, r, 1);
            break;
        }
    }
}
function Hx(s) {
    let e = s.prev, t = s, n = s.next;
    if ($e(e, t, n) >= 0) return !1;
    let i = s.next.next;
    for(; i !== s.prev;){
        if (Si(e.x, e.y, t.x, t.y, n.x, n.y, i.x, i.y) && $e(i.prev, i, i.next) >= 0) return !1;
        i = i.next;
    }
    return !0;
}
function kx(s, e, t, n) {
    let i = s.prev, r = s, o = s.next;
    if ($e(i, r, o) >= 0) return !1;
    let a = i.x < r.x ? i.x < o.x ? i.x : o.x : r.x < o.x ? r.x : o.x, l = i.y < r.y ? i.y < o.y ? i.y : o.y : r.y < o.y ? r.y : o.y, c = i.x > r.x ? i.x > o.x ? i.x : o.x : r.x > o.x ? r.x : o.x, h = i.y > r.y ? i.y > o.y ? i.y : o.y : r.y > o.y ? r.y : o.y, u = oa(a, l, e, t, n), d = oa(c, h, e, t, n), f = s.prevZ, m = s.nextZ;
    for(; f && f.z >= u && m && m.z <= d;){
        if (f !== s.prev && f !== s.next && Si(i.x, i.y, r.x, r.y, o.x, o.y, f.x, f.y) && $e(f.prev, f, f.next) >= 0 || (f = f.prevZ, m !== s.prev && m !== s.next && Si(i.x, i.y, r.x, r.y, o.x, o.y, m.x, m.y) && $e(m.prev, m, m.next) >= 0)) return !1;
        m = m.nextZ;
    }
    for(; f && f.z >= u;){
        if (f !== s.prev && f !== s.next && Si(i.x, i.y, r.x, r.y, o.x, o.y, f.x, f.y) && $e(f.prev, f, f.next) >= 0) return !1;
        f = f.prevZ;
    }
    for(; m && m.z <= d;){
        if (m !== s.prev && m !== s.next && Si(i.x, i.y, r.x, r.y, o.x, o.y, m.x, m.y) && $e(m.prev, m, m.next) >= 0) return !1;
        m = m.nextZ;
    }
    return !0;
}
function Gx(s, e, t) {
    let n = s;
    do {
        let i = n.prev, r = n.next.next;
        !fo(i, r) && Lh(i, n, n.next, r) && yr(i, r) && yr(r, i) && (e.push(i.i / t), e.push(n.i / t), e.push(r.i / t), vr(n), vr(n.next), n = s = r), n = n.next;
    }while (n !== s)
    return Tn(n);
}
function Vx(s, e, t, n, i, r) {
    let o = s;
    do {
        let a = o.next.next;
        for(; a !== o.prev;){
            if (o.i !== a.i && Qx(o, a)) {
                let l = Rh(o, a);
                o = Tn(o, o.next), l = Tn(l, l.next), xr(o, e, t, n, i, r), xr(l, e, t, n, i, r);
                return;
            }
            a = a.next;
        }
        o = o.next;
    }while (o !== s)
}
function Wx(s, e, t, n) {
    let i = [], r, o, a, l, c;
    for(r = 0, o = e.length; r < o; r++)a = e[r] * n, l = r < o - 1 ? e[r + 1] * n : s.length, c = Ch(s, a, l, n, !1), c === c.next && (c.steiner = !0), i.push(jx(c));
    for(i.sort(qx), r = 0; r < i.length; r++)Xx(i[r], t), t = Tn(t, t.next);
    return t;
}
function qx(s, e) {
    return s.x - e.x;
}
function Xx(s, e) {
    if (e = Jx(s, e), e) {
        let t = Rh(e, s);
        Tn(e, e.next), Tn(t, t.next);
    }
}
function Jx(s, e) {
    let t = e, n = s.x, i = s.y, r = -1 / 0, o;
    do {
        if (i <= t.y && i >= t.next.y && t.next.y !== t.y) {
            let d = t.x + (i - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
            if (d <= n && d > r) {
                if (r = d, d === n) {
                    if (i === t.y) return t;
                    if (i === t.next.y) return t.next;
                }
                o = t.x < t.next.x ? t : t.next;
            }
        }
        t = t.next;
    }while (t !== e)
    if (!o) return null;
    if (n === r) return o;
    let a = o, l = o.x, c = o.y, h = 1 / 0, u;
    t = o;
    do n >= t.x && t.x >= l && n !== t.x && Si(i < c ? n : r, i, l, c, i < c ? r : n, i, t.x, t.y) && (u = Math.abs(i - t.y) / (n - t.x), yr(t, s) && (u < h || u === h && (t.x > o.x || t.x === o.x && Yx(o, t))) && (o = t, h = u)), t = t.next;
    while (t !== a)
    return o;
}
function Yx(s, e) {
    return $e(s.prev, s, e.prev) < 0 && $e(e.next, s, s.next) < 0;
}
function Zx(s, e, t, n) {
    let i = s;
    do i.z === null && (i.z = oa(i.x, i.y, e, t, n)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
    while (i !== s)
    i.prevZ.nextZ = null, i.prevZ = null, $x(i);
}
function $x(s) {
    let e, t, n, i, r, o, a, l, c = 1;
    do {
        for(t = s, s = null, r = null, o = 0; t;){
            for(o++, n = t, a = 0, e = 0; e < c && (a++, n = n.nextZ, !!n); e++);
            for(l = c; a > 0 || l > 0 && n;)a !== 0 && (l === 0 || !n || t.z <= n.z) ? (i = t, t = t.nextZ, a--) : (i = n, n = n.nextZ, l--), r ? r.nextZ = i : s = i, i.prevZ = r, r = i;
            t = n;
        }
        r.nextZ = null, c *= 2;
    }while (o > 1)
    return s;
}
function oa(s, e, t, n, i) {
    return s = 32767 * (s - t) * i, e = 32767 * (e - n) * i, s = (s | s << 8) & 16711935, s = (s | s << 4) & 252645135, s = (s | s << 2) & 858993459, s = (s | s << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, s | e << 1;
}
function jx(s) {
    let e = s, t = s;
    do (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
    while (e !== s)
    return t;
}
function Si(s, e, t, n, i, r, o, a) {
    return (i - o) * (e - a) - (s - o) * (r - a) >= 0 && (s - o) * (n - a) - (t - o) * (e - a) >= 0 && (t - o) * (r - a) - (i - o) * (n - a) >= 0;
}
function Qx(s, e) {
    return s.next.i !== e.i && s.prev.i !== e.i && !Kx(s, e) && (yr(s, e) && yr(e, s) && ey(s, e) && ($e(s.prev, s, e.prev) || $e(s, e.prev, e)) || fo(s, e) && $e(s.prev, s, s.next) > 0 && $e(e.prev, e, e.next) > 0);
}
function $e(s, e, t) {
    return (e.y - s.y) * (t.x - e.x) - (e.x - s.x) * (t.y - e.y);
}
function fo(s, e) {
    return s.x === e.x && s.y === e.y;
}
function Lh(s, e, t, n) {
    let i = ws($e(s, e, t)), r = ws($e(s, e, n)), o = ws($e(t, n, s)), a = ws($e(t, n, e));
    return !!(i !== r && o !== a || i === 0 && bs(s, t, e) || r === 0 && bs(s, n, e) || o === 0 && bs(t, s, n) || a === 0 && bs(t, e, n));
}
function bs(s, e, t) {
    return e.x <= Math.max(s.x, t.x) && e.x >= Math.min(s.x, t.x) && e.y <= Math.max(s.y, t.y) && e.y >= Math.min(s.y, t.y);
}
function ws(s) {
    return s > 0 ? 1 : s < 0 ? -1 : 0;
}
function Kx(s, e) {
    let t = s;
    do {
        if (t.i !== s.i && t.next.i !== s.i && t.i !== e.i && t.next.i !== e.i && Lh(t, t.next, s, e)) return !0;
        t = t.next;
    }while (t !== s)
    return !1;
}
function yr(s, e) {
    return $e(s.prev, s, s.next) < 0 ? $e(s, e, s.next) >= 0 && $e(s, s.prev, e) >= 0 : $e(s, e, s.prev) < 0 || $e(s, s.next, e) < 0;
}
function ey(s, e) {
    let t = s, n = !1, i = (s.x + e.x) / 2, r = (s.y + e.y) / 2;
    do t.y > r != t.next.y > r && t.next.y !== t.y && i < (t.next.x - t.x) * (r - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
    while (t !== s)
    return n;
}
function Rh(s, e) {
    let t = new aa(s.i, s.x, s.y), n = new aa(e.i, e.x, e.y), i = s.next, r = e.prev;
    return s.next = e, e.prev = s, t.next = i, i.prev = t, n.next = t, t.prev = n, r.next = n, n.prev = r, n;
}
function mc(s, e, t, n) {
    let i = new aa(s, e, t);
    return n ? (i.next = n.next, i.prev = n, n.next.prev = i, n.next = i) : (i.prev = i, i.next = i), i;
}
function vr(s) {
    s.next.prev = s.prev, s.prev.next = s.next, s.prevZ && (s.prevZ.nextZ = s.nextZ), s.nextZ && (s.nextZ.prevZ = s.prevZ);
}
function aa(s, e, t) {
    this.i = s, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function ty(s, e, t, n) {
    let i = 0;
    for(let r = e, o = t - n; r < t; r += n)i += (s[o] - s[r]) * (s[r + 1] + s[o + 1]), o = r;
    return i;
}
var Jt = class {
    static area(e) {
        let t = e.length, n = 0;
        for(let i = t - 1, r = 0; r < t; i = r++)n += e[i].x * e[r].y - e[r].x * e[i].y;
        return n * .5;
    }
    static isClockWise(e) {
        return Jt.area(e) < 0;
    }
    static triangulateShape(e, t) {
        let n = [], i = [], r = [];
        gc(e), xc(n, e);
        let o = e.length;
        t.forEach(gc);
        for(let l = 0; l < t.length; l++)i.push(o), o += t[l].length, xc(n, t[l]);
        let a = Ox.triangulate(n, i);
        for(let l = 0; l < a.length; l += 3)r.push(a.slice(l, l + 3));
        return r;
    }
};
function gc(s) {
    let e = s.length;
    e > 2 && s[e - 1].equals(s[0]) && s.pop();
}
function xc(s, e) {
    for(let t = 0; t < e.length; t++)s.push(e[t].x), s.push(e[t].y);
}
var ln = class extends _e {
    constructor(e = new Xt([
        new X(.5, .5),
        new X(-.5, .5),
        new X(-.5, -.5),
        new X(.5, -.5)
    ]), t = {}){
        super();
        this.type = "ExtrudeGeometry", this.parameters = {
            shapes: e,
            options: t
        }, e = Array.isArray(e) ? e : [
            e
        ];
        let n = this, i = [], r = [];
        for(let a = 0, l = e.length; a < l; a++){
            let c = e[a];
            o(c);
        }
        this.setAttribute("position", new de(i, 3)), this.setAttribute("uv", new de(r, 2)), this.computeVertexNormals();
        function o(a) {
            let l = [], c = t.curveSegments !== void 0 ? t.curveSegments : 12, h = t.steps !== void 0 ? t.steps : 1, u = t.depth !== void 0 ? t.depth : 1, d = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, f = t.bevelThickness !== void 0 ? t.bevelThickness : .2, m = t.bevelSize !== void 0 ? t.bevelSize : f - .1, x = t.bevelOffset !== void 0 ? t.bevelOffset : 0, v = t.bevelSegments !== void 0 ? t.bevelSegments : 3, g = t.extrudePath, p = t.UVGenerator !== void 0 ? t.UVGenerator : ny;
            t.amount !== void 0 && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), u = t.amount);
            let _, y = !1, b, A, L, I;
            g && (_ = g.getSpacedPoints(h), y = !0, d = !1, b = g.computeFrenetFrames(h, !1), A = new M, L = new M, I = new M), d || (v = 0, f = 0, m = 0, x = 0);
            let k = a.extractPoints(c), B = k.shape, P = k.holes;
            if (!Jt.isClockWise(B)) {
                B = B.reverse();
                for(let G = 0, j = P.length; G < j; G++){
                    let K = P[G];
                    Jt.isClockWise(K) && (P[G] = K.reverse());
                }
            }
            let E = Jt.triangulateShape(B, P), D = B;
            for(let G = 0, j = P.length; G < j; G++){
                let K = P[G];
                B = B.concat(K);
            }
            function U(G, j, K) {
                return j || console.error("THREE.ExtrudeGeometry: vec does not exist"), j.clone().multiplyScalar(K).add(G);
            }
            let F = B.length, O = E.length;
            function ne(G, j, K) {
                let ue, se, Se, Te = G.x - j.x, Pe = G.y - j.y, Ye = K.x - G.x, C = K.y - G.y, T = Te * Te + Pe * Pe, J = Te * C - Pe * Ye;
                if (Math.abs(J) > Number.EPSILON) {
                    let $ = Math.sqrt(T), re = Math.sqrt(Ye * Ye + C * C), Z = j.x - Pe / $, Me = j.y + Te / $, ve = K.x - C / re, te = K.y + Ye / re, R = ((ve - Z) * C - (te - Me) * Ye) / (Te * C - Pe * Ye);
                    ue = Z + Te * R - G.x, se = Me + Pe * R - G.y;
                    let ee = ue * ue + se * se;
                    if (ee <= 2) return new X(ue, se);
                    Se = Math.sqrt(ee / 2);
                } else {
                    let $ = !1;
                    Te > Number.EPSILON ? Ye > Number.EPSILON && ($ = !0) : Te < -Number.EPSILON ? Ye < -Number.EPSILON && ($ = !0) : Math.sign(Pe) === Math.sign(C) && ($ = !0), $ ? (ue = -Pe, se = Te, Se = Math.sqrt(T)) : (ue = Te, se = Pe, Se = Math.sqrt(T / 2));
                }
                return new X(ue / Se, se / Se);
            }
            let ce = [];
            for(let G = 0, j = D.length, K = j - 1, ue = G + 1; G < j; G++, K++, ue++)K === j && (K = 0), ue === j && (ue = 0), ce[G] = ne(D[G], D[K], D[ue]);
            let V = [], W, he = ce.concat();
            for(let G = 0, j = P.length; G < j; G++){
                let K = P[G];
                W = [];
                for(let ue = 0, se = K.length, Se = se - 1, Te = ue + 1; ue < se; ue++, Se++, Te++)Se === se && (Se = 0), Te === se && (Te = 0), W[ue] = ne(K[ue], K[Se], K[Te]);
                V.push(W), he = he.concat(W);
            }
            for(let G = 0; G < v; G++){
                let j = G / v, K = f * Math.cos(j * Math.PI / 2), ue = m * Math.sin(j * Math.PI / 2) + x;
                for(let se = 0, Se = D.length; se < Se; se++){
                    let Te = U(D[se], ce[se], ue);
                    Ce(Te.x, Te.y, -K);
                }
                for(let se = 0, Se = P.length; se < Se; se++){
                    let Te = P[se];
                    W = V[se];
                    for(let Pe = 0, Ye = Te.length; Pe < Ye; Pe++){
                        let C = U(Te[Pe], W[Pe], ue);
                        Ce(C.x, C.y, -K);
                    }
                }
            }
            let le = m + x;
            for(let G = 0; G < F; G++){
                let j = d ? U(B[G], he[G], le) : B[G];
                y ? (L.copy(b.normals[0]).multiplyScalar(j.x), A.copy(b.binormals[0]).multiplyScalar(j.y), I.copy(_[0]).add(L).add(A), Ce(I.x, I.y, I.z)) : Ce(j.x, j.y, 0);
            }
            for(let G = 1; G <= h; G++)for(let j = 0; j < F; j++){
                let K = d ? U(B[j], he[j], le) : B[j];
                y ? (L.copy(b.normals[G]).multiplyScalar(K.x), A.copy(b.binormals[G]).multiplyScalar(K.y), I.copy(_[G]).add(L).add(A), Ce(I.x, I.y, I.z)) : Ce(K.x, K.y, u / h * G);
            }
            for(let G = v - 1; G >= 0; G--){
                let j = G / v, K = f * Math.cos(j * Math.PI / 2), ue = m * Math.sin(j * Math.PI / 2) + x;
                for(let se = 0, Se = D.length; se < Se; se++){
                    let Te = U(D[se], ce[se], ue);
                    Ce(Te.x, Te.y, u + K);
                }
                for(let se = 0, Se = P.length; se < Se; se++){
                    let Te = P[se];
                    W = V[se];
                    for(let Pe = 0, Ye = Te.length; Pe < Ye; Pe++){
                        let C = U(Te[Pe], W[Pe], ue);
                        y ? Ce(C.x, C.y + _[h - 1].y, _[h - 1].x + K) : Ce(C.x, C.y, u + K);
                    }
                }
            }
            fe(), Be();
            function fe() {
                let G = i.length / 3;
                if (d) {
                    let j = 0, K = F * j;
                    for(let ue = 0; ue < O; ue++){
                        let se = E[ue];
                        ye(se[2] + K, se[1] + K, se[0] + K);
                    }
                    j = h + v * 2, K = F * j;
                    for(let ue = 0; ue < O; ue++){
                        let se = E[ue];
                        ye(se[0] + K, se[1] + K, se[2] + K);
                    }
                } else {
                    for(let j = 0; j < O; j++){
                        let K = E[j];
                        ye(K[2], K[1], K[0]);
                    }
                    for(let j = 0; j < O; j++){
                        let K = E[j];
                        ye(K[0] + F * h, K[1] + F * h, K[2] + F * h);
                    }
                }
                n.addGroup(G, i.length / 3 - G, 0);
            }
            function Be() {
                let G = i.length / 3, j = 0;
                Y(D, j), j += D.length;
                for(let K = 0, ue = P.length; K < ue; K++){
                    let se = P[K];
                    Y(se, j), j += se.length;
                }
                n.addGroup(G, i.length / 3 - G, 1);
            }
            function Y(G, j) {
                let K = G.length;
                for(; --K >= 0;){
                    let ue = K, se = K - 1;
                    se < 0 && (se = G.length - 1);
                    for(let Se = 0, Te = h + v * 2; Se < Te; Se++){
                        let Pe = F * Se, Ye = F * (Se + 1), C = j + ue + Pe, T = j + se + Pe, J = j + se + Ye, $ = j + ue + Ye;
                        ge(C, T, J, $);
                    }
                }
            }
            function Ce(G, j, K) {
                l.push(G), l.push(j), l.push(K);
            }
            function ye(G, j, K) {
                xe(G), xe(j), xe(K);
                let ue = i.length / 3, se = p.generateTopUV(n, i, ue - 3, ue - 2, ue - 1);
                Oe(se[0]), Oe(se[1]), Oe(se[2]);
            }
            function ge(G, j, K, ue) {
                xe(G), xe(j), xe(ue), xe(j), xe(K), xe(ue);
                let se = i.length / 3, Se = p.generateSideWallUV(n, i, se - 6, se - 3, se - 2, se - 1);
                Oe(Se[0]), Oe(Se[1]), Oe(Se[3]), Oe(Se[1]), Oe(Se[2]), Oe(Se[3]);
            }
            function xe(G) {
                i.push(l[G * 3 + 0]), i.push(l[G * 3 + 1]), i.push(l[G * 3 + 2]);
            }
            function Oe(G) {
                r.push(G.x), r.push(G.y);
            }
        }
    }
    toJSON() {
        let e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
        return iy(t, n, e);
    }
    static fromJSON(e, t) {
        let n = [];
        for(let r = 0, o = e.shapes.length; r < o; r++){
            let a = t[e.shapes[r]];
            n.push(a);
        }
        let i = e.options.extrudePath;
        return i !== void 0 && (e.options.extrudePath = new Ta[i.type]().fromJSON(i)), new ln(n, e.options);
    }
}, ny = {
    generateTopUV: function(s, e, t, n, i) {
        let r = e[t * 3], o = e[t * 3 + 1], a = e[n * 3], l = e[n * 3 + 1], c = e[i * 3], h = e[i * 3 + 1];
        return [
            new X(r, o),
            new X(a, l),
            new X(c, h)
        ];
    },
    generateSideWallUV: function(s, e, t, n, i, r) {
        let o = e[t * 3], a = e[t * 3 + 1], l = e[t * 3 + 2], c = e[n * 3], h = e[n * 3 + 1], u = e[n * 3 + 2], d = e[i * 3], f = e[i * 3 + 1], m = e[i * 3 + 2], x = e[r * 3], v = e[r * 3 + 1], g = e[r * 3 + 2];
        return Math.abs(a - h) < Math.abs(o - c) ? [
            new X(o, 1 - l),
            new X(c, 1 - u),
            new X(d, 1 - m),
            new X(x, 1 - g)
        ] : [
            new X(a, 1 - l),
            new X(h, 1 - u),
            new X(f, 1 - m),
            new X(v, 1 - g)
        ];
    }
};
function iy(s, e, t) {
    if (t.shapes = [], Array.isArray(s)) for(let n = 0, i = s.length; n < i; n++){
        let r = s[n];
        t.shapes.push(r.uuid);
    }
    else t.shapes.push(s.uuid);
    return e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
var _r = class extends an {
    constructor(e = 1, t = 0){
        let n = (1 + Math.sqrt(5)) / 2, i = [
            -1,
            n,
            0,
            1,
            n,
            0,
            -1,
            -n,
            0,
            1,
            -n,
            0,
            0,
            -1,
            n,
            0,
            1,
            n,
            0,
            -1,
            -n,
            0,
            1,
            -n,
            n,
            0,
            -1,
            n,
            0,
            1,
            -n,
            0,
            -1,
            -n,
            0,
            1
        ], r = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        super(i, r, e, t);
        this.type = "IcosahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new _r(e.radius, e.detail);
    }
}, Mr = class extends _e {
    constructor(e = [
        new X(0, .5),
        new X(.5, 0),
        new X(0, -.5)
    ], t = 12, n = 0, i = Math.PI * 2){
        super();
        this.type = "LatheGeometry", this.parameters = {
            points: e,
            segments: t,
            phiStart: n,
            phiLength: i
        }, t = Math.floor(t), i = mt(i, 0, Math.PI * 2);
        let r = [], o = [], a = [], l = [], c = [], h = 1 / t, u = new M, d = new X, f = new M, m = new M, x = new M, v = 0, g = 0;
        for(let p = 0; p <= e.length - 1; p++)switch(p){
            case 0:
                v = e[p + 1].x - e[p].x, g = e[p + 1].y - e[p].y, f.x = g * 1, f.y = -v, f.z = g * 0, x.copy(f), f.normalize(), l.push(f.x, f.y, f.z);
                break;
            case e.length - 1:
                l.push(x.x, x.y, x.z);
                break;
            default:
                v = e[p + 1].x - e[p].x, g = e[p + 1].y - e[p].y, f.x = g * 1, f.y = -v, f.z = g * 0, m.copy(f), f.x += x.x, f.y += x.y, f.z += x.z, f.normalize(), l.push(f.x, f.y, f.z), x.copy(m);
        }
        for(let p = 0; p <= t; p++){
            let _ = n + p * h * i, y = Math.sin(_), b = Math.cos(_);
            for(let A = 0; A <= e.length - 1; A++){
                u.x = e[A].x * y, u.y = e[A].y, u.z = e[A].x * b, o.push(u.x, u.y, u.z), d.x = p / t, d.y = A / (e.length - 1), a.push(d.x, d.y);
                let L = l[3 * A + 0] * y, I = l[3 * A + 1], k = l[3 * A + 0] * b;
                c.push(L, I, k);
            }
        }
        for(let p = 0; p < t; p++)for(let _ = 0; _ < e.length - 1; _++){
            let y = _ + p * e.length, b = y, A = y + e.length, L = y + e.length + 1, I = y + 1;
            r.push(b, A, I), r.push(A, L, I);
        }
        this.setIndex(r), this.setAttribute("position", new de(o, 3)), this.setAttribute("uv", new de(a, 2)), this.setAttribute("normal", new de(c, 3));
    }
    static fromJSON(e) {
        return new Mr(e.points, e.segments, e.phiStart, e.phiLength);
    }
}, Ii = class extends an {
    constructor(e = 1, t = 0){
        let n = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ], i = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        super(n, i, e, t);
        this.type = "OctahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new Ii(e.radius, e.detail);
    }
}, br = class extends _e {
    constructor(e = .5, t = 1, n = 8, i = 1, r = 0, o = Math.PI * 2){
        super();
        this.type = "RingGeometry", this.parameters = {
            innerRadius: e,
            outerRadius: t,
            thetaSegments: n,
            phiSegments: i,
            thetaStart: r,
            thetaLength: o
        }, n = Math.max(3, n), i = Math.max(1, i);
        let a = [], l = [], c = [], h = [], u = e, d = (t - e) / i, f = new M, m = new X;
        for(let x = 0; x <= i; x++){
            for(let v = 0; v <= n; v++){
                let g = r + v / n * o;
                f.x = u * Math.cos(g), f.y = u * Math.sin(g), l.push(f.x, f.y, f.z), c.push(0, 0, 1), m.x = (f.x / t + 1) / 2, m.y = (f.y / t + 1) / 2, h.push(m.x, m.y);
            }
            u += d;
        }
        for(let x = 0; x < i; x++){
            let v = x * (n + 1);
            for(let g = 0; g < n; g++){
                let p = g + v, _ = p, y = p + n + 1, b = p + n + 2, A = p + 1;
                a.push(_, y, A), a.push(y, b, A);
            }
        }
        this.setIndex(a), this.setAttribute("position", new de(l, 3)), this.setAttribute("normal", new de(c, 3)), this.setAttribute("uv", new de(h, 2));
    }
    static fromJSON(e) {
        return new br(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
    }
}, Di = class extends _e {
    constructor(e = new Xt([
        new X(0, .5),
        new X(-.5, -.5),
        new X(.5, -.5)
    ]), t = 12){
        super();
        this.type = "ShapeGeometry", this.parameters = {
            shapes: e,
            curveSegments: t
        };
        let n = [], i = [], r = [], o = [], a = 0, l = 0;
        if (Array.isArray(e) === !1) c(e);
        else for(let h = 0; h < e.length; h++)c(e[h]), this.addGroup(a, l, h), a += l, l = 0;
        this.setIndex(n), this.setAttribute("position", new de(i, 3)), this.setAttribute("normal", new de(r, 3)), this.setAttribute("uv", new de(o, 2));
        function c(h) {
            let u = i.length / 3, d = h.extractPoints(t), f = d.shape, m = d.holes;
            Jt.isClockWise(f) === !1 && (f = f.reverse());
            for(let v = 0, g = m.length; v < g; v++){
                let p = m[v];
                Jt.isClockWise(p) === !0 && (m[v] = p.reverse());
            }
            let x = Jt.triangulateShape(f, m);
            for(let v = 0, g = m.length; v < g; v++){
                let p = m[v];
                f = f.concat(p);
            }
            for(let v = 0, g = f.length; v < g; v++){
                let p = f[v];
                i.push(p.x, p.y, 0), r.push(0, 0, 1), o.push(p.x, p.y);
            }
            for(let v = 0, g = x.length; v < g; v++){
                let p = x[v], _ = p[0] + u, y = p[1] + u, b = p[2] + u;
                n.push(_, y, b), l += 3;
            }
        }
    }
    toJSON() {
        let e = super.toJSON(), t = this.parameters.shapes;
        return ry(t, e);
    }
    static fromJSON(e, t) {
        let n = [];
        for(let i = 0, r = e.shapes.length; i < r; i++){
            let o = t[e.shapes[i]];
            n.push(o);
        }
        return new Di(n, e.curveSegments);
    }
};
function ry(s, e) {
    if (e.shapes = [], Array.isArray(s)) for(let t = 0, n = s.length; t < n; t++){
        let i = s[t];
        e.shapes.push(i.uuid);
    }
    else e.shapes.push(s.uuid);
    return e;
}
var Fi = class extends _e {
    constructor(e = 1, t = 32, n = 16, i = 0, r = Math.PI * 2, o = 0, a = Math.PI){
        super();
        this.type = "SphereGeometry", this.parameters = {
            radius: e,
            widthSegments: t,
            heightSegments: n,
            phiStart: i,
            phiLength: r,
            thetaStart: o,
            thetaLength: a
        }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
        let l = Math.min(o + a, Math.PI), c = 0, h = [], u = new M, d = new M, f = [], m = [], x = [], v = [];
        for(let g = 0; g <= n; g++){
            let p = [], _ = g / n, y = 0;
            g == 0 && o == 0 ? y = .5 / t : g == n && l == Math.PI && (y = -.5 / t);
            for(let b = 0; b <= t; b++){
                let A = b / t;
                u.x = -e * Math.cos(i + A * r) * Math.sin(o + _ * a), u.y = e * Math.cos(o + _ * a), u.z = e * Math.sin(i + A * r) * Math.sin(o + _ * a), m.push(u.x, u.y, u.z), d.copy(u).normalize(), x.push(d.x, d.y, d.z), v.push(A + y, 1 - _), p.push(c++);
            }
            h.push(p);
        }
        for(let g = 0; g < n; g++)for(let p = 0; p < t; p++){
            let _ = h[g][p + 1], y = h[g][p], b = h[g + 1][p], A = h[g + 1][p + 1];
            (g !== 0 || o > 0) && f.push(_, y, A), (g !== n - 1 || l < Math.PI) && f.push(y, b, A);
        }
        this.setIndex(f), this.setAttribute("position", new de(m, 3)), this.setAttribute("normal", new de(x, 3)), this.setAttribute("uv", new de(v, 2));
    }
    static fromJSON(e) {
        return new Fi(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
    }
}, wr = class extends an {
    constructor(e = 1, t = 0){
        let n = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ], i = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        super(n, i, e, t);
        this.type = "TetrahedronGeometry", this.parameters = {
            radius: e,
            detail: t
        };
    }
    static fromJSON(e) {
        return new wr(e.radius, e.detail);
    }
}, Sr = class extends _e {
    constructor(e = 1, t = .4, n = 8, i = 6, r = Math.PI * 2){
        super();
        this.type = "TorusGeometry", this.parameters = {
            radius: e,
            tube: t,
            radialSegments: n,
            tubularSegments: i,
            arc: r
        }, n = Math.floor(n), i = Math.floor(i);
        let o = [], a = [], l = [], c = [], h = new M, u = new M, d = new M;
        for(let f = 0; f <= n; f++)for(let m = 0; m <= i; m++){
            let x = m / i * r, v = f / n * Math.PI * 2;
            u.x = (e + t * Math.cos(v)) * Math.cos(x), u.y = (e + t * Math.cos(v)) * Math.sin(x), u.z = t * Math.sin(v), a.push(u.x, u.y, u.z), h.x = e * Math.cos(x), h.y = e * Math.sin(x), d.subVectors(u, h).normalize(), l.push(d.x, d.y, d.z), c.push(m / i), c.push(f / n);
        }
        for(let f = 1; f <= n; f++)for(let m = 1; m <= i; m++){
            let x = (i + 1) * f + m - 1, v = (i + 1) * (f - 1) + m - 1, g = (i + 1) * (f - 1) + m, p = (i + 1) * f + m;
            o.push(x, v, p), o.push(v, g, p);
        }
        this.setIndex(o), this.setAttribute("position", new de(a, 3)), this.setAttribute("normal", new de(l, 3)), this.setAttribute("uv", new de(c, 2));
    }
    static fromJSON(e) {
        return new Sr(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
    }
}, Tr = class extends _e {
    constructor(e = 1, t = .4, n = 64, i = 8, r = 2, o = 3){
        super();
        this.type = "TorusKnotGeometry", this.parameters = {
            radius: e,
            tube: t,
            tubularSegments: n,
            radialSegments: i,
            p: r,
            q: o
        }, n = Math.floor(n), i = Math.floor(i);
        let a = [], l = [], c = [], h = [], u = new M, d = new M, f = new M, m = new M, x = new M, v = new M, g = new M;
        for(let _ = 0; _ <= n; ++_){
            let y = _ / n * r * Math.PI * 2;
            p(y, r, o, e, f), p(y + .01, r, o, e, m), v.subVectors(m, f), g.addVectors(m, f), x.crossVectors(v, g), g.crossVectors(x, v), x.normalize(), g.normalize();
            for(let b = 0; b <= i; ++b){
                let A = b / i * Math.PI * 2, L = -t * Math.cos(A), I = t * Math.sin(A);
                u.x = f.x + (L * g.x + I * x.x), u.y = f.y + (L * g.y + I * x.y), u.z = f.z + (L * g.z + I * x.z), l.push(u.x, u.y, u.z), d.subVectors(u, f).normalize(), c.push(d.x, d.y, d.z), h.push(_ / n), h.push(b / i);
            }
        }
        for(let _ = 1; _ <= n; _++)for(let y = 1; y <= i; y++){
            let b = (i + 1) * (_ - 1) + (y - 1), A = (i + 1) * _ + (y - 1), L = (i + 1) * _ + y, I = (i + 1) * (_ - 1) + y;
            a.push(b, A, I), a.push(A, L, I);
        }
        this.setIndex(a), this.setAttribute("position", new de(l, 3)), this.setAttribute("normal", new de(c, 3)), this.setAttribute("uv", new de(h, 2));
        function p(_, y, b, A, L) {
            let I = Math.cos(_), k = Math.sin(_), B = b / y * _, P = Math.cos(B);
            L.x = A * (2 + P) * .5 * I, L.y = A * (2 + P) * k * .5, L.z = A * Math.sin(B) * .5;
        }
    }
    static fromJSON(e) {
        return new Tr(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
    }
}, Er = class extends _e {
    constructor(e = new ho(new M(-1, -1, 0), new M(-1, 1, 0), new M(1, 1, 0)), t = 64, n = 1, i = 8, r = !1){
        super();
        this.type = "TubeGeometry", this.parameters = {
            path: e,
            tubularSegments: t,
            radius: n,
            radialSegments: i,
            closed: r
        };
        let o = e.computeFrenetFrames(t, r);
        this.tangents = o.tangents, this.normals = o.normals, this.binormals = o.binormals;
        let a = new M, l = new M, c = new X, h = new M, u = [], d = [], f = [], m = [];
        x(), this.setIndex(m), this.setAttribute("position", new de(u, 3)), this.setAttribute("normal", new de(d, 3)), this.setAttribute("uv", new de(f, 2));
        function x() {
            for(let _ = 0; _ < t; _++)v(_);
            v(r === !1 ? t : 0), p(), g();
        }
        function v(_) {
            h = e.getPointAt(_ / t, h);
            let y = o.normals[_], b = o.binormals[_];
            for(let A = 0; A <= i; A++){
                let L = A / i * Math.PI * 2, I = Math.sin(L), k = -Math.cos(L);
                l.x = k * y.x + I * b.x, l.y = k * y.y + I * b.y, l.z = k * y.z + I * b.z, l.normalize(), d.push(l.x, l.y, l.z), a.x = h.x + n * l.x, a.y = h.y + n * l.y, a.z = h.z + n * l.z, u.push(a.x, a.y, a.z);
            }
        }
        function g() {
            for(let _ = 1; _ <= t; _++)for(let y = 1; y <= i; y++){
                let b = (i + 1) * (_ - 1) + (y - 1), A = (i + 1) * _ + (y - 1), L = (i + 1) * _ + y, I = (i + 1) * (_ - 1) + y;
                m.push(b, A, I), m.push(A, L, I);
            }
        }
        function p() {
            for(let _ = 0; _ <= t; _++)for(let y = 0; y <= i; y++)c.x = _ / t, c.y = y / i, f.push(c.x, c.y);
        }
    }
    toJSON() {
        let e = super.toJSON();
        return e.path = this.parameters.path.toJSON(), e;
    }
    static fromJSON(e) {
        return new Er(new Ta[e.path.type]().fromJSON(e.path), e.tubularSegments, e.radius, e.radialSegments, e.closed);
    }
}, Ea = class extends _e {
    constructor(e = null){
        super();
        if (this.type = "WireframeGeometry", this.parameters = {
            geometry: e
        }, e !== null) {
            let t = [], n = new Set, i = new M, r = new M;
            if (e.index !== null) {
                let o = e.attributes.position, a = e.index, l = e.groups;
                l.length === 0 && (l = [
                    {
                        start: 0,
                        count: a.count,
                        materialIndex: 0
                    }
                ]);
                for(let c = 0, h = l.length; c < h; ++c){
                    let u = l[c], d = u.start, f = u.count;
                    for(let m = d, x = d + f; m < x; m += 3)for(let v = 0; v < 3; v++){
                        let g = a.getX(m + v), p = a.getX(m + (v + 1) % 3);
                        i.fromBufferAttribute(o, g), r.fromBufferAttribute(o, p), yc(i, r, n) === !0 && (t.push(i.x, i.y, i.z), t.push(r.x, r.y, r.z));
                    }
                }
            } else {
                let o = e.attributes.position;
                for(let a = 0, l = o.count / 3; a < l; a++)for(let c = 0; c < 3; c++){
                    let h = 3 * a + c, u = 3 * a + (c + 1) % 3;
                    i.fromBufferAttribute(o, h), r.fromBufferAttribute(o, u), yc(i, r, n) === !0 && (t.push(i.x, i.y, i.z), t.push(r.x, r.y, r.z));
                }
            }
            this.setAttribute("position", new de(t, 3));
        }
    }
};
function yc(s, e, t) {
    let n = `${s.x},${s.y},${s.z}-${e.x},${e.y},${e.z}`, i = `${e.x},${e.y},${e.z}-${s.x},${s.y},${s.z}`;
    return t.has(n) === !0 || t.has(i) === !0 ? !1 : (t.add(n, i), !0);
}
var vc = Object.freeze({
    __proto__: null,
    BoxGeometry: wn,
    BoxBufferGeometry: wn,
    CircleGeometry: fr,
    CircleBufferGeometry: fr,
    ConeGeometry: pr,
    ConeBufferGeometry: pr,
    CylinderGeometry: Jn,
    CylinderBufferGeometry: Jn,
    DodecahedronGeometry: mr,
    DodecahedronBufferGeometry: mr,
    EdgesGeometry: _a,
    ExtrudeGeometry: ln,
    ExtrudeBufferGeometry: ln,
    IcosahedronGeometry: _r,
    IcosahedronBufferGeometry: _r,
    LatheGeometry: Mr,
    LatheBufferGeometry: Mr,
    OctahedronGeometry: Ii,
    OctahedronBufferGeometry: Ii,
    PlaneGeometry: Pi,
    PlaneBufferGeometry: Pi,
    PolyhedronGeometry: an,
    PolyhedronBufferGeometry: an,
    RingGeometry: br,
    RingBufferGeometry: br,
    ShapeGeometry: Di,
    ShapeBufferGeometry: Di,
    SphereGeometry: Fi,
    SphereBufferGeometry: Fi,
    TetrahedronGeometry: wr,
    TetrahedronBufferGeometry: wr,
    TorusGeometry: Sr,
    TorusBufferGeometry: Sr,
    TorusKnotGeometry: Tr,
    TorusKnotBufferGeometry: Tr,
    TubeGeometry: Er,
    TubeBufferGeometry: Er,
    WireframeGeometry: Ea
}), Aa = class extends dt {
    constructor(e){
        super();
        this.type = "ShadowMaterial", this.color = new ae(0), this.transparent = !0, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this;
    }
};
Aa.prototype.isShadowMaterial = !0;
var po = class extends dt {
    constructor(e){
        super();
        this.defines = {
            STANDARD: ""
        }, this.type = "MeshStandardMaterial", this.color = new ae(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ae(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Hi, this.normalScale = new X(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.defines = {
            STANDARD: ""
        }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this;
    }
};
po.prototype.isMeshStandardMaterial = !0;
var Ca = class extends po {
    constructor(e){
        super();
        this.defines = {
            STANDARD: "",
            PHYSICAL: ""
        }, this.type = "MeshPhysicalMaterial", this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new X(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
            get: function() {
                return mt(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(t) {
                this.ior = (1 + .4 * t) / (1 - .4 * t);
            }
        }), this.sheenColor = new ae(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 0, this.attenuationColor = new ae(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new ae(1, 1, 1), this.specularColorMap = null, this._sheen = 0, this._clearcoat = 0, this._transmission = 0, this.setValues(e);
    }
    get sheen() {
        return this._sheen;
    }
    set sheen(e) {
        this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
    }
    get clearcoat() {
        return this._clearcoat;
    }
    set clearcoat(e) {
        this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
    }
    get transmission() {
        return this._transmission;
    }
    set transmission(e) {
        this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
    }
    copy(e) {
        return super.copy(e), this.defines = {
            STANDARD: "",
            PHYSICAL: ""
        }, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
    }
};
Ca.prototype.isMeshPhysicalMaterial = !0;
var La = class extends dt {
    constructor(e){
        super();
        this.type = "MeshPhongMaterial", this.color = new ae(16777215), this.specular = new ae(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ae(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Hi, this.normalScale = new X(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Vs, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this;
    }
};
La.prototype.isMeshPhongMaterial = !0;
var Ra = class extends dt {
    constructor(e){
        super();
        this.defines = {
            TOON: ""
        }, this.type = "MeshToonMaterial", this.color = new ae(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ae(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Hi, this.normalScale = new X(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this;
    }
};
Ra.prototype.isMeshToonMaterial = !0;
var Pa = class extends dt {
    constructor(e){
        super();
        this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Hi, this.normalScale = new X(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.flatShading = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
    }
};
Pa.prototype.isMeshNormalMaterial = !0;
var Ia = class extends dt {
    constructor(e){
        super();
        this.type = "MeshLambertMaterial", this.color = new ae(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new ae(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Vs, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this;
    }
};
Ia.prototype.isMeshLambertMaterial = !0;
var Da = class extends dt {
    constructor(e){
        super();
        this.defines = {
            MATCAP: ""
        }, this.type = "MeshMatcapMaterial", this.color = new ae(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Hi, this.normalScale = new X(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.defines = {
            MATCAP: ""
        }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this;
    }
};
Da.prototype.isMeshMatcapMaterial = !0;
var Fa = class extends ft {
    constructor(e){
        super();
        this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
    }
    copy(e) {
        return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
    }
};
Fa.prototype.isLineDashedMaterial = !0;
var sy = Object.freeze({
    __proto__: null,
    ShadowMaterial: Aa,
    SpriteMaterial: io,
    RawShaderMaterial: Gi,
    ShaderMaterial: sn,
    PointsMaterial: jn,
    MeshPhysicalMaterial: Ca,
    MeshStandardMaterial: po,
    MeshPhongMaterial: La,
    MeshToonMaterial: Ra,
    MeshNormalMaterial: Pa,
    MeshLambertMaterial: Ia,
    MeshDepthMaterial: eo,
    MeshDistanceMaterial: to,
    MeshBasicMaterial: hn,
    MeshMatcapMaterial: Da,
    LineDashedMaterial: Fa,
    LineBasicMaterial: ft,
    Material: dt
}), Ze = {
    arraySlice: function(s, e, t) {
        return Ze.isTypedArray(s) ? new s.constructor(s.subarray(e, t !== void 0 ? t : s.length)) : s.slice(e, t);
    },
    convertArray: function(s, e, t) {
        return !s || !t && s.constructor === e ? s : typeof e.BYTES_PER_ELEMENT == "number" ? new e(s) : Array.prototype.slice.call(s);
    },
    isTypedArray: function(s) {
        return ArrayBuffer.isView(s) && !(s instanceof DataView);
    },
    getKeyframeOrder: function(s) {
        function e(i, r) {
            return s[i] - s[r];
        }
        let t = s.length, n = new Array(t);
        for(let i = 0; i !== t; ++i)n[i] = i;
        return n.sort(e), n;
    },
    sortedArray: function(s, e, t) {
        let n = s.length, i = new s.constructor(n);
        for(let r = 0, o = 0; o !== n; ++r){
            let a = t[r] * e;
            for(let l = 0; l !== e; ++l)i[o++] = s[a + l];
        }
        return i;
    },
    flattenJSON: function(s, e, t, n) {
        let i = 1, r = s[0];
        for(; r !== void 0 && r[n] === void 0;)r = s[i++];
        if (r === void 0) return;
        let o = r[n];
        if (o !== void 0) if (Array.isArray(o)) do o = r[n], o !== void 0 && (e.push(r.time), t.push.apply(t, o)), r = s[i++];
        while (r !== void 0)
        else if (o.toArray !== void 0) do o = r[n], o !== void 0 && (e.push(r.time), o.toArray(t, t.length)), r = s[i++];
        while (r !== void 0)
        else do o = r[n], o !== void 0 && (e.push(r.time), t.push(o)), r = s[i++];
        while (r !== void 0)
    },
    subclip: function(s, e, t, n, i = 30) {
        let r = s.clone();
        r.name = e;
        let o = [];
        for(let l = 0; l < r.tracks.length; ++l){
            let c = r.tracks[l], h = c.getValueSize(), u = [], d = [];
            for(let f = 0; f < c.times.length; ++f){
                let m = c.times[f] * i;
                if (!(m < t || m >= n)) {
                    u.push(c.times[f]);
                    for(let x = 0; x < h; ++x)d.push(c.values[f * h + x]);
                }
            }
            u.length !== 0 && (c.times = Ze.convertArray(u, c.times.constructor), c.values = Ze.convertArray(d, c.values.constructor), o.push(c));
        }
        r.tracks = o;
        let a = 1 / 0;
        for(let l = 0; l < r.tracks.length; ++l)a > r.tracks[l].times[0] && (a = r.tracks[l].times[0]);
        for(let l = 0; l < r.tracks.length; ++l)r.tracks[l].shift(-1 * a);
        return r.resetDuration(), r;
    },
    makeClipAdditive: function(s, e = 0, t = s, n = 30) {
        n <= 0 && (n = 30);
        let i = t.tracks.length, r = e / n;
        for(let o = 0; o < i; ++o){
            let a = t.tracks[o], l = a.ValueTypeName;
            if (l === "bool" || l === "string") continue;
            let c = s.tracks.find(function(g) {
                return g.name === a.name && g.ValueTypeName === l;
            });
            if (c === void 0) continue;
            let h = 0, u = a.getValueSize();
            a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (h = u / 3);
            let d = 0, f = c.getValueSize();
            c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (d = f / 3);
            let m = a.times.length - 1, x;
            if (r <= a.times[0]) {
                let g = h, p = u - h;
                x = Ze.arraySlice(a.values, g, p);
            } else if (r >= a.times[m]) {
                let g = m * u + h, p = g + u - h;
                x = Ze.arraySlice(a.values, g, p);
            } else {
                let g = a.createInterpolant(), p = h, _ = u - h;
                g.evaluate(r), x = Ze.arraySlice(g.resultBuffer, p, _);
            }
            l === "quaternion" && new gt().fromArray(x).normalize().conjugate().toArray(x);
            let v = c.times.length;
            for(let g = 0; g < v; ++g){
                let p = g * f + d;
                if (l === "quaternion") gt.multiplyQuaternionsFlat(c.values, p, x, 0, c.values, p);
                else {
                    let _ = f - d * 2;
                    for(let y = 0; y < _; ++y)c.values[p + y] -= x[y];
                }
            }
        }
        return s.blendMode = qc, s;
    }
}, cn = class {
    constructor(e, t, n, i){
        this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = i !== void 0 ? i : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
    }
    evaluate(e) {
        let t = this.parameterPositions, n = this._cachedIndex, i = t[n], r = t[n - 1];
        e: {
            t: {
                let o;
                n: {
                    i: if (!(e < i)) {
                        for(let a = n + 2;;){
                            if (i === void 0) {
                                if (e < r) break i;
                                return n = t.length, this._cachedIndex = n, this.afterEnd_(n - 1, e, r);
                            }
                            if (n === a) break;
                            if (r = i, i = t[++n], e < i) break t;
                        }
                        o = t.length;
                        break n;
                    }
                    if (!(e >= r)) {
                        let a = t[1];
                        e < a && (n = 2, r = a);
                        for(let l = n - 2;;){
                            if (r === void 0) return this._cachedIndex = 0, this.beforeStart_(0, e, i);
                            if (n === l) break;
                            if (i = r, r = t[--n - 1], e >= r) break t;
                        }
                        o = n, n = 0;
                        break n;
                    }
                    break e;
                }
                for(; n < o;){
                    let a = n + o >>> 1;
                    e < t[a] ? o = a : n = a + 1;
                }
                if (i = t[n], r = t[n - 1], r === void 0) return this._cachedIndex = 0, this.beforeStart_(0, e, i);
                if (i === void 0) return n = t.length, this._cachedIndex = n, this.afterEnd_(n - 1, r, e);
            }
            this._cachedIndex = n, this.intervalChanged_(n, r, i);
        }
        return this.interpolate_(n, r, e, i);
    }
    getSettings_() {
        return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(e) {
        let t = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r = e * i;
        for(let o = 0; o !== i; ++o)t[o] = n[r + o];
        return t;
    }
    interpolate_() {
        throw new Error("call to abstract method");
    }
    intervalChanged_() {}
};
cn.prototype.beforeStart_ = cn.prototype.copySampleValue_;
cn.prototype.afterEnd_ = cn.prototype.copySampleValue_;
var Ph = class extends cn {
    constructor(e, t, n, i){
        super(e, t, n, i);
        this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
            endingStart: Mi,
            endingEnd: Mi
        };
    }
    intervalChanged_(e, t, n) {
        let i = this.parameterPositions, r = e - 2, o = e + 1, a = i[r], l = i[o];
        if (a === void 0) switch(this.getSettings_().endingStart){
            case bi:
                r = e, a = 2 * t - n;
                break;
            case Os:
                r = i.length - 2, a = t + i[r] - i[r + 1];
                break;
            default:
                r = e, a = n;
        }
        if (l === void 0) switch(this.getSettings_().endingEnd){
            case bi:
                o = e, l = 2 * n - t;
                break;
            case Os:
                o = 1, l = n + i[1] - i[0];
                break;
            default:
                o = e - 1, l = t;
        }
        let c = (n - t) * .5, h = this.valueSize;
        this._weightPrev = c / (t - a), this._weightNext = c / (l - n), this._offsetPrev = r * h, this._offsetNext = o * h;
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = e * a, c = l - a, h = this._offsetPrev, u = this._offsetNext, d = this._weightPrev, f = this._weightNext, m = (n - t) / (i - t), x = m * m, v = x * m, g = -d * v + 2 * d * x - d * m, p = (1 + d) * v + (-1.5 - 2 * d) * x + (-.5 + d) * m + 1, _ = (-1 - f) * v + (1.5 + f) * x + .5 * m, y = f * v - f * x;
        for(let b = 0; b !== a; ++b)r[b] = g * o[h + b] + p * o[c + b] + _ * o[l + b] + y * o[u + b];
        return r;
    }
}, Na = class extends cn {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = e * a, c = l - a, h = (n - t) / (i - t), u = 1 - h;
        for(let d = 0; d !== a; ++d)r[d] = o[c + d] * u + o[l + d] * h;
        return r;
    }
}, Ih = class extends cn {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e) {
        return this.copySampleValue_(e - 1);
    }
}, zt = class {
    constructor(e, t, n, i){
        if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
        this.name = e, this.times = Ze.convertArray(t, this.TimeBufferType), this.values = Ze.convertArray(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation);
    }
    static toJSON(e) {
        let t = e.constructor, n;
        if (t.toJSON !== this.toJSON) n = t.toJSON(e);
        else {
            n = {
                name: e.name,
                times: Ze.convertArray(e.times, Array),
                values: Ze.convertArray(e.values, Array)
            };
            let i = e.getInterpolation();
            i !== e.DefaultInterpolation && (n.interpolation = i);
        }
        return n.type = e.ValueTypeName, n;
    }
    InterpolantFactoryMethodDiscrete(e) {
        return new Ih(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodLinear(e) {
        return new Na(this.times, this.values, this.getValueSize(), e);
    }
    InterpolantFactoryMethodSmooth(e) {
        return new Ph(this.times, this.values, this.getValueSize(), e);
    }
    setInterpolation(e) {
        let t;
        switch(e){
            case zs:
                t = this.InterpolantFactoryMethodDiscrete;
                break;
            case Us:
                t = this.InterpolantFactoryMethodLinear;
                break;
            case yo:
                t = this.InterpolantFactoryMethodSmooth;
                break;
        }
        if (t === void 0) {
            let n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === void 0) if (e !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
            else throw new Error(n);
            return console.warn("THREE.KeyframeTrack:", n), this;
        }
        return this.createInterpolant = t, this;
    }
    getInterpolation() {
        switch(this.createInterpolant){
            case this.InterpolantFactoryMethodDiscrete:
                return zs;
            case this.InterpolantFactoryMethodLinear:
                return Us;
            case this.InterpolantFactoryMethodSmooth:
                return yo;
        }
    }
    getValueSize() {
        return this.values.length / this.times.length;
    }
    shift(e) {
        if (e !== 0) {
            let t = this.times;
            for(let n = 0, i = t.length; n !== i; ++n)t[n] += e;
        }
        return this;
    }
    scale(e) {
        if (e !== 1) {
            let t = this.times;
            for(let n = 0, i = t.length; n !== i; ++n)t[n] *= e;
        }
        return this;
    }
    trim(e, t) {
        let n = this.times, i = n.length, r = 0, o = i - 1;
        for(; r !== i && n[r] < e;)++r;
        for(; o !== -1 && n[o] > t;)--o;
        if (++o, r !== 0 || o !== i) {
            r >= o && (o = Math.max(o, 1), r = o - 1);
            let a = this.getValueSize();
            this.times = Ze.arraySlice(n, r, o), this.values = Ze.arraySlice(this.values, r * a, o * a);
        }
        return this;
    }
    validate() {
        let e = !0, t = this.getValueSize();
        t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
        let n = this.times, i = this.values, r = n.length;
        r === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
        let o = null;
        for(let a = 0; a !== r; a++){
            let l = n[a];
            if (typeof l == "number" && isNaN(l)) {
                console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a, l), e = !1;
                break;
            }
            if (o !== null && o > l) {
                console.error("THREE.KeyframeTrack: Out of order keys.", this, a, l, o), e = !1;
                break;
            }
            o = l;
        }
        if (i !== void 0 && Ze.isTypedArray(i)) for(let a = 0, l = i.length; a !== l; ++a){
            let c = i[a];
            if (isNaN(c)) {
                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a, c), e = !1;
                break;
            }
        }
        return e;
    }
    optimize() {
        let e = Ze.arraySlice(this.times), t = Ze.arraySlice(this.values), n = this.getValueSize(), i = this.getInterpolation() === yo, r = e.length - 1, o = 1;
        for(let a = 1; a < r; ++a){
            let l = !1, c = e[a], h = e[a + 1];
            if (c !== h && (a !== 1 || c !== e[0])) if (i) l = !0;
            else {
                let u = a * n, d = u - n, f = u + n;
                for(let m = 0; m !== n; ++m){
                    let x = t[u + m];
                    if (x !== t[d + m] || x !== t[f + m]) {
                        l = !0;
                        break;
                    }
                }
            }
            if (l) {
                if (a !== o) {
                    e[o] = e[a];
                    let u = a * n, d = o * n;
                    for(let f = 0; f !== n; ++f)t[d + f] = t[u + f];
                }
                ++o;
            }
        }
        if (r > 0) {
            e[o] = e[r];
            for(let a = r * n, l = o * n, c = 0; c !== n; ++c)t[l + c] = t[a + c];
            ++o;
        }
        return o !== e.length ? (this.times = Ze.arraySlice(e, 0, o), this.values = Ze.arraySlice(t, 0, o * n)) : (this.times = e, this.values = t), this;
    }
    clone() {
        let e = Ze.arraySlice(this.times, 0), t = Ze.arraySlice(this.values, 0), n = this.constructor, i = new n(this.name, e, t);
        return i.createInterpolant = this.createInterpolant, i;
    }
};
zt.prototype.TimeBufferType = Float32Array;
zt.prototype.ValueBufferType = Float32Array;
zt.prototype.DefaultInterpolation = Us;
var Qn = class extends zt {
};
Qn.prototype.ValueTypeName = "bool";
Qn.prototype.ValueBufferType = Array;
Qn.prototype.DefaultInterpolation = zs;
Qn.prototype.InterpolantFactoryMethodLinear = void 0;
Qn.prototype.InterpolantFactoryMethodSmooth = void 0;
var Ba = class extends zt {
};
Ba.prototype.ValueTypeName = "color";
var Ar = class extends zt {
};
Ar.prototype.ValueTypeName = "number";
var Dh = class extends cn {
    constructor(e, t, n, i){
        super(e, t, n, i);
    }
    interpolate_(e, t, n, i) {
        let r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = (n - t) / (i - t), c = e * a;
        for(let h = c + a; c !== h; c += 4)gt.slerpFlat(r, 0, o, c - a, o, c, l);
        return r;
    }
}, Wi = class extends zt {
    InterpolantFactoryMethodLinear(e) {
        return new Dh(this.times, this.values, this.getValueSize(), e);
    }
};
Wi.prototype.ValueTypeName = "quaternion";
Wi.prototype.DefaultInterpolation = Us;
Wi.prototype.InterpolantFactoryMethodSmooth = void 0;
var Kn = class extends zt {
};
Kn.prototype.ValueTypeName = "string";
Kn.prototype.ValueBufferType = Array;
Kn.prototype.DefaultInterpolation = zs;
Kn.prototype.InterpolantFactoryMethodLinear = void 0;
Kn.prototype.InterpolantFactoryMethodSmooth = void 0;
var Cr = class extends zt {
};
Cr.prototype.ValueTypeName = "vector";
var Lr = class {
    constructor(e, t = -1, n, i = ua){
        this.name = e, this.tracks = n, this.duration = t, this.blendMode = i, this.uuid = Et(), this.duration < 0 && this.resetDuration();
    }
    static parse(e) {
        let t = [], n = e.tracks, i = 1 / (e.fps || 1);
        for(let o = 0, a = n.length; o !== a; ++o)t.push(ay(n[o]).scale(i));
        let r = new this(e.name, e.duration, t, e.blendMode);
        return r.uuid = e.uuid, r;
    }
    static toJSON(e) {
        let t = [], n = e.tracks, i = {
            name: e.name,
            duration: e.duration,
            tracks: t,
            uuid: e.uuid,
            blendMode: e.blendMode
        };
        for(let r = 0, o = n.length; r !== o; ++r)t.push(zt.toJSON(n[r]));
        return i;
    }
    static CreateFromMorphTargetSequence(e, t, n, i) {
        let r = t.length, o = [];
        for(let a = 0; a < r; a++){
            let l = [], c = [];
            l.push((a + r - 1) % r, a, (a + 1) % r), c.push(0, 1, 0);
            let h = Ze.getKeyframeOrder(l);
            l = Ze.sortedArray(l, 1, h), c = Ze.sortedArray(c, 1, h), !i && l[0] === 0 && (l.push(r), c.push(c[0])), o.push(new Ar(".morphTargetInfluences[" + t[a].name + "]", l, c).scale(1 / n));
        }
        return new this(e, -1, o);
    }
    static findByName(e, t) {
        let n = e;
        if (!Array.isArray(e)) {
            let i = e;
            n = i.geometry && i.geometry.animations || i.animations;
        }
        for(let i = 0; i < n.length; i++)if (n[i].name === t) return n[i];
        return null;
    }
    static CreateClipsFromMorphTargetSequences(e, t, n) {
        let i = {}, r = /^([\w-]*?)([\d]+)$/;
        for(let a = 0, l = e.length; a < l; a++){
            let c = e[a], h = c.name.match(r);
            if (h && h.length > 1) {
                let u = h[1], d = i[u];
                d || (i[u] = d = []), d.push(c);
            }
        }
        let o = [];
        for(let a in i)o.push(this.CreateFromMorphTargetSequence(a, i[a], t, n));
        return o;
    }
    static parseAnimation(e, t) {
        if (!e) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
        let n = function(u, d, f, m, x) {
            if (f.length !== 0) {
                let v = [], g = [];
                Ze.flattenJSON(f, v, g, m), v.length !== 0 && x.push(new u(d, v, g));
            }
        }, i = [], r = e.name || "default", o = e.fps || 30, a = e.blendMode, l = e.length || -1, c = e.hierarchy || [];
        for(let u = 0; u < c.length; u++){
            let d = c[u].keys;
            if (!(!d || d.length === 0)) if (d[0].morphTargets) {
                let f = {}, m;
                for(m = 0; m < d.length; m++)if (d[m].morphTargets) for(let x = 0; x < d[m].morphTargets.length; x++)f[d[m].morphTargets[x]] = -1;
                for(let x in f){
                    let v = [], g = [];
                    for(let p = 0; p !== d[m].morphTargets.length; ++p){
                        let _ = d[m];
                        v.push(_.time), g.push(_.morphTarget === x ? 1 : 0);
                    }
                    i.push(new Ar(".morphTargetInfluence[" + x + "]", v, g));
                }
                l = f.length * (o || 1);
            } else {
                let f = ".bones[" + t[u].name + "]";
                n(Cr, f + ".position", d, "pos", i), n(Wi, f + ".quaternion", d, "rot", i), n(Cr, f + ".scale", d, "scl", i);
            }
        }
        return i.length === 0 ? null : new this(r, l, i, a);
    }
    resetDuration() {
        let e = this.tracks, t = 0;
        for(let n = 0, i = e.length; n !== i; ++n){
            let r = this.tracks[n];
            t = Math.max(t, r.times[r.times.length - 1]);
        }
        return this.duration = t, this;
    }
    trim() {
        for(let e = 0; e < this.tracks.length; e++)this.tracks[e].trim(0, this.duration);
        return this;
    }
    validate() {
        let e = !0;
        for(let t = 0; t < this.tracks.length; t++)e = e && this.tracks[t].validate();
        return e;
    }
    optimize() {
        for(let e = 0; e < this.tracks.length; e++)this.tracks[e].optimize();
        return this;
    }
    clone() {
        let e = [];
        for(let t = 0; t < this.tracks.length; t++)e.push(this.tracks[t].clone());
        return new this.constructor(this.name, this.duration, e, this.blendMode);
    }
    toJSON() {
        return this.constructor.toJSON(this);
    }
};
function oy(s) {
    switch(s.toLowerCase()){
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
            return Ar;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
            return Cr;
        case "color":
            return Ba;
        case "quaternion":
            return Wi;
        case "bool":
        case "boolean":
            return Qn;
        case "string":
            return Kn;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s);
}
function ay(s) {
    if (s.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    let e = oy(s.type);
    if (s.times === void 0) {
        let t = [], n = [];
        Ze.flattenJSON(s.keys, t, n, "value"), s.times = t, s.values = n;
    }
    return e.parse !== void 0 ? e.parse(s) : new e(s.name, s.times, s.values, s.interpolation);
}
var Ni = {
    enabled: !1,
    files: {},
    add: function(s, e) {
        this.enabled !== !1 && (this.files[s] = e);
    },
    get: function(s) {
        if (this.enabled !== !1) return this.files[s];
    },
    remove: function(s) {
        delete this.files[s];
    },
    clear: function() {
        this.files = {};
    }
}, za = class {
    constructor(e, t, n){
        let i = this, r = !1, o = 0, a = 0, l, c = [];
        this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(h) {
            a++, r === !1 && i.onStart !== void 0 && i.onStart(h, o, a), r = !0;
        }, this.itemEnd = function(h) {
            o++, i.onProgress !== void 0 && i.onProgress(h, o, a), o === a && (r = !1, i.onLoad !== void 0 && i.onLoad());
        }, this.itemError = function(h) {
            i.onError !== void 0 && i.onError(h);
        }, this.resolveURL = function(h) {
            return l ? l(h) : h;
        }, this.setURLModifier = function(h) {
            return l = h, this;
        }, this.addHandler = function(h, u) {
            return c.push(h, u), this;
        }, this.removeHandler = function(h) {
            let u = c.indexOf(h);
            return u !== -1 && c.splice(u, 2), this;
        }, this.getHandler = function(h) {
            for(let u = 0, d = c.length; u < d; u += 2){
                let f = c[u], m = c[u + 1];
                if (f.global && (f.lastIndex = 0), f.test(h)) return m;
            }
            return null;
        };
    }
}, ly = new za, bt = class {
    constructor(e){
        this.manager = e !== void 0 ? e : ly, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
    }
    load() {}
    loadAsync(e, t) {
        let n = this;
        return new Promise(function(i, r) {
            n.load(e, i, t, r);
        });
    }
    parse() {}
    setCrossOrigin(e) {
        return this.crossOrigin = e, this;
    }
    setWithCredentials(e) {
        return this.withCredentials = e, this;
    }
    setPath(e) {
        return this.path = e, this;
    }
    setResourcePath(e) {
        return this.resourcePath = e, this;
    }
    setRequestHeader(e) {
        return this.requestHeader = e, this;
    }
}, tn = {}, Yt = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = Ni.get(e);
        if (r !== void 0) return this.manager.itemStart(e), setTimeout(()=>{
            t && t(r), this.manager.itemEnd(e);
        }, 0), r;
        if (tn[e] !== void 0) {
            tn[e].push({
                onLoad: t,
                onProgress: n,
                onError: i
            });
            return;
        }
        tn[e] = [], tn[e].push({
            onLoad: t,
            onProgress: n,
            onError: i
        });
        let o = new Request(e, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin"
        });
        fetch(o).then((a)=>{
            if (a.status === 200 || a.status === 0) {
                if (a.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || a.body.getReader === void 0) return a;
                let l = tn[e], c = a.body.getReader(), h = a.headers.get("Content-Length"), u = h ? parseInt(h) : 0, d = u !== 0, f = 0, m = new ReadableStream({
                    start (x) {
                        v();
                        function v() {
                            c.read().then(({ done: g , value: p  })=>{
                                if (g) x.close();
                                else {
                                    f += p.byteLength;
                                    let _ = new ProgressEvent("progress", {
                                        lengthComputable: d,
                                        loaded: f,
                                        total: u
                                    });
                                    for(let y = 0, b = l.length; y < b; y++){
                                        let A = l[y];
                                        A.onProgress && A.onProgress(_);
                                    }
                                    x.enqueue(p), v();
                                }
                            });
                        }
                    }
                });
                return new Response(m);
            } else throw Error(`fetch for "${a.url}" responded with ${a.status}: ${a.statusText}`);
        }).then((a)=>{
            switch(this.responseType){
                case "arraybuffer":
                    return a.arrayBuffer();
                case "blob":
                    return a.blob();
                case "document":
                    return a.text().then((l)=>new DOMParser().parseFromString(l, this.mimeType));
                case "json":
                    return a.json();
                default:
                    return a.text();
            }
        }).then((a)=>{
            Ni.add(e, a);
            let l = tn[e];
            delete tn[e];
            for(let c = 0, h = l.length; c < h; c++){
                let u = l[c];
                u.onLoad && u.onLoad(a);
            }
        }).catch((a)=>{
            let l = tn[e];
            if (l === void 0) throw this.manager.itemError(e), a;
            delete tn[e];
            for(let c = 0, h = l.length; c < h; c++){
                let u = l[c];
                u.onError && u.onError(a);
            }
            this.manager.itemError(e);
        }).finally(()=>{
            this.manager.itemEnd(e);
        }), this.manager.itemStart(e);
    }
    setResponseType(e) {
        return this.responseType = e, this;
    }
    setMimeType(e) {
        return this.mimeType = e, this;
    }
}, cy = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, o = new Yt(this.manager);
        o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function(a) {
            try {
                t(r.parse(JSON.parse(a)));
            } catch (l) {
                i ? i(l) : console.error(l), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = [];
        for(let n = 0; n < e.length; n++){
            let i = Lr.parse(e[n]);
            t.push(i);
        }
        return t;
    }
}, hy = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, o = [], a = new va, l = new Yt(this.manager);
        l.setPath(this.path), l.setResponseType("arraybuffer"), l.setRequestHeader(this.requestHeader), l.setWithCredentials(r.withCredentials);
        let c = 0;
        function h(u) {
            l.load(e[u], function(d) {
                let f = r.parse(d, !0);
                o[u] = {
                    width: f.width,
                    height: f.height,
                    format: f.format,
                    mipmaps: f.mipmaps
                }, c += 1, c === 6 && (f.mipmapCount === 1 && (a.minFilter = tt), a.image = o, a.format = f.format, a.needsUpdate = !0, t && t(a));
            }, n, i);
        }
        if (Array.isArray(e)) for(let u = 0, d = e.length; u < d; ++u)h(u);
        else l.load(e, function(u) {
            let d = r.parse(u, !0);
            if (d.isCubemap) {
                let f = d.mipmaps.length / d.mipmapCount;
                for(let m = 0; m < f; m++){
                    o[m] = {
                        mipmaps: []
                    };
                    for(let x = 0; x < d.mipmapCount; x++)o[m].mipmaps.push(d.mipmaps[m * d.mipmapCount + x]), o[m].format = d.format, o[m].width = d.width, o[m].height = d.height;
                }
                a.image = o;
            } else a.image.width = d.width, a.image.height = d.height, a.mipmaps = d.mipmaps;
            d.mipmapCount === 1 && (a.minFilter = tt), a.format = d.format, a.needsUpdate = !0, t && t(a);
        }, n, i);
        return a;
    }
}, Rr = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = this, o = Ni.get(e);
        if (o !== void 0) return r.manager.itemStart(e), setTimeout(function() {
            t && t(o), r.manager.itemEnd(e);
        }, 0), o;
        let a = qs("img");
        function l() {
            h(), Ni.add(e, this), t && t(this), r.manager.itemEnd(e);
        }
        function c(u) {
            h(), i && i(u), r.manager.itemError(e), r.manager.itemEnd(e);
        }
        function h() {
            a.removeEventListener("load", l, !1), a.removeEventListener("error", c, !1);
        }
        return a.addEventListener("load", l, !1), a.addEventListener("error", c, !1), e.substr(0, 5) !== "data:" && this.crossOrigin !== void 0 && (a.crossOrigin = this.crossOrigin), r.manager.itemStart(e), a.src = e, a;
    }
}, Fh = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = new ki, o = new Rr(this.manager);
        o.setCrossOrigin(this.crossOrigin), o.setPath(this.path);
        let a = 0;
        function l(c) {
            o.load(e[c], function(h) {
                r.images[c] = h, a++, a === 6 && (r.needsUpdate = !0, t && t(r));
            }, void 0, i);
        }
        for(let c = 0; c < e.length; ++c)l(c);
        return r;
    }
}, Nh = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, o = new qn, a = new Yt(this.manager);
        return a.setResponseType("arraybuffer"), a.setRequestHeader(this.requestHeader), a.setPath(this.path), a.setWithCredentials(r.withCredentials), a.load(e, function(l) {
            let c = r.parse(l);
            !c || (c.image !== void 0 ? o.image = c.image : c.data !== void 0 && (o.image.width = c.width, o.image.height = c.height, o.image.data = c.data), o.wrapS = c.wrapS !== void 0 ? c.wrapS : vt, o.wrapT = c.wrapT !== void 0 ? c.wrapT : vt, o.magFilter = c.magFilter !== void 0 ? c.magFilter : tt, o.minFilter = c.minFilter !== void 0 ? c.minFilter : tt, o.anisotropy = c.anisotropy !== void 0 ? c.anisotropy : 1, c.encoding !== void 0 && (o.encoding = c.encoding), c.flipY !== void 0 && (o.flipY = c.flipY), c.format !== void 0 && (o.format = c.format), c.type !== void 0 && (o.type = c.type), c.mipmaps !== void 0 && (o.mipmaps = c.mipmaps, o.minFilter = Ui), c.mipmapCount === 1 && (o.minFilter = tt), c.generateMipmaps !== void 0 && (o.generateMipmaps = c.generateMipmaps), o.needsUpdate = !0, t && t(o, c));
        }, n, i), o;
    }
}, Bh = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = new ot, o = new Rr(this.manager);
        return o.setCrossOrigin(this.crossOrigin), o.setPath(this.path), o.load(e, function(a) {
            r.image = a, r.needsUpdate = !0, t !== void 0 && t(r);
        }, n, i), r;
    }
}, Bt = class extends Ne {
    constructor(e, t = 1){
        super();
        this.type = "Light", this.color = new ae(e), this.intensity = t;
    }
    dispose() {}
    copy(e) {
        return super.copy(e), this.color.copy(e.color), this.intensity = e.intensity, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
    }
};
Bt.prototype.isLight = !0;
var Ua = class extends Bt {
    constructor(e, t, n){
        super(e, n);
        this.type = "HemisphereLight", this.position.copy(Ne.DefaultUp), this.updateMatrix(), this.groundColor = new ae(t);
    }
    copy(e) {
        return Bt.prototype.copy.call(this, e), this.groundColor.copy(e.groundColor), this;
    }
};
Ua.prototype.isHemisphereLight = !0;
var _c = new pe, Mc = new M, bc = new M, mo = class {
    constructor(e){
        this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new X(512, 512), this.map = null, this.mapPass = null, this.matrix = new pe, this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Dr, this._frameExtents = new X(1, 1), this._viewportCount = 1, this._viewports = [
            new Ve(0, 0, 1, 1)
        ];
    }
    getViewportCount() {
        return this._viewportCount;
    }
    getFrustum() {
        return this._frustum;
    }
    updateMatrices(e) {
        let t = this.camera, n = this.matrix;
        Mc.setFromMatrixPosition(e.matrixWorld), t.position.copy(Mc), bc.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(bc), t.updateMatrixWorld(), _c.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(_c), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(t.projectionMatrix), n.multiply(t.matrixWorldInverse);
    }
    getViewport(e) {
        return this._viewports[e];
    }
    getFrameExtents() {
        return this._frameExtents;
    }
    dispose() {
        this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
    }
    copy(e) {
        return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        let e = {};
        return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
    }
}, Oa = class extends mo {
    constructor(){
        super(new ut(50, 1, .5, 500));
        this.focus = 1;
    }
    updateMatrices(e) {
        let t = this.camera, n = dr * 2 * e.angle * this.focus, i = this.mapSize.width / this.mapSize.height, r = e.distance || t.far;
        (n !== t.fov || i !== t.aspect || r !== t.far) && (t.fov = n, t.aspect = i, t.far = r, t.updateProjectionMatrix()), super.updateMatrices(e);
    }
    copy(e) {
        return super.copy(e), this.focus = e.focus, this;
    }
};
Oa.prototype.isSpotLightShadow = !0;
var Ha = class extends Bt {
    constructor(e, t, n = 0, i = Math.PI / 3, r = 0, o = 1){
        super(e, t);
        this.type = "SpotLight", this.position.copy(Ne.DefaultUp), this.updateMatrix(), this.target = new Ne, this.distance = n, this.angle = i, this.penumbra = r, this.decay = o, this.shadow = new Oa;
    }
    get power() {
        return this.intensity * Math.PI;
    }
    set power(e) {
        this.intensity = e / Math.PI;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e) {
        return super.copy(e), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
};
Ha.prototype.isSpotLight = !0;
var wc = new pe, nr = new M, jo = new M, ka = class extends mo {
    constructor(){
        super(new ut(90, 1, .5, 500));
        this._frameExtents = new X(4, 2), this._viewportCount = 6, this._viewports = [
            new Ve(2, 1, 1, 1),
            new Ve(0, 1, 1, 1),
            new Ve(3, 1, 1, 1),
            new Ve(1, 1, 1, 1),
            new Ve(3, 0, 1, 1),
            new Ve(1, 0, 1, 1)
        ], this._cubeDirections = [
            new M(1, 0, 0),
            new M(-1, 0, 0),
            new M(0, 0, 1),
            new M(0, 0, -1),
            new M(0, 1, 0),
            new M(0, -1, 0)
        ], this._cubeUps = [
            new M(0, 1, 0),
            new M(0, 1, 0),
            new M(0, 1, 0),
            new M(0, 1, 0),
            new M(0, 0, 1),
            new M(0, 0, -1)
        ];
    }
    updateMatrices(e, t = 0) {
        let n = this.camera, i = this.matrix, r = e.distance || n.far;
        r !== n.far && (n.far = r, n.updateProjectionMatrix()), nr.setFromMatrixPosition(e.matrixWorld), n.position.copy(nr), jo.copy(n.position), jo.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(jo), n.updateMatrixWorld(), i.makeTranslation(-nr.x, -nr.y, -nr.z), wc.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(wc);
    }
};
ka.prototype.isPointLightShadow = !0;
var Ga = class extends Bt {
    constructor(e, t, n = 0, i = 1){
        super(e, t);
        this.type = "PointLight", this.distance = n, this.decay = i, this.shadow = new ka;
    }
    get power() {
        return this.intensity * 4 * Math.PI;
    }
    set power(e) {
        this.intensity = e / (4 * Math.PI);
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e) {
        return super.copy(e), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
    }
};
Ga.prototype.isPointLight = !0;
var Va = class extends mo {
    constructor(){
        super(new Fr(-5, 5, 5, -5, .5, 500));
    }
};
Va.prototype.isDirectionalLightShadow = !0;
var Wa = class extends Bt {
    constructor(e, t){
        super(e, t);
        this.type = "DirectionalLight", this.position.copy(Ne.DefaultUp), this.updateMatrix(), this.target = new Ne, this.shadow = new Va;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(e) {
        return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
    }
};
Wa.prototype.isDirectionalLight = !0;
var qa = class extends Bt {
    constructor(e, t){
        super(e, t);
        this.type = "AmbientLight";
    }
};
qa.prototype.isAmbientLight = !0;
var Xa = class extends Bt {
    constructor(e, t, n = 10, i = 10){
        super(e, t);
        this.type = "RectAreaLight", this.width = n, this.height = i;
    }
    get power() {
        return this.intensity * this.width * this.height * Math.PI;
    }
    set power(e) {
        this.intensity = e / (this.width * this.height * Math.PI);
    }
    copy(e) {
        return super.copy(e), this.width = e.width, this.height = e.height, this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.width = this.width, t.object.height = this.height, t;
    }
};
Xa.prototype.isRectAreaLight = !0;
var Ja = class {
    constructor(){
        this.coefficients = [];
        for(let e = 0; e < 9; e++)this.coefficients.push(new M);
    }
    set(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].copy(e[t]);
        return this;
    }
    zero() {
        for(let e = 0; e < 9; e++)this.coefficients[e].set(0, 0, 0);
        return this;
    }
    getAt(e, t) {
        let n = e.x, i = e.y, r = e.z, o = this.coefficients;
        return t.copy(o[0]).multiplyScalar(.282095), t.addScaledVector(o[1], .488603 * i), t.addScaledVector(o[2], .488603 * r), t.addScaledVector(o[3], .488603 * n), t.addScaledVector(o[4], 1.092548 * (n * i)), t.addScaledVector(o[5], 1.092548 * (i * r)), t.addScaledVector(o[6], .315392 * (3 * r * r - 1)), t.addScaledVector(o[7], 1.092548 * (n * r)), t.addScaledVector(o[8], .546274 * (n * n - i * i)), t;
    }
    getIrradianceAt(e, t) {
        let n = e.x, i = e.y, r = e.z, o = this.coefficients;
        return t.copy(o[0]).multiplyScalar(.886227), t.addScaledVector(o[1], 2 * .511664 * i), t.addScaledVector(o[2], 2 * .511664 * r), t.addScaledVector(o[3], 2 * .511664 * n), t.addScaledVector(o[4], 2 * .429043 * n * i), t.addScaledVector(o[5], 2 * .429043 * i * r), t.addScaledVector(o[6], .743125 * r * r - .247708), t.addScaledVector(o[7], 2 * .429043 * n * r), t.addScaledVector(o[8], .429043 * (n * n - i * i)), t;
    }
    add(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].add(e.coefficients[t]);
        return this;
    }
    addScaledSH(e, t) {
        for(let n = 0; n < 9; n++)this.coefficients[n].addScaledVector(e.coefficients[n], t);
        return this;
    }
    scale(e) {
        for(let t = 0; t < 9; t++)this.coefficients[t].multiplyScalar(e);
        return this;
    }
    lerp(e, t) {
        for(let n = 0; n < 9; n++)this.coefficients[n].lerp(e.coefficients[n], t);
        return this;
    }
    equals(e) {
        for(let t = 0; t < 9; t++)if (!this.coefficients[t].equals(e.coefficients[t])) return !1;
        return !0;
    }
    copy(e) {
        return this.set(e.coefficients);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(e, t = 0) {
        let n = this.coefficients;
        for(let i = 0; i < 9; i++)n[i].fromArray(e, t + i * 3);
        return this;
    }
    toArray(e = [], t = 0) {
        let n = this.coefficients;
        for(let i = 0; i < 9; i++)n[i].toArray(e, t + i * 3);
        return e;
    }
    static getBasisAt(e, t) {
        let n = e.x, i = e.y, r = e.z;
        t[0] = .282095, t[1] = .488603 * i, t[2] = .488603 * r, t[3] = .488603 * n, t[4] = 1.092548 * n * i, t[5] = 1.092548 * i * r, t[6] = .315392 * (3 * r * r - 1), t[7] = 1.092548 * n * r, t[8] = .546274 * (n * n - i * i);
    }
};
Ja.prototype.isSphericalHarmonics3 = !0;
var Hr = class extends Bt {
    constructor(e = new Ja, t = 1){
        super(void 0, t);
        this.sh = e;
    }
    copy(e) {
        return super.copy(e), this.sh.copy(e.sh), this;
    }
    fromJSON(e) {
        return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.object.sh = this.sh.toArray(), t;
    }
};
Hr.prototype.isLightProbe = !0;
var zh = class extends bt {
    constructor(e){
        super(e);
        this.textures = {};
    }
    load(e, t, n, i) {
        let r = this, o = new Yt(r.manager);
        o.setPath(r.path), o.setRequestHeader(r.requestHeader), o.setWithCredentials(r.withCredentials), o.load(e, function(a) {
            try {
                t(r.parse(JSON.parse(a)));
            } catch (l) {
                i ? i(l) : console.error(l), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = this.textures;
        function n(r) {
            return t[r] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", r), t[r];
        }
        let i = new sy[e.type];
        if (e.uuid !== void 0 && (i.uuid = e.uuid), e.name !== void 0 && (i.name = e.name), e.color !== void 0 && i.color !== void 0 && i.color.setHex(e.color), e.roughness !== void 0 && (i.roughness = e.roughness), e.metalness !== void 0 && (i.metalness = e.metalness), e.sheen !== void 0 && (i.sheen = e.sheen), e.sheenColor !== void 0 && (i.sheenColor = new ae().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (i.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && i.emissive !== void 0 && i.emissive.setHex(e.emissive), e.specular !== void 0 && i.specular !== void 0 && i.specular.setHex(e.specular), e.specularIntensity !== void 0 && (i.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && i.specularColor !== void 0 && i.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (i.shininess = e.shininess), e.clearcoat !== void 0 && (i.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = e.clearcoatRoughness), e.transmission !== void 0 && (i.transmission = e.transmission), e.thickness !== void 0 && (i.thickness = e.thickness), e.attenuationDistance !== void 0 && (i.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && i.attenuationColor !== void 0 && i.attenuationColor.setHex(e.attenuationColor), e.fog !== void 0 && (i.fog = e.fog), e.flatShading !== void 0 && (i.flatShading = e.flatShading), e.blending !== void 0 && (i.blending = e.blending), e.combine !== void 0 && (i.combine = e.combine), e.side !== void 0 && (i.side = e.side), e.shadowSide !== void 0 && (i.shadowSide = e.shadowSide), e.opacity !== void 0 && (i.opacity = e.opacity), e.format !== void 0 && (i.format = e.format), e.transparent !== void 0 && (i.transparent = e.transparent), e.alphaTest !== void 0 && (i.alphaTest = e.alphaTest), e.depthTest !== void 0 && (i.depthTest = e.depthTest), e.depthWrite !== void 0 && (i.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (i.colorWrite = e.colorWrite), e.stencilWrite !== void 0 && (i.stencilWrite = e.stencilWrite), e.stencilWriteMask !== void 0 && (i.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (i.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (i.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (i.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (i.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (i.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (i.stencilZPass = e.stencilZPass), e.wireframe !== void 0 && (i.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (i.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (i.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (i.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (i.rotation = e.rotation), e.linewidth !== 1 && (i.linewidth = e.linewidth), e.dashSize !== void 0 && (i.dashSize = e.dashSize), e.gapSize !== void 0 && (i.gapSize = e.gapSize), e.scale !== void 0 && (i.scale = e.scale), e.polygonOffset !== void 0 && (i.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (i.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (i.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (i.dithering = e.dithering), e.alphaToCoverage !== void 0 && (i.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (i.premultipliedAlpha = e.premultipliedAlpha), e.visible !== void 0 && (i.visible = e.visible), e.toneMapped !== void 0 && (i.toneMapped = e.toneMapped), e.userData !== void 0 && (i.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? i.vertexColors = e.vertexColors > 0 : i.vertexColors = e.vertexColors), e.uniforms !== void 0) for(let r in e.uniforms){
            let o = e.uniforms[r];
            switch(i.uniforms[r] = {}, o.type){
                case "t":
                    i.uniforms[r].value = n(o.value);
                    break;
                case "c":
                    i.uniforms[r].value = new ae().setHex(o.value);
                    break;
                case "v2":
                    i.uniforms[r].value = new X().fromArray(o.value);
                    break;
                case "v3":
                    i.uniforms[r].value = new M().fromArray(o.value);
                    break;
                case "v4":
                    i.uniforms[r].value = new Ve().fromArray(o.value);
                    break;
                case "m3":
                    i.uniforms[r].value = new lt().fromArray(o.value);
                    break;
                case "m4":
                    i.uniforms[r].value = new pe().fromArray(o.value);
                    break;
                default:
                    i.uniforms[r].value = o.value;
            }
        }
        if (e.defines !== void 0 && (i.defines = e.defines), e.vertexShader !== void 0 && (i.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (i.fragmentShader = e.fragmentShader), e.extensions !== void 0) for(let r in e.extensions)i.extensions[r] = e.extensions[r];
        if (e.shading !== void 0 && (i.flatShading = e.shading === 1), e.size !== void 0 && (i.size = e.size), e.sizeAttenuation !== void 0 && (i.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (i.map = n(e.map)), e.matcap !== void 0 && (i.matcap = n(e.matcap)), e.alphaMap !== void 0 && (i.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (i.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (i.bumpScale = e.bumpScale), e.normalMap !== void 0 && (i.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (i.normalMapType = e.normalMapType), e.normalScale !== void 0) {
            let r = e.normalScale;
            Array.isArray(r) === !1 && (r = [
                r,
                r
            ]), i.normalScale = new X().fromArray(r);
        }
        return e.displacementMap !== void 0 && (i.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (i.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (i.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (i.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (i.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (i.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (i.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (i.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (i.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (i.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (i.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (i.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (i.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (i.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (i.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (i.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (i.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (i.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (i.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (i.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (i.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (i.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (i.clearcoatNormalScale = new X().fromArray(e.clearcoatNormalScale)), e.transmissionMap !== void 0 && (i.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (i.thicknessMap = n(e.thicknessMap)), e.sheenColorMap !== void 0 && (i.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (i.sheenRoughnessMap = n(e.sheenRoughnessMap)), i;
    }
    setTextures(e) {
        return this.textures = e, this;
    }
}, Gs = class {
    static decodeText(e) {
        if (typeof TextDecoder < "u") return new TextDecoder().decode(e);
        let t = "";
        for(let n = 0, i = e.length; n < i; n++)t += String.fromCharCode(e[n]);
        try {
            return decodeURIComponent(escape(t));
        } catch  {
            return t;
        }
    }
    static extractUrlBase(e) {
        let t = e.lastIndexOf("/");
        return t === -1 ? "./" : e.substr(0, t + 1);
    }
    static resolveURL(e, t) {
        return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
    }
}, Ya = class extends _e {
    constructor(){
        super();
        this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
    }
    copy(e) {
        return super.copy(e), this.instanceCount = e.instanceCount, this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        let e = super.toJSON(this);
        return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
    }
};
Ya.prototype.isInstancedBufferGeometry = !0;
var Uh = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, o = new Yt(r.manager);
        o.setPath(r.path), o.setRequestHeader(r.requestHeader), o.setWithCredentials(r.withCredentials), o.load(e, function(a) {
            try {
                t(r.parse(JSON.parse(a)));
            } catch (l) {
                i ? i(l) : console.error(l), r.manager.itemError(e);
            }
        }, n, i);
    }
    parse(e) {
        let t = {}, n = {};
        function i(f, m) {
            if (t[m] !== void 0) return t[m];
            let v = f.interleavedBuffers[m], g = r(f, v.buffer), p = wi(v.type, g), _ = new $n(p, v.stride);
            return _.uuid = v.uuid, t[m] = _, _;
        }
        function r(f, m) {
            if (n[m] !== void 0) return n[m];
            let v = f.arrayBuffers[m], g = new Uint32Array(v).buffer;
            return n[m] = g, g;
        }
        let o = e.isInstancedBufferGeometry ? new Ya : new _e, a = e.data.index;
        if (a !== void 0) {
            let f = wi(a.type, a.array);
            o.setIndex(new Ue(f, 1));
        }
        let l = e.data.attributes;
        for(let f in l){
            let m = l[f], x;
            if (m.isInterleavedBufferAttribute) {
                let v = i(e.data, m.data);
                x = new Sn(v, m.itemSize, m.offset, m.normalized);
            } else {
                let v = wi(m.type, m.array), g = m.isInstancedBufferAttribute ? Xn : Ue;
                x = new g(v, m.itemSize, m.normalized);
            }
            m.name !== void 0 && (x.name = m.name), m.usage !== void 0 && x.setUsage(m.usage), m.updateRange !== void 0 && (x.updateRange.offset = m.updateRange.offset, x.updateRange.count = m.updateRange.count), o.setAttribute(f, x);
        }
        let c = e.data.morphAttributes;
        if (c) for(let f in c){
            let m = c[f], x = [];
            for(let v = 0, g = m.length; v < g; v++){
                let p = m[v], _;
                if (p.isInterleavedBufferAttribute) {
                    let y = i(e.data, p.data);
                    _ = new Sn(y, p.itemSize, p.offset, p.normalized);
                } else {
                    let y = wi(p.type, p.array);
                    _ = new Ue(y, p.itemSize, p.normalized);
                }
                p.name !== void 0 && (_.name = p.name), x.push(_);
            }
            o.morphAttributes[f] = x;
        }
        e.data.morphTargetsRelative && (o.morphTargetsRelative = !0);
        let u = e.data.groups || e.data.drawcalls || e.data.offsets;
        if (u !== void 0) for(let f = 0, m = u.length; f !== m; ++f){
            let x = u[f];
            o.addGroup(x.start, x.count, x.materialIndex);
        }
        let d = e.data.boundingSphere;
        if (d !== void 0) {
            let f = new M;
            d.center !== void 0 && f.fromArray(d.center), o.boundingSphere = new An(f, d.radius);
        }
        return e.name && (o.name = e.name), e.userData && (o.userData = e.userData), o;
    }
}, uy = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, o = this.path === "" ? Gs.extractUrlBase(e) : this.path;
        this.resourcePath = this.resourcePath || o;
        let a = new Yt(this.manager);
        a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(l) {
            let c = null;
            try {
                c = JSON.parse(l);
            } catch (u) {
                i !== void 0 && i(u), console.error("THREE:ObjectLoader: Can't parse " + e + ".", u.message);
                return;
            }
            let h = c.metadata;
            if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry") {
                console.error("THREE.ObjectLoader: Can't load " + e);
                return;
            }
            r.parse(c, t);
        }, n, i);
    }
    async loadAsync(e, t) {
        let n = this, i = this.path === "" ? Gs.extractUrlBase(e) : this.path;
        this.resourcePath = this.resourcePath || i;
        let r = new Yt(this.manager);
        r.setPath(this.path), r.setRequestHeader(this.requestHeader), r.setWithCredentials(this.withCredentials);
        let o = await r.loadAsync(e, t), a = JSON.parse(o), l = a.metadata;
        if (l === void 0 || l.type === void 0 || l.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + e);
        return await n.parseAsync(a);
    }
    parse(e, t) {
        let n = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, i), o = this.parseImages(e.images, function() {
            t !== void 0 && t(c);
        }), a = this.parseTextures(e.textures, o), l = this.parseMaterials(e.materials, a), c = this.parseObject(e.object, r, l, a, n), h = this.parseSkeletons(e.skeletons, c);
        if (this.bindSkeletons(c, h), t !== void 0) {
            let u = !1;
            for(let d in o)if (o[d] instanceof HTMLImageElement) {
                u = !0;
                break;
            }
            u === !1 && t(c);
        }
        return c;
    }
    async parseAsync(e) {
        let t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), i = this.parseGeometries(e.geometries, n), r = await this.parseImagesAsync(e.images), o = this.parseTextures(e.textures, r), a = this.parseMaterials(e.materials, o), l = this.parseObject(e.object, i, a, o, t), c = this.parseSkeletons(e.skeletons, l);
        return this.bindSkeletons(l, c), l;
    }
    parseShapes(e) {
        let t = {};
        if (e !== void 0) for(let n = 0, i = e.length; n < i; n++){
            let r = new Xt().fromJSON(e[n]);
            t[r.uuid] = r;
        }
        return t;
    }
    parseSkeletons(e, t) {
        let n = {}, i = {};
        if (t.traverse(function(r) {
            r.isBone && (i[r.uuid] = r);
        }), e !== void 0) for(let r = 0, o = e.length; r < o; r++){
            let a = new ao().fromJSON(e[r], i);
            n[a.uuid] = a;
        }
        return n;
    }
    parseGeometries(e, t) {
        let n = {};
        if (e !== void 0) {
            let i = new Uh;
            for(let r = 0, o = e.length; r < o; r++){
                let a, l = e[r];
                switch(l.type){
                    case "BufferGeometry":
                    case "InstancedBufferGeometry":
                        a = i.parse(l);
                        break;
                    case "Geometry":
                        console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");
                        break;
                    default:
                        l.type in vc ? a = vc[l.type].fromJSON(l, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${l.type}"`);
                }
                a.uuid = l.uuid, l.name !== void 0 && (a.name = l.name), a.isBufferGeometry === !0 && l.userData !== void 0 && (a.userData = l.userData), n[l.uuid] = a;
            }
        }
        return n;
    }
    parseMaterials(e, t) {
        let n = {}, i = {};
        if (e !== void 0) {
            let r = new zh;
            r.setTextures(t);
            for(let o = 0, a = e.length; o < a; o++){
                let l = e[o];
                if (l.type === "MultiMaterial") {
                    let c = [];
                    for(let h = 0; h < l.materials.length; h++){
                        let u = l.materials[h];
                        n[u.uuid] === void 0 && (n[u.uuid] = r.parse(u)), c.push(n[u.uuid]);
                    }
                    i[l.uuid] = c;
                } else n[l.uuid] === void 0 && (n[l.uuid] = r.parse(l)), i[l.uuid] = n[l.uuid];
            }
        }
        return i;
    }
    parseAnimations(e) {
        let t = {};
        if (e !== void 0) for(let n = 0; n < e.length; n++){
            let i = e[n], r = Lr.parse(i);
            t[r.uuid] = r;
        }
        return t;
    }
    parseImages(e, t) {
        let n = this, i = {}, r;
        function o(l) {
            return n.manager.itemStart(l), r.load(l, function() {
                n.manager.itemEnd(l);
            }, void 0, function() {
                n.manager.itemError(l), n.manager.itemEnd(l);
            });
        }
        function a(l) {
            if (typeof l == "string") {
                let c = l, h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c) ? c : n.resourcePath + c;
                return o(h);
            } else return l.data ? {
                data: wi(l.type, l.data),
                width: l.width,
                height: l.height
            } : null;
        }
        if (e !== void 0 && e.length > 0) {
            let l = new za(t);
            r = new Rr(l), r.setCrossOrigin(this.crossOrigin);
            for(let c = 0, h = e.length; c < h; c++){
                let u = e[c], d = u.url;
                if (Array.isArray(d)) {
                    i[u.uuid] = [];
                    for(let f = 0, m = d.length; f < m; f++){
                        let x = d[f], v = a(x);
                        v !== null && (v instanceof HTMLImageElement ? i[u.uuid].push(v) : i[u.uuid].push(new qn(v.data, v.width, v.height)));
                    }
                } else {
                    let f = a(u.url);
                    f !== null && (i[u.uuid] = f);
                }
            }
        }
        return i;
    }
    async parseImagesAsync(e) {
        let t = this, n = {}, i;
        async function r(o) {
            if (typeof o == "string") {
                let a = o, l = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(a) ? a : t.resourcePath + a;
                return await i.loadAsync(l);
            } else return o.data ? {
                data: wi(o.type, o.data),
                width: o.width,
                height: o.height
            } : null;
        }
        if (e !== void 0 && e.length > 0) {
            i = new Rr(this.manager), i.setCrossOrigin(this.crossOrigin);
            for(let o = 0, a = e.length; o < a; o++){
                let l = e[o], c = l.url;
                if (Array.isArray(c)) {
                    n[l.uuid] = [];
                    for(let h = 0, u = c.length; h < u; h++){
                        let d = c[h], f = await r(d);
                        f !== null && (f instanceof HTMLImageElement ? n[l.uuid].push(f) : n[l.uuid].push(new qn(f.data, f.width, f.height)));
                    }
                } else {
                    let h = await r(l.url);
                    h !== null && (n[l.uuid] = h);
                }
            }
        }
        return n;
    }
    parseTextures(e, t) {
        function n(r, o) {
            return typeof r == "number" ? r : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", r), o[r]);
        }
        let i = {};
        if (e !== void 0) for(let r = 0, o = e.length; r < o; r++){
            let a = e[r];
            a.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', a.uuid), t[a.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", a.image);
            let l, c = t[a.image];
            Array.isArray(c) ? (l = new ki(c), c.length === 6 && (l.needsUpdate = !0)) : (c && c.data ? l = new qn(c.data, c.width, c.height) : l = new ot(c), c && (l.needsUpdate = !0)), l.uuid = a.uuid, a.name !== void 0 && (l.name = a.name), a.mapping !== void 0 && (l.mapping = n(a.mapping, dy)), a.offset !== void 0 && l.offset.fromArray(a.offset), a.repeat !== void 0 && l.repeat.fromArray(a.repeat), a.center !== void 0 && l.center.fromArray(a.center), a.rotation !== void 0 && (l.rotation = a.rotation), a.wrap !== void 0 && (l.wrapS = n(a.wrap[0], Sc), l.wrapT = n(a.wrap[1], Sc)), a.format !== void 0 && (l.format = a.format), a.type !== void 0 && (l.type = a.type), a.encoding !== void 0 && (l.encoding = a.encoding), a.minFilter !== void 0 && (l.minFilter = n(a.minFilter, Tc)), a.magFilter !== void 0 && (l.magFilter = n(a.magFilter, Tc)), a.anisotropy !== void 0 && (l.anisotropy = a.anisotropy), a.flipY !== void 0 && (l.flipY = a.flipY), a.premultiplyAlpha !== void 0 && (l.premultiplyAlpha = a.premultiplyAlpha), a.unpackAlignment !== void 0 && (l.unpackAlignment = a.unpackAlignment), a.userData !== void 0 && (l.userData = a.userData), i[a.uuid] = l;
        }
        return i;
    }
    parseObject(e, t, n, i, r) {
        let o;
        function a(d) {
            return t[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", d), t[d];
        }
        function l(d) {
            if (d !== void 0) {
                if (Array.isArray(d)) {
                    let f = [];
                    for(let m = 0, x = d.length; m < x; m++){
                        let v = d[m];
                        n[v] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", v), f.push(n[v]);
                    }
                    return f;
                }
                return n[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", d), n[d];
            }
        }
        function c(d) {
            return i[d] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", d), i[d];
        }
        let h, u;
        switch(e.type){
            case "Scene":
                o = new no, e.background !== void 0 && (Number.isInteger(e.background) ? o.background = new ae(e.background) : o.background = c(e.background)), e.environment !== void 0 && (o.environment = c(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? o.fog = new Br(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (o.fog = new Nr(e.fog.color, e.fog.density)));
                break;
            case "PerspectiveCamera":
                o = new ut(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (o.focus = e.focus), e.zoom !== void 0 && (o.zoom = e.zoom), e.filmGauge !== void 0 && (o.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (o.filmOffset = e.filmOffset), e.view !== void 0 && (o.view = Object.assign({}, e.view));
                break;
            case "OrthographicCamera":
                o = new Fr(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (o.zoom = e.zoom), e.view !== void 0 && (o.view = Object.assign({}, e.view));
                break;
            case "AmbientLight":
                o = new qa(e.color, e.intensity);
                break;
            case "DirectionalLight":
                o = new Wa(e.color, e.intensity);
                break;
            case "PointLight":
                o = new Ga(e.color, e.intensity, e.distance, e.decay);
                break;
            case "RectAreaLight":
                o = new Xa(e.color, e.intensity, e.width, e.height);
                break;
            case "SpotLight":
                o = new Ha(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
                break;
            case "HemisphereLight":
                o = new Ua(e.color, e.groundColor, e.intensity);
                break;
            case "LightProbe":
                o = new Hr().fromJSON(e);
                break;
            case "SkinnedMesh":
                h = a(e.geometry), u = l(e.material), o = new so(h, u), e.bindMode !== void 0 && (o.bindMode = e.bindMode), e.bindMatrix !== void 0 && o.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (o.skeleton = e.skeleton);
                break;
            case "Mesh":
                h = a(e.geometry), u = l(e.material), o = new st(h, u);
                break;
            case "InstancedMesh":
                h = a(e.geometry), u = l(e.material);
                let d = e.count, f = e.instanceMatrix, m = e.instanceColor;
                o = new xa(h, u, d), o.instanceMatrix = new Xn(new Float32Array(f.array), 16), m !== void 0 && (o.instanceColor = new Xn(new Float32Array(m.array), m.itemSize));
                break;
            case "LOD":
                o = new bh;
                break;
            case "Line":
                o = new on(a(e.geometry), l(e.material));
                break;
            case "LineLoop":
                o = new ya(a(e.geometry), l(e.material));
                break;
            case "LineSegments":
                o = new wt(a(e.geometry), l(e.material));
                break;
            case "PointCloud":
            case "Points":
                o = new zr(a(e.geometry), l(e.material));
                break;
            case "Sprite":
                o = new ro(l(e.material));
                break;
            case "Group":
                o = new Hn;
                break;
            case "Bone":
                o = new oo;
                break;
            default:
                o = new Ne;
        }
        if (o.uuid = e.uuid, e.name !== void 0 && (o.name = e.name), e.matrix !== void 0 ? (o.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (o.matrixAutoUpdate = e.matrixAutoUpdate), o.matrixAutoUpdate && o.matrix.decompose(o.position, o.quaternion, o.scale)) : (e.position !== void 0 && o.position.fromArray(e.position), e.rotation !== void 0 && o.rotation.fromArray(e.rotation), e.quaternion !== void 0 && o.quaternion.fromArray(e.quaternion), e.scale !== void 0 && o.scale.fromArray(e.scale)), e.castShadow !== void 0 && (o.castShadow = e.castShadow), e.receiveShadow !== void 0 && (o.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (o.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (o.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (o.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && o.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (o.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (o.visible = e.visible), e.frustumCulled !== void 0 && (o.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (o.renderOrder = e.renderOrder), e.userData !== void 0 && (o.userData = e.userData), e.layers !== void 0 && (o.layers.mask = e.layers), e.children !== void 0) {
            let d = e.children;
            for(let f = 0; f < d.length; f++)o.add(this.parseObject(d[f], t, n, i, r));
        }
        if (e.animations !== void 0) {
            let d = e.animations;
            for(let f = 0; f < d.length; f++){
                let m = d[f];
                o.animations.push(r[m]);
            }
        }
        if (e.type === "LOD") {
            e.autoUpdate !== void 0 && (o.autoUpdate = e.autoUpdate);
            let d = e.levels;
            for(let f = 0; f < d.length; f++){
                let m = d[f], x = o.getObjectByProperty("uuid", m.object);
                x !== void 0 && o.addLevel(x, m.distance);
            }
        }
        return o;
    }
    bindSkeletons(e, t) {
        Object.keys(t).length !== 0 && e.traverse(function(n) {
            if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
                let i = t[n.skeleton];
                i === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(i, n.bindMatrix);
            }
        });
    }
    setTexturePath(e) {
        return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."), this.setResourcePath(e);
    }
}, dy = {
    UVMapping: ha,
    CubeReflectionMapping: Bi,
    CubeRefractionMapping: zi,
    EquirectangularReflectionMapping: Ds,
    EquirectangularRefractionMapping: Fs,
    CubeUVReflectionMapping: Pr,
    CubeUVRefractionMapping: Ws
}, Sc = {
    RepeatWrapping: Ns,
    ClampToEdgeWrapping: vt,
    MirroredRepeatWrapping: Bs
}, Tc = {
    NearestFilter: rt,
    NearestMipmapNearestFilter: ta,
    NearestMipmapLinearFilter: na,
    LinearFilter: tt,
    LinearMipmapNearestFilter: Wc,
    LinearMipmapLinearFilter: Ui
}, Oh = class extends bt {
    constructor(e){
        super(e);
        typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = {
            premultiplyAlpha: "none"
        };
    }
    setOptions(e) {
        return this.options = e, this;
    }
    load(e, t, n, i) {
        e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
        let r = this, o = Ni.get(e);
        if (o !== void 0) return r.manager.itemStart(e), setTimeout(function() {
            t && t(o), r.manager.itemEnd(e);
        }, 0), o;
        let a = {};
        a.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", a.headers = this.requestHeader, fetch(e, a).then(function(l) {
            return l.blob();
        }).then(function(l) {
            return createImageBitmap(l, Object.assign(r.options, {
                colorSpaceConversion: "none"
            }));
        }).then(function(l) {
            Ni.add(e, l), t && t(l), r.manager.itemEnd(e);
        }).catch(function(l) {
            i && i(l), r.manager.itemError(e), r.manager.itemEnd(e);
        }), r.manager.itemStart(e);
    }
};
Oh.prototype.isImageBitmapLoader = !0;
var Ss, Hh = {
    getContext: function() {
        return Ss === void 0 && (Ss = new (window.AudioContext || window.webkitAudioContext)), Ss;
    },
    setContext: function(s) {
        Ss = s;
    }
}, kh = class extends bt {
    constructor(e){
        super(e);
    }
    load(e, t, n, i) {
        let r = this, o = new Yt(this.manager);
        o.setResponseType("arraybuffer"), o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function(a) {
            try {
                let l = a.slice(0);
                Hh.getContext().decodeAudioData(l, function(h) {
                    t(h);
                });
            } catch (l) {
                i ? i(l) : console.error(l), r.manager.itemError(e);
            }
        }, n, i);
    }
}, Gh = class extends Hr {
    constructor(e, t, n = 1){
        super(void 0, n);
        let i = new ae().set(e), r = new ae().set(t), o = new M(i.r, i.g, i.b), a = new M(r.r, r.g, r.b), l = Math.sqrt(Math.PI), c = l * Math.sqrt(.75);
        this.sh.coefficients[0].copy(o).add(a).multiplyScalar(l), this.sh.coefficients[1].copy(o).sub(a).multiplyScalar(c);
    }
};
Gh.prototype.isHemisphereLightProbe = !0;
var Vh = class extends Hr {
    constructor(e, t = 1){
        super(void 0, t);
        let n = new ae().set(e);
        this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
};
Vh.prototype.isAmbientLightProbe = !0;
var Ec = new pe, Ac = new pe, Fn = new pe, fy = class {
    constructor(){
        this.type = "StereoCamera", this.aspect = 1, this.eyeSep = .064, this.cameraL = new ut, this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new ut, this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    update(e) {
        let t = this._cache;
        if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
            t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, Fn.copy(e.projectionMatrix);
            let i = t.eyeSep / 2, r = i * t.near / t.focus, o = t.near * Math.tan(Wn * t.fov * .5) / t.zoom, a, l;
            Ac.elements[12] = -i, Ec.elements[12] = i, a = -o * t.aspect + r, l = o * t.aspect + r, Fn.elements[0] = 2 * t.near / (l - a), Fn.elements[8] = (l + a) / (l - a), this.cameraL.projectionMatrix.copy(Fn), a = -o * t.aspect - r, l = o * t.aspect - r, Fn.elements[0] = 2 * t.near / (l - a), Fn.elements[8] = (l + a) / (l - a), this.cameraR.projectionMatrix.copy(Fn);
        }
        this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Ac), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(Ec);
    }
}, Wh = class {
    constructor(e = !0){
        this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
    }
    start() {
        this.startTime = Cc(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
    }
    stop() {
        this.getElapsedTime(), this.running = !1, this.autoStart = !1;
    }
    getElapsedTime() {
        return this.getDelta(), this.elapsedTime;
    }
    getDelta() {
        let e = 0;
        if (this.autoStart && !this.running) return this.start(), 0;
        if (this.running) {
            let t = Cc();
            e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
        }
        return e;
    }
};
function Cc() {
    return (typeof performance > "u" ? Date : performance).now();
}
var Nn = new M, Lc = new gt, py = new M, Bn = new M, my = class extends Ne {
    constructor(){
        super();
        this.type = "AudioListener", this.context = Hh.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new Wh;
    }
    getInput() {
        return this.gain;
    }
    removeFilter() {
        return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
    }
    getFilter() {
        return this.filter;
    }
    setFilter(e) {
        return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
    }
    getMasterVolume() {
        return this.gain.gain.value;
    }
    setMasterVolume(e) {
        return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this;
    }
    updateMatrixWorld(e) {
        super.updateMatrixWorld(e);
        let t = this.context.listener, n = this.up;
        if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Nn, Lc, py), Bn.set(0, 0, -1).applyQuaternion(Lc), t.positionX) {
            let i = this.context.currentTime + this.timeDelta;
            t.positionX.linearRampToValueAtTime(Nn.x, i), t.positionY.linearRampToValueAtTime(Nn.y, i), t.positionZ.linearRampToValueAtTime(Nn.z, i), t.forwardX.linearRampToValueAtTime(Bn.x, i), t.forwardY.linearRampToValueAtTime(Bn.y, i), t.forwardZ.linearRampToValueAtTime(Bn.z, i), t.upX.linearRampToValueAtTime(n.x, i), t.upY.linearRampToValueAtTime(n.y, i), t.upZ.linearRampToValueAtTime(n.z, i);
        } else t.setPosition(Nn.x, Nn.y, Nn.z), t.setOrientation(Bn.x, Bn.y, Bn.z, n.x, n.y, n.z);
    }
}, Za = class extends Ne {
    constructor(e){
        super();
        this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
    }
    getOutput() {
        return this.gain;
    }
    setNodeSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
    }
    setMediaElementSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
    }
    setMediaStreamSource(e) {
        return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
    }
    setBuffer(e) {
        return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
    }
    play(e = 0) {
        if (this.isPlaying === !0) {
            console.warn("THREE.Audio: Audio is already playing.");
            return;
        }
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        this._startedAt = this.context.currentTime + e;
        let t = this.context.createBufferSource();
        return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
    }
    pause() {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
    }
    stop() {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this._progress = 0, this.source.stop(), this.source.onended = null, this.isPlaying = !1, this;
    }
    connect() {
        if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for(let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].connect(this.filters[e]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        return this._connected = !0, this;
    }
    disconnect() {
        if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for(let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].disconnect(this.filters[e]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
        } else this.source.disconnect(this.getOutput());
        return this._connected = !1, this;
    }
    getFilters() {
        return this.filters;
    }
    setFilters(e) {
        return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
    }
    setDetune(e) {
        if (this.detune = e, this.source.detune !== void 0) return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
    }
    getDetune() {
        return this.detune;
    }
    getFilter() {
        return this.getFilters()[0];
    }
    setFilter(e) {
        return this.setFilters(e ? [
            e
        ] : []);
    }
    setPlaybackRate(e) {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
    }
    getPlaybackRate() {
        return this.playbackRate;
    }
    onEnded() {
        this.isPlaying = !1;
    }
    getLoop() {
        return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
    }
    setLoop(e) {
        if (this.hasPlaybackControl === !1) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
        }
        return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
    }
    setLoopStart(e) {
        return this.loopStart = e, this;
    }
    setLoopEnd(e) {
        return this.loopEnd = e, this;
    }
    getVolume() {
        return this.gain.gain.value;
    }
    setVolume(e) {
        return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this;
    }
}, zn = new M, Rc = new gt, gy = new M, Un = new M, xy = class extends Za {
    constructor(e){
        super(e);
        this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
    }
    getOutput() {
        return this.panner;
    }
    getRefDistance() {
        return this.panner.refDistance;
    }
    setRefDistance(e) {
        return this.panner.refDistance = e, this;
    }
    getRolloffFactor() {
        return this.panner.rolloffFactor;
    }
    setRolloffFactor(e) {
        return this.panner.rolloffFactor = e, this;
    }
    getDistanceModel() {
        return this.panner.distanceModel;
    }
    setDistanceModel(e) {
        return this.panner.distanceModel = e, this;
    }
    getMaxDistance() {
        return this.panner.maxDistance;
    }
    setMaxDistance(e) {
        return this.panner.maxDistance = e, this;
    }
    setDirectionalCone(e, t, n) {
        return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
    }
    updateMatrixWorld(e) {
        if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1) return;
        this.matrixWorld.decompose(zn, Rc, gy), Un.set(0, 0, 1).applyQuaternion(Rc);
        let t = this.panner;
        if (t.positionX) {
            let n = this.context.currentTime + this.listener.timeDelta;
            t.positionX.linearRampToValueAtTime(zn.x, n), t.positionY.linearRampToValueAtTime(zn.y, n), t.positionZ.linearRampToValueAtTime(zn.z, n), t.orientationX.linearRampToValueAtTime(Un.x, n), t.orientationY.linearRampToValueAtTime(Un.y, n), t.orientationZ.linearRampToValueAtTime(Un.z, n);
        } else t.setPosition(zn.x, zn.y, zn.z), t.setOrientation(Un.x, Un.y, Un.z);
    }
}, qh = class {
    constructor(e, t = 2048){
        this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
        return this.analyser.getByteFrequencyData(this.data), this.data;
    }
    getAverageFrequency() {
        let e = 0, t = this.getFrequencyData();
        for(let n = 0; n < t.length; n++)e += t[n];
        return e / t.length;
    }
}, Xh = class {
    constructor(e, t, n){
        this.binding = e, this.valueSize = n;
        let i, r, o;
        switch(t){
            case "quaternion":
                i = this._slerp, r = this._slerpAdditive, o = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
                break;
            case "string":
            case "bool":
                i = this._select, r = this._select, o = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
                break;
            default:
                i = this._lerp, r = this._lerpAdditive, o = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
        }
        this._mixBufferRegion = i, this._mixBufferRegionAdditive = r, this._setIdentity = o, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
    }
    accumulate(e, t) {
        let n = this.buffer, i = this.valueSize, r = e * i + i, o = this.cumulativeWeight;
        if (o === 0) {
            for(let a = 0; a !== i; ++a)n[r + a] = n[a];
            o = t;
        } else {
            o += t;
            let a = t / o;
            this._mixBufferRegion(n, r, 0, a, i);
        }
        this.cumulativeWeight = o;
    }
    accumulateAdditive(e) {
        let t = this.buffer, n = this.valueSize, i = n * this._addIndex;
        this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, i, 0, e, n), this.cumulativeWeightAdditive += e;
    }
    apply(e) {
        let t = this.valueSize, n = this.buffer, i = e * t + t, r = this.cumulativeWeight, o = this.cumulativeWeightAdditive, a = this.binding;
        if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, r < 1) {
            let l = t * this._origIndex;
            this._mixBufferRegion(n, i, l, 1 - r, t);
        }
        o > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t);
        for(let l = t, c = t + t; l !== c; ++l)if (n[l] !== n[l + t]) {
            a.setValue(n, i);
            break;
        }
    }
    saveOriginalState() {
        let e = this.binding, t = this.buffer, n = this.valueSize, i = n * this._origIndex;
        e.getValue(t, i);
        for(let r = n, o = i; r !== o; ++r)t[r] = t[i + r % n];
        this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
    }
    restoreOriginalState() {
        let e = this.valueSize * 3;
        this.binding.setValue(this.buffer, e);
    }
    _setAdditiveIdentityNumeric() {
        let e = this._addIndex * this.valueSize, t = e + this.valueSize;
        for(let n = e; n < t; n++)this.buffer[n] = 0;
    }
    _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
        let e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
        for(let n = 0; n < this.valueSize; n++)this.buffer[t + n] = this.buffer[e + n];
    }
    _select(e, t, n, i, r) {
        if (i >= .5) for(let o = 0; o !== r; ++o)e[t + o] = e[n + o];
    }
    _slerp(e, t, n, i) {
        gt.slerpFlat(e, t, e, t, e, n, i);
    }
    _slerpAdditive(e, t, n, i, r) {
        let o = this._workIndex * r;
        gt.multiplyQuaternionsFlat(e, o, e, t, e, n), gt.slerpFlat(e, t, e, t, e, o, i);
    }
    _lerp(e, t, n, i, r) {
        let o = 1 - i;
        for(let a = 0; a !== r; ++a){
            let l = t + a;
            e[l] = e[l] * o + e[n + a] * i;
        }
    }
    _lerpAdditive(e, t, n, i, r) {
        for(let o = 0; o !== r; ++o){
            let a = t + o;
            e[a] = e[a] + e[n + o] * i;
        }
    }
}, $a = "\\[\\]\\.:\\/", yy = new RegExp("[" + $a + "]", "g"), ja = "[^" + $a + "]", vy = "[^" + $a.replace("\\.", "") + "]", _y = /((?:WC+[\/:])*)/.source.replace("WC", ja), My = /(WCOD+)?/.source.replace("WCOD", vy), by = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", ja), wy = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", ja), Sy = new RegExp("^" + _y + My + by + wy + "$"), Ty = [
    "material",
    "materials",
    "bones"
], Jh = class {
    constructor(e, t, n){
        let i = n || ke.parseTrackName(t);
        this._targetGroup = e, this._bindings = e.subscribe_(t, i);
    }
    getValue(e, t) {
        this.bind();
        let n = this._targetGroup.nCachedObjects_, i = this._bindings[n];
        i !== void 0 && i.getValue(e, t);
    }
    setValue(e, t) {
        let n = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i)n[i].setValue(e, t);
    }
    bind() {
        let e = this._bindings;
        for(let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].bind();
    }
    unbind() {
        let e = this._bindings;
        for(let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].unbind();
    }
}, ke = class {
    constructor(e, t, n){
        this.path = t, this.parsedPath = n || ke.parseTrackName(t), this.node = ke.findNode(e, this.parsedPath.nodeName) || e, this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
    static create(e, t, n) {
        return e && e.isAnimationObjectGroup ? new ke.Composite(e, t, n) : new ke(e, t, n);
    }
    static sanitizeNodeName(e) {
        return e.replace(/\s/g, "_").replace(yy, "");
    }
    static parseTrackName(e) {
        let t = Sy.exec(e);
        if (!t) throw new Error("PropertyBinding: Cannot parse trackName: " + e);
        let n = {
            nodeName: t[2],
            objectName: t[3],
            objectIndex: t[4],
            propertyName: t[5],
            propertyIndex: t[6]
        }, i = n.nodeName && n.nodeName.lastIndexOf(".");
        if (i !== void 0 && i !== -1) {
            let r = n.nodeName.substring(i + 1);
            Ty.indexOf(r) !== -1 && (n.nodeName = n.nodeName.substring(0, i), n.objectName = r);
        }
        if (n.propertyName === null || n.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
        return n;
    }
    static findNode(e, t) {
        if (!t || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid) return e;
        if (e.skeleton) {
            let n = e.skeleton.getBoneByName(t);
            if (n !== void 0) return n;
        }
        if (e.children) {
            let n = function(r) {
                for(let o = 0; o < r.length; o++){
                    let a = r[o];
                    if (a.name === t || a.uuid === t) return a;
                    let l = n(a.children);
                    if (l) return l;
                }
                return null;
            }, i = n(e.children);
            if (i) return i;
        }
        return null;
    }
    _getValue_unavailable() {}
    _setValue_unavailable() {}
    _getValue_direct(e, t) {
        e[t] = this.targetObject[this.propertyName];
    }
    _getValue_array(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)e[t++] = n[i];
    }
    _getValue_arrayElement(e, t) {
        e[t] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(e, t) {
        this.resolvedProperty.toArray(e, t);
    }
    _setValue_direct(e, t) {
        this.targetObject[this.propertyName] = e[t];
    }
    _setValue_direct_setNeedsUpdate(e, t) {
        this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
        this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_array(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
    }
    _setValue_array_setNeedsUpdate(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
        this.targetObject.needsUpdate = !0;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
        let n = this.resolvedProperty;
        for(let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++];
        this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_arrayElement(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t];
    }
    _setValue_arrayElement_setNeedsUpdate(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
        this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _setValue_fromArray(e, t) {
        this.resolvedProperty.fromArray(e, t);
    }
    _setValue_fromArray_setNeedsUpdate(e, t) {
        this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
        this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
    }
    _getValue_unbound(e, t) {
        this.bind(), this.getValue(e, t);
    }
    _setValue_unbound(e, t) {
        this.bind(), this.setValue(e, t);
    }
    bind() {
        let e = this.node, t = this.parsedPath, n = t.objectName, i = t.propertyName, r = t.propertyIndex;
        if (e || (e = ke.findNode(this.rootNode, t.nodeName) || this.rootNode, this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
            console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
            return;
        }
        if (n) {
            let c = t.objectIndex;
            switch(n){
                case "materials":
                    if (!e.material) {
                        console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        return;
                    }
                    if (!e.material.materials) {
                        console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                        return;
                    }
                    e = e.material.materials;
                    break;
                case "bones":
                    if (!e.skeleton) {
                        console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                        return;
                    }
                    e = e.skeleton.bones;
                    for(let h = 0; h < e.length; h++)if (e[h].name === c) {
                        c = h;
                        break;
                    }
                    break;
                default:
                    if (e[n] === void 0) {
                        console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                        return;
                    }
                    e = e[n];
            }
            if (c !== void 0) {
                if (e[c] === void 0) {
                    console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
                    return;
                }
                e = e[c];
            }
        }
        let o = e[i];
        if (o === void 0) {
            let c = t.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + c + "." + i + " but it wasn't found.", e);
            return;
        }
        let a = this.Versioning.None;
        this.targetObject = e, e.needsUpdate !== void 0 ? a = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (a = this.Versioning.MatrixWorldNeedsUpdate);
        let l = this.BindingType.Direct;
        if (r !== void 0) {
            if (i === "morphTargetInfluences") {
                if (!e.geometry) {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                    return;
                }
                if (e.geometry.isBufferGeometry) {
                    if (!e.geometry.morphAttributes) {
                        console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                        return;
                    }
                    e.morphTargetDictionary[r] !== void 0 && (r = e.morphTargetDictionary[r]);
                } else {
                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
                    return;
                }
            }
            l = this.BindingType.ArrayElement, this.resolvedProperty = o, this.propertyIndex = r;
        } else o.fromArray !== void 0 && o.toArray !== void 0 ? (l = this.BindingType.HasFromToArray, this.resolvedProperty = o) : Array.isArray(o) ? (l = this.BindingType.EntireArray, this.resolvedProperty = o) : this.propertyName = i;
        this.getValue = this.GetterByBindingType[l], this.setValue = this.SetterByBindingTypeAndVersioning[l][a];
    }
    unbind() {
        this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
    }
};
ke.Composite = Jh;
ke.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
ke.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
ke.prototype.GetterByBindingType = [
    ke.prototype._getValue_direct,
    ke.prototype._getValue_array,
    ke.prototype._getValue_arrayElement,
    ke.prototype._getValue_toArray
];
ke.prototype.SetterByBindingTypeAndVersioning = [
    [
        ke.prototype._setValue_direct,
        ke.prototype._setValue_direct_setNeedsUpdate,
        ke.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
        ke.prototype._setValue_array,
        ke.prototype._setValue_array_setNeedsUpdate,
        ke.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
        ke.prototype._setValue_arrayElement,
        ke.prototype._setValue_arrayElement_setNeedsUpdate,
        ke.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
        ke.prototype._setValue_fromArray,
        ke.prototype._setValue_fromArray_setNeedsUpdate,
        ke.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
];
var Yh = class {
    constructor(){
        this.uuid = Et(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
        let e = {};
        this._indicesByUUID = e;
        for(let n = 0, i = arguments.length; n !== i; ++n)e[arguments[n].uuid] = n;
        this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
        let t = this;
        this.stats = {
            objects: {
                get total () {
                    return t._objects.length;
                },
                get inUse () {
                    return this.total - t.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return t._bindings.length;
            }
        };
    }
    add() {
        let e = this._objects, t = this._indicesByUUID, n = this._paths, i = this._parsedPaths, r = this._bindings, o = r.length, a, l = e.length, c = this.nCachedObjects_;
        for(let h = 0, u = arguments.length; h !== u; ++h){
            let d = arguments[h], f = d.uuid, m = t[f];
            if (m === void 0) {
                m = l++, t[f] = m, e.push(d);
                for(let x = 0, v = o; x !== v; ++x)r[x].push(new ke(d, n[x], i[x]));
            } else if (m < c) {
                a = e[m];
                let x = --c, v = e[x];
                t[v.uuid] = m, e[m] = v, t[f] = x, e[x] = d;
                for(let g = 0, p = o; g !== p; ++g){
                    let _ = r[g], y = _[x], b = _[m];
                    _[m] = y, b === void 0 && (b = new ke(d, n[g], i[g])), _[x] = b;
                }
            } else e[m] !== a && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
        }
        this.nCachedObjects_ = c;
    }
    remove() {
        let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_;
        for(let o = 0, a = arguments.length; o !== a; ++o){
            let l = arguments[o], c = l.uuid, h = t[c];
            if (h !== void 0 && h >= r) {
                let u = r++, d = e[u];
                t[d.uuid] = h, e[h] = d, t[c] = u, e[u] = l;
                for(let f = 0, m = i; f !== m; ++f){
                    let x = n[f], v = x[u], g = x[h];
                    x[h] = v, x[u] = g;
                }
            }
        }
        this.nCachedObjects_ = r;
    }
    uncache() {
        let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_, o = e.length;
        for(let a = 0, l = arguments.length; a !== l; ++a){
            let c = arguments[a], h = c.uuid, u = t[h];
            if (u !== void 0) if (delete t[h], u < r) {
                let d = --r, f = e[d], m = --o, x = e[m];
                t[f.uuid] = u, e[u] = f, t[x.uuid] = d, e[d] = x, e.pop();
                for(let v = 0, g = i; v !== g; ++v){
                    let p = n[v], _ = p[d], y = p[m];
                    p[u] = _, p[d] = y, p.pop();
                }
            } else {
                let d = --o, f = e[d];
                d > 0 && (t[f.uuid] = u), e[u] = f, e.pop();
                for(let m = 0, x = i; m !== x; ++m){
                    let v = n[m];
                    v[u] = v[d], v.pop();
                }
            }
        }
        this.nCachedObjects_ = r;
    }
    subscribe_(e, t) {
        let n = this._bindingsIndicesByPath, i = n[e], r = this._bindings;
        if (i !== void 0) return r[i];
        let o = this._paths, a = this._parsedPaths, l = this._objects, c = l.length, h = this.nCachedObjects_, u = new Array(c);
        i = r.length, n[e] = i, o.push(e), a.push(t), r.push(u);
        for(let d = h, f = l.length; d !== f; ++d){
            let m = l[d];
            u[d] = new ke(m, e, t);
        }
        return u;
    }
    unsubscribe_(e) {
        let t = this._bindingsIndicesByPath, n = t[e];
        if (n !== void 0) {
            let i = this._paths, r = this._parsedPaths, o = this._bindings, a = o.length - 1, l = o[a], c = e[a];
            t[c] = n, o[n] = l, o.pop(), r[n] = r[a], r.pop(), i[n] = i[a], i.pop();
        }
    }
};
Yh.prototype.isAnimationObjectGroup = !0;
var Zh = class {
    constructor(e, t, n = null, i = t.blendMode){
        this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = i;
        let r = t.tracks, o = r.length, a = new Array(o), l = {
            endingStart: Mi,
            endingEnd: Mi
        };
        for(let c = 0; c !== o; ++c){
            let h = r[c].createInterpolant(null);
            a[c] = h, h.settings = l;
        }
        this._interpolantSettings = l, this._interpolants = a, this._propertyBindings = new Array(o), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Id, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
    }
    play() {
        return this._mixer._activateAction(this), this;
    }
    stop() {
        return this._mixer._deactivateAction(this), this.reset();
    }
    reset() {
        return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
    }
    isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    isScheduled() {
        return this._mixer._isActiveAction(this);
    }
    startAt(e) {
        return this._startTime = e, this;
    }
    setLoop(e, t) {
        return this.loop = e, this.repetitions = t, this;
    }
    setEffectiveWeight(e) {
        return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
    }
    getEffectiveWeight() {
        return this._effectiveWeight;
    }
    fadeIn(e) {
        return this._scheduleFading(e, 0, 1);
    }
    fadeOut(e) {
        return this._scheduleFading(e, 1, 0);
    }
    crossFadeFrom(e, t, n) {
        if (e.fadeOut(t), this.fadeIn(t), n) {
            let i = this._clip.duration, r = e._clip.duration, o = r / i, a = i / r;
            e.warp(1, o, t), this.warp(a, 1, t);
        }
        return this;
    }
    crossFadeTo(e, t, n) {
        return e.crossFadeFrom(this, t, n);
    }
    stopFading() {
        let e = this._weightInterpolant;
        return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
    }
    setEffectiveTimeScale(e) {
        return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
    }
    getEffectiveTimeScale() {
        return this._effectiveTimeScale;
    }
    setDuration(e) {
        return this.timeScale = this._clip.duration / e, this.stopWarping();
    }
    syncWith(e) {
        return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
    }
    halt(e) {
        return this.warp(this._effectiveTimeScale, 0, e);
    }
    warp(e, t, n) {
        let i = this._mixer, r = i.time, o = this.timeScale, a = this._timeScaleInterpolant;
        a === null && (a = i._lendControlInterpolant(), this._timeScaleInterpolant = a);
        let l = a.parameterPositions, c = a.sampleValues;
        return l[0] = r, l[1] = r + n, c[0] = e / o, c[1] = t / o, this;
    }
    stopWarping() {
        let e = this._timeScaleInterpolant;
        return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
    }
    getMixer() {
        return this._mixer;
    }
    getClip() {
        return this._clip;
    }
    getRoot() {
        return this._localRoot || this._mixer._root;
    }
    _update(e, t, n, i) {
        if (!this.enabled) {
            this._updateWeight(e);
            return;
        }
        let r = this._startTime;
        if (r !== null) {
            let l = (e - r) * n;
            if (l < 0 || n === 0) return;
            this._startTime = null, t = n * l;
        }
        t *= this._updateTimeScale(e);
        let o = this._updateTime(t), a = this._updateWeight(e);
        if (a > 0) {
            let l = this._interpolants, c = this._propertyBindings;
            switch(this.blendMode){
                case qc:
                    for(let h = 0, u = l.length; h !== u; ++h)l[h].evaluate(o), c[h].accumulateAdditive(a);
                    break;
                case ua:
                default:
                    for(let h = 0, u = l.length; h !== u; ++h)l[h].evaluate(o), c[h].accumulate(i, a);
            }
        }
    }
    _updateWeight(e) {
        let t = 0;
        if (this.enabled) {
            t = this.weight;
            let n = this._weightInterpolant;
            if (n !== null) {
                let i = n.evaluate(e)[0];
                t *= i, e > n.parameterPositions[1] && (this.stopFading(), i === 0 && (this.enabled = !1));
            }
        }
        return this._effectiveWeight = t, t;
    }
    _updateTimeScale(e) {
        let t = 0;
        if (!this.paused) {
            t = this.timeScale;
            let n = this._timeScaleInterpolant;
            n !== null && (t *= n.evaluate(e)[0], e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t));
        }
        return this._effectiveTimeScale = t, t;
    }
    _updateTime(e) {
        let t = this._clip.duration, n = this.loop, i = this.time + e, r = this._loopCount, o = n === Dd;
        if (e === 0) return r === -1 ? i : o && (r & 1) === 1 ? t - i : i;
        if (n === Pd) {
            r === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
            e: {
                if (i >= t) i = t;
                else if (i < 0) i = 0;
                else {
                    this.time = i;
                    break e;
                }
                this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = i, this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: e < 0 ? -1 : 1
                });
            }
        } else {
            if (r === -1 && (e >= 0 ? (r = 0, this._setEndings(!0, this.repetitions === 0, o)) : this._setEndings(this.repetitions === 0, !0, o)), i >= t || i < 0) {
                let a = Math.floor(i / t);
                i -= t * a, r += Math.abs(a);
                let l = this.repetitions - r;
                if (l <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, i = e > 0 ? t : 0, this.time = i, this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: e > 0 ? 1 : -1
                });
                else {
                    if (l === 1) {
                        let c = e < 0;
                        this._setEndings(c, !c, o);
                    } else this._setEndings(!1, !1, o);
                    this._loopCount = r, this.time = i, this._mixer.dispatchEvent({
                        type: "loop",
                        action: this,
                        loopDelta: a
                    });
                }
            } else this.time = i;
            if (o && (r & 1) === 1) return t - i;
        }
        return i;
    }
    _setEndings(e, t, n) {
        let i = this._interpolantSettings;
        n ? (i.endingStart = bi, i.endingEnd = bi) : (e ? i.endingStart = this.zeroSlopeAtStart ? bi : Mi : i.endingStart = Os, t ? i.endingEnd = this.zeroSlopeAtEnd ? bi : Mi : i.endingEnd = Os);
    }
    _scheduleFading(e, t, n) {
        let i = this._mixer, r = i.time, o = this._weightInterpolant;
        o === null && (o = i._lendControlInterpolant(), this._weightInterpolant = o);
        let a = o.parameterPositions, l = o.sampleValues;
        return a[0] = r, l[0] = t, a[1] = r + e, l[1] = n, this;
    }
}, $h = class extends En {
    constructor(e){
        super();
        this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
    }
    _bindAction(e, t) {
        let n = e._localRoot || this._root, i = e._clip.tracks, r = i.length, o = e._propertyBindings, a = e._interpolants, l = n.uuid, c = this._bindingsByRootAndName, h = c[l];
        h === void 0 && (h = {}, c[l] = h);
        for(let u = 0; u !== r; ++u){
            let d = i[u], f = d.name, m = h[f];
            if (m !== void 0) o[u] = m;
            else {
                if (m = o[u], m !== void 0) {
                    m._cacheIndex === null && (++m.referenceCount, this._addInactiveBinding(m, l, f));
                    continue;
                }
                let x = t && t._propertyBindings[u].binding.parsedPath;
                m = new Xh(ke.create(n, f, x), d.ValueTypeName, d.getValueSize()), ++m.referenceCount, this._addInactiveBinding(m, l, f), o[u] = m;
            }
            a[u].resultBuffer = m.buffer;
        }
    }
    _activateAction(e) {
        if (!this._isActiveAction(e)) {
            if (e._cacheIndex === null) {
                let n = (e._localRoot || this._root).uuid, i = e._clip.uuid, r = this._actionsByClip[i];
                this._bindAction(e, r && r.knownActions[0]), this._addInactiveAction(e, i, n);
            }
            let t = e._propertyBindings;
            for(let n = 0, i = t.length; n !== i; ++n){
                let r = t[n];
                r.useCount++ === 0 && (this._lendBinding(r), r.saveOriginalState());
            }
            this._lendAction(e);
        }
    }
    _deactivateAction(e) {
        if (this._isActiveAction(e)) {
            let t = e._propertyBindings;
            for(let n = 0, i = t.length; n !== i; ++n){
                let r = t[n];
                --r.useCount === 0 && (r.restoreOriginalState(), this._takeBackBinding(r));
            }
            this._takeBackAction(e);
        }
    }
    _initMemoryManager() {
        this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
        let e = this;
        this.stats = {
            actions: {
                get total () {
                    return e._actions.length;
                },
                get inUse () {
                    return e._nActiveActions;
                }
            },
            bindings: {
                get total () {
                    return e._bindings.length;
                },
                get inUse () {
                    return e._nActiveBindings;
                }
            },
            controlInterpolants: {
                get total () {
                    return e._controlInterpolants.length;
                },
                get inUse () {
                    return e._nActiveControlInterpolants;
                }
            }
        };
    }
    _isActiveAction(e) {
        let t = e._cacheIndex;
        return t !== null && t < this._nActiveActions;
    }
    _addInactiveAction(e, t, n) {
        let i = this._actions, r = this._actionsByClip, o = r[t];
        if (o === void 0) o = {
            knownActions: [
                e
            ],
            actionByRoot: {}
        }, e._byClipCacheIndex = 0, r[t] = o;
        else {
            let a = o.knownActions;
            e._byClipCacheIndex = a.length, a.push(e);
        }
        e._cacheIndex = i.length, i.push(e), o.actionByRoot[n] = e;
    }
    _removeInactiveAction(e) {
        let t = this._actions, n = t[t.length - 1], i = e._cacheIndex;
        n._cacheIndex = i, t[i] = n, t.pop(), e._cacheIndex = null;
        let r = e._clip.uuid, o = this._actionsByClip, a = o[r], l = a.knownActions, c = l[l.length - 1], h = e._byClipCacheIndex;
        c._byClipCacheIndex = h, l[h] = c, l.pop(), e._byClipCacheIndex = null;
        let u = a.actionByRoot, d = (e._localRoot || this._root).uuid;
        delete u[d], l.length === 0 && delete o[r], this._removeInactiveBindingsForAction(e);
    }
    _removeInactiveBindingsForAction(e) {
        let t = e._propertyBindings;
        for(let n = 0, i = t.length; n !== i; ++n){
            let r = t[n];
            --r.referenceCount === 0 && this._removeInactiveBinding(r);
        }
    }
    _lendAction(e) {
        let t = this._actions, n = e._cacheIndex, i = this._nActiveActions++, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _takeBackAction(e) {
        let t = this._actions, n = e._cacheIndex, i = --this._nActiveActions, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _addInactiveBinding(e, t, n) {
        let i = this._bindingsByRootAndName, r = this._bindings, o = i[t];
        o === void 0 && (o = {}, i[t] = o), o[n] = e, e._cacheIndex = r.length, r.push(e);
    }
    _removeInactiveBinding(e) {
        let t = this._bindings, n = e.binding, i = n.rootNode.uuid, r = n.path, o = this._bindingsByRootAndName, a = o[i], l = t[t.length - 1], c = e._cacheIndex;
        l._cacheIndex = c, t[c] = l, t.pop(), delete a[r], Object.keys(a).length === 0 && delete o[i];
    }
    _lendBinding(e) {
        let t = this._bindings, n = e._cacheIndex, i = this._nActiveBindings++, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _takeBackBinding(e) {
        let t = this._bindings, n = e._cacheIndex, i = --this._nActiveBindings, r = t[i];
        e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r;
    }
    _lendControlInterpolant() {
        let e = this._controlInterpolants, t = this._nActiveControlInterpolants++, n = e[t];
        return n === void 0 && (n = new Na(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), n.__cacheIndex = t, e[t] = n), n;
    }
    _takeBackControlInterpolant(e) {
        let t = this._controlInterpolants, n = e.__cacheIndex, i = --this._nActiveControlInterpolants, r = t[i];
        e.__cacheIndex = i, t[i] = e, r.__cacheIndex = n, t[n] = r;
    }
    clipAction(e, t, n) {
        let i = t || this._root, r = i.uuid, o = typeof e == "string" ? Lr.findByName(i, e) : e, a = o !== null ? o.uuid : e, l = this._actionsByClip[a], c = null;
        if (n === void 0 && (o !== null ? n = o.blendMode : n = ua), l !== void 0) {
            let u = l.actionByRoot[r];
            if (u !== void 0 && u.blendMode === n) return u;
            c = l.knownActions[0], o === null && (o = c._clip);
        }
        if (o === null) return null;
        let h = new Zh(this, o, t, n);
        return this._bindAction(h, c), this._addInactiveAction(h, a, r), h;
    }
    existingAction(e, t) {
        let n = t || this._root, i = n.uuid, r = typeof e == "string" ? Lr.findByName(n, e) : e, o = r ? r.uuid : e, a = this._actionsByClip[o];
        return a !== void 0 && a.actionByRoot[i] || null;
    }
    stopAllAction() {
        let e = this._actions, t = this._nActiveActions;
        for(let n = t - 1; n >= 0; --n)e[n].stop();
        return this;
    }
    update(e) {
        e *= this.timeScale;
        let t = this._actions, n = this._nActiveActions, i = this.time += e, r = Math.sign(e), o = this._accuIndex ^= 1;
        for(let c = 0; c !== n; ++c)t[c]._update(i, e, r, o);
        let a = this._bindings, l = this._nActiveBindings;
        for(let c = 0; c !== l; ++c)a[c].apply(o);
        return this;
    }
    setTime(e) {
        this.time = 0;
        for(let t = 0; t < this._actions.length; t++)this._actions[t].time = 0;
        return this.update(e);
    }
    getRoot() {
        return this._root;
    }
    uncacheClip(e) {
        let t = this._actions, n = e.uuid, i = this._actionsByClip, r = i[n];
        if (r !== void 0) {
            let o = r.knownActions;
            for(let a = 0, l = o.length; a !== l; ++a){
                let c = o[a];
                this._deactivateAction(c);
                let h = c._cacheIndex, u = t[t.length - 1];
                c._cacheIndex = null, c._byClipCacheIndex = null, u._cacheIndex = h, t[h] = u, t.pop(), this._removeInactiveBindingsForAction(c);
            }
            delete i[n];
        }
    }
    uncacheRoot(e) {
        let t = e.uuid, n = this._actionsByClip;
        for(let o in n){
            let a = n[o].actionByRoot, l = a[t];
            l !== void 0 && (this._deactivateAction(l), this._removeInactiveAction(l));
        }
        let i = this._bindingsByRootAndName, r = i[t];
        if (r !== void 0) for(let o in r){
            let a = r[o];
            a.restoreOriginalState(), this._removeInactiveBinding(a);
        }
    }
    uncacheAction(e, t) {
        let n = this.existingAction(e, t);
        n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
    }
};
$h.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
var go = class {
    constructor(e){
        typeof e == "string" && (console.warn("THREE.Uniform: Type parameter is no longer needed."), e = arguments[1]), this.value = e;
    }
    clone() {
        return new go(this.value.clone === void 0 ? this.value : this.value.clone());
    }
}, jh = class extends $n {
    constructor(e, t, n = 1){
        super(e, t);
        this.meshPerAttribute = n;
    }
    copy(e) {
        return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
    }
    clone(e) {
        let t = super.clone(e);
        return t.meshPerAttribute = this.meshPerAttribute, t;
    }
    toJSON(e) {
        let t = super.toJSON(e);
        return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
    }
};
jh.prototype.isInstancedInterleavedBuffer = !0;
var Qh = class {
    constructor(e, t, n, i, r){
        this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = i, this.count = r, this.version = 0;
    }
    set needsUpdate(e) {
        e === !0 && this.version++;
    }
    setBuffer(e) {
        return this.buffer = e, this;
    }
    setType(e, t) {
        return this.type = e, this.elementSize = t, this;
    }
    setItemSize(e) {
        return this.itemSize = e, this;
    }
    setCount(e) {
        return this.count = e, this;
    }
};
Qh.prototype.isGLBufferAttribute = !0;
var Ey = class {
    constructor(e, t, n = 0, i = 1 / 0){
        this.ray = new Cn(e, t), this.near = n, this.far = i, this.camera = null, this.layers = new Js, this.params = {
            Mesh: {},
            Line: {
                threshold: 1
            },
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        };
    }
    set(e, t) {
        this.ray.set(e, t);
    }
    setFromCamera(e, t) {
        t && t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, .5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t && t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
    }
    intersectObject(e, t = !0, n = []) {
        return la(e, this, n, t), n.sort(Pc), n;
    }
    intersectObjects(e, t = !0, n = []) {
        for(let i = 0, r = e.length; i < r; i++)la(e[i], this, n, t);
        return n.sort(Pc), n;
    }
};
function Pc(s, e) {
    return s.distance - e.distance;
}
function la(s, e, t, n) {
    if (s.layers.test(e.layers) && s.raycast(e, t), n === !0) {
        let i = s.children;
        for(let r = 0, o = i.length; r < o; r++)la(i[r], e, t, !0);
    }
}
var Ay = class {
    constructor(e = 1, t = 0, n = 0){
        return this.radius = e, this.phi = t, this.theta = n, this;
    }
    set(e, t, n) {
        return this.radius = e, this.phi = t, this.theta = n, this;
    }
    copy(e) {
        return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
    }
    makeSafe() {
        return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
    }
    setFromVector3(e) {
        return this.setFromCartesianCoords(e.x, e.y, e.z);
    }
    setFromCartesianCoords(e, t, n) {
        return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(mt(t / this.radius, -1, 1))), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Cy = class {
    constructor(e = 1, t = 0, n = 0){
        return this.radius = e, this.theta = t, this.y = n, this;
    }
    set(e, t, n) {
        return this.radius = e, this.theta = t, this.y = n, this;
    }
    copy(e) {
        return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
    }
    setFromVector3(e) {
        return this.setFromCartesianCoords(e.x, e.y, e.z);
    }
    setFromCartesianCoords(e, t, n) {
        return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Ic = new X, qi = class {
    constructor(e = new X(1 / 0, 1 / 0), t = new X(-1 / 0, -1 / 0)){
        this.min = e, this.max = t;
    }
    set(e, t) {
        return this.min.copy(e), this.max.copy(t), this;
    }
    setFromPoints(e) {
        this.makeEmpty();
        for(let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]);
        return this;
    }
    setFromCenterAndSize(e, t) {
        let n = Ic.copy(t).multiplyScalar(.5);
        return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(e) {
        return this.min.copy(e.min), this.max.copy(e.max), this;
    }
    makeEmpty() {
        return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
    }
    isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(e) {
        return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5);
    }
    getSize(e) {
        return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
    }
    expandByPoint(e) {
        return this.min.min(e), this.max.max(e), this;
    }
    expandByVector(e) {
        return this.min.sub(e), this.max.add(e), this;
    }
    expandByScalar(e) {
        return this.min.addScalar(-e), this.max.addScalar(e), this;
    }
    containsPoint(e) {
        return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
    }
    containsBox(e) {
        return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
    }
    getParameter(e, t) {
        return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(e) {
        return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
    }
    clampPoint(e, t) {
        return t.copy(e).clamp(this.min, this.max);
    }
    distanceToPoint(e) {
        return Ic.copy(e).clamp(this.min, this.max).sub(e).length();
    }
    intersect(e) {
        return this.min.max(e.min), this.max.min(e.max), this;
    }
    union(e) {
        return this.min.min(e.min), this.max.max(e.max), this;
    }
    translate(e) {
        return this.min.add(e), this.max.add(e), this;
    }
    equals(e) {
        return e.min.equals(this.min) && e.max.equals(this.max);
    }
};
qi.prototype.isBox2 = !0;
var Dc = new M, Ts = new M, Kh = class {
    constructor(e = new M, t = new M){
        this.start = e, this.end = t;
    }
    set(e, t) {
        return this.start.copy(e), this.end.copy(t), this;
    }
    copy(e) {
        return this.start.copy(e.start), this.end.copy(e.end), this;
    }
    getCenter(e) {
        return e.addVectors(this.start, this.end).multiplyScalar(.5);
    }
    delta(e) {
        return e.subVectors(this.end, this.start);
    }
    distanceSq() {
        return this.start.distanceToSquared(this.end);
    }
    distance() {
        return this.start.distanceTo(this.end);
    }
    at(e, t) {
        return this.delta(t).multiplyScalar(e).add(this.start);
    }
    closestPointToPointParameter(e, t) {
        Dc.subVectors(e, this.start), Ts.subVectors(this.end, this.start);
        let n = Ts.dot(Ts), r = Ts.dot(Dc) / n;
        return t && (r = mt(r, 0, 1)), r;
    }
    closestPointToPoint(e, t, n) {
        let i = this.closestPointToPointParameter(e, t);
        return this.delta(n).multiplyScalar(i).add(this.start);
    }
    applyMatrix4(e) {
        return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
    }
    equals(e) {
        return e.start.equals(this.start) && e.end.equals(this.end);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}, Fc = new M, Ly = class extends Ne {
    constructor(e, t){
        super();
        this.light = e, this.light.updateMatrixWorld(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t;
        let n = new _e, i = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(let o = 0, a = 1, l = 32; o < l; o++, a++){
            let c = o / l * Math.PI * 2, h = a / l * Math.PI * 2;
            i.push(Math.cos(c), Math.sin(c), 1, Math.cos(h), Math.sin(h), 1);
        }
        n.setAttribute("position", new de(i, 3));
        let r = new ft({
            fog: !1,
            toneMapped: !1
        });
        this.cone = new wt(n, r), this.add(this.cone), this.update();
    }
    dispose() {
        this.cone.geometry.dispose(), this.cone.material.dispose();
    }
    update() {
        this.light.updateMatrixWorld();
        let e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
        this.cone.scale.set(t, t, e), Fc.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(Fc), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
    }
}, yn = new M, Es = new pe, Qo = new pe, eu = class extends wt {
    constructor(e){
        let t = tu(e), n = new _e, i = [], r = [], o = new ae(0, 0, 1), a = new ae(0, 1, 0);
        for(let c = 0; c < t.length; c++){
            let h = t[c];
            h.parent && h.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), r.push(o.r, o.g, o.b), r.push(a.r, a.g, a.b));
        }
        n.setAttribute("position", new de(i, 3)), n.setAttribute("color", new de(r, 3));
        let l = new ft({
            vertexColors: !0,
            depthTest: !1,
            depthWrite: !1,
            toneMapped: !1,
            transparent: !0
        });
        super(n, l);
        this.type = "SkeletonHelper", this.isSkeletonHelper = !0, this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
    }
    updateMatrixWorld(e) {
        let t = this.bones, n = this.geometry, i = n.getAttribute("position");
        Qo.copy(this.root.matrixWorld).invert();
        for(let r = 0, o = 0; r < t.length; r++){
            let a = t[r];
            a.parent && a.parent.isBone && (Es.multiplyMatrices(Qo, a.matrixWorld), yn.setFromMatrixPosition(Es), i.setXYZ(o, yn.x, yn.y, yn.z), Es.multiplyMatrices(Qo, a.parent.matrixWorld), yn.setFromMatrixPosition(Es), i.setXYZ(o + 1, yn.x, yn.y, yn.z), o += 2);
        }
        n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
    }
};
function tu(s) {
    let e = [];
    s && s.isBone && e.push(s);
    for(let t = 0; t < s.children.length; t++)e.push.apply(e, tu(s.children[t]));
    return e;
}
var Ry = class extends st {
    constructor(e, t, n){
        let i = new Fi(t, 4, 2), r = new hn({
            wireframe: !0,
            fog: !1,
            toneMapped: !1
        });
        super(i, r);
        this.light = e, this.light.updateMatrixWorld(), this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
    update() {
        this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
    }
}, Py = new M, Nc = new ae, Bc = new ae, Iy = class extends Ne {
    constructor(e, t, n){
        super();
        this.light = e, this.light.updateMatrixWorld(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n;
        let i = new Ii(t);
        i.rotateY(Math.PI * .5), this.material = new hn({
            wireframe: !0,
            fog: !1,
            toneMapped: !1
        }), this.color === void 0 && (this.material.vertexColors = !0);
        let r = i.getAttribute("position"), o = new Float32Array(r.count * 3);
        i.setAttribute("color", new Ue(o, 3)), this.add(new st(i, this.material)), this.update();
    }
    dispose() {
        this.children[0].geometry.dispose(), this.children[0].material.dispose();
    }
    update() {
        let e = this.children[0];
        if (this.color !== void 0) this.material.color.set(this.color);
        else {
            let t = e.geometry.getAttribute("color");
            Nc.copy(this.light.color), Bc.copy(this.light.groundColor);
            for(let n = 0, i = t.count; n < i; n++){
                let r = n < i / 2 ? Nc : Bc;
                t.setXYZ(n, r.r, r.g, r.b);
            }
            t.needsUpdate = !0;
        }
        e.lookAt(Py.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
}, nu = class extends wt {
    constructor(e = 10, t = 10, n = 4473924, i = 8947848){
        n = new ae(n), i = new ae(i);
        let r = t / 2, o = e / t, a = e / 2, l = [], c = [];
        for(let d = 0, f = 0, m = -a; d <= t; d++, m += o){
            l.push(-a, 0, m, a, 0, m), l.push(m, 0, -a, m, 0, a);
            let x = d === r ? n : i;
            x.toArray(c, f), f += 3, x.toArray(c, f), f += 3, x.toArray(c, f), f += 3, x.toArray(c, f), f += 3;
        }
        let h = new _e;
        h.setAttribute("position", new de(l, 3)), h.setAttribute("color", new de(c, 3));
        let u = new ft({
            vertexColors: !0,
            toneMapped: !1
        });
        super(h, u);
        this.type = "GridHelper";
    }
}, Dy = class extends wt {
    constructor(e = 10, t = 16, n = 8, i = 64, r = 4473924, o = 8947848){
        r = new ae(r), o = new ae(o);
        let a = [], l = [];
        for(let u = 0; u <= t; u++){
            let d = u / t * (Math.PI * 2), f = Math.sin(d) * e, m = Math.cos(d) * e;
            a.push(0, 0, 0), a.push(f, 0, m);
            let x = u & 1 ? r : o;
            l.push(x.r, x.g, x.b), l.push(x.r, x.g, x.b);
        }
        for(let u = 0; u <= n; u++){
            let d = u & 1 ? r : o, f = e - e / n * u;
            for(let m = 0; m < i; m++){
                let x = m / i * (Math.PI * 2), v = Math.sin(x) * f, g = Math.cos(x) * f;
                a.push(v, 0, g), l.push(d.r, d.g, d.b), x = (m + 1) / i * (Math.PI * 2), v = Math.sin(x) * f, g = Math.cos(x) * f, a.push(v, 0, g), l.push(d.r, d.g, d.b);
            }
        }
        let c = new _e;
        c.setAttribute("position", new de(a, 3)), c.setAttribute("color", new de(l, 3));
        let h = new ft({
            vertexColors: !0,
            toneMapped: !1
        });
        super(c, h);
        this.type = "PolarGridHelper";
    }
}, zc = new M, As = new M, Uc = new M, Fy = class extends Ne {
    constructor(e, t, n){
        super();
        this.light = e, this.light.updateMatrixWorld(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, t === void 0 && (t = 1);
        let i = new _e;
        i.setAttribute("position", new de([
            -t,
            t,
            0,
            t,
            t,
            0,
            t,
            -t,
            0,
            -t,
            -t,
            0,
            -t,
            t,
            0
        ], 3));
        let r = new ft({
            fog: !1,
            toneMapped: !1
        });
        this.lightPlane = new on(i, r), this.add(this.lightPlane), i = new _e, i.setAttribute("position", new de([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3)), this.targetLine = new on(i, r), this.add(this.targetLine), this.update();
    }
    dispose() {
        this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
    }
    update() {
        zc.setFromMatrixPosition(this.light.matrixWorld), As.setFromMatrixPosition(this.light.target.matrixWorld), Uc.subVectors(As, zc), this.lightPlane.lookAt(As), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(As), this.targetLine.scale.z = Uc.length();
    }
}, Cs = new M, Qe = new Ir, Ny = class extends wt {
    constructor(e){
        let t = new _e, n = new ft({
            color: 16777215,
            vertexColors: !0,
            toneMapped: !1
        }), i = [], r = [], o = {}, a = new ae(16755200), l = new ae(16711680), c = new ae(43775), h = new ae(16777215), u = new ae(3355443);
        d("n1", "n2", a), d("n2", "n4", a), d("n4", "n3", a), d("n3", "n1", a), d("f1", "f2", a), d("f2", "f4", a), d("f4", "f3", a), d("f3", "f1", a), d("n1", "f1", a), d("n2", "f2", a), d("n3", "f3", a), d("n4", "f4", a), d("p", "n1", l), d("p", "n2", l), d("p", "n3", l), d("p", "n4", l), d("u1", "u2", c), d("u2", "u3", c), d("u3", "u1", c), d("c", "t", h), d("p", "c", u), d("cn1", "cn2", u), d("cn3", "cn4", u), d("cf1", "cf2", u), d("cf3", "cf4", u);
        function d(m, x, v) {
            f(m, v), f(x, v);
        }
        function f(m, x) {
            i.push(0, 0, 0), r.push(x.r, x.g, x.b), o[m] === void 0 && (o[m] = []), o[m].push(i.length / 3 - 1);
        }
        t.setAttribute("position", new de(i, 3)), t.setAttribute("color", new de(r, 3));
        super(t, n);
        this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = o, this.update();
    }
    update() {
        let e = this.geometry, t = this.pointMap, n = 1, i = 1;
        Qe.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), et("c", t, e, Qe, 0, 0, -1), et("t", t, e, Qe, 0, 0, 1), et("n1", t, e, Qe, -n, -i, -1), et("n2", t, e, Qe, n, -i, -1), et("n3", t, e, Qe, -n, i, -1), et("n4", t, e, Qe, n, i, -1), et("f1", t, e, Qe, -n, -i, 1), et("f2", t, e, Qe, n, -i, 1), et("f3", t, e, Qe, -n, i, 1), et("f4", t, e, Qe, n, i, 1), et("u1", t, e, Qe, n * .7, i * 1.1, -1), et("u2", t, e, Qe, -n * .7, i * 1.1, -1), et("u3", t, e, Qe, 0, i * 2, -1), et("cf1", t, e, Qe, -n, 0, 1), et("cf2", t, e, Qe, n, 0, 1), et("cf3", t, e, Qe, 0, -i, 1), et("cf4", t, e, Qe, 0, i, 1), et("cn1", t, e, Qe, -n, 0, -1), et("cn2", t, e, Qe, n, 0, -1), et("cn3", t, e, Qe, 0, -i, -1), et("cn4", t, e, Qe, 0, i, -1), e.getAttribute("position").needsUpdate = !0;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
};
function et(s, e, t, n, i, r, o) {
    Cs.set(i, r, o).unproject(n);
    let a = e[s];
    if (a !== void 0) {
        let l = t.getAttribute("position");
        for(let c = 0, h = a.length; c < h; c++)l.setXYZ(a[c], Cs.x, Cs.y, Cs.z);
    }
}
var Ls = new Lt, iu = class extends wt {
    constructor(e, t = 16776960){
        let n = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]), i = new Float32Array(8 * 3), r = new _e;
        r.setIndex(new Ue(n, 1)), r.setAttribute("position", new Ue(i, 3));
        super(r, new ft({
            color: t,
            toneMapped: !1
        }));
        this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
    }
    update(e) {
        if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && Ls.setFromObject(this.object), Ls.isEmpty()) return;
        let t = Ls.min, n = Ls.max, i = this.geometry.attributes.position, r = i.array;
        r[0] = n.x, r[1] = n.y, r[2] = n.z, r[3] = t.x, r[4] = n.y, r[5] = n.z, r[6] = t.x, r[7] = t.y, r[8] = n.z, r[9] = n.x, r[10] = t.y, r[11] = n.z, r[12] = n.x, r[13] = n.y, r[14] = t.z, r[15] = t.x, r[16] = n.y, r[17] = t.z, r[18] = t.x, r[19] = t.y, r[20] = t.z, r[21] = n.x, r[22] = t.y, r[23] = t.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
    }
    setFromObject(e) {
        return this.object = e, this.update(), this;
    }
    copy(e) {
        return wt.prototype.copy.call(this, e), this.object = e.object, this;
    }
}, By = class extends wt {
    constructor(e, t = 16776960){
        let n = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]), i = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ], r = new _e;
        r.setIndex(new Ue(n, 1)), r.setAttribute("position", new de(i, 3));
        super(r, new ft({
            color: t,
            toneMapped: !1
        }));
        this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
    }
    updateMatrixWorld(e) {
        let t = this.box;
        t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(.5), super.updateMatrixWorld(e));
    }
}, zy = class extends on {
    constructor(e, t = 1, n = 16776960){
        let i = n, r = [
            1,
            -1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ], o = new _e;
        o.setAttribute("position", new de(r, 3)), o.computeBoundingSphere();
        super(o, new ft({
            color: i,
            toneMapped: !1
        }));
        this.type = "PlaneHelper", this.plane = e, this.size = t;
        let a = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1
        ], l = new _e;
        l.setAttribute("position", new de(a, 3)), l.computeBoundingSphere(), this.add(new st(l, new hn({
            color: i,
            opacity: .2,
            transparent: !0,
            depthWrite: !1,
            toneMapped: !1
        })));
    }
    updateMatrixWorld(e) {
        let t = -this.plane.constant;
        Math.abs(t) < 1e-8 && (t = 1e-8), this.scale.set(.5 * this.size, .5 * this.size, t), this.children[0].material.side = t < 0 ? it : Ai, this.lookAt(this.plane.normal), super.updateMatrixWorld(e);
    }
}, Oc = new M, Rs, Ko, Uy = class extends Ne {
    constructor(e = new M(0, 0, 1), t = new M(0, 0, 0), n = 1, i = 16776960, r = n * .2, o = r * .2){
        super();
        this.type = "ArrowHelper", Rs === void 0 && (Rs = new _e, Rs.setAttribute("position", new de([
            0,
            0,
            0,
            0,
            1,
            0
        ], 3)), Ko = new Jn(0, .5, 1, 5, 1), Ko.translate(0, -.5, 0)), this.position.copy(t), this.line = new on(Rs, new ft({
            color: i,
            toneMapped: !1
        })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new st(Ko, new hn({
            color: i,
            toneMapped: !1
        })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, r, o);
    }
    setDirection(e) {
        if (e.y > .99999) this.quaternion.set(0, 0, 0, 1);
        else if (e.y < -.99999) this.quaternion.set(1, 0, 0, 0);
        else {
            Oc.set(e.z, 0, -e.x).normalize();
            let t = Math.acos(e.y);
            this.quaternion.setFromAxisAngle(Oc, t);
        }
    }
    setLength(e, t = e * .2, n = t * .2) {
        this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
    }
    setColor(e) {
        this.line.material.color.set(e), this.cone.material.color.set(e);
    }
    copy(e) {
        return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
    }
}, ru = class extends wt {
    constructor(e = 1){
        let t = [
            0,
            0,
            0,
            e,
            0,
            0,
            0,
            0,
            0,
            0,
            e,
            0,
            0,
            0,
            0,
            0,
            0,
            e
        ], n = [
            1,
            0,
            0,
            1,
            .6,
            0,
            0,
            1,
            0,
            .6,
            1,
            0,
            0,
            0,
            1,
            0,
            .6,
            1
        ], i = new _e;
        i.setAttribute("position", new de(t, 3)), i.setAttribute("color", new de(n, 3));
        let r = new ft({
            vertexColors: !0,
            toneMapped: !1
        });
        super(i, r);
        this.type = "AxesHelper";
    }
    setColors(e, t, n) {
        let i = new ae, r = this.geometry.attributes.color.array;
        return i.set(e), i.toArray(r, 0), i.toArray(r, 3), i.set(t), i.toArray(r, 6), i.toArray(r, 9), i.set(n), i.toArray(r, 12), i.toArray(r, 15), this.geometry.attributes.color.needsUpdate = !0, this;
    }
    dispose() {
        this.geometry.dispose(), this.material.dispose();
    }
}, Oy = class {
    constructor(){
        this.type = "ShapePath", this.color = new ae, this.subPaths = [], this.currentPath = null;
    }
    moveTo(e, t) {
        return this.currentPath = new gr, this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
    }
    lineTo(e, t) {
        return this.currentPath.lineTo(e, t), this;
    }
    quadraticCurveTo(e, t, n, i) {
        return this.currentPath.quadraticCurveTo(e, t, n, i), this;
    }
    bezierCurveTo(e, t, n, i, r, o) {
        return this.currentPath.bezierCurveTo(e, t, n, i, r, o), this;
    }
    splineThru(e) {
        return this.currentPath.splineThru(e), this;
    }
    toShapes(e, t) {
        function n(p) {
            let _ = [];
            for(let y = 0, b = p.length; y < b; y++){
                let A = p[y], L = new Xt;
                L.curves = A.curves, _.push(L);
            }
            return _;
        }
        function i(p, _) {
            let y = _.length, b = !1;
            for(let A = y - 1, L = 0; L < y; A = L++){
                let I = _[A], k = _[L], B = k.x - I.x, P = k.y - I.y;
                if (Math.abs(P) > Number.EPSILON) {
                    if (P < 0 && (I = _[L], B = -B, k = _[A], P = -P), p.y < I.y || p.y > k.y) continue;
                    if (p.y === I.y) {
                        if (p.x === I.x) return !0;
                    } else {
                        let w = P * (p.x - I.x) - B * (p.y - I.y);
                        if (w === 0) return !0;
                        if (w < 0) continue;
                        b = !b;
                    }
                } else {
                    if (p.y !== I.y) continue;
                    if (k.x <= p.x && p.x <= I.x || I.x <= p.x && p.x <= k.x) return !0;
                }
            }
            return b;
        }
        let r = Jt.isClockWise, o = this.subPaths;
        if (o.length === 0) return [];
        if (t === !0) return n(o);
        let a, l, c, h = [];
        if (o.length === 1) return l = o[0], c = new Xt, c.curves = l.curves, h.push(c), h;
        let u = !r(o[0].getPoints());
        u = e ? !u : u;
        let d = [], f = [], m = [], x = 0, v;
        f[x] = void 0, m[x] = [];
        for(let p = 0, _ = o.length; p < _; p++)l = o[p], v = l.getPoints(), a = r(v), a = e ? !a : a, a ? (!u && f[x] && x++, f[x] = {
            s: new Xt,
            p: v
        }, f[x].s.curves = l.curves, u && x++, m[x] = []) : m[x].push({
            h: l,
            p: v[0]
        });
        if (!f[0]) return n(o);
        if (f.length > 1) {
            let p = !1, _ = [];
            for(let y = 0, b = f.length; y < b; y++)d[y] = [];
            for(let y = 0, b = f.length; y < b; y++){
                let A = m[y];
                for(let L = 0; L < A.length; L++){
                    let I = A[L], k = !0;
                    for(let B = 0; B < f.length; B++)i(I.p, f[B].p) && (y !== B && _.push({
                        froms: y,
                        tos: B,
                        hole: L
                    }), k ? (k = !1, d[B].push(I)) : p = !0);
                    k && d[y].push(I);
                }
            }
            _.length > 0 && (p || (m = d));
        }
        let g;
        for(let p = 0, _ = f.length; p < _; p++){
            c = f[p].s, h.push(c), g = m[p];
            for(let y = 0, b = g.length; y < b; y++)c.holes.push(g[y].h);
        }
        return h;
    }
}, su = new Float32Array(1), Hy = new Int32Array(su.buffer), ky = class {
    static toHalfFloat(e) {
        e > 65504 && (console.warn("THREE.DataUtils.toHalfFloat(): value exceeds 65504."), e = 65504), su[0] = e;
        let t = Hy[0], n = t >> 16 & 32768, i = t >> 12 & 2047, r = t >> 23 & 255;
        return r < 103 ? n : r > 142 ? (n |= 31744, n |= (r == 255 ? 0 : 1) && t & 8388607, n) : r < 113 ? (i |= 2048, n |= (i >> 114 - r) + (i >> 113 - r & 1), n) : (n |= r - 112 << 10 | i >> 1, n += i & 1, n);
    }
}, b0 = 0, w0 = 1, S0 = 0, T0 = 1, E0 = 2;
function A0(s) {
    return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."), s;
}
function C0(s = []) {
    return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."), s.isMultiMaterial = !0, s.materials = s, s.clone = function() {
        return s.slice();
    }, s;
}
function L0(s, e) {
    return console.warn("THREE.PointCloud has been renamed to THREE.Points."), new zr(s, e);
}
function R0(s) {
    return console.warn("THREE.Particle has been renamed to THREE.Sprite."), new ro(s);
}
function P0(s, e) {
    return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."), new zr(s, e);
}
function I0(s) {
    return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."), new jn(s);
}
function D0(s) {
    return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."), new jn(s);
}
function F0(s) {
    return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."), new jn(s);
}
function N0(s, e, t) {
    return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."), new M(s, e, t);
}
function B0(s, e) {
    return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."), new Ue(s, e).setUsage(ur);
}
function z0(s, e) {
    return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."), new jc(s, e);
}
function U0(s, e) {
    return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."), new Qc(s, e);
}
function O0(s, e) {
    return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."), new Kc(s, e);
}
function H0(s, e) {
    return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."), new eh(s, e);
}
function k0(s, e) {
    return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."), new Ys(s, e);
}
function G0(s, e) {
    return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."), new th(s, e);
}
function V0(s, e) {
    return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."), new Zs(s, e);
}
function W0(s, e) {
    return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."), new de(s, e);
}
function q0(s, e) {
    return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."), new ih(s, e);
}
Ct.create = function(s, e) {
    return console.log("THREE.Curve.create() has been deprecated"), s.prototype = Object.create(Ct.prototype), s.prototype.constructor = s, s.prototype.getPoint = e, s;
};
gr.prototype.fromPoints = function(s) {
    return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(s);
};
function X0(s) {
    return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."), new ru(s);
}
function J0(s, e) {
    return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."), new iu(s, e);
}
function Y0(s, e) {
    return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."), new wt(new _a(s.geometry), new ft({
        color: e !== void 0 ? e : 16777215
    }));
}
nu.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
};
eu.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
};
function Z0(s, e) {
    return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."), new wt(new Ea(s.geometry), new ft({
        color: e !== void 0 ? e : 16777215
    }));
}
bt.prototype.extractUrlBase = function(s) {
    return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), Gs.extractUrlBase(s);
};
bt.Handlers = {
    add: function() {
        console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
    },
    get: function() {
        console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
    }
};
function $0(s) {
    return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."), new Yt(s);
}
function j0(s) {
    return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."), new Nh(s);
}
qi.prototype.center = function(s) {
    return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(s);
};
qi.prototype.empty = function() {
    return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty();
};
qi.prototype.isIntersectionBox = function(s) {
    return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(s);
};
qi.prototype.size = function(s) {
    return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(s);
};
Lt.prototype.center = function(s) {
    return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(s);
};
Lt.prototype.empty = function() {
    return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty();
};
Lt.prototype.isIntersectionBox = function(s) {
    return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(s);
};
Lt.prototype.isIntersectionSphere = function(s) {
    return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(s);
};
Lt.prototype.size = function(s) {
    return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(s);
};
An.prototype.empty = function() {
    return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."), this.isEmpty();
};
Dr.prototype.setFromMatrix = function(s) {
    return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."), this.setFromProjectionMatrix(s);
};
Kh.prototype.center = function(s) {
    return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(s);
};
lt.prototype.flattenToArrayOffset = function(s, e) {
    return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(s, e);
};
lt.prototype.multiplyVector3 = function(s) {
    return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), s.applyMatrix3(this);
};
lt.prototype.multiplyVector3Array = function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
};
lt.prototype.applyToBufferAttribute = function(s) {
    return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."), s.applyMatrix3(this);
};
lt.prototype.applyToVector3Array = function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
};
lt.prototype.getInverse = function(s) {
    return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(s).invert();
};
pe.prototype.extractPosition = function(s) {
    return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(s);
};
pe.prototype.flattenToArrayOffset = function(s, e) {
    return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(s, e);
};
pe.prototype.getPosition = function() {
    return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), new M().setFromMatrixColumn(this, 3);
};
pe.prototype.setRotationFromQuaternion = function(s) {
    return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(s);
};
pe.prototype.multiplyToArray = function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
};
pe.prototype.multiplyVector3 = function(s) {
    return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), s.applyMatrix4(this);
};
pe.prototype.multiplyVector4 = function(s) {
    return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), s.applyMatrix4(this);
};
pe.prototype.multiplyVector3Array = function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
};
pe.prototype.rotateAxis = function(s) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), s.transformDirection(this);
};
pe.prototype.crossVector = function(s) {
    return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), s.applyMatrix4(this);
};
pe.prototype.translate = function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
};
pe.prototype.rotateX = function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
};
pe.prototype.rotateY = function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
};
pe.prototype.rotateZ = function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
};
pe.prototype.rotateByAxis = function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
};
pe.prototype.applyToBufferAttribute = function(s) {
    return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."), s.applyMatrix4(this);
};
pe.prototype.applyToVector3Array = function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
};
pe.prototype.makeFrustum = function(s, e, t, n, i, r) {
    return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(s, e, n, t, i, r);
};
pe.prototype.getInverse = function(s) {
    return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(s).invert();
};
Wt.prototype.isIntersectionLine = function(s) {
    return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(s);
};
gt.prototype.multiplyVector3 = function(s) {
    return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), s.applyQuaternion(this);
};
gt.prototype.inverse = function() {
    return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."), this.invert();
};
Cn.prototype.isIntersectionBox = function(s) {
    return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(s);
};
Cn.prototype.isIntersectionPlane = function(s) {
    return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(s);
};
Cn.prototype.isIntersectionSphere = function(s) {
    return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(s);
};
nt.prototype.area = function() {
    return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea();
};
nt.prototype.barycoordFromPoint = function(s, e) {
    return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(s, e);
};
nt.prototype.midpoint = function(s) {
    return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(s);
};
nt.prototypenormal = function(s) {
    return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(s);
};
nt.prototype.plane = function(s) {
    return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(s);
};
nt.barycoordFromPoint = function(s, e, t, n, i) {
    return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), nt.getBarycoord(s, e, t, n, i);
};
nt.normal = function(s, e, t, n) {
    return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), nt.getNormal(s, e, t, n);
};
Xt.prototype.extractAllPoints = function(s) {
    return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(s);
};
Xt.prototype.extrude = function(s) {
    return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new ln(this, s);
};
Xt.prototype.makeGeometry = function(s) {
    return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Di(this, s);
};
X.prototype.fromAttribute = function(s, e, t) {
    return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(s, e, t);
};
X.prototype.distanceToManhattan = function(s) {
    return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(s);
};
X.prototype.lengthManhattan = function() {
    return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
};
M.prototype.setEulerFromRotationMatrix = function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
};
M.prototype.setEulerFromQuaternion = function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
};
M.prototype.getPositionFromMatrix = function(s) {
    return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(s);
};
M.prototype.getScaleFromMatrix = function(s) {
    return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(s);
};
M.prototype.getColumnFromMatrix = function(s, e) {
    return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(e, s);
};
M.prototype.applyProjection = function(s) {
    return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(s);
};
M.prototype.fromAttribute = function(s, e, t) {
    return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(s, e, t);
};
M.prototype.distanceToManhattan = function(s) {
    return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(s);
};
M.prototype.lengthManhattan = function() {
    return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
};
Ve.prototype.fromAttribute = function(s, e, t) {
    return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(s, e, t);
};
Ve.prototype.lengthManhattan = function() {
    return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
};
Ne.prototype.getChildByName = function(s) {
    return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(s);
};
Ne.prototype.renderDepth = function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
};
Ne.prototype.translate = function(s, e) {
    return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(e, s);
};
Ne.prototype.getWorldRotation = function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
};
Ne.prototype.applyMatrix = function(s) {
    return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(s);
};
Object.defineProperties(Ne.prototype, {
    eulerOrder: {
        get: function() {
            return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order;
        },
        set: function(s) {
            console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = s;
        }
    },
    useQuaternion: {
        get: function() {
            console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        },
        set: function() {
            console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        }
    }
});
st.prototype.setDrawMode = function() {
    console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
};
Object.defineProperties(st.prototype, {
    drawMode: {
        get: function() {
            return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."), Fd;
        },
        set: function() {
            console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
        }
    }
});
so.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
};
ut.prototype.setLens = function(s, e) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), e !== void 0 && (this.filmGauge = e), this.setFocalLength(s);
};
Object.defineProperties(Bt.prototype, {
    onlyShadow: {
        set: function() {
            console.warn("THREE.Light: .onlyShadow has been removed.");
        }
    },
    shadowCameraFov: {
        set: function(s) {
            console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = s;
        }
    },
    shadowCameraLeft: {
        set: function(s) {
            console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = s;
        }
    },
    shadowCameraRight: {
        set: function(s) {
            console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = s;
        }
    },
    shadowCameraTop: {
        set: function(s) {
            console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = s;
        }
    },
    shadowCameraBottom: {
        set: function(s) {
            console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = s;
        }
    },
    shadowCameraNear: {
        set: function(s) {
            console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = s;
        }
    },
    shadowCameraFar: {
        set: function(s) {
            console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = s;
        }
    },
    shadowCameraVisible: {
        set: function() {
            console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
        }
    },
    shadowBias: {
        set: function(s) {
            console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = s;
        }
    },
    shadowDarkness: {
        set: function() {
            console.warn("THREE.Light: .shadowDarkness has been removed.");
        }
    },
    shadowMapWidth: {
        set: function(s) {
            console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = s;
        }
    },
    shadowMapHeight: {
        set: function(s) {
            console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = s;
        }
    }
});
Object.defineProperties(Ue.prototype, {
    length: {
        get: function() {
            return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length;
        }
    },
    dynamic: {
        get: function() {
            return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.usage === ur;
        },
        set: function() {
            console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.setUsage(ur);
        }
    }
});
Ue.prototype.setDynamic = function(s) {
    return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(s === !0 ? ur : hr), this;
};
Ue.prototype.copyIndicesArray = function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
}, Ue.prototype.setArray = function() {
    console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
};
_e.prototype.addIndex = function(s) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(s);
};
_e.prototype.addAttribute = function(s, e) {
    return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."), !(e && e.isBufferAttribute) && !(e && e.isInterleavedBufferAttribute) ? (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(s, new Ue(arguments[1], arguments[2]))) : s === "index" ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(e), this) : this.setAttribute(s, e);
};
_e.prototype.addDrawCall = function(s, e, t) {
    t !== void 0 && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(s, e);
};
_e.prototype.clearDrawCalls = function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups();
};
_e.prototype.computeOffsets = function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
};
_e.prototype.removeAttribute = function(s) {
    return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."), this.deleteAttribute(s);
};
_e.prototype.applyMatrix = function(s) {
    return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(s);
};
Object.defineProperties(_e.prototype, {
    drawcalls: {
        get: function() {
            return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups;
        }
    },
    offsets: {
        get: function() {
            return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups;
        }
    }
});
$n.prototype.setDynamic = function(s) {
    return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(s === !0 ? ur : hr), this;
};
$n.prototype.setArray = function() {
    console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
};
ln.prototype.getArrays = function() {
    console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.");
};
ln.prototype.addShapeList = function() {
    console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.");
};
ln.prototype.addShape = function() {
    console.error("THREE.ExtrudeGeometry: .addShape() has been removed.");
};
no.prototype.dispose = function() {
    console.error("THREE.Scene: .dispose() has been removed.");
};
go.prototype.onUpdate = function() {
    return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this;
};
Object.defineProperties(dt.prototype, {
    wrapAround: {
        get: function() {
            console.warn("THREE.Material: .wrapAround has been removed.");
        },
        set: function() {
            console.warn("THREE.Material: .wrapAround has been removed.");
        }
    },
    overdraw: {
        get: function() {
            console.warn("THREE.Material: .overdraw has been removed.");
        },
        set: function() {
            console.warn("THREE.Material: .overdraw has been removed.");
        }
    },
    wrapRGB: {
        get: function() {
            return console.warn("THREE.Material: .wrapRGB has been removed."), new ae;
        }
    },
    shading: {
        get: function() {
            console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        },
        set: function(s) {
            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = s === kc;
        }
    },
    stencilMask: {
        get: function() {
            return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask;
        },
        set: function(s) {
            console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask = s;
        }
    },
    vertexTangents: {
        get: function() {
            console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
        },
        set: function() {
            console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
        }
    }
});
Object.defineProperties(sn.prototype, {
    derivatives: {
        get: function() {
            return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives;
        },
        set: function(s) {
            console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = s;
        }
    }
});
qe.prototype.clearTarget = function(s, e, t, n) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."), this.setRenderTarget(s), this.clear(e, t, n);
};
qe.prototype.animate = function(s) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(s);
};
qe.prototype.getCurrentRenderTarget = function() {
    return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget();
};
qe.prototype.getMaxAnisotropy = function() {
    return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy();
};
qe.prototype.getPrecision = function() {
    return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision;
};
qe.prototype.resetGLState = function() {
    return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset();
};
qe.prototype.supportsFloatTextures = function() {
    return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float");
};
qe.prototype.supportsHalfFloatTextures = function() {
    return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float");
};
qe.prototype.supportsStandardDerivatives = function() {
    return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives");
};
qe.prototype.supportsCompressedTextureS3TC = function() {
    return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc");
};
qe.prototype.supportsCompressedTexturePVRTC = function() {
    return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc");
};
qe.prototype.supportsBlendMinMax = function() {
    return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax");
};
qe.prototype.supportsVertexTextures = function() {
    return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures;
};
qe.prototype.supportsInstancedArrays = function() {
    return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays");
};
qe.prototype.enableScissorTest = function(s) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(s);
};
qe.prototype.initMaterial = function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
};
qe.prototype.addPrePlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
};
qe.prototype.addPostPlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
};
qe.prototype.updateShadowMap = function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
};
qe.prototype.setFaceCulling = function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
};
qe.prototype.allocTextureUnit = function() {
    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
};
qe.prototype.setTexture = function() {
    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
};
qe.prototype.setTexture2D = function() {
    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
};
qe.prototype.setTextureCube = function() {
    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
};
qe.prototype.getActiveMipMapLevel = function() {
    return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."), this.getActiveMipmapLevel();
};
Object.defineProperties(qe.prototype, {
    shadowMapEnabled: {
        get: function() {
            return this.shadowMap.enabled;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = s;
        }
    },
    shadowMapType: {
        get: function() {
            return this.shadowMap.type;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = s;
        }
    },
    shadowMapCullFace: {
        get: function() {
            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        },
        set: function() {
            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        }
    },
    context: {
        get: function() {
            return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."), this.getContext();
        }
    },
    vr: {
        get: function() {
            return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"), this.xr;
        }
    },
    gammaInput: {
        get: function() {
            return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."), !1;
        },
        set: function() {
            console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
        }
    },
    gammaOutput: {
        get: function() {
            return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), !1;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), this.outputEncoding = s === !0 ? Oi : Nt;
        }
    },
    toneMappingWhitePoint: {
        get: function() {
            return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."), 1;
        },
        set: function() {
            console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
        }
    },
    gammaFactor: {
        get: function() {
            return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."), 2;
        },
        set: function() {
            console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.");
        }
    }
});
Object.defineProperties(yh.prototype, {
    cullFace: {
        get: function() {
            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        },
        set: function() {
            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        }
    },
    renderReverseSided: {
        get: function() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        },
        set: function() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        }
    },
    renderSingleSided: {
        get: function() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        },
        set: function() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        }
    }
});
function Q0(s, e, t) {
    return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."), new js(s, t);
}
Object.defineProperties(At.prototype, {
    wrapS: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = s;
        }
    },
    wrapT: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = s;
        }
    },
    magFilter: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = s;
        }
    },
    minFilter: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = s;
        }
    },
    anisotropy: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = s;
        }
    },
    offset: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = s;
        }
    },
    repeat: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = s;
        }
    },
    format: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = s;
        }
    },
    type: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = s;
        }
    },
    generateMipmaps: {
        get: function() {
            return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps;
        },
        set: function(s) {
            console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = s;
        }
    }
});
Za.prototype.load = function(s) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    let e = this;
    return new kh().load(s, function(n) {
        e.setBuffer(n);
    }), this;
};
qh.prototype.getData = function() {
    return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData();
};
$s.prototype.updateCubeMap = function(s, e) {
    return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(s, e);
};
$s.prototype.clear = function(s, e, t, n) {
    return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."), this.renderTarget.clear(s, e, t, n);
};
Yn.crossOrigin = void 0;
Yn.loadTexture = function(s, e, t, n) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    let i = new Bh;
    i.setCrossOrigin(this.crossOrigin);
    let r = i.load(s, t, void 0, n);
    return e && (r.mapping = e), r;
};
Yn.loadTextureCube = function(s, e, t, n) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    let i = new Fh;
    i.setCrossOrigin(this.crossOrigin);
    let r = i.load(s, t, void 0, n);
    return e && (r.mapping = e), r;
};
Yn.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
};
Yn.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
};
function K0() {
    console.error("THREE.CanvasRenderer has been removed");
}
function ev() {
    console.error("THREE.JSONLoader has been removed.");
}
var tv = {
    createMultiMaterialObject: function() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
    },
    detach: function() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
    },
    attach: function() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
    }
};
function nv() {
    console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js");
}
function iv() {
    return console.error("THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js"), new _e;
}
function rv() {
    return console.error("THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js"), new _e;
}
function sv() {
    console.error("THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js");
}
function ov() {
    console.error("THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js");
}
function av() {
    console.error("THREE.ImmediateRenderObject has been removed.");
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
        revision: ca
    }
}));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = ca);
const mod = {
    ACESFilmicToneMapping: Uu,
    AddEquation: _i,
    AddOperation: Fu,
    AdditiveAnimationBlendMode: qc,
    AdditiveBlending: nl,
    AlphaFormat: Xu,
    AlwaysDepth: Au,
    AlwaysStencilFunc: Ud,
    AmbientLight: qa,
    AmbientLightProbe: Vh,
    AnimationClip: Lr,
    AnimationLoader: cy,
    AnimationMixer: $h,
    AnimationObjectGroup: Yh,
    AnimationUtils: Ze,
    ArcCurve: Ma,
    ArrayCamera: ga,
    ArrowHelper: Uy,
    Audio: Za,
    AudioAnalyser: qh,
    AudioContext: Hh,
    AudioListener: my,
    AudioLoader: kh,
    AxesHelper: ru,
    AxisHelper: X0,
    BackSide: it,
    BasicDepthPacking: Nd,
    BasicShadowMap: qy,
    BinaryTextureLoader: j0,
    Bone: oo,
    BooleanKeyframeTrack: Qn,
    BoundingBoxHelper: J0,
    Box2: qi,
    Box3: Lt,
    Box3Helper: By,
    BoxBufferGeometry: wn,
    BoxGeometry: wn,
    BoxHelper: iu,
    BufferAttribute: Ue,
    BufferGeometry: _e,
    BufferGeometryLoader: Uh,
    ByteType: Hu,
    Cache: Ni,
    Camera: Ir,
    CameraHelper: Ny,
    CanvasRenderer: K0,
    CanvasTexture: Th,
    CatmullRomCurve3: wa,
    CineonToneMapping: zu,
    CircleBufferGeometry: fr,
    CircleGeometry: fr,
    ClampToEdgeWrapping: vt,
    Clock: Wh,
    Color: ae,
    ColorKeyframeTrack: Ba,
    CompressedTexture: va,
    CompressedTextureLoader: hy,
    ConeBufferGeometry: pr,
    ConeGeometry: pr,
    CubeCamera: $s,
    CubeReflectionMapping: Bi,
    CubeRefractionMapping: zi,
    CubeTexture: ki,
    CubeTextureLoader: Fh,
    CubeUVReflectionMapping: Pr,
    CubeUVRefractionMapping: Ws,
    CubicBezierCurve: lo,
    CubicBezierCurve3: Sa,
    CubicInterpolant: Ph,
    CullFaceBack: tl,
    CullFaceFront: du,
    CullFaceFrontBack: Wy,
    CullFaceNone: uu,
    Curve: Ct,
    CurvePath: Ah,
    CustomBlending: pu,
    CustomToneMapping: Ou,
    CylinderBufferGeometry: Jn,
    CylinderGeometry: Jn,
    Cylindrical: Cy,
    DataTexture: qn,
    DataTexture2DArray: Qs,
    DataTexture3D: ma,
    DataTextureLoader: Nh,
    DataUtils: ky,
    DecrementStencilOp: n0,
    DecrementWrapStencilOp: r0,
    DefaultLoadingManager: ly,
    DepthFormat: Vn,
    DepthStencilFormat: Li,
    DepthTexture: ks,
    DirectionalLight: Wa,
    DirectionalLightHelper: Fy,
    DiscreteInterpolant: Ih,
    DodecahedronBufferGeometry: mr,
    DodecahedronGeometry: mr,
    DoubleSide: Ci,
    DstAlphaFactor: Mu,
    DstColorFactor: wu,
    DynamicBufferAttribute: B0,
    DynamicCopyUsage: y0,
    DynamicDrawUsage: ur,
    DynamicReadUsage: m0,
    EdgesGeometry: _a,
    EdgesHelper: Y0,
    EllipseCurve: Ur,
    EqualDepth: Lu,
    EqualStencilFunc: l0,
    EquirectangularReflectionMapping: Ds,
    EquirectangularRefractionMapping: Fs,
    Euler: Zn,
    EventDispatcher: En,
    ExtrudeBufferGeometry: ln,
    ExtrudeGeometry: ln,
    FaceColors: T0,
    FileLoader: Yt,
    FlatShading: kc,
    Float16BufferAttribute: nh,
    Float32Attribute: W0,
    Float32BufferAttribute: de,
    Float64Attribute: q0,
    Float64BufferAttribute: ih,
    FloatType: nn,
    Fog: Br,
    FogExp2: Nr,
    Font: ov,
    FontLoader: sv,
    FramebufferTexture: Sh,
    FrontSide: Ai,
    Frustum: Dr,
    GLBufferAttribute: Qh,
    GLSL1: _0,
    GLSL3: xl,
    GreaterDepth: Pu,
    GreaterEqualDepth: Ru,
    GreaterEqualStencilFunc: d0,
    GreaterStencilFunc: h0,
    GridHelper: nu,
    Group: Hn,
    HalfFloatType: kn,
    HemisphereLight: Ua,
    HemisphereLightHelper: Iy,
    HemisphereLightProbe: Gh,
    IcosahedronBufferGeometry: _r,
    IcosahedronGeometry: _r,
    ImageBitmapLoader: Oh,
    ImageLoader: Rr,
    ImageUtils: Yn,
    ImmediateRenderObject: av,
    IncrementStencilOp: t0,
    IncrementWrapStencilOp: i0,
    InstancedBufferAttribute: Xn,
    InstancedBufferGeometry: Ya,
    InstancedInterleavedBuffer: jh,
    InstancedMesh: xa,
    Int16Attribute: H0,
    Int16BufferAttribute: eh,
    Int32Attribute: G0,
    Int32BufferAttribute: th,
    Int8Attribute: z0,
    Int8BufferAttribute: jc,
    IntType: Gu,
    InterleavedBuffer: $n,
    InterleavedBufferAttribute: Sn,
    Interpolant: cn,
    InterpolateDiscrete: zs,
    InterpolateLinear: Us,
    InterpolateSmooth: yo,
    InvertStencilOp: s0,
    JSONLoader: ev,
    KeepStencilOp: vo,
    KeyframeTrack: zt,
    LOD: bh,
    LatheBufferGeometry: Mr,
    LatheGeometry: Mr,
    Layers: Js,
    LensFlare: nv,
    LessDepth: Cu,
    LessEqualDepth: ea,
    LessEqualStencilFunc: c0,
    LessStencilFunc: a0,
    Light: Bt,
    LightProbe: Hr,
    Line: on,
    Line3: Kh,
    LineBasicMaterial: ft,
    LineCurve: Or,
    LineCurve3: Eh,
    LineDashedMaterial: Fa,
    LineLoop: ya,
    LinePieces: w0,
    LineSegments: wt,
    LineStrip: b0,
    LinearEncoding: Nt,
    LinearFilter: tt,
    LinearInterpolant: Na,
    LinearMipMapLinearFilter: $y,
    LinearMipMapNearestFilter: Zy,
    LinearMipmapLinearFilter: Ui,
    LinearMipmapNearestFilter: Wc,
    LinearToneMapping: Nu,
    Loader: bt,
    LoaderUtils: Gs,
    LoadingManager: za,
    LoopOnce: Pd,
    LoopPingPong: Dd,
    LoopRepeat: Id,
    LuminanceAlphaFormat: Yu,
    LuminanceFormat: Ju,
    MOUSE: Gy,
    Material: dt,
    MaterialLoader: zh,
    Math: M0,
    MathUtils: M0,
    Matrix3: lt,
    Matrix4: pe,
    MaxEquation: ol,
    Mesh: st,
    MeshBasicMaterial: hn,
    MeshDepthMaterial: eo,
    MeshDistanceMaterial: to,
    MeshFaceMaterial: A0,
    MeshLambertMaterial: Ia,
    MeshMatcapMaterial: Da,
    MeshNormalMaterial: Pa,
    MeshPhongMaterial: La,
    MeshPhysicalMaterial: Ca,
    MeshStandardMaterial: po,
    MeshToonMaterial: Ra,
    MinEquation: sl,
    MirroredRepeatWrapping: Bs,
    MixOperation: Du,
    MultiMaterial: C0,
    MultiplyBlending: rl,
    MultiplyOperation: Vs,
    NearestFilter: rt,
    NearestMipMapLinearFilter: Yy,
    NearestMipMapNearestFilter: Jy,
    NearestMipmapLinearFilter: na,
    NearestMipmapNearestFilter: ta,
    NeverDepth: Eu,
    NeverStencilFunc: o0,
    NoBlending: vn,
    NoColors: S0,
    NoToneMapping: _n,
    NormalAnimationBlendMode: ua,
    NormalBlending: sr,
    NotEqualDepth: Iu,
    NotEqualStencilFunc: u0,
    NumberKeyframeTrack: Ar,
    Object3D: Ne,
    ObjectLoader: uy,
    ObjectSpaceNormalMap: zd,
    OctahedronBufferGeometry: Ii,
    OctahedronGeometry: Ii,
    OneFactor: yu,
    OneMinusDstAlphaFactor: bu,
    OneMinusDstColorFactor: Su,
    OneMinusSrcAlphaFactor: Vc,
    OneMinusSrcColorFactor: _u,
    OrthographicCamera: Fr,
    PCFShadowMap: Hc,
    PCFSoftShadowMap: fu,
    PMREMGenerator: ah,
    ParametricGeometry: iv,
    Particle: R0,
    ParticleBasicMaterial: D0,
    ParticleSystem: P0,
    ParticleSystemMaterial: F0,
    Path: gr,
    PerspectiveCamera: ut,
    Plane: Wt,
    PlaneBufferGeometry: Pi,
    PlaneGeometry: Pi,
    PlaneHelper: zy,
    PointCloud: L0,
    PointCloudMaterial: I0,
    PointLight: Ga,
    PointLightHelper: Ry,
    Points: zr,
    PointsMaterial: jn,
    PolarGridHelper: Dy,
    PolyhedronBufferGeometry: an,
    PolyhedronGeometry: an,
    PositionalAudio: xy,
    PropertyBinding: ke,
    PropertyMixer: Xh,
    QuadraticBezierCurve: co,
    QuadraticBezierCurve3: ho,
    Quaternion: gt,
    QuaternionKeyframeTrack: Wi,
    QuaternionLinearInterpolant: Dh,
    REVISION: ca,
    RGBADepthPacking: Bd,
    RGBAFormat: ct,
    RGBAIntegerFormat: ed,
    RGBA_ASTC_10x10_Format: fd,
    RGBA_ASTC_10x5_Format: hd,
    RGBA_ASTC_10x6_Format: ud,
    RGBA_ASTC_10x8_Format: dd,
    RGBA_ASTC_12x10_Format: pd,
    RGBA_ASTC_12x12_Format: md,
    RGBA_ASTC_4x4_Format: nd,
    RGBA_ASTC_5x4_Format: id,
    RGBA_ASTC_5x5_Format: rd,
    RGBA_ASTC_6x5_Format: sd,
    RGBA_ASTC_6x6_Format: od,
    RGBA_ASTC_8x5_Format: ad,
    RGBA_ASTC_8x6_Format: ld,
    RGBA_ASTC_8x8_Format: cd,
    RGBA_BPTC_Format: gd,
    RGBA_ETC2_EAC_Format: gl,
    RGBA_PVRTC_2BPPV1_Format: pl,
    RGBA_PVRTC_4BPPV1_Format: fl,
    RGBA_S3TC_DXT1_Format: ll,
    RGBA_S3TC_DXT3_Format: cl,
    RGBA_S3TC_DXT5_Format: hl,
    RGBFormat: Gn,
    RGBIntegerFormat: Ku,
    RGB_ETC1_Format: td,
    RGB_ETC2_Format: ml,
    RGB_PVRTC_2BPPV1_Format: dl,
    RGB_PVRTC_4BPPV1_Format: ul,
    RGB_S3TC_DXT1_Format: al,
    RGFormat: ju,
    RGIntegerFormat: Qu,
    RawShaderMaterial: Gi,
    Ray: Cn,
    Raycaster: Ey,
    RectAreaLight: Xa,
    RedFormat: Zu,
    RedIntegerFormat: $u,
    ReinhardToneMapping: Bu,
    RepeatWrapping: Ns,
    ReplaceStencilOp: e0,
    ReverseSubtractEquation: gu,
    RingBufferGeometry: br,
    RingGeometry: br,
    SRGB8_ALPHA8_ASTC_10x10_Format: Cd,
    SRGB8_ALPHA8_ASTC_10x5_Format: Td,
    SRGB8_ALPHA8_ASTC_10x6_Format: Ed,
    SRGB8_ALPHA8_ASTC_10x8_Format: Ad,
    SRGB8_ALPHA8_ASTC_12x10_Format: Ld,
    SRGB8_ALPHA8_ASTC_12x12_Format: Rd,
    SRGB8_ALPHA8_ASTC_4x4_Format: xd,
    SRGB8_ALPHA8_ASTC_5x4_Format: yd,
    SRGB8_ALPHA8_ASTC_5x5_Format: vd,
    SRGB8_ALPHA8_ASTC_6x5_Format: _d,
    SRGB8_ALPHA8_ASTC_6x6_Format: Md,
    SRGB8_ALPHA8_ASTC_8x5_Format: bd,
    SRGB8_ALPHA8_ASTC_8x6_Format: wd,
    SRGB8_ALPHA8_ASTC_8x8_Format: Sd,
    Scene: no,
    SceneUtils: tv,
    ShaderChunk: Fe,
    ShaderLib: qt,
    ShaderMaterial: sn,
    ShadowMaterial: Aa,
    Shape: Xt,
    ShapeBufferGeometry: Di,
    ShapeGeometry: Di,
    ShapePath: Oy,
    ShapeUtils: Jt,
    ShortType: ku,
    Skeleton: ao,
    SkeletonHelper: eu,
    SkinnedMesh: so,
    SmoothShading: Xy,
    Sphere: An,
    SphereBufferGeometry: Fi,
    SphereGeometry: Fi,
    Spherical: Ay,
    SphericalHarmonics3: Ja,
    SplineCurve: uo,
    SpotLight: Ha,
    SpotLightHelper: Ly,
    Sprite: ro,
    SpriteMaterial: io,
    SrcAlphaFactor: Gc,
    SrcAlphaSaturateFactor: Tu,
    SrcColorFactor: vu,
    StaticCopyUsage: x0,
    StaticDrawUsage: hr,
    StaticReadUsage: p0,
    StereoCamera: fy,
    StreamCopyUsage: v0,
    StreamDrawUsage: f0,
    StreamReadUsage: g0,
    StringKeyframeTrack: Kn,
    SubtractEquation: mu,
    SubtractiveBlending: il,
    TOUCH: Vy,
    TangentSpaceNormalMap: Hi,
    TetrahedronBufferGeometry: wr,
    TetrahedronGeometry: wr,
    TextGeometry: rv,
    Texture: ot,
    TextureLoader: Bh,
    TorusBufferGeometry: Sr,
    TorusGeometry: Sr,
    TorusKnotBufferGeometry: Tr,
    TorusKnotGeometry: Tr,
    Triangle: nt,
    TriangleFanDrawMode: Qy,
    TriangleStripDrawMode: jy,
    TrianglesDrawMode: Fd,
    TubeBufferGeometry: Er,
    TubeGeometry: Er,
    UVMapping: ha,
    Uint16Attribute: k0,
    Uint16BufferAttribute: Ys,
    Uint32Attribute: V0,
    Uint32BufferAttribute: Zs,
    Uint8Attribute: U0,
    Uint8BufferAttribute: Qc,
    Uint8ClampedAttribute: O0,
    Uint8ClampedBufferAttribute: Kc,
    Uniform: go,
    UniformsLib: ie,
    UniformsUtils: uf,
    UnsignedByteType: rn,
    UnsignedInt248Type: Ti,
    UnsignedIntType: Ps,
    UnsignedShort4444Type: Vu,
    UnsignedShort5551Type: Wu,
    UnsignedShort565Type: qu,
    UnsignedShortType: cr,
    VSMShadowMap: ir,
    Vector2: X,
    Vector3: M,
    Vector4: Ve,
    VectorKeyframeTrack: Cr,
    Vertex: N0,
    VertexColors: E0,
    VideoTexture: wh,
    WebGL1Renderer: _h,
    WebGLCubeRenderTarget: js,
    WebGLMultipleRenderTargets: Zc,
    WebGLMultisampleRenderTarget: Xs,
    WebGLRenderTarget: At,
    WebGLRenderTargetCube: Q0,
    WebGLRenderer: qe,
    WebGLUtils: Ex,
    WireframeGeometry: Ea,
    WireframeHelper: Z0,
    WrapAroundEnding: Os,
    XHRLoader: $0,
    ZeroCurvatureEnding: Mi,
    ZeroFactor: xu,
    ZeroSlopeEnding: bi,
    ZeroStencilOp: Ky,
    sRGBEncoding: Oi
};
function getWebGLErrorMessage() {
    return getErrorMessage(1);
}
function getErrorMessage(version) {
    var names = {
        1: "WebGL",
        2: "WebGL 2"
    };
    var contexts = {
        1: window.WebGLRenderingContext,
        2: window.WebGL2RenderingContext
    };
    var message = 'Your $0 does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">$1</a>';
    var element = document.createElement("div");
    element.id = "webglmessage";
    element.style.fontFamily = "monospace";
    element.style.fontSize = "13px";
    element.style.fontWeight = "normal";
    element.style.textAlign = "center";
    element.style.background = "#fff";
    element.style.color = "#000";
    element.style.padding = "1.5em";
    element.style.width = "400px";
    element.style.margin = "5em auto 0";
    if (contexts[version]) {
        message = message.replace("$0", "graphics card");
    } else {
        message = message.replace("$0", "browser");
    }
    message = message.replace("$1", names[version]);
    element.innerHTML = message;
    return element;
}
const pixelRatio = window.devicePixelRatio || 1.0;
function event2scene_pixel(scene, event) {
    const { canvas  } = scene.screen;
    const rect = canvas.getBoundingClientRect();
    const x = (event.clientX - rect.left) * pixelRatio;
    const y = (rect.height - (event.clientY - rect.top)) * pixelRatio;
    return [
        x,
        y
    ];
}
function Identity4x4() {
    return new pe();
}
function in_scene(scene, mouse_event) {
    const [x, y] = event2scene_pixel(scene, mouse_event);
    const [sx, sy, sw, sh] = scene.pixelarea.value;
    return x >= sx && x < sx + sw && y >= sy && y < sy + sh;
}
function attach_3d_camera(canvas, makie_camera, cam3d, scene) {
    if (cam3d === undefined) {
        return;
    }
    const [w, h] = makie_camera.resolution.value;
    const camera = new ut(cam3d.fov, w / h, cam3d.near, cam3d.far);
    const center = new M(...cam3d.lookat);
    camera.up = new M(...cam3d.upvector);
    camera.position.set(...cam3d.eyeposition);
    camera.lookAt(center);
    function update() {
        const view = camera.matrixWorldInverse;
        const projection = camera.projectionMatrix;
        const [width, height] = cam3d.resolution.value;
        const [x, y, z] = camera.position;
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        camera.updateWorldMatrix();
        makie_camera.update_matrices(view.elements, projection.elements, [
            width,
            height
        ], [
            x,
            y,
            z
        ]);
    }
    cam3d.resolution.on(update);
    function addMouseHandler(domObject, drag, zoomIn, zoomOut) {
        let startDragX = null;
        let startDragY = null;
        function mouseWheelHandler(e) {
            e = window.event || e;
            if (!in_scene(scene, e)) {
                return;
            }
            const delta = Math.sign(e.deltaY);
            if (delta == -1) {
                zoomOut();
            } else if (delta == 1) {
                zoomIn();
            }
            e.preventDefault();
        }
        function mouseDownHandler(e) {
            if (!in_scene(scene, e)) {
                return;
            }
            startDragX = e.clientX;
            startDragY = e.clientY;
            e.preventDefault();
        }
        function mouseMoveHandler(e) {
            if (!in_scene(scene, e)) {
                return;
            }
            if (startDragX === null || startDragY === null) return;
            if (drag) drag(e.clientX - startDragX, e.clientY - startDragY);
            startDragX = e.clientX;
            startDragY = e.clientY;
            e.preventDefault();
        }
        function mouseUpHandler(e) {
            if (!in_scene(scene, e)) {
                return;
            }
            mouseMoveHandler.call(this, e);
            startDragX = null;
            startDragY = null;
            e.preventDefault();
        }
        domObject.addEventListener("wheel", mouseWheelHandler);
        domObject.addEventListener("mousedown", mouseDownHandler);
        domObject.addEventListener("mousemove", mouseMoveHandler);
        domObject.addEventListener("mouseup", mouseUpHandler);
    }
    function drag(deltaX, deltaY) {
        const radPerPixel = Math.PI / 450;
        const deltaPhi = radPerPixel * deltaX;
        const deltaTheta = radPerPixel * deltaY;
        const pos = camera.position.sub(center);
        const radius = pos.length();
        let theta = Math.acos(pos.z / radius);
        let phi = Math.atan2(pos.y, pos.x);
        theta = Math.min(Math.max(theta - deltaTheta, 0), Math.PI);
        phi -= deltaPhi;
        pos.x = radius * Math.sin(theta) * Math.cos(phi);
        pos.y = radius * Math.sin(theta) * Math.sin(phi);
        pos.z = radius * Math.cos(theta);
        camera.position.add(center);
        camera.lookAt(center);
        update();
    }
    function zoomIn() {
        camera.position.sub(center).multiplyScalar(0.9).add(center);
        update();
    }
    function zoomOut() {
        camera.position.sub(center).multiplyScalar(1.1).add(center);
        update();
    }
    addMouseHandler(canvas, drag, zoomIn, zoomOut);
}
function mul(a, b) {
    return b.clone().multiply(a);
}
function orthographicprojection(left, right, bottom, top, znear, zfar) {
    return [
        2 / (right - left),
        0,
        0,
        0,
        0,
        2 / (top - bottom),
        0,
        0,
        0,
        0,
        -2 / (zfar - znear),
        0,
        -(right + left) / (right - left),
        -(top + bottom) / (top - bottom),
        -(zfar + znear) / (zfar - znear),
        1
    ];
}
function pixel_space_inverse(w, h, near) {
    return [
        0.5 * w,
        0,
        0,
        0,
        0,
        0.5 * h,
        0,
        0,
        0,
        0,
        near,
        0,
        0.5 * w,
        0.5 * h,
        0,
        1
    ];
}
function relative_space() {
    const relative = Identity4x4();
    relative.fromArray([
        2,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        1,
        0,
        -1,
        -1,
        0,
        1
    ]);
    return relative;
}
class MakieCamera {
    constructor(){
        this.view = new go(Identity4x4());
        this.projection = new go(Identity4x4());
        this.projectionview = new go(Identity4x4());
        this.pixel_space = new go(Identity4x4());
        this.pixel_space_inverse = new go(Identity4x4());
        this.projectionview_inverse = new go(Identity4x4());
        this.relative_space = new go(relative_space());
        this.relative_inverse = new go(relative_space().invert());
        this.clip_space = new go(Identity4x4());
        this.resolution = new go(new X());
        this.eyeposition = new go(new M());
        this.preprojections = {};
    }
    calculate_matrices() {
        const [w, h] = this.resolution.value;
        const nearclip = -10_000;
        this.pixel_space.value.fromArray(orthographicprojection(0, w, 0, h, nearclip, 10_000));
        this.pixel_space_inverse.value.fromArray(pixel_space_inverse(w, h, nearclip));
        const proj_view = mul(this.view.value, this.projection.value);
        this.projectionview.value = proj_view;
        this.projectionview_inverse.value = proj_view.clone().invert();
        Object.keys(this.preprojections).forEach((key)=>{
            const [space, markerspace] = key.split(",");
            this.preprojections[key].value = this.calculate_preprojection_matrix(space, markerspace);
        });
    }
    update_matrices(view, projection, resolution, eyepos) {
        this.view.value.fromArray(view);
        this.projection.value.fromArray(projection);
        this.resolution.value.fromArray(resolution);
        this.eyeposition.value.fromArray(eyepos);
        this.calculate_matrices();
        return;
    }
    clip_to_space(space) {
        if (space === "data") {
            return this.projectionview_inverse.value;
        } else if (space === "pixel") {
            return this.pixel_space_inverse.value;
        } else if (space === "relative") {
            return this.relative_inverse.value;
        } else if (space === "clip") {
            return this.clip_space.value;
        } else {
            throw new Error(`Space ${space} not recognized`);
        }
    }
    space_to_clip(space) {
        if (space === "data") {
            return this.projectionview.value;
        } else if (space === "pixel") {
            return this.pixel_space.value;
        } else if (space === "relative") {
            return this.relative_space.value;
        } else if (space === "clip") {
            return this.clip_space.value;
        } else {
            throw new Error(`Space ${space} not recognized`);
        }
    }
    calculate_preprojection_matrix(space, markerspace) {
        const cp = this.clip_to_space(markerspace);
        const sc = this.space_to_clip(space);
        return mul(sc, cp);
    }
    preprojection_matrix(space, markerspace) {
        const key = [
            space,
            markerspace
        ];
        const matrix_uniform = this.preprojections[key];
        if (matrix_uniform) {
            return matrix_uniform;
        } else {
            const matrix = this.calculate_preprojection_matrix(space, markerspace);
            const uniform = new go(matrix);
            this.preprojections[key] = uniform;
            return uniform;
        }
    }
}
const scene_cache = {};
const plot_cache = {};
const TEXTURE_ATLAS = [
    undefined
];
function add_scene(scene_id, three_scene) {
    scene_cache[scene_id] = three_scene;
}
function find_scene(scene_id) {
    return scene_cache[scene_id];
}
function delete_scene(scene_id) {
    const scene = scene_cache[scene_id];
    if (!scene) {
        return;
    }
    while(scene.children.length > 0){
        scene.remove(scene.children[0]);
    }
    delete scene_cache[scene_id];
}
function find_plots(plot_uuids) {
    const plots = [];
    plot_uuids.forEach((id)=>{
        const plot = plot_cache[id];
        if (plot) {
            plots.push(plot);
        }
    });
    return plots;
}
function delete_scenes(scene_uuids, plot_uuids) {
    plot_uuids.forEach((plot_id)=>{
        delete plot_cache[plot_id];
    });
    scene_uuids.forEach((scene_id)=>{
        delete_scene(scene_id);
    });
}
function insert_plot(scene_id, plot_data) {
    const scene = find_scene(scene_id);
    plot_data.forEach((plot)=>{
        add_plot(scene, plot);
    });
}
function delete_plots(scene_id, plot_uuids) {
    console.log(`deleting plots!: ${plot_uuids}`);
    const scene = find_scene(scene_id);
    const plots = find_plots(plot_uuids);
    plots.forEach((p)=>{
        scene.remove(p);
        delete plot_cache[p];
    });
}
function convert_texture(data) {
    const tex = create_texture(data);
    tex.needsUpdate = true;
    tex.minFilter = mod[data.minFilter];
    tex.magFilter = mod[data.magFilter];
    tex.anisotropy = data.anisotropy;
    tex.wrapS = mod[data.wrapS];
    if (data.size.length > 1) {
        tex.wrapT = mod[data.wrapT];
    }
    if (data.size.length > 2) {
        tex.wrapR = mod[data.wrapR];
    }
    return tex;
}
function is_three_fixed_array(value) {
    return value instanceof mod.Vector2 || value instanceof mod.Vector3 || value instanceof mod.Vector4 || value instanceof mod.Matrix4;
}
function to_uniform(data) {
    if (data.type !== undefined) {
        if (data.type == "Sampler") {
            return convert_texture(data);
        }
        throw new Error(`Type ${data.type} not known`);
    }
    if (Array.isArray(data) || ArrayBuffer.isView(data)) {
        if (!data.every((x)=>typeof x === "number")) {
            return data;
        }
        if (data.length == 2) {
            return new mod.Vector2().fromArray(data);
        }
        if (data.length == 3) {
            return new mod.Vector3().fromArray(data);
        }
        if (data.length == 4) {
            return new mod.Vector4().fromArray(data);
        }
        if (data.length == 16) {
            const mat = new mod.Matrix4();
            mat.fromArray(data);
            return mat;
        }
    }
    return data;
}
function deserialize_uniforms(data) {
    const result = {};
    for(const name in data){
        const value = data[name];
        if (value instanceof mod.Uniform) {
            result[name] = value;
        } else {
            const ser = to_uniform(value);
            result[name] = new mod.Uniform(ser);
        }
    }
    return result;
}
function deserialize_plot(data) {
    let mesh;
    if ("instance_attributes" in data) {
        mesh = create_instanced_mesh(data);
    } else {
        mesh = create_mesh(data);
    }
    mesh.name = data.name;
    mesh.frustumCulled = false;
    mesh.matrixAutoUpdate = false;
    mesh.plot_uuid = data.uuid;
    const update_visible = (v)=>{
        mesh.visible = v;
        return;
    };
    update_visible(data.visible.value);
    data.visible.on(update_visible);
    connect_uniforms(mesh, data.uniform_updater);
    connect_attributes(mesh, data.attribute_updater);
    return mesh;
}
const ON_NEXT_INSERT = new Set();
function on_next_insert(f) {
    ON_NEXT_INSERT.add(f);
}
function add_plot(scene, plot_data) {
    const cam = scene.wgl_camera;
    const identity = new mod.Uniform(new mod.Matrix4());
    if (plot_data.cam_space == "data") {
        plot_data.uniforms.view = cam.view;
        plot_data.uniforms.projection = cam.projection;
        plot_data.uniforms.projectionview = cam.projectionview;
        plot_data.uniforms.eyeposition = cam.eyeposition;
    } else if (plot_data.cam_space == "pixel") {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = cam.pixel_space;
        plot_data.uniforms.projectionview = cam.pixel_space;
    } else if (plot_data.cam_space == "relative") {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = cam.relative_space;
        plot_data.uniforms.projectionview = cam.relative_space;
    } else {
        plot_data.uniforms.view = identity;
        plot_data.uniforms.projection = identity;
        plot_data.uniforms.projectionview = identity;
    }
    plot_data.uniforms.resolution = cam.resolution;
    if (plot_data.uniforms.preprojection) {
        const { space , markerspace  } = plot_data;
        plot_data.uniforms.preprojection = cam.preprojection_matrix(space.value, markerspace.value);
    }
    const p = deserialize_plot(plot_data);
    plot_cache[plot_data.uuid] = p;
    scene.add(p);
    const next_insert = new Set(ON_NEXT_INSERT);
    next_insert.forEach((f)=>f());
}
function connect_uniforms(mesh, updater) {
    updater.on(([name, data])=>{
        if (name === "none") {
            return;
        }
        const uniform = mesh.material.uniforms[name];
        if (uniform.value.isTexture) {
            const im_data = uniform.value.image;
            const [size, tex_data] = data;
            if (tex_data.length == im_data.data.length) {
                im_data.data.set(tex_data);
            } else {
                const old_texture = uniform.value;
                uniform.value = re_create_texture(old_texture, tex_data, size);
                old_texture.dispose();
            }
            uniform.value.needsUpdate = true;
        } else {
            if (is_three_fixed_array(uniform.value)) {
                uniform.value.fromArray(data);
            } else {
                uniform.value = data;
            }
        }
    });
}
function create_texture(data) {
    const buffer = data.data;
    if (data.size.length == 3) {
        const tex = new mod.DataTexture3D(buffer, data.size[0], data.size[1], data.size[2]);
        tex.format = mod[data.three_format];
        tex.type = mod[data.three_type];
        return tex;
    } else {
        const tex_data = buffer == "texture_atlas" ? TEXTURE_ATLAS[0].value : buffer;
        return new mod.DataTexture(tex_data, data.size[0], data.size[1], mod[data.three_format], mod[data.three_type]);
    }
}
function re_create_texture(old_texture, buffer, size) {
    if (size.length == 3) {
        const tex = new mod.DataTexture3D(buffer, size[0], size[1], size[2]);
        tex.format = old_texture.format;
        tex.type = old_texture.type;
        return tex;
    } else {
        return new mod.DataTexture(buffer, size[0], size[1] ? size[1] : 1, old_texture.format, old_texture.type);
    }
}
function BufferAttribute(buffer) {
    const jsbuff = new mod.BufferAttribute(buffer.flat, buffer.type_length);
    jsbuff.setUsage(mod.DynamicDrawUsage);
    return jsbuff;
}
function InstanceBufferAttribute(buffer) {
    const jsbuff = new mod.InstancedBufferAttribute(buffer.flat, buffer.type_length);
    jsbuff.setUsage(mod.DynamicDrawUsage);
    return jsbuff;
}
function attach_geometry(buffer_geometry, vertexarrays, faces) {
    for(const name in vertexarrays){
        const buff = vertexarrays[name];
        let buffer;
        if (buff.to_update) {
            buffer = new mod.BufferAttribute(buff.to_update, buff.itemSize);
        } else {
            buffer = BufferAttribute(buff);
        }
        buffer_geometry.setAttribute(name, buffer);
    }
    buffer_geometry.setIndex(faces);
    buffer_geometry.boundingSphere = new mod.Sphere();
    buffer_geometry.boundingSphere.radius = 10000000000000;
    buffer_geometry.frustumCulled = false;
    return buffer_geometry;
}
function attach_instanced_geometry(buffer_geometry, instance_attributes) {
    for(const name in instance_attributes){
        const buffer = InstanceBufferAttribute(instance_attributes[name]);
        buffer_geometry.setAttribute(name, buffer);
    }
}
function recreate_geometry(mesh, vertexarrays, faces) {
    const buffer_geometry = new mod.BufferGeometry();
    attach_geometry(buffer_geometry, vertexarrays, faces);
    mesh.geometry.dispose();
    mesh.geometry = buffer_geometry;
    mesh.needsUpdate = true;
}
function recreate_instanced_geometry(mesh) {
    const buffer_geometry = new mod.InstancedBufferGeometry();
    const vertexarrays = {};
    const instance_attributes = {};
    const faces = [
        ...mesh.geometry.index.array
    ];
    Object.keys(mesh.geometry.attributes).forEach((name)=>{
        const buffer = mesh.geometry.attributes[name];
        const copy = buffer.to_update ? buffer.to_update : buffer.array.map((x)=>x);
        if (buffer.isInstancedBufferAttribute) {
            instance_attributes[name] = {
                flat: copy,
                type_length: buffer.itemSize
            };
        } else {
            vertexarrays[name] = {
                flat: copy,
                type_length: buffer.itemSize
            };
        }
    });
    attach_geometry(buffer_geometry, vertexarrays, faces);
    attach_instanced_geometry(buffer_geometry, instance_attributes);
    mesh.geometry.dispose();
    mesh.geometry = buffer_geometry;
    mesh.needsUpdate = true;
}
function create_material(program) {
    const is_volume = "volumedata" in program.uniforms;
    return new mod.RawShaderMaterial({
        uniforms: deserialize_uniforms(program.uniforms),
        vertexShader: program.vertex_source,
        fragmentShader: program.fragment_source,
        side: is_volume ? mod.BackSide : mod.DoubleSide,
        transparent: true,
        depthTest: !program.overdraw.value,
        depthWrite: !program.transparency.value
    });
}
function create_mesh(program) {
    const buffer_geometry = new mod.BufferGeometry();
    const faces = new mod.BufferAttribute(program.faces.value, 1);
    attach_geometry(buffer_geometry, program.vertexarrays, faces);
    const material = create_material(program);
    const mesh = new mod.Mesh(buffer_geometry, material);
    program.faces.on((x)=>{
        mesh.geometry.setIndex(new mod.BufferAttribute(x, 1));
    });
    return mesh;
}
function create_instanced_mesh(program) {
    const buffer_geometry = new mod.InstancedBufferGeometry();
    const faces = new mod.BufferAttribute(program.faces.value, 1);
    attach_geometry(buffer_geometry, program.vertexarrays, faces);
    attach_instanced_geometry(buffer_geometry, program.instance_attributes);
    const material = create_material(program);
    const mesh = new mod.Mesh(buffer_geometry, material);
    program.faces.on((x)=>{
        mesh.geometry.setIndex(new mod.BufferAttribute(x, 1));
    });
    return mesh;
}
function first(x) {
    return x[Object.keys(x)[0]];
}
function connect_attributes(mesh, updater) {
    const instance_buffers = {};
    const geometry_buffers = {};
    let first_instance_buffer;
    const real_instance_length = [
        0
    ];
    let first_geometry_buffer;
    const real_geometry_length = [
        0
    ];
    function re_assign_buffers() {
        const attributes = mesh.geometry.attributes;
        Object.keys(attributes).forEach((name)=>{
            const buffer = attributes[name];
            if (buffer.isInstancedBufferAttribute) {
                instance_buffers[name] = buffer;
            } else {
                geometry_buffers[name] = buffer;
            }
        });
        first_instance_buffer = first(instance_buffers);
        if (first_instance_buffer) {
            real_instance_length[0] = first_instance_buffer.count;
        }
        first_geometry_buffer = first(geometry_buffers);
        real_geometry_length[0] = first_geometry_buffer.count;
    }
    re_assign_buffers();
    updater.on(([name, new_values, length])=>{
        const buffer = mesh.geometry.attributes[name];
        let buffers;
        let real_length;
        let is_instance = false;
        if (name in instance_buffers) {
            buffers = instance_buffers;
            first_instance_buffer;
            real_length = real_instance_length;
            is_instance = true;
        } else {
            buffers = geometry_buffers;
            first_geometry_buffer;
            real_length = real_geometry_length;
        }
        if (length <= real_length[0]) {
            buffer.set(new_values);
            buffer.needsUpdate = true;
            if (is_instance) {
                mesh.geometry.instanceCount = length;
            }
        } else {
            buffer.to_update = new_values;
            const all_have_same_length = Object.values(buffers).every((x)=>x.to_update && x.to_update.length / x.itemSize == length);
            if (all_have_same_length) {
                if (is_instance) {
                    recreate_instanced_geometry(mesh);
                    re_assign_buffers();
                    mesh.geometry.instanceCount = new_values.length / buffer.itemSize;
                } else {
                    recreate_geometry(mesh, buffers, mesh.geometry.index);
                    re_assign_buffers();
                }
            }
        }
    });
}
function deserialize_scene(data, screen) {
    const scene = new mod.Scene();
    scene.screen = screen;
    const { canvas  } = screen;
    add_scene(data.uuid, scene);
    scene.scene_uuid = data.uuid;
    scene.frustumCulled = false;
    scene.pixelarea = data.pixelarea;
    scene.backgroundcolor = data.backgroundcolor;
    scene.clearscene = data.clearscene;
    scene.visible = data.visible;
    const camera = new MakieCamera();
    scene.wgl_camera = camera;
    function update_cam(camera_matrices) {
        const [view, projection, resolution, eyepos] = camera_matrices;
        camera.update_matrices(view, projection, resolution, eyepos);
    }
    update_cam(data.camera.value);
    if (data.cam3d_state) {
        attach_3d_camera(canvas, camera, data.cam3d_state, scene);
    } else {
        data.camera.on(update_cam);
    }
    data.plots.forEach((plot_data)=>{
        add_plot(scene, plot_data);
    });
    scene.scene_children = data.children.map((child)=>deserialize_scene(child, screen));
    return scene;
}
function delete_plot(plot) {
    delete plot_cache[plot.plot_uuid];
    const { parent  } = plot;
    if (parent) {
        parent.remove(plot);
    }
    plot.geometry.dispose();
    plot.material.dispose();
}
function delete_three_scene(scene) {
    delete scene_cache[scene.scene_uuid];
    scene.scene_children.forEach(delete_three_scene);
    while(scene.children.length > 0){
        delete_plot(scene.children[0]);
    }
}
window.THREE = mod;
const pixelRatio1 = window.devicePixelRatio || 1.0;
function render_scene(scene, picking = false) {
    const { camera , renderer  } = scene.screen;
    const canvas = renderer.domElement;
    if (!document.body.contains(canvas)) {
        console.log("EXITING WGL");
        renderer.state.reset();
        renderer.dispose();
        delete_three_scene(scene);
        return false;
    }
    if (!scene.visible.value) {
        return true;
    }
    renderer.autoClear = scene.clearscene.value;
    const area = scene.pixelarea.value;
    if (area) {
        const [x, y, w, h] = area.map((t)=>t / pixelRatio1);
        renderer.setViewport(x, y, w, h);
        renderer.setScissor(x, y, w, h);
        renderer.setScissorTest(true);
        if (picking) {
            renderer.setClearAlpha(0);
            renderer.setClearColor(new mod.Color(0), 0.0);
        } else {
            renderer.setClearColor(scene.backgroundcolor.value);
        }
        renderer.render(scene, camera);
    }
    return scene.scene_children.every((x)=>render_scene(x, picking));
}
function start_renderloop(three_scene) {
    const { fps  } = three_scene.screen;
    const time_per_frame = 1 / fps * 1000;
    let last_time_stamp = performance.now();
    function renderloop(timestamp) {
        if (timestamp - last_time_stamp > time_per_frame) {
            const all_rendered = render_scene(three_scene);
            if (!all_rendered) {
                return;
            }
            last_time_stamp = performance.now();
        }
        window.requestAnimationFrame(renderloop);
    }
    render_scene(three_scene);
    renderloop();
}
function throttle_function(func, delay) {
    let prev = 0;
    let future_id = undefined;
    function inner_throttle(...args) {
        const now = new Date().getTime();
        if (future_id !== undefined) {
            clearTimeout(future_id);
            future_id = undefined;
        }
        if (now - prev > delay) {
            prev = now;
            return func(...args);
        } else {
            future_id = setTimeout(()=>inner_throttle(...args), now - prev + 1);
        }
    }
    return inner_throttle;
}
function threejs_module(canvas, comm, width, height, resize_to_body) {
    let context = canvas.getContext("webgl2", {
        preserveDrawingBuffer: true
    });
    if (!context) {
        console.warn("WebGL 2.0 not supported by browser, falling back to WebGL 1.0 (Volume plots will not work)");
        context = canvas.getContext("webgl", {
            preserveDrawingBuffer: true
        });
    }
    if (!context) {
        return;
    }
    const renderer = new mod.WebGLRenderer({
        antialias: true,
        canvas: canvas,
        context: context,
        powerPreference: "high-performance"
    });
    renderer.setClearColor("#ffffff");
    renderer.setPixelRatio(pixelRatio1);
    renderer.setSize(width / pixelRatio1, height / pixelRatio1);
    const mouse_callback = (x, y)=>comm.notify({
            mouseposition: [
                x,
                y
            ]
        });
    const notify_mouse_throttled = throttle_function(mouse_callback, 40);
    function mousemove(event) {
        var rect = canvas.getBoundingClientRect();
        var x = (event.clientX - rect.left) * pixelRatio1;
        var y = (event.clientY - rect.top) * pixelRatio1;
        notify_mouse_throttled(x, y);
        return false;
    }
    canvas.addEventListener("mousemove", mousemove);
    function mousedown(event) {
        comm.notify({
            mousedown: event.buttons
        });
        return false;
    }
    canvas.addEventListener("mousedown", mousedown);
    function mouseup(event) {
        comm.notify({
            mouseup: event.buttons
        });
        return false;
    }
    canvas.addEventListener("mouseup", mouseup);
    function wheel(event) {
        comm.notify({
            scroll: [
                event.deltaX,
                -event.deltaY
            ]
        });
        event.preventDefault();
        return false;
    }
    canvas.addEventListener("wheel", wheel);
    function keydown(event) {
        comm.notify({
            keydown: event.code
        });
        return false;
    }
    canvas.addEventListener("keydown", keydown);
    function keyup(event) {
        comm.notify({
            keyup: event.code
        });
        return false;
    }
    canvas.addEventListener("keyup", keyup);
    function contextmenu(event) {
        comm.notify({
            keyup: "delete_keys"
        });
        return false;
    }
    canvas.addEventListener("contextmenu", (e)=>e.preventDefault());
    canvas.addEventListener("focusout", contextmenu);
    function resize_callback() {
        const bodyStyle = window.getComputedStyle(document.body);
        const width_padding = parseInt(bodyStyle.paddingLeft, 10) + parseInt(bodyStyle.paddingRight, 10) + parseInt(bodyStyle.marginLeft, 10) + parseInt(bodyStyle.marginRight, 10);
        const height_padding = parseInt(bodyStyle.paddingTop, 10) + parseInt(bodyStyle.paddingBottom, 10) + parseInt(bodyStyle.marginTop, 10) + parseInt(bodyStyle.marginBottom, 10);
        const width = (window.innerWidth - width_padding) * pixelRatio1;
        const height = (window.innerHeight - height_padding) * pixelRatio1;
        comm.notify({
            resize: [
                width,
                height
            ]
        });
    }
    if (resize_to_body) {
        const resize_callback_throttled = throttle_function(resize_callback, 100);
        window.addEventListener("resize", (event)=>resize_callback_throttled());
        resize_callback_throttled();
    }
    return renderer;
}
function create_scene(wrapper, canvas, canvas_width, scenes, comm, width, height, texture_atlas_obs, fps, resize_to_body) {
    const renderer = threejs_module(canvas, comm, width, height, resize_to_body);
    TEXTURE_ATLAS[0] = texture_atlas_obs;
    if (renderer) {
        const camera = new mod.PerspectiveCamera(45, 1, 0, 100);
        camera.updateProjectionMatrix();
        const size = new mod.Vector2();
        renderer.getDrawingBufferSize(size);
        const picking_target = new mod.WebGLRenderTarget(size.x, size.y);
        const screen = {
            renderer,
            picking_target,
            camera,
            fps,
            canvas
        };
        const three_scene = deserialize_scene(scenes, screen);
        console.log(three_scene);
        start_renderloop(three_scene);
        canvas_width.on((w_h)=>{
            const pixelRatio = renderer.getPixelRatio();
            renderer.setSize(w_h[0] / pixelRatio, w_h[1] / pixelRatio);
        });
    } else {
        const warning = getWebGLErrorMessage();
        wrapper.appendChild(warning);
    }
}
function set_picking_uniforms(scene, last_id, picking, picked_plots, plots, id_to_plot) {
    scene.children.forEach((plot, index)=>{
        const { material  } = plot;
        const { uniforms  } = material;
        if (picking) {
            uniforms.object_id.value = last_id + index;
            uniforms.picking.value = true;
            material.blending = mod.NoBlending;
        } else {
            uniforms.picking.value = false;
            material.blending = mod.NormalBlending;
            const id = uniforms.object_id.value;
            if (id in picked_plots) {
                plots.push([
                    plot,
                    picked_plots[id]
                ]);
                id_to_plot[id] = plot;
            }
        }
    });
    let next_id = last_id + scene.children.length;
    scene.scene_children.forEach((scene)=>{
        next_id = set_picking_uniforms(scene, next_id, picking, picked_plots, plots, id_to_plot);
    });
    return next_id;
}
function pick_native(scene, x, y, w, h) {
    const { renderer , picking_target  } = scene.screen;
    renderer.setRenderTarget(picking_target);
    set_picking_uniforms(scene, 1, true);
    render_scene(scene, true);
    renderer.setRenderTarget(null);
    const nbytes = w * h * 4;
    const pixel_bytes = new Uint8Array(nbytes);
    renderer.readRenderTargetPixels(picking_target, x, y, w, h, pixel_bytes);
    const picked_plots = {};
    const picked_plots_array = [];
    const reinterpret_view = new DataView(pixel_bytes.buffer);
    for(let i = 0; i < pixel_bytes.length / 4; i++){
        const id = reinterpret_view.getUint16(i * 4);
        const index = reinterpret_view.getUint16(i * 4 + 2);
        picked_plots_array.push([
            id,
            index
        ]);
        picked_plots[id] = index;
    }
    const plots = [];
    const id_to_plot = {};
    set_picking_uniforms(scene, 0, false, picked_plots, plots, id_to_plot);
    const picked_plots_matrix = picked_plots_array.map(([id, index])=>{
        const p = id_to_plot[id];
        return [
            p ? p.plot_uuid : null,
            index
        ];
    });
    const plot_matrix = {
        data: picked_plots_matrix,
        size: [
            w,
            h
        ]
    };
    return [
        plot_matrix,
        plots
    ];
}
function pick_closest(scene, xy, range) {
    const { picking_target  } = scene.screen;
    const { width , height  } = picking_target;
    if (!(1.0 <= xy[0] <= width && 1.0 <= xy[1] <= height)) {
        return [
            null,
            0
        ];
    }
    const x0 = Math.max(1, xy[0] - range);
    const y0 = Math.max(1, xy[1] - range);
    const x1 = Math.min(width, Math.floor(xy[0] + range));
    const y1 = Math.min(height, Math.floor(xy[1] + range));
    const dx = x1 - x0;
    const dy = y1 - y0;
    const [plot_data, _] = pick_native(scene, x0, y0, dx, dy);
    const plot_matrix = plot_data.data;
    let min_dist = range ^ 2;
    let selection = [
        null,
        0
    ];
    const x = xy[0] + 1 - x0;
    const y = xy[1] + 1 - y0;
    let pindex = 0;
    for(let i = 1; i <= dx; i++){
        for(let j = 1; j <= dx; j++){
            const d = x - i ^ 2 + (y - j) ^ 2;
            const [plot_uuid, index] = plot_matrix[pindex];
            pindex = pindex + 1;
            if (d < min_dist && plot_uuid) {
                min_dist = d;
                selection = [
                    plot_uuid,
                    index
                ];
            }
        }
    }
    return selection;
}
function pick_sorted(scene, xy, range) {
    const { picking_target  } = scene.screen;
    const { width , height  } = picking_target;
    if (!(1.0 <= xy[0] <= width && 1.0 <= xy[1] <= height)) {
        return null;
    }
    const x0 = Math.max(1, xy[0] - range);
    const y0 = Math.max(1, xy[1] - range);
    const x1 = Math.min(width, Math.floor(xy[0] + range));
    const y1 = Math.min(height, Math.floor(xy[1] + range));
    const dx = x1 - x0;
    const dy = y1 - y0;
    const [plot_data, selected] = pick_native(scene, x0, y0, dx, dy);
    if (selected.length == 0) {
        return null;
    }
    const plot_matrix = plot_data.data;
    const distances = selected.map((x)=>range ^ 2);
    const x = xy[0] + 1 - x0;
    const y = xy[1] + 1 - y0;
    let pindex = 0;
    for(let i = 1; i <= dx; i++){
        for(let j = 1; j <= dx; j++){
            const d = x - i ^ 2 + (y - j) ^ 2;
            const [plot_uuid, index] = plot_matrix[pindex];
            pindex = pindex + 1;
            const plot_index = selected.findIndex((x)=>x[0].plot_uuid == plot_uuid);
            if (plot_index >= 0 && d < distances[plot_index]) {
                distances[plot_index] = d;
            }
        }
    }
    const sorted_indices = Array.from(Array(distances.length).keys()).sort((a, b)=>distances[a] < distances[b] ? -1 : distances[b] < distances[a] | 0);
    return sorted_indices.map((idx)=>{
        const [plot, index] = selected[idx];
        return [
            plot.plot_uuid,
            index
        ];
    });
}
function pick_native_uuid(scene, x, y, w, h) {
    const [_, picked_plots] = pick_native(scene, x, y, w, h);
    return picked_plots.map(([p, index])=>[
            p.plot_uuid,
            index
        ]);
}
function pick_native_matrix(scene, x, y, w, h) {
    const [matrix, _] = pick_native(scene, x, y, w, h);
    return matrix;
}
function register_popup(popup, scene, plots_to_pick, callback) {
    if (!scene || !scene.screen) {
        return;
    }
    const { canvas  } = scene.screen;
    canvas.addEventListener("mousedown", (event)=>{
        if (!popup.classList.contains("show")) {
            popup.classList.add("show");
        }
        popup.style.left = event.pageX + "px";
        popup.style.top = event.pageY + "px";
        const [x, y] = event2scene_pixel(scene, event);
        const [_, picks] = pick_native(scene, x, y, 1, 1);
        if (picks.length == 1) {
            const [plot, index] = picks[0];
            if (plots_to_pick.has(plot.plot_uuid)) {
                const result = callback(plot, index);
                if (typeof result === "string" || result instanceof String) {
                    popup.innerText = result;
                } else {
                    popup.innerHTML = result;
                }
            }
        } else {
            popup.classList.remove("show");
        }
    });
    canvas.addEventListener("keyup", (event)=>{
        if (event.key === "Escape") {
            popup.classList.remove("show");
        }
    });
}
window.WGL = {
    deserialize_scene,
    threejs_module,
    start_renderloop,
    delete_plots,
    insert_plot,
    find_plots,
    delete_scene,
    find_scene,
    scene_cache,
    plot_cache,
    delete_scenes,
    create_scene,
    event2scene_pixel,
    on_next_insert,
    register_popup,
    render_scene
};
export { deserialize_scene as deserialize_scene, threejs_module as threejs_module, start_renderloop as start_renderloop, delete_plots as delete_plots, insert_plot as insert_plot, find_plots as find_plots, delete_scene as delete_scene, find_scene as find_scene, scene_cache as scene_cache, plot_cache as plot_cache, delete_scenes as delete_scenes, create_scene as create_scene, event2scene_pixel as event2scene_pixel, on_next_insert as on_next_insert };
export { render_scene as render_scene };
export { pick_native as pick_native };
export { pick_closest as pick_closest };
export { pick_sorted as pick_sorted };
export { pick_native_uuid as pick_native_uuid };
export { pick_native_matrix as pick_native_matrix };
export { register_popup as register_popup };

" type="module"></script>
    </div>
  </div>
  <div data-jscall-id="14">
    <script src="data:application/javascript;base64,    JSServe.lock_loading(() => {
        return JSServe.fetch_binary('data:application/octet-stream;base64,kscsapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoCjc3VigqdwYXlsb2Fk3AARyQARrfZrksdZapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoGzMjk2ODA0NDUzNDE2NDg1Nzc3N8cWZZKzMjk2ODA0NDUzNDE2NDg1Nzc3NwGjc3Vig6NvYnPHFGizMjk2ODA0NDUzNDE2NDg1Nzc3N6dwYXlsb2FkyQARrWRmk4GzNjU2NDUxMzk2NTM0NTk3NzUyM5G0MTAxNDE5NjA5MDc3NTM0NTQ2NDTbABGtK3JldHVybiBmdW5jdGlvbiBvbl91cGRhdGUobmV3X3ZhbHVlKSB7CiAgICAobmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICAoKCkgPT4gewogICAgICAgICAgICBpZiAoIXdpbmRvdy5KU1NFUlZFX0lNUE9SVFMpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5KU1NFUlZFX0lNUE9SVFMgPSB7fTsKICAgICAgICAgICAgfQogICAgICAgICAgICBKU1NFUlZFX0lNUE9SVFNbJ2NjNGM2YWE2YTFmMDZhMWI1MDEzYmNhMDE3MDJmMzZhMTg0YzA0Mzktd2dsbWFraWUuanMnXSA9IGBkYXRhOmFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7YmFzZTY0LEx5OGdaR1Z1YnkxbWJYUXRhV2R1YjNKbExXWnBiR1VLTHk4Z1pHVnVieTFzYVc1MExXbG5ibTl5WlMxbWFXeGxDaTh2SUZSb2FYTWdZMjlrWlNCM1lYTWdZblZ1Wkd4bFpDQjFjMmx1WnlCZ1pHVnVieUJpZFc1a2JHVmdJR0Z1WkNCcGRDZHpJRzV2ZENCeVpXTnZiVzFsYm1SbFpDQjBieUJsWkdsMElHbDBJRzFoYm5WaGJHeDVDZ3AyWVhJZ1kyRWdQU0FpTVRNMklpd2dSM2tnUFNCN0NpQWdJQ0JNUlVaVU9pQXdMQW9nSUNBZ1RVbEVSRXhGT2lBeExBb2dJQ0FnVWtsSFNGUTZJRElzQ2lBZ0lDQlNUMVJCVkVVNklEQXNDaUFnSUNCRVQweE1XVG9nTVN3S0lDQWdJRkJCVGpvZ01ncDlMQ0JXZVNBOUlIc0tJQ0FnSUZKUFZFRlVSVG9nTUN3S0lDQWdJRkJCVGpvZ01Td0tJQ0FnSUVSUFRFeFpYMUJCVGpvZ01pd0tJQ0FnSUVSUFRFeFpYMUpQVkVGVVJUb2dNd3A5TENCMWRTQTlJREFzSUhSc0lEMGdNU3dnWkhVZ1BTQXlMQ0JYZVNBOUlETXNJSEY1SUQwZ01Dd2dTR01nUFNBeExDQm1kU0E5SURJc0lHbHlJRDBnTXl3Z1FXa2dQU0F3TENCcGRDQTlJREVzSUVOcElEMGdNaXdnYTJNZ1BTQXhMQ0JZZVNBOUlESXNJSFp1SUQwZ01Dd2djM0lnUFNBeExDQnViQ0E5SURJc0lHbHNJRDBnTXl3Z2Ntd2dQU0EwTENCd2RTQTlJRFVzSUY5cElEMGdNVEF3TENCdGRTQTlJREV3TVN3Z1ozVWdQU0F4TURJc0lITnNJRDBnTVRBekxDQnZiQ0E5SURFd05Dd2dlSFVnUFNBeU1EQXNJSGwxSUQwZ01qQXhMQ0IyZFNBOUlESXdNaXdnWDNVZ1BTQXlNRE1zSUVkaklEMGdNakEwTENCV1l5QTlJREl3TlN3Z1RYVWdQU0F5TURZc0lHSjFJRDBnTWpBM0xDQjNkU0E5SURJd09Dd2dVM1VnUFNBeU1Ea3NJRlIxSUQwZ01qRXdMQ0JGZFNBOUlEQXNJRUYxSUQwZ01Td2dRM1VnUFNBeUxDQmxZU0E5SURNc0lFeDFJRDBnTkN3Z1VuVWdQU0ExTENCUWRTQTlJRFlzSUVsMUlEMGdOeXdnVm5NZ1BTQXdMQ0JFZFNBOUlERXNJRVoxSUQwZ01pd2dYMjRnUFNBd0xDQk9kU0E5SURFc0lFSjFJRDBnTWl3Z2VuVWdQU0F6TENCVmRTQTlJRFFzSUU5MUlEMGdOU3dnYUdFZ1BTQXpNREFzSUVKcElEMGdNekF4TENCNmFTQTlJRE13TWl3Z1JITWdQU0F6TURNc0lFWnpJRDBnTXpBMExDQlFjaUE5SURNd05pd2dWM01nUFNBek1EY3NJRTV6SUQwZ01XVXpMQ0IyZENBOUlERXdNREVzSUVKeklEMGdNVEF3TWl3Z2NuUWdQU0F4TURBekxDQjBZU0E5SURFd01EUXNJRXA1SUQwZ01UQXdOQ3dnYm1FZ1BTQXhNREExTENCWmVTQTlJREV3TURVc0lIUjBJRDBnTVRBd05pd2dWMk1nUFNBeE1EQTNMQ0JhZVNBOUlERXdNRGNzSUZWcElEMGdNVEF3T0N3Z0pIa2dQU0F4TURBNExDQnliaUE5SURFd01Ea3NJRWgxSUQwZ01UQXhNQ3dnYTNVZ1BTQXhNREV4TENCamNpQTlJREV3TVRJc0lFZDFJRDBnTVRBeE15d2dVSE1nUFNBeE1ERTBMQ0J1YmlBOUlERXdNVFVzSUd0dUlEMGdNVEF4Tml3Z1ZuVWdQU0F4TURFM0xDQlhkU0E5SURFd01UZ3NJSEYxSUQwZ01UQXhPU3dnVkdrZ1BTQXhNREl3TENCWWRTQTlJREV3TWpFc0lFZHVJRDBnTVRBeU1pd2dZM1FnUFNBeE1ESXpMQ0JLZFNBOUlERXdNalFzSUZsMUlEMGdNVEF5TlN3Z1ZtNGdQU0F4TURJMkxDQk1hU0E5SURFd01qY3NJRnAxSUQwZ01UQXlPQ3dnSkhVZ1BTQXhNREk1TENCcWRTQTlJREV3TXpBc0lGRjFJRDBnTVRBek1Td2dTM1VnUFNBeE1ETXlMQ0JsWkNBOUlERXdNek1zSUdGc0lEMGdNek0zTnpZc0lHeHNJRDBnTXpNM056Y3NJR05zSUQwZ016TTNOemdzSUdoc0lEMGdNek0zTnprc0lIVnNJRDBnTXpVNE5EQXNJR1JzSUQwZ016VTROREVzSUdac0lEMGdNelU0TkRJc0lIQnNJRDBnTXpVNE5ETXNJSFJrSUQwZ016WXhPVFlzSUcxc0lEMGdNemMwT1RJc0lHZHNJRDBnTXpjME9UWXNJRzVrSUQwZ016YzRNRGdzSUdsa0lEMGdNemM0TURrc0lISmtJRDBnTXpjNE1UQXNJSE5rSUQwZ016YzRNVEVzSUc5a0lEMGdNemM0TVRJc0lHRmtJRDBnTXpjNE1UTXNJR3hrSUQwZ016YzRNVFFzSUdOa0lEMGdNemM0TVRVc0lHaGtJRDBnTXpjNE1UWXNJSFZrSUQwZ016YzRNVGNzSUdSa0lEMGdNemM0TVRnc0lHWmtJRDBnTXpjNE1Ua3NJSEJrSUQwZ016YzRNakFzSUcxa0lEMGdNemM0TWpFc0lHZGtJRDBnTXpZME9USXNJSGhrSUQwZ016YzROREFzSUhsa0lEMGdNemM0TkRFc0lIWmtJRDBnTXpjNE5ESXNJRjlrSUQwZ016YzRORE1zSUUxa0lEMGdNemM0TkRRc0lHSmtJRDBnTXpjNE5EVXNJSGRrSUQwZ016YzRORFlzSUZOa0lEMGdNemM0TkRjc0lGUmtJRDBnTXpjNE5EZ3NJRVZrSUQwZ016YzRORGtzSUVGa0lEMGdNemM0TlRBc0lFTmtJRDBnTXpjNE5URXNJRXhrSUQwZ016YzROVElzSUZKa0lEMGdNemM0TlRNc0lGQmtJRDBnTWpJd01Dd2dTV1FnUFNBeU1qQXhMQ0JFWkNBOUlESXlNRElzSUhweklEMGdNak13TUN3Z1ZYTWdQU0F5TXpBeExDQjVieUE5SURJek1ESXNJRTFwSUQwZ01qUXdNQ3dnWW1rZ1BTQXlOREF4TENCUGN5QTlJREkwTURJc0lIVmhJRDBnTWpVd01Dd2djV01nUFNBeU5UQXhMQ0JHWkNBOUlEQXNJR3A1SUQwZ01Td2dVWGtnUFNBeUxDQk9kQ0E5SURObE15d2dUMmtnUFNBek1EQXhMQ0JPWkNBOUlETXlNREFzSUVKa0lEMGdNekl3TVN3Z1NHa2dQU0F3TENCNlpDQTlJREVzSUV0NUlEMGdNQ3dnZG04Z1BTQTNOamd3TENCbE1DQTlJRGMyT0RFc0lIUXdJRDBnTnpZNE1pd2diakFnUFNBM05qZ3pMQ0JwTUNBOUlETTBNRFUxTENCeU1DQTlJRE0wTURVMkxDQnpNQ0E5SURVek9EWXNJRzh3SUQwZ05URXlMQ0JoTUNBOUlEVXhNeXdnYkRBZ1BTQTFNVFFzSUdNd0lEMGdOVEUxTENCb01DQTlJRFV4Tml3Z2RUQWdQU0ExTVRjc0lHUXdJRDBnTlRFNExDQlZaQ0E5SURVeE9Td2dhSElnUFNBek5UQTBOQ3dnZFhJZ1BTQXpOVEEwT0N3Z1pqQWdQU0F6TlRBME1Dd2djREFnUFNBek5UQTBOU3dnYlRBZ1BTQXpOVEEwT1N3Z1p6QWdQU0F6TlRBME1Td2dlREFnUFNBek5UQTBOaXdnZVRBZ1BTQXpOVEExTUN3Z2RqQWdQU0F6TlRBME1pd2dYekFnUFNBaU1UQXdJaXdnZUd3Z1BTQWlNekF3SUdWeklpd2dSVzRnUFNCamJHRnpjeUI3Q2lBZ0lDQmhaR1JGZG1WdWRFeHBjM1JsYm1WeUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDlzYVhOMFpXNWxjbk1nUFQwOUlIWnZhV1FnTUNBbUppQW9kR2hwY3k1ZmJHbHpkR1Z1WlhKeklEMGdlMzBwT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWZiR2x6ZEdWdVpYSnpPd29nSUNBZ0lDQWdJRzViWlYwZ1BUMDlJSFp2YVdRZ01DQW1KaUFvYmx0bFhTQTlJRnRkS1N3Z2JsdGxYUzVwYm1SbGVFOW1LSFFwSUQwOVBTQXRNU0FtSmlCdVcyVmRMbkIxYzJnb2RDazdDaUFnSUNCOUNpQWdJQ0JvWVhORmRtVnVkRXhwYzNSbGJtVnlLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZiR2x6ZEdWdVpYSnpJRDA5UFNCMmIybGtJREFwSUhKbGRIVnliaUFoTVRzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVYMnhwYzNSbGJtVnljenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibHRsWFNBaFBUMGdkbTlwWkNBd0lDWW1JRzViWlYwdWFXNWtaWGhQWmloMEtTQWhQVDBnTFRFN0NpQWdJQ0I5Q2lBZ0lDQnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZiR2x6ZEdWdVpYSnpJRDA5UFNCMmIybGtJREFwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVgyeHBjM1JsYm1WeWMxdGxYVHNLSUNBZ0lDQWdJQ0JwWmlBb2FTQWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2FTNXBibVJsZUU5bUtIUXBPd29nSUNBZ0lDQWdJQ0FnSUNCeUlDRTlQU0F0TVNBbUppQnBMbk53YkdsalpTaHlMQ0F4S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmthWE53WVhSamFFVjJaVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZiR2x6ZEdWdVpYSnpJRDA5UFNCMmIybGtJREFwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVgyeHBjM1JsYm1WeWMxdGxMblI1Y0dWZE93b2dJQ0FnSUNBZ0lHbG1JQ2h1SUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWlM1MFlYSm5aWFFnUFNCMGFHbHpPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUc0dWMyeHBZMlVvTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdjaUE5SURBc0lHOGdQU0JwTG14bGJtZDBhRHNnY2lBOElHODdJSElyS3lscFczSmRMbU5oYkd3b2RHaHBjeXdnWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJR1V1ZEdGeVoyVjBJRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNuMHNJSEIwSUQwZ1cxMDdDbVp2Y2loc1pYUWdjeUE5SURBN0lITWdQQ0F5TlRZN0lITXJLeWx3ZEZ0elhTQTlJQ2h6SUR3Z01UWWdQeUFpTUNJZ09pQWlJaWtnS3lCekxuUnZVM1J5YVc1bktERTJLVHNLZG1GeUlGWnlJRDBnTVRJek5EVTJOeXdnVjI0Z1BTQk5ZWFJvTGxCSklDOGdNVGd3TENCa2NpQTlJREU0TUNBdklFMWhkR2d1VUVrN0NtWjFibU4wYVc5dUlFVjBLQ2tnZXdvZ0lDQWdiR1YwSUhNZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREFzSUdVZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREFzSUhRZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREFzSUc0Z1BTQk5ZWFJvTG5KaGJtUnZiU2dwSUNvZ05ESTVORGsyTnpJNU5TQjhJREE3Q2lBZ0lDQnlaWFIxY200Z0tIQjBXM01nSmlBeU5UVmRJQ3NnY0hSYmN5QStQaUE0SUNZZ01qVTFYU0FySUhCMFczTWdQajRnTVRZZ0ppQXlOVFZkSUNzZ2NIUmJjeUErUGlBeU5DQW1JREkxTlYwZ0t5QWlMU0lnS3lCd2RGdGxJQ1lnTWpVMVhTQXJJSEIwVzJVZ1BqNGdPQ0FtSURJMU5WMGdLeUFpTFNJZ0t5QndkRnRsSUQ0K0lERTJJQ1lnTVRVZ2ZDQTJORjBnS3lCd2RGdGxJRDQrSURJMElDWWdNalUxWFNBcklDSXRJaUFySUhCMFczUWdKaUEyTXlCOElERXlPRjBnS3lCd2RGdDBJRDQrSURnZ0ppQXlOVFZkSUNzZ0lpMGlJQ3NnY0hSYmRDQStQaUF4TmlBbUlESTFOVjBnS3lCd2RGdDBJRDQrSURJMElDWWdNalUxWFNBcklIQjBXMjRnSmlBeU5UVmRJQ3NnY0hSYmJpQStQaUE0SUNZZ01qVTFYU0FySUhCMFcyNGdQajRnTVRZZ0ppQXlOVFZkSUNzZ2NIUmJiaUErUGlBeU5DQW1JREkxTlYwcExuUnZWWEJ3WlhKRFlYTmxLQ2s3Q24wS1puVnVZM1JwYjI0Z2JYUW9jeXdnWlN3Z2RDa2dld29nSUNBZ2NtVjBkWEp1SUUxaGRHZ3ViV0Y0S0dVc0lFMWhkR2d1YldsdUtIUXNJSE1wS1RzS2ZRcG1kVzVqZEdsdmJpQmtZU2h6TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnS0hNZ0pTQmxJQ3NnWlNrZ0pTQmxPd3A5Q21aMWJtTjBhVzl1SUU5a0tITXNJR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJSEpsZEhWeWJpQnVJQ3NnS0hNZ0xTQmxLU0FxSUNocElDMGdiaWtnTHlBb2RDQXRJR1VwT3dwOUNtWjFibU4wYVc5dUlFaGtLSE1zSUdVc0lIUXBJSHNLSUNBZ0lISmxkSFZ5YmlCeklDRTlQU0JsSUQ4Z0tIUWdMU0J6S1NBdklDaGxJQzBnY3lrZ09pQXdPd3A5Q21aMWJtTjBhVzl1SUc5eUtITXNJR1VzSUhRcElIc0tJQ0FnSUhKbGRIVnliaUFvTVNBdElIUXBJQ29nY3lBcklIUWdLaUJsT3dwOUNtWjFibU4wYVc5dUlHdGtLSE1zSUdVc0lIUXNJRzRwSUhzS0lDQWdJSEpsZEhWeWJpQnZjaWh6TENCbExDQXhJQzBnVFdGMGFDNWxlSEFvTFhRZ0tpQnVLU2s3Q24wS1puVnVZM1JwYjI0Z1IyUW9jeXdnWlNBOUlERXBJSHNLSUNBZ0lISmxkSFZ5YmlCbElDMGdUV0YwYUM1aFluTW9aR0VvY3l3Z1pTQXFJRElwSUMwZ1pTazdDbjBLWm5WdVkzUnBiMjRnVm1Rb2N5d2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJSE1nUEQwZ1pTQS9JREFnT2lCeklENDlJSFFnUHlBeElEb2dLSE1nUFNBb2N5QXRJR1VwSUM4Z0tIUWdMU0JsS1N3Z2N5QXFJSE1nS2lBb015QXRJRElnS2lCektTazdDbjBLWm5WdVkzUnBiMjRnVjJRb2N5d2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJSE1nUEQwZ1pTQS9JREFnT2lCeklENDlJSFFnUHlBeElEb2dLSE1nUFNBb2N5QXRJR1VwSUM4Z0tIUWdMU0JsS1N3Z2N5QXFJSE1nS2lCeklDb2dLSE1nS2lBb2N5QXFJRFlnTFNBeE5Ta2dLeUF4TUNrcE93cDlDbVoxYm1OMGFXOXVJSEZrS0hNc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCeklDc2dUV0YwYUM1bWJHOXZjaWhOWVhSb0xuSmhibVJ2YlNncElDb2dLR1VnTFNCeklDc2dNU2twT3dwOUNtWjFibU4wYVc5dUlGaGtLSE1zSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ6SUNzZ1RXRjBhQzV5WVc1a2IyMG9LU0FxSUNobElDMGdjeWs3Q24wS1puVnVZM1JwYjI0Z1NtUW9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlITWdLaUFvTGpVZ0xTQk5ZWFJvTG5KaGJtUnZiU2dwS1RzS2ZRcG1kVzVqZEdsdmJpQlpaQ2h6S1NCN0NpQWdJQ0J5WlhSMWNtNGdjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaFdjaUE5SUhNZ0pTQXlNVFEzTkRnek5qUTNLU3dnVm5JZ1BTQldjaUFxSURFMk9EQTNJQ1VnTWpFME56UTRNelkwTnl3Z0tGWnlJQzBnTVNrZ0x5QXlNVFEzTkRnek5qUTJPd3A5Q21aMWJtTjBhVzl1SUZwa0tITXBJSHNLSUNBZ0lISmxkSFZ5YmlCeklDb2dWMjQ3Q24wS1puVnVZM1JwYjI0Z0pHUW9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlITWdLaUJrY2pzS2ZRcG1kVzVqZEdsdmJpQnBZU2h6S1NCN0NpQWdJQ0J5WlhSMWNtNGdLSE1nSmlCeklDMGdNU2tnUFQwOUlEQWdKaVlnY3lBaFBUMGdNRHNLZlFwbWRXNWpkR2x2YmlCWVl5aHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1RXRjBhQzV3YjNjb01pd2dUV0YwYUM1alpXbHNLRTFoZEdndWJHOW5LSE1wSUM4Z1RXRjBhQzVNVGpJcEtUc0tmUXBtZFc1amRHbHZiaUJLWXloektTQjdDaUFnSUNCeVpYUjFjbTRnVFdGMGFDNXdiM2NvTWl3Z1RXRjBhQzVtYkc5dmNpaE5ZWFJvTG14dlp5aHpLU0F2SUUxaGRHZ3VURTR5S1NrN0NuMEtablZ1WTNScGIyNGdhbVFvY3l3Z1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ2JHVjBJSElnUFNCTllYUm9MbU52Y3l3Z2J5QTlJRTFoZEdndWMybHVMQ0JoSUQwZ2NpaDBJQzhnTWlrc0lHd2dQU0J2S0hRZ0x5QXlLU3dnWXlBOUlISW9LR1VnS3lCdUtTQXZJRElwTENCb0lEMGdieWdvWlNBcklHNHBJQzhnTWlrc0lIVWdQU0J5S0NobElDMGdiaWtnTHlBeUtTd2daQ0E5SUc4b0tHVWdMU0J1S1NBdklESXBMQ0JtSUQwZ2NpZ29iaUF0SUdVcElDOGdNaWtzSUcwZ1BTQnZLQ2h1SUMwZ1pTa2dMeUF5S1RzS0lDQWdJSE4zYVhSamFDaHBLWHNLSUNBZ0lDQWdJQ0JqWVhObElDSllXVmdpT2dvZ0lDQWdJQ0FnSUNBZ0lDQnpMbk5sZENoaElDb2dhQ3dnYkNBcUlIVXNJR3dnS2lCa0xDQmhJQ29nWXlrN0NpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lHTmhjMlVnSWxsYVdTSTZDaUFnSUNBZ0lDQWdJQ0FnSUhNdWMyVjBLR3dnS2lCa0xDQmhJQ29nYUN3Z2JDQXFJSFVzSUdFZ0tpQmpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnWTJGelpTQWlXbGhhSWpvS0lDQWdJQ0FnSUNBZ0lDQWdjeTV6WlhRb2JDQXFJSFVzSUd3Z0tpQmtMQ0JoSUNvZ2FDd2dZU0FxSUdNcE93b2dJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQmpZWE5sSUNKWVdsZ2lPZ29nSUNBZ0lDQWdJQ0FnSUNCekxuTmxkQ2hoSUNvZ2FDd2diQ0FxSUcwc0lHd2dLaUJtTENCaElDb2dZeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUdOaGMyVWdJbGxZV1NJNkNpQWdJQ0FnSUNBZ0lDQWdJSE11YzJWMEtHd2dLaUJtTENCaElDb2dhQ3dnYkNBcUlHMHNJR0VnS2lCaktUc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdZMkZ6WlNBaVdsbGFJam9LSUNBZ0lDQWdJQ0FnSUNBZ2N5NXpaWFFvYkNBcUlHMHNJR3dnS2lCbUxDQmhJQ29nYUN3Z1lTQXFJR01wT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMazFoZEdoVmRHbHNjem9nTG5ObGRGRjFZWFJsY201cGIyNUdjbTl0VUhKdmNHVnlSWFZzWlhJb0tTQmxibU52ZFc1MFpYSmxaQ0JoYmlCMWJtdHViM2R1SUc5eVpHVnlPaUFpSUNzZ2FTazdDaUFnSUNCOUNuMEtkbUZ5SUUwd0lEMGdUMkpxWldOMExtWnlaV1Y2WlNoN0NpQWdJQ0JmWDNCeWIzUnZYMTg2SUc1MWJHd3NDaUFnSUNCRVJVY3lVa0ZFT2lCWGJpd0tJQ0FnSUZKQlJESkVSVWM2SUdSeUxBb2dJQ0FnWjJWdVpYSmhkR1ZWVlVsRU9pQkZkQ3dLSUNBZ0lHTnNZVzF3T2lCdGRDd0tJQ0FnSUdWMVkyeHBaR1ZoYmsxdlpIVnNiem9nWkdFc0NpQWdJQ0J0WVhCTWFXNWxZWEk2SUU5a0xBb2dJQ0FnYVc1MlpYSnpaVXhsY25BNklFaGtMQW9nSUNBZ2JHVnljRG9nYjNJc0NpQWdJQ0JrWVcxd09pQnJaQ3dLSUNBZ0lIQnBibWR3YjI1bk9pQkhaQ3dLSUNBZ0lITnRiMjkwYUhOMFpYQTZJRlprTEFvZ0lDQWdjMjF2YjNSb1pYSnpkR1Z3T2lCWFpDd0tJQ0FnSUhKaGJtUkpiblE2SUhGa0xBb2dJQ0FnY21GdVpFWnNiMkYwT2lCWVpDd0tJQ0FnSUhKaGJtUkdiRzloZEZOd2NtVmhaRG9nU21Rc0NpQWdJQ0J6WldWa1pXUlNZVzVrYjIwNklGbGtMQW9nSUNBZ1pHVm5WRzlTWVdRNklGcGtMQW9nSUNBZ2NtRmtWRzlFWldjNklDUmtMQW9nSUNBZ2FYTlFiM2RsY2s5bVZIZHZPaUJwWVN3S0lDQWdJR05sYVd4UWIzZGxjazltVkhkdk9pQllZeXdLSUNBZ0lHWnNiMjl5VUc5M1pYSlBabFIzYnpvZ1NtTXNDaUFnSUNCelpYUlJkV0YwWlhKdWFXOXVSbkp2YlZCeWIzQmxja1YxYkdWeU9pQnFaQXA5S1N3Z1dDQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F3TENCMElEMGdNQ2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NTRJRDBnWlN3Z2RHaHBjeTU1SUQwZ2REc0tJQ0FnSUgwS0lDQWdJR2RsZENCM2FXUjBhQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRPd29nSUNBZ2ZRb2dJQ0FnYzJWMElIZHBaSFJvS0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5nZ1BTQmxPd29nSUNBZ2ZRb2dJQ0FnWjJWMElHaGxhV2RvZENncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU1T3dvZ0lDQWdmUW9nSUNBZ2MyVjBJR2hsYVdkb2RDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NTVJRDBnWlRzS0lDQWdJSDBLSUNBZ0lITmxkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHVXNJSFJvYVhNdWVTQTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExDQjBhR2x6TG5rZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwV0NobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJaS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU1SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRU52YlhCdmJtVnVkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjM2RwZEdOb0tHVXBld29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZ2dQU0IwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNVG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVTQTlJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lhVzVrWlhnZ2FYTWdiM1YwSUc5bUlISmhibWRsT2lBaUlDc2daU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwUTI5dGNHOXVaVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Ub0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbms3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSW1sdVpHVjRJR2x6SUc5MWRDQnZaaUJ5WVc1blpUb2dJaUFySUdVcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWgwYUdsekxuZ3NJSFJvYVhNdWVTazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdaUzU0TENCMGFHbHpMbmtnUFNCbExua3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmhaR1FvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBJQ0U5UFNCMmIybGtJREFnUHlBb1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVdaV04wYjNJeU9pQXVZV1JrS0NrZ2JtOTNJRzl1YkhrZ1lXTmpaWEIwY3lCdmJtVWdZWEpuZFcxbGJuUXVJRlZ6WlNBdVlXUmtWbVZqZEc5eWN5Z2dZU3dnWWlBcElHbHVjM1JsWVdRdUlpa3NJSFJvYVhNdVlXUmtWbVZqZEc5eWN5aGxMQ0IwS1NrZ09pQW9kR2hwY3k1NElDczlJR1V1ZUN3Z2RHaHBjeTU1SUNzOUlHVXVlU3dnZEdocGN5azdDaUFnSUNCOUNpQWdJQ0JoWkdSVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS3owZ1pTd2dkR2hwY3k1NUlDczlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JoWkdSV1pXTjBiM0p6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdaUzU0SUNzZ2RDNTRMQ0IwYUdsekxua2dQU0JsTG5rZ0t5QjBMbmtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JoWkdSVFkyRnNaV1JXWldOMGIzSW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS3owZ1pTNTRJQ29nZEN3Z2RHaHBjeTU1SUNzOUlHVXVlU0FxSUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRXSW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMElDRTlQU0IyYjJsa0lEQWdQeUFvWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1V1pXTjBiM0l5T2lBdWMzVmlLQ2tnYm05M0lHOXViSGtnWVdOalpYQjBjeUJ2Ym1VZ1lYSm5kVzFsYm5RdUlGVnpaU0F1YzNWaVZtVmpkRzl5Y3lnZ1lTd2dZaUFwSUdsdWMzUmxZV1F1SWlrc0lIUm9hWE11YzNWaVZtVmpkRzl5Y3lobExDQjBLU2tnT2lBb2RHaHBjeTU0SUMwOUlHVXVlQ3dnZEdocGN5NTVJQzA5SUdVdWVTd2dkR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQnpkV0pUWTJGc1lYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dMVDBnWlN3Z2RHaHBjeTU1SUMwOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpkV0pXWldOMGIzSnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pTNTRJQzBnZEM1NExDQjBhR2x6TG5rZ1BTQmxMbmtnTFNCMExua3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRkV3gwYVhCc2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXFQU0JsTG5nc0lIUm9hWE11ZVNBcVBTQmxMbmtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0ZFd4MGFYQnNlVk5qWVd4aGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXFQU0JsTENCMGFHbHpMbmtnS2owZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnBkbWxrWlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBdlBTQmxMbmdzSUhSb2FYTXVlU0F2UFNCbExua3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmthWFpwWkdWVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVVMk5oYkdGeUtERWdMeUJsS1RzS0lDQWdJSDBLSUNBZ0lHRndjR3g1VFdGMGNtbDRNeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbmdzSUc0Z1BTQjBhR2x6TG5rc0lHa2dQU0JsTG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JwV3pCZElDb2dkQ0FySUdsYk0xMGdLaUJ1SUNzZ2FWczJYU3dnZEdocGN5NTVJRDBnYVZzeFhTQXFJSFFnS3lCcFd6UmRJQ29nYmlBcklHbGJOMTBzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0YVc0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG0xcGJpaDBhR2x6TG5nc0lHVXVlQ2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3ViV2x1S0hSb2FYTXVlU3dnWlM1NUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhlQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3ViV0Y0S0hSb2FYTXVlQ3dnWlM1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1dFlYZ29kR2hwY3k1NUxDQmxMbmtwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4aGJYQW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFoZUNobExuZ3NJRTFoZEdndWJXbHVLSFF1ZUN3Z2RHaHBjeTU0S1Nrc0lIUm9hWE11ZVNBOUlFMWhkR2d1YldGNEtHVXVlU3dnVFdGMGFDNXRhVzRvZEM1NUxDQjBhR2x6TG5rcEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnNZVzF3VTJOaGJHRnlLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzV0WVhnb1pTd2dUV0YwYUM1dGFXNG9kQ3dnZEdocGN5NTRLU2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3ViV0Y0S0dVc0lFMWhkR2d1YldsdUtIUXNJSFJvYVhNdWVTa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnhoYlhCTVpXNW5kR2dvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWthWFpwWkdWVFkyRnNZWElvYmlCOGZDQXhLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaE5ZWFJvTG0xaGVDaGxMQ0JOWVhSb0xtMXBiaWgwTENCdUtTa3BPd29nSUNBZ2ZRb2dJQ0FnWm14dmIzSW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJRTFoZEdndVpteHZiM0lvZEdocGN5NTRLU3dnZEdocGN5NTVJRDBnVFdGMGFDNW1iRzl2Y2loMGFHbHpMbmtwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJWcGJDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1alpXbHNLSFJvYVhNdWVDa3NJSFJvYVhNdWVTQTlJRTFoZEdndVkyVnBiQ2gwYUdsekxua3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkxYm1Rb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1Y205MWJtUW9kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1eWIzVnVaQ2gwYUdsekxua3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkxYm1SVWIxcGxjbThvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUhSb2FYTXVlQ0E4SURBZ1B5Qk5ZWFJvTG1ObGFXd29kR2hwY3k1NEtTQTZJRTFoZEdndVpteHZiM0lvZEdocGN5NTRLU3dnZEdocGN5NTVJRDBnZEdocGN5NTVJRHdnTUNBL0lFMWhkR2d1WTJWcGJDaDBhR2x6TG5rcElEb2dUV0YwYUM1bWJHOXZjaWgwYUdsekxua3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdibVZuWVhSbEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQXRkR2hwY3k1NExDQjBhR2x6TG5rZ1BTQXRkR2hwY3k1NUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHOTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQ29nWlM1NElDc2dkR2hwY3k1NUlDb2daUzU1T3dvZ0lDQWdmUW9nSUNBZ1kzSnZjM01vWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2lCbExua2dMU0IwYUdsekxua2dLaUJsTG5nN0NpQWdJQ0I5Q2lBZ0lDQnNaVzVuZEdoVGNTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElDb2dkR2hwY3k1NElDc2dkR2hwY3k1NUlDb2dkR2hwY3k1NU93b2dJQ0FnZlFvZ0lDQWdiR1Z1WjNSb0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5OeGNuUW9kR2hwY3k1NElDb2dkR2hwY3k1NElDc2dkR2hwY3k1NUlDb2dkR2hwY3k1NUtUc0tJQ0FnSUgwS0lDQWdJRzFoYm1oaGRIUmhia3hsYm1kMGFDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1aFluTW9kR2hwY3k1NEtTQXJJRTFoZEdndVlXSnpLSFJvYVhNdWVTazdDaUFnSUNCOUNpQWdJQ0J1YjNKdFlXeHBlbVVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR2wyYVdSbFUyTmhiR0Z5S0hSb2FYTXViR1Z1WjNSb0tDa2dmSHdnTVNrN0NpQWdJQ0I5Q2lBZ0lDQmhibWRzWlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzVoZEdGdU1pZ3RkR2hwY3k1NUxDQXRkR2hwY3k1NEtTQXJJRTFoZEdndVVFazdDaUFnSUNCOUNpQWdJQ0JrYVhOMFlXNWpaVlJ2S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzV6Y1hKMEtIUm9hWE11WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvWlNrcE93b2dJQ0FnZlFvZ0lDQWdaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NTRJQzBnWlM1NExDQnVJRDBnZEdocGN5NTVJQzBnWlM1NU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMElDb2dkQ0FySUc0Z0tpQnVPd29nSUNBZ2ZRb2dJQ0FnYldGdWFHRjBkR0Z1UkdsemRHRnVZMlZVYnlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1WVdKektIUm9hWE11ZUNBdElHVXVlQ2tnS3lCTllYUm9MbUZpY3loMGFHbHpMbmtnTFNCbExua3BPd29nSUNBZ2ZRb2dJQ0FnYzJWMFRHVnVaM1JvS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXeHBlbVVvS1M1dGRXeDBhWEJzZVZOallXeGhjaWhsS1RzS0lDQWdJSDBLSUNBZ0lHeGxjbkFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ0t6MGdLR1V1ZUNBdElIUm9hWE11ZUNrZ0tpQjBMQ0IwYUdsekxua2dLejBnS0dVdWVTQXRJSFJvYVhNdWVTa2dLaUIwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYkdWeWNGWmxZM1J2Y25Nb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExuZ2dLeUFvZEM1NElDMGdaUzU0S1NBcUlHNHNJSFJvYVhNdWVTQTlJR1V1ZVNBcklDaDBMbmtnTFNCbExua3BJQ29nYml3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWVDQTlQVDBnZEdocGN5NTRJQ1ltSUdVdWVTQTlQVDBnZEdocGN5NTVPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVRnljbUY1S0dVc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdWYmRGMHNJSFJvYVhNdWVTQTlJR1ZiZENBcklERmRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlCY25KaGVTaGxJRDBnVzEwc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0IwYUdsekxuZ3NJR1ZiZENBcklERmRJRDBnZEdocGN5NTVMQ0JsT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNGdJVDA5SUhadmFXUWdNQ0FtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsWmxZM1J2Y2pJNklHOW1abk5sZENCb1lYTWdZbVZsYmlCeVpXMXZkbVZrSUdaeWIyMGdMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvS1M0aUtTd2dkR2hwY3k1NElEMGdaUzVuWlhSWUtIUXBMQ0IwYUdsekxua2dQU0JsTG1kbGRGa29kQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVkJjbTkxYm1Rb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnVFdGMGFDNWpiM01vZENrc0lHa2dQU0JOWVhSb0xuTnBiaWgwS1N3Z2NpQTlJSFJvYVhNdWVDQXRJR1V1ZUN3Z2J5QTlJSFJvYVhNdWVTQXRJR1V1ZVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnY2lBcUlHNGdMU0J2SUNvZ2FTQXJJR1V1ZUN3Z2RHaHBjeTU1SUQwZ2NpQXFJR2tnS3lCdklDb2diaUFySUdVdWVTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lISmhibVJ2YlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzV5WVc1a2IyMG9LU3dnZEdocGN5NTVJRDBnVFdGMGFDNXlZVzVrYjIwb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lDcGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BJSHNLSUNBZ0lDQWdJQ0I1YVdWc1pDQjBhR2x6TG5nc0lIbHBaV3hrSUhSb2FYTXVlVHNLSUNBZ0lIMEtmVHNLV0M1d2NtOTBiM1I1Y0dVdWFYTldaV04wYjNJeUlEMGdJVEE3Q25aaGNpQnNkQ0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MGN5QTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNUW9nSUNBZ0lDQWdJRjBzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBd0lDWW1JR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGsxaGRISnBlRE02SUhSb1pTQmpiMjV6ZEhKMVkzUnZjaUJ1YnlCc2IyNW5aWElnY21WaFpITWdZWEpuZFcxbGJuUnpMaUIxYzJVZ0xuTmxkQ2dwSUdsdWMzUmxZV1F1SWlrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFvWlN3Z2RDd2diaXdnYVN3Z2Npd2dieXdnWVN3Z2JDd2dZeWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnZEdocGN5NWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2FGc3dYU0E5SUdVc0lHaGJNVjBnUFNCcExDQm9XekpkSUQwZ1lTd2dhRnN6WFNBOUlIUXNJR2hiTkYwZ1BTQnlMQ0JvV3pWZElEMGdiQ3dnYUZzMlhTQTlJRzRzSUdoYk4xMGdQU0J2TENCb1d6aGRJRDBnWXl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdsa1pXNTBhWFI1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZENneExDQXdMQ0F3TENBd0xDQXhMQ0F3TENBd0xDQXdMQ0F4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2diaUE5SUdVdVpXeGxiV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSYk1GMGdQU0J1V3pCZExDQjBXekZkSUQwZ2Jsc3hYU3dnZEZzeVhTQTlJRzViTWwwc0lIUmJNMTBnUFNCdVd6TmRMQ0IwV3pSZElEMGdibHMwWFN3Z2RGczFYU0E5SUc1Yk5WMHNJSFJiTmwwZ1BTQnVXelpkTENCMFd6ZGRJRDBnYmxzM1hTd2dkRnM0WFNBOUlHNWJPRjBzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JsZUhSeVlXTjBRbUZ6YVhNb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExuTmxkRVp5YjIxTllYUnlhWGd6UTI5c2RXMXVLSFJvYVhNc0lEQXBMQ0IwTG5ObGRFWnliMjFOWVhSeWFYZ3pRMjlzZFcxdUtIUm9hWE1zSURFcExDQnVMbk5sZEVaeWIyMU5ZWFJ5YVhnelEyOXNkVzF1S0hSb2FYTXNJRElwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVTFoZEhKcGVEUW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1bGJHVnRaVzUwY3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFFvZEZzd1hTd2dkRnMwWFN3Z2RGczRYU3dnZEZzeFhTd2dkRnMxWFN3Z2RGczVYU3dnZEZzeVhTd2dkRnMyWFN3Z2RGc3hNRjBwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVUV0YwY21salpYTW9kR2hwY3l3Z1pTazdDaUFnSUNCOUNpQWdJQ0J3Y21WdGRXeDBhWEJzZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YlhWc2RHbHdiSGxOWVhSeWFXTmxjeWhsTENCMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUcxMWJIUnBjR3g1VFdGMGNtbGpaWE1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdaUzVsYkdWdFpXNTBjeXdnYVNBOUlIUXVaV3hsYldWdWRITXNJSElnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0J2SUQwZ2Jsc3dYU3dnWVNBOUlHNWJNMTBzSUd3Z1BTQnVXelpkTENCaklEMGdibHN4WFN3Z2FDQTlJRzViTkYwc0lIVWdQU0J1V3pkZExDQmtJRDBnYmxzeVhTd2daaUE5SUc1Yk5WMHNJRzBnUFNCdVd6aGRMQ0I0SUQwZ2FWc3dYU3dnZGlBOUlHbGJNMTBzSUdjZ1BTQnBXelpkTENCd0lEMGdhVnN4WFN3Z1h5QTlJR2xiTkYwc0lIa2dQU0JwV3pkZExDQmlJRDBnYVZzeVhTd2dRU0E5SUdsYk5WMHNJRXdnUFNCcFd6aGRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnlXekJkSUQwZ2J5QXFJSGdnS3lCaElDb2djQ0FySUd3Z0tpQmlMQ0J5V3pOZElEMGdieUFxSUhZZ0t5QmhJQ29nWHlBcklHd2dLaUJCTENCeVd6WmRJRDBnYnlBcUlHY2dLeUJoSUNvZ2VTQXJJR3dnS2lCTUxDQnlXekZkSUQwZ1l5QXFJSGdnS3lCb0lDb2djQ0FySUhVZ0tpQmlMQ0J5V3pSZElEMGdZeUFxSUhZZ0t5Qm9JQ29nWHlBcklIVWdLaUJCTENCeVd6ZGRJRDBnWXlBcUlHY2dLeUJvSUNvZ2VTQXJJSFVnS2lCTUxDQnlXekpkSUQwZ1pDQXFJSGdnS3lCbUlDb2djQ0FySUcwZ0tpQmlMQ0J5V3pWZElEMGdaQ0FxSUhZZ0t5Qm1JQ29nWHlBcklHMGdLaUJCTENCeVd6aGRJRDBnWkNBcUlHY2dLeUJtSUNvZ2VTQXJJRzBnS2lCTUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3YkhsVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRnN3WFNBcVBTQmxMQ0IwV3pOZElDbzlJR1VzSUhSYk5sMGdLajBnWlN3Z2RGc3hYU0FxUFNCbExDQjBXelJkSUNvOUlHVXNJSFJiTjEwZ0tqMGdaU3dnZEZzeVhTQXFQU0JsTENCMFd6VmRJQ285SUdVc0lIUmJPRjBnS2owZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUmxkR1Z5YldsdVlXNTBLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2dkQ0E5SUdWYk1GMHNJRzRnUFNCbFd6RmRMQ0JwSUQwZ1pWc3lYU3dnY2lBOUlHVmJNMTBzSUc4Z1BTQmxXelJkTENCaElEMGdaVnMxWFN3Z2JDQTlJR1ZiTmwwc0lHTWdQU0JsV3pkZExDQm9JRDBnWlZzNFhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDQXFJRzhnS2lCb0lDMGdkQ0FxSUdFZ0tpQmpJQzBnYmlBcUlISWdLaUJvSUNzZ2JpQXFJR0VnS2lCc0lDc2dhU0FxSUhJZ0tpQmpJQzBnYVNBcUlHOGdLaUJzT3dvZ0lDQWdmUW9nSUNBZ2FXNTJaWEowS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVsYkdWdFpXNTBjeXdnZENBOUlHVmJNRjBzSUc0Z1BTQmxXekZkTENCcElEMGdaVnN5WFN3Z2NpQTlJR1ZiTTEwc0lHOGdQU0JsV3pSZExDQmhJRDBnWlZzMVhTd2diQ0E5SUdWYk5sMHNJR01nUFNCbFd6ZGRMQ0JvSUQwZ1pWczRYU3dnZFNBOUlHZ2dLaUJ2SUMwZ1lTQXFJR01zSUdRZ1BTQmhJQ29nYkNBdElHZ2dLaUJ5TENCbUlEMGdZeUFxSUhJZ0xTQnZJQ29nYkN3Z2JTQTlJSFFnS2lCMUlDc2diaUFxSUdRZ0t5QnBJQ29nWmpzS0lDQWdJQ0FnSUNCcFppQW9iU0E5UFQwZ01Da2djbVYwZFhKdUlIUm9hWE11YzJWMEtEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBcE93b2dJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ01TQXZJRzA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZiTUYwZ1BTQjFJQ29nZUN3Z1pWc3hYU0E5SUNocElDb2dZeUF0SUdnZ0tpQnVLU0FxSUhnc0lHVmJNbDBnUFNBb1lTQXFJRzRnTFNCcElDb2dieWtnS2lCNExDQmxXek5kSUQwZ1pDQXFJSGdzSUdWYk5GMGdQU0FvYUNBcUlIUWdMU0JwSUNvZ2JDa2dLaUI0TENCbFd6VmRJRDBnS0drZ0tpQnlJQzBnWVNBcUlIUXBJQ29nZUN3Z1pWczJYU0E5SUdZZ0tpQjRMQ0JsV3pkZElEMGdLRzRnS2lCc0lDMGdZeUFxSUhRcElDb2dlQ3dnWlZzNFhTQTlJQ2h2SUNvZ2RDQXRJRzRnS2lCeUtTQXFJSGdzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwY21GdWMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VzSUhRZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUQwZ2RGc3hYU3dnZEZzeFhTQTlJSFJiTTEwc0lIUmJNMTBnUFNCbExDQmxJRDBnZEZzeVhTd2dkRnN5WFNBOUlIUmJObDBzSUhSYk5sMGdQU0JsTENCbElEMGdkRnMxWFN3Z2RGczFYU0E5SUhSYk4xMHNJSFJiTjEwZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwVG05eWJXRnNUV0YwY21sNEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUkdjbTl0VFdGMGNtbDROQ2hsS1M1cGJuWmxjblFvS1M1MGNtRnVjM0J2YzJVb0tUc0tJQ0FnSUgwS0lDQWdJSFJ5WVc1emNHOXpaVWx1ZEc5QmNuSmhlU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxXekJkSUQwZ2RGc3dYU3dnWlZzeFhTQTlJSFJiTTEwc0lHVmJNbDBnUFNCMFd6WmRMQ0JsV3pOZElEMGdkRnN4WFN3Z1pWczBYU0E5SUhSYk5GMHNJR1ZiTlYwZ1BTQjBXemRkTENCbFd6WmRJRDBnZEZzeVhTd2daVnMzWFNBOUlIUmJOVjBzSUdWYk9GMGdQU0IwV3poZExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBWWFpVY21GdWMyWnZjbTBvWlN3Z2RDd2diaXdnYVN3Z2Npd2dieXdnWVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1RXRjBhQzVqYjNNb2Npa3NJR01nUFNCTllYUm9Mbk5wYmloeUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhRb2JpQXFJR3dzSUc0Z0tpQmpMQ0F0YmlBcUlDaHNJQ29nYnlBcklHTWdLaUJoS1NBcklHOGdLeUJsTENBdGFTQXFJR01zSUdrZ0tpQnNMQ0F0YVNBcUlDZ3RZeUFxSUc4Z0t5QnNJQ29nWVNrZ0t5QmhJQ3NnZEN3Z01Dd2dNQ3dnTVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelkyRnNaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1V3pCZElDbzlJR1VzSUc1Yk0xMGdLajBnWlN3Z2JsczJYU0FxUFNCbExDQnVXekZkSUNvOUlIUXNJRzViTkYwZ0tqMGdkQ3dnYmxzM1hTQXFQU0IwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY205MFlYUmxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUUxaGRHZ3VZMjl6S0dVcExDQnVJRDBnVFdGMGFDNXphVzRvWlNrc0lHa2dQU0IwYUdsekxtVnNaVzFsYm5SekxDQnlJRDBnYVZzd1hTd2dieUE5SUdsYk0xMHNJR0VnUFNCcFd6WmRMQ0JzSUQwZ2FWc3hYU3dnWXlBOUlHbGJORjBzSUdnZ1BTQnBXemRkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJwV3pCZElEMGdkQ0FxSUhJZ0t5QnVJQ29nYkN3Z2FWc3pYU0E5SUhRZ0tpQnZJQ3NnYmlBcUlHTXNJR2xiTmwwZ1BTQjBJQ29nWVNBcklHNGdLaUJvTENCcFd6RmRJRDBnTFc0Z0tpQnlJQ3NnZENBcUlHd3NJR2xiTkYwZ1BTQXRiaUFxSUc4Z0t5QjBJQ29nWXl3Z2FWczNYU0E5SUMxdUlDb2dZU0FySUhRZ0tpQm9MQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkSEpoYm5Oc1lYUmxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11Wld4bGJXVnVkSE03Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzViTUYwZ0t6MGdaU0FxSUc1Yk1sMHNJRzViTTEwZ0t6MGdaU0FxSUc1Yk5WMHNJRzViTmwwZ0t6MGdaU0FxSUc1Yk9GMHNJRzViTVYwZ0t6MGdkQ0FxSUc1Yk1sMHNJRzViTkYwZ0t6MGdkQ0FxSUc1Yk5WMHNJRzViTjEwZ0t6MGdkQ0FxSUc1Yk9GMHNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmxjWFZoYkhNb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1bGJHVnRaVzUwY3l3Z2JpQTlJR1V1Wld4bGJXVnVkSE03Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Ec2dhU0E4SURrN0lHa3JLeWxwWmlBb2RGdHBYU0FoUFQwZ2JsdHBYU2tnY21WMGRYSnVJQ0V4T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUFoTURzS0lDQWdJSDBLSUNBZ0lHWnliMjFCY25KaGVTaGxMQ0IwSUQwZ01Da2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBN0lHNGdQQ0E1T3lCdUt5c3BkR2hwY3k1bGJHVnRaVzUwYzF0dVhTQTlJR1ZiYmlBcklIUmRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUJjbkpoZVNobElEMGdXMTBzSUhRZ1BTQXdLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtVnNaVzFsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbFczUmRJRDBnYmxzd1hTd2daVnQwSUNzZ01WMGdQU0J1V3pGZExDQmxXM1FnS3lBeVhTQTlJRzViTWwwc0lHVmJkQ0FySUROZElEMGdibHN6WFN3Z1pWdDBJQ3NnTkYwZ1BTQnVXelJkTENCbFczUWdLeUExWFNBOUlHNWJOVjBzSUdWYmRDQXJJRFpkSUQwZ2JsczJYU3dnWlZ0MElDc2dOMTBnUFNCdVd6ZGRMQ0JsVzNRZ0t5QTRYU0E5SUc1Yk9GMHNJR1U3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNW1jbTl0UVhKeVlYa29kR2hwY3k1bGJHVnRaVzUwY3lrN0NpQWdJQ0I5Q24wN0NteDBMbkJ5YjNSdmRIbHdaUzVwYzAxaGRISnBlRE1nUFNBaE1Ec0tablZ1WTNScGIyNGdXV01vY3lrZ2V3b2dJQ0FnYVdZZ0tITXViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTRnTFRFZ0x5QXdPd29nSUNBZ2JHVjBJR1VnUFNCeld6QmRPd29nSUNBZ1ptOXlLR3hsZENCMElEMGdNU3dnYmlBOUlITXViR1Z1WjNSb095QjBJRHdnYmpzZ0t5dDBLWE5iZEYwZ1BpQmxJQ1ltSUNobElEMGdjMXQwWFNrN0NpQWdJQ0J5WlhSMWNtNGdaVHNLZlFwMllYSWdVV1FnUFNCN0NpQWdJQ0JKYm5RNFFYSnlZWGtzQ2lBZ0lDQlZhVzUwT0VGeWNtRjVMQW9nSUNBZ1ZXbHVkRGhEYkdGdGNHVmtRWEp5WVhrc0NpQWdJQ0JKYm5ReE5rRnljbUY1TEFvZ0lDQWdWV2x1ZERFMlFYSnlZWGtzQ2lBZ0lDQkpiblF6TWtGeWNtRjVMQW9nSUNBZ1ZXbHVkRE15UVhKeVlYa3NDaUFnSUNCR2JHOWhkRE15UVhKeVlYa3NDaUFnSUNCR2JHOWhkRFkwUVhKeVlYa0tmVHNLWm5WdVkzUnBiMjRnZDJrb2N5d2daU2tnZXdvZ0lDQWdjbVYwZFhKdUlHNWxkeUJSWkZ0elhTaGxLVHNLZlFwbWRXNWpkR2x2YmlCeGN5aHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkRTVUS0NKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMM2hvZEcxc0lpd2djeWs3Q24wS2RtRnlJSFJwTENCWmJpQTlJR05zWVhOeklIc0tJQ0FnSUhOMFlYUnBZeUJuWlhSRVlYUmhWVkpNS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvTDE1a1lYUmhPaTlwTG5SbGMzUW9aUzV6Y21NcElIeDhJSFI1Y0dWdlppQklWRTFNUTJGdWRtRnpSV3hsYldWdWRDQStJQ0oxSWlrZ2NtVjBkWEp1SUdVdWMzSmpPd29nSUNBZ0lDQWdJR3hsZENCME93b2dJQ0FnSUNBZ0lHbG1JQ2hsSUdsdWMzUmhibU5sYjJZZ1NGUk5URU5oYm5aaGMwVnNaVzFsYm5RcElIUWdQU0JsT3dvZ0lDQWdJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCMGFTQTlQVDBnZG05cFpDQXdJQ1ltSUNoMGFTQTlJSEZ6S0NKallXNTJZWE1pS1Nrc0lIUnBMbmRwWkhSb0lEMGdaUzUzYVdSMGFDd2dkR2t1YUdWcFoyaDBJRDBnWlM1b1pXbG5hSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHa3VaMlYwUTI5dWRHVjRkQ2dpTW1RaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWlNCcGJuTjBZVzVqWlc5bUlFbHRZV2RsUkdGMFlTQS9JRzR1Y0hWMFNXMWhaMlZFWVhSaEtHVXNJREFzSURBcElEb2diaTVrY21GM1NXMWhaMlVvWlN3Z01Dd2dNQ3dnWlM1M2FXUjBhQ3dnWlM1b1pXbG5hSFFwTENCMElEMGdkR2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwTG5kcFpIUm9JRDRnTWpBME9DQjhmQ0IwTG1obGFXZG9kQ0ErSURJd05EZ2dQeUFvWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1SmJXRm5aVlYwYVd4ekxtZGxkRVJoZEdGVlVrdzZJRWx0WVdkbElHTnZiblpsY25SbFpDQjBieUJxY0djZ1ptOXlJSEJsY21admNtMWhibU5sSUhKbFlYTnZibk1pTENCbEtTd2dkQzUwYjBSaGRHRlZVa3dvSW1sdFlXZGxMMnB3WldjaUxDQXVOaWtwSURvZ2RDNTBiMFJoZEdGVlVrd29JbWx0WVdkbEwzQnVaeUlwT3dvZ0lDQWdmUXA5TENCTFpDQTlJREFzSUc5MElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCRmJpQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYjNRdVJFVkdRVlZNVkY5SlRVRkhSU3dnZENBOUlHOTBMa1JGUmtGVlRGUmZUVUZRVUVsT1J5d2diaUE5SUhaMExDQnBJRDBnZG5Rc0lISWdQU0IwZEN3Z2J5QTlJRlZwTENCaElEMGdZM1FzSUd3Z1BTQnliaXdnWXlBOUlERXNJR2dnUFNCT2RDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdocGN5d2dJbWxrSWl3Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dTMlFyS3dvZ0lDQWdJQ0FnSUgwcExDQjBhR2x6TG5WMWFXUWdQU0JGZENncExDQjBhR2x6TG01aGJXVWdQU0FpSWl3Z2RHaHBjeTVwYldGblpTQTlJR1VzSUhSb2FYTXViV2x3YldGd2N5QTlJRnRkTENCMGFHbHpMbTFoY0hCcGJtY2dQU0IwTENCMGFHbHpMbmR5WVhCVElEMGdiaXdnZEdocGN5NTNjbUZ3VkNBOUlHa3NJSFJvYVhNdWJXRm5SbWxzZEdWeUlEMGdjaXdnZEdocGN5NXRhVzVHYVd4MFpYSWdQU0J2TENCMGFHbHpMbUZ1YVhOdmRISnZjSGtnUFNCakxDQjBhR2x6TG1admNtMWhkQ0E5SUdFc0lIUm9hWE11YVc1MFpYSnVZV3hHYjNKdFlYUWdQU0J1ZFd4c0xDQjBhR2x6TG5SNWNHVWdQU0JzTENCMGFHbHpMbTltWm5ObGRDQTlJRzVsZHlCWUtEQXNJREFwTENCMGFHbHpMbkpsY0dWaGRDQTlJRzVsZHlCWUtERXNJREVwTENCMGFHbHpMbU5sYm5SbGNpQTlJRzVsZHlCWUtEQXNJREFwTENCMGFHbHpMbkp2ZEdGMGFXOXVJRDBnTUN3Z2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRBc0lIUm9hWE11YldGMGNtbDRJRDBnYm1WM0lHeDBMQ0IwYUdsekxtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lBOUlDRXdMQ0IwYUdsekxuQnlaVzExYkhScGNHeDVRV3h3YUdFZ1BTQWhNU3dnZEdocGN5NW1iR2x3V1NBOUlDRXdMQ0IwYUdsekxuVnVjR0ZqYTBGc2FXZHViV1Z1ZENBOUlEUXNJSFJvYVhNdVpXNWpiMlJwYm1jZ1BTQm9MQ0IwYUdsekxuVnpaWEpFWVhSaElEMGdlMzBzSUhSb2FYTXVkbVZ5YzJsdmJpQTlJREFzSUhSb2FYTXViMjVWY0dSaGRHVWdQU0J1ZFd4c0xDQjBhR2x6TG1selVtVnVaR1Z5VkdGeVoyVjBWR1Y0ZEhWeVpTQTlJQ0V4T3dvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsVFdGMGNtbDRLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXViV0YwY21sNExuTmxkRlYyVkhKaGJuTm1iM0p0S0hSb2FYTXViMlptYzJWMExuZ3NJSFJvYVhNdWIyWm1jMlYwTG5rc0lIUm9hWE11Y21Wd1pXRjBMbmdzSUhSb2FYTXVjbVZ3WldGMExua3NJSFJvYVhNdWNtOTBZWFJwYjI0c0lIUm9hWE11WTJWdWRHVnlMbmdzSUhSb2FYTXVZMlZ1ZEdWeUxua3BPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01aGJXVWdQU0JsTG01aGJXVXNJSFJvYVhNdWFXMWhaMlVnUFNCbExtbHRZV2RsTENCMGFHbHpMbTFwY0cxaGNITWdQU0JsTG0xcGNHMWhjSE11YzJ4cFkyVW9NQ2tzSUhSb2FYTXViV0Z3Y0dsdVp5QTlJR1V1YldGd2NHbHVaeXdnZEdocGN5NTNjbUZ3VXlBOUlHVXVkM0poY0ZNc0lIUm9hWE11ZDNKaGNGUWdQU0JsTG5keVlYQlVMQ0IwYUdsekxtMWhaMFpwYkhSbGNpQTlJR1V1YldGblJtbHNkR1Z5TENCMGFHbHpMbTFwYmtacGJIUmxjaUE5SUdVdWJXbHVSbWxzZEdWeUxDQjBhR2x6TG1GdWFYTnZkSEp2Y0hrZ1BTQmxMbUZ1YVhOdmRISnZjSGtzSUhSb2FYTXVabTl5YldGMElEMGdaUzVtYjNKdFlYUXNJSFJvYVhNdWFXNTBaWEp1WVd4R2IzSnRZWFFnUFNCbExtbHVkR1Z5Ym1Gc1JtOXliV0YwTENCMGFHbHpMblI1Y0dVZ1BTQmxMblI1Y0dVc0lIUm9hWE11YjJabWMyVjBMbU52Y0hrb1pTNXZabVp6WlhRcExDQjBhR2x6TG5KbGNHVmhkQzVqYjNCNUtHVXVjbVZ3WldGMEtTd2dkR2hwY3k1alpXNTBaWEl1WTI5d2VTaGxMbU5sYm5SbGNpa3NJSFJvYVhNdWNtOTBZWFJwYjI0Z1BTQmxMbkp2ZEdGMGFXOXVMQ0IwYUdsekxtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQmxMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVXNJSFJvYVhNdWJXRjBjbWw0TG1OdmNIa29aUzV0WVhSeWFYZ3BMQ0IwYUdsekxtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lBOUlHVXVaMlZ1WlhKaGRHVk5hWEJ0WVhCekxDQjBhR2x6TG5CeVpXMTFiSFJwY0d4NVFXeHdhR0VnUFNCbExuQnlaVzExYkhScGNHeDVRV3h3YUdFc0lIUm9hWE11Wm14cGNGa2dQU0JsTG1ac2FYQlpMQ0IwYUdsekxuVnVjR0ZqYTBGc2FXZHViV1Z1ZENBOUlHVXVkVzV3WVdOclFXeHBaMjV0Wlc1MExDQjBhR2x6TG1WdVkyOWthVzVuSUQwZ1pTNWxibU52WkdsdVp5d2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlFcFRUMDR1Y0dGeWMyVW9TbE5QVGk1emRISnBibWRwWm5rb1pTNTFjMlZ5UkdGMFlTa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1VnUFQwOUlIWnZhV1FnTUNCOGZDQjBlWEJsYjJZZ1pTQTlQU0FpYzNSeWFXNW5JanNLSUNBZ0lDQWdJQ0JwWmlBb0lYUWdKaVlnWlM1MFpYaDBkWEpsYzF0MGFHbHpMblYxYVdSZElDRTlQU0IyYjJsa0lEQXBJSEpsZEhWeWJpQmxMblJsZUhSMWNtVnpXM1JvYVhNdWRYVnBaRjA3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMWxkR0ZrWVhSaE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJaWEp6YVc5dU9pQTBMalVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlWR1Y0ZEhWeVpTSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aVzVsY21GMGIzSTZJQ0pVWlhoMGRYSmxMblJ2U2xOUFRpSUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkWFZwWkRvZ2RHaHBjeTUxZFdsa0xBb2dJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQjBhR2x6TG01aGJXVXNDaUFnSUNBZ0lDQWdJQ0FnSUcxaGNIQnBibWM2SUhSb2FYTXViV0Z3Y0dsdVp5d0tJQ0FnSUNBZ0lDQWdJQ0FnY21Wd1pXRjBPaUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjR1ZoZEM1NExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhCbFlYUXVlUW9nSUNBZ0lDQWdJQ0FnSUNCZExBb2dJQ0FnSUNBZ0lDQWdJQ0J2Wm1aelpYUTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyWm1jMlYwTG5nc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTltWm5ObGRDNTVDaUFnSUNBZ0lDQWdJQ0FnSUYwc0NpQWdJQ0FnSUNBZ0lDQWdJR05sYm5SbGNqb2dXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1alpXNTBaWEl1ZUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMlZ1ZEdWeUxua0tJQ0FnSUNBZ0lDQWdJQ0FnWFN3S0lDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhScGIyNDZJSFJvYVhNdWNtOTBZWFJwYjI0c0NpQWdJQ0FnSUNBZ0lDQWdJSGR5WVhBNklGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKaGNGTXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keVlYQlVDaUFnSUNBZ0lDQWdJQ0FnSUYwc0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y20xaGREb2dkR2hwY3k1bWIzSnRZWFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUhSb2FYTXVkSGx3WlN3S0lDQWdJQ0FnSUNBZ0lDQWdaVzVqYjJScGJtYzZJSFJvYVhNdVpXNWpiMlJwYm1jc0NpQWdJQ0FnSUNBZ0lDQWdJRzFwYmtacGJIUmxjam9nZEdocGN5NXRhVzVHYVd4MFpYSXNDaUFnSUNBZ0lDQWdJQ0FnSUcxaFowWnBiSFJsY2pvZ2RHaHBjeTV0WVdkR2FXeDBaWElzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnVhWE52ZEhKdmNIazZJSFJvYVhNdVlXNXBjMjkwY205d2VTd0tJQ0FnSUNBZ0lDQWdJQ0FnWm14cGNGazZJSFJvYVhNdVpteHBjRmtzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQnlaVzExYkhScGNHeDVRV3h3YUdFNklIUm9hWE11Y0hKbGJYVnNkR2x3YkhsQmJIQm9ZU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RXNXdZV05yUVd4cFoyNXRaVzUwT2lCMGFHbHpMblZ1Y0dGamEwRnNhV2R1YldWdWRBb2dJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhVzFoWjJVZ0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVhVzFoWjJVN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocExuVjFhV1FnUFQwOUlIWnZhV1FnTUNBbUppQW9hUzUxZFdsa0lEMGdSWFFvS1Nrc0lDRjBJQ1ltSUdVdWFXMWhaMlZ6VzJrdWRYVnBaRjBnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hwS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSElnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzhnUFNBd0xDQmhJRDBnYVM1c1pXNW5kR2c3SUc4Z1BDQmhPeUJ2S3lzcGFWdHZYUzVwYzBSaGRHRlVaWGgwZFhKbElEOGdjaTV3ZFhOb0tGOXZLR2xiYjEwdWFXMWhaMlVwS1NBNklISXVjSFZ6YUNoZmJ5aHBXMjlkS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnY2lBOUlGOXZLR2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1cGJXRm5aWE5iYVM1MWRXbGtYU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFkV2xrT2lCcExuVjFhV1FzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNPaUJ5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUc0dWFXMWhaMlVnUFNCcExuVjFhV1E3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJLVTA5T0xuTjBjbWx1WjJsbWVTaDBhR2x6TG5WelpYSkVZWFJoS1NBaFBUMGdJbnQ5SWlBbUppQW9iaTUxYzJWeVJHRjBZU0E5SUhSb2FYTXVkWE5sY2tSaGRHRXBMQ0IwSUh4OElDaGxMblJsZUhSMWNtVnpXM1JvYVhNdWRYVnBaRjBnUFNCdUtTd2dianNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOd1lYUmphRVYyWlc1MEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbVJwYzNCdmMyVWlDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjMlp2Y20xVmRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YldGd2NHbHVaeUFoUFQwZ2FHRXBJSEpsZEhWeWJpQmxPd29nSUNBZ0lDQWdJR2xtSUNobExtRndjR3g1VFdGMGNtbDRNeWgwYUdsekxtMWhkSEpwZUNrc0lHVXVlQ0E4SURBZ2ZId2daUzU0SUQ0Z01Ta2djM2RwZEdOb0tIUm9hWE11ZDNKaGNGTXBld29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJRTV6T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1NElEMGdaUzU0SUMwZ1RXRjBhQzVtYkc5dmNpaGxMbmdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdkblE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5nZ1BTQmxMbmdnUENBd0lEOGdNQ0E2SURFN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JDY3pvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUUxaGRHZ3VZV0p6S0UxaGRHZ3VabXh2YjNJb1pTNTRLU0FsSURJcElEMDlQU0F4SUQ4Z1pTNTRJRDBnVFdGMGFDNWpaV2xzS0dVdWVDa2dMU0JsTG5nZ09pQmxMbmdnUFNCbExuZ2dMU0JOWVhSb0xtWnNiMjl5S0dVdWVDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLR1V1ZVNBOElEQWdmSHdnWlM1NUlENGdNU2tnYzNkcGRHTm9LSFJvYVhNdWQzSmhjRlFwZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUU1ek9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTNTVJRDBnWlM1NUlDMGdUV0YwYUM1bWJHOXZjaWhsTG5rcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnZG5RNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExua2dQU0JsTG5rZ1BDQXdJRDhnTUNBNklERTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCQ2N6b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMWhkR2d1WVdKektFMWhkR2d1Wm14dmIzSW9aUzU1S1NBbElESXBJRDA5UFNBeElEOGdaUzU1SUQwZ1RXRjBhQzVqWldsc0tHVXVlU2tnTFNCbExua2dPaUJsTG5rZ1BTQmxMbmtnTFNCTllYUm9MbVpzYjI5eUtHVXVlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm14cGNGa2dKaVlnS0dVdWVTQTlJREVnTFNCbExua3BMQ0JsT3dvZ0lDQWdmUW9nSUNBZ2MyVjBJRzVsWldSelZYQmtZWFJsS0dVcElIc0tJQ0FnSUNBZ0lDQmxJRDA5UFNBaE1DQW1KaUIwYUdsekxuWmxjbk5wYjI0ckt6c0tJQ0FnSUgwS2ZUc0tiM1F1UkVWR1FWVk1WRjlKVFVGSFJTQTlJSFp2YVdRZ01Ec0tiM1F1UkVWR1FWVk1WRjlOUVZCUVNVNUhJRDBnYUdFN0NtOTBMbkJ5YjNSdmRIbHdaUzVwYzFSbGVIUjFjbVVnUFNBaE1Ec0tablZ1WTNScGIyNGdYMjhvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MElEd2dJblVpSUNZbUlITWdhVzV6ZEdGdVkyVnZaaUJJVkUxTVNXMWhaMlZGYkdWdFpXNTBJSHg4SUhSNWNHVnZaaUJJVkUxTVEyRnVkbUZ6Uld4bGJXVnVkQ0E4SUNKMUlpQW1KaUJ6SUdsdWMzUmhibU5sYjJZZ1NGUk5URU5oYm5aaGMwVnNaVzFsYm5RZ2ZId2dkSGx3Wlc5bUlFbHRZV2RsUW1sMGJXRndJRHdnSW5VaUlDWW1JSE1nYVc1emRHRnVZMlZ2WmlCSmJXRm5aVUpwZEcxaGNDQS9JRmx1TG1kbGRFUmhkR0ZWVWt3b2N5a2dPaUJ6TG1SaGRHRWdQeUI3Q2lBZ0lDQWdJQ0FnWkdGMFlUb2dRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29jeTVrWVhSaEtTd0tJQ0FnSUNBZ0lDQjNhV1IwYURvZ2N5NTNhV1IwYUN3S0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUhNdWFHVnBaMmgwTEFvZ0lDQWdJQ0FnSUhSNWNHVTZJSE11WkdGMFlTNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbENpQWdJQ0I5SURvZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWR1Y0ZEhWeVpUb2dWVzVoWW14bElIUnZJSE5sY21saGJHbDZaU0JVWlhoMGRYSmxMaUlwTENCN2ZTazdDbjBLZG1GeUlGWmxJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURBc0lIUWdQU0F3TENCdUlEMGdNQ3dnYVNBOUlERXBld29nSUNBZ0lDQWdJSFJvYVhNdWVDQTlJR1VzSUhSb2FYTXVlU0E5SUhRc0lIUm9hWE11ZWlBOUlHNHNJSFJvYVhNdWR5QTlJR2s3Q2lBZ0lDQjlDaUFnSUNCblpYUWdkMmxrZEdnb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZWpzS0lDQWdJSDBLSUNBZ0lITmxkQ0IzYVdSMGFDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NTZJRDBnWlRzS0lDQWdJSDBLSUNBZ0lHZGxkQ0JvWldsbmFIUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWR6c0tJQ0FnSUgwS0lDQWdJSE5sZENCb1pXbG5hSFFvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZHlBOUlHVTdDaUFnSUNCOUNpQWdJQ0J6WlhRb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxMQ0IwYUdsekxua2dQU0IwTENCMGFHbHpMbm9nUFNCdUxDQjBhR2x6TG5jZ1BTQnBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlN3Z2RHaHBjeTU1SUQwZ1pTd2dkR2hwY3k1NklEMGdaU3dnZEdocGN5NTNJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVTQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSYUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZjb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5jZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUTI5dGNHOXVaVzUwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29aU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTURvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SUhRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F4T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTVJRDBnZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxub2dQU0IwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNem9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWR5QTlJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lhVzVrWlhnZ2FYTWdiM1YwSUc5bUlISmhibWRsT2lBaUlDc2daU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwUTI5dGNHOXVaVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Ub0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbms3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxubzdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNem9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5jN0NpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ltbHVaR1Y0SUdseklHOTFkQ0J2WmlCeVlXNW5aVG9nSWlBcklHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2loMGFHbHpMbmdzSUhSb2FYTXVlU3dnZEdocGN5NTZMQ0IwYUdsekxuY3BPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1V1ZUN3Z2RHaHBjeTU1SUQwZ1pTNTVMQ0IwYUdsekxub2dQU0JsTG5vc0lIUm9hWE11ZHlBOUlHVXVkeUFoUFQwZ2RtOXBaQ0F3SUQ4Z1pTNTNJRG9nTVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0lUMDlJSFp2YVdRZ01DQS9JQ2hqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxabFkzUnZjalE2SUM1aFpHUW9LU0J1YjNjZ2IyNXNlU0JoWTJObGNIUnpJRzl1WlNCaGNtZDFiV1Z1ZEM0Z1ZYTmxJQzVoWkdSV1pXTjBiM0p6S0NCaExDQmlJQ2tnYVc1emRHVmhaQzRpS1N3Z2RHaHBjeTVoWkdSV1pXTjBiM0p6S0dVc0lIUXBLU0E2SUNoMGFHbHpMbmdnS3owZ1pTNTRMQ0IwYUdsekxua2dLejBnWlM1NUxDQjBhR2x6TG5vZ0t6MGdaUzU2TENCMGFHbHpMbmNnS3owZ1pTNTNMQ0IwYUdsektUc0tJQ0FnSUgwS0lDQWdJR0ZrWkZOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FyUFNCbExDQjBhR2x6TG5rZ0t6MGdaU3dnZEdocGN5NTZJQ3M5SUdVc0lIUm9hWE11ZHlBclBTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZV1JrVm1WamRHOXljeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHVXVlQ0FySUhRdWVDd2dkR2hwY3k1NUlEMGdaUzU1SUNzZ2RDNTVMQ0IwYUdsekxub2dQU0JsTG5vZ0t5QjBMbm9zSUhSb2FYTXVkeUE5SUdVdWR5QXJJSFF1ZHl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pGTmpZV3hsWkZabFkzUnZjaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBclBTQmxMbmdnS2lCMExDQjBhR2x6TG5rZ0t6MGdaUzU1SUNvZ2RDd2dkR2hwY3k1NklDczlJR1V1ZWlBcUlIUXNJSFJvYVhNdWR5QXJQU0JsTG5jZ0tpQjBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjM1ZpS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ0FoUFQwZ2RtOXBaQ0F3SUQ4Z0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWbVZqZEc5eU5Eb2dMbk4xWWlncElHNXZkeUJ2Ym14NUlHRmpZMlZ3ZEhNZ2IyNWxJR0Z5WjNWdFpXNTBMaUJWYzJVZ0xuTjFZbFpsWTNSdmNuTW9JR0VzSUdJZ0tTQnBibk4wWldGa0xpSXBMQ0IwYUdsekxuTjFZbFpsWTNSdmNuTW9aU3dnZENrcElEb2dLSFJvYVhNdWVDQXRQU0JsTG5nc0lIUm9hWE11ZVNBdFBTQmxMbmtzSUhSb2FYTXVlaUF0UFNCbExub3NJSFJvYVhNdWR5QXRQU0JsTG5jc0lIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ2MzVmlVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElDMDlJR1VzSUhSb2FYTXVlU0F0UFNCbExDQjBhR2x6TG5vZ0xUMGdaU3dnZEdocGN5NTNJQzA5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCemRXSldaV04wYjNKektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlM1NElDMGdkQzU0TENCMGFHbHpMbmtnUFNCbExua2dMU0IwTG5rc0lIUm9hWE11ZWlBOUlHVXVlaUF0SUhRdWVpd2dkR2hwY3k1M0lEMGdaUzUzSUMwZ2RDNTNMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiWFZzZEdsd2JIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dLajBnWlM1NExDQjBhR2x6TG5rZ0tqMGdaUzU1TENCMGFHbHpMbm9nS2owZ1pTNTZMQ0IwYUdsekxuY2dLajBnWlM1M0xDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3YkhsVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2owZ1pTd2dkR2hwY3k1NUlDbzlJR1VzSUhSb2FYTXVlaUFxUFNCbExDQjBhR2x6TG5jZ0tqMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TkNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5nc0lHNGdQU0IwYUdsekxua3NJR2tnUFNCMGFHbHpMbm9zSUhJZ1BTQjBhR2x6TG5jc0lHOGdQU0JsTG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0J2V3pCZElDb2dkQ0FySUc5Yk5GMGdLaUJ1SUNzZ2IxczRYU0FxSUdrZ0t5QnZXekV5WFNBcUlISXNJSFJvYVhNdWVTQTlJRzliTVYwZ0tpQjBJQ3NnYjFzMVhTQXFJRzRnS3lCdld6bGRJQ29nYVNBcklHOWJNVE5kSUNvZ2Npd2dkR2hwY3k1NklEMGdiMXN5WFNBcUlIUWdLeUJ2V3paZElDb2diaUFySUc5Yk1UQmRJQ29nYVNBcklHOWJNVFJkSUNvZ2Npd2dkR2hwY3k1M0lEMGdiMXN6WFNBcUlIUWdLeUJ2V3pkZElDb2diaUFySUc5Yk1URmRJQ29nYVNBcklHOWJNVFZkSUNvZ2Npd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnBkbWxrWlZOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViWFZzZEdsd2JIbFRZMkZzWVhJb01TQXZJR1VwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBRWGhwYzBGdVoyeGxSbkp2YlZGMVlYUmxjbTVwYjI0b1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWR5QTlJRElnS2lCTllYUm9MbUZqYjNNb1pTNTNLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRTFoZEdndWMzRnlkQ2d4SUMwZ1pTNTNJQ29nWlM1M0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDQThJREZsTFRRZ1B5QW9kR2hwY3k1NElEMGdNU3dnZEdocGN5NTVJRDBnTUN3Z2RHaHBjeTU2SUQwZ01Da2dPaUFvZEdocGN5NTRJRDBnWlM1NElDOGdkQ3dnZEdocGN5NTVJRDBnWlM1NUlDOGdkQ3dnZEdocGN5NTZJRDBnWlM1NklDOGdkQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSQmVHbHpRVzVuYkdWR2NtOXRVbTkwWVhScGIyNU5ZWFJ5YVhnb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMExDQnVMQ0JwTENCeUxDQnNJRDBnWlM1bGJHVnRaVzUwY3l3Z1l5QTlJR3hiTUYwc0lHZ2dQU0JzV3pSZExDQjFJRDBnYkZzNFhTd2daQ0E5SUd4Yk1WMHNJR1lnUFNCc1d6VmRMQ0J0SUQwZ2JGczVYU3dnZUNBOUlHeGJNbDBzSUhZZ1BTQnNXelpkTENCbklEMGdiRnN4TUYwN0NpQWdJQ0FnSUNBZ2FXWWdLRTFoZEdndVlXSnpLR2dnTFNCa0tTQThJQzR3TVNBbUppQk5ZWFJvTG1GaWN5aDFJQzBnZUNrZ1BDQXVNREVnSmlZZ1RXRjBhQzVoWW5Nb2JTQXRJSFlwSUR3Z0xqQXhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hOWVhSb0xtRmljeWhvSUNzZ1pDa2dQQ0F1TVNBbUppQk5ZWFJvTG1GaWN5aDFJQ3NnZUNrZ1BDQXVNU0FtSmlCTllYUm9MbUZpY3lodElDc2dkaWtnUENBdU1TQW1KaUJOWVhSb0xtRmljeWhqSUNzZ1ppQXJJR2NnTFNBektTQThJQzR4S1NCeVpYUjFjbTRnZEdocGN5NXpaWFFvTVN3Z01Dd2dNQ3dnTUNrc0lIUm9hWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lIUWdQU0JOWVhSb0xsQkpPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdYeUE5SUNoaklDc2dNU2tnTHlBeUxDQjVJRDBnS0dZZ0t5QXhLU0F2SURJc0lHSWdQU0FvWnlBcklERXBJQzhnTWl3Z1FTQTlJQ2hvSUNzZ1pDa2dMeUEwTENCTUlEMGdLSFVnS3lCNEtTQXZJRFFzSUVrZ1BTQW9iU0FySUhZcElDOGdORHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY4Z1BpQjVJQ1ltSUY4Z1BpQmlJRDhnWHlBOElDNHdNU0EvSUNodUlEMGdNQ3dnYVNBOUlDNDNNRGN4TURZM09ERXNJSElnUFNBdU56QTNNVEEyTnpneEtTQTZJQ2h1SUQwZ1RXRjBhQzV6Y1hKMEtGOHBMQ0JwSUQwZ1FTQXZJRzRzSUhJZ1BTQk1JQzhnYmlrZ09pQjVJRDRnWWlBL0lIa2dQQ0F1TURFZ1B5QW9iaUE5SUM0M01EY3hNRFkzT0RFc0lHa2dQU0F3TENCeUlEMGdMamN3TnpFd05qYzRNU2tnT2lBb2FTQTlJRTFoZEdndWMzRnlkQ2g1S1N3Z2JpQTlJRUVnTHlCcExDQnlJRDBnU1NBdklHa3BJRG9nWWlBOElDNHdNU0EvSUNodUlEMGdMamN3TnpFd05qYzRNU3dnYVNBOUlDNDNNRGN4TURZM09ERXNJSElnUFNBd0tTQTZJQ2h5SUQwZ1RXRjBhQzV6Y1hKMEtHSXBMQ0J1SUQwZ1RDQXZJSElzSUdrZ1BTQkpJQzhnY2lrc0lIUm9hWE11YzJWMEtHNHNJR2tzSUhJc0lIUXBMQ0IwYUdsek93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlFMWhkR2d1YzNGeWRDZ29kaUF0SUcwcElDb2dLSFlnTFNCdEtTQXJJQ2gxSUMwZ2VDa2dLaUFvZFNBdElIZ3BJQ3NnS0dRZ0xTQm9LU0FxSUNoa0lDMGdhQ2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtRmljeWh3S1NBOElDNHdNREVnSmlZZ0tIQWdQU0F4S1N3Z2RHaHBjeTU0SUQwZ0tIWWdMU0J0S1NBdklIQXNJSFJvYVhNdWVTQTlJQ2gxSUMwZ2VDa2dMeUJ3TENCMGFHbHpMbm9nUFNBb1pDQXRJR2dwSUM4Z2NDd2dkR2hwY3k1M0lEMGdUV0YwYUM1aFkyOXpLQ2hqSUNzZ1ppQXJJR2NnTFNBeEtTQXZJRElwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYldsdUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdUV0YwYUM1dGFXNG9kR2hwY3k1NExDQmxMbmdwTENCMGFHbHpMbmtnUFNCTllYUm9MbTFwYmloMGFHbHpMbmtzSUdVdWVTa3NJSFJvYVhNdWVpQTlJRTFoZEdndWJXbHVLSFJvYVhNdWVpd2daUzU2S1N3Z2RHaHBjeTUzSUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTUzTENCbExuY3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0Y0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1RXRjBhQzV0WVhnb2RHaHBjeTU0TENCbExuZ3BMQ0IwYUdsekxua2dQU0JOWVhSb0xtMWhlQ2gwYUdsekxua3NJR1V1ZVNrc0lIUm9hWE11ZWlBOUlFMWhkR2d1YldGNEtIUm9hWE11ZWl3Z1pTNTZLU3dnZEdocGN5NTNJRDBnVFdGMGFDNXRZWGdvZEdocGN5NTNMQ0JsTG5jcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyeGhiWEFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG0xaGVDaGxMbmdzSUUxaGRHZ3ViV2x1S0hRdWVDd2dkR2hwY3k1NEtTa3NJSFJvYVhNdWVTQTlJRTFoZEdndWJXRjRLR1V1ZVN3Z1RXRjBhQzV0YVc0b2RDNTVMQ0IwYUdsekxua3BLU3dnZEdocGN5NTZJRDBnVFdGMGFDNXRZWGdvWlM1NkxDQk5ZWFJvTG0xcGJpaDBMbm9zSUhSb2FYTXVlaWtwTENCMGFHbHpMbmNnUFNCTllYUm9MbTFoZUNobExuY3NJRTFoZEdndWJXbHVLSFF1ZHl3Z2RHaHBjeTUzS1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHRnRjRk5qWVd4aGNpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3ViV0Y0S0dVc0lFMWhkR2d1YldsdUtIUXNJSFJvYVhNdWVDa3BMQ0IwYUdsekxua2dQU0JOWVhSb0xtMWhlQ2hsTENCTllYUm9MbTFwYmloMExDQjBhR2x6TG5rcEtTd2dkR2hwY3k1NklEMGdUV0YwYUM1dFlYZ29aU3dnVFdGMGFDNXRhVzRvZEN3Z2RHaHBjeTU2S1Nrc0lIUm9hWE11ZHlBOUlFMWhkR2d1YldGNEtHVXNJRTFoZEdndWJXbHVLSFFzSUhSb2FYTXVkeWtwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4aGJYQk1aVzVuZEdnb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NXNaVzVuZEdnb0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVrYVhacFpHVlRZMkZzWVhJb2JpQjhmQ0F4S1M1dGRXeDBhWEJzZVZOallXeGhjaWhOWVhSb0xtMWhlQ2hsTENCTllYUm9MbTFwYmloMExDQnVLU2twT3dvZ0lDQWdmUW9nSUNBZ1pteHZiM0lvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3VabXh2YjNJb2RHaHBjeTU0S1N3Z2RHaHBjeTU1SUQwZ1RXRjBhQzVtYkc5dmNpaDBhR2x6TG5rcExDQjBhR2x6TG5vZ1BTQk5ZWFJvTG1ac2IyOXlLSFJvYVhNdWVpa3NJSFJvYVhNdWR5QTlJRTFoZEdndVpteHZiM0lvZEdocGN5NTNLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05sYVd3b0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1WTJWcGJDaDBhR2x6TG5ncExDQjBhR2x6TG5rZ1BTQk5ZWFJvTG1ObGFXd29kR2hwY3k1NUtTd2dkR2hwY3k1NklEMGdUV0YwYUM1alpXbHNLSFJvYVhNdWVpa3NJSFJvYVhNdWR5QTlJRTFoZEdndVkyVnBiQ2gwYUdsekxuY3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkxYm1Rb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1Y205MWJtUW9kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1eWIzVnVaQ2gwYUdsekxua3BMQ0IwYUdsekxub2dQU0JOWVhSb0xuSnZkVzVrS0hSb2FYTXVlaWtzSUhSb2FYTXVkeUE5SUUxaGRHZ3VjbTkxYm1Rb2RHaHBjeTUzS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhKdmRXNWtWRzlhWlhKdktDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQjBhR2x6TG5nZ1BDQXdJRDhnVFdGMGFDNWpaV2xzS0hSb2FYTXVlQ2tnT2lCTllYUm9MbVpzYjI5eUtIUm9hWE11ZUNrc0lIUm9hWE11ZVNBOUlIUm9hWE11ZVNBOElEQWdQeUJOWVhSb0xtTmxhV3dvZEdocGN5NTVLU0E2SUUxaGRHZ3VabXh2YjNJb2RHaHBjeTU1S1N3Z2RHaHBjeTU2SUQwZ2RHaHBjeTU2SUR3Z01DQS9JRTFoZEdndVkyVnBiQ2gwYUdsekxub3BJRG9nVFdGMGFDNW1iRzl2Y2loMGFHbHpMbm9wTENCMGFHbHpMbmNnUFNCMGFHbHpMbmNnUENBd0lEOGdUV0YwYUM1alpXbHNLSFJvYVhNdWR5a2dPaUJOWVhSb0xtWnNiMjl5S0hSb2FYTXVkeWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J1WldkaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJQzEwYUdsekxuZ3NJSFJvYVhNdWVTQTlJQzEwYUdsekxua3NJSFJvYVhNdWVpQTlJQzEwYUdsekxub3NJSFJvYVhNdWR5QTlJQzEwYUdsekxuY3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmtiM1FvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2lCbExuZ2dLeUIwYUdsekxua2dLaUJsTG5rZ0t5QjBhR2x6TG5vZ0tpQmxMbm9nS3lCMGFHbHpMbmNnS2lCbExuYzdDaUFnSUNCOUNpQWdJQ0JzWlc1bmRHaFRjU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJQ29nZEdocGN5NTRJQ3NnZEdocGN5NTVJQ29nZEdocGN5NTVJQ3NnZEdocGN5NTZJQ29nZEdocGN5NTZJQ3NnZEdocGN5NTNJQ29nZEdocGN5NTNPd29nSUNBZ2ZRb2dJQ0FnYkdWdVozUm9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuTnhjblFvZEdocGN5NTRJQ29nZEdocGN5NTRJQ3NnZEdocGN5NTVJQ29nZEdocGN5NTVJQ3NnZEdocGN5NTZJQ29nZEdocGN5NTZJQ3NnZEdocGN5NTNJQ29nZEdocGN5NTNLVHNLSUNBZ0lIMEtJQ0FnSUcxaGJtaGhkSFJoYmt4bGJtZDBhQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNWhZbk1vZEdocGN5NTRLU0FySUUxaGRHZ3VZV0p6S0hSb2FYTXVlU2tnS3lCTllYUm9MbUZpY3loMGFHbHpMbm9wSUNzZ1RXRjBhQzVoWW5Nb2RHaHBjeTUzS1RzS0lDQWdJSDBLSUNBZ0lHNXZjbTFoYkdsNlpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a2FYWnBaR1ZUWTJGc1lYSW9kR2hwY3k1c1pXNW5kR2dvS1NCOGZDQXhLVHNLSUNBZ0lIMEtJQ0FnSUhObGRFeGxibWQwYUNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNhWHBsS0NrdWJYVnNkR2x3YkhsVFkyRnNZWElvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNaWEp3S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElDczlJQ2hsTG5nZ0xTQjBhR2x6TG5ncElDb2dkQ3dnZEdocGN5NTVJQ3M5SUNobExua2dMU0IwYUdsekxua3BJQ29nZEN3Z2RHaHBjeTU2SUNzOUlDaGxMbm9nTFNCMGFHbHpMbm9wSUNvZ2RDd2dkR2hwY3k1M0lDczlJQ2hsTG5jZ0xTQjBhR2x6TG5jcElDb2dkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR3hsY25CV1pXTjBiM0p6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlM1NElDc2dLSFF1ZUNBdElHVXVlQ2tnS2lCdUxDQjBhR2x6TG5rZ1BTQmxMbmtnS3lBb2RDNTVJQzBnWlM1NUtTQXFJRzRzSUhSb2FYTXVlaUE5SUdVdWVpQXJJQ2gwTG5vZ0xTQmxMbm9wSUNvZ2Jpd2dkR2hwY3k1M0lEMGdaUzUzSUNzZ0tIUXVkeUF0SUdVdWR5a2dLaUJ1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhGMVlXeHpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1NElEMDlQU0IwYUdsekxuZ2dKaVlnWlM1NUlEMDlQU0IwYUdsekxua2dKaVlnWlM1NklEMDlQU0IwYUdsekxub2dKaVlnWlM1M0lEMDlQU0IwYUdsekxuYzdDaUFnSUNCOUNpQWdJQ0JtY205dFFYSnlZWGtvWlN3Z2RDQTlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlZ0MFhTd2dkR2hwY3k1NUlEMGdaVnQwSUNzZ01WMHNJSFJvYVhNdWVpQTlJR1ZiZENBcklESmRMQ0IwYUdsekxuY2dQU0JsVzNRZ0t5QXpYU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2UVhKeVlYa29aU0E5SUZ0ZExDQjBJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbFczUmRJRDBnZEdocGN5NTRMQ0JsVzNRZ0t5QXhYU0E5SUhSb2FYTXVlU3dnWlZ0MElDc2dNbDBnUFNCMGFHbHpMbm9zSUdWYmRDQXJJRE5kSUQwZ2RHaHBjeTUzTENCbE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzRnSVQwOUlIWnZhV1FnTUNBbUppQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbFpsWTNSdmNqUTZJRzltWm5ObGRDQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0lHWnliMjBnTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb0tTNGlLU3dnZEdocGN5NTRJRDBnWlM1blpYUllLSFFwTENCMGFHbHpMbmtnUFNCbExtZGxkRmtvZENrc0lIUm9hWE11ZWlBOUlHVXVaMlYwV2loMEtTd2dkR2hwY3k1M0lEMGdaUzVuWlhSWEtIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbUZ1Wkc5dEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTENCMGFHbHpMbmtnUFNCTllYUm9MbkpoYm1SdmJTZ3BMQ0IwYUdsekxub2dQU0JOWVhSb0xuSmhibVJ2YlNncExDQjBhR2x6TG5jZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnS2x0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0NrZ2V3b2dJQ0FnSUNBZ0lIbHBaV3hrSUhSb2FYTXVlQ3dnZVdsbGJHUWdkR2hwY3k1NUxDQjVhV1ZzWkNCMGFHbHpMbm9zSUhscFpXeGtJSFJvYVhNdWR6c0tJQ0FnSUgwS2ZUc0tWbVV1Y0hKdmRHOTBlWEJsTG1selZtVmpkRzl5TkNBOUlDRXdPd3AyWVhJZ1FYUWdQU0JqYkdGemN5QmxlSFJsYm1SeklFVnVJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNGdQU0I3ZlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbmRwWkhSb0lEMGdaU3dnZEdocGN5NW9aV2xuYUhRZ1BTQjBMQ0IwYUdsekxtUmxjSFJvSUQwZ01Td2dkR2hwY3k1elkybHpjMjl5SUQwZ2JtVjNJRlpsS0RBc0lEQXNJR1VzSUhRcExDQjBhR2x6TG5OamFYTnpiM0pVWlhOMElEMGdJVEVzSUhSb2FYTXVkbWxsZDNCdmNuUWdQU0J1WlhjZ1ZtVW9NQ3dnTUN3Z1pTd2dkQ2tzSUhSb2FYTXVkR1Y0ZEhWeVpTQTlJRzVsZHlCdmRDaDJiMmxrSURBc0lHNHViV0Z3Y0dsdVp5d2diaTUzY21Gd1V5d2diaTUzY21Gd1ZDd2diaTV0WVdkR2FXeDBaWElzSUc0dWJXbHVSbWxzZEdWeUxDQnVMbVp2Y20xaGRDd2diaTUwZVhCbExDQnVMbUZ1YVhOdmRISnZjSGtzSUc0dVpXNWpiMlJwYm1jcExDQjBhR2x6TG5SbGVIUjFjbVV1YVhOU1pXNWtaWEpVWVhKblpYUlVaWGgwZFhKbElEMGdJVEFzSUhSb2FYTXVkR1Y0ZEhWeVpTNXBiV0ZuWlNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHZzZJREVLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMblJsZUhSMWNtVXVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklEMGdiaTVuWlc1bGNtRjBaVTFwY0cxaGNITWdJVDA5SUhadmFXUWdNQ0EvSUc0dVoyVnVaWEpoZEdWTmFYQnRZWEJ6SURvZ0lURXNJSFJvYVhNdWRHVjRkSFZ5WlM1cGJuUmxjbTVoYkVadmNtMWhkQ0E5SUc0dWFXNTBaWEp1WVd4R2IzSnRZWFFnSVQwOUlIWnZhV1FnTUNBL0lHNHVhVzUwWlhKdVlXeEdiM0p0WVhRZ09pQnVkV3hzTENCMGFHbHpMblJsZUhSMWNtVXViV2x1Um1sc2RHVnlJRDBnYmk1dGFXNUdhV3gwWlhJZ0lUMDlJSFp2YVdRZ01DQS9JRzR1YldsdVJtbHNkR1Z5SURvZ2RIUXNJSFJvYVhNdVpHVndkR2hDZFdabVpYSWdQU0J1TG1SbGNIUm9RblZtWm1WeUlDRTlQU0IyYjJsa0lEQWdQeUJ1TG1SbGNIUm9RblZtWm1WeUlEb2dJVEFzSUhSb2FYTXVjM1JsYm1OcGJFSjFabVpsY2lBOUlHNHVjM1JsYm1OcGJFSjFabVpsY2lBaFBUMGdkbTlwWkNBd0lEOGdiaTV6ZEdWdVkybHNRblZtWm1WeUlEb2dJVEVzSUhSb2FYTXVaR1Z3ZEdoVVpYaDBkWEpsSUQwZ2JpNWtaWEIwYUZSbGVIUjFjbVVnSVQwOUlIWnZhV1FnTUNBL0lHNHVaR1Z3ZEdoVVpYaDBkWEpsSURvZ2JuVnNiRHNLSUNBZ0lIMEtJQ0FnSUhObGRGUmxlSFIxY21Vb1pTa2dld29nSUNBZ0lDQWdJR1V1YVcxaFoyVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCMGFHbHpMbmRwWkhSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJSFJvYVhNdWFHVnBaMmgwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmtaWEIwYURvZ2RHaHBjeTVrWlhCMGFBb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWRHVjRkSFZ5WlNBOUlHVTdDaUFnSUNCOUNpQWdJQ0J6WlhSVGFYcGxLR1VzSUhRc0lHNGdQU0F4S1NCN0NpQWdJQ0FnSUNBZ0tIUm9hWE11ZDJsa2RHZ2dJVDA5SUdVZ2ZId2dkR2hwY3k1b1pXbG5hSFFnSVQwOUlIUWdmSHdnZEdocGN5NWtaWEIwYUNBaFBUMGdiaWtnSmlZZ0tIUm9hWE11ZDJsa2RHZ2dQU0JsTENCMGFHbHpMbWhsYVdkb2RDQTlJSFFzSUhSb2FYTXVaR1Z3ZEdnZ1BTQnVMQ0IwYUdsekxuUmxlSFIxY21VdWFXMWhaMlV1ZDJsa2RHZ2dQU0JsTENCMGFHbHpMblJsZUhSMWNtVXVhVzFoWjJVdWFHVnBaMmgwSUQwZ2RDd2dkR2hwY3k1MFpYaDBkWEpsTG1sdFlXZGxMbVJsY0hSb0lEMGdiaXdnZEdocGN5NWthWE53YjNObEtDa3BMQ0IwYUdsekxuWnBaWGR3YjNKMExuTmxkQ2d3TENBd0xDQmxMQ0IwS1N3Z2RHaHBjeTV6WTJsemMyOXlMbk5sZENnd0xDQXdMQ0JsTENCMEtUc0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1OdmNIa29kR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUzYVdSMGFDQTlJR1V1ZDJsa2RHZ3NJSFJvYVhNdWFHVnBaMmgwSUQwZ1pTNW9aV2xuYUhRc0lIUm9hWE11WkdWd2RHZ2dQU0JsTG1SbGNIUm9MQ0IwYUdsekxuWnBaWGR3YjNKMExtTnZjSGtvWlM1MmFXVjNjRzl5ZENrc0lIUm9hWE11ZEdWNGRIVnlaU0E5SUdVdWRHVjRkSFZ5WlM1amJHOXVaU2dwTENCMGFHbHpMblJsZUhSMWNtVXVhVzFoWjJVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUM0dUxuUm9hWE11ZEdWNGRIVnlaUzVwYldGblpRb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVpHVndkR2hDZFdabVpYSWdQU0JsTG1SbGNIUm9RblZtWm1WeUxDQjBhR2x6TG5OMFpXNWphV3hDZFdabVpYSWdQU0JsTG5OMFpXNWphV3hDZFdabVpYSXNJSFJvYVhNdVpHVndkR2hVWlhoMGRYSmxJRDBnWlM1a1pYQjBhRlJsZUhSMWNtVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmthWE53YjNObEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdVpHbHpjR0YwWTJoRmRtVnVkQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKa2FYTndiM05sSWdvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnZlFwOU93cEJkQzV3Y205MGIzUjVjR1V1YVhOWFpXSkhURkpsYm1SbGNsUmhjbWRsZENBOUlDRXdPd3AyWVhJZ1dtTWdQU0JqYkdGemN5QmxlSFJsYm1SeklFRjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXNJSFFwT3dvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NTBaWGgwZFhKbE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEdWNGRIVnlaU0E5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREE3SUhJZ1BDQnVPeUJ5S3lzcGRHaHBjeTUwWlhoMGRYSmxXM0pkSUQwZ2FTNWpiRzl1WlNncE93b2dJQ0FnZlFvZ0lDQWdjMlYwVTJsNlpTaGxMQ0IwTENCdUlEMGdNU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5kcFpIUm9JQ0U5UFNCbElIeDhJSFJvYVhNdWFHVnBaMmgwSUNFOVBTQjBJSHg4SUhSb2FYTXVaR1Z3ZEdnZ0lUMDlJRzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2FXUjBhQ0E5SUdVc0lIUm9hWE11YUdWcFoyaDBJRDBnZEN3Z2RHaHBjeTVrWlhCMGFDQTlJRzQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREFzSUhJZ1BTQjBhR2x6TG5SbGVIUjFjbVV1YkdWdVozUm9PeUJwSUR3Z2Nqc2dhU3NyS1hSb2FYTXVkR1Y0ZEhWeVpWdHBYUzVwYldGblpTNTNhV1IwYUNBOUlHVXNJSFJvYVhNdWRHVjRkSFZ5WlZ0cFhTNXBiV0ZuWlM1b1pXbG5hSFFnUFNCMExDQjBhR2x6TG5SbGVIUjFjbVZiYVYwdWFXMWhaMlV1WkdWd2RHZ2dQU0J1T3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlVvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkbWxsZDNCdmNuUXVjMlYwS0RBc0lEQXNJR1VzSUhRcExDQjBhR2x6TG5OamFYTnpiM0l1YzJWMEtEQXNJREFzSUdVc0lIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTndiM05sS0Nrc0lIUm9hWE11ZDJsa2RHZ2dQU0JsTG5kcFpIUm9MQ0IwYUdsekxtaGxhV2RvZENBOUlHVXVhR1ZwWjJoMExDQjBhR2x6TG1SbGNIUm9JRDBnWlM1a1pYQjBhQ3dnZEdocGN5NTJhV1YzY0c5eWRDNXpaWFFvTUN3Z01Dd2dkR2hwY3k1M2FXUjBhQ3dnZEdocGN5NW9aV2xuYUhRcExDQjBhR2x6TG5OamFYTnpiM0l1YzJWMEtEQXNJREFzSUhSb2FYTXVkMmxrZEdnc0lIUm9hWE11YUdWcFoyaDBLU3dnZEdocGN5NWtaWEIwYUVKMVptWmxjaUE5SUdVdVpHVndkR2hDZFdabVpYSXNJSFJvYVhNdWMzUmxibU5wYkVKMVptWmxjaUE5SUdVdWMzUmxibU5wYkVKMVptWmxjaXdnZEdocGN5NWtaWEIwYUZSbGVIUjFjbVVnUFNCbExtUmxjSFJvVkdWNGRIVnlaU3dnZEdocGN5NTBaWGgwZFhKbExteGxibWQwYUNBOUlEQTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJR1V1ZEdWNGRIVnlaUzVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwZEdocGN5NTBaWGgwZFhKbFczUmRJRDBnWlM1MFpYaDBkWEpsVzNSZExtTnNiMjVsS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNuMDdDbHBqTG5CeWIzUnZkSGx3WlM1cGMxZGxZa2RNVFhWc2RHbHdiR1ZTWlc1a1pYSlVZWEpuWlhSeklEMGdJVEE3Q25aaGNpQlljeUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdRWFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaUE5SUh0OUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBMQ0J1S1RzS0lDQWdJQ0FnSUNCMGFHbHpMbk5oYlhCc1pYTWdQU0EwTENCMGFHbHpMbWxuYm05eVpVUmxjSFJvUm05eVRYVnNkR2x6WVcxd2JHVkRiM0I1SUQwZ2JpNXBaMjV2Y21WRVpYQjBhQ0FoUFQwZ2RtOXBaQ0F3SUQ4Z2JpNXBaMjV2Y21WRVpYQjBhQ0E2SUNFd0xDQjBhR2x6TG5WelpWSmxibVJsY2xSdlZHVjRkSFZ5WlNBOUlHNHVkWE5sVW1WdVpHVnlWRzlVWlhoMGRYSmxJQ0U5UFNCMmIybGtJREFnUHlCdUxuVnpaVkpsYm1SbGNsUnZWR1Y0ZEhWeVpTQTZJQ0V4TENCMGFHbHpMblZ6WlZKbGJtUmxjbUoxWm1abGNpQTlJSFJvYVhNdWRYTmxVbVZ1WkdWeVZHOVVaWGgwZFhKbElEMDlQU0FoTVRzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUxtTmhiR3dvZEdocGN5d2daU2tzSUhSb2FYTXVjMkZ0Y0d4bGN5QTlJR1V1YzJGdGNHeGxjeXdnZEdocGN5NTFjMlZTWlc1a1pYSlViMVJsZUhSMWNtVWdQU0JsTG5WelpWSmxibVJsY2xSdlZHVjRkSFZ5WlN3Z2RHaHBjeTUxYzJWU1pXNWtaWEppZFdabVpYSWdQU0JsTG5WelpWSmxibVJsY21KMVptWmxjaXdnZEdocGN6c0tJQ0FnSUgwS2ZUc0tXSE11Y0hKdmRHOTBlWEJsTG1selYyVmlSMHhOZFd4MGFYTmhiWEJzWlZKbGJtUmxjbFJoY21kbGRDQTlJQ0V3T3dwMllYSWdaM1FnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Dd2dkQ0E5SURBc0lHNGdQU0F3TENCcElEMGdNU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZlQ0E5SUdVc0lIUm9hWE11WDNrZ1BTQjBMQ0IwYUdsekxsOTZJRDBnYml3Z2RHaHBjeTVmZHlBOUlHazdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdjMnhsY25Bb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbEYxWVhSbGNtNXBiMjQ2SUZOMFlYUnBZeUF1YzJ4bGNuQW9LU0JvWVhNZ1ltVmxiaUJrWlhCeVpXTmhkR1ZrTGlCVmMyVWdjVzB1YzJ4bGNuQlJkV0YwWlhKdWFXOXVjeWdnY1dFc0lIRmlMQ0IwSUNrZ2FXNXpkR1ZoWkM0aUtTd2diaTV6YkdWeWNGRjFZWFJsY201cGIyNXpLR1VzSUhRc0lHa3BPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJSE5zWlhKd1JteGhkQ2hsTENCMExDQnVMQ0JwTENCeUxDQnZMQ0JoS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdVcya2dLeUF3WFN3Z1l5QTlJRzViYVNBcklERmRMQ0JvSUQwZ2JsdHBJQ3NnTWwwc0lIVWdQU0J1VzJrZ0t5QXpYU3dnWkNBOUlISmJieUFySURCZExDQm1JRDBnY2x0dklDc2dNVjBzSUcwZ1BTQnlXMjhnS3lBeVhTd2dlQ0E5SUhKYmJ5QXJJRE5kT3dvZ0lDQWdJQ0FnSUdsbUlDaGhJRDA5UFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdWYmRDQXJJREJkSUQwZ2JDd2daVnQwSUNzZ01WMGdQU0JqTENCbFczUWdLeUF5WFNBOUlHZ3NJR1ZiZENBcklETmRJRDBnZFRzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvWVNBOVBUMGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmxXM1FnS3lBd1hTQTlJR1FzSUdWYmRDQXJJREZkSUQwZ1ppd2daVnQwSUNzZ01sMGdQU0J0TENCbFczUWdLeUF6WFNBOUlIZzdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tIVWdJVDA5SUhnZ2ZId2diQ0FoUFQwZ1pDQjhmQ0JqSUNFOVBTQm1JSHg4SUdnZ0lUMDlJRzBwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQXhJQzBnWVN3Z1p5QTlJR3dnS2lCa0lDc2dZeUFxSUdZZ0t5Qm9JQ29nYlNBcklIVWdLaUI0TENCd0lEMGdaeUErUFNBd0lEOGdNU0E2SUMweExDQmZJRDBnTVNBdElHY2dLaUJuT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWHlBK0lFNTFiV0psY2k1RlVGTkpURTlPS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUUxaGRHZ3VjM0Z5ZENoZktTd2dRU0E5SUUxaGRHZ3VZWFJoYmpJb1lpd2daeUFxSUhBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RpQTlJRTFoZEdndWMybHVLSFlnS2lCQktTQXZJR0lzSUdFZ1BTQk5ZWFJvTG5OcGJpaGhJQ29nUVNrZ0x5QmlPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNUlEMGdZU0FxSUhBN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc0lEMGdiQ0FxSUhZZ0t5QmtJQ29nZVN3Z1l5QTlJR01nS2lCMklDc2daaUFxSUhrc0lHZ2dQU0JvSUNvZ2RpQXJJRzBnS2lCNUxDQjFJRDBnZFNBcUlIWWdLeUI0SUNvZ2VTd2dkaUE5UFQwZ01TQXRJR0VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmlJRDBnTVNBdklFMWhkR2d1YzNGeWRDaHNJQ29nYkNBcklHTWdLaUJqSUNzZ2FDQXFJR2dnS3lCMUlDb2dkU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzSUNvOUlHSXNJR01nS2owZ1lpd2dhQ0FxUFNCaUxDQjFJQ285SUdJN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWlZ0MFhTQTlJR3dzSUdWYmRDQXJJREZkSUQwZ1l5d2daVnQwSUNzZ01sMGdQU0JvTENCbFczUWdLeUF6WFNBOUlIVTdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdiWFZzZEdsd2JIbFJkV0YwWlhKdWFXOXVjMFpzWVhRb1pTd2dkQ3dnYml3Z2FTd2djaXdnYnlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2JsdHBYU3dnYkNBOUlHNWJhU0FySURGZExDQmpJRDBnYmx0cElDc2dNbDBzSUdnZ1BTQnVXMmtnS3lBelhTd2dkU0E5SUhKYmIxMHNJR1FnUFNCeVcyOGdLeUF4WFN3Z1ppQTlJSEpiYnlBcklESmRMQ0J0SUQwZ2NsdHZJQ3NnTTEwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0JoSUNvZ2JTQXJJR2dnS2lCMUlDc2diQ0FxSUdZZ0xTQmpJQ29nWkN3Z1pWdDBJQ3NnTVYwZ1BTQnNJQ29nYlNBcklHZ2dLaUJrSUNzZ1l5QXFJSFVnTFNCaElDb2daaXdnWlZ0MElDc2dNbDBnUFNCaklDb2diU0FySUdnZ0tpQm1JQ3NnWVNBcUlHUWdMU0JzSUNvZ2RTd2daVnQwSUNzZ00xMGdQU0JvSUNvZ2JTQXRJR0VnS2lCMUlDMGdiQ0FxSUdRZ0xTQmpJQ29nWml3Z1pUc0tJQ0FnSUgwS0lDQWdJR2RsZENCNEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5NE93b2dJQ0FnZlFvZ0lDQWdjMlYwSUhnb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgzZ2dQU0JsTENCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUWdlU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZlVHNLSUNBZ0lIMEtJQ0FnSUhObGRDQjVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDk1SUQwZ1pTd2dkR2hwY3k1ZmIyNURhR0Z1WjJWRFlXeHNZbUZqYXlncE93b2dJQ0FnZlFvZ0lDQWdaMlYwSUhvb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNvN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnZWlobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmVpQTlJR1VzSUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc29LVHNLSUNBZ0lIMEtJQ0FnSUdkbGRDQjNLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTNPd29nSUNBZ2ZRb2dJQ0FnYzJWMElIY29aU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYM2NnUFNCbExDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0NrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDk0SUQwZ1pTd2dkR2hwY3k1ZmVTQTlJSFFzSUhSb2FYTXVYM29nUFNCdUxDQjBhR2x6TGw5M0lEMGdhU3dnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLSFJvYVhNdVgzZ3NJSFJvYVhNdVgza3NJSFJvYVhNdVgzb3NJSFJvYVhNdVgzY3BPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZ2dQU0JsTG5nc0lIUm9hWE11WDNrZ1BTQmxMbmtzSUhSb2FYTXVYM29nUFNCbExub3NJSFJvYVhNdVgzY2dQU0JsTG5jc0lIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFGZFd4bGNpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLQ0VvWlNBbUppQmxMbWx6UlhWc1pYSXBLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9JbFJJVWtWRkxsRjFZWFJsY201cGIyNDZJQzV6WlhSR2NtOXRSWFZzWlhJb0tTQnViM2NnWlhod1pXTjBjeUJoYmlCRmRXeGxjaUJ5YjNSaGRHbHZiaUJ5WVhSb1pYSWdkR2hoYmlCaElGWmxZM1J2Y2pNZ1lXNWtJRzl5WkdWeUxpSXBPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdaUzVmZUN3Z2FTQTlJR1V1WDNrc0lISWdQU0JsTGw5NkxDQnZJRDBnWlM1ZmIzSmtaWElzSUdFZ1BTQk5ZWFJvTG1OdmN5d2diQ0E5SUUxaGRHZ3VjMmx1TENCaklEMGdZU2h1SUM4Z01pa3NJR2dnUFNCaEtHa2dMeUF5S1N3Z2RTQTlJR0VvY2lBdklESXBMQ0JrSUQwZ2JDaHVJQzhnTWlrc0lHWWdQU0JzS0drZ0x5QXlLU3dnYlNBOUlHd29jaUF2SURJcE93b2dJQ0FnSUNBZ0lITjNhWFJqYUNodktYc0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlXRmxhSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2dnUFNCa0lDb2dhQ0FxSUhVZ0t5QmpJQ29nWmlBcUlHMHNJSFJvYVhNdVgza2dQU0JqSUNvZ1ppQXFJSFVnTFNCa0lDb2dhQ0FxSUcwc0lIUm9hWE11WDNvZ1BTQmpJQ29nYUNBcUlHMGdLeUJrSUNvZ1ppQXFJSFVzSUhSb2FYTXVYM2NnUFNCaklDb2dhQ0FxSUhVZ0xTQmtJQ29nWmlBcUlHMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVdWaGFJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZ2dQU0JrSUNvZ2FDQXFJSFVnS3lCaklDb2daaUFxSUcwc0lIUm9hWE11WDNrZ1BTQmpJQ29nWmlBcUlIVWdMU0JrSUNvZ2FDQXFJRzBzSUhSb2FYTXVYM29nUFNCaklDb2dhQ0FxSUcwZ0xTQmtJQ29nWmlBcUlIVXNJSFJvYVhNdVgzY2dQU0JqSUNvZ2FDQXFJSFVnS3lCa0lDb2daaUFxSUcwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpV2xoWklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNnZ1BTQmtJQ29nYUNBcUlIVWdMU0JqSUNvZ1ppQXFJRzBzSUhSb2FYTXVYM2tnUFNCaklDb2daaUFxSUhVZ0t5QmtJQ29nYUNBcUlHMHNJSFJvYVhNdVgzb2dQU0JqSUNvZ2FDQXFJRzBnS3lCa0lDb2daaUFxSUhVc0lIUm9hWE11WDNjZ1BTQmpJQ29nYUNBcUlIVWdMU0JrSUNvZ1ppQXFJRzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlXbGxZSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2dnUFNCa0lDb2dhQ0FxSUhVZ0xTQmpJQ29nWmlBcUlHMHNJSFJvYVhNdVgza2dQU0JqSUNvZ1ppQXFJSFVnS3lCa0lDb2dhQ0FxSUcwc0lIUm9hWE11WDNvZ1BTQmpJQ29nYUNBcUlHMGdMU0JrSUNvZ1ppQXFJSFVzSUhSb2FYTXVYM2NnUFNCaklDb2dhQ0FxSUhVZ0t5QmtJQ29nWmlBcUlHMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVdWcFlJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZ2dQU0JrSUNvZ2FDQXFJSFVnS3lCaklDb2daaUFxSUcwc0lIUm9hWE11WDNrZ1BTQmpJQ29nWmlBcUlIVWdLeUJrSUNvZ2FDQXFJRzBzSUhSb2FYTXVYM29nUFNCaklDb2dhQ0FxSUcwZ0xTQmtJQ29nWmlBcUlIVXNJSFJvYVhNdVgzY2dQU0JqSUNvZ2FDQXFJSFVnTFNCa0lDb2daaUFxSUcwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpV0ZwWklqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNnZ1BTQmtJQ29nYUNBcUlIVWdMU0JqSUNvZ1ppQXFJRzBzSUhSb2FYTXVYM2tnUFNCaklDb2daaUFxSUhVZ0xTQmtJQ29nYUNBcUlHMHNJSFJvYVhNdVgzb2dQU0JqSUNvZ2FDQXFJRzBnS3lCa0lDb2daaUFxSUhVc0lIUm9hWE11WDNjZ1BTQmpJQ29nYUNBcUlIVWdLeUJrSUNvZ1ppQXFJRzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VVhWaGRHVnlibWx2YmpvZ0xuTmxkRVp5YjIxRmRXeGxjaWdwSUdWdVkyOTFiblJsY21Wa0lHRnVJSFZ1YTI1dmQyNGdiM0prWlhJNklDSWdLeUJ2S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0lUMDlJQ0V4SUNZbUlIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRFWnliMjFCZUdselFXNW5iR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkQ0F2SURJc0lHa2dQU0JOWVhSb0xuTnBiaWh1S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZlQ0E5SUdVdWVDQXFJR2tzSUhSb2FYTXVYM2tnUFNCbExua2dLaUJwTENCMGFHbHpMbDk2SUQwZ1pTNTZJQ29nYVN3Z2RHaHBjeTVmZHlBOUlFMWhkR2d1WTI5ektHNHBMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFVtOTBZWFJwYjI1TllYUnlhWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNWxiR1Z0Wlc1MGN5d2diaUE5SUhSYk1GMHNJR2tnUFNCMFd6UmRMQ0J5SUQwZ2RGczRYU3dnYnlBOUlIUmJNVjBzSUdFZ1BTQjBXelZkTENCc0lEMGdkRnM1WFN3Z1l5QTlJSFJiTWwwc0lHZ2dQU0IwV3paZExDQjFJRDBnZEZzeE1GMHNJR1FnUFNCdUlDc2dZU0FySUhVN0NpQWdJQ0FnSUNBZ2FXWWdLR1FnUGlBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnTGpVZ0x5Qk5ZWFJvTG5OeGNuUW9aQ0FySURFcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNJRDBnTGpJMUlDOGdaaXdnZEdocGN5NWZlQ0E5SUNob0lDMGdiQ2tnS2lCbUxDQjBhR2x6TGw5NUlEMGdLSElnTFNCaktTQXFJR1lzSUhSb2FYTXVYM29nUFNBb2J5QXRJR2twSUNvZ1pqc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzRnUGlCaElDWW1JRzRnUGlCMUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnTWlBcUlFMWhkR2d1YzNGeWRDZ3hJQ3NnYmlBdElHRWdMU0IxS1RzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmR5QTlJQ2hvSUMwZ2JDa2dMeUJtTENCMGFHbHpMbDk0SUQwZ0xqSTFJQ29nWml3Z2RHaHBjeTVmZVNBOUlDaHBJQ3NnYnlrZ0x5Qm1MQ0IwYUdsekxsOTZJRDBnS0hJZ0t5QmpLU0F2SUdZN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhJRDRnZFNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJRElnS2lCTllYUm9Mbk54Y25Rb01TQXJJR0VnTFNCdUlDMGdkU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNjZ1BTQW9jaUF0SUdNcElDOGdaaXdnZEdocGN5NWZlQ0E5SUNocElDc2dieWtnTHlCbUxDQjBhR2x6TGw5NUlEMGdMakkxSUNvZ1ppd2dkR2hwY3k1ZmVpQTlJQ2hzSUNzZ2FDa2dMeUJtT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtSUQwZ01pQXFJRTFoZEdndWMzRnlkQ2d4SUNzZ2RTQXRJRzRnTFNCaEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkeUE5SUNodklDMGdhU2tnTHlCbUxDQjBhR2x6TGw5NElEMGdLSElnS3lCaktTQXZJR1lzSUhSb2FYTXVYM2tnUFNBb2JDQXJJR2dwSUM4Z1ppd2dkR2hwY3k1ZmVpQTlJQzR5TlNBcUlHWTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0Vlc1cGRGWmxZM1J2Y25Nb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlM1a2IzUW9kQ2tnS3lBeE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdUlEd2dUblZ0WW1WeUxrVlFVMGxNVDA0Z1B5QW9iaUE5SURBc0lFMWhkR2d1WVdKektHVXVlQ2tnUGlCTllYUm9MbUZpY3lobExub3BJRDhnS0hSb2FYTXVYM2dnUFNBdFpTNTVMQ0IwYUdsekxsOTVJRDBnWlM1NExDQjBhR2x6TGw5NklEMGdNQ3dnZEdocGN5NWZkeUE5SUc0cElEb2dLSFJvYVhNdVgzZ2dQU0F3TENCMGFHbHpMbDk1SUQwZ0xXVXVlaXdnZEdocGN5NWZlaUE5SUdVdWVTd2dkR2hwY3k1ZmR5QTlJRzRwS1NBNklDaDBhR2x6TGw5NElEMGdaUzU1SUNvZ2RDNTZJQzBnWlM1NklDb2dkQzU1TENCMGFHbHpMbDk1SUQwZ1pTNTZJQ29nZEM1NElDMGdaUzU0SUNvZ2RDNTZMQ0IwYUdsekxsOTZJRDBnWlM1NElDb2dkQzU1SUMwZ1pTNTVJQ29nZEM1NExDQjBhR2x6TGw5M0lEMGdiaWtzSUhSb2FYTXVibTl5YldGc2FYcGxLQ2s3Q2lBZ0lDQjlDaUFnSUNCaGJtZHNaVlJ2S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z01pQXFJRTFoZEdndVlXTnZjeWhOWVhSb0xtRmljeWh0ZENoMGFHbHpMbVJ2ZENobEtTd2dMVEVzSURFcEtTazdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVlViM2RoY21SektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVZVzVuYkdWVWJ5aGxLVHNLSUNBZ0lDQWdJQ0JwWmlBb2JpQTlQVDBnTUNrZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQk5ZWFJvTG0xcGJpZ3hMQ0IwSUM4Z2JpazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJ4bGNuQW9aU3dnYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCcFpHVnVkR2wwZVNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhRb01Dd2dNQ3dnTUN3Z01TazdDaUFnSUNCOUNpQWdJQ0JwYm5abGNuUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXVhblZuWVhSbEtDazdDaUFnSUNCOUNpQWdJQ0JqYjI1cWRXZGhkR1VvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2dnS2owZ0xURXNJSFJvYVhNdVgza2dLajBnTFRFc0lIUm9hWE11WDNvZ0tqMGdMVEVzSUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc29LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1J2ZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNnZ0tpQmxMbDk0SUNzZ2RHaHBjeTVmZVNBcUlHVXVYM2tnS3lCMGFHbHpMbDk2SUNvZ1pTNWZlaUFySUhSb2FYTXVYM2NnS2lCbExsOTNPd29nSUNBZ2ZRb2dJQ0FnYkdWdVozUm9VM0VvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2dnS2lCMGFHbHpMbDk0SUNzZ2RHaHBjeTVmZVNBcUlIUm9hWE11WDNrZ0t5QjBhR2x6TGw5NklDb2dkR2hwY3k1ZmVpQXJJSFJvYVhNdVgzY2dLaUIwYUdsekxsOTNPd29nSUNBZ2ZRb2dJQ0FnYkdWdVozUm9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuTnhjblFvZEdocGN5NWZlQ0FxSUhSb2FYTXVYM2dnS3lCMGFHbHpMbDk1SUNvZ2RHaHBjeTVmZVNBcklIUm9hWE11WDNvZ0tpQjBhR2x6TGw5NklDc2dkR2hwY3k1ZmR5QXFJSFJvYVhNdVgzY3BPd29nSUNBZ2ZRb2dJQ0FnYm05eWJXRnNhWHBsS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVzWlc1bmRHZ29LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaU0E5UFQwZ01DQS9JQ2gwYUdsekxsOTRJRDBnTUN3Z2RHaHBjeTVmZVNBOUlEQXNJSFJvYVhNdVgzb2dQU0F3TENCMGFHbHpMbDkzSUQwZ01Ta2dPaUFvWlNBOUlERWdMeUJsTENCMGFHbHpMbDk0SUQwZ2RHaHBjeTVmZUNBcUlHVXNJSFJvYVhNdVgza2dQU0IwYUdsekxsOTVJQ29nWlN3Z2RHaHBjeTVmZWlBOUlIUm9hWE11WDNvZ0tpQmxMQ0IwYUdsekxsOTNJRDBnZEdocGN5NWZkeUFxSUdVcExDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdGRXeDBhWEJzZVNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFFnSVQwOUlIWnZhV1FnTUNBL0lDaGpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbEYxWVhSbGNtNXBiMjQ2SUM1dGRXeDBhWEJzZVNncElHNXZkeUJ2Ym14NUlHRmpZMlZ3ZEhNZ2IyNWxJR0Z5WjNWdFpXNTBMaUJWYzJVZ0xtMTFiSFJwY0d4NVVYVmhkR1Z5Ym1sdmJuTW9JR0VzSUdJZ0tTQnBibk4wWldGa0xpSXBMQ0IwYUdsekxtMTFiSFJwY0d4NVVYVmhkR1Z5Ym1sdmJuTW9aU3dnZENrcElEb2dkR2hwY3k1dGRXeDBhWEJzZVZGMVlYUmxjbTVwYjI1ektIUm9hWE1zSUdVcE93b2dJQ0FnZlFvZ0lDQWdjSEpsYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVVWFZoZEdWeWJtbHZibk1vWlN3Z2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCdGRXeDBhWEJzZVZGMVlYUmxjbTVwYjI1ektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVgzZ3NJR2tnUFNCbExsOTVMQ0J5SUQwZ1pTNWZlaXdnYnlBOUlHVXVYM2NzSUdFZ1BTQjBMbDk0TENCc0lEMGdkQzVmZVN3Z1l5QTlJSFF1WDNvc0lHZ2dQU0IwTGw5M093b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDk0SUQwZ2JpQXFJR2dnS3lCdklDb2dZU0FySUdrZ0tpQmpJQzBnY2lBcUlHd3NJSFJvYVhNdVgza2dQU0JwSUNvZ2FDQXJJRzhnS2lCc0lDc2djaUFxSUdFZ0xTQnVJQ29nWXl3Z2RHaHBjeTVmZWlBOUlISWdLaUJvSUNzZ2J5QXFJR01nS3lCdUlDb2diQ0F0SUdrZ0tpQmhMQ0IwYUdsekxsOTNJRDBnYnlBcUlHZ2dMU0J1SUNvZ1lTQXRJR2tnS2lCc0lDMGdjaUFxSUdNc0lIUm9hWE11WDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOc1pYSndLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZENBOVBUMGdNQ2tnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0FnSUNBZ2FXWWdLSFFnUFQwOUlERXBJSEpsZEhWeWJpQjBhR2x6TG1OdmNIa29aU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxsOTRMQ0JwSUQwZ2RHaHBjeTVmZVN3Z2NpQTlJSFJvYVhNdVgzb3NJRzhnUFNCMGFHbHpMbDkzTENCaElEMGdieUFxSUdVdVgzY2dLeUJ1SUNvZ1pTNWZlQ0FySUdrZ0tpQmxMbDk1SUNzZ2NpQXFJR1V1WDNvN0NpQWdJQ0FnSUNBZ2FXWWdLR0VnUENBd0lEOGdLSFJvYVhNdVgzY2dQU0F0WlM1ZmR5d2dkR2hwY3k1ZmVDQTlJQzFsTGw5NExDQjBhR2x6TGw5NUlEMGdMV1V1WDNrc0lIUm9hWE11WDNvZ1BTQXRaUzVmZWl3Z1lTQTlJQzFoS1NBNklIUm9hWE11WTI5d2VTaGxLU3dnWVNBK1BTQXhLU0J5WlhSMWNtNGdkR2hwY3k1ZmR5QTlJRzhzSUhSb2FYTXVYM2dnUFNCdUxDQjBhR2x6TGw5NUlEMGdhU3dnZEdocGN5NWZlaUE5SUhJc0lIUm9hWE03Q2lBZ0lDQWdJQ0FnYkdWMElHd2dQU0F4SUMwZ1lTQXFJR0U3Q2lBZ0lDQWdJQ0FnYVdZZ0tHd2dQRDBnVG5WdFltVnlMa1ZRVTBsTVQwNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1lnUFNBeElDMGdkRHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2NnUFNCbUlDb2dieUFySUhRZ0tpQjBhR2x6TGw5M0xDQjBhR2x6TGw5NElEMGdaaUFxSUc0Z0t5QjBJQ29nZEdocGN5NWZlQ3dnZEdocGN5NWZlU0E5SUdZZ0tpQnBJQ3NnZENBcUlIUm9hWE11WDNrc0lIUm9hWE11WDNvZ1BTQm1JQ29nY2lBcklIUWdLaUIwYUdsekxsOTZMQ0IwYUdsekxtNXZjbTFoYkdsNlpTZ3BMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1RXRjBhQzV6Y1hKMEtHd3BMQ0JvSUQwZ1RXRjBhQzVoZEdGdU1paGpMQ0JoS1N3Z2RTQTlJRTFoZEdndWMybHVLQ2d4SUMwZ2RDa2dLaUJvS1NBdklHTXNJR1FnUFNCTllYUm9Mbk5wYmloMElDb2dhQ2tnTHlCak93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzSUQwZ2J5QXFJSFVnS3lCMGFHbHpMbDkzSUNvZ1pDd2dkR2hwY3k1ZmVDQTlJRzRnS2lCMUlDc2dkR2hwY3k1ZmVDQXFJR1FzSUhSb2FYTXVYM2tnUFNCcElDb2dkU0FySUhSb2FYTXVYM2tnS2lCa0xDQjBhR2x6TGw5NklEMGdjaUFxSUhVZ0t5QjBhR2x6TGw5NklDb2daQ3dnZEdocGN5NWZiMjVEYUdGdVoyVkRZV3hzWW1GamF5Z3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMnhsY25CUmRXRjBaWEp1YVc5dWN5aGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1amIzQjVLR1VwTG5Oc1pYSndLSFFzSUc0cE93b2dJQ0FnZlFvZ0lDQWdjbUZ1Wkc5dEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdUV0YwYUM1eVlXNWtiMjBvS1N3Z2RDQTlJRTFoZEdndWMzRnlkQ2d4SUMwZ1pTa3NJRzRnUFNCTllYUm9Mbk54Y25Rb1pTa3NJR2tnUFNBeUlDb2dUV0YwYUM1UVNTQXFJRTFoZEdndWNtRnVaRzl0S0Nrc0lISWdQU0F5SUNvZ1RXRjBhQzVRU1NBcUlFMWhkR2d1Y21GdVpHOXRLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBLSFFnS2lCTllYUm9MbU52Y3locEtTd2diaUFxSUUxaGRHZ3VjMmx1S0hJcExDQnVJQ29nVFdGMGFDNWpiM01vY2lrc0lIUWdLaUJOWVhSb0xuTnBiaWhwS1NrN0NpQWdJQ0I5Q2lBZ0lDQmxjWFZoYkhNb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbDk0SUQwOVBTQjBhR2x6TGw5NElDWW1JR1V1WDNrZ1BUMDlJSFJvYVhNdVgza2dKaVlnWlM1ZmVpQTlQVDBnZEdocGN5NWZlaUFtSmlCbExsOTNJRDA5UFNCMGFHbHpMbDkzT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUZ5Y21GNUtHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNnZ1BTQmxXM1JkTENCMGFHbHpMbDk1SUQwZ1pWdDBJQ3NnTVYwc0lIUm9hWE11WDNvZ1BTQmxXM1FnS3lBeVhTd2dkR2hwY3k1ZmR5QTlJR1ZiZENBcklETmRMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMEZ5Y21GNUtHVWdQU0JiWFN3Z2RDQTlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlZ0MFhTQTlJSFJvYVhNdVgzZ3NJR1ZiZENBcklERmRJRDBnZEdocGN5NWZlU3dnWlZ0MElDc2dNbDBnUFNCMGFHbHpMbDk2TENCbFczUWdLeUF6WFNBOUlIUm9hWE11WDNjc0lHVTdDaUFnSUNCOUNpQWdJQ0JtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmVDQTlJR1V1WjJWMFdDaDBLU3dnZEdocGN5NWZlU0E5SUdVdVoyVjBXU2gwS1N3Z2RHaHBjeTVmZWlBOUlHVXVaMlYwV2loMEtTd2dkR2hwY3k1ZmR5QTlJR1V1WjJWMFZ5aDBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRjl2YmtOb1lXNW5aU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjl1UTJoaGJtZGxRMkZzYkdKaFkyc2dQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWDI5dVEyaGhibWRsUTJGc2JHSmhZMnNvS1NCN2ZRcDlPd3BuZEM1d2NtOTBiM1I1Y0dVdWFYTlJkV0YwWlhKdWFXOXVJRDBnSVRBN0NuWmhjaUJOSUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlEQXNJSFFnUFNBd0xDQnVJRDBnTUNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTU0SUQwZ1pTd2dkR2hwY3k1NUlEMGdkQ3dnZEdocGN5NTZJRDBnYmpzS0lDQWdJSDBLSUNBZ0lITmxkQ2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzRnUFQwOUlIWnZhV1FnTUNBbUppQW9iaUE5SUhSb2FYTXVlaWtzSUhSb2FYTXVlQ0E5SUdVc0lIUm9hWE11ZVNBOUlIUXNJSFJvYVhNdWVpQTlJRzRzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCbExDQjBhR2x6TG5rZ1BTQmxMQ0IwYUdsekxub2dQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWktHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NUlEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZvb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5vZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUTI5dGNHOXVaVzUwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J6ZDJsMFkyZ29aU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTURvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SUhRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F4T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTVJRDBnZERzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxub2dQU0IwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9JbWx1WkdWNElHbHpJRzkxZENCdlppQnlZVzVuWlRvZ0lpQXJJR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEVOdmJYQnZibVZ1ZENobEtTQjdDaUFnSUNBZ0lDQWdjM2RwZEdOb0tHVXBld29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NE93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElERTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU1T3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTZPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pwYm1SbGVDQnBjeUJ2ZFhRZ2IyWWdjbUZ1WjJVNklDSWdLeUJsS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9kR2hwY3k1NExDQjBhR2x6TG5rc0lIUm9hWE11ZWlrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ1pTNTRMQ0IwYUdsekxua2dQU0JsTG5rc0lIUm9hWE11ZWlBOUlHVXVlaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0ZrWkNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFFnSVQwOUlIWnZhV1FnTUNBL0lDaGpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbFpsWTNSdmNqTTZJQzVoWkdRb0tTQnViM2NnYjI1c2VTQmhZMk5sY0hSeklHOXVaU0JoY21kMWJXVnVkQzRnVlhObElDNWhaR1JXWldOMGIzSnpLQ0JoTENCaUlDa2dhVzV6ZEdWaFpDNGlLU3dnZEdocGN5NWhaR1JXWldOMGIzSnpLR1VzSUhRcEtTQTZJQ2gwYUdsekxuZ2dLejBnWlM1NExDQjBhR2x6TG5rZ0t6MGdaUzU1TENCMGFHbHpMbm9nS3owZ1pTNTZMQ0IwYUdsektUc0tJQ0FnSUgwS0lDQWdJR0ZrWkZOallXeGhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FyUFNCbExDQjBhR2x6TG5rZ0t6MGdaU3dnZEdocGN5NTZJQ3M5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFpHUldaV04wYjNKektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnWlM1NElDc2dkQzU0TENCMGFHbHpMbmtnUFNCbExua2dLeUIwTG5rc0lIUm9hWE11ZWlBOUlHVXVlaUFySUhRdWVpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHRmtaRk5qWVd4bFpGWmxZM1J2Y2lobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXJQU0JsTG5nZ0tpQjBMQ0IwYUdsekxua2dLejBnWlM1NUlDb2dkQ3dnZEdocGN5NTZJQ3M5SUdVdWVpQXFJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZFdJb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwSUNFOVBTQjJiMmxrSURBZ1B5QW9ZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVXWldOMGIzSXpPaUF1YzNWaUtDa2dibTkzSUc5dWJIa2dZV05qWlhCMGN5QnZibVVnWVhKbmRXMWxiblF1SUZWelpTQXVjM1ZpVm1WamRHOXljeWdnWVN3Z1lpQXBJR2x1YzNSbFlXUXVJaWtzSUhSb2FYTXVjM1ZpVm1WamRHOXljeWhsTENCMEtTa2dPaUFvZEdocGN5NTRJQzA5SUdVdWVDd2dkR2hwY3k1NUlDMDlJR1V1ZVN3Z2RHaHBjeTU2SUMwOUlHVXVlaXdnZEdocGN5azdDaUFnSUNCOUNpQWdJQ0J6ZFdKVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnTFQwZ1pTd2dkR2hwY3k1NUlDMDlJR1VzSUhSb2FYTXVlaUF0UFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzVmlWbVZqZEc5eWN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVdWVDQXRJSFF1ZUN3Z2RHaHBjeTU1SUQwZ1pTNTVJQzBnZEM1NUxDQjBhR2x6TG5vZ1BTQmxMbm9nTFNCMExub3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRkV3gwYVhCc2VTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0lUMDlJSFp2YVdRZ01DQS9JQ2hqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxabFkzUnZjak02SUM1dGRXeDBhWEJzZVNncElHNXZkeUJ2Ym14NUlHRmpZMlZ3ZEhNZ2IyNWxJR0Z5WjNWdFpXNTBMaUJWYzJVZ0xtMTFiSFJwY0d4NVZtVmpkRzl5Y3lnZ1lTd2dZaUFwSUdsdWMzUmxZV1F1SWlrc0lIUm9hWE11YlhWc2RHbHdiSGxXWldOMGIzSnpLR1VzSUhRcEtTQTZJQ2gwYUdsekxuZ2dLajBnWlM1NExDQjBhR2x6TG5rZ0tqMGdaUzU1TENCMGFHbHpMbm9nS2owZ1pTNTZMQ0IwYUdsektUc0tJQ0FnSUgwS0lDQWdJRzExYkhScGNHeDVVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElDbzlJR1VzSUhSb2FYTXVlU0FxUFNCbExDQjBhR2x6TG5vZ0tqMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzExYkhScGNHeDVWbVZqZEc5eWN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUdVdWVDQXFJSFF1ZUN3Z2RHaHBjeTU1SUQwZ1pTNTVJQ29nZEM1NUxDQjBhR2x6TG5vZ1BTQmxMbm9nS2lCMExub3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmhjSEJzZVVWMWJHVnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlNBbUppQmxMbWx6UlhWc1pYSWdmSHdnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVZtVmpkRzl5TXpvZ0xtRndjR3g1UlhWc1pYSW9LU0J1YjNjZ1pYaHdaV04wY3lCaGJpQkZkV3hsY2lCeWIzUmhkR2x2YmlCeVlYUm9aWElnZEdoaGJpQmhJRlpsWTNSdmNqTWdZVzVrSUc5eVpHVnlMaUlwTENCMGFHbHpMbUZ3Y0d4NVVYVmhkR1Z5Ym1sdmJpaDViQzV6WlhSR2NtOXRSWFZzWlhJb1pTa3BPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbEJlR2x6UVc1bmJHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ3Y0d4NVVYVmhkR1Z5Ym1sdmJpaDViQzV6WlhSR2NtOXRRWGhwYzBGdVoyeGxLR1VzSUhRcEtUc0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TXlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5nc0lHNGdQU0IwYUdsekxua3NJR2tnUFNCMGFHbHpMbm9zSUhJZ1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQnlXekJkSUNvZ2RDQXJJSEpiTTEwZ0tpQnVJQ3NnY2xzMlhTQXFJR2tzSUhSb2FYTXVlU0E5SUhKYk1WMGdLaUIwSUNzZ2NsczBYU0FxSUc0Z0t5QnlXemRkSUNvZ2FTd2dkR2hwY3k1NklEMGdjbHN5WFNBcUlIUWdLeUJ5V3pWZElDb2diaUFySUhKYk9GMGdLaUJwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE9iM0p0WVd4TllYUnlhWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ3Y0d4NVRXRjBjbWw0TXlobEtTNXViM0p0WVd4cGVtVW9LVHNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE5DaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuZ3NJRzRnUFNCMGFHbHpMbmtzSUdrZ1BTQjBhR2x6TG5vc0lISWdQU0JsTG1Wc1pXMWxiblJ6TENCdklEMGdNU0F2SUNoeVd6TmRJQ29nZENBcklISmJOMTBnS2lCdUlDc2djbHN4TVYwZ0tpQnBJQ3NnY2xzeE5WMHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQW9jbHN3WFNBcUlIUWdLeUJ5V3pSZElDb2diaUFySUhKYk9GMGdLaUJwSUNzZ2Nsc3hNbDBwSUNvZ2J5d2dkR2hwY3k1NUlEMGdLSEpiTVYwZ0tpQjBJQ3NnY2xzMVhTQXFJRzRnS3lCeVd6bGRJQ29nYVNBcklISmJNVE5kS1NBcUlHOHNJSFJvYVhNdWVpQTlJQ2h5V3pKZElDb2dkQ0FySUhKYk5sMGdLaUJ1SUNzZ2Nsc3hNRjBnS2lCcElDc2djbHN4TkYwcElDb2dieXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVVYVmhkR1Z5Ym1sdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuZ3NJRzRnUFNCMGFHbHpMbmtzSUdrZ1BTQjBhR2x6TG5vc0lISWdQU0JsTG5nc0lHOGdQU0JsTG5rc0lHRWdQU0JsTG5vc0lHd2dQU0JsTG5jc0lHTWdQU0JzSUNvZ2RDQXJJRzhnS2lCcElDMGdZU0FxSUc0c0lHZ2dQU0JzSUNvZ2JpQXJJR0VnS2lCMElDMGdjaUFxSUdrc0lIVWdQU0JzSUNvZ2FTQXJJSElnS2lCdUlDMGdieUFxSUhRc0lHUWdQU0F0Y2lBcUlIUWdMU0J2SUNvZ2JpQXRJR0VnS2lCcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCaklDb2diQ0FySUdRZ0tpQXRjaUFySUdnZ0tpQXRZU0F0SUhVZ0tpQXRieXdnZEdocGN5NTVJRDBnYUNBcUlHd2dLeUJrSUNvZ0xXOGdLeUIxSUNvZ0xYSWdMU0JqSUNvZ0xXRXNJSFJvYVhNdWVpQTlJSFVnS2lCc0lDc2daQ0FxSUMxaElDc2dZeUFxSUMxdklDMGdhQ0FxSUMxeUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2NISnZhbVZqZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVhCd2JIbE5ZWFJ5YVhnMEtHVXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxLUzVoY0hCc2VVMWhkSEpwZURRb1pTNXdjbTlxWldOMGFXOXVUV0YwY21sNEtUc0tJQ0FnSUgwS0lDQWdJSFZ1Y0hKdmFtVmpkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEJ3YkhsTllYUnlhWGcwS0dVdWNISnZhbVZqZEdsdmJrMWhkSEpwZUVsdWRtVnljMlVwTG1Gd2NHeDVUV0YwY21sNE5DaGxMbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuZ3NJRzRnUFNCMGFHbHpMbmtzSUdrZ1BTQjBhR2x6TG5vc0lISWdQU0JsTG1Wc1pXMWxiblJ6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0J5V3pCZElDb2dkQ0FySUhKYk5GMGdLaUJ1SUNzZ2NsczRYU0FxSUdrc0lIUm9hWE11ZVNBOUlISmJNVjBnS2lCMElDc2djbHMxWFNBcUlHNGdLeUJ5V3psZElDb2dhU3dnZEdocGN5NTZJRDBnY2xzeVhTQXFJSFFnS3lCeVd6WmRJQ29nYmlBcklISmJNVEJkSUNvZ2FTd2dkR2hwY3k1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUgwS0lDQWdJR1JwZG1sa1pTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXZQU0JsTG5nc0lIUm9hWE11ZVNBdlBTQmxMbmtzSUhSb2FYTXVlaUF2UFNCbExub3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmthWFpwWkdWVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVVMk5oYkdGeUtERWdMeUJsS1RzS0lDQWdJSDBLSUNBZ0lHMXBiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0E5SUUxaGRHZ3ViV2x1S0hSb2FYTXVlQ3dnWlM1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1dGFXNG9kR2hwY3k1NUxDQmxMbmtwTENCMGFHbHpMbm9nUFNCTllYUm9MbTFwYmloMGFHbHpMbm9zSUdVdWVpa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRZWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFoZUNoMGFHbHpMbmdzSUdVdWVDa3NJSFJvYVhNdWVTQTlJRTFoZEdndWJXRjRLSFJvYVhNdWVTd2daUzU1S1N3Z2RHaHBjeTU2SUQwZ1RXRjBhQzV0WVhnb2RHaHBjeTU2TENCbExub3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMnhoYlhBb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JOWVhSb0xtMWhlQ2hsTG5nc0lFMWhkR2d1YldsdUtIUXVlQ3dnZEdocGN5NTRLU2tzSUhSb2FYTXVlU0E5SUUxaGRHZ3ViV0Y0S0dVdWVTd2dUV0YwYUM1dGFXNG9kQzU1TENCMGFHbHpMbmtwS1N3Z2RHaHBjeTU2SUQwZ1RXRjBhQzV0WVhnb1pTNTZMQ0JOWVhSb0xtMXBiaWgwTG5vc0lIUm9hWE11ZWlrcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyeGhiWEJUWTJGc1lYSW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCTllYUm9MbTFoZUNobExDQk5ZWFJvTG0xcGJpaDBMQ0IwYUdsekxuZ3BLU3dnZEdocGN5NTVJRDBnVFdGMGFDNXRZWGdvWlN3Z1RXRjBhQzV0YVc0b2RDd2dkR2hwY3k1NUtTa3NJSFJvYVhNdWVpQTlJRTFoZEdndWJXRjRLR1VzSUUxaGRHZ3ViV2x1S0hRc0lIUm9hWE11ZWlrcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyeGhiWEJNWlc1bmRHZ29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVzWlc1bmRHZ29LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a2FYWnBaR1ZUWTJGc1lYSW9iaUI4ZkNBeEtTNXRkV3gwYVhCc2VWTmpZV3hoY2loTllYUm9MbTFoZUNobExDQk5ZWFJvTG0xcGJpaDBMQ0J1S1NrcE93b2dJQ0FnZlFvZ0lDQWdabXh2YjNJb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1Wm14dmIzSW9kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1bWJHOXZjaWgwYUdsekxua3BMQ0IwYUdsekxub2dQU0JOWVhSb0xtWnNiMjl5S0hSb2FYTXVlaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqWldsc0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG1ObGFXd29kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1alpXbHNLSFJvYVhNdWVTa3NJSFJvYVhNdWVpQTlJRTFoZEdndVkyVnBiQ2gwYUdsekxub3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkxYm1Rb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlFMWhkR2d1Y205MWJtUW9kR2hwY3k1NEtTd2dkR2hwY3k1NUlEMGdUV0YwYUM1eWIzVnVaQ2gwYUdsekxua3BMQ0IwYUdsekxub2dQU0JOWVhSb0xuSnZkVzVrS0hSb2FYTXVlaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNWdVpGUnZXbVZ5YnlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTU0SUQwZ2RHaHBjeTU0SUR3Z01DQS9JRTFoZEdndVkyVnBiQ2gwYUdsekxuZ3BJRG9nVFdGMGFDNW1iRzl2Y2loMGFHbHpMbmdwTENCMGFHbHpMbmtnUFNCMGFHbHpMbmtnUENBd0lEOGdUV0YwYUM1alpXbHNLSFJvYVhNdWVTa2dPaUJOWVhSb0xtWnNiMjl5S0hSb2FYTXVlU2tzSUhSb2FYTXVlaUE5SUhSb2FYTXVlaUE4SURBZ1B5Qk5ZWFJvTG1ObGFXd29kR2hwY3k1NktTQTZJRTFoZEdndVpteHZiM0lvZEdocGN5NTZLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRzVsWjJGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdMWFJvYVhNdWVDd2dkR2hwY3k1NUlEMGdMWFJvYVhNdWVTd2dkR2hwY3k1NklEMGdMWFJvYVhNdWVpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHUnZkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVlQ0FxSUdVdWVDQXJJSFJvYVhNdWVTQXFJR1V1ZVNBcklIUm9hWE11ZWlBcUlHVXVlanNLSUNBZ0lIMEtJQ0FnSUd4bGJtZDBhRk54S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnS2lCMGFHbHpMbmdnS3lCMGFHbHpMbmtnS2lCMGFHbHpMbmtnS3lCMGFHbHpMbm9nS2lCMGFHbHpMbm83Q2lBZ0lDQjlDaUFnSUNCc1pXNW5kR2dvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbmdnS2lCMGFHbHpMbmdnS3lCMGFHbHpMbmtnS2lCMGFHbHpMbmtnS3lCMGFHbHpMbm9nS2lCMGFHbHpMbm9wT3dvZ0lDQWdmUW9nSUNBZ2JXRnVhR0YwZEdGdVRHVnVaM1JvS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUZpY3loMGFHbHpMbmdwSUNzZ1RXRjBhQzVoWW5Nb2RHaHBjeTU1S1NBcklFMWhkR2d1WVdKektIUm9hWE11ZWlrN0NpQWdJQ0I5Q2lBZ0lDQnViM0p0WVd4cGVtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHbDJhV1JsVTJOaGJHRnlLSFJvYVhNdWJHVnVaM1JvS0NrZ2ZId2dNU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUk1aVzVuZEdnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WlNncExtMTFiSFJwY0d4NVUyTmhiR0Z5S0dVcE93b2dJQ0FnZlFvZ0lDQWdiR1Z5Y0NobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQXJQU0FvWlM1NElDMGdkR2hwY3k1NEtTQXFJSFFzSUhSb2FYTXVlU0FyUFNBb1pTNTVJQzBnZEdocGN5NTVLU0FxSUhRc0lIUm9hWE11ZWlBclBTQW9aUzU2SUMwZ2RHaHBjeTU2S1NBcUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnNaWEp3Vm1WamRHOXljeWhsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWVDQTlJR1V1ZUNBcklDaDBMbmdnTFNCbExuZ3BJQ29nYml3Z2RHaHBjeTU1SUQwZ1pTNTVJQ3NnS0hRdWVTQXRJR1V1ZVNrZ0tpQnVMQ0IwYUdsekxub2dQU0JsTG5vZ0t5QW9kQzU2SUMwZ1pTNTZLU0FxSUc0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamNtOXpjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUWdJVDA5SUhadmFXUWdNQ0EvSUNoamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsWmxZM1J2Y2pNNklDNWpjbTl6Y3lncElHNXZkeUJ2Ym14NUlHRmpZMlZ3ZEhNZ2IyNWxJR0Z5WjNWdFpXNTBMaUJWYzJVZ0xtTnliM056Vm1WamRHOXljeWdnWVN3Z1lpQXBJR2x1YzNSbFlXUXVJaWtzSUhSb2FYTXVZM0p2YzNOV1pXTjBiM0p6S0dVc0lIUXBLU0E2SUhSb2FYTXVZM0p2YzNOV1pXTjBiM0p6S0hSb2FYTXNJR1VwT3dvZ0lDQWdmUW9nSUNBZ1kzSnZjM05XWldOMGIzSnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVlQ3dnYVNBOUlHVXVlU3dnY2lBOUlHVXVlaXdnYnlBOUlIUXVlQ3dnWVNBOUlIUXVlU3dnYkNBOUlIUXVlanNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1NElEMGdhU0FxSUd3Z0xTQnlJQ29nWVN3Z2RHaHBjeTU1SUQwZ2NpQXFJRzhnTFNCdUlDb2diQ3dnZEdocGN5NTZJRDBnYmlBcUlHRWdMU0JwSUNvZ2J5d2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIQnliMnBsWTNSUGJsWmxZM1J2Y2lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbXhsYm1kMGFGTnhLQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUWdQVDA5SURBcElISmxkSFZ5YmlCMGFHbHpMbk5sZENnd0xDQXdMQ0F3S1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVpHOTBLSFJvYVhNcElDOGdkRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIzQjVLR1VwTG0xMWJIUnBjR3g1VTJOaGJHRnlLRzRwT3dvZ0lDQWdmUW9nSUNBZ2NISnZhbVZqZEU5dVVHeGhibVVvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTmJ5NWpiM0I1S0hSb2FYTXBMbkJ5YjJwbFkzUlBibFpsWTNSdmNpaGxLU3dnZEdocGN5NXpkV0lvVFc4cE93b2dJQ0FnZlFvZ0lDQWdjbVZtYkdWamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzVmlLRTF2TG1OdmNIa29aU2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9NaUFxSUhSb2FYTXVaRzkwS0dVcEtTazdDaUFnSUNCOUNpQWdJQ0JoYm1kc1pWUnZLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbXhsYm1kMGFGTnhLQ2tnS2lCbExteGxibWQwYUZOeEtDa3BPd29nSUNBZ0lDQWdJR2xtSUNoMElEMDlQU0F3S1NCeVpYUjFjbTRnVFdGMGFDNVFTU0F2SURJN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbVJ2ZENobEtTQXZJSFE3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndVlXTnZjeWh0ZENodUxDQXRNU3dnTVNrcE93b2dJQ0FnZlFvZ0lDQWdaR2x6ZEdGdVkyVlVieWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLR1VwS1RzS0lDQWdJSDBLSUNBZ0lHUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWVDQXRJR1V1ZUN3Z2JpQTlJSFJvYVhNdWVTQXRJR1V1ZVN3Z2FTQTlJSFJvYVhNdWVpQXRJR1V1ZWpzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENBcUlIUWdLeUJ1SUNvZ2JpQXJJR2tnS2lCcE93b2dJQ0FnZlFvZ0lDQWdiV0Z1YUdGMGRHRnVSR2x6ZEdGdVkyVlVieWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0hSb2FYTXVlQ0F0SUdVdWVDa2dLeUJOWVhSb0xtRmljeWgwYUdsekxua2dMU0JsTG5rcElDc2dUV0YwYUM1aFluTW9kR2hwY3k1NklDMGdaUzU2S1RzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxVGNHaGxjbWxqWVd3b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRFWnliMjFUY0dobGNtbGpZV3hEYjI5eVpITW9aUzV5WVdScGRYTXNJR1V1Y0docExDQmxMblJvWlhSaEtUc0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMVRjR2hsY21sallXeERiMjl5WkhNb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1RXRjBhQzV6YVc0b2RDa2dLaUJsT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuZ2dQU0JwSUNvZ1RXRjBhQzV6YVc0b2Jpa3NJSFJvYVhNdWVTQTlJRTFoZEdndVkyOXpLSFFwSUNvZ1pTd2dkR2hwY3k1NklEMGdhU0FxSUUxaGRHZ3VZMjl6S0c0cExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlVONWJHbHVaSEpwWTJGc0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUkdjbTl0UTNsc2FXNWtjbWxqWVd4RGIyOXlaSE1vWlM1eVlXUnBkWE1zSUdVdWRHaGxkR0VzSUdVdWVTazdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRRM2xzYVc1a2NtbGpZV3hEYjI5eVpITW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQmxJQ29nVFdGMGFDNXphVzRvZENrc0lIUm9hWE11ZVNBOUlHNHNJSFJvYVhNdWVpQTlJR1VnS2lCTllYUm9MbU52Y3loMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbExtVnNaVzFsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmdnUFNCMFd6RXlYU3dnZEdocGN5NTVJRDBnZEZzeE0xMHNJSFJvYVhNdWVpQTlJSFJiTVRSZExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbkp2YlUxaGRISnBlRk5qWVd4bEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaGxMQ0F3S1M1c1pXNW5kR2dvS1N3Z2JpQTlJSFJvYVhNdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaGxMQ0F4S1M1c1pXNW5kR2dvS1N3Z2FTQTlJSFJvYVhNdWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaGxMQ0F5S1M1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTRJRDBnZEN3Z2RHaHBjeTU1SUQwZ2Jpd2dkR2hwY3k1NklEMGdhU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMU5ZWFJ5YVhoRGIyeDFiVzRvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1aeWIyMUJjbkpoZVNobExtVnNaVzFsYm5SekxDQjBJQ29nTkNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFRXRjBjbWw0TTBOdmJIVnRiaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm5KdmJVRnljbUY1S0dVdVpXeGxiV1Z1ZEhNc0lIUWdLaUF6S1RzS0lDQWdJSDBLSUNBZ0lHVnhkV0ZzY3lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVlQ0E5UFQwZ2RHaHBjeTU0SUNZbUlHVXVlU0E5UFQwZ2RHaHBjeTU1SUNZbUlHVXVlaUE5UFQwZ2RHaHBjeTU2T3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUZ5Y21GNUtHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZUNBOUlHVmJkRjBzSUhSb2FYTXVlU0E5SUdWYmRDQXJJREZkTENCMGFHbHpMbm9nUFNCbFczUWdLeUF5WFN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlFYSnlZWGtvWlNBOUlGdGRMQ0IwSUQwZ01Da2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxXM1JkSUQwZ2RHaHBjeTU0TENCbFczUWdLeUF4WFNBOUlIUm9hWE11ZVN3Z1pWdDBJQ3NnTWwwZ1BTQjBhR2x6TG5vc0lHVTdDaUFnSUNCOUNpQWdJQ0JtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmlBaFBUMGdkbTlwWkNBd0lDWW1JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1Vm1WamRHOXlNem9nYjJabWMyVjBJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUWdabkp2YlNBdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTZ3BMaUlwTENCMGFHbHpMbmdnUFNCbExtZGxkRmdvZENrc0lIUm9hWE11ZVNBOUlHVXVaMlYwV1NoMEtTd2dkR2hwY3k1NklEMGdaUzVuWlhSYUtIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbUZ1Wkc5dEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTENCMGFHbHpMbmtnUFNCTllYUm9MbkpoYm1SdmJTZ3BMQ0IwYUdsekxub2dQU0JOWVhSb0xuSmhibVJ2YlNncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2NtRnVaRzl0UkdseVpXTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ0tFMWhkR2d1Y21GdVpHOXRLQ2tnTFNBdU5Ta2dLaUF5TENCMElEMGdUV0YwYUM1eVlXNWtiMjBvS1NBcUlFMWhkR2d1VUVrZ0tpQXlMQ0J1SUQwZ1RXRjBhQzV6Y1hKMEtERWdMU0JsSUNvcUlESXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5nZ1BTQnVJQ29nVFdGMGFDNWpiM01vZENrc0lIUm9hWE11ZVNBOUlHNGdLaUJOWVhSb0xuTnBiaWgwS1N3Z2RHaHBjeTU2SUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lDcGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BJSHNLSUNBZ0lDQWdJQ0I1YVdWc1pDQjBhR2x6TG5nc0lIbHBaV3hrSUhSb2FYTXVlU3dnZVdsbGJHUWdkR2hwY3k1Nk93b2dJQ0FnZlFwOU93cE5MbkJ5YjNSdmRIbHdaUzVwYzFabFkzUnZjak1nUFNBaE1Ec0tkbUZ5SUUxdklEMGdibVYzSUUwc0lIbHNJRDBnYm1WM0lHZDBMQ0JNZENBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnVFNneElDOGdNQ3dnTVNBdklEQXNJREVnTHlBd0tTd2dkQ0E5SUc1bGR5Qk5LQzB4SUM4Z01Dd2dMVEVnTHlBd0xDQXRNU0F2SURBcEtYc0tJQ0FnSUNBZ0lDQjBhR2x6TG0xcGJpQTlJR1VzSUhSb2FYTXViV0Y0SUQwZ2REc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbU52Y0hrb1pTa3NJSFJvYVhNdWJXRjRMbU52Y0hrb2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFFYSnlZWGtvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ01TQXZJREFzSUc0Z1BTQXhJQzhnTUN3Z2FTQTlJREVnTHlBd0xDQnlJRDBnTFRFZ0x5QXdMQ0J2SUQwZ0xURWdMeUF3TENCaElEMGdMVEVnTHlBd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JDQTlJREFzSUdNZ1BTQmxMbXhsYm1kMGFEc2diQ0E4SUdNN0lHd2dLejBnTXlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb0lEMGdaVnRzWFN3Z2RTQTlJR1ZiYkNBcklERmRMQ0JrSUQwZ1pWdHNJQ3NnTWwwN0NpQWdJQ0FnSUNBZ0lDQWdJR2dnUENCMElDWW1JQ2gwSUQwZ2FDa3NJSFVnUENCdUlDWW1JQ2h1SUQwZ2RTa3NJR1FnUENCcElDWW1JQ2hwSUQwZ1pDa3NJR2dnUGlCeUlDWW1JQ2h5SUQwZ2FDa3NJSFVnUGlCdklDWW1JQ2h2SUQwZ2RTa3NJR1FnUGlCaElDWW1JQ2hoSUQwZ1pDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNXpaWFFvZEN3Z2Jpd2dhU2tzSUhSb2FYTXViV0Y0TG5ObGRDaHlMQ0J2TENCaEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ01TQXZJREFzSUc0Z1BTQXhJQzhnTUN3Z2FTQTlJREVnTHlBd0xDQnlJRDBnTFRFZ0x5QXdMQ0J2SUQwZ0xURWdMeUF3TENCaElEMGdMVEVnTHlBd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JDQTlJREFzSUdNZ1BTQmxMbU52ZFc1ME95QnNJRHdnWXpzZ2JDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCbExtZGxkRmdvYkNrc0lIVWdQU0JsTG1kbGRGa29iQ2tzSUdRZ1BTQmxMbWRsZEZvb2JDazdDaUFnSUNBZ0lDQWdJQ0FnSUdnZ1BDQjBJQ1ltSUNoMElEMGdhQ2tzSUhVZ1BDQnVJQ1ltSUNodUlEMGdkU2tzSUdRZ1BDQnBJQ1ltSUNocElEMGdaQ2tzSUdnZ1BpQnlJQ1ltSUNoeUlEMGdhQ2tzSUhVZ1BpQnZJQ1ltSUNodklEMGdkU2tzSUdRZ1BpQmhJQ1ltSUNoaElEMGdaQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMXBiaTV6WlhRb2RDd2diaXdnYVNrc0lIUm9hWE11YldGNExuTmxkQ2h5TENCdkxDQmhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVaeWIyMVFiMmx1ZEhNb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWJXRnJaVVZ0Y0hSNUtDazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJR1V1YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1hSb2FYTXVaWGh3WVc1a1FubFFiMmx1ZENobFczUmRLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxRFpXNTBaWEpCYm1SVGFYcGxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlFcHBMbU52Y0hrb2RDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb0xqVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNWpiM0I1S0dVcExuTjFZaWh1S1N3Z2RHaHBjeTV0WVhndVkyOXdlU2hsS1M1aFpHUW9iaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRUMkpxWldOMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dFlXdGxSVzF3ZEhrb0tTd2dkR2hwY3k1bGVIQmhibVJDZVU5aWFtVmpkQ2hsS1RzS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpZ3BMbU52Y0hrb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1WTI5d2VTaGxMbTFwYmlrc0lIUm9hWE11YldGNExtTnZjSGtvWlM1dFlYZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlVWdGNIUjVLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMXBiaTU0SUQwZ2RHaHBjeTV0YVc0dWVTQTlJSFJvYVhNdWJXbHVMbm9nUFNBeElDOGdNQ3dnZEdocGN5NXRZWGd1ZUNBOUlIUm9hWE11YldGNExua2dQU0IwYUdsekxtMWhlQzU2SUQwZ0xURWdMeUF3TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYVhORmJYQjBlU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRZWGd1ZUNBOElIUm9hWE11YldsdUxuZ2dmSHdnZEdocGN5NXRZWGd1ZVNBOElIUm9hWE11YldsdUxua2dmSHdnZEdocGN5NXRZWGd1ZWlBOElIUm9hWE11YldsdUxubzdDaUFnSUNCOUNpQWdJQ0JuWlhSRFpXNTBaWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx6Ulcxd2RIa29LU0EvSUdVdWMyVjBLREFzSURBc0lEQXBJRG9nWlM1aFpHUldaV04wYjNKektIUm9hWE11YldsdUxDQjBhR2x6TG0xaGVDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb0xqVXBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFUybDZaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhWE5GYlhCMGVTZ3BJRDhnWlM1elpYUW9NQ3dnTUN3Z01Da2dPaUJsTG5OMVlsWmxZM1J2Y25Nb2RHaHBjeTV0WVhnc0lIUm9hWE11YldsdUtUc0tJQ0FnSUgwS0lDQWdJR1Y0Y0dGdVpFSjVVRzlwYm5Rb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNXRhVzRvWlNrc0lIUm9hWE11YldGNExtMWhlQ2hsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWNGNHRnVaRUo1Vm1WamRHOXlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1YzNWaUtHVXBMQ0IwYUdsekxtMWhlQzVoWkdRb1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmxlSEJoYm1SQ2VWTmpZV3hoY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldsdUxtRmtaRk5qWVd4aGNpZ3RaU2tzSUhSb2FYTXViV0Y0TG1Ga1pGTmpZV3hoY2lobEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHVjRjR0Z1WkVKNVQySnFaV04wS0dVcElIc0tJQ0FnSUNBZ0lDQmxMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLQ0V4TENBaE1TazdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbWRsYjIxbGRISjVPd29nSUNBZ0lDQWdJSFFnSVQwOUlIWnZhV1FnTUNBbUppQW9kQzVpYjNWdVpHbHVaMEp2ZUNBOVBUMGdiblZzYkNBbUppQjBMbU52YlhCMWRHVkNiM1Z1WkdsdVowSnZlQ2dwTENCaWJ5NWpiM0I1S0hRdVltOTFibVJwYm1kQ2IzZ3BMQ0JpYnk1aGNIQnNlVTFoZEhKcGVEUW9aUzV0WVhSeWFYaFhiM0pzWkNrc0lIUm9hWE11ZFc1cGIyNG9ZbThwS1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdVdVkyaHBiR1J5Wlc0N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNQ3dnY2lBOUlHNHViR1Z1WjNSb095QnBJRHdnY2pzZ2FTc3JLWFJvYVhNdVpYaHdZVzVrUW5sUFltcGxZM1FvYmx0cFhTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIyNTBZV2x1YzFCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnSVNobExuZ2dQQ0IwYUdsekxtMXBiaTU0SUh4OElHVXVlQ0ErSUhSb2FYTXViV0Y0TG5nZ2ZId2daUzU1SUR3Z2RHaHBjeTV0YVc0dWVTQjhmQ0JsTG5rZ1BpQjBhR2x6TG0xaGVDNTVJSHg4SUdVdWVpQThJSFJvYVhNdWJXbHVMbm9nZkh3Z1pTNTZJRDRnZEdocGN5NXRZWGd1ZWlrN0NpQWdJQ0I5Q2lBZ0lDQmpiMjUwWVdsdWMwSnZlQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG5nZ1BEMGdaUzV0YVc0dWVDQW1KaUJsTG0xaGVDNTRJRHc5SUhSb2FYTXViV0Y0TG5nZ0ppWWdkR2hwY3k1dGFXNHVlU0E4UFNCbExtMXBiaTU1SUNZbUlHVXViV0Y0TG5rZ1BEMGdkR2hwY3k1dFlYZ3VlU0FtSmlCMGFHbHpMbTFwYmk1NklEdzlJR1V1YldsdUxub2dKaVlnWlM1dFlYZ3VlaUE4UFNCMGFHbHpMbTFoZUM1Nk93b2dJQ0FnZlFvZ0lDQWdaMlYwVUdGeVlXMWxkR1Z5S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQzV6WlhRb0tHVXVlQ0F0SUhSb2FYTXViV2x1TG5ncElDOGdLSFJvYVhNdWJXRjRMbmdnTFNCMGFHbHpMbTFwYmk1NEtTd2dLR1V1ZVNBdElIUm9hWE11YldsdUxua3BJQzhnS0hSb2FYTXViV0Y0TG5rZ0xTQjBhR2x6TG0xcGJpNTVLU3dnS0dVdWVpQXRJSFJvYVhNdWJXbHVMbm9wSUM4Z0tIUm9hWE11YldGNExub2dMU0IwYUdsekxtMXBiaTU2S1NrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpRbTk0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTaGxMbTFoZUM1NElEd2dkR2hwY3k1dGFXNHVlQ0I4ZkNCbExtMXBiaTU0SUQ0Z2RHaHBjeTV0WVhndWVDQjhmQ0JsTG0xaGVDNTVJRHdnZEdocGN5NXRhVzR1ZVNCOGZDQmxMbTFwYmk1NUlENGdkR2hwY3k1dFlYZ3VlU0I4ZkNCbExtMWhlQzU2SUR3Z2RHaHBjeTV0YVc0dWVpQjhmQ0JsTG0xcGJpNTZJRDRnZEdocGN5NXRZWGd1ZWlrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpVM0JvWlhKbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHRnRjRkJ2YVc1MEtHVXVZMlZ1ZEdWeUxDQkthU2tzSUVwcExtUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tHVXVZMlZ1ZEdWeUtTQThQU0JsTG5KaFpHbDFjeUFxSUdVdWNtRmthWFZ6T3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMxQnNZVzVsS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZEN3Z2Jqc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXViM0p0WVd3dWVDQStJREFnUHlBb2RDQTlJR1V1Ym05eWJXRnNMbmdnS2lCMGFHbHpMbTFwYmk1NExDQnVJRDBnWlM1dWIzSnRZV3d1ZUNBcUlIUm9hWE11YldGNExuZ3BJRG9nS0hRZ1BTQmxMbTV2Y20xaGJDNTRJQ29nZEdocGN5NXRZWGd1ZUN3Z2JpQTlJR1V1Ym05eWJXRnNMbmdnS2lCMGFHbHpMbTFwYmk1NEtTd2daUzV1YjNKdFlXd3VlU0ErSURBZ1B5QW9kQ0FyUFNCbExtNXZjbTFoYkM1NUlDb2dkR2hwY3k1dGFXNHVlU3dnYmlBclBTQmxMbTV2Y20xaGJDNTVJQ29nZEdocGN5NXRZWGd1ZVNrZ09pQW9kQ0FyUFNCbExtNXZjbTFoYkM1NUlDb2dkR2hwY3k1dFlYZ3VlU3dnYmlBclBTQmxMbTV2Y20xaGJDNTVJQ29nZEdocGN5NXRhVzR1ZVNrc0lHVXVibTl5YldGc0xub2dQaUF3SUQ4Z0tIUWdLejBnWlM1dWIzSnRZV3d1ZWlBcUlIUm9hWE11YldsdUxub3NJRzRnS3owZ1pTNXViM0p0WVd3dWVpQXFJSFJvYVhNdWJXRjRMbm9wSURvZ0tIUWdLejBnWlM1dWIzSnRZV3d1ZWlBcUlIUm9hWE11YldGNExub3NJRzRnS3owZ1pTNXViM0p0WVd3dWVpQXFJSFJvYVhNdWJXbHVMbm9wTENCMElEdzlJQzFsTG1OdmJuTjBZVzUwSUNZbUlHNGdQajBnTFdVdVkyOXVjM1JoYm5RN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpWSEpwWVc1bmJHVW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selJXMXdkSGtvS1NrZ2NtVjBkWEp1SUNFeE93b2dJQ0FnSUNBZ0lIUm9hWE11WjJWMFEyVnVkR1Z5S0ZscEtTd2dWM0l1YzNWaVZtVmpkRzl5Y3loMGFHbHpMbTFoZUN3Z1dXa3BMQ0J1YVM1emRXSldaV04wYjNKektHVXVZU3dnV1drcExDQnBhUzV6ZFdKV1pXTjBiM0p6S0dVdVlpd2dXV2twTENCeWFTNXpkV0pXWldOMGIzSnpLR1V1WXl3Z1dXa3BMQ0IxYmk1emRXSldaV04wYjNKektHbHBMQ0J1YVNrc0lHUnVMbk4xWWxabFkzUnZjbk1vY21rc0lHbHBLU3dnVUc0dWMzVmlWbVZqZEc5eWN5aHVhU3dnY21rcE93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRkVzR1ZWl3S0lDQWdJQ0FnSUNBZ0lDQWdkVzR1ZVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xXUnVMbm9zQ2lBZ0lDQWdJQ0FnSUNBZ0lHUnVMbmtzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxUWJpNTZMQW9nSUNBZ0lDQWdJQ0FnSUNCUWJpNTVMQW9nSUNBZ0lDQWdJQ0FnSUNCMWJpNTZMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0ZFc0dWVDd0tJQ0FnSUNBZ0lDQWdJQ0FnWkc0dWVpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMV1J1TG5nc0NpQWdJQ0FnSUNBZ0lDQWdJRkJ1TG5vc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMVFiaTU0TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRkVzR1ZVN3S0lDQWdJQ0FnSUNBZ0lDQWdkVzR1ZUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xXUnVMbmtzQ2lBZ0lDQWdJQ0FnSUNBZ0lHUnVMbmdzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxUWJpNTVMQW9nSUNBZ0lDQWdJQ0FnSUNCUWJpNTRMQW9nSUNBZ0lDQWdJQ0FnSUNBd0NpQWdJQ0FnSUNBZ1hUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0lYZHZLSFFzSUc1cExDQnBhU3dnY21rc0lGZHlLU0I4ZkNBb2RDQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNUW9nSUNBZ0lDQWdJRjBzSUNGM2J5aDBMQ0J1YVN3Z2FXa3NJSEpwTENCWGNpa3BJRDhnSVRFZ09pQW9jWEl1WTNKdmMzTldaV04wYjNKektIVnVMQ0JrYmlrc0lIUWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lIRnlMbmdzQ2lBZ0lDQWdJQ0FnSUNBZ0lIRnlMbmtzQ2lBZ0lDQWdJQ0FnSUNBZ0lIRnlMbm9LSUNBZ0lDQWdJQ0JkTENCM2J5aDBMQ0J1YVN3Z2FXa3NJSEpwTENCWGNpa3BPd29nSUNBZ2ZRb2dJQ0FnWTJ4aGJYQlFiMmx1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1WTI5d2VTaGxLUzVqYkdGdGNDaDBhR2x6TG0xcGJpd2dkR2hwY3k1dFlYZ3BPd29nSUNBZ2ZRb2dJQ0FnWkdsemRHRnVZMlZVYjFCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnU21rdVkyOXdlU2hsS1M1amJHRnRjQ2gwYUdsekxtMXBiaXdnZEdocGN5NXRZWGdwTG5OMVlpaGxLUzVzWlc1bmRHZ29LVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFSnZkVzVrYVc1blUzQm9aWEpsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSRFpXNTBaWElvWlM1alpXNTBaWElwTENCbExuSmhaR2wxY3lBOUlIUm9hWE11WjJWMFUybDZaU2hLYVNrdWJHVnVaM1JvS0NrZ0tpQXVOU3dnWlRzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbTFoZUNobExtMXBiaWtzSUhSb2FYTXViV0Y0TG0xcGJpaGxMbTFoZUNrc0lIUm9hWE11YVhORmJYQjBlU2dwSUNZbUlIUm9hWE11YldGclpVVnRjSFI1S0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMWJtbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG0xcGJpaGxMbTFwYmlrc0lIUm9hWE11YldGNExtMWhlQ2hsTG0xaGVDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmhjSEJzZVUxaGRISnBlRFFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx6Ulcxd2RIa29LU0EvSUhSb2FYTWdPaUFvSkhSYk1GMHVjMlYwS0hSb2FYTXViV2x1TG5nc0lIUm9hWE11YldsdUxua3NJSFJvYVhNdWJXbHVMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnSkhSYk1WMHVjMlYwS0hSb2FYTXViV2x1TG5nc0lIUm9hWE11YldsdUxua3NJSFJvYVhNdWJXRjRMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnSkhSYk1sMHVjMlYwS0hSb2FYTXViV2x1TG5nc0lIUm9hWE11YldGNExua3NJSFJvYVhNdWJXbHVMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnSkhSYk0xMHVjMlYwS0hSb2FYTXViV2x1TG5nc0lIUm9hWE11YldGNExua3NJSFJvYVhNdWJXRjRMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnSkhSYk5GMHVjMlYwS0hSb2FYTXViV0Y0TG5nc0lIUm9hWE11YldsdUxua3NJSFJvYVhNdWJXbHVMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnSkhSYk5WMHVjMlYwS0hSb2FYTXViV0Y0TG5nc0lIUm9hWE11YldsdUxua3NJSFJvYVhNdWJXRjRMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnSkhSYk5sMHVjMlYwS0hSb2FYTXViV0Y0TG5nc0lIUm9hWE11YldGNExua3NJSFJvYVhNdWJXbHVMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnSkhSYk4xMHVjMlYwS0hSb2FYTXViV0Y0TG5nc0lIUm9hWE11YldGNExua3NJSFJvYVhNdWJXRjRMbm9wTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnZEdocGN5NXpaWFJHY205dFVHOXBiblJ6S0NSMEtTd2dkR2hwY3lrN0NpQWdJQ0I5Q2lBZ0lDQjBjbUZ1YzJ4aGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMXBiaTVoWkdRb1pTa3NJSFJvYVhNdWJXRjRMbUZrWkNobEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHVnhkV0ZzY3lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXViV2x1TG1WeGRXRnNjeWgwYUdsekxtMXBiaWtnSmlZZ1pTNXRZWGd1WlhGMVlXeHpLSFJvYVhNdWJXRjRLVHNLSUNBZ0lIMEtmVHNLVEhRdWNISnZkRzkwZVhCbExtbHpRbTk0TXlBOUlDRXdPd3AyWVhJZ0pIUWdQU0JiQ2lBZ0lDQnVaWGNnVFN3S0lDQWdJRzVsZHlCTkxBb2dJQ0FnYm1WM0lFMHNDaUFnSUNCdVpYY2dUU3dLSUNBZ0lHNWxkeUJOTEFvZ0lDQWdibVYzSUUwc0NpQWdJQ0J1WlhjZ1RTd0tJQ0FnSUc1bGR5Qk5DbDBzSUVwcElEMGdibVYzSUUwc0lHSnZJRDBnYm1WM0lFeDBMQ0J1YVNBOUlHNWxkeUJOTENCcGFTQTlJRzVsZHlCTkxDQnlhU0E5SUc1bGR5Qk5MQ0IxYmlBOUlHNWxkeUJOTENCa2JpQTlJRzVsZHlCTkxDQlFiaUE5SUc1bGR5Qk5MQ0JaYVNBOUlHNWxkeUJOTENCWGNpQTlJRzVsZHlCTkxDQnhjaUE5SUc1bGR5Qk5MQ0JKYmlBOUlHNWxkeUJOT3dwbWRXNWpkR2x2YmlCM2J5aHpMQ0JsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQnZJRDBnY3k1c1pXNW5kR2dnTFNBek95QnlJRHc5SUc4N0lISWdLejBnTXlsN0NpQWdJQ0FnSUNBZ1NXNHVabkp2YlVGeWNtRjVLSE1zSUhJcE93b2dJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2FTNTRJQ29nVFdGMGFDNWhZbk1vU1c0dWVDa2dLeUJwTG5rZ0tpQk5ZWFJvTG1GaWN5aEpiaTU1S1NBcklHa3VlaUFxSUUxaGRHZ3VZV0p6S0VsdUxub3BMQ0JzSUQwZ1pTNWtiM1FvU1c0cExDQmpJRDBnZEM1a2IzUW9TVzRwTENCb0lEMGdiaTVrYjNRb1NXNHBPd29nSUNBZ0lDQWdJR2xtSUNoTllYUm9MbTFoZUNndFRXRjBhQzV0WVhnb2JDd2dZeXdnYUNrc0lFMWhkR2d1YldsdUtHd3NJR01zSUdncEtTQStJR0VwSUhKbGRIVnliaUFoTVRzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlBaE1Ec0tmUXAyWVhJZ1pXWWdQU0J1WlhjZ1RIUXNJSFpzSUQwZ2JtVjNJRTBzSUZoeUlEMGdibVYzSUUwc0lGTnZJRDBnYm1WM0lFMHNJRUZ1SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlHNWxkeUJOTENCMElEMGdMVEVwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVZMlZ1ZEdWeUlEMGdaU3dnZEdocGN5NXlZV1JwZFhNZ1BTQjBPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpaVzUwWlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTV5WVdScGRYTWdQU0IwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVkJ2YVc1MGN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbU5sYm5SbGNqc0tJQ0FnSUNBZ0lDQjBJQ0U5UFNCMmIybGtJREFnUHlCdUxtTnZjSGtvZENrZ09pQmxaaTV6WlhSR2NtOXRVRzlwYm5SektHVXBMbWRsZEVObGJuUmxjaWh1S1RzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCeUlEMGdNQ3dnYnlBOUlHVXViR1Z1WjNSb095QnlJRHdnYnpzZ2Npc3JLV2tnUFNCTllYUm9MbTFoZUNocExDQnVMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLR1ZiY2wwcEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WVdScGRYTWdQU0JOWVhSb0xuTnhjblFvYVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpaVzUwWlhJdVkyOXdlU2hsTG1ObGJuUmxjaWtzSUhSb2FYTXVjbUZrYVhWeklEMGdaUzV5WVdScGRYTXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnBjMFZ0Y0hSNUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KaFpHbDFjeUE4SURBN0NpQWdJQ0I5Q2lBZ0lDQnRZV3RsUlcxd2RIa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyVnVkR1Z5TG5ObGRDZ3dMQ0F3TENBd0tTd2dkR2hwY3k1eVlXUnBkWE1nUFNBdE1Td2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZiblJoYVc1elVHOXBiblFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tIUm9hWE11WTJWdWRHVnlLU0E4UFNCMGFHbHpMbkpoWkdsMWN5QXFJSFJvYVhNdWNtRmthWFZ6T3dvZ0lDQWdmUW9nSUNBZ1pHbHpkR0Z1WTJWVWIxQnZhVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNWthWE4wWVc1alpWUnZLSFJvYVhNdVkyVnVkR1Z5S1NBdElIUm9hWE11Y21Ga2FYVnpPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wYzFOd2FHVnlaU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbkpoWkdsMWN5QXJJR1V1Y21Ga2FYVnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbU5sYm5SbGNpNWthWE4wWVc1alpWUnZVM0YxWVhKbFpDaDBhR2x6TG1ObGJuUmxjaWtnUEQwZ2RDQXFJSFE3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSelFtOTRLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1cGJuUmxjbk5sWTNSelUzQm9aWEpsS0hSb2FYTXBPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wYzFCc1lXNWxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNWhZbk1vWlM1a2FYTjBZVzVqWlZSdlVHOXBiblFvZEdocGN5NWpaVzUwWlhJcEtTQThQU0IwYUdsekxuSmhaR2wxY3pzS0lDQWdJSDBLSUNBZ0lHTnNZVzF3VUc5cGJuUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVqWlc1MFpYSXVaR2x6ZEdGdVkyVlViMU54ZFdGeVpXUW9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1WTI5d2VTaGxLU3dnYmlBK0lIUm9hWE11Y21Ga2FYVnpJQ29nZEdocGN5NXlZV1JwZFhNZ0ppWWdLSFF1YzNWaUtIUm9hWE11WTJWdWRHVnlLUzV1YjNKdFlXeHBlbVVvS1N3Z2RDNXRkV3gwYVhCc2VWTmpZV3hoY2loMGFHbHpMbkpoWkdsMWN5a3VZV1JrS0hSb2FYTXVZMlZ1ZEdWeUtTa3NJSFE3Q2lBZ0lDQjlDaUFnSUNCblpYUkNiM1Z1WkdsdVowSnZlQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhWE5GYlhCMGVTZ3BJRDhnS0dVdWJXRnJaVVZ0Y0hSNUtDa3NJR1VwSURvZ0tHVXVjMlYwS0hSb2FYTXVZMlZ1ZEdWeUxDQjBhR2x6TG1ObGJuUmxjaWtzSUdVdVpYaHdZVzVrUW5sVFkyRnNZWElvZEdocGN5NXlZV1JwZFhNcExDQmxLVHNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUV0YwY21sNE5DaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyVnVkR1Z5TG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnZEdocGN5NXlZV1JwZFhNZ1BTQjBhR2x6TG5KaFpHbDFjeUFxSUdVdVoyVjBUV0Y0VTJOaGJHVlBia0Y0YVhNb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6YkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyVnVkR1Z5TG1Ga1pDaGxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1Y0Y0dGdVpFSjVVRzlwYm5Rb1pTa2dld29nSUNBZ0lDQWdJRk52TG5OMVlsWmxZM1J2Y25Nb1pTd2dkR2hwY3k1alpXNTBaWElwT3dvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVTI4dWJHVnVaM1JvVTNFb0tUc0tJQ0FnSUNBZ0lDQnBaaUFvZENBK0lIUm9hWE11Y21Ga2FYVnpJQ29nZEdocGN5NXlZV1JwZFhNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNGdQU0JOWVhSb0xuTnhjblFvZENrc0lHa2dQU0FvYmlBdElIUm9hWE11Y21Ga2FYVnpLU0FxSUM0MU93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTmxiblJsY2k1aFpHUW9VMjh1YlhWc2RHbHdiSGxUWTJGc1lYSW9hU0F2SUc0cEtTd2dkR2hwY3k1eVlXUnBkWE1nS3owZ2FUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMWJtbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMlZ1ZEdWeUxtVnhkV0ZzY3lobExtTmxiblJsY2lrZ1BUMDlJQ0V3SUQ4Z1dISXVjMlYwS0RBc0lEQXNJREVwTG0xMWJIUnBjR3g1VTJOaGJHRnlLR1V1Y21Ga2FYVnpLU0E2SUZoeUxuTjFZbFpsWTNSdmNuTW9aUzVqWlc1MFpYSXNJSFJvYVhNdVkyVnVkR1Z5S1M1dWIzSnRZV3hwZW1Vb0tTNXRkV3gwYVhCc2VWTmpZV3hoY2lobExuSmhaR2wxY3lrc0lIUm9hWE11Wlhod1lXNWtRbmxRYjJsdWRDaDJiQzVqYjNCNUtHVXVZMlZ1ZEdWeUtTNWhaR1FvV0hJcEtTd2dkR2hwY3k1bGVIQmhibVJDZVZCdmFXNTBLSFpzTG1OdmNIa29aUzVqWlc1MFpYSXBMbk4xWWloWWNpa3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWEYxWVd4ektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVqWlc1MFpYSXVaWEYxWVd4ektIUm9hWE11WTJWdWRHVnlLU0FtSmlCbExuSmhaR2wxY3lBOVBUMGdkR2hwY3k1eVlXUnBkWE03Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRcDlMQ0JxZENBOUlHNWxkeUJOTENCVWJ5QTlJRzVsZHlCTkxDQktjaUE5SUc1bGR5Qk5MQ0JtYmlBOUlHNWxkeUJOTENCRmJ5QTlJRzVsZHlCTkxDQlpjaUE5SUc1bGR5Qk5MQ0JCYnlBOUlHNWxkeUJOTENCRGJpQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1WlhjZ1RTd2dkQ0E5SUc1bGR5Qk5LREFzSURBc0lDMHhLU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXZjbWxuYVc0Z1BTQmxMQ0IwYUdsekxtUnBjbVZqZEdsdmJpQTlJSFE3Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl5YVdkcGJpNWpiM0I1S0dVcExDQjBhR2x6TG1ScGNtVmpkR2x2Ymk1amIzQjVLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIzSnBaMmx1TG1OdmNIa29aUzV2Y21sbmFXNHBMQ0IwYUdsekxtUnBjbVZqZEdsdmJpNWpiM0I1S0dVdVpHbHlaV04wYVc5dUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHRjBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNWpiM0I1S0hSb2FYTXVaR2x5WldOMGFXOXVLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpaGxLUzVoWkdRb2RHaHBjeTV2Y21sbmFXNHBPd29nSUNBZ2ZRb2dJQ0FnYkc5dmEwRjBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWthWEpsWTNScGIyNHVZMjl3ZVNobEtTNXpkV0lvZEdocGN5NXZjbWxuYVc0cExtNXZjbTFoYkdsNlpTZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbVZqWVhOMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmNtbG5hVzR1WTI5d2VTaDBhR2x6TG1GMEtHVXNJR3AwS1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHOXpaWE4wVUc5cGJuUlViMUJ2YVc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMExuTjFZbFpsWTNSdmNuTW9aU3dnZEdocGN5NXZjbWxuYVc0cE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RDNWtiM1FvZEdocGN5NWthWEpsWTNScGIyNHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVJRHdnTUNBL0lIUXVZMjl3ZVNoMGFHbHpMbTl5YVdkcGJpa2dPaUIwTG1OdmNIa29kR2hwY3k1a2FYSmxZM1JwYjI0cExtMTFiSFJwY0d4NVUyTmhiR0Z5S0c0cExtRmtaQ2gwYUdsekxtOXlhV2RwYmlrN0NpQWdJQ0I5Q2lBZ0lDQmthWE4wWVc1alpWUnZVRzlwYm5Rb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5OeGNuUW9kR2hwY3k1a2FYTjBZVzVqWlZOeFZHOVFiMmx1ZENobEtTazdDaUFnSUNCOUNpQWdJQ0JrYVhOMFlXNWpaVk54Vkc5UWIybHVkQ2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCcWRDNXpkV0pXWldOMGIzSnpLR1VzSUhSb2FYTXViM0pwWjJsdUtTNWtiM1FvZEdocGN5NWthWEpsWTNScGIyNHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBJRHdnTUNBL0lIUm9hWE11YjNKcFoybHVMbVJwYzNSaGJtTmxWRzlUY1hWaGNtVmtLR1VwSURvZ0tHcDBMbU52Y0hrb2RHaHBjeTVrYVhKbFkzUnBiMjRwTG0xMWJIUnBjR3g1VTJOaGJHRnlLSFFwTG1Ga1pDaDBhR2x6TG05eWFXZHBiaWtzSUdwMExtUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tHVXBLVHNLSUNBZ0lIMEtJQ0FnSUdScGMzUmhibU5sVTNGVWIxTmxaMjFsYm5Rb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJRlJ2TG1OdmNIa29aU2t1WVdSa0tIUXBMbTExYkhScGNHeDVVMk5oYkdGeUtDNDFLU3dnU25JdVkyOXdlU2gwS1M1emRXSW9aU2t1Ym05eWJXRnNhWHBsS0Nrc0lHWnVMbU52Y0hrb2RHaHBjeTV2Y21sbmFXNHBMbk4xWWloVWJ5azdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQmxMbVJwYzNSaGJtTmxWRzhvZENrZ0tpQXVOU3dnYnlBOUlDMTBhR2x6TG1ScGNtVmpkR2x2Ymk1a2IzUW9TbklwTENCaElEMGdabTR1Wkc5MEtIUm9hWE11WkdseVpXTjBhVzl1S1N3Z2JDQTlJQzFtYmk1a2IzUW9TbklwTENCaklEMGdabTR1YkdWdVozUm9VM0VvS1N3Z2FDQTlJRTFoZEdndVlXSnpLREVnTFNCdklDb2dieWtzSUhVc0lHUXNJR1lzSUcwN0NpQWdJQ0FnSUNBZ2FXWWdLR2dnUGlBd0tTQnBaaUFvZFNBOUlHOGdLaUJzSUMwZ1lTd2daQ0E5SUc4Z0tpQmhJQzBnYkN3Z2JTQTlJSElnS2lCb0xDQjFJRDQ5SURBcElHbG1JQ2hrSUQ0OUlDMXRLU0JwWmlBb1pDQThQU0J0S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNElEMGdNU0F2SUdnN0NpQWdJQ0FnSUNBZ0lDQWdJSFVnS2owZ2VDd2daQ0FxUFNCNExDQm1JRDBnZFNBcUlDaDFJQ3NnYnlBcUlHUWdLeUF5SUNvZ1lTa2dLeUJrSUNvZ0tHOGdLaUIxSUNzZ1pDQXJJRElnS2lCc0tTQXJJR003Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR1FnUFNCeUxDQjFJRDBnVFdGMGFDNXRZWGdvTUN3Z0xTaHZJQ29nWkNBcklHRXBLU3dnWmlBOUlDMTFJQ29nZFNBcklHUWdLaUFvWkNBcklESWdLaUJzS1NBcklHTTdDaUFnSUNBZ0lDQWdaV3h6WlNCa0lEMGdMWElzSUhVZ1BTQk5ZWFJvTG0xaGVDZ3dMQ0F0S0c4Z0tpQmtJQ3NnWVNrcExDQm1JRDBnTFhVZ0tpQjFJQ3NnWkNBcUlDaGtJQ3NnTWlBcUlHd3BJQ3NnWXpzS0lDQWdJQ0FnSUNCbGJITmxJR1FnUEQwZ0xXMGdQeUFvZFNBOUlFMWhkR2d1YldGNEtEQXNJQzBvTFc4Z0tpQnlJQ3NnWVNrcExDQmtJRDBnZFNBK0lEQWdQeUF0Y2lBNklFMWhkR2d1YldsdUtFMWhkR2d1YldGNEtDMXlMQ0F0YkNrc0lISXBMQ0JtSUQwZ0xYVWdLaUIxSUNzZ1pDQXFJQ2hrSUNzZ01pQXFJR3dwSUNzZ1l5a2dPaUJrSUR3OUlHMGdQeUFvZFNBOUlEQXNJR1FnUFNCTllYUm9MbTFwYmloTllYUm9MbTFoZUNndGNpd2dMV3dwTENCeUtTd2daaUE5SUdRZ0tpQW9aQ0FySURJZ0tpQnNLU0FySUdNcElEb2dLSFVnUFNCTllYUm9MbTFoZUNnd0xDQXRLRzhnS2lCeUlDc2dZU2twTENCa0lEMGdkU0ErSURBZ1B5QnlJRG9nVFdGMGFDNXRhVzRvVFdGMGFDNXRZWGdvTFhJc0lDMXNLU3dnY2lrc0lHWWdQU0F0ZFNBcUlIVWdLeUJrSUNvZ0tHUWdLeUF5SUNvZ2JDa2dLeUJqS1RzS0lDQWdJQ0FnSUNCbGJITmxJR1FnUFNCdklENGdNQ0EvSUMxeUlEb2djaXdnZFNBOUlFMWhkR2d1YldGNEtEQXNJQzBvYnlBcUlHUWdLeUJoS1Nrc0lHWWdQU0F0ZFNBcUlIVWdLeUJrSUNvZ0tHUWdLeUF5SUNvZ2JDa2dLeUJqT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1SUNZbUlHNHVZMjl3ZVNoMGFHbHpMbVJwY21WamRHbHZiaWt1YlhWc2RHbHdiSGxUWTJGc1lYSW9kU2t1WVdSa0tIUm9hWE11YjNKcFoybHVLU3dnYVNBbUppQnBMbU52Y0hrb1NuSXBMbTExYkhScGNHeDVVMk5oYkdGeUtHUXBMbUZrWkNoVWJ5a3NJR1k3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSVGNHaGxjbVVvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3AwTG5OMVlsWmxZM1J2Y25Nb1pTNWpaVzUwWlhJc0lIUm9hWE11YjNKcFoybHVLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR3AwTG1SdmRDaDBhR2x6TG1ScGNtVmpkR2x2Ymlrc0lHa2dQU0JxZEM1a2IzUW9hblFwSUMwZ2JpQXFJRzRzSUhJZ1BTQmxMbkpoWkdsMWN5QXFJR1V1Y21Ga2FYVnpPd29nSUNBZ0lDQWdJR2xtSUNocElENGdjaWtnY21WMGRYSnVJRzUxYkd3N0NpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCTllYUm9Mbk54Y25Rb2NpQXRJR2twTENCaElEMGdiaUF0SUc4c0lHd2dQU0J1SUNzZ2J6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1lTQThJREFnSmlZZ2JDQThJREFnUHlCdWRXeHNJRG9nWVNBOElEQWdQeUIwYUdsekxtRjBLR3dzSUhRcElEb2dkR2hwY3k1aGRDaGhMQ0IwS1RzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRITlRjR2hsY21Vb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGMzUmhibU5sVTNGVWIxQnZhVzUwS0dVdVkyVnVkR1Z5S1NBOFBTQmxMbkpoWkdsMWN5QXFJR1V1Y21Ga2FYVnpPd29nSUNBZ2ZRb2dJQ0FnWkdsemRHRnVZMlZVYjFCc1lXNWxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdWJtOXliV0ZzTG1SdmRDaDBhR2x6TG1ScGNtVmpkR2x2YmlrN0NpQWdJQ0FnSUNBZ2FXWWdLSFFnUFQwOUlEQXBJSEpsZEhWeWJpQmxMbVJwYzNSaGJtTmxWRzlRYjJsdWRDaDBhR2x6TG05eWFXZHBiaWtnUFQwOUlEQWdQeUF3SURvZ2JuVnNiRHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJQzBvZEdocGN5NXZjbWxuYVc0dVpHOTBLR1V1Ym05eWJXRnNLU0FySUdVdVkyOXVjM1JoYm5RcElDOGdkRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaUErUFNBd0lEOGdiaUE2SUc1MWJHdzdDaUFnSUNCOUNpQWdJQ0JwYm5SbGNuTmxZM1JRYkdGdVpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbVJwYzNSaGJtTmxWRzlRYkdGdVpTaGxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaUE5UFQwZ2JuVnNiQ0EvSUc1MWJHd2dPaUIwYUdsekxtRjBLRzRzSUhRcE93b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKelpXTjBjMUJzWVc1bEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1V1WkdsemRHRnVZMlZVYjFCdmFXNTBLSFJvYVhNdWIzSnBaMmx1S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENBOVBUMGdNQ0I4ZkNCbExtNXZjbTFoYkM1a2IzUW9kR2hwY3k1a2FYSmxZM1JwYjI0cElDb2dkQ0E4SURBN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUkNiM2dvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUxDQnBMQ0J5TENCdkxDQmhMQ0JzTENCaklEMGdNU0F2SUhSb2FYTXVaR2x5WldOMGFXOXVMbmdzSUdnZ1BTQXhJQzhnZEdocGN5NWthWEpsWTNScGIyNHVlU3dnZFNBOUlERWdMeUIwYUdsekxtUnBjbVZqZEdsdmJpNTZMQ0JrSUQwZ2RHaHBjeTV2Y21sbmFXNDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTWdQajBnTUNBL0lDaHVJRDBnS0dVdWJXbHVMbmdnTFNCa0xuZ3BJQ29nWXl3Z2FTQTlJQ2hsTG0xaGVDNTRJQzBnWkM1NEtTQXFJR01wSURvZ0tHNGdQU0FvWlM1dFlYZ3VlQ0F0SUdRdWVDa2dLaUJqTENCcElEMGdLR1V1YldsdUxuZ2dMU0JrTG5ncElDb2dZeWtzSUdnZ1BqMGdNQ0EvSUNoeUlEMGdLR1V1YldsdUxua2dMU0JrTG5rcElDb2dhQ3dnYnlBOUlDaGxMbTFoZUM1NUlDMGdaQzU1S1NBcUlHZ3BJRG9nS0hJZ1BTQW9aUzV0WVhndWVTQXRJR1F1ZVNrZ0tpQm9MQ0J2SUQwZ0tHVXViV2x1TG5rZ0xTQmtMbmtwSUNvZ2FDa3NJRzRnUGlCdklIeDhJSElnUGlCcElIeDhJQ2dvY2lBK0lHNGdmSHdnYmlBaFBUMGdiaWtnSmlZZ0tHNGdQU0J5S1N3Z0tHOGdQQ0JwSUh4OElHa2dJVDA5SUdrcElDWW1JQ2hwSUQwZ2J5a3NJSFVnUGowZ01DQS9JQ2hoSUQwZ0tHVXViV2x1TG5vZ0xTQmtMbm9wSUNvZ2RTd2diQ0E5SUNobExtMWhlQzU2SUMwZ1pDNTZLU0FxSUhVcElEb2dLR0VnUFNBb1pTNXRZWGd1ZWlBdElHUXVlaWtnS2lCMUxDQnNJRDBnS0dVdWJXbHVMbm9nTFNCa0xub3BJQ29nZFNrc0lHNGdQaUJzSUh4OElHRWdQaUJwS1NCOGZDQW9LR0VnUGlCdUlIeDhJRzRnSVQwOUlHNHBJQ1ltSUNodUlEMGdZU2tzSUNoc0lEd2dhU0I4ZkNCcElDRTlQU0JwS1NBbUppQW9hU0E5SUd3cExDQnBJRHdnTUNrZ1B5QnVkV3hzSURvZ2RHaHBjeTVoZENodUlENDlJREFnUHlCdUlEb2dhU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpRbTk0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYm5SbGNuTmxZM1JDYjNnb1pTd2dhblFwSUNFOVBTQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMFZISnBZVzVuYkdVb1pTd2dkQ3dnYml3Z2FTd2djaWtnZXdvZ0lDQWdJQ0FnSUVWdkxuTjFZbFpsWTNSdmNuTW9kQ3dnWlNrc0lGbHlMbk4xWWxabFkzUnZjbk1vYml3Z1pTa3NJRUZ2TG1OeWIzTnpWbVZqZEc5eWN5aEZieXdnV1hJcE93b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RHaHBjeTVrYVhKbFkzUnBiMjR1Wkc5MEtFRnZLU3dnWVRzS0lDQWdJQ0FnSUNCcFppQW9ieUErSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa3BJSEpsZEhWeWJpQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQmhJRDBnTVRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHOGdQQ0F3S1NCaElEMGdMVEVzSUc4Z1BTQXRienNLSUNBZ0lDQWdJQ0JsYkhObElISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ0lDQWdJR1p1TG5OMVlsWmxZM1J2Y25Nb2RHaHBjeTV2Y21sbmFXNHNJR1VwT3dvZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnWVNBcUlIUm9hWE11WkdseVpXTjBhVzl1TG1SdmRDaFpjaTVqY205emMxWmxZM1J2Y25Nb1ptNHNJRmx5S1NrN0NpQWdJQ0FnSUNBZ2FXWWdLR3dnUENBd0tTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJR0VnS2lCMGFHbHpMbVJwY21WamRHbHZiaTVrYjNRb1JXOHVZM0p2YzNNb1ptNHBLVHNLSUNBZ0lDQWdJQ0JwWmlBb1l5QThJREFnZkh3Z2JDQXJJR01nUGlCdktTQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJQzFoSUNvZ1ptNHVaRzkwS0VGdktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2FDQThJREFnUHlCdWRXeHNJRG9nZEdocGN5NWhkQ2hvSUM4Z2J5d2djaWs3Q2lBZ0lDQjlDaUFnSUNCaGNIQnNlVTFoZEhKcGVEUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtOXlhV2RwYmk1aGNIQnNlVTFoZEhKcGVEUW9aU2tzSUhSb2FYTXVaR2x5WldOMGFXOXVMblJ5WVc1elptOXliVVJwY21WamRHbHZiaWhsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWIzSnBaMmx1TG1WeGRXRnNjeWgwYUdsekxtOXlhV2RwYmlrZ0ppWWdaUzVrYVhKbFkzUnBiMjR1WlhGMVlXeHpLSFJvYVhNdVpHbHlaV04wYVc5dUtUc0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1OdmNIa29kR2hwY3lrN0NpQWdJQ0I5Q24wc0lIQmxJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5SeklEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeENpQWdJQ0FnSUNBZ1hTd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREFnSmlZZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVUV0YwY21sNE5Eb2dkR2hsSUdOdmJuTjBjblZqZEc5eUlHNXZJR3h2Ym1kbGNpQnlaV0ZrY3lCaGNtZDFiV1Z1ZEhNdUlIVnpaU0F1YzJWMEtDa2dhVzV6ZEdWaFpDNGlLVHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwTENCdUxDQnBMQ0J5TENCdkxDQmhMQ0JzTENCakxDQm9MQ0IxTENCa0xDQm1MQ0J0TENCNExDQjJLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHY2dQU0IwYUdsekxtVnNaVzFsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbld6QmRJRDBnWlN3Z1oxczBYU0E5SUhRc0lHZGJPRjBnUFNCdUxDQm5XekV5WFNBOUlHa3NJR2RiTVYwZ1BTQnlMQ0JuV3pWZElEMGdieXdnWjFzNVhTQTlJR0VzSUdkYk1UTmRJRDBnYkN3Z1oxc3lYU0E5SUdNc0lHZGJObDBnUFNCb0xDQm5XekV3WFNBOUlIVXNJR2RiTVRSZElEMGdaQ3dnWjFzelhTQTlJR1lzSUdkYk4xMGdQU0J0TENCbld6RXhYU0E5SUhnc0lHZGJNVFZkSUQwZ2Rpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHbGtaVzUwYVhSNUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDZ3hMQ0F3TENBd0xDQXdMQ0F3TENBeExDQXdMQ0F3TENBd0xDQXdMQ0F4TENBd0xDQXdMQ0F3TENBd0xDQXhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnY0dVb0tTNW1jbTl0UVhKeVlYa29kR2hwY3k1bGJHVnRaVzUwY3lrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11Wld4bGJXVnVkSE1zSUc0Z1BTQmxMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBXekJkSUQwZ2Jsc3dYU3dnZEZzeFhTQTlJRzViTVYwc0lIUmJNbDBnUFNCdVd6SmRMQ0IwV3pOZElEMGdibHN6WFN3Z2RGczBYU0E5SUc1Yk5GMHNJSFJiTlYwZ1BTQnVXelZkTENCMFd6WmRJRDBnYmxzMlhTd2dkRnMzWFNBOUlHNWJOMTBzSUhSYk9GMGdQU0J1V3poZExDQjBXemxkSUQwZ2JsczVYU3dnZEZzeE1GMGdQU0J1V3pFd1hTd2dkRnN4TVYwZ1BTQnVXekV4WFN3Z2RGc3hNbDBnUFNCdVd6RXlYU3dnZEZzeE0xMGdQU0J1V3pFelhTd2dkRnN4TkYwZ1BTQnVXekUwWFN3Z2RGc3hOVjBnUFNCdVd6RTFYU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hsUWIzTnBkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1Wc1pXMWxiblJ6TENCdUlEMGdaUzVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRnN4TWwwZ1BTQnVXekV5WFN3Z2RGc3hNMTBnUFNCdVd6RXpYU3dnZEZzeE5GMGdQU0J1V3pFMFhTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxTllYUnlhWGd6S0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtIUmJNRjBzSUhSYk0xMHNJSFJiTmwwc0lEQXNJSFJiTVYwc0lIUmJORjBzSUhSYk4xMHNJREFzSUhSYk1sMHNJSFJiTlYwc0lIUmJPRjBzSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWGgwY21GamRFSmhjMmx6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1elpYUkdjbTl0VFdGMGNtbDRRMjlzZFcxdUtIUm9hWE1zSURBcExDQjBMbk5sZEVaeWIyMU5ZWFJ5YVhoRGIyeDFiVzRvZEdocGN5d2dNU2tzSUc0dWMyVjBSbkp2YlUxaGRISnBlRU52YkhWdGJpaDBhR2x6TENBeUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhhMlZDWVhOcGN5aGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtHVXVlQ3dnZEM1NExDQnVMbmdzSURBc0lHVXVlU3dnZEM1NUxDQnVMbmtzSURBc0lHVXVlaXdnZEM1NkxDQnVMbm9zSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWGgwY21GamRGSnZkR0YwYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lHNGdQU0JsTG1Wc1pXMWxiblJ6TENCcElEMGdNU0F2SUhOcExuTmxkRVp5YjIxTllYUnlhWGhEYjJ4MWJXNG9aU3dnTUNrdWJHVnVaM1JvS0Nrc0lISWdQU0F4SUM4Z2Mya3VjMlYwUm5KdmJVMWhkSEpwZUVOdmJIVnRiaWhsTENBeEtTNXNaVzVuZEdnb0tTd2dieUE5SURFZ0x5QnphUzV6WlhSR2NtOXRUV0YwY21sNFEyOXNkVzF1S0dVc0lESXBMbXhsYm1kMGFDZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBXekJkSUQwZ2Jsc3dYU0FxSUdrc0lIUmJNVjBnUFNCdVd6RmRJQ29nYVN3Z2RGc3lYU0E5SUc1Yk1sMGdLaUJwTENCMFd6TmRJRDBnTUN3Z2RGczBYU0E5SUc1Yk5GMGdLaUJ5TENCMFd6VmRJRDBnYmxzMVhTQXFJSElzSUhSYk5sMGdQU0J1V3paZElDb2djaXdnZEZzM1hTQTlJREFzSUhSYk9GMGdQU0J1V3poZElDb2dieXdnZEZzNVhTQTlJRzViT1YwZ0tpQnZMQ0IwV3pFd1hTQTlJRzViTVRCZElDb2dieXdnZEZzeE1WMGdQU0F3TENCMFd6RXlYU0E5SURBc0lIUmJNVE5kSUQwZ01Dd2dkRnN4TkYwZ1BTQXdMQ0IwV3pFMVhTQTlJREVzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVd0bFVtOTBZWFJwYjI1R2NtOXRSWFZzWlhJb1pTa2dld29nSUNBZ0lDQWdJR1VnSmlZZ1pTNXBjMFYxYkdWeUlIeDhJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGsxaGRISnBlRFE2SUM1dFlXdGxVbTkwWVhScGIyNUdjbTl0UlhWc1pYSW9LU0J1YjNjZ1pYaHdaV04wY3lCaElFVjFiR1Z5SUhKdmRHRjBhVzl1SUhKaGRHaGxjaUIwYUdGdUlHRWdWbVZqZEc5eU15QmhibVFnYjNKa1pYSXVJaWs3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtVnNaVzFsYm5SekxDQnVJRDBnWlM1NExDQnBJRDBnWlM1NUxDQnlJRDBnWlM1NkxDQnZJRDBnVFdGMGFDNWpiM01vYmlrc0lHRWdQU0JOWVhSb0xuTnBiaWh1S1N3Z2JDQTlJRTFoZEdndVkyOXpLR2twTENCaklEMGdUV0YwYUM1emFXNG9hU2tzSUdnZ1BTQk5ZWFJvTG1OdmN5aHlLU3dnZFNBOUlFMWhkR2d1YzJsdUtISXBPd29nSUNBZ0lDQWdJR2xtSUNobExtOXlaR1Z5SUQwOVBTQWlXRmxhSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJRzhnS2lCb0xDQm1JRDBnYnlBcUlIVXNJRzBnUFNCaElDb2dhQ3dnZUNBOUlHRWdLaUIxT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBXekJkSUQwZ2JDQXFJR2dzSUhSYk5GMGdQU0F0YkNBcUlIVXNJSFJiT0YwZ1BTQmpMQ0IwV3pGZElEMGdaaUFySUcwZ0tpQmpMQ0IwV3pWZElEMGdaQ0F0SUhnZ0tpQmpMQ0IwV3psZElEMGdMV0VnS2lCc0xDQjBXekpkSUQwZ2VDQXRJR1FnS2lCakxDQjBXelpkSUQwZ2JTQXJJR1lnS2lCakxDQjBXekV3WFNBOUlHOGdLaUJzT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pTNXZjbVJsY2lBOVBUMGdJbGxZV2lJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JzSUNvZ2FDd2daaUE5SUd3Z0tpQjFMQ0J0SUQwZ1l5QXFJR2dzSUhnZ1BTQmpJQ29nZFRzS0lDQWdJQ0FnSUNBZ0lDQWdkRnN3WFNBOUlHUWdLeUI0SUNvZ1lTd2dkRnMwWFNBOUlHMGdLaUJoSUMwZ1ppd2dkRnM0WFNBOUlHOGdLaUJqTENCMFd6RmRJRDBnYnlBcUlIVXNJSFJiTlYwZ1BTQnZJQ29nYUN3Z2RGczVYU0E5SUMxaExDQjBXekpkSUQwZ1ppQXFJR0VnTFNCdExDQjBXelpkSUQwZ2VDQXJJR1FnS2lCaExDQjBXekV3WFNBOUlHOGdLaUJzT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pTNXZjbVJsY2lBOVBUMGdJbHBZV1NJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JzSUNvZ2FDd2daaUE5SUd3Z0tpQjFMQ0J0SUQwZ1l5QXFJR2dzSUhnZ1BTQmpJQ29nZFRzS0lDQWdJQ0FnSUNBZ0lDQWdkRnN3WFNBOUlHUWdMU0I0SUNvZ1lTd2dkRnMwWFNBOUlDMXZJQ29nZFN3Z2RGczRYU0E5SUcwZ0t5Qm1JQ29nWVN3Z2RGc3hYU0E5SUdZZ0t5QnRJQ29nWVN3Z2RGczFYU0E5SUc4Z0tpQm9MQ0IwV3psZElEMGdlQ0F0SUdRZ0tpQmhMQ0IwV3pKZElEMGdMVzhnS2lCakxDQjBXelpkSUQwZ1lTd2dkRnN4TUYwZ1BTQnZJQ29nYkRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHVXViM0prWlhJZ1BUMDlJQ0phV1ZnaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnYnlBcUlHZ3NJR1lnUFNCdklDb2dkU3dnYlNBOUlHRWdLaUJvTENCNElEMGdZU0FxSUhVN0NpQWdJQ0FnSUNBZ0lDQWdJSFJiTUYwZ1BTQnNJQ29nYUN3Z2RGczBYU0E5SUcwZ0tpQmpJQzBnWml3Z2RGczRYU0E5SUdRZ0tpQmpJQ3NnZUN3Z2RGc3hYU0E5SUd3Z0tpQjFMQ0IwV3pWZElEMGdlQ0FxSUdNZ0t5QmtMQ0IwV3psZElEMGdaaUFxSUdNZ0xTQnRMQ0IwV3pKZElEMGdMV01zSUhSYk5sMGdQU0JoSUNvZ2JDd2dkRnN4TUYwZ1BTQnZJQ29nYkRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHVXViM0prWlhJZ1BUMDlJQ0paV2xnaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnYnlBcUlHd3NJR1lnUFNCdklDb2dZeXdnYlNBOUlHRWdLaUJzTENCNElEMGdZU0FxSUdNN0NpQWdJQ0FnSUNBZ0lDQWdJSFJiTUYwZ1BTQnNJQ29nYUN3Z2RGczBYU0E5SUhnZ0xTQmtJQ29nZFN3Z2RGczRYU0E5SUcwZ0tpQjFJQ3NnWml3Z2RGc3hYU0E5SUhVc0lIUmJOVjBnUFNCdklDb2dhQ3dnZEZzNVhTQTlJQzFoSUNvZ2FDd2dkRnN5WFNBOUlDMWpJQ29nYUN3Z2RGczJYU0E5SUdZZ0tpQjFJQ3NnYlN3Z2RGc3hNRjBnUFNCa0lDMGdlQ0FxSUhVN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGxMbTl5WkdWeUlEMDlQU0FpV0ZwWklpa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUc4Z0tpQnNMQ0JtSUQwZ2J5QXFJR01zSUcwZ1BTQmhJQ29nYkN3Z2VDQTlJR0VnS2lCak93b2dJQ0FnSUNBZ0lDQWdJQ0IwV3pCZElEMGdiQ0FxSUdnc0lIUmJORjBnUFNBdGRTd2dkRnM0WFNBOUlHTWdLaUJvTENCMFd6RmRJRDBnWkNBcUlIVWdLeUI0TENCMFd6VmRJRDBnYnlBcUlHZ3NJSFJiT1YwZ1BTQm1JQ29nZFNBdElHMHNJSFJiTWwwZ1BTQnRJQ29nZFNBdElHWXNJSFJiTmwwZ1BTQmhJQ29nYUN3Z2RGc3hNRjBnUFNCNElDb2dkU0FySUdRN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMFd6TmRJRDBnTUN3Z2RGczNYU0E5SURBc0lIUmJNVEZkSUQwZ01Dd2dkRnN4TWwwZ1BTQXdMQ0IwV3pFelhTQTlJREFzSUhSYk1UUmRJRDBnTUN3Z2RGc3hOVjBnUFNBeExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JXRnJaVkp2ZEdGMGFXOXVSbkp2YlZGMVlYUmxjbTVwYjI0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJYQnZjMlVvZEdZc0lHVXNJRzVtS1RzS0lDQWdJSDBLSUNBZ0lHeHZiMnRCZENobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbVZzWlcxbGJuUnpPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQlRkQzV6ZFdKV1pXTjBiM0p6S0dVc0lIUXBMQ0JUZEM1c1pXNW5kR2hUY1NncElEMDlQU0F3SUNZbUlDaFRkQzU2SUQwZ01Ta3NJRk4wTG01dmNtMWhiR2w2WlNncExDQndiaTVqY205emMxWmxZM1J2Y25Nb2Jpd2dVM1FwTENCd2JpNXNaVzVuZEdoVGNTZ3BJRDA5UFNBd0lDWW1JQ2hOWVhSb0xtRmljeWh1TG5vcElEMDlQU0F4SUQ4Z1UzUXVlQ0FyUFNBeFpTMDBJRG9nVTNRdWVpQXJQU0F4WlMwMExDQlRkQzV1YjNKdFlXeHBlbVVvS1N3Z2NHNHVZM0p2YzNOV1pXTjBiM0p6S0c0c0lGTjBLU2tzSUhCdUxtNXZjbTFoYkdsNlpTZ3BMQ0JhY2k1amNtOXpjMVpsWTNSdmNuTW9VM1FzSUhCdUtTd2dhVnN3WFNBOUlIQnVMbmdzSUdsYk5GMGdQU0JhY2k1NExDQnBXemhkSUQwZ1UzUXVlQ3dnYVZzeFhTQTlJSEJ1TG5rc0lHbGJOVjBnUFNCYWNpNTVMQ0JwV3psZElEMGdVM1F1ZVN3Z2FWc3lYU0E5SUhCdUxub3NJR2xiTmwwZ1BTQmFjaTU2TENCcFd6RXdYU0E5SUZOMExub3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRkV3gwYVhCc2VTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0lUMDlJSFp2YVdRZ01DQS9JQ2hqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGsxaGRISnBlRFE2SUM1dGRXeDBhWEJzZVNncElHNXZkeUJ2Ym14NUlHRmpZMlZ3ZEhNZ2IyNWxJR0Z5WjNWdFpXNTBMaUJWYzJVZ0xtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb0lHRXNJR0lnS1NCcGJuTjBaV0ZrTGlJcExDQjBhR2x6TG0xMWJIUnBjR3g1VFdGMGNtbGpaWE1vWlN3Z2RDa3BJRG9nZEdocGN5NXRkV3gwYVhCc2VVMWhkSEpwWTJWektIUm9hWE1zSUdVcE93b2dJQ0FnZlFvZ0lDQWdjSEpsYlhWc2RHbHdiSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScGNHeDVUV0YwY21salpYTW9aU3dnZEdocGN5azdDaUFnSUNCOUNpQWdJQ0J0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVaV3hsYldWdWRITXNJR2tnUFNCMExtVnNaVzFsYm5SekxDQnlJRDBnZEdocGN5NWxiR1Z0Wlc1MGN5d2dieUE5SUc1Yk1GMHNJR0VnUFNCdVd6UmRMQ0JzSUQwZ2JsczRYU3dnWXlBOUlHNWJNVEpkTENCb0lEMGdibHN4WFN3Z2RTQTlJRzViTlYwc0lHUWdQU0J1V3psZExDQm1JRDBnYmxzeE0xMHNJRzBnUFNCdVd6SmRMQ0I0SUQwZ2JsczJYU3dnZGlBOUlHNWJNVEJkTENCbklEMGdibHN4TkYwc0lIQWdQU0J1V3pOZExDQmZJRDBnYmxzM1hTd2dlU0E5SUc1Yk1URmRMQ0JpSUQwZ2Jsc3hOVjBzSUVFZ1BTQnBXekJkTENCTUlEMGdhVnMwWFN3Z1NTQTlJR2xiT0Ywc0lHc2dQU0JwV3pFeVhTd2dRaUE5SUdsYk1WMHNJRkFnUFNCcFd6VmRMQ0IzSUQwZ2FWczVYU3dnUlNBOUlHbGJNVE5kTENCRUlEMGdhVnN5WFN3Z1ZTQTlJR2xiTmwwc0lFWWdQU0JwV3pFd1hTd2dUeUE5SUdsYk1UUmRMQ0J1WlNBOUlHbGJNMTBzSUdObElEMGdhVnMzWFN3Z1ZpQTlJR2xiTVRGZExDQlhJRDBnYVZzeE5WMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmJNRjBnUFNCdklDb2dRU0FySUdFZ0tpQkNJQ3NnYkNBcUlFUWdLeUJqSUNvZ2JtVXNJSEpiTkYwZ1BTQnZJQ29nVENBcklHRWdLaUJRSUNzZ2JDQXFJRlVnS3lCaklDb2dZMlVzSUhKYk9GMGdQU0J2SUNvZ1NTQXJJR0VnS2lCM0lDc2diQ0FxSUVZZ0t5QmpJQ29nVml3Z2Nsc3hNbDBnUFNCdklDb2dheUFySUdFZ0tpQkZJQ3NnYkNBcUlFOGdLeUJqSUNvZ1Z5d2djbHN4WFNBOUlHZ2dLaUJCSUNzZ2RTQXFJRUlnS3lCa0lDb2dSQ0FySUdZZ0tpQnVaU3dnY2xzMVhTQTlJR2dnS2lCTUlDc2dkU0FxSUZBZ0t5QmtJQ29nVlNBcklHWWdLaUJqWlN3Z2NsczVYU0E5SUdnZ0tpQkpJQ3NnZFNBcUlIY2dLeUJrSUNvZ1JpQXJJR1lnS2lCV0xDQnlXekV6WFNBOUlHZ2dLaUJySUNzZ2RTQXFJRVVnS3lCa0lDb2dUeUFySUdZZ0tpQlhMQ0J5V3pKZElEMGdiU0FxSUVFZ0t5QjRJQ29nUWlBcklIWWdLaUJFSUNzZ1p5QXFJRzVsTENCeVd6WmRJRDBnYlNBcUlFd2dLeUI0SUNvZ1VDQXJJSFlnS2lCVklDc2daeUFxSUdObExDQnlXekV3WFNBOUlHMGdLaUJKSUNzZ2VDQXFJSGNnS3lCMklDb2dSaUFySUdjZ0tpQldMQ0J5V3pFMFhTQTlJRzBnS2lCcklDc2dlQ0FxSUVVZ0t5QjJJQ29nVHlBcklHY2dLaUJYTENCeVd6TmRJRDBnY0NBcUlFRWdLeUJmSUNvZ1FpQXJJSGtnS2lCRUlDc2dZaUFxSUc1bExDQnlXemRkSUQwZ2NDQXFJRXdnS3lCZklDb2dVQ0FySUhrZ0tpQlZJQ3NnWWlBcUlHTmxMQ0J5V3pFeFhTQTlJSEFnS2lCSklDc2dYeUFxSUhjZ0t5QjVJQ29nUmlBcklHSWdLaUJXTENCeVd6RTFYU0E5SUhBZ0tpQnJJQ3NnWHlBcUlFVWdLeUI1SUNvZ1R5QXJJR0lnS2lCWExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JYVnNkR2x3YkhsVFkyRnNZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRnN3WFNBcVBTQmxMQ0IwV3pSZElDbzlJR1VzSUhSYk9GMGdLajBnWlN3Z2RGc3hNbDBnS2owZ1pTd2dkRnN4WFNBcVBTQmxMQ0IwV3pWZElDbzlJR1VzSUhSYk9WMGdLajBnWlN3Z2RGc3hNMTBnS2owZ1pTd2dkRnN5WFNBcVBTQmxMQ0IwV3paZElDbzlJR1VzSUhSYk1UQmRJQ285SUdVc0lIUmJNVFJkSUNvOUlHVXNJSFJiTTEwZ0tqMGdaU3dnZEZzM1hTQXFQU0JsTENCMFd6RXhYU0FxUFNCbExDQjBXekUxWFNBcVBTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaR1YwWlhKdGFXNWhiblFvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0IwSUQwZ1pWc3dYU3dnYmlBOUlHVmJORjBzSUdrZ1BTQmxXemhkTENCeUlEMGdaVnN4TWwwc0lHOGdQU0JsV3pGZExDQmhJRDBnWlZzMVhTd2diQ0E5SUdWYk9WMHNJR01nUFNCbFd6RXpYU3dnYUNBOUlHVmJNbDBzSUhVZ1BTQmxXelpkTENCa0lEMGdaVnN4TUYwc0lHWWdQU0JsV3pFMFhTd2diU0E5SUdWYk0xMHNJSGdnUFNCbFd6ZGRMQ0IySUQwZ1pWc3hNVjBzSUdjZ1BTQmxXekUxWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlNBcUlDZ3JjaUFxSUd3Z0tpQjFJQzBnYVNBcUlHTWdLaUIxSUMwZ2NpQXFJR0VnS2lCa0lDc2diaUFxSUdNZ0tpQmtJQ3NnYVNBcUlHRWdLaUJtSUMwZ2JpQXFJR3dnS2lCbUtTQXJJSGdnS2lBb0szUWdLaUJzSUNvZ1ppQXRJSFFnS2lCaklDb2daQ0FySUhJZ0tpQnZJQ29nWkNBdElHa2dLaUJ2SUNvZ1ppQXJJR2tnS2lCaklDb2dhQ0F0SUhJZ0tpQnNJQ29nYUNrZ0t5QjJJQ29nS0N0MElDb2dZeUFxSUhVZ0xTQjBJQ29nWVNBcUlHWWdMU0J5SUNvZ2J5QXFJSFVnS3lCdUlDb2dieUFxSUdZZ0t5QnlJQ29nWVNBcUlHZ2dMU0J1SUNvZ1l5QXFJR2dwSUNzZ1p5QXFJQ2d0YVNBcUlHRWdLaUJvSUMwZ2RDQXFJR3dnS2lCMUlDc2dkQ0FxSUdFZ0tpQmtJQ3NnYVNBcUlHOGdLaUIxSUMwZ2JpQXFJRzhnS2lCa0lDc2diaUFxSUd3Z0tpQm9LVHNLSUNBZ0lIMEtJQ0FnSUhSeVlXNXpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11Wld4bGJXVnVkSE1zSUhRN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ1BTQmxXekZkTENCbFd6RmRJRDBnWlZzMFhTd2daVnMwWFNBOUlIUXNJSFFnUFNCbFd6SmRMQ0JsV3pKZElEMGdaVnM0WFN3Z1pWczRYU0E5SUhRc0lIUWdQU0JsV3paZExDQmxXelpkSUQwZ1pWczVYU3dnWlZzNVhTQTlJSFFzSUhRZ1BTQmxXek5kTENCbFd6TmRJRDBnWlZzeE1sMHNJR1ZiTVRKZElEMGdkQ3dnZENBOUlHVmJOMTBzSUdWYk4xMGdQU0JsV3pFelhTd2daVnN4TTEwZ1BTQjBMQ0IwSUQwZ1pWc3hNVjBzSUdWYk1URmRJRDBnWlZzeE5GMHNJR1ZiTVRSZElEMGdkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZCdmMybDBhVzl1S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVaV3hsYldWdWRITTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVhWE5XWldOMGIzSXpJRDhnS0dsYk1USmRJRDBnWlM1NExDQnBXekV6WFNBOUlHVXVlU3dnYVZzeE5GMGdQU0JsTG5vcElEb2dLR2xiTVRKZElEMGdaU3dnYVZzeE0xMGdQU0IwTENCcFd6RTBYU0E5SUc0cExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2FXNTJaWEowS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVsYkdWdFpXNTBjeXdnZENBOUlHVmJNRjBzSUc0Z1BTQmxXekZkTENCcElEMGdaVnN5WFN3Z2NpQTlJR1ZiTTEwc0lHOGdQU0JsV3pSZExDQmhJRDBnWlZzMVhTd2diQ0E5SUdWYk5sMHNJR01nUFNCbFd6ZGRMQ0JvSUQwZ1pWczRYU3dnZFNBOUlHVmJPVjBzSUdRZ1BTQmxXekV3WFN3Z1ppQTlJR1ZiTVRGZExDQnRJRDBnWlZzeE1sMHNJSGdnUFNCbFd6RXpYU3dnZGlBOUlHVmJNVFJkTENCbklEMGdaVnN4TlYwc0lIQWdQU0IxSUNvZ2RpQXFJR01nTFNCNElDb2daQ0FxSUdNZ0t5QjRJQ29nYkNBcUlHWWdMU0JoSUNvZ2RpQXFJR1lnTFNCMUlDb2diQ0FxSUdjZ0t5QmhJQ29nWkNBcUlHY3NJRjhnUFNCdElDb2daQ0FxSUdNZ0xTQm9JQ29nZGlBcUlHTWdMU0J0SUNvZ2JDQXFJR1lnS3lCdklDb2dkaUFxSUdZZ0t5Qm9JQ29nYkNBcUlHY2dMU0J2SUNvZ1pDQXFJR2NzSUhrZ1BTQm9JQ29nZUNBcUlHTWdMU0J0SUNvZ2RTQXFJR01nS3lCdElDb2dZU0FxSUdZZ0xTQnZJQ29nZUNBcUlHWWdMU0JvSUNvZ1lTQXFJR2NnS3lCdklDb2dkU0FxSUdjc0lHSWdQU0J0SUNvZ2RTQXFJR3dnTFNCb0lDb2dlQ0FxSUd3Z0xTQnRJQ29nWVNBcUlHUWdLeUJ2SUNvZ2VDQXFJR1FnS3lCb0lDb2dZU0FxSUhZZ0xTQnZJQ29nZFNBcUlIWXNJRUVnUFNCMElDb2djQ0FySUc0Z0tpQmZJQ3NnYVNBcUlIa2dLeUJ5SUNvZ1lqc0tJQ0FnSUNBZ0lDQnBaaUFvUVNBOVBUMGdNQ2tnY21WMGRYSnVJSFJvYVhNdWMyVjBLREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJREFwT3dvZ0lDQWdJQ0FnSUd4bGRDQk1JRDBnTVNBdklFRTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVmJNRjBnUFNCd0lDb2dUQ3dnWlZzeFhTQTlJQ2g0SUNvZ1pDQXFJSElnTFNCMUlDb2dkaUFxSUhJZ0xTQjRJQ29nYVNBcUlHWWdLeUJ1SUNvZ2RpQXFJR1lnS3lCMUlDb2dhU0FxSUdjZ0xTQnVJQ29nWkNBcUlHY3BJQ29nVEN3Z1pWc3lYU0E5SUNoaElDb2dkaUFxSUhJZ0xTQjRJQ29nYkNBcUlISWdLeUI0SUNvZ2FTQXFJR01nTFNCdUlDb2dkaUFxSUdNZ0xTQmhJQ29nYVNBcUlHY2dLeUJ1SUNvZ2JDQXFJR2NwSUNvZ1RDd2daVnN6WFNBOUlDaDFJQ29nYkNBcUlISWdMU0JoSUNvZ1pDQXFJSElnTFNCMUlDb2dhU0FxSUdNZ0t5QnVJQ29nWkNBcUlHTWdLeUJoSUNvZ2FTQXFJR1lnTFNCdUlDb2diQ0FxSUdZcElDb2dUQ3dnWlZzMFhTQTlJRjhnS2lCTUxDQmxXelZkSUQwZ0tHZ2dLaUIySUNvZ2NpQXRJRzBnS2lCa0lDb2djaUFySUcwZ0tpQnBJQ29nWmlBdElIUWdLaUIySUNvZ1ppQXRJR2dnS2lCcElDb2daeUFySUhRZ0tpQmtJQ29nWnlrZ0tpQk1MQ0JsV3paZElEMGdLRzBnS2lCc0lDb2djaUF0SUc4Z0tpQjJJQ29nY2lBdElHMGdLaUJwSUNvZ1l5QXJJSFFnS2lCMklDb2dZeUFySUc4Z0tpQnBJQ29nWnlBdElIUWdLaUJzSUNvZ1p5a2dLaUJNTENCbFd6ZGRJRDBnS0c4Z0tpQmtJQ29nY2lBdElHZ2dLaUJzSUNvZ2NpQXJJR2dnS2lCcElDb2dZeUF0SUhRZ0tpQmtJQ29nWXlBdElHOGdLaUJwSUNvZ1ppQXJJSFFnS2lCc0lDb2daaWtnS2lCTUxDQmxXemhkSUQwZ2VTQXFJRXdzSUdWYk9WMGdQU0FvYlNBcUlIVWdLaUJ5SUMwZ2FDQXFJSGdnS2lCeUlDMGdiU0FxSUc0Z0tpQm1JQ3NnZENBcUlIZ2dLaUJtSUNzZ2FDQXFJRzRnS2lCbklDMGdkQ0FxSUhVZ0tpQm5LU0FxSUV3c0lHVmJNVEJkSUQwZ0tHOGdLaUI0SUNvZ2NpQXRJRzBnS2lCaElDb2djaUFySUcwZ0tpQnVJQ29nWXlBdElIUWdLaUI0SUNvZ1l5QXRJRzhnS2lCdUlDb2daeUFySUhRZ0tpQmhJQ29nWnlrZ0tpQk1MQ0JsV3pFeFhTQTlJQ2hvSUNvZ1lTQXFJSElnTFNCdklDb2dkU0FxSUhJZ0xTQm9JQ29nYmlBcUlHTWdLeUIwSUNvZ2RTQXFJR01nS3lCdklDb2diaUFxSUdZZ0xTQjBJQ29nWVNBcUlHWXBJQ29nVEN3Z1pWc3hNbDBnUFNCaUlDb2dUQ3dnWlZzeE0xMGdQU0FvYUNBcUlIZ2dLaUJwSUMwZ2JTQXFJSFVnS2lCcElDc2diU0FxSUc0Z0tpQmtJQzBnZENBcUlIZ2dLaUJrSUMwZ2FDQXFJRzRnS2lCMklDc2dkQ0FxSUhVZ0tpQjJLU0FxSUV3c0lHVmJNVFJkSUQwZ0tHMGdLaUJoSUNvZ2FTQXRJRzhnS2lCNElDb2dhU0F0SUcwZ0tpQnVJQ29nYkNBcklIUWdLaUI0SUNvZ2JDQXJJRzhnS2lCdUlDb2dkaUF0SUhRZ0tpQmhJQ29nZGlrZ0tpQk1MQ0JsV3pFMVhTQTlJQ2h2SUNvZ2RTQXFJR2tnTFNCb0lDb2dZU0FxSUdrZ0t5Qm9JQ29nYmlBcUlHd2dMU0IwSUNvZ2RTQXFJR3dnTFNCdklDb2diaUFxSUdRZ0t5QjBJQ29nWVNBcUlHUXBJQ29nVEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOallXeGxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVaV3hsYldWdWRITXNJRzRnUFNCbExuZ3NJR2tnUFNCbExua3NJSElnUFNCbExubzdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmJNRjBnS2owZ2Jpd2dkRnMwWFNBcVBTQnBMQ0IwV3poZElDbzlJSElzSUhSYk1WMGdLajBnYml3Z2RGczFYU0FxUFNCcExDQjBXemxkSUNvOUlISXNJSFJiTWwwZ0tqMGdiaXdnZEZzMlhTQXFQU0JwTENCMFd6RXdYU0FxUFNCeUxDQjBXek5kSUNvOUlHNHNJSFJiTjEwZ0tqMGdhU3dnZEZzeE1WMGdLajBnY2l3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFMWhlRk5qWVd4bFQyNUJlR2x6S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVsYkdWdFpXNTBjeXdnZENBOUlHVmJNRjBnS2lCbFd6QmRJQ3NnWlZzeFhTQXFJR1ZiTVYwZ0t5QmxXekpkSUNvZ1pWc3lYU3dnYmlBOUlHVmJORjBnS2lCbFd6UmRJQ3NnWlZzMVhTQXFJR1ZiTlYwZ0t5QmxXelpkSUNvZ1pWczJYU3dnYVNBOUlHVmJPRjBnS2lCbFd6aGRJQ3NnWlZzNVhTQXFJR1ZiT1YwZ0t5QmxXekV3WFNBcUlHVmJNVEJkT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xuTnhjblFvVFdGMGFDNXRZWGdvZEN3Z2Jpd2dhU2twT3dvZ0lDQWdmUW9nSUNBZ2JXRnJaVlJ5WVc1emJHRjBhVzl1S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFFvTVN3Z01Dd2dNQ3dnWlN3Z01Dd2dNU3dnTUN3Z2RDd2dNQ3dnTUN3Z01Td2diaXdnTUN3Z01Dd2dNQ3dnTVNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdFlXdGxVbTkwWVhScGIyNVlLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUUxaGRHZ3VZMjl6S0dVcExDQnVJRDBnVFdGMGFDNXphVzRvWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0RFc0lEQXNJREFzSURBc0lEQXNJSFFzSUMxdUxDQXdMQ0F3TENCdUxDQjBMQ0F3TENBd0xDQXdMQ0F3TENBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhhMlZTYjNSaGRHbHZibGtvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1RXRjBhQzVqYjNNb1pTa3NJRzRnUFNCTllYUm9Mbk5wYmlobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhRb2RDd2dNQ3dnYml3Z01Dd2dNQ3dnTVN3Z01Dd2dNQ3dnTFc0c0lEQXNJSFFzSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlZKdmRHRjBhVzl1V2lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQk5ZWFJvTG1OdmN5aGxLU3dnYmlBOUlFMWhkR2d1YzJsdUtHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRDaDBMQ0F0Yml3Z01Dd2dNQ3dnYml3Z2RDd2dNQ3dnTUN3Z01Dd2dNQ3dnTVN3Z01Dd2dNQ3dnTUN3Z01Dd2dNU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J0WVd0bFVtOTBZWFJwYjI1QmVHbHpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlFMWhkR2d1WTI5ektIUXBMQ0JwSUQwZ1RXRjBhQzV6YVc0b2RDa3NJSElnUFNBeElDMGdiaXdnYnlBOUlHVXVlQ3dnWVNBOUlHVXVlU3dnYkNBOUlHVXVlaXdnWXlBOUlISWdLaUJ2TENCb0lEMGdjaUFxSUdFN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwS0dNZ0tpQnZJQ3NnYml3Z1l5QXFJR0VnTFNCcElDb2diQ3dnWXlBcUlHd2dLeUJwSUNvZ1lTd2dNQ3dnWXlBcUlHRWdLeUJwSUNvZ2JDd2dhQ0FxSUdFZ0t5QnVMQ0JvSUNvZ2JDQXRJR2tnS2lCdkxDQXdMQ0JqSUNvZ2JDQXRJR2tnS2lCaExDQm9JQ29nYkNBcklHa2dLaUJ2TENCeUlDb2diQ0FxSUd3Z0t5QnVMQ0F3TENBd0xDQXdMQ0F3TENBeEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMWhhMlZUWTJGc1pTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMEtHVXNJREFzSURBc0lEQXNJREFzSUhRc0lEQXNJREFzSURBc0lEQXNJRzRzSURBc0lEQXNJREFzSURBc0lERXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlZOb1pXRnlLR1VzSUhRc0lHNHNJR2tzSUhJc0lHOHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUW9NU3dnYml3Z2Npd2dNQ3dnWlN3Z01Td2dieXdnTUN3Z2RDd2dhU3dnTVN3Z01Dd2dNQ3dnTUN3Z01Dd2dNU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjIxd2IzTmxLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVpXeGxiV1Z1ZEhNc0lISWdQU0IwTGw5NExDQnZJRDBnZEM1ZmVTd2dZU0E5SUhRdVgzb3NJR3dnUFNCMExsOTNMQ0JqSUQwZ2NpQXJJSElzSUdnZ1BTQnZJQ3NnYnl3Z2RTQTlJR0VnS3lCaExDQmtJRDBnY2lBcUlHTXNJR1lnUFNCeUlDb2dhQ3dnYlNBOUlISWdLaUIxTENCNElEMGdieUFxSUdnc0lIWWdQU0J2SUNvZ2RTd2daeUE5SUdFZ0tpQjFMQ0J3SUQwZ2JDQXFJR01zSUY4Z1BTQnNJQ29nYUN3Z2VTQTlJR3dnS2lCMUxDQmlJRDBnYmk1NExDQkJJRDBnYmk1NUxDQk1JRDBnYmk1Nk93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcFd6QmRJRDBnS0RFZ0xTQW9lQ0FySUdjcEtTQXFJR0lzSUdsYk1WMGdQU0FvWmlBcklIa3BJQ29nWWl3Z2FWc3lYU0E5SUNodElDMGdYeWtnS2lCaUxDQnBXek5kSUQwZ01Dd2dhVnMwWFNBOUlDaG1JQzBnZVNrZ0tpQkJMQ0JwV3pWZElEMGdLREVnTFNBb1pDQXJJR2NwS1NBcUlFRXNJR2xiTmwwZ1BTQW9kaUFySUhBcElDb2dRU3dnYVZzM1hTQTlJREFzSUdsYk9GMGdQU0FvYlNBcklGOHBJQ29nVEN3Z2FWczVYU0E5SUNoMklDMGdjQ2tnS2lCTUxDQnBXekV3WFNBOUlDZ3hJQzBnS0dRZ0t5QjRLU2tnS2lCTUxDQnBXekV4WFNBOUlEQXNJR2xiTVRKZElEMGdaUzU0TENCcFd6RXpYU0E5SUdVdWVTd2dhVnN4TkYwZ1BTQmxMbm9zSUdsYk1UVmRJRDBnTVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdSbFkyOXRjRzl6WlNobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0J5SUQwZ2Mya3VjMlYwS0dsYk1GMHNJR2xiTVYwc0lHbGJNbDBwTG14bGJtZDBhQ2dwTENCdklEMGdjMmt1YzJWMEtHbGJORjBzSUdsYk5WMHNJR2xiTmwwcExteGxibWQwYUNncExDQmhJRDBnYzJrdWMyVjBLR2xiT0Ywc0lHbGJPVjBzSUdsYk1UQmRLUzVzWlc1bmRHZ29LVHNLSUNBZ0lDQWdJQ0IwYUdsekxtUmxkR1Z5YldsdVlXNTBLQ2tnUENBd0lDWW1JQ2h5SUQwZ0xYSXBMQ0JsTG5nZ1BTQnBXekV5WFN3Z1pTNTVJRDBnYVZzeE0xMHNJR1V1ZWlBOUlHbGJNVFJkTENCSmRDNWpiM0I1S0hSb2FYTXBPd29nSUNBZ0lDQWdJR3hsZENCaklEMGdNU0F2SUhJc0lHZ2dQU0F4SUM4Z2J5d2dkU0E5SURFZ0x5QmhPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQkpkQzVsYkdWdFpXNTBjMXN3WFNBcVBTQmpMQ0JKZEM1bGJHVnRaVzUwYzFzeFhTQXFQU0JqTENCSmRDNWxiR1Z0Wlc1MGMxc3lYU0FxUFNCakxDQkpkQzVsYkdWdFpXNTBjMXMwWFNBcVBTQm9MQ0JKZEM1bGJHVnRaVzUwYzFzMVhTQXFQU0JvTENCSmRDNWxiR1Z0Wlc1MGMxczJYU0FxUFNCb0xDQkpkQzVsYkdWdFpXNTBjMXM0WFNBcVBTQjFMQ0JKZEM1bGJHVnRaVzUwYzFzNVhTQXFQU0IxTENCSmRDNWxiR1Z0Wlc1MGMxc3hNRjBnS2owZ2RTd2dkQzV6WlhSR2NtOXRVbTkwWVhScGIyNU5ZWFJ5YVhnb1NYUXBMQ0J1TG5nZ1BTQnlMQ0J1TG5rZ1BTQnZMQ0J1TG5vZ1BTQmhMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdiV0ZyWlZCbGNuTndaV04wYVhabEtHVXNJSFFzSUc0c0lHa3NJSElzSUc4cElIc0tJQ0FnSUNBZ0lDQnZJRDA5UFNCMmIybGtJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNU5ZWFJ5YVhnME9pQXViV0ZyWlZCbGNuTndaV04wYVhabEtDa2dhR0Z6SUdKbFpXNGdjbVZrWldacGJtVmtJR0Z1WkNCb1lYTWdZU0J1WlhjZ2MybG5ibUYwZFhKbExpQlFiR1ZoYzJVZ1kyaGxZMnNnZEdobElHUnZZM011SWlrN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMGFHbHpMbVZzWlcxbGJuUnpMQ0JzSUQwZ01pQXFJSElnTHlBb2RDQXRJR1VwTENCaklEMGdNaUFxSUhJZ0x5QW9iaUF0SUdrcExDQm9JRDBnS0hRZ0t5QmxLU0F2SUNoMElDMGdaU2tzSUhVZ1BTQW9iaUFySUdrcElDOGdLRzRnTFNCcEtTd2daQ0E5SUMwb2J5QXJJSElwSUM4Z0tHOGdMU0J5S1N3Z1ppQTlJQzB5SUNvZ2J5QXFJSElnTHlBb2J5QXRJSElwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJoV3pCZElEMGdiQ3dnWVZzMFhTQTlJREFzSUdGYk9GMGdQU0JvTENCaFd6RXlYU0E5SURBc0lHRmJNVjBnUFNBd0xDQmhXelZkSUQwZ1l5d2dZVnM1WFNBOUlIVXNJR0ZiTVROZElEMGdNQ3dnWVZzeVhTQTlJREFzSUdGYk5sMGdQU0F3TENCaFd6RXdYU0E5SUdRc0lHRmJNVFJkSUQwZ1ppd2dZVnN6WFNBOUlEQXNJR0ZiTjEwZ1BTQXdMQ0JoV3pFeFhTQTlJQzB4TENCaFd6RTFYU0E5SURBc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdFlXdGxUM0owYUc5bmNtRndhR2xqS0dVc0lIUXNJRzRzSUdrc0lISXNJRzhwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUhSb2FYTXVaV3hsYldWdWRITXNJR3dnUFNBeElDOGdLSFFnTFNCbEtTd2dZeUE5SURFZ0x5QW9iaUF0SUdrcExDQm9JRDBnTVNBdklDaHZJQzBnY2lrc0lIVWdQU0FvZENBcklHVXBJQ29nYkN3Z1pDQTlJQ2h1SUNzZ2FTa2dLaUJqTENCbUlEMGdLRzhnS3lCeUtTQXFJR2c3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZiTUYwZ1BTQXlJQ29nYkN3Z1lWczBYU0E5SURBc0lHRmJPRjBnUFNBd0xDQmhXekV5WFNBOUlDMTFMQ0JoV3pGZElEMGdNQ3dnWVZzMVhTQTlJRElnS2lCakxDQmhXemxkSUQwZ01Dd2dZVnN4TTEwZ1BTQXRaQ3dnWVZzeVhTQTlJREFzSUdGYk5sMGdQU0F3TENCaFd6RXdYU0E5SUMweUlDb2dhQ3dnWVZzeE5GMGdQU0F0Wml3Z1lWc3pYU0E5SURBc0lHRmJOMTBnUFNBd0xDQmhXekV4WFNBOUlEQXNJR0ZiTVRWZElEMGdNU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR1Z4ZFdGc2N5aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtVnNaVzFsYm5SekxDQnVJRDBnWlM1bGJHVnRaVzUwY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z01UWTdJR2tyS3lscFppQW9kRnRwWFNBaFBUMGdibHRwWFNrZ2NtVjBkWEp1SUNFeE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaE1Ec0tJQ0FnSUgwS0lDQWdJR1p5YjIxQmNuSmhlU2hsTENCMElEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQTdJRzRnUENBeE5qc2diaXNyS1hSb2FYTXVaV3hsYldWdWRITmJibDBnUFNCbFcyNGdLeUIwWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2UVhKeVlYa29aU0E5SUZ0ZExDQjBJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVnQwWFNBOUlHNWJNRjBzSUdWYmRDQXJJREZkSUQwZ2Jsc3hYU3dnWlZ0MElDc2dNbDBnUFNCdVd6SmRMQ0JsVzNRZ0t5QXpYU0E5SUc1Yk0xMHNJR1ZiZENBcklEUmRJRDBnYmxzMFhTd2daVnQwSUNzZ05WMGdQU0J1V3pWZExDQmxXM1FnS3lBMlhTQTlJRzViTmwwc0lHVmJkQ0FySURkZElEMGdibHMzWFN3Z1pWdDBJQ3NnT0YwZ1BTQnVXemhkTENCbFczUWdLeUE1WFNBOUlHNWJPVjBzSUdWYmRDQXJJREV3WFNBOUlHNWJNVEJkTENCbFczUWdLeUF4TVYwZ1BTQnVXekV4WFN3Z1pWdDBJQ3NnTVRKZElEMGdibHN4TWwwc0lHVmJkQ0FySURFelhTQTlJRzViTVROZExDQmxXM1FnS3lBeE5GMGdQU0J1V3pFMFhTd2daVnQwSUNzZ01UVmRJRDBnYmxzeE5WMHNJR1U3Q2lBZ0lDQjlDbjA3Q25CbExuQnliM1J2ZEhsd1pTNXBjMDFoZEhKcGVEUWdQU0FoTURzS2RtRnlJSE5wSUQwZ2JtVjNJRTBzSUVsMElEMGdibVYzSUhCbExDQjBaaUE5SUc1bGR5Qk5LREFzSURBc0lEQXBMQ0J1WmlBOUlHNWxkeUJOS0RFc0lERXNJREVwTENCd2JpQTlJRzVsZHlCTkxDQmFjaUE5SUc1bGR5Qk5MQ0JUZENBOUlHNWxkeUJOTENCZmJDQTlJRzVsZHlCd1pTd2dUV3dnUFNCdVpYY2daM1FzSUZwdUlEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREFzSUhRZ1BTQXdMQ0J1SUQwZ01Dd2dhU0E5SUZwdUxrUmxabUYxYkhSUGNtUmxjaWw3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZlQ0E5SUdVc0lIUm9hWE11WDNrZ1BTQjBMQ0IwYUdsekxsOTZJRDBnYml3Z2RHaHBjeTVmYjNKa1pYSWdQU0JwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBJSGdvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2c3Q2lBZ0lDQjlDaUFnSUNCelpYUWdlQ2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmZUNBOUlHVXNJSFJvYVhNdVgyOXVRMmhoYm1kbFEyRnNiR0poWTJzb0tUc0tJQ0FnSUgwS0lDQWdJR2RsZENCNUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5NU93b2dJQ0FnZlFvZ0lDQWdjMlYwSUhrb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgza2dQU0JsTENCMGFHbHpMbDl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUWdlaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZlanNLSUNBZ0lIMEtJQ0FnSUhObGRDQjZLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDk2SUQwZ1pTd2dkR2hwY3k1ZmIyNURhR0Z1WjJWRFlXeHNZbUZqYXlncE93b2dJQ0FnZlFvZ0lDQWdaMlYwSUc5eVpHVnlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXZjbVJsY2pzS0lDQWdJSDBLSUNBZ0lITmxkQ0J2Y21SbGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZiM0prWlhJZ1BTQmxMQ0IwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcktDazdDaUFnSUNCOUNpQWdJQ0J6WlhRb1pTd2dkQ3dnYml3Z2FTQTlJSFJvYVhNdVgyOXlaR1Z5S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM2dnUFNCbExDQjBhR2x6TGw5NUlEMGdkQ3dnZEdocGN5NWZlaUE5SUc0c0lIUm9hWE11WDI5eVpHVnlJRDBnYVN3Z2RHaHBjeTVmYjI1RGFHRnVaMlZEWVd4c1ltRmpheWdwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0hSb2FYTXVYM2dzSUhSb2FYTXVYM2tzSUhSb2FYTXVYM29zSUhSb2FYTXVYMjl5WkdWeUtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5NElEMGdaUzVmZUN3Z2RHaHBjeTVmZVNBOUlHVXVYM2tzSUhSb2FYTXVYM29nUFNCbExsOTZMQ0IwYUdsekxsOXZjbVJsY2lBOUlHVXVYMjl5WkdWeUxDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0VW05MFlYUnBiMjVOWVhSeWFYZ29aU3dnZENBOUlIUm9hWE11WDI5eVpHVnlMQ0J1SUQwZ0lUQXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJR1V1Wld4bGJXVnVkSE1zSUhJZ1BTQnBXekJkTENCdklEMGdhVnMwWFN3Z1lTQTlJR2xiT0Ywc0lHd2dQU0JwV3pGZExDQmpJRDBnYVZzMVhTd2dhQ0E5SUdsYk9WMHNJSFVnUFNCcFd6SmRMQ0JrSUQwZ2FWczJYU3dnWmlBOUlHbGJNVEJkT3dvZ0lDQWdJQ0FnSUhOM2FYUmphQ2gwS1hzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVdGbGFJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgza2dQU0JOWVhSb0xtRnphVzRvYlhRb1lTd2dMVEVzSURFcEtTd2dUV0YwYUM1aFluTW9ZU2tnUENBdU9UazVPVGs1T1NBL0lDaDBhR2x6TGw5NElEMGdUV0YwYUM1aGRHRnVNaWd0YUN3Z1ppa3NJSFJvYVhNdVgzb2dQU0JOWVhSb0xtRjBZVzR5S0MxdkxDQnlLU2tnT2lBb2RHaHBjeTVmZUNBOUlFMWhkR2d1WVhSaGJqSW9aQ3dnWXlrc0lIUm9hWE11WDNvZ1BTQXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlpXRm9pT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZlQ0E5SUUxaGRHZ3VZWE5wYmlndGJYUW9hQ3dnTFRFc0lERXBLU3dnVFdGMGFDNWhZbk1vYUNrZ1BDQXVPVGs1T1RrNU9TQS9JQ2gwYUdsekxsOTVJRDBnVFdGMGFDNWhkR0Z1TWloaExDQm1LU3dnZEdocGN5NWZlaUE5SUUxaGRHZ3VZWFJoYmpJb2JDd2dZeWtwSURvZ0tIUm9hWE11WDNrZ1BTQk5ZWFJvTG1GMFlXNHlLQzExTENCeUtTd2dkR2hwY3k1ZmVpQTlJREFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbHBZV1NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDk0SUQwZ1RXRjBhQzVoYzJsdUtHMTBLR1FzSUMweExDQXhLU2tzSUUxaGRHZ3VZV0p6S0dRcElEd2dMams1T1RrNU9Ua2dQeUFvZEdocGN5NWZlU0E5SUUxaGRHZ3VZWFJoYmpJb0xYVXNJR1lwTENCMGFHbHpMbDk2SUQwZ1RXRjBhQzVoZEdGdU1pZ3RieXdnWXlrcElEb2dLSFJvYVhNdVgza2dQU0F3TENCMGFHbHpMbDk2SUQwZ1RXRjBhQzVoZEdGdU1paHNMQ0J5S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpV2xsWUlqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNrZ1BTQk5ZWFJvTG1GemFXNG9MVzEwS0hVc0lDMHhMQ0F4S1Nrc0lFMWhkR2d1WVdKektIVXBJRHdnTGprNU9UazVPVGtnUHlBb2RHaHBjeTVmZUNBOUlFMWhkR2d1WVhSaGJqSW9aQ3dnWmlrc0lIUm9hWE11WDNvZ1BTQk5ZWFJvTG1GMFlXNHlLR3dzSUhJcEtTQTZJQ2gwYUdsekxsOTRJRDBnTUN3Z2RHaHBjeTVmZWlBOUlFMWhkR2d1WVhSaGJqSW9MVzhzSUdNcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKWldsZ2lPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmVpQTlJRTFoZEdndVlYTnBiaWh0ZENoc0xDQXRNU3dnTVNrcExDQk5ZWFJvTG1GaWN5aHNLU0E4SUM0NU9UazVPVGs1SUQ4Z0tIUm9hWE11WDNnZ1BTQk5ZWFJvTG1GMFlXNHlLQzFvTENCaktTd2dkR2hwY3k1ZmVTQTlJRTFoZEdndVlYUmhiaklvTFhVc0lISXBLU0E2SUNoMGFHbHpMbDk0SUQwZ01Dd2dkR2hwY3k1ZmVTQTlJRTFoZEdndVlYUmhiaklvWVN3Z1ppa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lsaGFXU0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTZJRDBnVFdGMGFDNWhjMmx1S0MxdGRDaHZMQ0F0TVN3Z01Ta3BMQ0JOWVhSb0xtRmljeWh2S1NBOElDNDVPVGs1T1RrNUlEOGdLSFJvYVhNdVgzZ2dQU0JOWVhSb0xtRjBZVzR5S0dRc0lHTXBMQ0IwYUdsekxsOTVJRDBnVFdGMGFDNWhkR0Z1TWloaExDQnlLU2tnT2lBb2RHaHBjeTVmZUNBOUlFMWhkR2d1WVhSaGJqSW9MV2dzSUdZcExDQjBhR2x6TGw5NUlEMGdNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UlhWc1pYSTZJQzV6WlhSR2NtOXRVbTkwWVhScGIyNU5ZWFJ5YVhnb0tTQmxibU52ZFc1MFpYSmxaQ0JoYmlCMWJtdHViM2R1SUc5eVpHVnlPaUFpSUNzZ2RDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dmNtUmxjaUE5SUhRc0lHNGdQVDA5SUNFd0lDWW1JSFJvYVhNdVgyOXVRMmhoYm1kbFEyRnNiR0poWTJzb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxUmRXRjBaWEp1YVc5dUtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyd3ViV0ZyWlZKdmRHRjBhVzl1Um5KdmJWRjFZWFJsY201cGIyNG9aU2tzSUhSb2FYTXVjMlYwUm5KdmJWSnZkR0YwYVc5dVRXRjBjbWw0S0Y5c0xDQjBMQ0J1S1RzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxV1pXTjBiM0l6S0dVc0lIUWdQU0IwYUdsekxsOXZjbVJsY2lrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZENobExuZ3NJR1V1ZVN3Z1pTNTZMQ0IwS1RzS0lDQWdJSDBLSUNBZ0lISmxiM0prWlhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQk5iQzV6WlhSR2NtOXRSWFZzWlhJb2RHaHBjeWtzSUhSb2FYTXVjMlYwUm5KdmJWRjFZWFJsY201cGIyNG9UV3dzSUdVcE93b2dJQ0FnZlFvZ0lDQWdaWEYxWVd4ektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVmZUNBOVBUMGdkR2hwY3k1ZmVDQW1KaUJsTGw5NUlEMDlQU0IwYUdsekxsOTVJQ1ltSUdVdVgzb2dQVDA5SUhSb2FYTXVYM29nSmlZZ1pTNWZiM0prWlhJZ1BUMDlJSFJvYVhNdVgyOXlaR1Z5T3dvZ0lDQWdmUW9nSUNBZ1puSnZiVUZ5Y21GNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmVDQTlJR1ZiTUYwc0lIUm9hWE11WDNrZ1BTQmxXekZkTENCMGFHbHpMbDk2SUQwZ1pWc3lYU3dnWlZzelhTQWhQVDBnZG05cFpDQXdJQ1ltSUNoMGFHbHpMbDl2Y21SbGNpQTlJR1ZiTTEwcExDQjBhR2x6TGw5dmJrTm9ZVzVuWlVOaGJHeGlZV05yS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwRnljbUY1S0dVZ1BTQmJYU3dnZENBOUlEQXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVnQwWFNBOUlIUm9hWE11WDNnc0lHVmJkQ0FySURGZElEMGdkR2hwY3k1ZmVTd2daVnQwSUNzZ01sMGdQU0IwYUdsekxsOTZMQ0JsVzNRZ0t5QXpYU0E5SUhSb2FYTXVYMjl5WkdWeUxDQmxPd29nSUNBZ2ZRb2dJQ0FnZEc5V1pXTjBiM0l6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTQS9JR1V1YzJWMEtIUm9hWE11WDNnc0lIUm9hWE11WDNrc0lIUm9hWE11WDNvcElEb2dibVYzSUUwb2RHaHBjeTVmZUN3Z2RHaHBjeTVmZVN3Z2RHaHBjeTVmZWlrN0NpQWdJQ0I5Q2lBZ0lDQmZiMjVEYUdGdVoyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXZia05vWVc1blpVTmhiR3hpWVdOcklEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJRjl2YmtOb1lXNW5aVU5oYkd4aVlXTnJLQ2tnZTMwS2ZUc0tXbTR1Y0hKdmRHOTBlWEJsTG1selJYVnNaWElnUFNBaE1Ec0tXbTR1UkdWbVlYVnNkRTl5WkdWeUlEMGdJbGhaV2lJN0NscHVMbEp2ZEdGMGFXOXVUM0prWlhKeklEMGdXd29nSUNBZ0lsaFpXaUlzQ2lBZ0lDQWlXVnBZSWl3S0lDQWdJQ0phV0ZraUxBb2dJQ0FnSWxoYVdTSXNDaUFnSUNBaVdWaGFJaXdLSUNBZ0lDSmFXVmdpQ2wwN0NuWmhjaUJLY3lBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhOcklEMGdNVHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRZWE5ySUQwZ0tERWdQRHdnWlNCOElEQXBJRDQrUGlBd093b2dJQ0FnZlFvZ0lDQWdaVzVoWW14bEtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhjMnNnZkQwZ01TQThQQ0JsSUh3Z01Ec0tJQ0FnSUgwS0lDQWdJR1Z1WVdKc1pVRnNiQ2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTFoYzJzZ1BTQXRNVHNLSUNBZ0lIMEtJQ0FnSUhSdloyZHNaU2hsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhOcklGNDlJREVnUER3Z1pTQjhJREE3Q2lBZ0lDQjlDaUFnSUNCa2FYTmhZbXhsS0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG0xaGMyc2dKajBnZmlneElEdzhJR1VnZkNBd0tUc0tJQ0FnSUgwS0lDQWdJR1JwYzJGaWJHVkJiR3dvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhOcklEMGdNRHNLSUNBZ0lIMEtJQ0FnSUhSbGMzUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUFvZEdocGN5NXRZWE5ySUNZZ1pTNXRZWE5yS1NBaFBUMGdNRHNLSUNBZ0lIMEtJQ0FnSUdselJXNWhZbXhsWkNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaDBhR2x6TG0xaGMyc2dKaUFvTVNBOFBDQmxJSHdnTUNrcElDRTlQU0F3T3dvZ0lDQWdmUXA5TENCeVppQTlJREFzSUdKc0lEMGdibVYzSUUwc0lHOXBJRDBnYm1WM0lHZDBMQ0JSZENBOUlHNWxkeUJ3WlN3Z0pISWdQU0J1WlhjZ1RTd2dXbWtnUFNCdVpYY2dUU3dnYzJZZ1BTQnVaWGNnVFN3Z2IyWWdQU0J1WlhjZ1ozUXNJSGRzSUQwZ2JtVjNJRTBvTVN3Z01Dd2dNQ2tzSUZOc0lEMGdibVYzSUUwb01Dd2dNU3dnTUNrc0lGUnNJRDBnYm1WM0lFMG9NQ3dnTUN3Z01Ta3NJR0ZtSUQwZ2V3b2dJQ0FnZEhsd1pUb2dJbUZrWkdWa0lncDlMQ0JGYkNBOUlIc0tJQ0FnSUhSNWNHVTZJQ0p5WlcxdmRtVmtJZ3A5TENCT1pTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1JXNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMGFHbHpMQ0FpYVdRaUxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ5WmlzckNpQWdJQ0FnSUNBZ2ZTa3NJSFJvYVhNdWRYVnBaQ0E5SUVWMEtDa3NJSFJvYVhNdWJtRnRaU0E5SUNJaUxDQjBhR2x6TG5SNWNHVWdQU0FpVDJKcVpXTjBNMFFpTENCMGFHbHpMbkJoY21WdWRDQTlJRzUxYkd3c0lIUm9hWE11WTJocGJHUnlaVzRnUFNCYlhTd2dkR2hwY3k1MWNDQTlJRTVsTGtSbFptRjFiSFJWY0M1amJHOXVaU2dwT3dvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnYm1WM0lFMHNJSFFnUFNCdVpYY2dXbTRzSUc0Z1BTQnVaWGNnWjNRc0lHa2dQU0J1WlhjZ1RTZ3hMQ0F4TENBeEtUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnlLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnVMbk5sZEVaeWIyMUZkV3hsY2loMExDQWhNU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUc4b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhRdWMyVjBSbkp2YlZGMVlYUmxjbTVwYjI0b2Jpd2dkbTlwWkNBd0xDQWhNU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhRdVgyOXVRMmhoYm1kbEtISXBMQ0J1TGw5dmJrTm9ZVzVuWlNodktTd2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHaHBjeXdnZXdvZ0lDQWdJQ0FnSUNBZ0lDQndiM05wZEdsdmJqb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1VLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnY205MFlYUnBiMjQ2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dJVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCMENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIRjFZWFJsY201cGIyNDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFoTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhOallXeGxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYVFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCdGIyUmxiRlpwWlhkTllYUnlhWGc2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ2NHVUtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc1RXRjBjbWw0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lHeDBDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1dFlYUnlhWGdnUFNCdVpYY2djR1VzSUhSb2FYTXViV0YwY21sNFYyOXliR1FnUFNCdVpYY2djR1VzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJRTVsTGtSbFptRjFiSFJOWVhSeWFYaEJkWFJ2VlhCa1lYUmxMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1c1lYbGxjbk1nUFNCdVpYY2dTbk1zSUhSb2FYTXVkbWx6YVdKc1pTQTlJQ0V3TENCMGFHbHpMbU5oYzNSVGFHRmtiM2NnUFNBaE1Td2dkR2hwY3k1eVpXTmxhWFpsVTJoaFpHOTNJRDBnSVRFc0lIUm9hWE11Wm5KMWMzUjFiVU4xYkd4bFpDQTlJQ0V3TENCMGFHbHpMbkpsYm1SbGNrOXlaR1Z5SUQwZ01Dd2dkR2hwY3k1aGJtbHRZWFJwYjI1eklEMGdXMTBzSUhSb2FYTXVkWE5sY2tSaGRHRWdQU0I3ZlRzS0lDQWdJSDBLSUNBZ0lHOXVRbVZtYjNKbFVtVnVaR1Z5S0NrZ2UzMEtJQ0FnSUc5dVFXWjBaWEpTWlc1a1pYSW9LU0I3ZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnSmlZZ2RHaHBjeTUxY0dSaGRHVk5ZWFJ5YVhnb0tTd2dkR2hwY3k1dFlYUnlhWGd1Y0hKbGJYVnNkR2x3Ykhrb1pTa3NJSFJvYVhNdWJXRjBjbWw0TG1SbFkyOXRjRzl6WlNoMGFHbHpMbkJ2YzJsMGFXOXVMQ0IwYUdsekxuRjFZWFJsY201cGIyNHNJSFJvYVhNdWMyTmhiR1VwT3dvZ0lDQWdmUW9nSUNBZ1lYQndiSGxSZFdGMFpYSnVhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV4ZFdGMFpYSnVhVzl1TG5CeVpXMTFiSFJwY0d4NUtHVXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVW05MFlYUnBiMjVHY205dFFYaHBjMEZ1WjJ4bEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkYxWVhSbGNtNXBiMjR1YzJWMFJuSnZiVUY0YVhOQmJtZHNaU2hsTENCMEtUc0tJQ0FnSUgwS0lDQWdJSE5sZEZKdmRHRjBhVzl1Um5KdmJVVjFiR1Z5S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5GMVlYUmxjbTVwYjI0dWMyVjBSbkp2YlVWMWJHVnlLR1VzSUNFd0tUc0tJQ0FnSUgwS0lDQWdJSE5sZEZKdmRHRjBhVzl1Um5KdmJVMWhkSEpwZUNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1eGRXRjBaWEp1YVc5dUxuTmxkRVp5YjIxU2IzUmhkR2x2YmsxaGRISnBlQ2hsS1RzS0lDQWdJSDBLSUNBZ0lITmxkRkp2ZEdGMGFXOXVSbkp2YlZGMVlYUmxjbTVwYjI0b1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdWNYVmhkR1Z5Ym1sdmJpNWpiM0I1S0dVcE93b2dJQ0FnZlFvZ0lDQWdjbTkwWVhSbFQyNUJlR2x6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMmt1YzJWMFJuSnZiVUY0YVhOQmJtZHNaU2hsTENCMEtTd2dkR2hwY3k1eGRXRjBaWEp1YVc5dUxtMTFiSFJwY0d4NUtHOXBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEp2ZEdGMFpVOXVWMjl5YkdSQmVHbHpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2Iya3VjMlYwUm5KdmJVRjRhWE5CYm1kc1pTaGxMQ0IwS1N3Z2RHaHBjeTV4ZFdGMFpYSnVhVzl1TG5CeVpXMTFiSFJwY0d4NUtHOXBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSEp2ZEdGMFpWZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSnZkR0YwWlU5dVFYaHBjeWgzYkN3Z1pTazdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVlpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXliM1JoZEdWUGJrRjRhWE1vVTJ3c0lHVXBPd29nSUNBZ2ZRb2dJQ0FnY205MFlYUmxXaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbTkwWVhSbFQyNUJlR2x6S0ZSc0xDQmxLVHNLSUNBZ0lIMEtJQ0FnSUhSeVlXNXpiR0YwWlU5dVFYaHBjeWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHSnNMbU52Y0hrb1pTa3VZWEJ3YkhsUmRXRjBaWEp1YVc5dUtIUm9hWE11Y1hWaGRHVnlibWx2Ymlrc0lIUm9hWE11Y0c5emFYUnBiMjR1WVdSa0tHSnNMbTExYkhScGNHeDVVMk5oYkdGeUtIUXBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ5WVc1emJHRjBaVmdvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJ5WVc1emJHRjBaVTl1UVhocGN5aDNiQ3dnWlNrN0NpQWdJQ0I5Q2lBZ0lDQjBjbUZ1YzJ4aGRHVlpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBjbUZ1YzJ4aGRHVlBia0Y0YVhNb1Uyd3NJR1VwT3dvZ0lDQWdmUW9nSUNBZ2RISmhibk5zWVhSbFdpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRISmhibk5zWVhSbFQyNUJlR2x6S0ZSc0xDQmxLVHNLSUNBZ0lIMEtJQ0FnSUd4dlkyRnNWRzlYYjNKc1pDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1WVhCd2JIbE5ZWFJ5YVhnMEtIUm9hWE11YldGMGNtbDRWMjl5YkdRcE93b2dJQ0FnZlFvZ0lDQWdkMjl5YkdSVWIweHZZMkZzS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNWhjSEJzZVUxaGRISnBlRFFvVVhRdVkyOXdlU2gwYUdsekxtMWhkSEpwZUZkdmNteGtLUzVwYm5abGNuUW9LU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyOXJRWFFvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUdVdWFYTldaV04wYjNJeklEOGdKSEl1WTI5d2VTaGxLU0E2SUNSeUxuTmxkQ2hsTENCMExDQnVLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdWNHRnlaVzUwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFYyOXliR1JOWVhSeWFYZ29JVEFzSUNFeEtTd2dXbWt1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIUm9hWE11YldGMGNtbDRWMjl5YkdRcExDQjBhR2x6TG1selEyRnRaWEpoSUh4OElIUm9hWE11YVhOTWFXZG9kQ0EvSUZGMExteHZiMnRCZENoYWFTd2dKSElzSUhSb2FYTXVkWEFwSURvZ1VYUXViRzl2YTBGMEtDUnlMQ0JhYVN3Z2RHaHBjeTUxY0Nrc0lIUm9hWE11Y1hWaGRHVnlibWx2Ymk1elpYUkdjbTl0VW05MFlYUnBiMjVOWVhSeWFYZ29VWFFwTENCcElDWW1JQ2hSZEM1bGVIUnlZV04wVW05MFlYUnBiMjRvYVM1dFlYUnlhWGhYYjNKc1pDa3NJRzlwTG5ObGRFWnliMjFTYjNSaGRHbHZiazFoZEhKcGVDaFJkQ2tzSUhSb2FYTXVjWFZoZEdWeWJtbHZiaTV3Y21WdGRXeDBhWEJzZVNodmFTNXBiblpsY25Rb0tTa3BPd29nSUNBZ2ZRb2dJQ0FnWVdSa0tHVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNRHNnZENBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lIUXJLeWwwYUdsekxtRmtaQ2hoY21kMWJXVnVkSE5iZEYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVZ1BUMDlJSFJvYVhNZ1B5QW9ZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VDJKcVpXTjBNMFF1WVdSa09pQnZZbXBsWTNRZ1kyRnVKM1FnWW1VZ1lXUmtaV1FnWVhNZ1lTQmphR2xzWkNCdlppQnBkSE5sYkdZdUlpd2daU2tzSUhSb2FYTXBJRG9nS0dVZ0ppWWdaUzVwYzA5aWFtVmpkRE5FSUQ4Z0tHVXVjR0Z5Wlc1MElDRTlQU0J1ZFd4c0lDWW1JR1V1Y0dGeVpXNTBMbkpsYlc5MlpTaGxLU3dnWlM1d1lYSmxiblFnUFNCMGFHbHpMQ0IwYUdsekxtTm9hV3hrY21WdUxuQjFjMmdvWlNrc0lHVXVaR2x6Y0dGMFkyaEZkbVZ1ZENoaFppa3BJRG9nWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVQySnFaV04wTTBRdVlXUmtPaUJ2WW1wbFkzUWdibTkwSUdGdUlHbHVjM1JoYm1ObElHOW1JRlJJVWtWRkxrOWlhbVZqZERORUxpSXNJR1VwTENCMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUhKbGJXOTJaU2hsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBN0lHNGdQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJ1S3lzcGRHaHBjeTV5WlcxdmRtVW9ZWEpuZFcxbGJuUnpXMjVkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWphR2xzWkhKbGJpNXBibVJsZUU5bUtHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBJQ0U5UFNBdE1TQW1KaUFvWlM1d1lYSmxiblFnUFNCdWRXeHNMQ0IwYUdsekxtTm9hV3hrY21WdUxuTndiR2xqWlNoMExDQXhLU3dnWlM1a2FYTndZWFJqYUVWMlpXNTBLRVZzS1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCeVpXMXZkbVZHY205dFVHRnlaVzUwS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTV3WVhKbGJuUTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdJVDA5SUc1MWJHd2dKaVlnWlM1eVpXMXZkbVVvZEdocGN5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiR1ZoY2lncElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHVWdQU0F3T3lCbElEd2dkR2hwY3k1amFHbHNaSEpsYmk1c1pXNW5kR2c3SUdVckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWphR2xzWkhKbGJsdGxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDNXdZWEpsYm5RZ1BTQnVkV3hzTENCMExtUnBjM0JoZEdOb1JYWmxiblFvUld3cE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYUdsc1pISmxiaTVzWlc1bmRHZ2dQU0F3TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhSMFlXTm9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTFjR1JoZEdWWGIzSnNaRTFoZEhKcGVDZ2hNQ3dnSVRFcExDQlJkQzVqYjNCNUtIUm9hWE11YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncExDQmxMbkJoY21WdWRDQWhQVDBnYm5Wc2JDQW1KaUFvWlM1d1lYSmxiblF1ZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvSVRBc0lDRXhLU3dnVVhRdWJYVnNkR2x3Ykhrb1pTNXdZWEpsYm5RdWJXRjBjbWw0VjI5eWJHUXBLU3dnWlM1aGNIQnNlVTFoZEhKcGVEUW9VWFFwTENCMGFHbHpMbUZrWkNobEtTd2daUzUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2doTVN3Z0lUQXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaMlYwVDJKcVpXTjBRbmxKWkNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFQySnFaV04wUW5sUWNtOXdaWEowZVNnaWFXUWlMQ0JsS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRTlpYW1WamRFSjVUbUZ0WlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFQySnFaV04wUW5sUWNtOXdaWEowZVNnaWJtRnRaU0lzSUdVcE93b2dJQ0FnZlFvZ0lDQWdaMlYwVDJKcVpXTjBRbmxRY205d1pYSjBlU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTmJaVjBnUFQwOUlIUXBJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMGFHbHpMbU5vYVd4a2NtVnVMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RHaHBjeTVqYUdsc1pISmxibHR1WFM1blpYUlBZbXBsWTNSQ2VWQnliM0JsY25SNUtHVXNJSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYnlBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2J6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JuWlhSWGIzSnNaRkJ2YzJsMGFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTFjR1JoZEdWWGIzSnNaRTFoZEhKcGVDZ2hNQ3dnSVRFcExDQmxMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloMGFHbHpMbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRmR2Y214a1VYVmhkR1Z5Ym1sdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb0lUQXNJQ0V4S1N3Z2RHaHBjeTV0WVhSeWFYaFhiM0pzWkM1a1pXTnZiWEJ2YzJVb1dta3NJR1VzSUhObUtTd2daVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGZHZjbXhrVTJOaGJHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVndaR0YwWlZkdmNteGtUV0YwY21sNEtDRXdMQ0FoTVNrc0lIUm9hWE11YldGMGNtbDRWMjl5YkdRdVpHVmpiMjF3YjNObEtGcHBMQ0J2Wml3Z1pTa3NJR1U3Q2lBZ0lDQjlDaUFnSUNCblpYUlhiM0pzWkVScGNtVmpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZYYjNKc1pFMWhkSEpwZUNnaE1Dd2dJVEVwT3dvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NXRZWFJ5YVhoWGIzSnNaQzVsYkdWdFpXNTBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV6WlhRb2RGczRYU3dnZEZzNVhTd2dkRnN4TUYwcExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ2ZRb2dJQ0FnY21GNVkyRnpkQ2dwSUh0OUNpQWdJQ0IwY21GMlpYSnpaU2hsS1NCN0NpQWdJQ0FnSUNBZ1pTaDBhR2x6S1RzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZMmhwYkdSeVpXNDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTUN3Z2FTQTlJSFF1YkdWdVozUm9PeUJ1SUR3Z2FUc2diaXNyS1hSYmJsMHVkSEpoZG1WeWMyVW9aU2s3Q2lBZ0lDQjlDaUFnSUNCMGNtRjJaWEp6WlZacGMybGliR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuWnBjMmxpYkdVZ1BUMDlJQ0V4S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnWlNoMGFHbHpLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVkyaHBiR1J5Wlc0N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlIUXViR1Z1WjNSb095QnVJRHdnYVRzZ2Jpc3JLWFJiYmwwdWRISmhkbVZ5YzJWV2FYTnBZbXhsS0dVcE93b2dJQ0FnZlFvZ0lDQWdkSEpoZG1WeWMyVkJibU5sYzNSdmNuTW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NXdZWEpsYm5RN0NpQWdJQ0FnSUNBZ2RDQWhQVDBnYm5Wc2JDQW1KaUFvWlNoMEtTd2dkQzUwY21GMlpYSnpaVUZ1WTJWemRHOXljeWhsS1NrN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdWTllYUnlhWGdvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhSeWFYZ3VZMjl0Y0c5elpTaDBhR2x6TG5CdmMybDBhVzl1TENCMGFHbHpMbkYxWVhSbGNtNXBiMjRzSUhSb2FYTXVjMk5oYkdVcExDQjBhR2x6TG0xaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVWdQU0FoTURzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlUxaGRISnBlRmR2Y214a0tHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ0ppWWdkR2hwY3k1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnS0hSb2FYTXViV0YwY21sNFYyOXliR1JPWldWa2MxVndaR0YwWlNCOGZDQmxLU0FtSmlBb2RHaHBjeTV3WVhKbGJuUWdQVDA5SUc1MWJHd2dQeUIwYUdsekxtMWhkSEpwZUZkdmNteGtMbU52Y0hrb2RHaHBjeTV0WVhSeWFYZ3BJRG9nZEdocGN5NXRZWFJ5YVhoWGIzSnNaQzV0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLSFJvYVhNdWNHRnlaVzUwTG0xaGRISnBlRmR2Y214a0xDQjBhR2x6TG0xaGRISnBlQ2tzSUhSb2FYTXViV0YwY21sNFYyOXliR1JPWldWa2MxVndaR0YwWlNBOUlDRXhMQ0JsSUQwZ0lUQXBPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1amFHbHNaSEpsYmpzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RDNXNaVzVuZEdnN0lHNGdQQ0JwT3lCdUt5c3BkRnR1WFM1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11Y0dGeVpXNTBPd29nSUNBZ0lDQWdJR2xtSUNobElEMDlQU0FoTUNBbUppQnVJQ0U5UFNCdWRXeHNJQ1ltSUc0dWRYQmtZWFJsVjI5eWJHUk5ZWFJ5YVhnb0lUQXNJQ0V4S1N3Z2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJQ1ltSUhSb2FYTXVkWEJrWVhSbFRXRjBjbWw0S0Nrc0lIUm9hWE11Y0dGeVpXNTBJRDA5UFNCdWRXeHNJRDhnZEdocGN5NXRZWFJ5YVhoWGIzSnNaQzVqYjNCNUtIUm9hWE11YldGMGNtbDRLU0E2SUhSb2FYTXViV0YwY21sNFYyOXliR1F1YlhWc2RHbHdiSGxOWVhSeWFXTmxjeWgwYUdsekxuQmhjbVZ1ZEM1dFlYUnlhWGhYYjNKc1pDd2dkR2hwY3k1dFlYUnlhWGdwTENCMElEMDlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVkyaHBiR1J5Wlc0N0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdjaUE5SURBc0lHOGdQU0JwTG14bGJtZDBhRHNnY2lBOElHODdJSElyS3lscFczSmRMblZ3WkdGMFpWZHZjbXhrVFdGMGNtbDRLQ0V4TENBaE1DazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVZ1BUMDlJSFp2YVdRZ01DQjhmQ0IwZVhCbGIyWWdaU0E5UFNBaWMzUnlhVzVuSWl3Z2JpQTlJSHQ5T3dvZ0lDQWdJQ0FnSUhRZ0ppWWdLR1VnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJR2RsYjIxbGRISnBaWE02SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiSE02SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0IwWlhoMGRYSmxjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJR2x0WVdkbGN6b2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsY3pvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUhOclpXeGxkRzl1Y3pvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2Ym5NNklIdDlDaUFnSUNBZ0lDQWdmU3dnYmk1dFpYUmhaR0YwWVNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWMybHZiam9nTkM0MUxBb2dJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlUMkpxWldOMElpd0tJQ0FnSUNBZ0lDQWdJQ0FnWjJWdVpYSmhkRzl5T2lBaVQySnFaV04wTTBRdWRHOUtVMDlPSWdvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ2UzMDdDaUFnSUNBZ0lDQWdhUzUxZFdsa0lEMGdkR2hwY3k1MWRXbGtMQ0JwTG5SNWNHVWdQU0IwYUdsekxuUjVjR1VzSUhSb2FYTXVibUZ0WlNBaFBUMGdJaUlnSmlZZ0tHa3VibUZ0WlNBOUlIUm9hWE11Ym1GdFpTa3NJSFJvYVhNdVkyRnpkRk5vWVdSdmR5QTlQVDBnSVRBZ0ppWWdLR2t1WTJGemRGTm9ZV1J2ZHlBOUlDRXdLU3dnZEdocGN5NXlaV05sYVhabFUyaGhaRzkzSUQwOVBTQWhNQ0FtSmlBb2FTNXlaV05sYVhabFUyaGhaRzkzSUQwZ0lUQXBMQ0IwYUdsekxuWnBjMmxpYkdVZ1BUMDlJQ0V4SUNZbUlDaHBMblpwYzJsaWJHVWdQU0FoTVNrc0lIUm9hWE11Wm5KMWMzUjFiVU4xYkd4bFpDQTlQVDBnSVRFZ0ppWWdLR2t1Wm5KMWMzUjFiVU4xYkd4bFpDQTlJQ0V4S1N3Z2RHaHBjeTV5Wlc1a1pYSlBjbVJsY2lBaFBUMGdNQ0FtSmlBb2FTNXlaVzVrWlhKUGNtUmxjaUE5SUhSb2FYTXVjbVZ1WkdWeVQzSmtaWElwTENCS1UwOU9Mbk4wY21sdVoybG1lU2gwYUdsekxuVnpaWEpFWVhSaEtTQWhQVDBnSW50OUlpQW1KaUFvYVM1MWMyVnlSR0YwWVNBOUlIUm9hWE11ZFhObGNrUmhkR0VwTENCcExteGhlV1Z5Y3lBOUlIUm9hWE11YkdGNVpYSnpMbTFoYzJzc0lHa3ViV0YwY21sNElEMGdkR2hwY3k1dFlYUnlhWGd1ZEc5QmNuSmhlU2dwTENCMGFHbHpMbTFoZEhKcGVFRjFkRzlWY0dSaGRHVWdQVDA5SUNFeElDWW1JQ2hwTG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Ta3NJSFJvYVhNdWFYTkpibk4wWVc1alpXUk5aWE5vSUNZbUlDaHBMblI1Y0dVZ1BTQWlTVzV6ZEdGdVkyVmtUV1Z6YUNJc0lHa3VZMjkxYm5RZ1BTQjBhR2x6TG1OdmRXNTBMQ0JwTG1sdWMzUmhibU5sVFdGMGNtbDRJRDBnZEdocGN5NXBibk4wWVc1alpVMWhkSEpwZUM1MGIwcFRUMDRvS1N3Z2RHaHBjeTVwYm5OMFlXNWpaVU52Ykc5eUlDRTlQU0J1ZFd4c0lDWW1JQ2hwTG1sdWMzUmhibU5sUTI5c2IzSWdQU0IwYUdsekxtbHVjM1JoYm1ObFEyOXNiM0l1ZEc5S1UwOU9LQ2twS1RzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCeUtHRXNJR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRmJiQzUxZFdsa1hTQTlQVDBnZG05cFpDQXdJQ1ltSUNoaFcyd3VkWFZwWkYwZ1BTQnNMblJ2U2xOUFRpaGxLU2tzSUd3dWRYVnBaRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVhOVFkyVnVaU2tnZEdocGN5NWlZV05yWjNKdmRXNWtJQ1ltSUNoMGFHbHpMbUpoWTJ0bmNtOTFibVF1YVhORGIyeHZjaUEvSUdrdVltRmphMmR5YjNWdVpDQTlJSFJvYVhNdVltRmphMmR5YjNWdVpDNTBiMHBUVDA0b0tTQTZJSFJvYVhNdVltRmphMmR5YjNWdVpDNXBjMVJsZUhSMWNtVWdKaVlnS0drdVltRmphMmR5YjNWdVpDQTlJSFJvYVhNdVltRmphMmR5YjNWdVpDNTBiMHBUVDA0b1pTa3VkWFZwWkNrcExDQjBhR2x6TG1WdWRtbHliMjV0Wlc1MElDWW1JSFJvYVhNdVpXNTJhWEp2Ym0xbGJuUXVhWE5VWlhoMGRYSmxJQ1ltSUNocExtVnVkbWx5YjI1dFpXNTBJRDBnZEdocGN5NWxiblpwY205dWJXVnVkQzUwYjBwVFQwNG9aU2t1ZFhWcFpDazdDaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9kR2hwY3k1cGMwMWxjMmdnZkh3Z2RHaHBjeTVwYzB4cGJtVWdmSHdnZEdocGN5NXBjMUJ2YVc1MGN5a2dld29nSUNBZ0lDQWdJQ0FnSUNCcExtZGxiMjFsZEhKNUlEMGdjaWhsTG1kbGIyMWxkSEpwWlhNc0lIUm9hWE11WjJWdmJXVjBjbmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIUm9hWE11WjJWdmJXVjBjbmt1Y0dGeVlXMWxkR1Z5Y3pzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dFZ0lUMDlJSFp2YVdRZ01DQW1KaUJoTG5Ob1lYQmxjeUFoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdFdWMyaGhjR1Z6T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYkNrcElHWnZjaWhzWlhRZ1l5QTlJREFzSUdnZ1BTQnNMbXhsYm1kMGFEc2dZeUE4SUdnN0lHTXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCc1cyTmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJb1pTNXphR0Z3WlhNc0lIVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCeUtHVXVjMmhoY0dWekxDQnNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXBjMU5yYVc1dVpXUk5aWE5vSUNZbUlDaHBMbUpwYm1STmIyUmxJRDBnZEdocGN5NWlhVzVrVFc5a1pTd2dhUzVpYVc1a1RXRjBjbWw0SUQwZ2RHaHBjeTVpYVc1a1RXRjBjbWw0TG5SdlFYSnlZWGtvS1N3Z2RHaHBjeTV6YTJWc1pYUnZiaUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHlLR1V1YzJ0bGJHVjBiMjV6TENCMGFHbHpMbk5yWld4bGRHOXVLU3dnYVM1emEyVnNaWFJ2YmlBOUlIUm9hWE11YzJ0bGJHVjBiMjR1ZFhWcFpDa3BMQ0IwYUdsekxtMWhkR1Z5YVdGc0lDRTlQU0IyYjJsa0lEQXBJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSFJvYVhNdWJXRjBaWEpwWVd3cEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SURBc0lHTWdQU0IwYUdsekxtMWhkR1Z5YVdGc0xteGxibWQwYURzZ2JDQThJR003SUd3ckt5bGhMbkIxYzJnb2NpaGxMbTFoZEdWeWFXRnNjeXdnZEdocGN5NXRZWFJsY21saGJGdHNYU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBMbTFoZEdWeWFXRnNJRDBnWVRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVM1dFlYUmxjbWxoYkNBOUlISW9aUzV0WVhSbGNtbGhiSE1zSUhSb2FYTXViV0YwWlhKcFlXd3BPd29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbU5vYVd4a2NtVnVMbXhsYm1kMGFDQStJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhUzVqYUdsc1pISmxiaUE5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR0VnUFNBd095QmhJRHdnZEdocGN5NWphR2xzWkhKbGJpNXNaVzVuZEdnN0lHRXJLeWxwTG1Ob2FXeGtjbVZ1TG5CMWMyZ29kR2hwY3k1amFHbHNaSEpsYmx0aFhTNTBiMHBUVDA0b1pTa3ViMkpxWldOMEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZVzVwYldGMGFXOXVjeTVzWlc1bmRHZ2dQaUF3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2t1WVc1cGJXRjBhVzl1Y3lBOUlGdGRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdFZ1BTQXdPeUJoSUR3Z2RHaHBjeTVoYm1sdFlYUnBiMjV6TG14bGJtZDBhRHNnWVNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ2RHaHBjeTVoYm1sdFlYUnBiMjV6VzJGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNWhibWx0WVhScGIyNXpMbkIxYzJnb2NpaGxMbUZ1YVcxaGRHbHZibk1zSUd3cEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9kQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlHOG9aUzVuWlc5dFpYUnlhV1Z6S1N3Z2JDQTlJRzhvWlM1dFlYUmxjbWxoYkhNcExDQmpJRDBnYnlobExuUmxlSFIxY21WektTd2dhQ0E5SUc4b1pTNXBiV0ZuWlhNcExDQjFJRDBnYnlobExuTm9ZWEJsY3lrc0lHUWdQU0J2S0dVdWMydGxiR1YwYjI1ektTd2daaUE5SUc4b1pTNWhibWx0WVhScGIyNXpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lTNXNaVzVuZEdnZ1BpQXdJQ1ltSUNodUxtZGxiMjFsZEhKcFpYTWdQU0JoS1N3Z2JDNXNaVzVuZEdnZ1BpQXdJQ1ltSUNodUxtMWhkR1Z5YVdGc2N5QTlJR3dwTENCakxteGxibWQwYUNBK0lEQWdKaVlnS0c0dWRHVjRkSFZ5WlhNZ1BTQmpLU3dnYUM1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG1sdFlXZGxjeUE5SUdncExDQjFMbXhsYm1kMGFDQStJREFnSmlZZ0tHNHVjMmhoY0dWeklEMGdkU2tzSUdRdWJHVnVaM1JvSUQ0Z01DQW1KaUFvYmk1emEyVnNaWFJ2Ym5NZ1BTQmtLU3dnWmk1c1pXNW5kR2dnUGlBd0lDWW1JQ2h1TG1GdWFXMWhkR2x2Ym5NZ1BTQm1LVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzR1YjJKcVpXTjBJRDBnYVN3Z2Jqc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnZLR0VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaklHbHVJR0VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0JoVzJOZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdndWJXVjBZV1JoZEdFc0lHd3VjSFZ6YUNob0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsekxDQmxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU3dnZENBOUlDRXdLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Ym1GdFpTQTlJR1V1Ym1GdFpTd2dkR2hwY3k1MWNDNWpiM0I1S0dVdWRYQXBMQ0IwYUdsekxuQnZjMmwwYVc5dUxtTnZjSGtvWlM1d2IzTnBkR2x2Ymlrc0lIUm9hWE11Y205MFlYUnBiMjR1YjNKa1pYSWdQU0JsTG5KdmRHRjBhVzl1TG05eVpHVnlMQ0IwYUdsekxuRjFZWFJsY201cGIyNHVZMjl3ZVNobExuRjFZWFJsY201cGIyNHBMQ0IwYUdsekxuTmpZV3hsTG1OdmNIa29aUzV6WTJGc1pTa3NJSFJvYVhNdWJXRjBjbWw0TG1OdmNIa29aUzV0WVhSeWFYZ3BMQ0IwYUdsekxtMWhkSEpwZUZkdmNteGtMbU52Y0hrb1pTNXRZWFJ5YVhoWGIzSnNaQ2tzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJR1V1YldGMGNtbDRRWFYwYjFWd1pHRjBaU3dnZEdocGN5NXRZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsSUQwZ1pTNXRZWFJ5YVhoWGIzSnNaRTVsWldSelZYQmtZWFJsTENCMGFHbHpMbXhoZVdWeWN5NXRZWE5ySUQwZ1pTNXNZWGxsY25NdWJXRnpheXdnZEdocGN5NTJhWE5wWW14bElEMGdaUzUyYVhOcFlteGxMQ0IwYUdsekxtTmhjM1JUYUdGa2IzY2dQU0JsTG1OaGMzUlRhR0ZrYjNjc0lIUm9hWE11Y21WalpXbDJaVk5vWVdSdmR5QTlJR1V1Y21WalpXbDJaVk5vWVdSdmR5d2dkR2hwY3k1bWNuVnpkSFZ0UTNWc2JHVmtJRDBnWlM1bWNuVnpkSFZ0UTNWc2JHVmtMQ0IwYUdsekxuSmxibVJsY2s5eVpHVnlJRDBnWlM1eVpXNWtaWEpQY21SbGNpd2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlFcFRUMDR1Y0dGeWMyVW9TbE5QVGk1emRISnBibWRwWm5rb1pTNTFjMlZ5UkdGMFlTa3BMQ0IwSUQwOVBTQWhNQ2tnWm05eUtHeGxkQ0J1SUQwZ01Ec2diaUE4SUdVdVkyaHBiR1J5Wlc0dWJHVnVaM1JvT3lCdUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUdVdVkyaHBiR1J5Wlc1YmJsMDdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrS0drdVkyeHZibVVvS1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRcDlPd3BPWlM1RVpXWmhkV3gwVlhBZ1BTQnVaWGNnVFNnd0xDQXhMQ0F3S1RzS1RtVXVSR1ZtWVhWc2RFMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNRHNLVG1VdWNISnZkRzkwZVhCbExtbHpUMkpxWldOME0wUWdQU0FoTURzS2RtRnlJRVIwSUQwZ2JtVjNJRTBzSUV0MElEMGdibVYzSUUwc0lFTnZJRDBnYm1WM0lFMHNJR1Z1SUQwZ2JtVjNJRTBzSUdGcElEMGdibVYzSUUwc0lHeHBJRDBnYm1WM0lFMHNJRUZzSUQwZ2JtVjNJRTBzSUV4dklEMGdibVYzSUUwc0lGSnZJRDBnYm1WM0lFMHNJRkJ2SUQwZ2JtVjNJRTBzSUc1MElEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzVsZHlCTkxDQjBJRDBnYm1WM0lFMHNJRzRnUFNCdVpYY2dUU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NWhJRDBnWlN3Z2RHaHBjeTVpSUQwZ2RDd2dkR2hwY3k1aklEMGdianNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJuWlhST2IzSnRZV3dvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHa3VjM1ZpVm1WamRHOXljeWh1TENCMEtTd2dSSFF1YzNWaVZtVmpkRzl5Y3lobExDQjBLU3dnYVM1amNtOXpjeWhFZENrN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCcExteGxibWQwYUZOeEtDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISWdQaUF3SUQ4Z2FTNXRkV3gwYVhCc2VWTmpZV3hoY2lneElDOGdUV0YwYUM1emNYSjBLSElwS1NBNklHa3VjMlYwS0RBc0lEQXNJREFwT3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdkbGRFSmhjbmxqYjI5eVpDaGxMQ0IwTENCdUxDQnBMQ0J5S1NCN0NpQWdJQ0FnSUNBZ1JIUXVjM1ZpVm1WamRHOXljeWhwTENCMEtTd2dTM1F1YzNWaVZtVmpkRzl5Y3lodUxDQjBLU3dnUTI4dWMzVmlWbVZqZEc5eWN5aGxMQ0IwS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUVSMExtUnZkQ2hFZENrc0lHRWdQU0JFZEM1a2IzUW9TM1FwTENCc0lEMGdSSFF1Wkc5MEtFTnZLU3dnWXlBOUlFdDBMbVJ2ZENoTGRDa3NJR2dnUFNCTGRDNWtiM1FvUTI4cExDQjFJRDBnYnlBcUlHTWdMU0JoSUNvZ1lUc0tJQ0FnSUNBZ0lDQnBaaUFvZFNBOVBUMGdNQ2tnY21WMGRYSnVJSEl1YzJWMEtDMHlMQ0F0TVN3Z0xURXBPd29nSUNBZ0lDQWdJR3hsZENCa0lEMGdNU0F2SUhVc0lHWWdQU0FvWXlBcUlHd2dMU0JoSUNvZ2FDa2dLaUJrTENCdElEMGdLRzhnS2lCb0lDMGdZU0FxSUd3cElDb2daRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjaTV6WlhRb01TQXRJR1lnTFNCdExDQnRMQ0JtS1RzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCamIyNTBZV2x1YzFCdmFXNTBLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJDWVhKNVkyOXZjbVFvWlN3Z2RDd2diaXdnYVN3Z1pXNHBMQ0JsYmk1NElENDlJREFnSmlZZ1pXNHVlU0ErUFNBd0lDWW1JR1Z1TG5nZ0t5QmxiaTU1SUR3OUlERTdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdaMlYwVlZZb1pTd2dkQ3dnYml3Z2FTd2djaXdnYnl3Z1lTd2diQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRUpoY25samIyOXlaQ2hsTENCMExDQnVMQ0JwTENCbGJpa3NJR3d1YzJWMEtEQXNJREFwTENCc0xtRmtaRk5qWVd4bFpGWmxZM1J2Y2loeUxDQmxiaTU0S1N3Z2JDNWhaR1JUWTJGc1pXUldaV04wYjNJb2J5d2daVzR1ZVNrc0lHd3VZV1JrVTJOaGJHVmtWbVZqZEc5eUtHRXNJR1Z1TG5vcExDQnNPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR2x6Um5KdmJuUkdZV05wYm1jb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQkVkQzV6ZFdKV1pXTjBiM0p6S0c0c0lIUXBMQ0JMZEM1emRXSldaV04wYjNKektHVXNJSFFwTENCRWRDNWpjbTl6Y3loTGRDa3VaRzkwS0drcElEd2dNRHNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVM1amIzQjVLR1VwTENCMGFHbHpMbUl1WTI5d2VTaDBLU3dnZEdocGN5NWpMbU52Y0hrb2Jpa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFVHOXBiblJ6UVc1a1NXNWthV05sY3lobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVM1amIzQjVLR1ZiZEYwcExDQjBhR2x6TG1JdVkyOXdlU2hsVzI1ZEtTd2dkR2hwY3k1akxtTnZjSGtvWlZ0cFhTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFFYUjBjbWxpZFhSbFFXNWtTVzVrYVdObGN5aGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlTNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR1VzSUhRcExDQjBhR2x6TG1JdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaGxMQ0J1S1N3Z2RHaHBjeTVqTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb1pTd2dhU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVM1amIzQjVLR1V1WVNrc0lIUm9hWE11WWk1amIzQjVLR1V1WWlrc0lIUm9hWE11WXk1amIzQjVLR1V1WXlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUkJjbVZoS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCRWRDNXpkV0pXWldOMGIzSnpLSFJvYVhNdVl5d2dkR2hwY3k1aUtTd2dTM1F1YzNWaVZtVmpkRzl5Y3loMGFHbHpMbUVzSUhSb2FYTXVZaWtzSUVSMExtTnliM056S0V0MEtTNXNaVzVuZEdnb0tTQXFJQzQxT3dvZ0lDQWdmUW9nSUNBZ1oyVjBUV2xrY0c5cGJuUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG1Ga1pGWmxZM1J2Y25Nb2RHaHBjeTVoTENCMGFHbHpMbUlwTG1Ga1pDaDBhR2x6TG1NcExtMTFiSFJwY0d4NVUyTmhiR0Z5S0RFZ0x5QXpLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFNXZjbTFoYkNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTBMbWRsZEU1dmNtMWhiQ2gwYUdsekxtRXNJSFJvYVhNdVlpd2dkR2hwY3k1akxDQmxLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnNZVzVsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXpaWFJHY205dFEyOXdiR0Z1WVhKUWIybHVkSE1vZEdocGN5NWhMQ0IwYUdsekxtSXNJSFJvYVhNdVl5azdDaUFnSUNCOUNpQWdJQ0JuWlhSQ1lYSjVZMjl2Y21Rb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZEM1blpYUkNZWEo1WTI5dmNtUW9aU3dnZEdocGN5NWhMQ0IwYUdsekxtSXNJSFJvYVhNdVl5d2dkQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUlZWaWhsTENCMExDQnVMQ0JwTENCeUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTBMbWRsZEZWV0tHVXNJSFJvYVhNdVlTd2dkR2hwY3k1aUxDQjBhR2x6TG1Nc0lIUXNJRzRzSUdrc0lISXBPd29nSUNBZ2ZRb2dJQ0FnWTI5dWRHRnBibk5RYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzUwTG1OdmJuUmhhVzV6VUc5cGJuUW9aU3dnZEdocGN5NWhMQ0IwYUdsekxtSXNJSFJvYVhNdVl5azdDaUFnSUNCOUNpQWdJQ0JwYzBaeWIyNTBSbUZqYVc1bktHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblF1YVhOR2NtOXVkRVpoWTJsdVp5aDBhR2x6TG1Fc0lIUm9hWE11WWl3Z2RHaHBjeTVqTENCbEtUc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkSE5DYjNnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbWx1ZEdWeWMyVmpkSE5VY21saGJtZHNaU2gwYUdsektUc0tJQ0FnSUgwS0lDQWdJR05zYjNObGMzUlFiMmx1ZEZSdlVHOXBiblFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1aExDQnBJRDBnZEdocGN5NWlMQ0J5SUQwZ2RHaHBjeTVqTENCdkxDQmhPd29nSUNBZ0lDQWdJR0ZwTG5OMVlsWmxZM1J2Y25Nb2FTd2diaWtzSUd4cExuTjFZbFpsWTNSdmNuTW9jaXdnYmlrc0lFeHZMbk4xWWxabFkzUnZjbk1vWlN3Z2JpazdDaUFnSUNBZ0lDQWdiR1YwSUd3Z1BTQmhhUzVrYjNRb1RHOHBMQ0JqSUQwZ2JHa3VaRzkwS0V4dktUc0tJQ0FnSUNBZ0lDQnBaaUFvYkNBOFBTQXdJQ1ltSUdNZ1BEMGdNQ2tnY21WMGRYSnVJSFF1WTI5d2VTaHVLVHNLSUNBZ0lDQWdJQ0JTYnk1emRXSldaV04wYjNKektHVXNJR2twT3dvZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnWVdrdVpHOTBLRkp2S1N3Z2RTQTlJR3hwTG1SdmRDaFNieWs3Q2lBZ0lDQWdJQ0FnYVdZZ0tHZ2dQajBnTUNBbUppQjFJRHc5SUdncElISmxkSFZ5YmlCMExtTnZjSGtvYVNrN0NpQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCc0lDb2dkU0F0SUdnZ0tpQmpPd29nSUNBZ0lDQWdJR2xtSUNoa0lEdzlJREFnSmlZZ2JDQStQU0F3SUNZbUlHZ2dQRDBnTUNrZ2NtVjBkWEp1SUc4Z1BTQnNJQzhnS0d3Z0xTQm9LU3dnZEM1amIzQjVLRzRwTG1Ga1pGTmpZV3hsWkZabFkzUnZjaWhoYVN3Z2J5azdDaUFnSUNBZ0lDQWdVRzh1YzNWaVZtVmpkRzl5Y3lobExDQnlLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJR0ZwTG1SdmRDaFFieWtzSUcwZ1BTQnNhUzVrYjNRb1VHOHBPd29nSUNBZ0lDQWdJR2xtSUNodElENDlJREFnSmlZZ1ppQThQU0J0S1NCeVpYUjFjbTRnZEM1amIzQjVLSElwT3dvZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnWmlBcUlHTWdMU0JzSUNvZ2JUc0tJQ0FnSUNBZ0lDQnBaaUFvZUNBOFBTQXdJQ1ltSUdNZ1BqMGdNQ0FtSmlCdElEdzlJREFwSUhKbGRIVnliaUJoSUQwZ1l5QXZJQ2hqSUMwZ2JTa3NJSFF1WTI5d2VTaHVLUzVoWkdSVFkyRnNaV1JXWldOMGIzSW9iR2tzSUdFcE93b2dJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2FDQXFJRzBnTFNCbUlDb2dkVHNLSUNBZ0lDQWdJQ0JwWmlBb2RpQThQU0F3SUNZbUlIVWdMU0JvSUQ0OUlEQWdKaVlnWmlBdElHMGdQajBnTUNrZ2NtVjBkWEp1SUVGc0xuTjFZbFpsWTNSdmNuTW9jaXdnYVNrc0lHRWdQU0FvZFNBdElHZ3BJQzhnS0hVZ0xTQm9JQ3NnS0dZZ0xTQnRLU2tzSUhRdVkyOXdlU2hwS1M1aFpHUlRZMkZzWldSV1pXTjBiM0lvUVd3c0lHRXBPd29nSUNBZ0lDQWdJR3hsZENCbklEMGdNU0F2SUNoMklDc2dlQ0FySUdRcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdklEMGdlQ0FxSUdjc0lHRWdQU0JrSUNvZ1p5d2dkQzVqYjNCNUtHNHBMbUZrWkZOallXeGxaRlpsWTNSdmNpaGhhU3dnYnlrdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0d4cExDQmhLVHNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVlTNWxjWFZoYkhNb2RHaHBjeTVoS1NBbUppQmxMbUl1WlhGMVlXeHpLSFJvYVhNdVlpa2dKaVlnWlM1akxtVnhkV0ZzY3loMGFHbHpMbU1wT3dvZ0lDQWdmUXA5TENCc1ppQTlJREFzSUdSMElEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCRmJpQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3Bld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ0pwWkNJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR3htS3lzS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1MWRXbGtJRDBnUlhRb0tTd2dkR2hwY3k1dVlXMWxJRDBnSWlJc0lIUm9hWE11ZEhsd1pTQTlJQ0pOWVhSbGNtbGhiQ0lzSUhSb2FYTXVabTluSUQwZ0lUQXNJSFJvYVhNdVlteGxibVJwYm1jZ1BTQnpjaXdnZEdocGN5NXphV1JsSUQwZ1FXa3NJSFJvYVhNdWRtVnlkR1Y0UTI5c2IzSnpJRDBnSVRFc0lIUm9hWE11YjNCaFkybDBlU0E5SURFc0lIUm9hWE11Wm05eWJXRjBJRDBnWTNRc0lIUm9hWE11ZEhKaGJuTndZWEpsYm5RZ1BTQWhNU3dnZEdocGN5NWliR1Z1WkZOeVl5QTlJRWRqTENCMGFHbHpMbUpzWlc1a1JITjBJRDBnVm1Nc0lIUm9hWE11WW14bGJtUkZjWFZoZEdsdmJpQTlJRjlwTENCMGFHbHpMbUpzWlc1a1UzSmpRV3h3YUdFZ1BTQnVkV3hzTENCMGFHbHpMbUpzWlc1a1JITjBRV3h3YUdFZ1BTQnVkV3hzTENCMGFHbHpMbUpzWlc1a1JYRjFZWFJwYjI1QmJIQm9ZU0E5SUc1MWJHd3NJSFJvYVhNdVpHVndkR2hHZFc1aklEMGdaV0VzSUhSb2FYTXVaR1Z3ZEdoVVpYTjBJRDBnSVRBc0lIUm9hWE11WkdWd2RHaFhjbWwwWlNBOUlDRXdMQ0IwYUdsekxuTjBaVzVqYVd4WGNtbDBaVTFoYzJzZ1BTQXlOVFVzSUhSb2FYTXVjM1JsYm1OcGJFWjFibU1nUFNCVlpDd2dkR2hwY3k1emRHVnVZMmxzVW1WbUlEMGdNQ3dnZEdocGN5NXpkR1Z1WTJsc1JuVnVZMDFoYzJzZ1BTQXlOVFVzSUhSb2FYTXVjM1JsYm1OcGJFWmhhV3dnUFNCMmJ5d2dkR2hwY3k1emRHVnVZMmxzV2taaGFXd2dQU0IyYnl3Z2RHaHBjeTV6ZEdWdVkybHNXbEJoYzNNZ1BTQjJieXdnZEdocGN5NXpkR1Z1WTJsc1YzSnBkR1VnUFNBaE1Td2dkR2hwY3k1amJHbHdjR2x1WjFCc1lXNWxjeUE5SUc1MWJHd3NJSFJvYVhNdVkyeHBjRWx1ZEdWeWMyVmpkR2x2YmlBOUlDRXhMQ0IwYUdsekxtTnNhWEJUYUdGa2IzZHpJRDBnSVRFc0lIUm9hWE11YzJoaFpHOTNVMmxrWlNBOUlHNTFiR3dzSUhSb2FYTXVZMjlzYjNKWGNtbDBaU0E5SUNFd0xDQjBhR2x6TG5CeVpXTnBjMmx2YmlBOUlHNTFiR3dzSUhSb2FYTXVjRzlzZVdkdmJrOW1abk5sZENBOUlDRXhMQ0IwYUdsekxuQnZiSGxuYjI1UFptWnpaWFJHWVdOMGIzSWdQU0F3TENCMGFHbHpMbkJ2YkhsbmIyNVBabVp6WlhSVmJtbDBjeUE5SURBc0lIUm9hWE11WkdsMGFHVnlhVzVuSUQwZ0lURXNJSFJvYVhNdVlXeHdhR0ZVYjBOdmRtVnlZV2RsSUQwZ0lURXNJSFJvYVhNdWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaElEMGdJVEVzSUhSb2FYTXVkbWx6YVdKc1pTQTlJQ0V3TENCMGFHbHpMblJ2Ym1WTllYQndaV1FnUFNBaE1Dd2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlIdDlMQ0IwYUdsekxuWmxjbk5wYjI0Z1BTQXdMQ0IwYUdsekxsOWhiSEJvWVZSbGMzUWdQU0F3T3dvZ0lDQWdmUW9nSUNBZ1oyVjBJR0ZzY0doaFZHVnpkQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV3h3YUdGVVpYTjBPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHRnNjR2hoVkdWemRDaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZZV3h3YUdGVVpYTjBJRDRnTUNBaFBTQmxJRDRnTUNBbUppQjBhR2x6TG5abGNuTnBiMjRyS3l3Z2RHaHBjeTVmWVd4d2FHRlVaWE4wSUQwZ1pUc0tJQ0FnSUgwS0lDQWdJRzl1UW5WcGJHUW9LU0I3ZlFvZ0lDQWdiMjVDWldadmNtVlNaVzVrWlhJb0tTQjdmUW9nSUNBZ2IyNUNaV1p2Y21WRGIyMXdhV3hsS0NrZ2UzMEtJQ0FnSUdOMWMzUnZiVkJ5YjJkeVlXMURZV05vWlV0bGVTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmJrSmxabTl5WlVOdmJYQnBiR1V1ZEc5VGRISnBibWNvS1RzS0lDQWdJSDBLSUNBZ0lITmxkRlpoYkhWbGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdJVDA5SUhadmFXUWdNQ2tnWm05eUtHeGxkQ0IwSUdsdUlHVXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUdWYmRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVRXRjBaWEpwWVd3NklDY2lJQ3NnZENBcklDSW5JSEJoY21GdFpYUmxjaUJwY3lCMWJtUmxabWx1WldRdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZENBOVBUMGdJbk5vWVdScGJtY2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGlJZ0t5QjBhR2x6TG5SNWNHVWdLeUFpT2lBdWMyaGhaR2x1WnlCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdkR2hsSUdKdmIyeGxZVzRnTG1ac1lYUlRhR0ZrYVc1bklHbHVjM1JsWVdRdUlpa3NJSFJvYVhNdVpteGhkRk5vWVdScGJtY2dQU0J1SUQwOVBTQnJZenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwYzF0MFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM0aUlDc2dkR2hwY3k1MGVYQmxJQ3NnSWpvZ0p5SWdLeUIwSUNzZ0lpY2dhWE1nYm05MElHRWdjSEp2Y0dWeWRIa2diMllnZEdocGN5QnRZWFJsY21saGJDNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR2tnSmlZZ2FTNXBjME52Ykc5eUlEOGdhUzV6WlhRb2Jpa2dPaUJwSUNZbUlHa3VhWE5XWldOMGIzSXpJQ1ltSUc0Z0ppWWdiaTVwYzFabFkzUnZjak1nUHlCcExtTnZjSGtvYmlrZ09pQjBhR2x6VzNSZElEMGdianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTQTlQVDBnZG05cFpDQXdJSHg4SUhSNWNHVnZaaUJsSUQwOUlDSnpkSEpwYm1jaU93b2dJQ0FnSUNBZ0lIUWdKaVlnS0dVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSbGVIUjFjbVZ6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYVcxaFoyVnpPaUI3ZlFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J0WlhSaFpHRjBZVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWMybHZiam9nTkM0MUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSWsxaGRHVnlhV0ZzSWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGJtVnlZWFJ2Y2pvZ0lrMWhkR1Z5YVdGc0xuUnZTbE5QVGlJS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYmk1MWRXbGtJRDBnZEdocGN5NTFkV2xrTENCdUxuUjVjR1VnUFNCMGFHbHpMblI1Y0dVc0lIUm9hWE11Ym1GdFpTQWhQVDBnSWlJZ0ppWWdLRzR1Ym1GdFpTQTlJSFJvYVhNdWJtRnRaU2tzSUhSb2FYTXVZMjlzYjNJZ0ppWWdkR2hwY3k1amIyeHZjaTVwYzBOdmJHOXlJQ1ltSUNodUxtTnZiRzl5SUQwZ2RHaHBjeTVqYjJ4dmNpNW5aWFJJWlhnb0tTa3NJSFJvYVhNdWNtOTFaMmh1WlhOeklDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dWNtOTFaMmh1WlhOeklEMGdkR2hwY3k1eWIzVm5hRzVsYzNNcExDQjBhR2x6TG0xbGRHRnNibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG0xbGRHRnNibVZ6Y3lBOUlIUm9hWE11YldWMFlXeHVaWE56S1N3Z2RHaHBjeTV6YUdWbGJpQWhQVDBnZG05cFpDQXdJQ1ltSUNodUxuTm9aV1Z1SUQwZ2RHaHBjeTV6YUdWbGJpa3NJSFJvYVhNdWMyaGxaVzVEYjJ4dmNpQW1KaUIwYUdsekxuTm9aV1Z1UTI5c2IzSXVhWE5EYjJ4dmNpQW1KaUFvYmk1emFHVmxia052Ykc5eUlEMGdkR2hwY3k1emFHVmxia052Ykc5eUxtZGxkRWhsZUNncEtTd2dkR2hwY3k1emFHVmxibEp2ZFdkb2JtVnpjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHVMbk5vWldWdVVtOTFaMmh1WlhOeklEMGdkR2hwY3k1emFHVmxibEp2ZFdkb2JtVnpjeWtzSUhSb2FYTXVaVzFwYzNOcGRtVWdKaVlnZEdocGN5NWxiV2x6YzJsMlpTNXBjME52Ykc5eUlDWW1JQ2h1TG1WdGFYTnphWFpsSUQwZ2RHaHBjeTVsYldsemMybDJaUzVuWlhSSVpYZ29LU2tzSUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa2dKaVlnZEdocGN5NWxiV2x6YzJsMlpVbHVkR1Z1YzJsMGVTQWhQVDBnTVNBbUppQW9iaTVsYldsemMybDJaVWx1ZEdWdWMybDBlU0E5SUhSb2FYTXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa3BMQ0IwYUdsekxuTndaV04xYkdGeUlDWW1JSFJvYVhNdWMzQmxZM1ZzWVhJdWFYTkRiMnh2Y2lBbUppQW9iaTV6Y0dWamRXeGhjaUE5SUhSb2FYTXVjM0JsWTNWc1lYSXVaMlYwU0dWNEtDa3BMQ0IwYUdsekxuTndaV04xYkdGeVNXNTBaVzV6YVhSNUlDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhrZ1BTQjBhR2x6TG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1S1N3Z2RHaHBjeTV6Y0dWamRXeGhja052Ykc5eUlDWW1JSFJvYVhNdWMzQmxZM1ZzWVhKRGIyeHZjaTVwYzBOdmJHOXlJQ1ltSUNodUxuTndaV04xYkdGeVEyOXNiM0lnUFNCMGFHbHpMbk53WldOMWJHRnlRMjlzYjNJdVoyVjBTR1Y0S0NrcExDQjBhR2x6TG5Ob2FXNXBibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h1TG5Ob2FXNXBibVZ6Y3lBOUlIUm9hWE11YzJocGJtbHVaWE56S1N3Z2RHaHBjeTVqYkdWaGNtTnZZWFFnSVQwOUlIWnZhV1FnTUNBbUppQW9iaTVqYkdWaGNtTnZZWFFnUFNCMGFHbHpMbU5zWldGeVkyOWhkQ2tzSUhSb2FYTXVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpJRDBnZEdocGN5NWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTXBMQ0IwYUdsekxtTnNaV0Z5WTI5aGRFMWhjQ0FtSmlCMGFHbHpMbU5zWldGeVkyOWhkRTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WTJ4bFlYSmpiMkYwVFdGd0lEMGdkR2hwY3k1amJHVmhjbU52WVhSTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDQW1KaUIwYUdsekxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpUV0Z3SUQwZ2RHaHBjeTVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FwTENCMGFHbHpMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQ0FtSmlCMGFHbHpMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVZMnhsWVhKamIyRjBUbTl5YldGc1RXRndJRDBnZEdocGN5NWpiR1ZoY21OdllYUk9iM0p0WVd4TllYQXVkRzlLVTA5T0tHVXBMblYxYVdRc0lHNHVZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1VnUFNCMGFHbHpMbU5zWldGeVkyOWhkRTV2Y20xaGJGTmpZV3hsTG5SdlFYSnlZWGtvS1Nrc0lIUm9hWE11YldGd0lDWW1JSFJvYVhNdWJXRndMbWx6VkdWNGRIVnlaU0FtSmlBb2JpNXRZWEFnUFNCMGFHbHpMbTFoY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ2tzSUhSb2FYTXViV0YwWTJGd0lDWW1JSFJvYVhNdWJXRjBZMkZ3TG1selZHVjRkSFZ5WlNBbUppQW9iaTV0WVhSallYQWdQU0IwYUdsekxtMWhkR05oY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ2tzSUhSb2FYTXVZV3h3YUdGTllYQWdKaVlnZEdocGN5NWhiSEJvWVUxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dVlXeHdhR0ZOWVhBZ1BTQjBhR2x6TG1Gc2NHaGhUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtLU3dnZEdocGN5NXNhV2RvZEUxaGNDQW1KaUIwYUdsekxteHBaMmgwVFdGd0xtbHpWR1Y0ZEhWeVpTQW1KaUFvYmk1c2FXZG9kRTFoY0NBOUlIUm9hWE11YkdsbmFIUk5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXNJRzR1YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtnUFNCMGFHbHpMbXhwWjJoMFRXRndTVzUwWlc1emFYUjVLU3dnZEdocGN5NWhiMDFoY0NBbUppQjBhR2x6TG1GdlRXRndMbWx6VkdWNGRIVnlaU0FtSmlBb2JpNWhiMDFoY0NBOUlIUm9hWE11WVc5TllYQXVkRzlLVTA5T0tHVXBMblYxYVdRc0lHNHVZVzlOWVhCSmJuUmxibk5wZEhrZ1BTQjBhR2x6TG1GdlRXRndTVzUwWlc1emFYUjVLU3dnZEdocGN5NWlkVzF3VFdGd0lDWW1JSFJvYVhNdVluVnRjRTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WW5WdGNFMWhjQ0E5SUhSb2FYTXVZblZ0Y0UxaGNDNTBiMHBUVDA0b1pTa3VkWFZwWkN3Z2JpNWlkVzF3VTJOaGJHVWdQU0IwYUdsekxtSjFiWEJUWTJGc1pTa3NJSFJvYVhNdWJtOXliV0ZzVFdGd0lDWW1JSFJvYVhNdWJtOXliV0ZzVFdGd0xtbHpWR1Y0ZEhWeVpTQW1KaUFvYmk1dWIzSnRZV3hOWVhBZ1BTQjBhR2x6TG01dmNtMWhiRTFoY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ3dnYmk1dWIzSnRZV3hOWVhCVWVYQmxJRDBnZEdocGN5NXViM0p0WVd4TllYQlVlWEJsTENCdUxtNXZjbTFoYkZOallXeGxJRDBnZEdocGN5NXViM0p0WVd4VFkyRnNaUzUwYjBGeWNtRjVLQ2twTENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQW1KaUIwYUdsekxtUnBjM0JzWVdObGJXVnVkRTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WkdsemNHeGhZMlZ0Wlc1MFRXRndJRDBnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FzSUc0dVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVZ1BTQjBhR2x6TG1ScGMzQnNZV05sYldWdWRGTmpZV3hsTENCdUxtUnBjM0JzWVdObGJXVnVkRUpwWVhNZ1BTQjBhR2x6TG1ScGMzQnNZV05sYldWdWRFSnBZWE1wTENCMGFHbHpMbkp2ZFdkb2JtVnpjMDFoY0NBbUppQjBhR2x6TG5KdmRXZG9ibVZ6YzAxaGNDNXBjMVJsZUhSMWNtVWdKaVlnS0c0dWNtOTFaMmh1WlhOelRXRndJRDBnZEdocGN5NXliM1ZuYUc1bGMzTk5ZWEF1ZEc5S1UwOU9LR1VwTG5WMWFXUXBMQ0IwYUdsekxtMWxkR0ZzYm1WemMwMWhjQ0FtSmlCMGFHbHpMbTFsZEdGc2JtVnpjMDFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1YldWMFlXeHVaWE56VFdGd0lEMGdkR2hwY3k1dFpYUmhiRzVsYzNOTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG1WdGFYTnphWFpsVFdGd0lDWW1JSFJvYVhNdVpXMXBjM05wZG1WTllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxtVnRhWE56YVhabFRXRndJRDBnZEdocGN5NWxiV2x6YzJsMlpVMWhjQzUwYjBwVFQwNG9aU2t1ZFhWcFpDa3NJSFJvYVhNdWMzQmxZM1ZzWVhKTllYQWdKaVlnZEdocGN5NXpjR1ZqZFd4aGNrMWhjQzVwYzFSbGVIUjFjbVVnSmlZZ0tHNHVjM0JsWTNWc1lYSk5ZWEFnUFNCMGFHbHpMbk53WldOMWJHRnlUV0Z3TG5SdlNsTlBUaWhsS1M1MWRXbGtLU3dnZEdocGN5NXpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVVMWhjQ0FtSmlCMGFHbHpMbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3TG1selZHVjRkSFZ5WlNBbUppQW9iaTV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0NBOUlIUm9hWE11YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBdWRHOUtVMDlPS0dVcExuVjFhV1FwTENCMGFHbHpMbk53WldOMWJHRnlRMjlzYjNKTllYQWdKaVlnZEdocGN5NXpjR1ZqZFd4aGNrTnZiRzl5VFdGd0xtbHpWR1Y0ZEhWeVpTQW1KaUFvYmk1emNHVmpkV3hoY2tOdmJHOXlUV0Z3SUQwZ2RHaHBjeTV6Y0dWamRXeGhja052Ykc5eVRXRndMblJ2U2xOUFRpaGxLUzUxZFdsa0tTd2dkR2hwY3k1bGJuWk5ZWEFnSmlZZ2RHaHBjeTVsYm5aTllYQXVhWE5VWlhoMGRYSmxJQ1ltSUNodUxtVnVkazFoY0NBOUlIUm9hWE11Wlc1MlRXRndMblJ2U2xOUFRpaGxLUzUxZFdsa0xDQjBhR2x6TG1OdmJXSnBibVVnSVQwOUlIWnZhV1FnTUNBbUppQW9iaTVqYjIxaWFXNWxJRDBnZEdocGN5NWpiMjFpYVc1bEtTa3NJSFJvYVhNdVpXNTJUV0Z3U1c1MFpXNXphWFI1SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1Wlc1MlRXRndTVzUwWlc1emFYUjVJRDBnZEdocGN5NWxiblpOWVhCSmJuUmxibk5wZEhrcExDQjBhR2x6TG5KbFpteGxZM1JwZG1sMGVTQWhQVDBnZG05cFpDQXdJQ1ltSUNodUxuSmxabXhsWTNScGRtbDBlU0E5SUhSb2FYTXVjbVZtYkdWamRHbDJhWFI1S1N3Z2RHaHBjeTV5WldaeVlXTjBhVzl1VW1GMGFXOGdJVDA5SUhadmFXUWdNQ0FtSmlBb2JpNXlaV1p5WVdOMGFXOXVVbUYwYVc4Z1BTQjBhR2x6TG5KbFpuSmhZM1JwYjI1U1lYUnBieWtzSUhSb2FYTXVaM0poWkdsbGJuUk5ZWEFnSmlZZ2RHaHBjeTVuY21Ga2FXVnVkRTFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1WjNKaFpHbGxiblJOWVhBZ1BTQjBhR2x6TG1keVlXUnBaVzUwVFdGd0xuUnZTbE5QVGlobEtTNTFkV2xrS1N3Z2RHaHBjeTUwY21GdWMyMXBjM05wYjI0Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYmk1MGNtRnVjMjFwYzNOcGIyNGdQU0IwYUdsekxuUnlZVzV6YldsemMybHZiaWtzSUhSb2FYTXVkSEpoYm5OdGFYTnphVzl1VFdGd0lDWW1JSFJvYVhNdWRISmhibk50YVhOemFXOXVUV0Z3TG1selZHVjRkSFZ5WlNBbUppQW9iaTUwY21GdWMyMXBjM05wYjI1TllYQWdQU0IwYUdsekxuUnlZVzV6YldsemMybHZiazFoY0M1MGIwcFRUMDRvWlNrdWRYVnBaQ2tzSUhSb2FYTXVkR2hwWTJ0dVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVkR2hwWTJ0dVpYTnpJRDBnZEdocGN5NTBhR2xqYTI1bGMzTXBMQ0IwYUdsekxuUm9hV05yYm1WemMwMWhjQ0FtSmlCMGFHbHpMblJvYVdOcmJtVnpjMDFoY0M1cGMxUmxlSFIxY21VZ0ppWWdLRzR1ZEdocFkydHVaWE56VFdGd0lEMGdkR2hwY3k1MGFHbGphMjVsYzNOTllYQXVkRzlLVTA5T0tHVXBMblYxYVdRcExDQjBhR2x6TG1GMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYmk1aGRIUmxiblZoZEdsdmJrUnBjM1JoYm1ObElEMGdkR2hwY3k1aGRIUmxiblZoZEdsdmJrUnBjM1JoYm1ObEtTd2dkR2hwY3k1aGRIUmxiblZoZEdsdmJrTnZiRzl5SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1WVhSMFpXNTFZWFJwYjI1RGIyeHZjaUE5SUhSb2FYTXVZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpNW5aWFJJWlhnb0tTa3NJSFJvYVhNdWMybDZaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHVMbk5wZW1VZ1BTQjBhR2x6TG5OcGVtVXBMQ0IwYUdsekxuTm9ZV1J2ZDFOcFpHVWdJVDA5SUc1MWJHd2dKaVlnS0c0dWMyaGhaRzkzVTJsa1pTQTlJSFJvYVhNdWMyaGhaRzkzVTJsa1pTa3NJSFJvYVhNdWMybDZaVUYwZEdWdWRXRjBhVzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzR1YzJsNlpVRjBkR1Z1ZFdGMGFXOXVJRDBnZEdocGN5NXphWHBsUVhSMFpXNTFZWFJwYjI0cExDQjBhR2x6TG1Kc1pXNWthVzVuSUNFOVBTQnpjaUFtSmlBb2JpNWliR1Z1WkdsdVp5QTlJSFJvYVhNdVlteGxibVJwYm1jcExDQjBhR2x6TG5OcFpHVWdJVDA5SUVGcElDWW1JQ2h1TG5OcFpHVWdQU0IwYUdsekxuTnBaR1VwTENCMGFHbHpMblpsY25SbGVFTnZiRzl5Y3lBbUppQW9iaTUyWlhKMFpYaERiMnh2Y25NZ1BTQWhNQ2tzSUhSb2FYTXViM0JoWTJsMGVTQThJREVnSmlZZ0tHNHViM0JoWTJsMGVTQTlJSFJvYVhNdWIzQmhZMmwwZVNrc0lIUm9hWE11Wm05eWJXRjBJQ0U5UFNCamRDQW1KaUFvYmk1bWIzSnRZWFFnUFNCMGFHbHpMbVp2Y20xaGRDa3NJSFJvYVhNdWRISmhibk53WVhKbGJuUWdQVDA5SUNFd0lDWW1JQ2h1TG5SeVlXNXpjR0Z5Wlc1MElEMGdkR2hwY3k1MGNtRnVjM0JoY21WdWRDa3NJRzR1WkdWd2RHaEdkVzVqSUQwZ2RHaHBjeTVrWlhCMGFFWjFibU1zSUc0dVpHVndkR2hVWlhOMElEMGdkR2hwY3k1a1pYQjBhRlJsYzNRc0lHNHVaR1Z3ZEdoWGNtbDBaU0E5SUhSb2FYTXVaR1Z3ZEdoWGNtbDBaU3dnYmk1amIyeHZjbGR5YVhSbElEMGdkR2hwY3k1amIyeHZjbGR5YVhSbExDQnVMbk4wWlc1amFXeFhjbWwwWlNBOUlIUm9hWE11YzNSbGJtTnBiRmR5YVhSbExDQnVMbk4wWlc1amFXeFhjbWwwWlUxaGMyc2dQU0IwYUdsekxuTjBaVzVqYVd4WGNtbDBaVTFoYzJzc0lHNHVjM1JsYm1OcGJFWjFibU1nUFNCMGFHbHpMbk4wWlc1amFXeEdkVzVqTENCdUxuTjBaVzVqYVd4U1pXWWdQU0IwYUdsekxuTjBaVzVqYVd4U1pXWXNJRzR1YzNSbGJtTnBiRVoxYm1OTllYTnJJRDBnZEdocGN5NXpkR1Z1WTJsc1JuVnVZMDFoYzJzc0lHNHVjM1JsYm1OcGJFWmhhV3dnUFNCMGFHbHpMbk4wWlc1amFXeEdZV2xzTENCdUxuTjBaVzVqYVd4YVJtRnBiQ0E5SUhSb2FYTXVjM1JsYm1OcGJGcEdZV2xzTENCdUxuTjBaVzVqYVd4YVVHRnpjeUE5SUhSb2FYTXVjM1JsYm1OcGJGcFFZWE56TENCMGFHbHpMbkp2ZEdGMGFXOXVJQ1ltSUhSb2FYTXVjbTkwWVhScGIyNGdJVDA5SURBZ0ppWWdLRzR1Y205MFlYUnBiMjRnUFNCMGFHbHpMbkp2ZEdGMGFXOXVLU3dnZEdocGN5NXdiMng1WjI5dVQyWm1jMlYwSUQwOVBTQWhNQ0FtSmlBb2JpNXdiMng1WjI5dVQyWm1jMlYwSUQwZ0lUQXBMQ0IwYUdsekxuQnZiSGxuYjI1UFptWnpaWFJHWVdOMGIzSWdJVDA5SURBZ0ppWWdLRzR1Y0c5c2VXZHZiazltWm5ObGRFWmhZM1J2Y2lBOUlIUm9hWE11Y0c5c2VXZHZiazltWm5ObGRFWmhZM1J2Y2lrc0lIUm9hWE11Y0c5c2VXZHZiazltWm5ObGRGVnVhWFJ6SUNFOVBTQXdJQ1ltSUNodUxuQnZiSGxuYjI1UFptWnpaWFJWYm1sMGN5QTlJSFJvYVhNdWNHOXNlV2R2Yms5bVpuTmxkRlZ1YVhSektTd2dkR2hwY3k1c2FXNWxkMmxrZEdnZ0ppWWdkR2hwY3k1c2FXNWxkMmxrZEdnZ0lUMDlJREVnSmlZZ0tHNHViR2x1WlhkcFpIUm9JRDBnZEdocGN5NXNhVzVsZDJsa2RHZ3BMQ0IwYUdsekxtUmhjMmhUYVhwbElDRTlQU0IyYjJsa0lEQWdKaVlnS0c0dVpHRnphRk5wZW1VZ1BTQjBhR2x6TG1SaGMyaFRhWHBsS1N3Z2RHaHBjeTVuWVhCVGFYcGxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHNHVaMkZ3VTJsNlpTQTlJSFJvYVhNdVoyRndVMmw2WlNrc0lIUm9hWE11YzJOaGJHVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2JpNXpZMkZzWlNBOUlIUm9hWE11YzJOaGJHVXBMQ0IwYUdsekxtUnBkR2hsY21sdVp5QTlQVDBnSVRBZ0ppWWdLRzR1WkdsMGFHVnlhVzVuSUQwZ0lUQXBMQ0IwYUdsekxtRnNjR2hoVkdWemRDQStJREFnSmlZZ0tHNHVZV3h3YUdGVVpYTjBJRDBnZEdocGN5NWhiSEJvWVZSbGMzUXBMQ0IwYUdsekxtRnNjR2hoVkc5RGIzWmxjbUZuWlNBOVBUMGdJVEFnSmlZZ0tHNHVZV3h3YUdGVWIwTnZkbVZ5WVdkbElEMGdkR2hwY3k1aGJIQm9ZVlJ2UTI5MlpYSmhaMlVwTENCMGFHbHpMbkJ5WlcxMWJIUnBjR3hwWldSQmJIQm9ZU0E5UFQwZ0lUQWdKaVlnS0c0dWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaElEMGdkR2hwY3k1d2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFcExDQjBhR2x6TG5kcGNtVm1jbUZ0WlNBOVBUMGdJVEFnSmlZZ0tHNHVkMmx5WldaeVlXMWxJRDBnZEdocGN5NTNhWEpsWm5KaGJXVXBMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVYzYVdSMGFDQStJREVnSmlZZ0tHNHVkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9JRDBnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ3BMQ0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVZqWVhBZ0lUMDlJQ0p5YjNWdVpDSWdKaVlnS0c0dWQybHlaV1p5WVcxbFRHbHVaV05oY0NBOUlIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ2tzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WldwdmFXNGdJVDA5SUNKeWIzVnVaQ0lnSmlZZ0tHNHVkMmx5WldaeVlXMWxUR2x1WldwdmFXNGdQU0IwYUdsekxuZHBjbVZtY21GdFpVeHBibVZxYjJsdUtTd2dkR2hwY3k1bWJHRjBVMmhoWkdsdVp5QTlQVDBnSVRBZ0ppWWdLRzR1Wm14aGRGTm9ZV1JwYm1jZ1BTQjBhR2x6TG1ac1lYUlRhR0ZrYVc1bktTd2dkR2hwY3k1MmFYTnBZbXhsSUQwOVBTQWhNU0FtSmlBb2JpNTJhWE5wWW14bElEMGdJVEVwTENCMGFHbHpMblJ2Ym1WTllYQndaV1FnUFQwOUlDRXhJQ1ltSUNodUxuUnZibVZOWVhCd1pXUWdQU0FoTVNrc0lFcFRUMDR1YzNSeWFXNW5hV1o1S0hSb2FYTXVkWE5sY2tSaGRHRXBJQ0U5UFNBaWUzMGlJQ1ltSUNodUxuVnpaWEpFWVhSaElEMGdkR2hwY3k1MWMyVnlSR0YwWVNrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FTaHlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWVNCcGJpQnlLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCc0lEMGdjbHRoWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JzTG0xbGRHRmtZWFJoTENCdkxuQjFjMmdvYkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc4N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2gwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeUlEMGdhU2hsTG5SbGVIUjFjbVZ6S1N3Z2J5QTlJR2tvWlM1cGJXRm5aWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlMbXhsYm1kMGFDQStJREFnSmlZZ0tHNHVkR1Y0ZEhWeVpYTWdQU0J5S1N3Z2J5NXNaVzVuZEdnZ1BpQXdJQ1ltSUNodUxtbHRZV2RsY3lBOUlHOHBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdianNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VnUFNCbExtNWhiV1VzSUhSb2FYTXVabTluSUQwZ1pTNW1iMmNzSUhSb2FYTXVZbXhsYm1ScGJtY2dQU0JsTG1Kc1pXNWthVzVuTENCMGFHbHpMbk5wWkdVZ1BTQmxMbk5wWkdVc0lIUm9hWE11ZG1WeWRHVjRRMjlzYjNKeklEMGdaUzUyWlhKMFpYaERiMnh2Y25Nc0lIUm9hWE11YjNCaFkybDBlU0E5SUdVdWIzQmhZMmwwZVN3Z2RHaHBjeTVtYjNKdFlYUWdQU0JsTG1admNtMWhkQ3dnZEdocGN5NTBjbUZ1YzNCaGNtVnVkQ0E5SUdVdWRISmhibk53WVhKbGJuUXNJSFJvYVhNdVlteGxibVJUY21NZ1BTQmxMbUpzWlc1a1UzSmpMQ0IwYUdsekxtSnNaVzVrUkhOMElEMGdaUzVpYkdWdVpFUnpkQ3dnZEdocGN5NWliR1Z1WkVWeGRXRjBhVzl1SUQwZ1pTNWliR1Z1WkVWeGRXRjBhVzl1TENCMGFHbHpMbUpzWlc1a1UzSmpRV3h3YUdFZ1BTQmxMbUpzWlc1a1UzSmpRV3h3YUdFc0lIUm9hWE11WW14bGJtUkVjM1JCYkhCb1lTQTlJR1V1WW14bGJtUkVjM1JCYkhCb1lTd2dkR2hwY3k1aWJHVnVaRVZ4ZFdGMGFXOXVRV3h3YUdFZ1BTQmxMbUpzWlc1a1JYRjFZWFJwYjI1QmJIQm9ZU3dnZEdocGN5NWtaWEIwYUVaMWJtTWdQU0JsTG1SbGNIUm9SblZ1WXl3Z2RHaHBjeTVrWlhCMGFGUmxjM1FnUFNCbExtUmxjSFJvVkdWemRDd2dkR2hwY3k1a1pYQjBhRmR5YVhSbElEMGdaUzVrWlhCMGFGZHlhWFJsTENCMGFHbHpMbk4wWlc1amFXeFhjbWwwWlUxaGMyc2dQU0JsTG5OMFpXNWphV3hYY21sMFpVMWhjMnNzSUhSb2FYTXVjM1JsYm1OcGJFWjFibU1nUFNCbExuTjBaVzVqYVd4R2RXNWpMQ0IwYUdsekxuTjBaVzVqYVd4U1pXWWdQU0JsTG5OMFpXNWphV3hTWldZc0lIUm9hWE11YzNSbGJtTnBiRVoxYm1OTllYTnJJRDBnWlM1emRHVnVZMmxzUm5WdVkwMWhjMnNzSUhSb2FYTXVjM1JsYm1OcGJFWmhhV3dnUFNCbExuTjBaVzVqYVd4R1lXbHNMQ0IwYUdsekxuTjBaVzVqYVd4YVJtRnBiQ0E5SUdVdWMzUmxibU5wYkZwR1lXbHNMQ0IwYUdsekxuTjBaVzVqYVd4YVVHRnpjeUE5SUdVdWMzUmxibU5wYkZwUVlYTnpMQ0IwYUdsekxuTjBaVzVqYVd4WGNtbDBaU0E5SUdVdWMzUmxibU5wYkZkeWFYUmxPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdaUzVqYkdsd2NHbHVaMUJzWVc1bGN5d2diaUE5SUc1MWJHdzdDaUFnSUNBZ0lDQWdhV1lnS0hRZ0lUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0IwTG14bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpQTlJRzVsZHlCQmNuSmhlU2hwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnlJRDBnTURzZ2NpQWhQVDBnYVRzZ0t5dHlLVzViY2wwZ1BTQjBXM0pkTG1Oc2IyNWxLQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNhWEJ3YVc1blVHeGhibVZ6SUQwZ2Jpd2dkR2hwY3k1amJHbHdTVzUwWlhKelpXTjBhVzl1SUQwZ1pTNWpiR2x3U1c1MFpYSnpaV04wYVc5dUxDQjBhR2x6TG1Oc2FYQlRhR0ZrYjNkeklEMGdaUzVqYkdsd1UyaGhaRzkzY3l3Z2RHaHBjeTV6YUdGa2IzZFRhV1JsSUQwZ1pTNXphR0ZrYjNkVGFXUmxMQ0IwYUdsekxtTnZiRzl5VjNKcGRHVWdQU0JsTG1OdmJHOXlWM0pwZEdVc0lIUm9hWE11Y0hKbFkybHphVzl1SUQwZ1pTNXdjbVZqYVhOcGIyNHNJSFJvYVhNdWNHOXNlV2R2Yms5bVpuTmxkQ0E5SUdVdWNHOXNlV2R2Yms5bVpuTmxkQ3dnZEdocGN5NXdiMng1WjI5dVQyWm1jMlYwUm1GamRHOXlJRDBnWlM1d2IyeDVaMjl1VDJabWMyVjBSbUZqZEc5eUxDQjBhR2x6TG5CdmJIbG5iMjVQWm1aelpYUlZibWwwY3lBOUlHVXVjRzlzZVdkdmJrOW1abk5sZEZWdWFYUnpMQ0IwYUdsekxtUnBkR2hsY21sdVp5QTlJR1V1WkdsMGFHVnlhVzVuTENCMGFHbHpMbUZzY0doaFZHVnpkQ0E5SUdVdVlXeHdhR0ZVWlhOMExDQjBhR2x6TG1Gc2NHaGhWRzlEYjNabGNtRm5aU0E5SUdVdVlXeHdhR0ZVYjBOdmRtVnlZV2RsTENCMGFHbHpMbkJ5WlcxMWJIUnBjR3hwWldSQmJIQm9ZU0E5SUdVdWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaExDQjBhR2x6TG5acGMybGliR1VnUFNCbExuWnBjMmxpYkdVc0lIUm9hWE11ZEc5dVpVMWhjSEJsWkNBOUlHVXVkRzl1WlUxaGNIQmxaQ3dnZEdocGN5NTFjMlZ5UkdGMFlTQTlJRXBUVDA0dWNHRnljMlVvU2xOUFRpNXpkSEpwYm1kcFpua29aUzUxYzJWeVJHRjBZU2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlaR2x6Y0c5elpTSUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lIMEtJQ0FnSUhObGRDQnVaV1ZrYzFWd1pHRjBaU2hsS1NCN0NpQWdJQ0FnSUNBZ1pTQTlQVDBnSVRBZ0ppWWdkR2hwY3k1MlpYSnphVzl1S3lzN0NpQWdJQ0I5Q24wN0NtUjBMbkJ5YjNSdmRIbHdaUzVwYzAxaGRHVnlhV0ZzSUQwZ0lUQTdDblpoY2lBa1l5QTlJSHNLSUNBZ0lHRnNhV05sWW14MVpUb2dNVFUzT1RJek9ETXNDaUFnSUNCaGJuUnBjWFZsZDJocGRHVTZJREUyTkRRME16YzFMQW9nSUNBZ1lYRjFZVG9nTmpVMU16VXNDaUFnSUNCaGNYVmhiV0Z5YVc1bE9pQTRNemc0TlRZMExBb2dJQ0FnWVhwMWNtVTZJREUxTnprME1UYzFMQW9nSUNBZ1ltVnBaMlU2SURFMk1URTVNall3TEFvZ0lDQWdZbWx6Y1hWbE9pQXhOamMzTURJME5Dd0tJQ0FnSUdKc1lXTnJPaUF3TEFvZ0lDQWdZbXhoYm1Ob1pXUmhiRzF2Ym1RNklERTJOemN5TURRMUxBb2dJQ0FnWW14MVpUb2dNalUxTEFvZ0lDQWdZbXgxWlhacGIyeGxkRG9nT1RBMU5USXdNaXdLSUNBZ0lHSnliM2R1T2lBeE1EZ3lOREl6TkN3S0lDQWdJR0oxY214NWQyOXZaRG9nTVRRMU9UWXlNekVzQ2lBZ0lDQmpZV1JsZEdKc2RXVTZJRFl5TmpZMU1qZ3NDaUFnSUNCamFHRnlkSEpsZFhObE9pQTRNemc0TXpVeUxBb2dJQ0FnWTJodlkyOXNZWFJsT2lBeE16YzRPVFEzTUN3S0lDQWdJR052Y21Gc09pQXhOamMwTkRJM01pd0tJQ0FnSUdOdmNtNW1iRzkzWlhKaWJIVmxPaUEyTlRreE9UZ3hMQW9nSUNBZ1kyOXlibk5wYkdzNklERTJOemMxTXpnNExBb2dJQ0FnWTNKcGJYTnZiam9nTVRRME1qTXhNREFzQ2lBZ0lDQmplV0Z1T2lBMk5UVXpOU3dLSUNBZ0lHUmhjbXRpYkhWbE9pQXhNemtzQ2lBZ0lDQmtZWEpyWTNsaGJqb2dNelUzTWpNc0NpQWdJQ0JrWVhKcloyOXNaR1Z1Y205a09pQXhNakE1TWprek9Td0tJQ0FnSUdSaGNtdG5jbUY1T2lBeE1URXhPVEF4Tnl3S0lDQWdJR1JoY210bmNtVmxiam9nTWpVMk1EQXNDaUFnSUNCa1lYSnJaM0psZVRvZ01URXhNVGt3TVRjc0NpQWdJQ0JrWVhKcmEyaGhhMms2SURFeU5ETXpNalU1TEFvZ0lDQWdaR0Z5YTIxaFoyVnVkR0U2SURreE1EazJORE1zQ2lBZ0lDQmtZWEpyYjJ4cGRtVm5jbVZsYmpvZ05UVTVOems1T1N3S0lDQWdJR1JoY210dmNtRnVaMlU2SURFMk56UTNOVEl3TEFvZ0lDQWdaR0Z5YTI5eVkyaHBaRG9nTVRBd05EQXdNVElzQ2lBZ0lDQmtZWEpyY21Wa09pQTVNVEE1TlRBMExBb2dJQ0FnWkdGeWEzTmhiRzF2YmpvZ01UVXpNRGcwTVRBc0NpQWdJQ0JrWVhKcmMyVmhaM0psWlc0NklEazBNVGs1TVRrc0NpQWdJQ0JrWVhKcmMyeGhkR1ZpYkhWbE9pQTBOek0wTXpRM0xBb2dJQ0FnWkdGeWEzTnNZWFJsWjNKaGVUb2dNekV3TURRNU5Td0tJQ0FnSUdSaGNtdHpiR0YwWldkeVpYazZJRE14TURBME9UVXNDaUFnSUNCa1lYSnJkSFZ5Y1hWdmFYTmxPaUExTWprME5Td0tJQ0FnSUdSaGNtdDJhVzlzWlhRNklEazJPVGsxTXprc0NpQWdJQ0JrWldWd2NHbHVhem9nTVRZM01UWTVORGNzQ2lBZ0lDQmtaV1Z3YzJ0NVlteDFaVG9nTkRreE5URXNDaUFnSUNCa2FXMW5jbUY1T2lBMk9UQTRNalkxTEFvZ0lDQWdaR2x0WjNKbGVUb2dOamt3T0RJMk5Td0tJQ0FnSUdSdlpHZGxjbUpzZFdVNklESXdNRE14T1Rrc0NpQWdJQ0JtYVhKbFluSnBZMnM2SURFeE5qYzBNVFEyTEFvZ0lDQWdabXh2Y21Gc2QyaHBkR1U2SURFMk56YzFPVEl3TEFvZ0lDQWdabTl5WlhOMFozSmxaVzQ2SURJeU5qTTRORElzQ2lBZ0lDQm1kV05vYzJsaE9pQXhOamN4TVRrek5Td0tJQ0FnSUdkaGFXNXpZbTl5YnpvZ01UUTBOelEwTmpBc0NpQWdJQ0JuYUc5emRIZG9hWFJsT2lBeE5qTXhOalkzTVN3S0lDQWdJR2R2YkdRNklERTJOelkyTnpJd0xBb2dJQ0FnWjI5c1pHVnVjbTlrT2lBeE5ETXlPVEV5TUN3S0lDQWdJR2R5WVhrNklEZzBNakUxTURRc0NpQWdJQ0JuY21WbGJqb2dNekkzTmpnc0NpQWdJQ0JuY21WbGJubGxiR3h2ZHpvZ01URTBNRE13TlRVc0NpQWdJQ0JuY21WNU9pQTROREl4TlRBMExBb2dJQ0FnYUc5dVpYbGtaWGM2SURFMU56azBNVFl3TEFvZ0lDQWdhRzkwY0dsdWF6b2dNVFkzTXpnM05EQXNDaUFnSUNCcGJtUnBZVzV5WldRNklERXpORFU0TlRJMExBb2dJQ0FnYVc1a2FXZHZPaUEwT1RFMU16TXdMQW9nSUNBZ2FYWnZjbms2SURFMk56YzNNakF3TEFvZ0lDQWdhMmhoYTJrNklERTFOemczTmpZd0xBb2dJQ0FnYkdGMlpXNWtaWEk2SURFMU1UTXlOREV3TEFvZ0lDQWdiR0YyWlc1a1pYSmliSFZ6YURvZ01UWTNOek16TmpVc0NpQWdJQ0JzWVhkdVozSmxaVzQ2SURneE9UQTVOellzQ2lBZ0lDQnNaVzF2Ym1Ob2FXWm1iMjQ2SURFMk56YzFPRGcxTEFvZ0lDQWdiR2xuYUhSaWJIVmxPaUF4TVRNNU16STFOQ3dLSUNBZ0lHeHBaMmgwWTI5eVlXdzZJREUxTnpZeE5UTTJMQW9nSUNBZ2JHbG5hSFJqZVdGdU9pQXhORGMwTlRVNU9Td0tJQ0FnSUd4cFoyaDBaMjlzWkdWdWNtOWtlV1ZzYkc5M09pQXhOalEwT0RJeE1Dd0tJQ0FnSUd4cFoyaDBaM0poZVRvZ01UTTRPREl6TWpNc0NpQWdJQ0JzYVdkb2RHZHlaV1Z1T2lBNU5EazRNalUyTEFvZ0lDQWdiR2xuYUhSbmNtVjVPaUF4TXpnNE1qTXlNeXdLSUNBZ0lHeHBaMmgwY0dsdWF6b2dNVFkzTlRnME5qVXNDaUFnSUNCc2FXZG9kSE5oYkcxdmJqb2dNVFkzTlRJM05qSXNDaUFnSUNCc2FXZG9kSE5sWVdkeVpXVnVPaUF5TVRReU9Ea3dMQW9nSUNBZ2JHbG5hSFJ6YTNsaWJIVmxPaUE0T1RBd016UTJMQW9nSUNBZ2JHbG5hSFJ6YkdGMFpXZHlZWGs2SURjNE16TTNOVE1zQ2lBZ0lDQnNhV2RvZEhOc1lYUmxaM0psZVRvZ056Z3pNemMxTXl3S0lDQWdJR3hwWjJoMGMzUmxaV3hpYkhWbE9pQXhNVFU0TkRjek5Dd0tJQ0FnSUd4cFoyaDBlV1ZzYkc5M09pQXhOamMzTnpFNE5Dd0tJQ0FnSUd4cGJXVTZJRFkxTWpnd0xBb2dJQ0FnYkdsdFpXZHlaV1Z1T2lBek16STVNek13TEFvZ0lDQWdiR2x1Wlc0NklERTJORFExTmpjd0xBb2dJQ0FnYldGblpXNTBZVG9nTVRZM01URTVNelVzQ2lBZ0lDQnRZWEp2YjI0NklEZ3pPRGcyTURnc0NpQWdJQ0J0WldScGRXMWhjWFZoYldGeWFXNWxPaUEyTnpNM016SXlMQW9nSUNBZ2JXVmthWFZ0WW14MVpUb2dNakExTEFvZ0lDQWdiV1ZrYVhWdGIzSmphR2xrT2lBeE1qSXhNVFkyTnl3S0lDQWdJRzFsWkdsMWJYQjFjbkJzWlRvZ09UWTJNalk0TXl3S0lDQWdJRzFsWkdsMWJYTmxZV2R5WldWdU9pQXpPVGM0TURrM0xBb2dJQ0FnYldWa2FYVnRjMnhoZEdWaWJIVmxPaUE0TURnM056a3dMQW9nSUNBZ2JXVmthWFZ0YzNCeWFXNW5aM0psWlc0NklEWTBNVFUwTEFvZ0lDQWdiV1ZrYVhWdGRIVnljWFZ2YVhObE9pQTBOemN5TXpBd0xBb2dJQ0FnYldWa2FYVnRkbWx2YkdWMGNtVmtPaUF4TXpBME56RTNNeXdLSUNBZ0lHMXBaRzVwWjJoMFlteDFaVG9nTVRZME5Ea3hNaXdLSUNBZ0lHMXBiblJqY21WaGJUb2dNVFl4TWpFNE5UQXNDaUFnSUNCdGFYTjBlWEp2YzJVNklERTJOemN3TWpjekxBb2dJQ0FnYlc5alkyRnphVzQ2SURFMk56Y3dNakk1TEFvZ0lDQWdibUYyWVdwdmQyaHBkR1U2SURFMk56WTROamcxTEFvZ0lDQWdibUYyZVRvZ01USTRMQW9nSUNBZ2IyeGtiR0ZqWlRvZ01UWTJORE0xTlRnc0NpQWdJQ0J2YkdsMlpUb2dPRFF5TVRNM05pd0tJQ0FnSUc5c2FYWmxaSEpoWWpvZ056QTBPRGN6T1N3S0lDQWdJRzl5WVc1blpUb2dNVFkzTlRNNU1qQXNDaUFnSUNCdmNtRnVaMlZ5WldRNklERTJOekk1TXpRMExBb2dJQ0FnYjNKamFHbGtPaUF4TkRNeE5UY3pOQ3dLSUNBZ0lIQmhiR1ZuYjJ4a1pXNXliMlE2SURFMU5qVTNNVE13TEFvZ0lDQWdjR0ZzWldkeVpXVnVPaUF4TURBeU5UZzRNQ3dLSUNBZ0lIQmhiR1YwZFhKeGRXOXBjMlU2SURFeE5USTVPVFkyTEFvZ0lDQWdjR0ZzWlhacGIyeGxkSEpsWkRvZ01UUXpPREV5TURNc0NpQWdJQ0J3WVhCaGVXRjNhR2x3T2lBeE5qYzNNekEzTnl3S0lDQWdJSEJsWVdOb2NIVm1aam9nTVRZM05qYzJOek1zQ2lBZ0lDQndaWEoxT2lBeE16UTJPRGs1TVN3S0lDQWdJSEJwYm1zNklERTJOell4TURNMUxBb2dJQ0FnY0d4MWJUb2dNVFExTWpRMk16Y3NDaUFnSUNCd2IzZGtaWEppYkhWbE9pQXhNVFU1TVRreE1Dd0tJQ0FnSUhCMWNuQnNaVG9nT0RNNE9EY3pOaXdLSUNBZ0lISmxZbVZqWTJGd2RYSndiR1U2SURZMk9UYzRPREVzQ2lBZ0lDQnlaV1E2SURFMk56RXhOamd3TEFvZ0lDQWdjbTl6ZVdKeWIzZHVPaUF4TWpNMU56VXhPU3dLSUNBZ0lISnZlV0ZzWW14MVpUb2dOREk0TmprME5Td0tJQ0FnSUhOaFpHUnNaV0p5YjNkdU9pQTVNVEkzTVRnM0xBb2dJQ0FnYzJGc2JXOXVPaUF4TmpReE5qZzRNaXdLSUNBZ0lITmhibVI1WW5KdmQyNDZJREUyTURNeU9EWTBMQW9nSUNBZ2MyVmhaM0psWlc0NklETXdOVEF6TWpjc0NpQWdJQ0J6WldGemFHVnNiRG9nTVRZM056UTJNemdzQ2lBZ0lDQnphV1Z1Ym1FNklERXdOVEEyTnprM0xBb2dJQ0FnYzJsc2RtVnlPaUF4TWpZek1qSTFOaXdLSUNBZ0lITnJlV0pzZFdVNklEZzVNREF6TXpFc0NpQWdJQ0J6YkdGMFpXSnNkV1U2SURZNU56QXdOakVzQ2lBZ0lDQnpiR0YwWldkeVlYazZJRGN6TnpJNU5EUXNDaUFnSUNCemJHRjBaV2R5WlhrNklEY3pOekk1TkRRc0NpQWdJQ0J6Ym05M09pQXhOamMzTlRrek1Dd0tJQ0FnSUhOd2NtbHVaMmR5WldWdU9pQTJOVFF3Tnl3S0lDQWdJSE4wWldWc1lteDFaVG9nTkRZeU1EazRNQ3dLSUNBZ0lIUmhiam9nTVRNNE1EZzNPREFzQ2lBZ0lDQjBaV0ZzT2lBek1qZzVOaXdLSUNBZ0lIUm9hWE4wYkdVNklERTBNakEwT0RnNExBb2dJQ0FnZEc5dFlYUnZPaUF4Tmpjek56QTVOU3dLSUNBZ0lIUjFjbkYxYjJselpUb2dOREkxTVRnMU5pd0tJQ0FnSUhacGIyeGxkRG9nTVRVMk16RXdPRFlzQ2lBZ0lDQjNhR1ZoZERvZ01UWXhNVE16TXpFc0NpQWdJQ0IzYUdsMFpUb2dNVFkzTnpjeU1UVXNDaUFnSUNCM2FHbDBaWE50YjJ0bE9pQXhOakV4T1RJNE5Td0tJQ0FnSUhsbGJHeHZkem9nTVRZM056WTVOakFzQ2lBZ0lDQjVaV3hzYjNkbmNtVmxiam9nTVRBeE5EVXdOelFLZlN3Z1JuUWdQU0I3Q2lBZ0lDQm9PaUF3TEFvZ0lDQWdjem9nTUN3S0lDQWdJR3c2SURBS2ZTd2dhbklnUFNCN0NpQWdJQ0JvT2lBd0xBb2dJQ0FnY3pvZ01Dd0tJQ0FnSUd3NklEQUtmVHNLWm5WdVkzUnBiMjRnU1c4b2N5d2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJSFFnUENBd0lDWW1JQ2gwSUNzOUlERXBMQ0IwSUQ0Z01TQW1KaUFvZENBdFBTQXhLU3dnZENBOElERWdMeUEySUQ4Z2N5QXJJQ2hsSUMwZ2N5a2dLaUEySUNvZ2RDQTZJSFFnUENBeElDOGdNaUEvSUdVZ09pQjBJRHdnTWlBdklETWdQeUJ6SUNzZ0tHVWdMU0J6S1NBcUlEWWdLaUFvTWlBdklETWdMU0IwS1NBNklITTdDbjBLWm5WdVkzUnBiMjRnUkc4b2N5a2dld29nSUNBZ2NtVjBkWEp1SUhNZ1BDQXVNRFF3TkRVZ1B5QnpJQ29nTGpBM056TTVPVE00TURnZ09pQk5ZWFJvTG5CdmR5aHpJQ29nTGprME56ZzJOekk1T0RZZ0t5QXVNRFV5TVRNeU56QXhOQ3dnTWk0MEtUc0tmUXBtZFc1amRHbHZiaUJHYnloektTQjdDaUFnSUNCeVpYUjFjbTRnY3lBOElDNHdNRE14TXpBNElEOGdjeUFxSURFeUxqa3lJRG9nTVM0d05UVWdLaUJOWVhSb0xuQnZkeWh6TENBdU5ERTJOallwSUMwZ0xqQTFOVHNLZlFwMllYSWdZV1VnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVLWHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlHNGdQVDA5SUhadmFXUWdNQ0EvSUhSb2FYTXVjMlYwS0dVcElEb2dkR2hwY3k1elpYUlNSMElvWlN3Z2RDd2diaWs3Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUNZbUlHVXVhWE5EYjJ4dmNpQS9JSFJvYVhNdVkyOXdlU2hsS1NBNklIUjVjR1Z2WmlCbElEMDlJQ0p1ZFcxaVpYSWlJRDhnZEdocGN5NXpaWFJJWlhnb1pTa2dPaUIwZVhCbGIyWWdaU0E5UFNBaWMzUnlhVzVuSWlBbUppQjBhR2x6TG5ObGRGTjBlV3hsS0dVcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBVMk5oYkdGeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eUlEMGdaU3dnZEdocGN5NW5JRDBnWlN3Z2RHaHBjeTVpSUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRWhsZUNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdQU0JOWVhSb0xtWnNiMjl5S0dVcExDQjBhR2x6TG5JZ1BTQW9aU0ErUGlBeE5pQW1JREkxTlNrZ0x5QXlOVFVzSUhSb2FYTXVaeUE5SUNobElENCtJRGdnSmlBeU5UVXBJQzhnTWpVMUxDQjBhR2x6TG1JZ1BTQW9aU0FtSURJMU5Ta2dMeUF5TlRVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUlNSMElvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSWdQU0JsTENCMGFHbHpMbWNnUFNCMExDQjBhR2x6TG1JZ1BTQnVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwU0ZOTUtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBOUlHUmhLR1VzSURFcExDQjBJRDBnYlhRb2RDd2dNQ3dnTVNrc0lHNGdQU0J0ZENodUxDQXdMQ0F4S1N3Z2RDQTlQVDBnTUNrZ2RHaHBjeTV5SUQwZ2RHaHBjeTVuSUQwZ2RHaHBjeTVpSUQwZ2Jqc0tJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVJRHc5SUM0MUlEOGdiaUFxSUNneElDc2dkQ2tnT2lCdUlDc2dkQ0F0SUc0Z0tpQjBMQ0J5SUQwZ01pQXFJRzRnTFNCcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSWdQU0JKYnloeUxDQnBMQ0JsSUNzZ01TQXZJRE1wTENCMGFHbHpMbWNnUFNCSmJ5aHlMQ0JwTENCbEtTd2dkR2hwY3k1aUlEMGdTVzhvY2l3Z2FTd2daU0F0SURFZ0x5QXpLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJUZEhsc1pTaGxLU0I3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZENocEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdrZ0lUMDlJSFp2YVdRZ01DQW1KaUJ3WVhKelpVWnNiMkYwS0drcElEd2dNU0FtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrTnZiRzl5T2lCQmJIQm9ZU0JqYjIxd2IyNWxiblFnYjJZZ0lpQXJJR1VnS3lBaUlIZHBiR3dnWW1VZ2FXZHViM0psWkM0aUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUc0N0NpQWdJQ0FnSUNBZ2FXWWdLRzRnUFNBdlhpZ29QenB5WjJKOGFITnNLV0UvS1Z3b0tGdGVYQ2xkS2lsY0tTOHVaWGhsWXlobEtTa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU3dnY2lBOUlHNWJNVjBzSUc4Z1BTQnVXekpkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnb2NpbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKeVoySWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWNtZGlZU0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUFNBdlhseHpLaWhjWkNzcFhITXFMRnh6S2loY1pDc3BYSE1xTEZ4ektpaGNaQ3NwWEhNcUtEODZMRnh6S2loY1pDcGNMajljWkNzcFhITXFLVDhrTHk1bGVHVmpLRzhwS1NCeVpYUjFjbTRnZEdocGN5NXlJRDBnVFdGMGFDNXRhVzRvTWpVMUxDQndZWEp6WlVsdWRDaHBXekZkTENBeE1Da3BJQzhnTWpVMUxDQjBhR2x6TG1jZ1BTQk5ZWFJvTG0xcGJpZ3lOVFVzSUhCaGNuTmxTVzUwS0dsYk1sMHNJREV3S1NrZ0x5QXlOVFVzSUhSb2FYTXVZaUE5SUUxaGRHZ3ViV2x1S0RJMU5Td2djR0Z5YzJWSmJuUW9hVnN6WFN3Z01UQXBLU0F2SURJMU5Td2dkQ2hwV3pSZEtTd2dkR2hwY3pzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBOUlDOWVYSE1xS0Z4a0t5bGNKVnh6S2l4Y2N5b29YR1FyS1Z3bFhITXFMRnh6S2loY1pDc3BYQ1ZjY3lvb1B6b3NYSE1xS0Z4a0tsd3VQMXhrS3lsY2N5b3BQeVF2TG1WNFpXTW9ieWtwSUhKbGRIVnliaUIwYUdsekxuSWdQU0JOWVhSb0xtMXBiaWd4TURBc0lIQmhjbk5sU1c1MEtHbGJNVjBzSURFd0tTa2dMeUF4TURBc0lIUm9hWE11WnlBOUlFMWhkR2d1YldsdUtERXdNQ3dnY0dGeWMyVkpiblFvYVZzeVhTd2dNVEFwS1NBdklERXdNQ3dnZEdocGN5NWlJRDBnVFdGMGFDNXRhVzRvTVRBd0xDQndZWEp6WlVsdWRDaHBXek5kTENBeE1Da3BJQzhnTVRBd0xDQjBLR2xiTkYwcExDQjBhR2x6T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlhSE5zSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbWh6YkdFaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElEMGdMMTVjY3lvb1hHUXFYQzQvWEdRcktWeHpLaXhjY3lvb1hHUXJLVndsWEhNcUxGeHpLaWhjWkNzcFhDVmNjeW9vUHpvc1hITXFLRnhrS2x3dVAxeGtLeWxjY3lvcFB5UXZMbVY0WldNb2J5a3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdFZ1BTQndZWEp6WlVac2IyRjBLR2xiTVYwcElDOGdNell3TENCc0lEMGdjR0Z5YzJWSmJuUW9hVnN5WFN3Z01UQXBJQzhnTVRBd0xDQmpJRDBnY0dGeWMyVkpiblFvYVZzelhTd2dNVEFwSUM4Z01UQXdPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDaHBXelJkS1N3Z2RHaHBjeTV6WlhSSVUwd29ZU3dnYkN3Z1l5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1SUQwZ0wxNWNJeWhiUVMxR1lTMW1YR1JkS3lra0x5NWxlR1ZqS0dVcEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnYmxzeFhTd2djaUE5SUdrdWJHVnVaM1JvT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdNeWtnY21WMGRYSnVJSFJvYVhNdWNpQTlJSEJoY25ObFNXNTBLR2t1WTJoaGNrRjBLREFwSUNzZ2FTNWphR0Z5UVhRb01Da3NJREUyS1NBdklESTFOU3dnZEdocGN5NW5JRDBnY0dGeWMyVkpiblFvYVM1amFHRnlRWFFvTVNrZ0t5QnBMbU5vWVhKQmRDZ3hLU3dnTVRZcElDOGdNalUxTENCMGFHbHpMbUlnUFNCd1lYSnpaVWx1ZENocExtTm9ZWEpCZENneUtTQXJJR2t1WTJoaGNrRjBLRElwTENBeE5pa2dMeUF5TlRVc0lIUm9hWE03Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQTJLU0J5WlhSMWNtNGdkR2hwY3k1eUlEMGdjR0Z5YzJWSmJuUW9hUzVqYUdGeVFYUW9NQ2tnS3lCcExtTm9ZWEpCZENneEtTd2dNVFlwSUM4Z01qVTFMQ0IwYUdsekxtY2dQU0J3WVhKelpVbHVkQ2hwTG1Ob1lYSkJkQ2d5S1NBcklHa3VZMmhoY2tGMEtETXBMQ0F4TmlrZ0x5QXlOVFVzSUhSb2FYTXVZaUE5SUhCaGNuTmxTVzUwS0drdVkyaGhja0YwS0RRcElDc2dhUzVqYUdGeVFYUW9OU2tzSURFMktTQXZJREkxTlN3Z2RHaHBjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1VnSmlZZ1pTNXNaVzVuZEdnZ1BpQXdJRDhnZEdocGN5NXpaWFJEYjJ4dmNrNWhiV1VvWlNrZ09pQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBRMjlzYjNKT1lXMWxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUNSalcyVXVkRzlNYjNkbGNrTmhjMlVvS1YwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0lUMDlJSFp2YVdRZ01DQS9JSFJvYVhNdWMyVjBTR1Y0S0hRcElEb2dZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVEYjJ4dmNqb2dWVzVyYm05M2JpQmpiMnh2Y2lBaUlDc2daU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvZEdocGN5NXlMQ0IwYUdsekxtY3NJSFJvYVhNdVlpazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eUlEMGdaUzV5TENCMGFHbHpMbWNnUFNCbExtY3NJSFJvYVhNdVlpQTlJR1V1WWl3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOdmNIbFRVa2RDVkc5TWFXNWxZWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnUFNCRWJ5aGxMbklwTENCMGFHbHpMbWNnUFNCRWJ5aGxMbWNwTENCMGFHbHpMbUlnUFNCRWJ5aGxMbUlwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VVeHBibVZoY2xSdlUxSkhRaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjaUE5SUVadktHVXVjaWtzSUhSb2FYTXVaeUE5SUVadktHVXVaeWtzSUhSb2FYTXVZaUE5SUVadktHVXVZaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYjI1MlpYSjBVMUpIUWxSdlRHbHVaV0Z5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52Y0hsVFVrZENWRzlNYVc1bFlYSW9kR2hwY3lrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIyNTJaWEowVEdsdVpXRnlWRzlUVWtkQ0tDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmNIbE1hVzVsWVhKVWIxTlNSMElvZEdocGN5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJJWlhnb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y2lBcUlESTFOU0E4UENBeE5pQmVJSFJvYVhNdVp5QXFJREkxTlNBOFBDQTRJRjRnZEdocGN5NWlJQ29nTWpVMUlEdzhJREE3Q2lBZ0lDQjlDaUFnSUNCblpYUklaWGhUZEhKcGJtY29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ2dpTURBd01EQXdJaUFySUhSb2FYTXVaMlYwU0dWNEtDa3VkRzlUZEhKcGJtY29NVFlwS1M1emJHbGpaU2d0TmlrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJJVTB3b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1eUxDQnVJRDBnZEdocGN5NW5MQ0JwSUQwZ2RHaHBjeTVpTENCeUlEMGdUV0YwYUM1dFlYZ29kQ3dnYml3Z2FTa3NJRzhnUFNCTllYUm9MbTFwYmloMExDQnVMQ0JwS1N3Z1lTd2diQ3dnWXlBOUlDaHZJQ3NnY2lrZ0x5QXlPd29nSUNBZ0lDQWdJR2xtSUNodklEMDlQU0J5S1NCaElEMGdNQ3dnYkNBOUlEQTdDaUFnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb0lEMGdjaUF0SUc4N0NpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaHNJRDBnWXlBOFBTQXVOU0EvSUdnZ0x5QW9jaUFySUc4cElEb2dhQ0F2SUNneUlDMGdjaUF0SUc4cExDQnlLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ0tHNGdMU0JwS1NBdklHZ2dLeUFvYmlBOElHa2dQeUEySURvZ01DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUc0NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUNocElDMGdkQ2tnTHlCb0lDc2dNanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2FUb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ0tIUWdMU0J1S1NBdklHZ2dLeUEwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdFZ0x6MGdOanNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1YUNBOUlHRXNJR1V1Y3lBOUlHd3NJR1V1YkNBOUlHTXNJR1U3Q2lBZ0lDQjlDaUFnSUNCblpYUlRkSGxzWlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0luSm5ZaWdpSUNzZ0tIUm9hWE11Y2lBcUlESTFOU0I4SURBcElDc2dJaXdpSUNzZ0tIUm9hWE11WnlBcUlESTFOU0I4SURBcElDc2dJaXdpSUNzZ0tIUm9hWE11WWlBcUlESTFOU0I4SURBcElDc2dJaWtpT3dvZ0lDQWdmUW9nSUNBZ2IyWm1jMlYwU0ZOTUtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSSVUwd29SblFwTENCR2RDNW9JQ3M5SUdVc0lFWjBMbk1nS3owZ2RDd2dSblF1YkNBclBTQnVMQ0IwYUdsekxuTmxkRWhUVENoR2RDNW9MQ0JHZEM1ekxDQkdkQzVzS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNpQXJQU0JsTG5Jc0lIUm9hWE11WnlBclBTQmxMbWNzSUhSb2FYTXVZaUFyUFNCbExtSXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmhaR1JEYjJ4dmNuTW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnUFNCbExuSWdLeUIwTG5Jc0lIUm9hWE11WnlBOUlHVXVaeUFySUhRdVp5d2dkR2hwY3k1aUlEMGdaUzVpSUNzZ2RDNWlMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZV1JrVTJOaGJHRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlJQ3M5SUdVc0lIUm9hWE11WnlBclBTQmxMQ0IwYUdsekxtSWdLejBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOMVlpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNpQTlJRTFoZEdndWJXRjRLREFzSUhSb2FYTXVjaUF0SUdVdWNpa3NJSFJvYVhNdVp5QTlJRTFoZEdndWJXRjRLREFzSUhSb2FYTXVaeUF0SUdVdVp5a3NJSFJvYVhNdVlpQTlJRTFoZEdndWJXRjRLREFzSUhSb2FYTXVZaUF0SUdVdVlpa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRkV3gwYVhCc2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNpQXFQU0JsTG5Jc0lIUm9hWE11WnlBcVBTQmxMbWNzSUhSb2FYTXVZaUFxUFNCbExtSXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnRkV3gwYVhCc2VWTmpZV3hoY2lobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y2lBcVBTQmxMQ0IwYUdsekxtY2dLajBnWlN3Z2RHaHBjeTVpSUNvOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnNaWEp3S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eUlDczlJQ2hsTG5JZ0xTQjBhR2x6TG5JcElDb2dkQ3dnZEdocGN5NW5JQ3M5SUNobExtY2dMU0IwYUdsekxtY3BJQ29nZEN3Z2RHaHBjeTVpSUNzOUlDaGxMbUlnTFNCMGFHbHpMbUlwSUNvZ2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHeGxjbkJEYjJ4dmNuTW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5JZ1BTQmxMbklnS3lBb2RDNXlJQzBnWlM1eUtTQXFJRzRzSUhSb2FYTXVaeUE5SUdVdVp5QXJJQ2gwTG1jZ0xTQmxMbWNwSUNvZ2Jpd2dkR2hwY3k1aUlEMGdaUzVpSUNzZ0tIUXVZaUF0SUdVdVlpa2dLaUJ1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYkdWeWNFaFRUQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1blpYUklVMHdvUm5RcExDQmxMbWRsZEVoVFRDaHFjaWs3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0J2Y2loR2RDNW9MQ0JxY2k1b0xDQjBLU3dnYVNBOUlHOXlLRVowTG5Nc0lHcHlMbk1zSUhRcExDQnlJRDBnYjNJb1JuUXViQ3dnYW5JdWJDd2dkQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBTRk5NS0c0c0lHa3NJSElwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWlhGMVlXeHpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1eUlEMDlQU0IwYUdsekxuSWdKaVlnWlM1bklEMDlQU0IwYUdsekxtY2dKaVlnWlM1aUlEMDlQU0IwYUdsekxtSTdDaUFnSUNCOUNpQWdJQ0JtY205dFFYSnlZWGtvWlN3Z2RDQTlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlJRDBnWlZ0MFhTd2dkR2hwY3k1bklEMGdaVnQwSUNzZ01WMHNJSFJvYVhNdVlpQTlJR1ZiZENBcklESmRMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlCY25KaGVTaGxJRDBnVzEwc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWYmRGMGdQU0IwYUdsekxuSXNJR1ZiZENBcklERmRJRDBnZEdocGN5NW5MQ0JsVzNRZ0t5QXlYU0E5SUhSb2FYTXVZaXdnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbklnUFNCbExtZGxkRmdvZENrc0lIUm9hWE11WnlBOUlHVXVaMlYwV1NoMEtTd2dkR2hwY3k1aUlEMGdaUzVuWlhSYUtIUXBMQ0JsTG01dmNtMWhiR2w2WldRZ1BUMDlJQ0V3SUNZbUlDaDBhR2x6TG5JZ0x6MGdNalUxTENCMGFHbHpMbWNnTHowZ01qVTFMQ0IwYUdsekxtSWdMejBnTWpVMUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSSVpYZ29LVHNLSUNBZ0lIMEtmVHNLWVdVdVRrRk5SVk1nUFNBa1l6c0tZV1V1Y0hKdmRHOTBlWEJsTG1selEyOXNiM0lnUFNBaE1Ec0tZV1V1Y0hKdmRHOTBlWEJsTG5JZ1BTQXhPd3BoWlM1d2NtOTBiM1I1Y0dVdVp5QTlJREU3Q21GbExuQnliM1J2ZEhsd1pTNWlJRDBnTVRzS2RtRnlJR2h1SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJrZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pOWlhOb1FtRnphV05OWVhSbGNtbGhiQ0lzSUhSb2FYTXVZMjlzYjNJZ1BTQnVaWGNnWVdVb01UWTNOemN5TVRVcExDQjBhR2x6TG0xaGNDQTlJRzUxYkd3c0lIUm9hWE11YkdsbmFIUk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUlEMGdNU3dnZEdocGN5NWhiMDFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZVzlOWVhCSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxuTndaV04xYkdGeVRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aGJIQm9ZVTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVaVzUyVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVqYjIxaWFXNWxJRDBnVm5Nc0lIUm9hWE11Y21WbWJHVmpkR2wyYVhSNUlEMGdNU3dnZEdocGN5NXlaV1p5WVdOMGFXOXVVbUYwYVc4Z1BTQXVPVGdzSUhSb2FYTXVkMmx5WldaeVlXMWxJRDBnSVRFc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ01Td2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxZMkZ3SUQwZ0luSnZkVzVrSWl3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGFtOXBiaUE5SUNKeWIzVnVaQ0lzSUhSb2FYTXVjMlYwVm1Gc2RXVnpLR1VwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdVkyOXNiM0l1WTI5d2VTaGxMbU52Ykc5eUtTd2dkR2hwY3k1dFlYQWdQU0JsTG0xaGNDd2dkR2hwY3k1c2FXZG9kRTFoY0NBOUlHVXViR2xuYUhSTllYQXNJSFJvYVhNdWJHbG5hSFJOWVhCSmJuUmxibk5wZEhrZ1BTQmxMbXhwWjJoMFRXRndTVzUwWlc1emFYUjVMQ0IwYUdsekxtRnZUV0Z3SUQwZ1pTNWhiMDFoY0N3Z2RHaHBjeTVoYjAxaGNFbHVkR1Z1YzJsMGVTQTlJR1V1WVc5TllYQkpiblJsYm5OcGRIa3NJSFJvYVhNdWMzQmxZM1ZzWVhKTllYQWdQU0JsTG5Od1pXTjFiR0Z5VFdGd0xDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ1pTNWhiSEJvWVUxaGNDd2dkR2hwY3k1bGJuWk5ZWEFnUFNCbExtVnVkazFoY0N3Z2RHaHBjeTVqYjIxaWFXNWxJRDBnWlM1amIyMWlhVzVsTENCMGFHbHpMbkpsWm14bFkzUnBkbWwwZVNBOUlHVXVjbVZtYkdWamRHbDJhWFI1TENCMGFHbHpMbkpsWm5KaFkzUnBiMjVTWVhScGJ5QTlJR1V1Y21WbWNtRmpkR2x2YmxKaGRHbHZMQ0IwYUdsekxuZHBjbVZtY21GdFpTQTlJR1V1ZDJseVpXWnlZVzFsTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SUdVdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0xDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVmpZWEFnUFNCbExuZHBjbVZtY21GdFpVeHBibVZqWVhBc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRnUFNCbExuZHBjbVZtY21GdFpVeHBibVZxYjJsdUxDQjBhR2x6T3dvZ0lDQWdmUXA5T3dwb2JpNXdjbTkwYjNSNWNHVXVhWE5OWlhOb1FtRnphV05OWVhSbGNtbGhiQ0E5SUNFd093cDJZWElnU21VZ1BTQnVaWGNnVFN3Z1VYSWdQU0J1WlhjZ1dDd2dWV1VnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVLWHNLSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hsS1NrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ2lWRWhTUlVVdVFuVm1abVZ5UVhSMGNtbGlkWFJsT2lCaGNuSmhlU0J6YUc5MWJHUWdZbVVnWVNCVWVYQmxaQ0JCY25KaGVTNGlLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VnUFNBaUlpd2dkR2hwY3k1aGNuSmhlU0E5SUdVc0lIUm9hWE11YVhSbGJWTnBlbVVnUFNCMExDQjBhR2x6TG1OdmRXNTBJRDBnWlNBaFBUMGdkbTlwWkNBd0lEOGdaUzVzWlc1bmRHZ2dMeUIwSURvZ01Dd2dkR2hwY3k1dWIzSnRZV3hwZW1Wa0lEMGdiaUE5UFQwZ0lUQXNJSFJvYVhNdWRYTmhaMlVnUFNCb2Npd2dkR2hwY3k1MWNHUmhkR1ZTWVc1blpTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwT2lBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JqYjNWdWREb2dMVEVLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMblpsY25OcGIyNGdQU0F3T3dvZ0lDQWdmUW9nSUNBZ2IyNVZjR3h2WVdSRFlXeHNZbUZqYXlncElIdDlDaUFnSUNCelpYUWdibVZsWkhOVmNHUmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHVWdQVDA5SUNFd0lDWW1JSFJvYVhNdWRtVnljMmx2Ymlzck93b2dJQ0FnZlFvZ0lDQWdjMlYwVlhOaFoyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVnpZV2RsSUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTVoYldVZ1BTQmxMbTVoYldVc0lIUm9hWE11WVhKeVlYa2dQU0J1WlhjZ1pTNWhjbkpoZVM1amIyNXpkSEoxWTNSdmNpaGxMbUZ5Y21GNUtTd2dkR2hwY3k1cGRHVnRVMmw2WlNBOUlHVXVhWFJsYlZOcGVtVXNJSFJvYVhNdVkyOTFiblFnUFNCbExtTnZkVzUwTENCMGFHbHpMbTV2Y20xaGJHbDZaV1FnUFNCbExtNXZjbTFoYkdsNlpXUXNJSFJvYVhNdWRYTmhaMlVnUFNCbExuVnpZV2RsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VVRjBLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JsSUNvOUlIUm9hWE11YVhSbGJWTnBlbVVzSUc0Z0tqMGdkQzVwZEdWdFUybDZaVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnUFNBd0xDQnlJRDBnZEdocGN5NXBkR1Z0VTJsNlpUc2dhU0E4SUhJN0lHa3JLeWwwYUdsekxtRnljbUY1VzJVZ0t5QnBYU0E5SUhRdVlYSnlZWGxiYmlBcklHbGRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlVUZ5Y21GNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGNuSmhlUzV6WlhRb1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1UTI5c2IzSnpRWEp5WVhrb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1aGNuSmhlU3dnYmlBOUlEQTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJR1V1YkdWdVozUm9PeUJwSUR3Z2Nqc2dhU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQmxXMmxkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnZJRDA5UFNCMmIybGtJREFnSmlZZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRblZtWm1WeVFYUjBjbWxpZFhSbExtTnZjSGxEYjJ4dmNuTkJjbkpoZVNncE9pQmpiMnh2Y2lCcGN5QjFibVJsWm1sdVpXUWlMQ0JwS1N3Z2J5QTlJRzVsZHlCaFpTa3NJSFJiYmlzclhTQTlJRzh1Y2l3Z2RGdHVLeXRkSUQwZ2J5NW5MQ0IwVzI0cksxMGdQU0J2TG1JN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VWWmxZM1J2Y2pKelFYSnlZWGtvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVoY25KaGVTd2diaUE5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNQ3dnY2lBOUlHVXViR1Z1WjNSb095QnBJRHdnY2pzZ2FTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCbFcybGRPd29nSUNBZ0lDQWdJQ0FnSUNCdklEMDlQU0IyYjJsa0lEQWdKaVlnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFuVm1abVZ5UVhSMGNtbGlkWFJsTG1OdmNIbFdaV04wYjNJeWMwRnljbUY1S0NrNklIWmxZM1J2Y2lCcGN5QjFibVJsWm1sdVpXUWlMQ0JwS1N3Z2J5QTlJRzVsZHlCWUtTd2dkRnR1S3l0ZElEMGdieTU0TENCMFcyNHJLMTBnUFNCdkxuazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlVlpsWTNSdmNqTnpRWEp5WVhrb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1aGNuSmhlU3dnYmlBOUlEQTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJR1V1YkdWdVozUm9PeUJwSUR3Z2Nqc2dhU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQmxXMmxkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnZJRDA5UFNCMmIybGtJREFnSmlZZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRblZtWm1WeVFYUjBjbWxpZFhSbExtTnZjSGxXWldOMGIzSXpjMEZ5Y21GNUtDazZJSFpsWTNSdmNpQnBjeUIxYm1SbFptbHVaV1FpTENCcEtTd2dieUE5SUc1bGR5Qk5LU3dnZEZ0dUt5dGRJRDBnYnk1NExDQjBXMjRySzEwZ1BTQnZMbmtzSUhSYmJpc3JYU0E5SUc4dWVqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIzQjVWbVZqZEc5eU5ITkJjbkpoZVNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1GeWNtRjVMQ0J1SUQwZ01Ec0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F3TENCeUlEMGdaUzVzWlc1bmRHZzdJR2tnUENCeU95QnBLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlHVmJhVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHOGdQVDA5SUhadmFXUWdNQ0FtSmlBb1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUNkV1ptWlhKQmRIUnlhV0oxZEdVdVkyOXdlVlpsWTNSdmNqUnpRWEp5WVhrb0tUb2dkbVZqZEc5eUlHbHpJSFZ1WkdWbWFXNWxaQ0lzSUdrcExDQnZJRDBnYm1WM0lGWmxLU3dnZEZ0dUt5dGRJRDBnYnk1NExDQjBXMjRySzEwZ1BTQnZMbmtzSUhSYmJpc3JYU0E5SUc4dWVpd2dkRnR1S3l0ZElEMGdieTUzT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0Z3Y0d4NVRXRjBjbWw0TXlobEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhWFJsYlZOcGVtVWdQVDA5SURJcElHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQjBhR2x6TG1OdmRXNTBPeUIwSUR3Z2Jqc2dkQ3NyS1ZGeUxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kR2hwY3l3Z2RDa3NJRkZ5TG1Gd2NHeDVUV0YwY21sNE15aGxLU3dnZEdocGN5NXpaWFJZV1NoMExDQlJjaTU0TENCUmNpNTVLVHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwYUdsekxtbDBaVzFUYVhwbElEMDlQU0F6S1NCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ2RHaHBjeTVqYjNWdWREc2dkQ0E4SUc0N0lIUXJLeWxLWlM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUm9hWE1zSUhRcExDQktaUzVoY0hCc2VVMWhkSEpwZURNb1pTa3NJSFJvYVhNdWMyVjBXRmxhS0hRc0lFcGxMbmdzSUVwbExua3NJRXBsTG5vcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE5ZWFJ5YVhnMEtHVXBJSHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnZEdocGN5NWpiM1Z1ZERzZ2RDQThJRzQ3SUhRckt5bEtaUzU0SUQwZ2RHaHBjeTVuWlhSWUtIUXBMQ0JLWlM1NUlEMGdkR2hwY3k1blpYUlpLSFFwTENCS1pTNTZJRDBnZEdocGN5NW5aWFJhS0hRcExDQktaUzVoY0hCc2VVMWhkSEpwZURRb1pTa3NJSFJvYVhNdWMyVjBXRmxhS0hRc0lFcGxMbmdzSUVwbExua3NJRXBsTG5vcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbE9iM0p0WVd4TllYUnlhWGdvWlNrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQjBhR2x6TG1OdmRXNTBPeUIwSUR3Z2Jqc2dkQ3NyS1VwbExuZ2dQU0IwYUdsekxtZGxkRmdvZENrc0lFcGxMbmtnUFNCMGFHbHpMbWRsZEZrb2RDa3NJRXBsTG5vZ1BTQjBhR2x6TG1kbGRGb29kQ2tzSUVwbExtRndjR3g1VG05eWJXRnNUV0YwY21sNEtHVXBMQ0IwYUdsekxuTmxkRmhaV2loMExDQktaUzU0TENCS1pTNTVMQ0JLWlM1NktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSeVlXNXpabTl5YlVScGNtVmpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJSFJvYVhNdVkyOTFiblE3SUhRZ1BDQnVPeUIwS3lzcFNtVXVlQ0E5SUhSb2FYTXVaMlYwV0NoMEtTd2dTbVV1ZVNBOUlIUm9hWE11WjJWMFdTaDBLU3dnU21VdWVpQTlJSFJvYVhNdVoyVjBXaWgwS1N3Z1NtVXVkSEpoYm5ObWIzSnRSR2x5WldOMGFXOXVLR1VwTENCMGFHbHpMbk5sZEZoWldpaDBMQ0JLWlM1NExDQktaUzU1TENCS1pTNTZLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkQ2hsTENCMElEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnljbUY1TG5ObGRDaGxMQ0IwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRGZ29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnljbUY1VzJVZ0tpQjBhR2x6TG1sMFpXMVRhWHBsWFRzS0lDQWdJSDBLSUNBZ0lITmxkRmdvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GeWNtRjVXMlVnS2lCMGFHbHpMbWwwWlcxVGFYcGxYU0E5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUlpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhjbkpoZVZ0bElDb2dkR2hwY3k1cGRHVnRVMmw2WlNBcklERmRPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEp5WVhsYlpTQXFJSFJvYVhNdWFYUmxiVk5wZW1VZ0t5QXhYU0E5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUmFLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhjbkpoZVZ0bElDb2dkR2hwY3k1cGRHVnRVMmw2WlNBcklESmRPd29nSUNBZ2ZRb2dJQ0FnYzJWMFdpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEp5WVhsYlpTQXFJSFJvYVhNdWFYUmxiVk5wZW1VZ0t5QXlYU0E5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUlhLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhjbkpoZVZ0bElDb2dkR2hwY3k1cGRHVnRVMmw2WlNBcklETmRPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZ5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWEp5WVhsYlpTQXFJSFJvYVhNdWFYUmxiVk5wZW1VZ0t5QXpYU0E5SUhRc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUllXU2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1VnS2owZ2RHaHBjeTVwZEdWdFUybDZaU3dnZEdocGN5NWhjbkpoZVZ0bElDc2dNRjBnUFNCMExDQjBhR2x6TG1GeWNtRjVXMlVnS3lBeFhTQTlJRzRzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSWVdWb29aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUNvOUlIUm9hWE11YVhSbGJWTnBlbVVzSUhSb2FYTXVZWEp5WVhsYlpTQXJJREJkSUQwZ2RDd2dkR2hwY3k1aGNuSmhlVnRsSUNzZ01WMGdQU0J1TENCMGFHbHpMbUZ5Y21GNVcyVWdLeUF5WFNBOUlHa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJZV1ZwWEtHVXNJSFFzSUc0c0lHa3NJSElwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlNBcVBTQjBhR2x6TG1sMFpXMVRhWHBsTENCMGFHbHpMbUZ5Y21GNVcyVWdLeUF3WFNBOUlIUXNJSFJvYVhNdVlYSnlZWGxiWlNBcklERmRJRDBnYml3Z2RHaHBjeTVoY25KaGVWdGxJQ3NnTWwwZ1BTQnBMQ0IwYUdsekxtRnljbUY1VzJVZ0t5QXpYU0E5SUhJc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCdmJsVndiRzloWkNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YjI1VmNHeHZZV1JEWVd4c1ltRmpheUE5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb2RHaHBjeTVoY25KaGVTd2dkR2hwY3k1cGRHVnRVMmw2WlNrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiVk5wZW1VNklIUm9hWE11YVhSbGJWTnBlbVVzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUhSb2FYTXVZWEp5WVhrdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlN3S0lDQWdJQ0FnSUNBZ0lDQWdZWEp5WVhrNklFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tIUm9hWE11WVhKeVlYa3BMQW9nSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3hwZW1Wa09pQjBhR2x6TG01dmNtMWhiR2w2WldRS0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTVoYldVZ0lUMDlJQ0lpSUNZbUlDaGxMbTVoYldVZ1BTQjBhR2x6TG01aGJXVXBMQ0IwYUdsekxuVnpZV2RsSUNFOVBTQm9jaUFtSmlBb1pTNTFjMkZuWlNBOUlIUm9hWE11ZFhOaFoyVXBMQ0FvZEdocGN5NTFjR1JoZEdWU1lXNW5aUzV2Wm1aelpYUWdJVDA5SURBZ2ZId2dkR2hwY3k1MWNHUmhkR1ZTWVc1blpTNWpiM1Z1ZENBaFBUMGdMVEVwSUNZbUlDaGxMblZ3WkdGMFpWSmhibWRsSUQwZ2RHaHBjeTUxY0dSaGRHVlNZVzVuWlNrc0lHVTdDaUFnSUNCOUNuMDdDbFZsTG5CeWIzUnZkSGx3WlM1cGMwSjFabVpsY2tGMGRISnBZblYwWlNBOUlDRXdPd3AyWVhJZ2FtTWdQU0JqYkdGemN5QmxlSFJsYm1SeklGVmxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtHNWxkeUJKYm5RNFFYSnlZWGtvWlNrc0lIUXNJRzRwT3dvZ0lDQWdmUXA5TENCUll5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1ZXVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JtVjNJRlZwYm5RNFFYSnlZWGtvWlNrc0lIUXNJRzRwT3dvZ0lDQWdmUXA5TENCTFl5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1ZXVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JtVjNJRlZwYm5RNFEyeGhiWEJsWkVGeWNtRjVLR1VwTENCMExDQnVLVHNLSUNBZ0lIMEtmU3dnWldnZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZWbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0c1bGR5QkpiblF4TmtGeWNtRjVLR1VwTENCMExDQnVLVHNLSUNBZ0lIMEtmU3dnV1hNZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZWbElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0c1bGR5QlZhVzUwTVRaQmNuSmhlU2hsS1N3Z2RDd2diaWs3Q2lBZ0lDQjlDbjBzSUhSb0lEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVlpTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lodVpYY2dTVzUwTXpKQmNuSmhlU2hsS1N3Z2RDd2diaWs3Q2lBZ0lDQjlDbjBzSUZweklEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCVlpTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lodVpYY2dWV2x1ZERNeVFYSnlZWGtvWlNrc0lIUXNJRzRwT3dvZ0lDQWdmUXA5TENCdWFDQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1ZXVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JtVjNJRlZwYm5ReE5rRnljbUY1S0dVcExDQjBMQ0J1S1RzS0lDQWdJSDBLZlRzS2JtZ3VjSEp2ZEc5MGVYQmxMbWx6Um14dllYUXhOa0oxWm1abGNrRjBkSEpwWW5WMFpTQTlJQ0V3T3dwMllYSWdaR1VnUFNCamJHRnpjeUJsZUhSbGJtUnpJRlZsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLRzVsZHlCR2JHOWhkRE15UVhKeVlYa29aU2tzSUhRc0lHNHBPd29nSUNBZ2ZRcDlMQ0JwYUNBOUlHTnNZWE56SUdWNGRHVnVaSE1nVldVZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlsN0NpQWdJQ0FnSUNBZ2MzVndaWElvYm1WM0lFWnNiMkYwTmpSQmNuSmhlU2hsS1N3Z2RDd2diaWs3Q2lBZ0lDQjlDbjBzSUdObUlEMGdNQ3dnVW5RZ1BTQnVaWGNnY0dVc0lFNXZJRDBnYm1WM0lFNWxMQ0JqYVNBOUlHNWxkeUJOTENCVWRDQTlJRzVsZHlCTWRDd2dKR2tnUFNCdVpYY2dUSFFzSUdoMElEMGdibVYzSUUwc0lGOWxJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QkZiaUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2s3Q2lBZ0lDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE1zSUNKcFpDSXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdObUt5c0tJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NTFkV2xrSUQwZ1JYUW9LU3dnZEdocGN5NXVZVzFsSUQwZ0lpSXNJSFJvYVhNdWRIbHdaU0E5SUNKQ2RXWm1aWEpIWlc5dFpYUnllU0lzSUhSb2FYTXVhVzVrWlhnZ1BTQnVkV3hzTENCMGFHbHpMbUYwZEhKcFluVjBaWE1nUFNCN2ZTd2dkR2hwY3k1dGIzSndhRUYwZEhKcFluVjBaWE1nUFNCN2ZTd2dkR2hwY3k1dGIzSndhRlJoY21kbGRITlNaV3hoZEdsMlpTQTlJQ0V4TENCMGFHbHpMbWR5YjNWd2N5QTlJRnRkTENCMGFHbHpMbUp2ZFc1a2FXNW5RbTk0SUQwZ2JuVnNiQ3dnZEdocGN5NWliM1Z1WkdsdVoxTndhR1Z5WlNBOUlHNTFiR3dzSUhSb2FYTXVaSEpoZDFKaGJtZGxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5MWJuUTZJREVnTHlBd0NpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1MWMyVnlSR0YwWVNBOUlIdDlPd29nSUNBZ2ZRb2dJQ0FnWjJWMFNXNWtaWGdvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzVrWlhnN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJKYm1SbGVDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa2dQeUIwYUdsekxtbHVaR1Y0SUQwZ2JtVjNJQ2haWXlobEtTQStJRFkxTlRNMUlEOGdXbk1nT2lCWmN5a29aU3dnTVNrZ09pQjBhR2x6TG1sdVpHVjRJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFRjBkSEpwWW5WMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYUjBjbWxpZFhSbGMxdGxYVHNLSUNBZ0lIMEtJQ0FnSUhObGRFRjBkSEpwWW5WMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWFIwY21saWRYUmxjMXRsWFNBOUlIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmtaV3hsZEdWQmRIUnlhV0oxZEdVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV3hsZEdVZ2RHaHBjeTVoZEhSeWFXSjFkR1Z6VzJWZExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2FHRnpRWFIwY21saWRYUmxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhkSFJ5YVdKMWRHVnpXMlZkSUNFOVBTQjJiMmxrSURBN0NpQWdJQ0I5Q2lBZ0lDQmhaR1JIY205MWNDaGxMQ0IwTENCdUlEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaM0p2ZFhCekxuQjFjMmdvZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5MWJuUTZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHMWhkR1Z5YVdGc1NXNWtaWGc2SUc0S0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUgwS0lDQWdJR05zWldGeVIzSnZkWEJ6S0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WjNKdmRYQnpJRDBnVzEwN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJFY21GM1VtRnVaMlVvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFJvYVhNdVpISmhkMUpoYm1kbExuTjBZWEowSUQwZ1pTd2dkR2hwY3k1a2NtRjNVbUZ1WjJVdVkyOTFiblFnUFNCME93b2dJQ0FnZlFvZ0lDQWdZWEJ3YkhsTllYUnlhWGcwS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11WVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2YmpzS0lDQWdJQ0FnSUNCMElDRTlQU0IyYjJsa0lEQWdKaVlnS0hRdVlYQndiSGxOWVhSeWFYZzBLR1VwTENCMExtNWxaV1J6VlhCa1lYUmxJRDBnSVRBcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVoZEhSeWFXSjFkR1Z6TG01dmNtMWhiRHNLSUNBZ0lDQWdJQ0JwWmlBb2JpQWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2JtVjNJR3gwS0NrdVoyVjBUbTl5YldGc1RXRjBjbWw0S0dVcE93b2dJQ0FnSUNBZ0lDQWdJQ0J1TG1Gd2NHeDVUbTl5YldGc1RXRjBjbWw0S0hJcExDQnVMbTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwY3k1aGRIUnlhV0oxZEdWekxuUmhibWRsYm5RN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1MGNtRnVjMlp2Y20xRWFYSmxZM1JwYjI0b1pTa3NJR2t1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNQ2tzSUhSb2FYTXVZbTkxYm1ScGJtZENiM2dnSVQwOUlHNTFiR3dnSmlZZ2RHaHBjeTVqYjIxd2RYUmxRbTkxYm1ScGJtZENiM2dvS1N3Z2RHaHBjeTVpYjNWdVpHbHVaMU53YUdWeVpTQWhQVDBnYm5Wc2JDQW1KaUIwYUdsekxtTnZiWEIxZEdWQ2IzVnVaR2x1WjFOd2FHVnlaU2dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVhCd2JIbFJkV0YwWlhKdWFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVW5RdWJXRnJaVkp2ZEdGMGFXOXVSbkp2YlZGMVlYUmxjbTVwYjI0b1pTa3NJSFJvYVhNdVlYQndiSGxOWVhSeWFYZzBLRkowS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhKdmRHRjBaVmdvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCU2RDNXRZV3RsVW05MFlYUnBiMjVZS0dVcExDQjBhR2x6TG1Gd2NHeDVUV0YwY21sNE5DaFNkQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J5YjNSaGRHVlpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVW5RdWJXRnJaVkp2ZEdGMGFXOXVXU2hsS1N3Z2RHaHBjeTVoY0hCc2VVMWhkSEpwZURRb1VuUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbTkwWVhSbFdpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRkowTG0xaGEyVlNiM1JoZEdsdmJsb29aU2tzSUhSb2FYTXVZWEJ3YkhsTllYUnlhWGcwS0ZKMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6YkdGMFpTaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlGSjBMbTFoYTJWVWNtRnVjMnhoZEdsdmJpaGxMQ0IwTENCdUtTd2dkR2hwY3k1aGNIQnNlVTFoZEhKcGVEUW9VblFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJOaGJHVW9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlNkQzV0WVd0bFUyTmhiR1VvWlN3Z2RDd2diaWtzSUhSb2FYTXVZWEJ3YkhsTllYUnlhWGcwS0ZKMEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHeHZiMnRCZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFNXZMbXh2YjJ0QmRDaGxLU3dnVG04dWRYQmtZWFJsVFdGMGNtbDRLQ2tzSUhSb2FYTXVZWEJ3YkhsTllYUnlhWGcwS0U1dkxtMWhkSEpwZUNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCalpXNTBaWElvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl0Y0hWMFpVSnZkVzVrYVc1blFtOTRLQ2tzSUhSb2FYTXVZbTkxYm1ScGJtZENiM2d1WjJWMFEyVnVkR1Z5S0dOcEtTNXVaV2RoZEdVb0tTd2dkR2hwY3k1MGNtRnVjMnhoZEdVb1kya3VlQ3dnWTJrdWVTd2dZMmt1ZWlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0VUc5cGJuUnpLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQmxMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ1pWdHVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDNXdkWE5vS0hJdWVDd2djaTU1TENCeUxub2dmSHdnTUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnWkdVb2RDd2dNeWtwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5dGNIVjBaVUp2ZFc1a2FXNW5RbTk0S0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WW05MWJtUnBibWRDYjNnZ1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVltOTFibVJwYm1kQ2IzZ2dQU0J1WlhjZ1RIUXBPd29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1aGRIUnlhV0oxZEdWekxuQnZjMmwwYVc5dUxDQjBJRDBnZEdocGN5NXRiM0p3YUVGMGRISnBZblYwWlhNdWNHOXphWFJwYjI0N0NpQWdJQ0FnSUNBZ2FXWWdLR1VnSmlZZ1pTNXBjMGRNUW5WbVptVnlRWFIwY21saWRYUmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjFSSVVrVkZMa0oxWm1abGNrZGxiMjFsZEhKNUxtTnZiWEIxZEdWQ2IzVnVaR2x1WjBKdmVDZ3BPaUJIVEVKMVptWmxja0YwZEhKcFluVjBaU0J5WlhGMWFYSmxjeUJoSUcxaGJuVmhiQ0JpYjNWdVpHbHVaeUJpYjNndUlFRnNkR1Z5Ym1GMGFYWmxiSGtnYzJWMElDSnRaWE5vTG1aeWRYTjBkVzFEZFd4c1pXUWlJSFJ2SUNKbVlXeHpaU0l1Snl3Z2RHaHBjeWtzSUhSb2FYTXVZbTkxYm1ScGJtZENiM2d1YzJWMEtHNWxkeUJOS0MweElDOGdNQ3dnTFRFZ0x5QXdMQ0F0TVNBdklEQXBMQ0J1WlhjZ1RTZ3hJQzhnTUN3Z01TQXZJREFzSURFZ0x5QXdLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLR1VnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVpYjNWdVpHbHVaMEp2ZUM1elpYUkdjbTl0UW5WbVptVnlRWFIwY21saWRYUmxLR1VwTENCMEtTQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdkQzVzWlc1bmRHZzdJRzRnUENCcE95QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISWdQU0IwVzI1ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZIUXVjMlYwUm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoeUtTd2dkR2hwY3k1dGIzSndhRlJoY21kbGRITlNaV3hoZEdsMlpTQS9JQ2hvZEM1aFpHUldaV04wYjNKektIUm9hWE11WW05MWJtUnBibWRDYjNndWJXbHVMQ0JVZEM1dGFXNHBMQ0IwYUdsekxtSnZkVzVrYVc1blFtOTRMbVY0Y0dGdVpFSjVVRzlwYm5Rb2FIUXBMQ0JvZEM1aFpHUldaV04wYjNKektIUm9hWE11WW05MWJtUnBibWRDYjNndWJXRjRMQ0JVZEM1dFlYZ3BMQ0IwYUdsekxtSnZkVzVrYVc1blFtOTRMbVY0Y0dGdVpFSjVVRzlwYm5Rb2FIUXBLU0E2SUNoMGFHbHpMbUp2ZFc1a2FXNW5RbTk0TG1WNGNHRnVaRUo1VUc5cGJuUW9WSFF1YldsdUtTd2dkR2hwY3k1aWIzVnVaR2x1WjBKdmVDNWxlSEJoYm1SQ2VWQnZhVzUwS0ZSMExtMWhlQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU0JsYkhObElIUm9hWE11WW05MWJtUnBibWRDYjNndWJXRnJaVVZ0Y0hSNUtDazdDaUFnSUNBZ0lDQWdLR2x6VG1GT0tIUm9hWE11WW05MWJtUnBibWRDYjNndWJXbHVMbmdwSUh4OElHbHpUbUZPS0hSb2FYTXVZbTkxYm1ScGJtZENiM2d1YldsdUxua3BJSHg4SUdselRtRk9LSFJvYVhNdVltOTFibVJwYm1kQ2IzZ3ViV2x1TG5vcEtTQW1KaUJqYjI1emIyeGxMbVZ5Y205eUtDZFVTRkpGUlM1Q2RXWm1aWEpIWlc5dFpYUnllUzVqYjIxd2RYUmxRbTkxYm1ScGJtZENiM2dvS1RvZ1EyOXRjSFYwWldRZ2JXbHVMMjFoZUNCb1lYWmxJRTVoVGlCMllXeDFaWE11SUZSb1pTQWljRzl6YVhScGIyNGlJR0YwZEhKcFluVjBaU0JwY3lCc2FXdGxiSGtnZEc4Z2FHRjJaU0JPWVU0Z2RtRnNkV1Z6TGljc0lIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ1kyOXRjSFYwWlVKdmRXNWthVzVuVTNCb1pYSmxLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21VZ1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVVnUFNCdVpYY2dRVzRwT3dvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWhkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVMQ0IwSUQwZ2RHaHBjeTV0YjNKd2FFRjBkSEpwWW5WMFpYTXVjRzl6YVhScGIyNDdDaUFnSUNBZ0lDQWdhV1lnS0dVZ0ppWWdaUzVwYzBkTVFuVm1abVZ5UVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0oxUklVa1ZGTGtKMVptWmxja2RsYjIxbGRISjVMbU52YlhCMWRHVkNiM1Z1WkdsdVoxTndhR1Z5WlNncE9pQkhURUoxWm1abGNrRjBkSEpwWW5WMFpTQnlaWEYxYVhKbGN5QmhJRzFoYm5WaGJDQmliM1Z1WkdsdVp5QnpjR2hsY21VdUlFRnNkR1Z5Ym1GMGFYWmxiSGtnYzJWMElDSnRaWE5vTG1aeWRYTjBkVzFEZFd4c1pXUWlJSFJ2SUNKbVlXeHpaU0l1Snl3Z2RHaHBjeWtzSUhSb2FYTXVZbTkxYm1ScGJtZFRjR2hsY21VdWMyVjBLRzVsZHlCTkxDQXhJQzhnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0dVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtSnZkVzVrYVc1blUzQm9aWEpsTG1ObGJuUmxjanNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRlIwTG5ObGRFWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9aU2tzSUhRcElHWnZjaWhzWlhRZ2NpQTlJREFzSUc4Z1BTQjBMbXhsYm1kMGFEc2djaUE4SUc4N0lISXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSFJiY2wwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FTNXpaWFJHY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0dFcExDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMGMxSmxiR0YwYVhabElEOGdLR2gwTG1Ga1pGWmxZM1J2Y25Nb1ZIUXViV2x1TENBa2FTNXRhVzRwTENCVWRDNWxlSEJoYm1SQ2VWQnZhVzUwS0doMEtTd2dhSFF1WVdSa1ZtVmpkRzl5Y3loVWRDNXRZWGdzSUNScExtMWhlQ2tzSUZSMExtVjRjR0Z1WkVKNVVHOXBiblFvYUhRcEtTQTZJQ2hVZEM1bGVIQmhibVJDZVZCdmFXNTBLQ1JwTG0xcGJpa3NJRlIwTG1WNGNHRnVaRUo1VUc5cGJuUW9KR2t1YldGNEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdWSFF1WjJWMFEyVnVkR1Z5S0c0cE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJREE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NpQTlJREFzSUc4Z1BTQmxMbU52ZFc1ME95QnlJRHdnYnpzZ2Npc3JLV2gwTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb1pTd2djaWtzSUdrZ1BTQk5ZWFJvTG0xaGVDaHBMQ0J1TG1ScGMzUmhibU5sVkc5VGNYVmhjbVZrS0doMEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBLU0JtYjNJb2JHVjBJSElnUFNBd0xDQnZJRDBnZEM1c1pXNW5kR2c3SUhJZ1BDQnZPeUJ5S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMFczSmRMQ0JzSUQwZ2RHaHBjeTV0YjNKd2FGUmhjbWRsZEhOU1pXeGhkR2wyWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWXlBOUlEQXNJR2dnUFNCaExtTnZkVzUwT3lCaklEd2dhRHNnWXlzcktXaDBMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWVN3Z1l5a3NJR3dnSmlZZ0tHTnBMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWlN3Z1l5a3NJR2gwTG1Ga1pDaGphU2twTENCcElEMGdUV0YwYUM1dFlYZ29hU3dnYmk1a2FYTjBZVzVqWlZSdlUzRjFZWEpsWkNob2RDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVltOTFibVJwYm1kVGNHaGxjbVV1Y21Ga2FYVnpJRDBnVFdGMGFDNXpjWEowS0drcExDQnBjMDVoVGloMGFHbHpMbUp2ZFc1a2FXNW5VM0JvWlhKbExuSmhaR2wxY3lrZ0ppWWdZMjl1YzI5c1pTNWxjbkp2Y2lnblZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua3VZMjl0Y0hWMFpVSnZkVzVrYVc1blUzQm9aWEpsS0NrNklFTnZiWEIxZEdWa0lISmhaR2wxY3lCcGN5Qk9ZVTR1SUZSb1pTQWljRzl6YVhScGIyNGlJR0YwZEhKcFluVjBaU0JwY3lCc2FXdGxiSGtnZEc4Z2FHRjJaU0JPWVU0Z2RtRnNkV1Z6TGljc0lIUm9hWE1wT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHTnZiWEIxZEdWVVlXNW5aVzUwY3lncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11YVc1a1pYZ3NJSFFnUFNCMGFHbHpMbUYwZEhKcFluVjBaWE03Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdQVDA5SUc1MWJHd2dmSHdnZEM1d2IzTnBkR2x2YmlBOVBUMGdkbTlwWkNBd0lIeDhJSFF1Ym05eWJXRnNJRDA5UFNCMmIybGtJREFnZkh3Z2RDNTFkaUE5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGtKMVptWmxja2RsYjIxbGRISjVPaUF1WTI5dGNIVjBaVlJoYm1kbGJuUnpLQ2tnWm1GcGJHVmtMaUJOYVhOemFXNW5JSEpsY1hWcGNtVmtJR0YwZEhKcFluVjBaWE1nS0dsdVpHVjRMQ0J3YjNOcGRHbHZiaXdnYm05eWJXRnNJRzl5SUhWMktTSXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlM1aGNuSmhlU3dnYVNBOUlIUXVjRzl6YVhScGIyNHVZWEp5WVhrc0lISWdQU0IwTG01dmNtMWhiQzVoY25KaGVTd2dieUE5SUhRdWRYWXVZWEp5WVhrc0lHRWdQU0JwTG14bGJtZDBhQ0F2SURNN0NpQWdJQ0FnSUNBZ2RDNTBZVzVuWlc1MElEMDlQU0IyYjJsa0lEQWdKaVlnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5SaGJtZGxiblFpTENCdVpYY2dWV1VvYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2cwSUNvZ1lTa3NJRFFwS1RzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUhRdWRHRnVaMlZ1ZEM1aGNuSmhlU3dnWXlBOUlGdGRMQ0JvSUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQkNJRDBnTURzZ1FpQThJR0U3SUVJckt5bGpXMEpkSUQwZ2JtVjNJRTBzSUdoYlFsMGdQU0J1WlhjZ1RUc0tJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHNWxkeUJOTENCa0lEMGdibVYzSUUwc0lHWWdQU0J1WlhjZ1RTd2diU0E5SUc1bGR5QllMQ0I0SUQwZ2JtVjNJRmdzSUhZZ1BTQnVaWGNnV0N3Z1p5QTlJRzVsZHlCTkxDQndJRDBnYm1WM0lFMDdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdYeWhDTENCUUxDQjNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIVXVabkp2YlVGeWNtRjVLR2tzSUVJZ0tpQXpLU3dnWkM1bWNtOXRRWEp5WVhrb2FTd2dVQ0FxSURNcExDQm1MbVp5YjIxQmNuSmhlU2hwTENCM0lDb2dNeWtzSUcwdVpuSnZiVUZ5Y21GNUtHOHNJRUlnS2lBeUtTd2dlQzVtY205dFFYSnlZWGtvYnl3Z1VDQXFJRElwTENCMkxtWnliMjFCY25KaGVTaHZMQ0IzSUNvZ01pa3NJR1F1YzNWaUtIVXBMQ0JtTG5OMVlpaDFLU3dnZUM1emRXSW9iU2tzSUhZdWMzVmlLRzBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUlNBOUlERWdMeUFvZUM1NElDb2dkaTU1SUMwZ2RpNTRJQ29nZUM1NUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSVdselJtbHVhWFJsS0VVcElIeDhJQ2huTG1OdmNIa29aQ2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9kaTU1S1M1aFpHUlRZMkZzWldSV1pXTjBiM0lvWml3Z0xYZ3VlU2t1YlhWc2RHbHdiSGxUWTJGc1lYSW9SU2tzSUhBdVkyOXdlU2htS1M1dGRXeDBhWEJzZVZOallXeGhjaWg0TG5ncExtRmtaRk5qWVd4bFpGWmxZM1J2Y2loa0xDQXRkaTU0S1M1dGRXeDBhWEJzZVZOallXeGhjaWhGS1N3Z1kxdENYUzVoWkdRb1p5a3NJR05iVUYwdVlXUmtLR2NwTENCalczZGRMbUZrWkNobktTd2dhRnRDWFM1aFpHUW9jQ2tzSUdoYlVGMHVZV1JrS0hBcExDQm9XM2RkTG1Ga1pDaHdLU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQjVJRDBnZEdocGN5NW5jbTkxY0hNN0NpQWdJQ0FnSUNBZ2VTNXNaVzVuZEdnZ1BUMDlJREFnSmlZZ0tIa2dQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowT2lBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOTFiblE2SUc0dWJHVnVaM1JvQ2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmRLVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRUlnUFNBd0xDQlFJRDBnZVM1c1pXNW5kR2c3SUVJZ1BDQlFPeUFySzBJcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2R5QTlJSGxiUWwwc0lFVWdQU0IzTG5OMFlYSjBMQ0JFSUQwZ2R5NWpiM1Z1ZERzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQlZJRDBnUlN3Z1JpQTlJRVVnS3lCRU95QlZJRHdnUmpzZ1ZTQXJQU0F6S1Y4b2JsdFZJQ3NnTUYwc0lHNWJWU0FySURGZExDQnVXMVVnS3lBeVhTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCaUlEMGdibVYzSUUwc0lFRWdQU0J1WlhjZ1RTd2dUQ0E5SUc1bGR5Qk5MQ0JKSUQwZ2JtVjNJRTA3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYXloQ0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUV3dVpuSnZiVUZ5Y21GNUtISXNJRUlnS2lBektTd2dTUzVqYjNCNUtFd3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVQ0E5SUdOYlFsMDdDaUFnSUNBZ0lDQWdJQ0FnSUdJdVkyOXdlU2hRS1N3Z1lpNXpkV0lvVEM1dGRXeDBhWEJzZVZOallXeGhjaWhNTG1SdmRDaFFLU2twTG01dmNtMWhiR2w2WlNncExDQkJMbU55YjNOelZtVmpkRzl5Y3loSkxDQlFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVVnUFNCQkxtUnZkQ2hvVzBKZEtTQThJREFnUHlBdE1TQTZJREU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGJRaUFxSURSZElEMGdZaTU0TENCc1cwSWdLaUEwSUNzZ01WMGdQU0JpTG5rc0lHeGJRaUFxSURRZ0t5QXlYU0E5SUdJdWVpd2diRnRDSUNvZ05DQXJJRE5kSUQwZ1JUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQkNJRDBnTUN3Z1VDQTlJSGt1YkdWdVozUm9PeUJDSUR3Z1VEc2dLeXRDS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhjZ1BTQjVXMEpkTENCRklEMGdkeTV6ZEdGeWRDd2dSQ0E5SUhjdVkyOTFiblE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ZTQTlJRVVzSUVZZ1BTQkZJQ3NnUkRzZ1ZTQThJRVk3SUZVZ0t6MGdNeWxyS0c1YlZTQXJJREJkS1N3Z2F5aHVXMVVnS3lBeFhTa3NJR3NvYmx0VklDc2dNbDBwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHTnZiWEIxZEdWV1pYSjBaWGhPYjNKdFlXeHpLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NXBibVJsZUN3Z2RDQTlJSFJvYVhNdVoyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlwT3dvZ0lDQWdJQ0FnSUdsbUlDaDBJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1kbGRFRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVJRDA5UFNCMmIybGtJREFwSUc0Z1BTQnVaWGNnVldVb2JtVjNJRVpzYjJGME16SkJjbkpoZVNoMExtTnZkVzUwSUNvZ015a3NJRE1wTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWJtOXliV0ZzSWl3Z2JpazdDaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdabTl5S0d4bGRDQmtJRDBnTUN3Z1ppQTlJRzR1WTI5MWJuUTdJR1FnUENCbU95QmtLeXNwYmk1elpYUllXVm9vWkN3Z01Dd2dNQ3dnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdibVYzSUUwc0lISWdQU0J1WlhjZ1RTd2dieUE5SUc1bGR5Qk5MQ0JoSUQwZ2JtVjNJRTBzSUd3Z1BTQnVaWGNnVFN3Z1l5QTlJRzVsZHlCTkxDQm9JRDBnYm1WM0lFMHNJSFVnUFNCdVpYY2dUVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1VwSUdadmNpaHNaWFFnWkNBOUlEQXNJR1lnUFNCbExtTnZkVzUwT3lCa0lEd2daanNnWkNBclBTQXpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdElEMGdaUzVuWlhSWUtHUWdLeUF3S1N3Z2VDQTlJR1V1WjJWMFdDaGtJQ3NnTVNrc0lIWWdQU0JsTG1kbGRGZ29aQ0FySURJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLSFFzSUcwcExDQnlMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEN3Z2VDa3NJRzh1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoMExDQjJLU3dnYUM1emRXSldaV04wYjNKektHOHNJSElwTENCMUxuTjFZbFpsWTNSdmNuTW9hU3dnY2lrc0lHZ3VZM0p2YzNNb2RTa3NJR0V1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNodUxDQnRLU3dnYkM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHNHNJSGdwTENCakxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9iaXdnZGlrc0lHRXVZV1JrS0dncExDQnNMbUZrWkNob0tTd2dZeTVoWkdRb2FDa3NJRzR1YzJWMFdGbGFLRzBzSUdFdWVDd2dZUzU1TENCaExub3BMQ0J1TG5ObGRGaFpXaWg0TENCc0xuZ3NJR3d1ZVN3Z2JDNTZLU3dnYmk1elpYUllXVm9vZGl3Z1l5NTRMQ0JqTG5rc0lHTXVlaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQm1iM0lvYkdWMElHUWdQU0F3TENCbUlEMGdkQzVqYjNWdWREc2daQ0E4SUdZN0lHUWdLejBnTXlscExtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9kQ3dnWkNBcklEQXBMQ0J5TG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2RDd2daQ0FySURFcExDQnZMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZEN3Z1pDQXJJRElwTENCb0xuTjFZbFpsWTNSdmNuTW9ieXdnY2lrc0lIVXVjM1ZpVm1WamRHOXljeWhwTENCeUtTd2dhQzVqY205emN5aDFLU3dnYmk1elpYUllXVm9vWkNBcklEQXNJR2d1ZUN3Z2FDNTVMQ0JvTG5vcExDQnVMbk5sZEZoWldpaGtJQ3NnTVN3Z2FDNTRMQ0JvTG5rc0lHZ3VlaWtzSUc0dWMyVjBXRmxhS0dRZ0t5QXlMQ0JvTG5nc0lHZ3VlU3dnYUM1NktUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXViM0p0WVd4cGVtVk9iM0p0WVd4ektDa3NJRzR1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCdFpYSm5aU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdhV1lnS0NFb1pTQW1KaUJsTG1selFuVm1abVZ5UjJWdmJXVjBjbmtwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGtKMVptWmxja2RsYjIxbGRISjVMbTFsY21kbEtDazZJR2RsYjIxbGRISjVJRzV2ZENCaGJpQnBibk4wWVc1alpTQnZaaUJVU0ZKRlJTNUNkV1ptWlhKSFpXOXRaWFJ5ZVM0aUxDQmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMElEMDlQU0IyYjJsa0lEQWdKaVlnS0hRZ1BTQXdMQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGtKMVptWmxja2RsYjIxbGRISjVMbTFsY21kbEtDazZJRTkyWlhKM2NtbDBhVzVuSUc5eWFXZHBibUZzSUdkbGIyMWxkSEo1TENCemRHRnlkR2x1WnlCaGRDQnZabVp6WlhROU1DNGdWWE5sSUVKMVptWmxja2RsYjIxbGRISjVWWFJwYkhNdWJXVnlaMlZDZFdabVpYSkhaVzl0WlhSeWFXVnpLQ2tnWm05eUlHeHZjM05zWlhOeklHMWxjbWRsTGlJcEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WVhSMGNtbGlkWFJsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ2FXNGdiaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsTG1GMGRISnBZblYwWlhOYmFWMGdQVDA5SUhadmFXUWdNQ2tnWTI5dWRHbHVkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2JsdHBYUzVoY25KaGVTd2dZU0E5SUdVdVlYUjBjbWxpZFhSbGMxdHBYU3dnYkNBOUlHRXVZWEp5WVhrc0lHTWdQU0JoTG1sMFpXMVRhWHBsSUNvZ2RDd2dhQ0E5SUUxaGRHZ3ViV2x1S0d3dWJHVnVaM1JvTENCdkxteGxibWQwYUNBdElHTXBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhVZ1BTQXdMQ0JrSUQwZ1l6c2dkU0E4SUdnN0lIVXJLeXdnWkNzcktXOWJaRjBnUFNCc1czVmRPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHNXZjbTFoYkdsNlpVNXZjbTFoYkhNb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1GMGRISnBZblYwWlhNdWJtOXliV0ZzT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCbExtTnZkVzUwT3lCMElEd2dianNnZENzcktXaDBMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWlN3Z2RDa3NJR2gwTG01dmNtMWhiR2w2WlNncExDQmxMbk5sZEZoWldpaDBMQ0JvZEM1NExDQm9kQzU1TENCb2RDNTZLVHNLSUNBZ0lIMEtJQ0FnSUhSdlRtOXVTVzVrWlhobFpDZ3BJSHNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJsS0dFc0lHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCaExtRnljbUY1TENCb0lEMGdZUzVwZEdWdFUybDZaU3dnZFNBOUlHRXVibTl5YldGc2FYcGxaQ3dnWkNBOUlHNWxkeUJqTG1OdmJuTjBjblZqZEc5eUtHd3ViR1Z1WjNSb0lDb2dhQ2tzSUdZZ1BTQXdMQ0J0SUQwZ01Ec0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0I0SUQwZ01Dd2dkaUE5SUd3dWJHVnVaM1JvT3lCNElEd2dkanNnZUNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRXVhWE5KYm5SbGNteGxZWFpsWkVKMVptWmxja0YwZEhKcFluVjBaU0EvSUdZZ1BTQnNXM2hkSUNvZ1lTNWtZWFJoTG5OMGNtbGtaU0FySUdFdWIyWm1jMlYwSURvZ1ppQTlJR3hiZUYwZ0tpQm9Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQm5JRDBnTURzZ1p5QThJR2c3SUdjckt5bGtXMjBySzEwZ1BTQmpXMllySzEwN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlZaU2hrTENCb0xDQjFLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVc1a1pYZ2dQVDA5SUc1MWJHd3BJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMa0oxWm1abGNrZGxiMjFsZEhKNUxuUnZUbTl1U1c1a1pYaGxaQ2dwT2lCQ2RXWm1aWEpIWlc5dFpYUnllU0JwY3lCaGJISmxZV1I1SUc1dmJpMXBibVJsZUdWa0xpSXBMQ0IwYUdsek93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2JtVjNJRjlsTENCdUlEMGdkR2hwY3k1cGJtUmxlQzVoY25KaGVTd2dhU0E5SUhSb2FYTXVZWFIwY21saWRYUmxjenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR0VnYVc0Z2FTbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnYVZ0aFhTd2dZeUE5SUdVb2JDd2diaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUXVjMlYwUVhSMGNtbGlkWFJsS0dFc0lHTXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNdWJXOXljR2hCZEhSeWFXSjFkR1Z6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWVNCcGJpQnlLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCYlhTd2dZeUE5SUhKYllWMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYUNBOUlEQXNJSFVnUFNCakxteGxibWQwYURzZ2FDQThJSFU3SUdnckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkNBOUlHTmJhRjBzSUdZZ1BTQmxLR1FzSUc0cE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDNXdkWE5vS0dZcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIUXViVzl5Y0doQmRIUnlhV0oxZEdWelcyRmRJRDBnYkRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RDNXRiM0p3YUZSaGNtZGxkSE5TWld4aGRHbDJaU0E5SUhSb2FYTXViVzl5Y0doVVlYSm5aWFJ6VW1Wc1lYUnBkbVU3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0IwYUdsekxtZHliM1Z3Y3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdFZ1BTQXdMQ0JzSUQwZ2J5NXNaVzVuZEdnN0lHRWdQQ0JzT3lCaEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc5YllWMDdDaUFnSUNBZ0lDQWdJQ0FnSUhRdVlXUmtSM0p2ZFhBb1l5NXpkR0Z5ZEN3Z1l5NWpiM1Z1ZEN3Z1l5NXRZWFJsY21saGJFbHVaR1Y0S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUcxbGRHRmtZWFJoT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMlpYSnphVzl1T2lBMExqVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVFuVm1abVZ5UjJWdmJXVjBjbmtpTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJWdVpYSmhkRzl5T2lBaVFuVm1abVZ5UjJWdmJXVjBjbmt1ZEc5S1UwOU9JZ29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1MWRXbGtJRDBnZEdocGN5NTFkV2xrTENCbExuUjVjR1VnUFNCMGFHbHpMblI1Y0dVc0lIUm9hWE11Ym1GdFpTQWhQVDBnSWlJZ0ppWWdLR1V1Ym1GdFpTQTlJSFJvYVhNdWJtRnRaU2tzSUU5aWFtVmpkQzVyWlhsektIUm9hWE11ZFhObGNrUmhkR0VwTG14bGJtZDBhQ0ErSURBZ0ppWWdLR1V1ZFhObGNrUmhkR0VnUFNCMGFHbHpMblZ6WlhKRVlYUmhLU3dnZEdocGN5NXdZWEpoYldWMFpYSnpJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQjBhR2x6TG5CaGNtRnRaWFJsY25NN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZeUJwYmlCc0tXeGJZMTBnSVQwOUlIWnZhV1FnTUNBbUppQW9aVnRqWFNBOUlHeGJZMTBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaUzVrWVhSaElEMGdld29nSUNBZ0lDQWdJQ0FnSUNCaGRIUnlhV0oxZEdWek9pQjdmUW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtbHVaR1Y0T3dvZ0lDQWdJQ0FnSUhRZ0lUMDlJRzUxYkd3Z0ppWWdLR1V1WkdGMFlTNXBibVJsZUNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dkQzVoY25KaGVTNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbExBb2dJQ0FnSUNBZ0lDQWdJQ0JoY25KaGVUb2dRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29kQzVoY25KaGVTa0tJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVlYUjBjbWxpZFhSbGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHd2dhVzRnYmlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdibHRzWFRzS0lDQWdJQ0FnSUNBZ0lDQWdaUzVrWVhSaExtRjBkSEpwWW5WMFpYTmJiRjBnUFNCakxuUnZTbE5QVGlobExtUmhkR0VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUh0OUxDQnlJRDBnSVRFN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCc0lHbHVJSFJvYVhNdWJXOXljR2hCZEhSeWFXSjFkR1Z6S1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdNZ1BTQjBhR2x6TG0xdmNuQm9RWFIwY21saWRYUmxjMXRzWFN3Z2FDQTlJRnRkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIVWdQU0F3TENCa0lEMGdZeTVzWlc1bmRHZzdJSFVnUENCa095QjFLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0JqVzNWZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FDNXdkWE5vS0dZdWRHOUtVMDlPS0dVdVpHRjBZU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdndWJHVnVaM1JvSUQ0Z01DQW1KaUFvYVZ0c1hTQTlJR2dzSUhJZ1BTQWhNQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhJZ0ppWWdLR1V1WkdGMFlTNXRiM0p3YUVGMGRISnBZblYwWlhNZ1BTQnBMQ0JsTG1SaGRHRXViVzl5Y0doVVlYSm5aWFJ6VW1Wc1lYUnBkbVVnUFNCMGFHbHpMbTF2Y25Cb1ZHRnlaMlYwYzFKbGJHRjBhWFpsS1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUhSb2FYTXVaM0p2ZFhCek93b2dJQ0FnSUNBZ0lHOHViR1Z1WjNSb0lENGdNQ0FtSmlBb1pTNWtZWFJoTG1keWIzVndjeUE5SUVwVFQwNHVjR0Z5YzJVb1NsTlBUaTV6ZEhKcGJtZHBabmtvYnlrcEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIUm9hWE11WW05MWJtUnBibWRUY0dobGNtVTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRWdJVDA5SUc1MWJHd2dKaVlnS0dVdVpHRjBZUzVpYjNWdVpHbHVaMU53YUdWeVpTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyVnVkR1Z5T2lCaExtTmxiblJsY2k1MGIwRnljbUY1S0Nrc0NpQWdJQ0FnSUNBZ0lDQWdJSEpoWkdsMWN6b2dZUzV5WVdScGRYTUtJQ0FnSUNBZ0lDQjlLU3dnWlRzS0lDQWdJSDBLSUNBZ0lHTnNiMjVsS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpZ3BMbU52Y0hrb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWx1WkdWNElEMGdiblZzYkN3Z2RHaHBjeTVoZEhSeWFXSjFkR1Z6SUQwZ2UzMHNJSFJvYVhNdWJXOXljR2hCZEhSeWFXSjFkR1Z6SUQwZ2UzMHNJSFJvYVhNdVozSnZkWEJ6SUQwZ1cxMHNJSFJvYVhNdVltOTFibVJwYm1kQ2IzZ2dQU0J1ZFd4c0xDQjBhR2x6TG1KdmRXNWthVzVuVTNCb1pYSmxJRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIdDlPd29nSUNBZ0lDQWdJSFJvYVhNdWJtRnRaU0E5SUdVdWJtRnRaVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJR1V1YVc1a1pYZzdDaUFnSUNBZ0lDQWdiaUFoUFQwZ2JuVnNiQ0FtSmlCMGFHbHpMbk5sZEVsdVpHVjRLRzR1WTJ4dmJtVW9kQ2twT3dvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnWlM1aGRIUnlhV0oxZEdWek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1l5QnBiaUJwS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdnZ1BTQnBXMk5kT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTaGpMQ0JvTG1Oc2IyNWxLSFFwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCbExtMXZjbkJvUVhSMGNtbGlkWFJsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdNZ2FXNGdjaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ1cxMHNJSFVnUFNCeVcyTmRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdRZ1BTQXdMQ0JtSUQwZ2RTNXNaVzVuZEdnN0lHUWdQQ0JtT3lCa0t5c3BhQzV3ZFhOb0tIVmJaRjB1WTJ4dmJtVW9kQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmNuQm9RWFIwY21saWRYUmxjMXRqWFNBOUlHZzdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdWJXOXljR2hVWVhKblpYUnpVbVZzWVhScGRtVWdQU0JsTG0xdmNuQm9WR0Z5WjJWMGMxSmxiR0YwYVhabE93b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ1pTNW5jbTkxY0hNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaklEMGdNQ3dnYUNBOUlHOHViR1Z1WjNSb095QmpJRHdnYURzZ1l5c3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCdlcyTmRPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZrWkVkeWIzVndLSFV1YzNSaGNuUXNJSFV1WTI5MWJuUXNJSFV1YldGMFpYSnBZV3hKYm1SbGVDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCaElEMGdaUzVpYjNWdVpHbHVaMEp2ZURzS0lDQWdJQ0FnSUNCaElDRTlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxtSnZkVzVrYVc1blFtOTRJRDBnWVM1amJHOXVaU2dwS1RzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdVdVltOTFibVJwYm1kVGNHaGxjbVU3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR3dnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WW05MWJtUnBibWRUY0dobGNtVWdQU0JzTG1Oc2IyNWxLQ2twTENCMGFHbHpMbVJ5WVhkU1lXNW5aUzV6ZEdGeWRDQTlJR1V1WkhKaGQxSmhibWRsTG5OMFlYSjBMQ0IwYUdsekxtUnlZWGRTWVc1blpTNWpiM1Z1ZENBOUlHVXVaSEpoZDFKaGJtZGxMbU52ZFc1MExDQjBhR2x6TG5WelpYSkVZWFJoSUQwZ1pTNTFjMlZ5UkdGMFlTd2daUzV3WVhKaGJXVjBaWEp6SUNFOVBTQjJiMmxrSURBZ0ppWWdLSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR1V1Y0dGeVlXMWxkR1Z5Y3lrcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFpWkdsemNHOXpaU0lLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJSDBLZlRzS1gyVXVjSEp2ZEc5MGVYQmxMbWx6UW5WbVptVnlSMlZ2YldWMGNua2dQU0FoTURzS2RtRnlJRU5zSUQwZ2JtVjNJSEJsTENCb2FTQTlJRzVsZHlCRGJpd2dRbThnUFNCdVpYY2dRVzRzSUcxdUlEMGdibVYzSUUwc0lHZHVJRDBnYm1WM0lFMHNJSGh1SUQwZ2JtVjNJRTBzSUhwdklEMGdibVYzSUUwc0lGVnZJRDBnYm1WM0lFMHNJRTl2SUQwZ2JtVjNJRTBzSUV0eUlEMGdibVYzSUUwc0lHVnpJRDBnYm1WM0lFMHNJSFJ6SUQwZ2JtVjNJRTBzSUc1eklEMGdibVYzSUZnc0lHbHpJRDBnYm1WM0lGZ3NJSEp6SUQwZ2JtVjNJRmdzSUVodklEMGdibVYzSUUwc0lITnpJRDBnYm1WM0lFMHNJSE4wSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJPWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdibVYzSUY5bExDQjBJRDBnYm1WM0lHaHVLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKTlpYTm9JaXdnZEdocGN5NW5aVzl0WlhSeWVTQTlJR1VzSUhSb2FYTXViV0YwWlhKcFlXd2dQU0IwTENCMGFHbHpMblZ3WkdGMFpVMXZjbkJvVkdGeVoyVjBjeWdwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJR1V1Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklDRTlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6SUQwZ1pTNXRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE11YzJ4cFkyVW9LU2tzSUdVdWJXOXljR2hVWVhKblpYUkVhV04wYVc5dVlYSjVJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUm9hWE11Ylc5eWNHaFVZWEpuWlhSRWFXTjBhVzl1WVhKNUlEMGdUMkpxWldOMExtRnpjMmxuYmloN2ZTd2daUzV0YjNKd2FGUmhjbWRsZEVScFkzUnBiMjVoY25rcEtTd2dkR2hwY3k1dFlYUmxjbWxoYkNBOUlHVXViV0YwWlhKcFlXd3NJSFJvYVhNdVoyVnZiV1YwY25rZ1BTQmxMbWRsYjIxbGRISjVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFRXOXljR2hVWVhKblpYUnpLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NW5aVzl0WlhSeWVUc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1cGMwSjFabVpsY2tkbGIyMWxkSEo1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdaUzV0YjNKd2FFRjBkSEpwWW5WMFpYTXNJRzRnUFNCUFltcGxZM1F1YTJWNWN5aDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzR1YkdWdVozUm9JRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMFcyNWJNRjFkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklEMGdXMTBzSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJFYVdOMGFXOXVZWEo1SUQwZ2UzMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J5SUQwZ01Dd2dieUE5SUdrdWJHVnVaM1JvT3lCeUlEd2dienNnY2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCcFczSmRMbTVoYldVZ2ZId2dVM1J5YVc1bktISXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5NXdkWE5vS0RBcExDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFJHbGpkR2x2Ym1GeWVWdGhYU0E5SUhJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbTF2Y25Cb1ZHRnlaMlYwY3pzS0lDQWdJQ0FnSUNBZ0lDQWdkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlIUXViR1Z1WjNSb0lENGdNQ0FtSmlCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNU5aWE5vTG5Wd1pHRjBaVTF2Y25Cb1ZHRnlaMlYwY3lncElHNXZJR3h2Ym1kbGNpQnpkWEJ3YjNKMGN5QlVTRkpGUlM1SFpXOXRaWFJ5ZVM0Z1ZYTmxJRlJJVWtWRkxrSjFabVpsY2tkbGIyMWxkSEo1SUdsdWMzUmxZV1F1SWlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdjbUY1WTJGemRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbWRsYjIxbGRISjVMQ0JwSUQwZ2RHaHBjeTV0WVhSbGNtbGhiQ3dnY2lBOUlIUm9hWE11YldGMGNtbDRWMjl5YkdRN0NpQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlIWnZhV1FnTUNCOGZDQW9iaTVpYjNWdVpHbHVaMU53YUdWeVpTQTlQVDBnYm5Wc2JDQW1KaUJ1TG1OdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BMQ0JDYnk1amIzQjVLRzR1WW05MWJtUnBibWRUY0dobGNtVXBMQ0JDYnk1aGNIQnNlVTFoZEhKcGVEUW9jaWtzSUdVdWNtRjVMbWx1ZEdWeWMyVmpkSE5UY0dobGNtVW9RbThwSUQwOVBTQWhNU2tnZkh3Z0tFTnNMbU52Y0hrb2Npa3VhVzUyWlhKMEtDa3NJR2hwTG1OdmNIa29aUzV5WVhrcExtRndjR3g1VFdGMGNtbDROQ2hEYkNrc0lHNHVZbTkxYm1ScGJtZENiM2dnSVQwOUlHNTFiR3dnSmlZZ2FHa3VhVzUwWlhKelpXTjBjMEp2ZUNodUxtSnZkVzVrYVc1blFtOTRLU0E5UFQwZ0lURXBLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdiR1YwSUc4N0NpQWdJQ0FnSUNBZ2FXWWdLRzR1YVhOQ2RXWm1aWEpIWlc5dFpYUnllU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlHNHVhVzVrWlhnc0lHd2dQU0J1TG1GMGRISnBZblYwWlhNdWNHOXphWFJwYjI0c0lHTWdQU0J1TG0xdmNuQm9RWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaXdnYUNBOUlHNHViVzl5Y0doVVlYSm5aWFJ6VW1Wc1lYUnBkbVVzSUhVZ1BTQnVMbUYwZEhKcFluVjBaWE11ZFhZc0lHUWdQU0J1TG1GMGRISnBZblYwWlhNdWRYWXlMQ0JtSUQwZ2JpNW5jbTkxY0hNc0lHMGdQU0J1TG1SeVlYZFNZVzVuWlRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dFZ0lUMDlJRzUxYkd3cElHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHa3BLU0JtYjNJb2JHVjBJSGdnUFNBd0xDQjJJRDBnWmk1c1pXNW5kR2c3SUhnZ1BDQjJPeUI0S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2NnUFNCbVczaGRMQ0J3SUQwZ2FWdG5MbTFoZEdWeWFXRnNTVzVrWlhoZExDQmZJRDBnVFdGMGFDNXRZWGdvWnk1emRHRnlkQ3dnYlM1emRHRnlkQ2tzSUhrZ1BTQk5ZWFJvTG0xcGJpaGhMbU52ZFc1MExDQk5ZWFJvTG0xcGJpaG5Mbk4wWVhKMElDc2daeTVqYjNWdWRDd2diUzV6ZEdGeWRDQXJJRzB1WTI5MWJuUXBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZaUE5SUY4c0lFRWdQU0I1T3lCaUlEd2dRVHNnWWlBclBTQXpLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUQ0E5SUdFdVoyVjBXQ2hpS1N3Z1NTQTlJR0V1WjJWMFdDaGlJQ3NnTVNrc0lHc2dQU0JoTG1kbGRGZ29ZaUFySURJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzhnUFNCdmN5aDBhR2x6TENCd0xDQmxMQ0JvYVN3Z2JDd2dZeXdnYUN3Z2RTd2daQ3dnVEN3Z1NTd2dheWtzSUc4Z0ppWWdLRzh1Wm1GalpVbHVaR1Y0SUQwZ1RXRjBhQzVtYkc5dmNpaGlJQzhnTXlrc0lHOHVabUZqWlM1dFlYUmxjbWxoYkVsdVpHVjRJRDBnWnk1dFlYUmxjbWxoYkVsdVpHVjRMQ0IwTG5CMWMyZ29ieWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhnZ1BTQk5ZWFJvTG0xaGVDZ3dMQ0J0TG5OMFlYSjBLU3dnZGlBOUlFMWhkR2d1YldsdUtHRXVZMjkxYm5Rc0lHMHVjM1JoY25RZ0t5QnRMbU52ZFc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1p5QTlJSGdzSUhBZ1BTQjJPeUJuSUR3Z2NEc2daeUFyUFNBektYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1h5QTlJR0V1WjJWMFdDaG5LU3dnZVNBOUlHRXVaMlYwV0NobklDc2dNU2tzSUdJZ1BTQmhMbWRsZEZnb1p5QXJJRElwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOGdQU0J2Y3loMGFHbHpMQ0JwTENCbExDQm9hU3dnYkN3Z1l5d2dhQ3dnZFN3Z1pDd2dYeXdnZVN3Z1lpa3NJRzhnSmlZZ0tHOHVabUZqWlVsdVpHVjRJRDBnVFdGMGFDNW1iRzl2Y2lobklDOGdNeWtzSUhRdWNIVnphQ2h2S1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2JDQWhQVDBnZG05cFpDQXdLU0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hwS1NrZ1ptOXlLR3hsZENCNElEMGdNQ3dnZGlBOUlHWXViR1Z1WjNSb095QjRJRHdnZGpzZ2VDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbklEMGdabHQ0WFN3Z2NDQTlJR2xiWnk1dFlYUmxjbWxoYkVsdVpHVjRYU3dnWHlBOUlFMWhkR2d1YldGNEtHY3VjM1JoY25Rc0lHMHVjM1JoY25RcExDQjVJRDBnVFdGMGFDNXRhVzRvYkM1amIzVnVkQ3dnVFdGMGFDNXRhVzRvWnk1emRHRnlkQ0FySUdjdVkyOTFiblFzSUcwdWMzUmhjblFnS3lCdExtTnZkVzUwS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdJZ1BTQmZMQ0JCSUQwZ2VUc2dZaUE4SUVFN0lHSWdLejBnTXlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUV3Z1BTQmlMQ0JKSUQwZ1lpQXJJREVzSUdzZ1BTQmlJQ3NnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYjNNb2RHaHBjeXdnY0N3Z1pTd2dhR2tzSUd3c0lHTXNJR2dzSUhVc0lHUXNJRXdzSUVrc0lHc3BMQ0J2SUNZbUlDaHZMbVpoWTJWSmJtUmxlQ0E5SUUxaGRHZ3VabXh2YjNJb1lpQXZJRE1wTENCdkxtWmhZMlV1YldGMFpYSnBZV3hKYm1SbGVDQTlJR2N1YldGMFpYSnBZV3hKYm1SbGVDd2dkQzV3ZFhOb0tHOHBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ1RXRjBhQzV0WVhnb01Dd2diUzV6ZEdGeWRDa3NJSFlnUFNCTllYUm9MbTFwYmloc0xtTnZkVzUwTENCdExuTjBZWEowSUNzZ2JTNWpiM1Z1ZENrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdjZ1BTQjRMQ0J3SUQwZ2Rqc2daeUE4SUhBN0lHY2dLejBnTXlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY4Z1BTQm5MQ0I1SUQwZ1p5QXJJREVzSUdJZ1BTQm5JQ3NnTWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYjNNb2RHaHBjeXdnYVN3Z1pTd2dhR2tzSUd3c0lHTXNJR2dzSUhVc0lHUXNJRjhzSUhrc0lHSXBMQ0J2SUNZbUlDaHZMbVpoWTJWSmJtUmxlQ0E5SUUxaGRHZ3VabXh2YjNJb1p5QXZJRE1wTENCMExuQjFjMmdvYnlrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJRzR1YVhOSFpXOXRaWFJ5ZVNBbUppQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVOWlhOb0xuSmhlV05oYzNRb0tTQnVieUJzYjI1blpYSWdjM1Z3Y0c5eWRITWdWRWhTUlVVdVIyVnZiV1YwY25rdUlGVnpaU0JVU0ZKRlJTNUNkV1ptWlhKSFpXOXRaWFJ5ZVNCcGJuTjBaV0ZrTGlJcE93b2dJQ0FnZlFwOU93cHpkQzV3Y205MGIzUjVjR1V1YVhOTlpYTm9JRDBnSVRBN0NtWjFibU4wYVc5dUlHaG1LSE1zSUdVc0lIUXNJRzRzSUdrc0lISXNJRzhzSUdFcElIc0tJQ0FnSUd4bGRDQnNPd29nSUNBZ2FXWWdLR1V1YzJsa1pTQTlQVDBnYVhRZ1B5QnNJRDBnYmk1cGJuUmxjbk5sWTNSVWNtbGhibWRzWlNodkxDQnlMQ0JwTENBaE1Dd2dZU2tnT2lCc0lEMGdiaTVwYm5SbGNuTmxZM1JVY21saGJtZHNaU2hwTENCeUxDQnZMQ0JsTG5OcFpHVWdJVDA5SUVOcExDQmhLU3dnYkNBOVBUMGdiblZzYkNrZ2NtVjBkWEp1SUc1MWJHdzdDaUFnSUNCemN5NWpiM0I1S0dFcExDQnpjeTVoY0hCc2VVMWhkSEpwZURRb2N5NXRZWFJ5YVhoWGIzSnNaQ2s3Q2lBZ0lDQnNaWFFnWXlBOUlIUXVjbUY1TG05eWFXZHBiaTVrYVhOMFlXNWpaVlJ2S0hOektUc0tJQ0FnSUhKbGRIVnliaUJqSUR3Z2RDNXVaV0Z5SUh4OElHTWdQaUIwTG1aaGNpQS9JRzUxYkd3Z09pQjdDaUFnSUNBZ0lDQWdaR2x6ZEdGdVkyVTZJR01zQ2lBZ0lDQWdJQ0FnY0c5cGJuUTZJSE56TG1Oc2IyNWxLQ2tzQ2lBZ0lDQWdJQ0FnYjJKcVpXTjBPaUJ6Q2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUc5ektITXNJR1VzSUhRc0lHNHNJR2tzSUhJc0lHOHNJR0VzSUd3c0lHTXNJR2dzSUhVcElIc0tJQ0FnSUcxdUxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9hU3dnWXlrc0lHZHVMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvYVN3Z2FDa3NJSGh1TG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2FTd2dkU2s3Q2lBZ0lDQnNaWFFnWkNBOUlITXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6T3dvZ0lDQWdhV1lnS0hJZ0ppWWdaQ2tnZXdvZ0lDQWdJQ0FnSUV0eUxuTmxkQ2d3TENBd0xDQXdLU3dnWlhNdWMyVjBLREFzSURBc0lEQXBMQ0IwY3k1elpYUW9NQ3dnTUN3Z01DazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnRJRDBnTUN3Z2VDQTlJSEl1YkdWdVozUm9PeUJ0SUR3Z2VEc2diU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQmtXMjFkTENCbklEMGdjbHR0WFRzS0lDQWdJQ0FnSUNBZ0lDQWdkaUFoUFQwZ01DQW1KaUFvZW04dVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaG5MQ0JqS1N3Z1ZXOHVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2huTENCb0tTd2dUMjh1Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNobkxDQjFLU3dnYnlBL0lDaExjaTVoWkdSVFkyRnNaV1JXWldOMGIzSW9lbThzSUhZcExDQmxjeTVoWkdSVFkyRnNaV1JXWldOMGIzSW9WVzhzSUhZcExDQjBjeTVoWkdSVFkyRnNaV1JXWldOMGIzSW9UMjhzSUhZcEtTQTZJQ2hMY2k1aFpHUlRZMkZzWldSV1pXTjBiM0lvZW04dWMzVmlLRzF1S1N3Z2Rpa3NJR1Z6TG1Ga1pGTmpZV3hsWkZabFkzUnZjaWhWYnk1emRXSW9aMjRwTENCMktTd2dkSE11WVdSa1UyTmhiR1ZrVm1WamRHOXlLRTl2TG5OMVlpaDRiaWtzSUhZcEtTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJRzF1TG1Ga1pDaExjaWtzSUdkdUxtRmtaQ2hsY3lrc0lIaHVMbUZrWkNoMGN5azdDaUFnSUNCOUNpQWdJQ0J6TG1selUydHBibTVsWkUxbGMyZ2dKaVlnS0hNdVltOXVaVlJ5WVc1elptOXliU2hqTENCdGJpa3NJSE11WW05dVpWUnlZVzV6Wm05eWJTaG9MQ0JuYmlrc0lITXVZbTl1WlZSeVlXNXpabTl5YlNoMUxDQjRiaWtwT3dvZ0lDQWdiR1YwSUdZZ1BTQm9aaWh6TENCbExDQjBMQ0J1TENCdGJpd2daMjRzSUhodUxDQklieWs3Q2lBZ0lDQnBaaUFvWmlrZ2V3b2dJQ0FnSUNBZ0lHRWdKaVlnS0c1ekxtWnliMjFDZFdabVpYSkJkSFJ5YVdKMWRHVW9ZU3dnWXlrc0lHbHpMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWVN3Z2FDa3NJSEp6TG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb1lTd2dkU2tzSUdZdWRYWWdQU0J1ZEM1blpYUlZWaWhJYnl3Z2JXNHNJR2R1TENCNGJpd2dibk1zSUdsekxDQnljeXdnYm1WM0lGZ3BLU3dnYkNBbUppQW9ibk11Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoc0xDQmpLU3dnYVhNdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHNMQ0JvS1N3Z2NuTXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2hzTENCMUtTd2daaTUxZGpJZ1BTQnVkQzVuWlhSVlZpaElieXdnYlc0c0lHZHVMQ0I0Yml3Z2JuTXNJR2x6TENCeWN5d2dibVYzSUZncEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYlNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnWVRvZ1l5d0tJQ0FnSUNBZ0lDQWdJQ0FnWWpvZ2FDd0tJQ0FnSUNBZ0lDQWdJQ0FnWXpvZ2RTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNPaUJ1WlhjZ1RTd0tJQ0FnSUNBZ0lDQWdJQ0FnYldGMFpYSnBZV3hKYm1SbGVEb2dNQW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYm5RdVoyVjBUbTl5YldGc0tHMXVMQ0JuYml3Z2VHNHNJRzB1Ym05eWJXRnNLU3dnWmk1bVlXTmxJRDBnYlRzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCbU93cDlDblpoY2lCM2JpQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1gyVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURFc0lIUWdQU0F4TENCdUlEMGdNU3dnYVNBOUlERXNJSElnUFNBeExDQnZJRDBnTVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlRbTk0UjJWdmJXVjBjbmtpTENCMGFHbHpMbkJoY21GdFpYUmxjbk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb09pQnVMQW9nSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRk5sWjIxbGJuUnpPaUJwTEFvZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhSVFpXZHRaVzUwY3pvZ2Npd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHaFRaV2R0Wlc1MGN6b2did29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0IwYUdsek93b2dJQ0FnSUNBZ0lHa2dQU0JOWVhSb0xtWnNiMjl5S0drcExDQnlJRDBnVFdGMGFDNW1iRzl2Y2loeUtTd2dieUE5SUUxaGRHZ3VabXh2YjNJb2J5azdDaUFnSUNBZ0lDQWdiR1YwSUd3Z1BTQmJYU3dnWXlBOUlGdGRMQ0JvSUQwZ1cxMHNJSFVnUFNCYlhTd2daQ0E5SURBc0lHWWdQU0F3T3dvZ0lDQWdJQ0FnSUcwb0lub2lMQ0FpZVNJc0lDSjRJaXdnTFRFc0lDMHhMQ0J1TENCMExDQmxMQ0J2TENCeUxDQXdLU3dnYlNnaWVpSXNJQ0o1SWl3Z0luZ2lMQ0F4TENBdE1Td2diaXdnZEN3Z0xXVXNJRzhzSUhJc0lERXBMQ0J0S0NKNElpd2dJbm9pTENBaWVTSXNJREVzSURFc0lHVXNJRzRzSUhRc0lHa3NJRzhzSURJcExDQnRLQ0o0SWl3Z0lub2lMQ0FpZVNJc0lERXNJQzB4TENCbExDQnVMQ0F0ZEN3Z2FTd2dieXdnTXlrc0lHMG9JbmdpTENBaWVTSXNJQ0o2SWl3Z01Td2dMVEVzSUdVc0lIUXNJRzRzSUdrc0lISXNJRFFwTENCdEtDSjRJaXdnSW5raUxDQWllaUlzSUMweExDQXRNU3dnWlN3Z2RDd2dMVzRzSUdrc0lISXNJRFVwTENCMGFHbHpMbk5sZEVsdVpHVjRLR3dwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnWkdVb1l5d2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWJtOXliV0ZzSWl3Z2JtVjNJR1JsS0dnc0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5WMklpd2dibVYzSUdSbEtIVXNJRElwS1RzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdEtIZ3NJSFlzSUdjc0lIQXNJRjhzSUhrc0lHSXNJRUVzSUV3c0lFa3NJR3NwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVJZ1BTQjVJQzhnVEN3Z1VDQTlJR0lnTHlCSkxDQjNJRDBnZVNBdklESXNJRVVnUFNCaUlDOGdNaXdnUkNBOUlFRWdMeUF5TENCVklEMGdUQ0FySURFc0lFWWdQU0JKSUNzZ01Td2dUeUE5SURBc0lHNWxJRDBnTUN3Z1kyVWdQU0J1WlhjZ1RUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JXSUQwZ01Ec2dWaUE4SUVZN0lGWXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1Z5QTlJRllnS2lCUUlDMGdSVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdhR1VnUFNBd095Qm9aU0E4SUZVN0lHaGxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzWlNBOUlHaGxJQ29nUWlBdElIYzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJWYmVGMGdQU0JzWlNBcUlIQXNJR05sVzNaZElEMGdWeUFxSUY4c0lHTmxXMmRkSUQwZ1JDd2dZeTV3ZFhOb0tHTmxMbmdzSUdObExua3NJR05sTG5vcExDQmpaVnQ0WFNBOUlEQXNJR05sVzNaZElEMGdNQ3dnWTJWYloxMGdQU0JCSUQ0Z01DQS9JREVnT2lBdE1Td2dhQzV3ZFhOb0tHTmxMbmdzSUdObExua3NJR05sTG5vcExDQjFMbkIxYzJnb2FHVWdMeUJNS1N3Z2RTNXdkWE5vS0RFZ0xTQldJQzhnU1Nrc0lFOGdLejBnTVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUZZZ1BTQXdPeUJXSUR3Z1NUc2dWaXNyS1dadmNpaHNaWFFnVnlBOUlEQTdJRmNnUENCTU95QlhLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHaGxJRDBnWkNBcklGY2dLeUJWSUNvZ1Zpd2diR1VnUFNCa0lDc2dWeUFySUZVZ0tpQW9WaUFySURFcExDQm1aU0E5SUdRZ0t5QW9WeUFySURFcElDc2dWU0FxSUNoV0lDc2dNU2tzSUVKbElEMGdaQ0FySUNoWElDc2dNU2tnS3lCVklDb2dWanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3d1Y0hWemFDaG9aU3dnYkdVc0lFSmxLU3dnYkM1d2RYTm9LR3hsTENCbVpTd2dRbVVwTENCdVpTQXJQU0EyT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdFdVlXUmtSM0p2ZFhBb1ppd2dibVVzSUdzcExDQm1JQ3M5SUc1bExDQmtJQ3M5SUU4N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhkdUtHVXVkMmxrZEdnc0lHVXVhR1ZwWjJoMExDQmxMbVJsY0hSb0xDQmxMbmRwWkhSb1UyVm5iV1Z1ZEhNc0lHVXVhR1ZwWjJoMFUyVm5iV1Z1ZEhNc0lHVXVaR1Z3ZEdoVFpXZHRaVzUwY3lrN0NpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlGSnBLSE1wSUhzS0lDQWdJR3hsZENCbElEMGdlMzA3Q2lBZ0lDQm1iM0lvYkdWMElIUWdhVzRnY3lsN0NpQWdJQ0FnSUNBZ1pWdDBYU0E5SUh0OU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQnBiaUJ6VzNSZEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0J6VzNSZFcyNWRPd29nSUNBZ0lDQWdJQ0FnSUNCcElDWW1JQ2hwTG1selEyOXNiM0lnZkh3Z2FTNXBjMDFoZEhKcGVETWdmSHdnYVM1cGMwMWhkSEpwZURRZ2ZId2dhUzVwYzFabFkzUnZjaklnZkh3Z2FTNXBjMVpsWTNSdmNqTWdmSHdnYVM1cGMxWmxZM1J2Y2pRZ2ZId2dhUzVwYzFSbGVIUjFjbVVnZkh3Z2FTNXBjMUYxWVhSbGNtNXBiMjRwSUQ4Z1pWdDBYVnR1WFNBOUlHa3VZMnh2Ym1Vb0tTQTZJRUZ5Y21GNUxtbHpRWEp5WVhrb2FTa2dQeUJsVzNSZFcyNWRJRDBnYVM1emJHbGpaU2dwSURvZ1pWdDBYVnR1WFNBOUlHazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJR1U3Q24wS1puVnVZM1JwYjI0Z2VYUW9jeWtnZXdvZ0lDQWdiR1YwSUdVZ1BTQjdmVHNLSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREE3SUhRZ1BDQnpMbXhsYm1kMGFEc2dkQ3NyS1hzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUZKcEtITmJkRjBwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNCcGJpQnVLV1ZiYVYwZ1BTQnVXMmxkT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUdVN0NuMEtkbUZ5SUhWbUlEMGdld29nSUNBZ1kyeHZibVU2SUZKcExBb2dJQ0FnYldWeVoyVTZJSGwwQ24wc0lHUm1JRDBnWUhadmFXUWdiV0ZwYmlncElIc0tDV2RzWDFCdmMybDBhVzl1SUQwZ2NISnZhbVZqZEdsdmJrMWhkSEpwZUNBcUlHMXZaR1ZzVm1sbGQwMWhkSEpwZUNBcUlIWmxZelFvSUhCdmMybDBhVzl1TENBeExqQWdLVHNLZldBc0lHWm1JRDBnWUhadmFXUWdiV0ZwYmlncElIc0tDV2RzWDBaeVlXZERiMnh2Y2lBOUlIWmxZelFvSURFdU1Dd2dNQzR3TENBd0xqQXNJREV1TUNBcE93cDlZQ3dnYzI0Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdSMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSWxOb1lXUmxjazFoZEdWeWFXRnNJaXdnZEdocGN5NWtaV1pwYm1WeklEMGdlMzBzSUhSb2FYTXVkVzVwWm05eWJYTWdQU0I3ZlN3Z2RHaHBjeTUyWlhKMFpYaFRhR0ZrWlhJZ1BTQmtaaXdnZEdocGN5NW1jbUZuYldWdWRGTm9ZV1JsY2lBOUlHWm1MQ0IwYUdsekxteHBibVYzYVdSMGFDQTlJREVzSUhSb2FYTXVkMmx5WldaeVlXMWxJRDBnSVRFc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ01Td2dkR2hwY3k1bWIyY2dQU0FoTVN3Z2RHaHBjeTVzYVdkb2RITWdQU0FoTVN3Z2RHaHBjeTVqYkdsd2NHbHVaeUE5SUNFeExDQjBhR2x6TG1WNGRHVnVjMmx2Ym5NZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdSbGNtbDJZWFJwZG1Wek9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ1puSmhaMFJsY0hSb09pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pISmhkMEoxWm1abGNuTTZJQ0V4TEFvZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrWlhKVVpYaDBkWEpsVEU5RU9pQWhNUW9nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaR1ZtWVhWc2RFRjBkSEpwWW5WMFpWWmhiSFZsY3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVFvZ0lDQWdJQ0FnSUNBZ0lDQmRMQW9nSUNBZ0lDQWdJQ0FnSUNCMWRqb2dXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFLSUNBZ0lDQWdJQ0FnSUNBZ1hTd0tJQ0FnSUNBZ0lDQWdJQ0FnZFhZeU9pQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQW9nSUNBZ0lDQWdJQ0FnSUNCZENpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1cGJtUmxlREJCZEhSeWFXSjFkR1ZPWVcxbElEMGdkbTlwWkNBd0xDQjBhR2x6TG5WdWFXWnZjbTF6VG1WbFpGVndaR0YwWlNBOUlDRXhMQ0IwYUdsekxtZHNjMnhXWlhKemFXOXVJRDBnYm5Wc2JDd2daU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGxMbUYwZEhKcFluVjBaWE1nSVQwOUlIWnZhV1FnTUNBbUppQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVUYUdGa1pYSk5ZWFJsY21saGJEb2dZWFIwY21saWRYUmxjeUJ6YUc5MWJHUWdibTkzSUdKbElHUmxabWx1WldRZ2FXNGdWRWhTUlVVdVFuVm1abVZ5UjJWdmJXVjBjbmtnYVc1emRHVmhaQzRpS1N3Z2RHaHBjeTV6WlhSV1lXeDFaWE1vWlNrcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVabkpoWjIxbGJuUlRhR0ZrWlhJZ1BTQmxMbVp5WVdkdFpXNTBVMmhoWkdWeUxDQjBhR2x6TG5abGNuUmxlRk5vWVdSbGNpQTlJR1V1ZG1WeWRHVjRVMmhoWkdWeUxDQjBhR2x6TG5WdWFXWnZjbTF6SUQwZ1Vta29aUzUxYm1sbWIzSnRjeWtzSUhSb2FYTXVaR1ZtYVc1bGN5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR1V1WkdWbWFXNWxjeWtzSUhSb2FYTXVkMmx5WldaeVlXMWxJRDBnWlM1M2FYSmxabkpoYldVc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpYZHBaSFJvSUQwZ1pTNTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ3NJSFJvYVhNdWJHbG5hSFJ6SUQwZ1pTNXNhV2RvZEhNc0lIUm9hWE11WTJ4cGNIQnBibWNnUFNCbExtTnNhWEJ3YVc1bkxDQjBhR2x6TG1WNGRHVnVjMmx2Ym5NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmxMbVY0ZEdWdWMybHZibk1wTENCMGFHbHpMbWRzYzJ4V1pYSnphVzl1SUQwZ1pTNW5iSE5zVm1WeWMybHZiaXdnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0J6ZFhCbGNpNTBiMHBUVDA0b1pTazdDaUFnSUNBZ0lDQWdkQzVuYkhOc1ZtVnljMmx2YmlBOUlIUm9hWE11WjJ4emJGWmxjbk5wYjI0c0lIUXVkVzVwWm05eWJYTWdQU0I3ZlRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ2FXNGdkR2hwY3k1MWJtbG1iM0p0Y3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdkR2hwY3k1MWJtbG1iM0p0YzF0cFhTNTJZV3gxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdieUFtSmlCdkxtbHpWR1Y0ZEhWeVpTQS9JSFF1ZFc1cFptOXliWE5iYVYwZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaWRDSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2J5NTBiMHBUVDA0b1pTa3VkWFZwWkFvZ0lDQWdJQ0FnSUNBZ0lDQjlJRG9nYnlBbUppQnZMbWx6UTI5c2IzSWdQeUIwTG5WdWFXWnZjbTF6VzJsZElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ltTWlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHOHVaMlYwU0dWNEtDa0tJQ0FnSUNBZ0lDQWdJQ0FnZlNBNklHOGdKaVlnYnk1cGMxWmxZM1J2Y2pJZ1B5QjBMblZ1YVdadmNtMXpXMmxkSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSW5ZeUlpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdkxuUnZRWEp5WVhrb0tRb2dJQ0FnSUNBZ0lDQWdJQ0I5SURvZ2J5QW1KaUJ2TG1selZtVmpkRzl5TXlBL0lIUXVkVzVwWm05eWJYTmJhVjBnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFpZGpNaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc4dWRHOUJjbkpoZVNncENpQWdJQ0FnSUNBZ0lDQWdJSDBnT2lCdklDWW1JRzh1YVhOV1pXTjBiM0kwSUQ4Z2RDNTFibWxtYjNKdGMxdHBYU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0oyTkNJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYnk1MGIwRnljbUY1S0NrS0lDQWdJQ0FnSUNBZ0lDQWdmU0E2SUc4Z0ppWWdieTVwYzAxaGRISnBlRE1nUHlCMExuVnVhV1p2Y20xelcybGRJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbTB6SWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ2TG5SdlFYSnlZWGtvS1FvZ0lDQWdJQ0FnSUNBZ0lDQjlJRG9nYnlBbUppQnZMbWx6VFdGMGNtbDROQ0EvSUhRdWRXNXBabTl5YlhOYmFWMGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWliVFFpTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzh1ZEc5QmNuSmhlU2dwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMGdPaUIwTG5WdWFXWnZjbTF6VzJsZElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHOEtJQ0FnSUNBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9kR2hwY3k1a1pXWnBibVZ6S1M1c1pXNW5kR2dnUGlBd0lDWW1JQ2gwTG1SbFptbHVaWE1nUFNCMGFHbHpMbVJsWm1sdVpYTXBMQ0IwTG5abGNuUmxlRk5vWVdSbGNpQTlJSFJvYVhNdWRtVnlkR1Y0VTJoaFpHVnlMQ0IwTG1aeVlXZHRaVzUwVTJoaFpHVnlJRDBnZEdocGN5NW1jbUZuYldWdWRGTm9ZV1JsY2pzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUh0OU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FTQnBiaUIwYUdsekxtVjRkR1Z1YzJsdmJuTXBkR2hwY3k1bGVIUmxibk5wYjI1elcybGRJRDA5UFNBaE1DQW1KaUFvYmx0cFhTQTlJQ0V3S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbXRsZVhNb2Jpa3ViR1Z1WjNSb0lENGdNQ0FtSmlBb2RDNWxlSFJsYm5OcGIyNXpJRDBnYmlrc0lIUTdDaUFnSUNCOUNuMDdDbk51TG5CeWIzUnZkSGx3WlM1cGMxTm9ZV1JsY2sxaGRHVnlhV0ZzSUQwZ0lUQTdDblpoY2lCSmNpQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1RtVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKRFlXMWxjbUVpTENCMGFHbHpMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaU0E5SUc1bGR5QndaU3dnZEdocGN5NXdjbTlxWldOMGFXOXVUV0YwY21sNElEMGdibVYzSUhCbExDQjBhR2x6TG5CeWIycGxZM1JwYjI1TllYUnlhWGhKYm5abGNuTmxJRDBnYm1WM0lIQmxPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTd2dkQ2tzSUhSb2FYTXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxMbU52Y0hrb1pTNXRZWFJ5YVhoWGIzSnNaRWx1ZG1WeWMyVXBMQ0IwYUdsekxuQnliMnBsWTNScGIyNU5ZWFJ5YVhndVkyOXdlU2hsTG5CeWIycGxZM1JwYjI1TllYUnlhWGdwTENCMGFHbHpMbkJ5YjJwbFkzUnBiMjVOWVhSeWFYaEpiblpsY25ObExtTnZjSGtvWlM1d2NtOXFaV04wYVc5dVRXRjBjbWw0U1c1MlpYSnpaU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSWGIzSnNaRVJwY21WamRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlhiM0pzWkUxaGRISnBlQ2doTUN3Z0lURXBPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1dFlYUnlhWGhYYjNKc1pDNWxiR1Z0Wlc1MGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXpaWFFvTFhSYk9GMHNJQzEwV3psZExDQXRkRnN4TUYwcExtNXZjbTFoYkdsNlpTZ3BPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxUV0YwY21sNFYyOXliR1FvWlNrZ2V3b2dJQ0FnSUNBZ0lITjFjR1Z5TG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0dVcExDQjBhR2x6TG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlM1amIzQjVLSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXBMbWx1ZG1WeWRDZ3BPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxWMjl5YkdSTllYUnlhWGdvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSE4xY0dWeUxuVndaR0YwWlZkdmNteGtUV0YwY21sNEtHVXNJSFFwTENCMGFHbHpMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaUzVqYjNCNUtIUm9hWE11YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncE93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLQ2t1WTI5d2VTaDBhR2x6S1RzS0lDQWdJSDBLZlRzS1NYSXVjSEp2ZEc5MGVYQmxMbWx6UTJGdFpYSmhJRDBnSVRBN0NuWmhjaUIxZENBOUlHTnNZWE56SUdWNGRHVnVaSE1nU1hJZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRFV3TENCMElEMGdNU3dnYmlBOUlDNHhMQ0JwSUQwZ01tVXpLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKUVpYSnpjR1ZqZEdsMlpVTmhiV1Z5WVNJc0lIUm9hWE11Wm05MklEMGdaU3dnZEdocGN5NTZiMjl0SUQwZ01Td2dkR2hwY3k1dVpXRnlJRDBnYml3Z2RHaHBjeTVtWVhJZ1BTQnBMQ0IwYUdsekxtWnZZM1Z6SUQwZ01UQXNJSFJvYVhNdVlYTndaV04wSUQwZ2RDd2dkR2hwY3k1MmFXVjNJRDBnYm5Wc2JDd2dkR2hwY3k1bWFXeHRSMkYxWjJVZ1BTQXpOU3dnZEdocGN5NW1hV3h0VDJabWMyVjBJRDBnTUN3Z2RHaHBjeTUxY0dSaGRHVlFjbTlxWldOMGFXOXVUV0YwY21sNEtDazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobExDQjBLU3dnZEdocGN5NW1iM1lnUFNCbExtWnZkaXdnZEdocGN5NTZiMjl0SUQwZ1pTNTZiMjl0TENCMGFHbHpMbTVsWVhJZ1BTQmxMbTVsWVhJc0lIUm9hWE11Wm1GeUlEMGdaUzVtWVhJc0lIUm9hWE11Wm05amRYTWdQU0JsTG1adlkzVnpMQ0IwYUdsekxtRnpjR1ZqZENBOUlHVXVZWE53WldOMExDQjBhR2x6TG5acFpYY2dQU0JsTG5acFpYY2dQVDA5SUc1MWJHd2dQeUJ1ZFd4c0lEb2dUMkpxWldOMExtRnpjMmxuYmloN2ZTd2daUzUyYVdWM0tTd2dkR2hwY3k1bWFXeHRSMkYxWjJVZ1BTQmxMbVpwYkcxSFlYVm5aU3dnZEdocGN5NW1hV3h0VDJabWMyVjBJRDBnWlM1bWFXeHRUMlptYzJWMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbTlqWVd4TVpXNW5kR2dvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ0xqVWdLaUIwYUdsekxtZGxkRVpwYkcxSVpXbG5hSFFvS1NBdklHVTdDaUFnSUNBZ0lDQWdkR2hwY3k1bWIzWWdQU0JrY2lBcUlESWdLaUJOWVhSb0xtRjBZVzRvZENrc0lIUm9hWE11ZFhCa1lYUmxVSEp2YW1WamRHbHZiazFoZEhKcGVDZ3BPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJtOWpZV3hNWlc1bmRHZ29LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0JOWVhSb0xuUmhiaWhYYmlBcUlDNDFJQ29nZEdocGN5NW1iM1lwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUF1TlNBcUlIUm9hWE11WjJWMFJtbHNiVWhsYVdkb2RDZ3BJQzhnWlRzS0lDQWdJSDBLSUNBZ0lHZGxkRVZtWm1WamRHbDJaVVpQVmlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pISWdLaUF5SUNvZ1RXRjBhQzVoZEdGdUtFMWhkR2d1ZEdGdUtGZHVJQ29nTGpVZ0tpQjBhR2x6TG1admRpa2dMeUIwYUdsekxucHZiMjBwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBSbWxzYlZkcFpIUm9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBiRzFIWVhWblpTQXFJRTFoZEdndWJXbHVLSFJvYVhNdVlYTndaV04wTENBeEtUc0tJQ0FnSUgwS0lDQWdJR2RsZEVacGJHMUlaV2xuYUhRb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm1sc2JVZGhkV2RsSUM4Z1RXRjBhQzV0WVhnb2RHaHBjeTVoYzNCbFkzUXNJREVwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBWbWxsZDA5bVpuTmxkQ2hsTENCMExDQnVMQ0JwTENCeUxDQnZLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWhjM0JsWTNRZ1BTQmxJQzhnZEN3Z2RHaHBjeTUyYVdWM0lEMDlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxuWnBaWGNnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJR1Z1WVdKc1pXUTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1kV3hzVjJsa2RHZzZJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHWjFiR3hJWldsbmFIUTZJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEZnNklEQXNDaUFnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRms2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQXhMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SURFS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1MmFXVjNMbVZ1WVdKc1pXUWdQU0FoTUN3Z2RHaHBjeTUyYVdWM0xtWjFiR3hYYVdSMGFDQTlJR1VzSUhSb2FYTXVkbWxsZHk1bWRXeHNTR1ZwWjJoMElEMGdkQ3dnZEdocGN5NTJhV1YzTG05bVpuTmxkRmdnUFNCdUxDQjBhR2x6TG5acFpYY3ViMlptYzJWMFdTQTlJR2tzSUhSb2FYTXVkbWxsZHk1M2FXUjBhQ0E5SUhJc0lIUm9hWE11ZG1sbGR5NW9aV2xuYUhRZ1BTQnZMQ0IwYUdsekxuVndaR0YwWlZCeWIycGxZM1JwYjI1TllYUnlhWGdvS1RzS0lDQWdJSDBLSUNBZ0lHTnNaV0Z5Vm1sbGQwOW1abk5sZENncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5acFpYY2dJVDA5SUc1MWJHd2dKaVlnS0hSb2FYTXVkbWxsZHk1bGJtRmliR1ZrSUQwZ0lURXBMQ0IwYUdsekxuVndaR0YwWlZCeWIycGxZM1JwYjI1TllYUnlhWGdvS1RzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlZCeWIycGxZM1JwYjI1TllYUnlhWGdvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbTVsWVhJc0lIUWdQU0JsSUNvZ1RXRjBhQzUwWVc0b1YyNGdLaUF1TlNBcUlIUm9hWE11Wm05MktTQXZJSFJvYVhNdWVtOXZiU3dnYmlBOUlESWdLaUIwTENCcElEMGdkR2hwY3k1aGMzQmxZM1FnS2lCdUxDQnlJRDBnTFM0MUlDb2dhU3dnYnlBOUlIUm9hWE11ZG1sbGR6c0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTJhV1YzSUNFOVBTQnVkV3hzSUNZbUlIUm9hWE11ZG1sbGR5NWxibUZpYkdWa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnYnk1bWRXeHNWMmxrZEdnc0lHTWdQU0J2TG1aMWJHeElaV2xuYUhRN0NpQWdJQ0FnSUNBZ0lDQWdJSElnS3owZ2J5NXZabVp6WlhSWUlDb2dhU0F2SUd3c0lIUWdMVDBnYnk1dlptWnpaWFJaSUNvZ2JpQXZJR01zSUdrZ0tqMGdieTUzYVdSMGFDQXZJR3dzSUc0Z0tqMGdieTVvWldsbmFIUWdMeUJqT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUhSb2FYTXVabWxzYlU5bVpuTmxkRHNLSUNBZ0lDQWdJQ0JoSUNFOVBTQXdJQ1ltSUNoeUlDczlJR1VnS2lCaElDOGdkR2hwY3k1blpYUkdhV3h0VjJsa2RHZ29LU2tzSUhSb2FYTXVjSEp2YW1WamRHbHZiazFoZEhKcGVDNXRZV3RsVUdWeWMzQmxZM1JwZG1Vb2Npd2djaUFySUdrc0lIUXNJSFFnTFNCdUxDQmxMQ0IwYUdsekxtWmhjaWtzSUhSb2FYTXVjSEp2YW1WamRHbHZiazFoZEhKcGVFbHVkbVZ5YzJVdVkyOXdlU2gwYUdsekxuQnliMnBsWTNScGIyNU5ZWFJ5YVhncExtbHVkbVZ5ZENncE93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSE4xY0dWeUxuUnZTbE5QVGlobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNXZZbXBsWTNRdVptOTJJRDBnZEdocGN5NW1iM1lzSUhRdWIySnFaV04wTG5wdmIyMGdQU0IwYUdsekxucHZiMjBzSUhRdWIySnFaV04wTG01bFlYSWdQU0IwYUdsekxtNWxZWElzSUhRdWIySnFaV04wTG1aaGNpQTlJSFJvYVhNdVptRnlMQ0IwTG05aWFtVmpkQzVtYjJOMWN5QTlJSFJvYVhNdVptOWpkWE1zSUhRdWIySnFaV04wTG1GemNHVmpkQ0E5SUhSb2FYTXVZWE53WldOMExDQjBhR2x6TG5acFpYY2dJVDA5SUc1MWJHd2dKaVlnS0hRdWIySnFaV04wTG5acFpYY2dQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0IwYUdsekxuWnBaWGNwS1N3Z2RDNXZZbXBsWTNRdVptbHNiVWRoZFdkbElEMGdkR2hwY3k1bWFXeHRSMkYxWjJVc0lIUXViMkpxWldOMExtWnBiRzFQWm1aelpYUWdQU0IwYUdsekxtWnBiRzFQWm1aelpYUXNJSFE3Q2lBZ0lDQjlDbjA3Q25WMExuQnliM1J2ZEhsd1pTNXBjMUJsY25Od1pXTjBhWFpsUTJGdFpYSmhJRDBnSVRBN0NuWmhjaUIxYVNBOUlEa3dMQ0JrYVNBOUlERXNJQ1J6SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJPWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5SNWNHVWdQU0FpUTNWaVpVTmhiV1Z5WVNJc0lHNHVhWE5YWldKSFRFTjFZbVZTWlc1a1pYSlVZWEpuWlhRZ0lUMDlJQ0V3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGtOMVltVkRZVzFsY21FNklGUm9aU0JqYjI1emRISjFZM1J2Y2lCdWIzY2daWGh3WldOMGN5QmhiaUJwYm5OMFlXNWpaU0J2WmlCWFpXSkhURU4xWW1WU1pXNWtaWEpVWVhKblpYUWdZWE1nZEdocGNtUWdjR0Z5WVcxbGRHVnlMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUm9hWE11Y21WdVpHVnlWR0Z5WjJWMElEMGdianNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJRzVsZHlCMWRDaDFhU3dnWkdrc0lHVXNJSFFwT3dvZ0lDQWdJQ0FnSUdrdWJHRjVaWEp6SUQwZ2RHaHBjeTVzWVhsbGNuTXNJR2t1ZFhBdWMyVjBLREFzSUMweExDQXdLU3dnYVM1c2IyOXJRWFFvYm1WM0lFMG9NU3dnTUN3Z01Da3BMQ0IwYUdsekxtRmtaQ2hwS1RzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUc1bGR5QjFkQ2gxYVN3Z1pHa3NJR1VzSUhRcE93b2dJQ0FnSUNBZ0lISXViR0Y1WlhKeklEMGdkR2hwY3k1c1lYbGxjbk1zSUhJdWRYQXVjMlYwS0RBc0lDMHhMQ0F3S1N3Z2NpNXNiMjlyUVhRb2JtVjNJRTBvTFRFc0lEQXNJREFwS1N3Z2RHaHBjeTVoWkdRb2NpazdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQnVaWGNnZFhRb2RXa3NJR1JwTENCbExDQjBLVHNLSUNBZ0lDQWdJQ0J2TG14aGVXVnljeUE5SUhSb2FYTXViR0Y1WlhKekxDQnZMblZ3TG5ObGRDZ3dMQ0F3TENBeEtTd2dieTVzYjI5clFYUW9ibVYzSUUwb01Dd2dNU3dnTUNrcExDQjBhR2x6TG1Ga1pDaHZLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJRzVsZHlCMWRDaDFhU3dnWkdrc0lHVXNJSFFwT3dvZ0lDQWdJQ0FnSUdFdWJHRjVaWEp6SUQwZ2RHaHBjeTVzWVhsbGNuTXNJR0V1ZFhBdWMyVjBLREFzSURBc0lDMHhLU3dnWVM1c2IyOXJRWFFvYm1WM0lFMG9NQ3dnTFRFc0lEQXBLU3dnZEdocGN5NWhaR1FvWVNrN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCdVpYY2dkWFFvZFdrc0lHUnBMQ0JsTENCMEtUc0tJQ0FnSUNBZ0lDQnNMbXhoZVdWeWN5QTlJSFJvYVhNdWJHRjVaWEp6TENCc0xuVndMbk5sZENnd0xDQXRNU3dnTUNrc0lHd3ViRzl2YTBGMEtHNWxkeUJOS0RBc0lEQXNJREVwS1N3Z2RHaHBjeTVoWkdRb2JDazdDaUFnSUNBZ0lDQWdiR1YwSUdNZ1BTQnVaWGNnZFhRb2RXa3NJR1JwTENCbExDQjBLVHNLSUNBZ0lDQWdJQ0JqTG14aGVXVnljeUE5SUhSb2FYTXViR0Y1WlhKekxDQmpMblZ3TG5ObGRDZ3dMQ0F0TVN3Z01Da3NJR011Ykc5dmEwRjBLRzVsZHlCTktEQXNJREFzSUMweEtTa3NJSFJvYVhNdVlXUmtLR01wT3dvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuQmhjbVZ1ZENBOVBUMGdiblZzYkNBbUppQjBhR2x6TG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0NrN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbkpsYm1SbGNsUmhjbWRsZEN3Z1cya3NJSElzSUc4c0lHRXNJR3dzSUdOZElEMGdkR2hwY3k1amFHbHNaSEpsYml3Z2FDQTlJR1V1ZUhJdVpXNWhZbXhsWkN3Z2RTQTlJR1V1WjJWMFVtVnVaR1Z5VkdGeVoyVjBLQ2s3Q2lBZ0lDQWdJQ0FnWlM1NGNpNWxibUZpYkdWa0lEMGdJVEU3Q2lBZ0lDQWdJQ0FnYkdWMElHUWdQU0J1TG5SbGVIUjFjbVV1WjJWdVpYSmhkR1ZOYVhCdFlYQnpPd29nSUNBZ0lDQWdJRzR1ZEdWNGRIVnlaUzVuWlc1bGNtRjBaVTFwY0cxaGNITWdQU0FoTVN3Z1pTNXpaWFJTWlc1a1pYSlVZWEpuWlhRb2Jpd2dNQ2tzSUdVdWNtVnVaR1Z5S0hRc0lHa3BMQ0JsTG5ObGRGSmxibVJsY2xSaGNtZGxkQ2h1TENBeEtTd2daUzV5Wlc1a1pYSW9kQ3dnY2lrc0lHVXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtHNHNJRElwTENCbExuSmxibVJsY2loMExDQnZLU3dnWlM1elpYUlNaVzVrWlhKVVlYSm5aWFFvYml3Z015a3NJR1V1Y21WdVpHVnlLSFFzSUdFcExDQmxMbk5sZEZKbGJtUmxjbFJoY21kbGRDaHVMQ0EwS1N3Z1pTNXlaVzVrWlhJb2RDd2diQ2tzSUc0dWRHVjRkSFZ5WlM1blpXNWxjbUYwWlUxcGNHMWhjSE1nUFNCa0xDQmxMbk5sZEZKbGJtUmxjbFJoY21kbGRDaHVMQ0ExS1N3Z1pTNXlaVzVrWlhJb2RDd2dZeWtzSUdVdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0hVcExDQmxMbmh5TG1WdVlXSnNaV1FnUFNCb093b2dJQ0FnZlFwOUxDQnJhU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdiM1FnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaXdnYVN3Z2Npd2dieXdnWVN3Z2JDd2dZeXdnYUNsN0NpQWdJQ0FnSUNBZ1pTQTlJR1VnSVQwOUlIWnZhV1FnTUNBL0lHVWdPaUJiWFN3Z2RDQTlJSFFnSVQwOUlIWnZhV1FnTUNBL0lIUWdPaUJDYVRzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMExDQnVMQ0JwTENCeUxDQnZMQ0JoTENCc0xDQmpMQ0JvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbVpzYVhCWklEMGdJVEU3Q2lBZ0lDQjlDaUFnSUNCblpYUWdhVzFoWjJWektDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1sdFlXZGxPd29nSUNBZ2ZRb2dJQ0FnYzJWMElHbHRZV2RsY3lobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1cGJXRm5aU0E5SUdVN0NpQWdJQ0I5Q24wN0NtdHBMbkJ5YjNSdmRIbHdaUzVwYzBOMVltVlVaWGgwZFhKbElEMGdJVEE3Q25aaGNpQnFjeUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdRWFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaWw3Q2lBZ0lDQWdJQ0FnVG5WdFltVnlMbWx6U1c1MFpXZGxjaWgwS1NBbUppQW9ZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRFTjFZbVZTWlc1a1pYSlVZWEpuWlhRNklHTnZibk4wY25WamRHOXlJSE5wWjI1aGRIVnlaU0JwY3lCdWIzY2dWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwS0NCemFYcGxMQ0J2Y0hScGIyNXpJQ2tpS1N3Z2RDQTlJRzRwT3dvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VzSUdVc0lIUXBPd29nSUNBZ0lDQWdJSFFnUFNCMElIeDhJSHQ5TENCMGFHbHpMblJsZUhSMWNtVWdQU0J1WlhjZ2Eya29kbTlwWkNBd0xDQjBMbTFoY0hCcGJtY3NJSFF1ZDNKaGNGTXNJSFF1ZDNKaGNGUXNJSFF1YldGblJtbHNkR1Z5TENCMExtMXBia1pwYkhSbGNpd2dkQzVtYjNKdFlYUXNJSFF1ZEhsd1pTd2dkQzVoYm1semIzUnliM0I1TENCMExtVnVZMjlrYVc1bktTd2dkR2hwY3k1MFpYaDBkWEpsTG1selVtVnVaR1Z5VkdGeVoyVjBWR1Y0ZEhWeVpTQTlJQ0V3TENCMGFHbHpMblJsZUhSMWNtVXVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklEMGdkQzVuWlc1bGNtRjBaVTFwY0cxaGNITWdJVDA5SUhadmFXUWdNQ0EvSUhRdVoyVnVaWEpoZEdWTmFYQnRZWEJ6SURvZ0lURXNJSFJvYVhNdWRHVjRkSFZ5WlM1dGFXNUdhV3gwWlhJZ1BTQjBMbTFwYmtacGJIUmxjaUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RDNXRhVzVHYVd4MFpYSWdPaUIwZEN3Z2RHaHBjeTUwWlhoMGRYSmxMbDl1WldWa2MwWnNhWEJGYm5aTllYQWdQU0FoTVRzS0lDQWdJSDBLSUNBZ0lHWnliMjFGY1hWcGNtVmpkR0Z1WjNWc1lYSlVaWGgwZFhKbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMblJsZUhSMWNtVXVkSGx3WlNBOUlIUXVkSGx3WlN3Z2RHaHBjeTUwWlhoMGRYSmxMbVp2Y20xaGRDQTlJR04wTENCMGFHbHpMblJsZUhSMWNtVXVaVzVqYjJScGJtY2dQU0IwTG1WdVkyOWthVzVuTENCMGFHbHpMblJsZUhSMWNtVXVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklEMGdkQzVuWlc1bGNtRjBaVTFwY0cxaGNITXNJSFJvYVhNdWRHVjRkSFZ5WlM1dGFXNUdhV3gwWlhJZ1BTQjBMbTFwYmtacGJIUmxjaXdnZEdocGN5NTBaWGgwZFhKbExtMWhaMFpwYkhSbGNpQTlJSFF1YldGblJtbHNkR1Z5T3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRVZ4ZFdseVpXTjBPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdWNFUyaGhaR1Z5T2lCZ0Nnb0pDUWtKZG1GeWVXbHVaeUIyWldNeklIWlhiM0pzWkVScGNtVmpkR2x2YmpzS0Nna0pDUWwyWldNeklIUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpZ2dhVzRnZG1Wak15QmthWElzSUdsdUlHMWhkRFFnYldGMGNtbDRJQ2tnZXdvS0NRa0pDUWx5WlhSMWNtNGdibTl5YldGc2FYcGxLQ0FvSUcxaGRISnBlQ0FxSUhabFl6UW9JR1JwY2l3Z01DNHdJQ2tnS1M1NGVYb2dLVHNLQ2drSkNRbDlDZ29KQ1FrSmRtOXBaQ0J0WVdsdUtDa2dld29LQ1FrSkNRbDJWMjl5YkdSRWFYSmxZM1JwYjI0Z1BTQjBjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JSEJ2YzJsMGFXOXVMQ0J0YjJSbGJFMWhkSEpwZUNBcE93b0tDUWtKQ1FramFXNWpiSFZrWlNBOFltVm5hVzVmZG1WeWRHVjRQZ29KQ1FrSkNTTnBibU5zZFdSbElEeHdjbTlxWldOMFgzWmxjblJsZUQ0S0Nna0pDUWw5Q2drSkNXQXNDaUFnSUNBZ0lDQWdJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJnQ2dvSkNRa0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdkRVZ4ZFdseVpXTjBPd29LQ1FrSkNYWmhjbmxwYm1jZ2RtVmpNeUIyVjI5eWJHUkVhWEpsWTNScGIyNDdDZ29KQ1FrSkkybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0Nna0pDUWwyYjJsa0lHMWhhVzRvS1NCN0Nnb0pDUWtKQ1habFl6TWdaR2x5WldOMGFXOXVJRDBnYm05eWJXRnNhWHBsS0NCMlYyOXliR1JFYVhKbFkzUnBiMjRnS1RzS0Nna0pDUWtKZG1Wak1pQnpZVzF3YkdWVlZpQTlJR1Z4ZFdseVpXTjBWWFlvSUdScGNtVmpkR2x2YmlBcE93b0tDUWtKQ1FsbmJGOUdjbUZuUTI5c2IzSWdQU0IwWlhoMGRYSmxNa1FvSUhSRmNYVnBjbVZqZEN3Z2MyRnRjR3hsVlZZZ0tUc0tDZ2tKQ1FsOUNna0pDV0FLSUNBZ0lDQWdJQ0I5TENCcElEMGdibVYzSUhkdUtEVXNJRFVzSURVcExDQnlJRDBnYm1WM0lITnVLSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nSWtOMVltVnRZWEJHY205dFJYRjFhWEpsWTNRaUxBb2dJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVW1rb2JpNTFibWxtYjNKdGN5a3NDaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2diaTUyWlhKMFpYaFRhR0ZrWlhJc0NpQWdJQ0FnSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnVMbVp5WVdkdFpXNTBVMmhoWkdWeUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6YVdSbE9pQnBkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1lteGxibVJwYm1jNklIWnVDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnY2k1MWJtbG1iM0p0Y3k1MFJYRjFhWEpsWTNRdWRtRnNkV1VnUFNCME93b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2JtVjNJSE4wS0drc0lISXBMQ0JoSUQwZ2RDNXRhVzVHYVd4MFpYSTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUXViV2x1Um1sc2RHVnlJRDA5UFNCVmFTQW1KaUFvZEM1dGFXNUdhV3gwWlhJZ1BTQjBkQ2tzSUc1bGR5QWtjeWd4TENBeE1Dd2dkR2hwY3lrdWRYQmtZWFJsS0dVc0lHOHBMQ0IwTG0xcGJrWnBiSFJsY2lBOUlHRXNJRzh1WjJWdmJXVjBjbmt1WkdsemNHOXpaU2dwTENCdkxtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnNaV0Z5S0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHVXVaMlYwVW1WdVpHVnlWR0Z5WjJWMEtDazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnZJRDBnTURzZ2J5QThJRFk3SUc4ckt5bGxMbk5sZEZKbGJtUmxjbFJoY21kbGRDaDBhR2x6TENCdktTd2daUzVqYkdWaGNpaDBMQ0J1TENCcEtUc0tJQ0FnSUNBZ0lDQmxMbk5sZEZKbGJtUmxjbFJoY21kbGRDaHlLVHNLSUNBZ0lIMEtmVHNLYW5NdWNISnZkRzkwZVhCbExtbHpWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwSUQwZ0lUQTdDblpoY2lCcmJ5QTlJRzVsZHlCTkxDQndaaUE5SUc1bGR5Qk5MQ0J0WmlBOUlHNWxkeUJzZEN3Z1YzUWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lFMG9NU3dnTUN3Z01Da3NJSFFnUFNBd0tYc0tJQ0FnSUNBZ0lDQjBhR2x6TG01dmNtMWhiQ0E5SUdVc0lIUm9hWE11WTI5dWMzUmhiblFnUFNCME93b2dJQ0FnZlFvZ0lDQWdjMlYwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3d1WTI5d2VTaGxLU3dnZEdocGN5NWpiMjV6ZEdGdWRDQTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSRGIyMXdiMjVsYm5SektHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3d1YzJWMEtHVXNJSFFzSUc0cExDQjBhR2x6TG1OdmJuTjBZVzUwSUQwZ2FTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVp5YjIxT2IzSnRZV3hCYm1SRGIzQnNZVzVoY2xCdmFXNTBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXd3VZMjl3ZVNobEtTd2dkR2hwY3k1amIyNXpkR0Z1ZENBOUlDMTBMbVJ2ZENoMGFHbHpMbTV2Y20xaGJDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFEyOXdiR0Z1WVhKUWIybHVkSE1vWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnYTI4dWMzVmlWbVZqZEc5eWN5aHVMQ0IwS1M1amNtOXpjeWh3Wmk1emRXSldaV04wYjNKektHVXNJSFFwS1M1dWIzSnRZV3hwZW1Vb0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSR2NtOXRUbTl5YldGc1FXNWtRMjl3YkdGdVlYSlFiMmx1ZENocExDQmxLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiQzVqYjNCNUtHVXVibTl5YldGc0tTd2dkR2hwY3k1amIyNXpkR0Z1ZENBOUlHVXVZMjl1YzNSaGJuUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnViM0p0WVd4cGVtVW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0F4SUM4Z2RHaHBjeTV1YjNKdFlXd3ViR1Z1WjNSb0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05eWJXRnNMbTExYkhScGNHeDVVMk5oYkdGeUtHVXBMQ0IwYUdsekxtTnZibk4wWVc1MElDbzlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J1WldkaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXVjM1JoYm5RZ0tqMGdMVEVzSUhSb2FYTXVibTl5YldGc0xtNWxaMkYwWlNncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pHbHpkR0Z1WTJWVWIxQnZhVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjNKdFlXd3VaRzkwS0dVcElDc2dkR2hwY3k1amIyNXpkR0Z1ZERzS0lDQWdJSDBLSUNBZ0lHUnBjM1JoYm1ObFZHOVRjR2hsY21Vb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGMzUmhibU5sVkc5UWIybHVkQ2hsTG1ObGJuUmxjaWtnTFNCbExuSmhaR2wxY3pzS0lDQWdJSDBLSUNBZ0lIQnliMnBsWTNSUWIybHVkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUXVZMjl3ZVNoMGFHbHpMbTV2Y20xaGJDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb0xYUm9hWE11WkdsemRHRnVZMlZVYjFCdmFXNTBLR1VwS1M1aFpHUW9aU2s3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSTWFXNWxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVaR1ZzZEdFb2EyOHBMQ0JwSUQwZ2RHaHBjeTV1YjNKdFlXd3VaRzkwS0c0cE93b2dJQ0FnSUNBZ0lHbG1JQ2hwSUQwOVBTQXdLU0J5WlhSMWNtNGdkR2hwY3k1a2FYTjBZVzVqWlZSdlVHOXBiblFvWlM1emRHRnlkQ2tnUFQwOUlEQWdQeUIwTG1OdmNIa29aUzV6ZEdGeWRDa2dPaUJ1ZFd4c093b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ0xTaGxMbk4wWVhKMExtUnZkQ2gwYUdsekxtNXZjbTFoYkNrZ0t5QjBhR2x6TG1OdmJuTjBZVzUwS1NBdklHazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISWdQQ0F3SUh4OElISWdQaUF4SUQ4Z2JuVnNiQ0E2SUhRdVkyOXdlU2h1S1M1dGRXeDBhWEJzZVZOallXeGhjaWh5S1M1aFpHUW9aUzV6ZEdGeWRDazdDaUFnSUNCOUNpQWdJQ0JwYm5SbGNuTmxZM1J6VEdsdVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtUnBjM1JoYm1ObFZHOVFiMmx1ZENobExuTjBZWEowS1N3Z2JpQTlJSFJvYVhNdVpHbHpkR0Z1WTJWVWIxQnZhVzUwS0dVdVpXNWtLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ0E4SURBZ0ppWWdiaUErSURBZ2ZId2diaUE4SURBZ0ppWWdkQ0ErSURBN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpRbTk0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXBiblJsY25ObFkzUnpVR3hoYm1Vb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCcGJuUmxjbk5sWTNSelUzQm9aWEpsS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXBiblJsY25ObFkzUnpVR3hoYm1Vb2RHaHBjeWs3Q2lBZ0lDQjlDaUFnSUNCamIzQnNZVzVoY2xCdmFXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlM1amIzQjVLSFJvYVhNdWJtOXliV0ZzS1M1dGRXeDBhWEJzZVZOallXeGhjaWd0ZEdocGN5NWpiMjV6ZEdGdWRDazdDaUFnSUNCOUNpQWdJQ0JoY0hCc2VVMWhkSEpwZURRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZENCOGZDQnRaaTVuWlhST2IzSnRZV3hOWVhSeWFYZ29aU2tzSUdrZ1BTQjBhR2x6TG1OdmNHeGhibUZ5VUc5cGJuUW9hMjhwTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnY2lBOUlIUm9hWE11Ym05eWJXRnNMbUZ3Y0d4NVRXRjBjbWw0TXlodUtTNXViM0p0WVd4cGVtVW9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIyNXpkR0Z1ZENBOUlDMXBMbVJ2ZENoeUtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6YkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXVjM1JoYm5RZ0xUMGdaUzVrYjNRb2RHaHBjeTV1YjNKdFlXd3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWEYxWVd4ektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV1YjNKdFlXd3VaWEYxWVd4ektIUm9hWE11Ym05eWJXRnNLU0FtSmlCbExtTnZibk4wWVc1MElEMDlQU0IwYUdsekxtTnZibk4wWVc1ME93b2dJQ0FnZlFvZ0lDQWdZMnh2Ym1Vb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlLQ2t1WTI5d2VTaDBhR2x6S1RzS0lDQWdJSDBLZlRzS1YzUXVjSEp2ZEc5MGVYQmxMbWx6VUd4aGJtVWdQU0FoTURzS2RtRnlJR1pwSUQwZ2JtVjNJRUZ1TENCaGN5QTlJRzVsZHlCTkxDQkVjaUE5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dWM1FzSUhRZ1BTQnVaWGNnVjNRc0lHNGdQU0J1WlhjZ1YzUXNJR2tnUFNCdVpYY2dWM1FzSUhJZ1BTQnVaWGNnVjNRc0lHOGdQU0J1WlhjZ1YzUXBld29nSUNBZ0lDQWdJSFJvYVhNdWNHeGhibVZ6SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0JsTEFvZ0lDQWdJQ0FnSUNBZ0lDQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0JwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnlMQW9nSUNBZ0lDQWdJQ0FnSUNCdkNpQWdJQ0FnSUNBZ1hUc0tJQ0FnSUgwS0lDQWdJSE5sZENobExDQjBMQ0J1TENCcExDQnlMQ0J2S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMGFHbHpMbkJzWVc1bGN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1lWc3dYUzVqYjNCNUtHVXBMQ0JoV3pGZExtTnZjSGtvZENrc0lHRmJNbDB1WTI5d2VTaHVLU3dnWVZzelhTNWpiM0I1S0drcExDQmhXelJkTG1OdmNIa29jaWtzSUdGYk5WMHVZMjl3ZVNodktTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTV3YkdGdVpYTTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTURzZ2JpQThJRFk3SUc0ckt5bDBXMjVkTG1OdmNIa29aUzV3YkdGdVpYTmJibDBwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1d2JHRnVaWE1zSUc0Z1BTQmxMbVZzWlcxbGJuUnpMQ0JwSUQwZ2Jsc3dYU3dnY2lBOUlHNWJNVjBzSUc4Z1BTQnVXekpkTENCaElEMGdibHN6WFN3Z2JDQTlJRzViTkYwc0lHTWdQU0J1V3pWZExDQm9JRDBnYmxzMlhTd2dkU0E5SUc1Yk4xMHNJR1FnUFNCdVd6aGRMQ0JtSUQwZ2JsczVYU3dnYlNBOUlHNWJNVEJkTENCNElEMGdibHN4TVYwc0lIWWdQU0J1V3pFeVhTd2daeUE5SUc1Yk1UTmRMQ0J3SUQwZ2Jsc3hORjBzSUY4Z1BTQnVXekUxWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEZzd1hTNXpaWFJEYjIxd2IyNWxiblJ6S0dFZ0xTQnBMQ0IxSUMwZ2JDd2dlQ0F0SUdRc0lGOGdMU0IyS1M1dWIzSnRZV3hwZW1Vb0tTd2dkRnN4WFM1elpYUkRiMjF3YjI1bGJuUnpLR0VnS3lCcExDQjFJQ3NnYkN3Z2VDQXJJR1FzSUY4Z0t5QjJLUzV1YjNKdFlXeHBlbVVvS1N3Z2RGc3lYUzV6WlhSRGIyMXdiMjVsYm5SektHRWdLeUJ5TENCMUlDc2dZeXdnZUNBcklHWXNJRjhnS3lCbktTNXViM0p0WVd4cGVtVW9LU3dnZEZzelhTNXpaWFJEYjIxd2IyNWxiblJ6S0dFZ0xTQnlMQ0IxSUMwZ1l5d2dlQ0F0SUdZc0lGOGdMU0JuS1M1dWIzSnRZV3hwZW1Vb0tTd2dkRnMwWFM1elpYUkRiMjF3YjI1bGJuUnpLR0VnTFNCdkxDQjFJQzBnYUN3Z2VDQXRJRzBzSUY4Z0xTQndLUzV1YjNKdFlXeHBlbVVvS1N3Z2RGczFYUzV6WlhSRGIyMXdiMjVsYm5SektHRWdLeUJ2TENCMUlDc2dhQ3dnZUNBcklHMHNJRjhnS3lCd0tTNXViM0p0WVd4cGVtVW9LU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWMyVmpkSE5QWW1wbFkzUW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1blpXOXRaWFJ5ZVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1aWIzVnVaR2x1WjFOd2FHVnlaU0E5UFQwZ2JuVnNiQ0FtSmlCMExtTnZiWEIxZEdWQ2IzVnVaR2x1WjFOd2FHVnlaU2dwTENCbWFTNWpiM0I1S0hRdVltOTFibVJwYm1kVGNHaGxjbVVwTG1Gd2NHeDVUV0YwY21sNE5DaGxMbTFoZEhKcGVGZHZjbXhrS1N3Z2RHaHBjeTVwYm5SbGNuTmxZM1J6VTNCb1pYSmxLR1pwS1RzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5YzJWamRITlRjSEpwZEdVb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQm1hUzVqWlc1MFpYSXVjMlYwS0RBc0lEQXNJREFwTENCbWFTNXlZV1JwZFhNZ1BTQXVOekEzTVRBMk56Z3hNVGcyTlRRM05pd2dabWt1WVhCd2JIbE5ZWFJ5YVhnMEtHVXViV0YwY21sNFYyOXliR1FwTENCMGFHbHpMbWx1ZEdWeWMyVmpkSE5UY0dobGNtVW9abWtwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMGMxTndhR1Z5WlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5Cc1lXNWxjeXdnYmlBOUlHVXVZMlZ1ZEdWeUxDQnBJRDBnTFdVdWNtRmthWFZ6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQTdJSElnUENBMk95QnlLeXNwYVdZZ0tIUmJjbDB1WkdsemRHRnVZMlZVYjFCdmFXNTBLRzRwSUR3Z2FTa2djbVYwZFhKdUlDRXhPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQWhNRHNLSUNBZ0lIMEtJQ0FnSUdsdWRHVnljMlZqZEhOQ2IzZ29aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NXdiR0Z1WlhNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElEWTdJRzRyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkRnR1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGekxuZ2dQU0JwTG01dmNtMWhiQzU0SUQ0Z01DQS9JR1V1YldGNExuZ2dPaUJsTG0xcGJpNTRMQ0JoY3k1NUlEMGdhUzV1YjNKdFlXd3VlU0ErSURBZ1B5QmxMbTFoZUM1NUlEb2daUzV0YVc0dWVTd2dZWE11ZWlBOUlHa3VibTl5YldGc0xub2dQaUF3SUQ4Z1pTNXRZWGd1ZWlBNklHVXViV2x1TG5vc0lHa3VaR2x6ZEdGdVkyVlViMUJ2YVc1MEtHRnpLU0E4SURBcElISmxkSFZ5YmlBaE1Uc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWTI5dWRHRnBibk5RYjJsdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuQnNZVzVsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3Z05qc2diaXNyS1dsbUlDaDBXMjVkTG1ScGMzUmhibU5sVkc5UWIybHVkQ2hsS1NBOElEQXBJSEpsZEhWeWJpQWhNVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdJVEE3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJ5YUNncElIc0tJQ0FnSUd4bGRDQnpJRDBnYm5Wc2JDd2daU0E5SUNFeExDQjBJRDBnYm5Wc2JDd2diaUE5SUc1MWJHdzdDaUFnSUNCbWRXNWpkR2x2YmlCcEtISXNJRzhwSUhzS0lDQWdJQ0FnSUNCMEtISXNJRzhwTENCdUlEMGdjeTV5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb2FTazdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJSE4wWVhKME9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pTQWhQVDBnSVRBZ0ppWWdkQ0FoUFQwZ2JuVnNiQ0FtSmlBb2JpQTlJSE11Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtHa3BMQ0JsSUQwZ0lUQXBPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYzNSdmNEb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITXVZMkZ1WTJWc1FXNXBiV0YwYVc5dVJuSmhiV1VvYmlrc0lHVWdQU0FoTVRzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITmxkRUZ1YVcxaGRHbHZia3h2YjNBNklHWjFibU4wYVc5dUtISXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSEk3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCelpYUkRiMjUwWlhoME9pQm1kVzVqZEdsdmJpaHlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lITWdQU0J5T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z1oyWW9jeXdnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0JsTG1selYyVmlSMHd5TENCdUlEMGdibVYzSUZkbFlXdE5ZWEE3Q2lBZ0lDQm1kVzVqZEdsdmJpQnBLR01zSUdncElIc0tJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHTXVZWEp5WVhrc0lHUWdQU0JqTG5WellXZGxMQ0JtSUQwZ2N5NWpjbVZoZEdWQ2RXWm1aWElvS1RzS0lDQWdJQ0FnSUNCekxtSnBibVJDZFdabVpYSW9hQ3dnWmlrc0lITXVZblZtWm1WeVJHRjBZU2hvTENCMUxDQmtLU3dnWXk1dmJsVndiRzloWkVOaGJHeGlZV05yS0NrN0NpQWdJQ0FnSUNBZ2JHVjBJRzBnUFNBMU1USTJPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjFJR2x1YzNSaGJtTmxiMllnUm14dllYUXpNa0Z5Y21GNUlEOGdiU0E5SURVeE1qWWdPaUIxSUdsdWMzUmhibU5sYjJZZ1JteHZZWFEyTkVGeWNtRjVJRDhnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURUYwZEhKcFluVjBaWE02SUZWdWMzVndjRzl5ZEdWa0lHUmhkR0VnWW5WbVptVnlJR1p2Y20xaGREb2dSbXh2WVhRMk5FRnljbUY1TGlJcElEb2dkU0JwYm5OMFlXNWpaVzltSUZWcGJuUXhOa0Z5Y21GNUlEOGdZeTVwYzBac2IyRjBNVFpDZFdabVpYSkJkSFJ5YVdKMWRHVWdQeUIwSUQ4Z2JTQTlJRFV4TXpFZ09pQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVFYUjBjbWxpZFhSbGN6b2dWWE5oWjJVZ2IyWWdSbXh2WVhReE5rSjFabVpsY2tGMGRISnBZblYwWlNCeVpYRjFhWEpsY3lCWFpXSkhUREl1SWlrZ09pQnRJRDBnTlRFeU15QTZJSFVnYVc1emRHRnVZMlZ2WmlCSmJuUXhOa0Z5Y21GNUlEOGdiU0E5SURVeE1qSWdPaUIxSUdsdWMzUmhibU5sYjJZZ1ZXbHVkRE15UVhKeVlYa2dQeUJ0SUQwZ05URXlOU0E2SUhVZ2FXNXpkR0Z1WTJWdlppQkpiblF6TWtGeWNtRjVJRDhnYlNBOUlEVXhNalFnT2lCMUlHbHVjM1JoYm1ObGIyWWdTVzUwT0VGeWNtRjVJRDhnYlNBOUlEVXhNakFnT2lBb2RTQnBibk4wWVc1alpXOW1JRlZwYm5RNFFYSnlZWGtnZkh3Z2RTQnBibk4wWVc1alpXOW1JRlZwYm5RNFEyeGhiWEJsWkVGeWNtRjVLU0FtSmlBb2JTQTlJRFV4TWpFcExDQjdDaUFnSUNBZ0lDQWdJQ0FnSUdKMVptWmxjam9nWml3S0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2JTd0tJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpYTlFaWEpGYkdWdFpXNTBPaUIxTGtKWlZFVlRYMUJGVWw5RlRFVk5SVTVVTEFvZ0lDQWdJQ0FnSUNBZ0lDQjJaWEp6YVc5dU9pQmpMblpsY25OcGIyNEtJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnY2loakxDQm9MQ0IxS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCb0xtRnljbUY1TENCbUlEMGdhQzUxY0dSaGRHVlNZVzVuWlRzS0lDQWdJQ0FnSUNCekxtSnBibVJDZFdabVpYSW9kU3dnWXlrc0lHWXVZMjkxYm5RZ1BUMDlJQzB4SUQ4Z2N5NWlkV1ptWlhKVGRXSkVZWFJoS0hVc0lEQXNJR1FwSURvZ0tIUWdQeUJ6TG1KMVptWmxjbE4xWWtSaGRHRW9kU3dnWmk1dlptWnpaWFFnS2lCa0xrSlpWRVZUWDFCRlVsOUZURVZOUlU1VUxDQmtMQ0JtTG05bVpuTmxkQ3dnWmk1amIzVnVkQ2tnT2lCekxtSjFabVpsY2xOMVlrUmhkR0VvZFN3Z1ppNXZabVp6WlhRZ0tpQmtMa0paVkVWVFgxQkZVbDlGVEVWTlJVNVVMQ0JrTG5OMVltRnljbUY1S0dZdWIyWm1jMlYwTENCbUxtOW1abk5sZENBcklHWXVZMjkxYm5RcEtTd2daaTVqYjNWdWRDQTlJQzB4S1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHOG9ZeWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJqTG1selNXNTBaWEpzWldGMlpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVZ0ppWWdLR01nUFNCakxtUmhkR0VwTENCdUxtZGxkQ2hqS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHRW9ZeWtnZXdvZ0lDQWdJQ0FnSUdNdWFYTkpiblJsY214bFlYWmxaRUoxWm1abGNrRjBkSEpwWW5WMFpTQW1KaUFvWXlBOUlHTXVaR0YwWVNrN0NpQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCdUxtZGxkQ2hqS1RzS0lDQWdJQ0FnSUNCb0lDWW1JQ2h6TG1SbGJHVjBaVUoxWm1abGNpaG9MbUoxWm1abGNpa3NJRzR1WkdWc1pYUmxLR01wS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHd29ZeXdnYUNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hqTG1selIweENkV1ptWlhKQmRIUnlhV0oxZEdVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0J1TG1kbGRDaGpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0tDRmtJSHg4SUdRdWRtVnljMmx2YmlBOElHTXVkbVZ5YzJsdmJpa2dKaVlnYmk1elpYUW9ZeXdnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WbVptVnlPaUJqTG1KMVptWmxjaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHTXVkSGx3WlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKNWRHVnpVR1Z5Uld4bGJXVnVkRG9nWXk1bGJHVnRaVzUwVTJsNlpTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxjbk5wYjI0NklHTXVkbVZ5YzJsdmJnb2dJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmpMbWx6U1c1MFpYSnNaV0YyWldSQ2RXWm1aWEpCZEhSeWFXSjFkR1VnSmlZZ0tHTWdQU0JqTG1SaGRHRXBPd29nSUNBZ0lDQWdJR3hsZENCMUlEMGdiaTVuWlhRb1l5azdDaUFnSUNBZ0lDQWdkU0E5UFQwZ2RtOXBaQ0F3SUQ4Z2JpNXpaWFFvWXl3Z2FTaGpMQ0JvS1NrZ09pQjFMblpsY25OcGIyNGdQQ0JqTG5abGNuTnBiMjRnSmlZZ0tISW9kUzVpZFdabVpYSXNJR01zSUdncExDQjFMblpsY25OcGIyNGdQU0JqTG5abGNuTnBiMjRwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNCblpYUTZJRzhzQ2lBZ0lDQWdJQ0FnY21WdGIzWmxPaUJoTEFvZ0lDQWdJQ0FnSUhWd1pHRjBaVG9nYkFvZ0lDQWdmVHNLZlFwMllYSWdVR2tnUFNCamJHRnpjeUJsZUhSbGJtUnpJRjlsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ01Td2diaUE5SURFc0lHa2dQU0F4S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDSlFiR0Z1WlVkbGIyMWxkSEo1SWl3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFGTmxaMjFsYm5Sek9pQnVMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFJUWldkdFpXNTBjem9nYVFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCbElDOGdNaXdnYnlBOUlIUWdMeUF5TENCaElEMGdUV0YwYUM1bWJHOXZjaWh1S1N3Z2JDQTlJRTFoZEdndVpteHZiM0lvYVNrc0lHTWdQU0JoSUNzZ01Td2dhQ0E5SUd3Z0t5QXhMQ0IxSUQwZ1pTQXZJR0VzSUdRZ1BTQjBJQzhnYkN3Z1ppQTlJRnRkTENCdElEMGdXMTBzSUhnZ1BTQmJYU3dnZGlBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdaeUE5SURBN0lHY2dQQ0JvT3lCbkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjQ0E5SUdjZ0tpQmtJQzBnYnpzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmZJRDBnTURzZ1h5QThJR003SUY4ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVNBOUlGOGdLaUIxSUMwZ2Nqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMHVjSFZ6YUNoNUxDQXRjQ3dnTUNrc0lIZ3VjSFZ6YUNnd0xDQXdMQ0F4S1N3Z2RpNXdkWE5vS0Y4Z0x5QmhLU3dnZGk1d2RYTm9LREVnTFNCbklDOGdiQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQm5JRDBnTURzZ1p5QThJR3c3SUdjckt5bG1iM0lvYkdWMElIQWdQU0F3T3lCd0lEd2dZVHNnY0NzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOGdQU0J3SUNzZ1l5QXFJR2NzSUhrZ1BTQndJQ3NnWXlBcUlDaG5JQ3NnTVNrc0lHSWdQU0J3SUNzZ01TQXJJR01nS2lBb1p5QXJJREVwTENCQklEMGdjQ0FySURFZ0t5QmpJQ29nWnpzS0lDQWdJQ0FnSUNBZ0lDQWdaaTV3ZFhOb0tGOHNJSGtzSUVFcExDQm1MbkIxYzJnb2VTd2dZaXdnUVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUm9hWE11YzJWMFNXNWtaWGdvWmlrc0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCa1pTaHRMQ0F6S1Nrc0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSnViM0p0WVd3aUxDQnVaWGNnWkdVb2VDd2dNeWtwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWRYWWlMQ0J1WlhjZ1pHVW9kaXdnTWlrcE93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCcEtHVXVkMmxrZEdnc0lHVXVhR1ZwWjJoMExDQmxMbmRwWkhSb1UyVm5iV1Z1ZEhNc0lHVXVhR1ZwWjJoMFUyVm5iV1Z1ZEhNcE93b2dJQ0FnZlFwOUxDQjRaaUE5SUdBamFXWmtaV1lnVlZORlgwRk1VRWhCVFVGUUNnbGthV1ptZFhObFEyOXNiM0l1WVNBcVBTQjBaWGgwZFhKbE1rUW9JR0ZzY0doaFRXRndMQ0IyVlhZZ0tTNW5Pd29qWlc1a2FXWmdMQ0I1WmlBOUlHQWphV1prWldZZ1ZWTkZYMEZNVUVoQlRVRlFDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JoYkhCb1lVMWhjRHNLSTJWdVpHbG1ZQ3dnZG1ZZ1BTQmdJMmxtWkdWbUlGVlRSVjlCVEZCSVFWUkZVMVFLQ1dsbUlDZ2daR2xtWm5WelpVTnZiRzl5TG1FZ1BDQmhiSEJvWVZSbGMzUWdLU0JrYVhOallYSmtPd29qWlc1a2FXWmdMQ0JmWmlBOUlHQWphV1prWldZZ1ZWTkZYMEZNVUVoQlZFVlRWQW9KZFc1cFptOXliU0JtYkc5aGRDQmhiSEJvWVZSbGMzUTdDaU5sYm1ScFptQXNJRTFtSUQwZ1lDTnBabVJsWmlCVlUwVmZRVTlOUVZBS0NXWnNiMkYwSUdGdFltbGxiblJQWTJOc2RYTnBiMjRnUFNBb0lIUmxlSFIxY21VeVJDZ2dZVzlOWVhBc0lIWlZkaklnS1M1eUlDMGdNUzR3SUNrZ0tpQmhiMDFoY0VsdWRHVnVjMmwwZVNBcklERXVNRHNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpTQXFQU0JoYldKcFpXNTBUMk5qYkhWemFXOXVPd29KSTJsbUlHUmxabWx1WldRb0lGVlRSVjlGVGxaTlFWQWdLU0FtSmlCa1pXWnBibVZrS0NCVFZFRk9SRUZTUkNBcENna0pabXh2WVhRZ1pHOTBUbFlnUFNCellYUjFjbUYwWlNnZ1pHOTBLQ0JuWlc5dFpYUnllUzV1YjNKdFlXd3NJR2RsYjIxbGRISjVMblpwWlhkRWFYSWdLU0FwT3dvSkNYSmxabXhsWTNSbFpFeHBaMmgwTG1sdVpHbHlaV04wVTNCbFkzVnNZWElnS2owZ1kyOXRjSFYwWlZOd1pXTjFiR0Z5VDJOamJIVnphVzl1S0NCa2IzUk9WaXdnWVcxaWFXVnVkRTlqWTJ4MWMybHZiaXdnYldGMFpYSnBZV3d1Y205MVoyaHVaWE56SUNrN0Nna2paVzVrYVdZS0kyVnVaR2xtWUN3Z1ltWWdQU0JnSTJsbVpHVm1JRlZUUlY5QlQwMUJVQW9KZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnWVc5TllYQTdDZ2wxYm1sbWIzSnRJR1pzYjJGMElHRnZUV0Z3U1c1MFpXNXphWFI1T3dvalpXNWthV1pnTENCM1ppQTlJQ0oyWldNeklIUnlZVzV6Wm05eWJXVmtJRDBnZG1Wak15Z2djRzl6YVhScGIyNGdLVHNpTENCVFppQTlJR0IyWldNeklHOWlhbVZqZEU1dmNtMWhiQ0E5SUhabFl6TW9JRzV2Y20xaGJDQXBPd29qYVdaa1pXWWdWVk5GWDFSQlRrZEZUbFFLQ1habFl6TWdiMkpxWldOMFZHRnVaMlZ1ZENBOUlIWmxZek1vSUhSaGJtZGxiblF1ZUhsNklDazdDaU5sYm1ScFptQXNJRlJtSUQwZ1lIWmxZek1nUWxKRVJsOU1ZVzFpWlhKMEtDQmpiMjV6ZENCcGJpQjJaV016SUdScFptWjFjMlZEYjJ4dmNpQXBJSHNLQ1hKbGRIVnliaUJTUlVOSlVGSlBRMEZNWDFCSklDb2daR2xtWm5WelpVTnZiRzl5T3dwOUNuWmxZek1nUmw5VFkyaHNhV05yS0NCamIyNXpkQ0JwYmlCMlpXTXpJR1l3TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JtT1RBc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSdmRGWklJQ2tnZXdvSlpteHZZWFFnWm5KbGMyNWxiQ0E5SUdWNGNESW9JQ2dnTFNBMUxqVTFORGN6SUNvZ1pHOTBWa2dnTFNBMkxqazRNekUySUNrZ0tpQmtiM1JXU0NBcE93b0pjbVYwZFhKdUlHWXdJQ29nS0NBeExqQWdMU0JtY21WemJtVnNJQ2tnS3lBb0lHWTVNQ0FxSUdaeVpYTnVaV3dnS1RzS2ZRcG1iRzloZENCV1gwZEhXRjlUYldsMGFFTnZjbkpsYkdGMFpXUW9JR052Ym5OMElHbHVJR1pzYjJGMElHRnNjR2hoTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JrYjNST1RDd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ1pHOTBUbFlnS1NCN0NnbG1iRzloZENCaE1pQTlJSEJ2ZHpJb0lHRnNjR2hoSUNrN0NnbG1iRzloZENCbmRpQTlJR1J2ZEU1TUlDb2djM0Z5ZENnZ1lUSWdLeUFvSURFdU1DQXRJR0V5SUNrZ0tpQndiM2N5S0NCa2IzUk9WaUFwSUNrN0NnbG1iRzloZENCbmJDQTlJR1J2ZEU1V0lDb2djM0Z5ZENnZ1lUSWdLeUFvSURFdU1DQXRJR0V5SUNrZ0tpQndiM2N5S0NCa2IzUk9UQ0FwSUNrN0NnbHlaWFIxY200Z01DNDFJQzhnYldGNEtDQm5kaUFySUdkc0xDQkZVRk5KVEU5T0lDazdDbjBLWm14dllYUWdSRjlIUjFnb0lHTnZibk4wSUdsdUlHWnNiMkYwSUdGc2NHaGhMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmtiM1JPU0NBcElIc0tDV1pzYjJGMElHRXlJRDBnY0c5M01pZ2dZV3h3YUdFZ0tUc0tDV1pzYjJGMElHUmxibTl0SUQwZ2NHOTNNaWdnWkc5MFRrZ2dLU0FxSUNnZ1lUSWdMU0F4TGpBZ0tTQXJJREV1TURzS0NYSmxkSFZ5YmlCU1JVTkpVRkpQUTBGTVgxQkpJQ29nWVRJZ0x5QndiM2N5S0NCa1pXNXZiU0FwT3dwOUNuWmxZek1nUWxKRVJsOUhSMWdvSUdOdmJuTjBJR2x1SUhabFl6TWdiR2xuYUhSRWFYSXNJR052Ym5OMElHbHVJSFpsWXpNZ2RtbGxkMFJwY2l3Z1kyOXVjM1FnYVc0Z2RtVmpNeUJ1YjNKdFlXd3NJR052Ym5OMElHbHVJSFpsWXpNZ1pqQXNJR052Ym5OMElHbHVJR1pzYjJGMElHWTVNQ3dnWTI5dWMzUWdhVzRnWm14dllYUWdjbTkxWjJodVpYTnpJQ2tnZXdvSlpteHZZWFFnWVd4d2FHRWdQU0J3YjNjeUtDQnliM1ZuYUc1bGMzTWdLVHNLQ1habFl6TWdhR0ZzWmtScGNpQTlJRzV2Y20xaGJHbDZaU2dnYkdsbmFIUkVhWElnS3lCMmFXVjNSR2x5SUNrN0NnbG1iRzloZENCa2IzUk9UQ0E5SUhOaGRIVnlZWFJsS0NCa2IzUW9JRzV2Y20xaGJDd2diR2xuYUhSRWFYSWdLU0FwT3dvSlpteHZZWFFnWkc5MFRsWWdQU0J6WVhSMWNtRjBaU2dnWkc5MEtDQnViM0p0WVd3c0lIWnBaWGRFYVhJZ0tTQXBPd29KWm14dllYUWdaRzkwVGtnZ1BTQnpZWFIxY21GMFpTZ2daRzkwS0NCdWIzSnRZV3dzSUdoaGJHWkVhWElnS1NBcE93b0pabXh2WVhRZ1pHOTBWa2dnUFNCellYUjFjbUYwWlNnZ1pHOTBLQ0IyYVdWM1JHbHlMQ0JvWVd4bVJHbHlJQ2tnS1RzS0NYWmxZek1nUmlBOUlFWmZVMk5vYkdsamF5Z2daakFzSUdZNU1Dd2daRzkwVmtnZ0tUc0tDV1pzYjJGMElGWWdQU0JXWDBkSFdGOVRiV2wwYUVOdmNuSmxiR0YwWldRb0lHRnNjR2hoTENCa2IzUk9UQ3dnWkc5MFRsWWdLVHNLQ1dac2IyRjBJRVFnUFNCRVgwZEhXQ2dnWVd4d2FHRXNJR1J2ZEU1SUlDazdDZ2x5WlhSMWNtNGdSaUFxSUNnZ1ZpQXFJRVFnS1RzS2ZRcDJaV015SUV4VVExOVZkaWdnWTI5dWMzUWdhVzRnZG1Wak15Qk9MQ0JqYjI1emRDQnBiaUIyWldNeklGWXNJR052Ym5OMElHbHVJR1pzYjJGMElISnZkV2RvYm1WemN5QXBJSHNLQ1dOdmJuTjBJR1pzYjJGMElFeFZWRjlUU1ZwRklEMGdOalF1TURzS0NXTnZibk4wSUdac2IyRjBJRXhWVkY5VFEwRk1SU0E5SUNnZ1RGVlVYMU5KV2tVZ0xTQXhMakFnS1NBdklFeFZWRjlUU1ZwRk93b0pZMjl1YzNRZ1pteHZZWFFnVEZWVVgwSkpRVk1nUFNBd0xqVWdMeUJNVlZSZlUwbGFSVHNLQ1dac2IyRjBJR1J2ZEU1V0lEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ1Rpd2dWaUFwSUNrN0NnbDJaV015SUhWMklEMGdkbVZqTWlnZ2NtOTFaMmh1WlhOekxDQnpjWEowS0NBeExqQWdMU0JrYjNST1ZpQXBJQ2s3Q2dsMWRpQTlJSFYySUNvZ1RGVlVYMU5EUVV4RklDc2dURlZVWDBKSlFWTTdDZ2x5WlhSMWNtNGdkWFk3Q24wS1pteHZZWFFnVEZSRFgwTnNhWEJ3WldSVGNHaGxjbVZHYjNKdFJtRmpkRzl5S0NCamIyNXpkQ0JwYmlCMlpXTXpJR1lnS1NCN0NnbG1iRzloZENCc0lEMGdiR1Z1WjNSb0tDQm1JQ2s3Q2dseVpYUjFjbTRnYldGNEtDQW9JR3dnS2lCc0lDc2daaTU2SUNrZ0x5QW9JR3dnS3lBeExqQWdLU3dnTUM0d0lDazdDbjBLZG1Wak15Qk1WRU5mUldSblpWWmxZM1J2Y2tadmNtMUdZV04wYjNJb0lHTnZibk4wSUdsdUlIWmxZek1nZGpFc0lHTnZibk4wSUdsdUlIWmxZek1nZGpJZ0tTQjdDZ2xtYkc5aGRDQjRJRDBnWkc5MEtDQjJNU3dnZGpJZ0tUc0tDV1pzYjJGMElIa2dQU0JoWW5Nb0lIZ2dLVHNLQ1dac2IyRjBJR0VnUFNBd0xqZzFORE01T0RVZ0t5QW9JREF1TkRrMk5URTFOU0FySURBdU1ERTBOVEl3TmlBcUlIa2dLU0FxSUhrN0NnbG1iRzloZENCaUlEMGdNeTQwTVRjMU9UUXdJQ3NnS0NBMExqRTJNVFkzTWpRZ0t5QjVJQ2tnS2lCNU93b0pabXh2WVhRZ2RpQTlJR0VnTHlCaU93b0pabXh2WVhRZ2RHaGxkR0ZmYzJsdWRHaGxkR0VnUFNBb0lIZ2dQaUF3TGpBZ0tTQS9JSFlnT2lBd0xqVWdLaUJwYm5abGNuTmxjM0Z5ZENnZ2JXRjRLQ0F4TGpBZ0xTQjRJQ29nZUN3Z01XVXROeUFwSUNrZ0xTQjJPd29KY21WMGRYSnVJR055YjNOektDQjJNU3dnZGpJZ0tTQXFJSFJvWlhSaFgzTnBiblJvWlhSaE93cDlDblpsWXpNZ1RGUkRYMFYyWVd4MVlYUmxLQ0JqYjI1emRDQnBiaUIyWldNeklFNHNJR052Ym5OMElHbHVJSFpsWXpNZ1Zpd2dZMjl1YzNRZ2FXNGdkbVZqTXlCUUxDQmpiMjV6ZENCcGJpQnRZWFF6SUcxSmJuWXNJR052Ym5OMElHbHVJSFpsWXpNZ2NtVmpkRU52YjNKa2Mxc2dOQ0JkSUNrZ2V3b0pkbVZqTXlCMk1TQTlJSEpsWTNSRGIyOXlaSE5iSURFZ1hTQXRJSEpsWTNSRGIyOXlaSE5iSURBZ1hUc0tDWFpsWXpNZ2RqSWdQU0J5WldOMFEyOXZjbVJ6V3lBeklGMGdMU0J5WldOMFEyOXZjbVJ6V3lBd0lGMDdDZ2wyWldNeklHeHBaMmgwVG05eWJXRnNJRDBnWTNKdmMzTW9JSFl4TENCMk1pQXBPd29KYVdZb0lHUnZkQ2dnYkdsbmFIUk9iM0p0WVd3c0lGQWdMU0J5WldOMFEyOXZjbVJ6V3lBd0lGMGdLU0E4SURBdU1DQXBJSEpsZEhWeWJpQjJaV016S0NBd0xqQWdLVHNLQ1habFl6TWdWREVzSUZReU93b0pWREVnUFNCdWIzSnRZV3hwZW1Vb0lGWWdMU0JPSUNvZ1pHOTBLQ0JXTENCT0lDa2dLVHNLQ1ZReUlEMGdMU0JqY205emN5Z2dUaXdnVkRFZ0tUc0tDVzFoZERNZ2JXRjBJRDBnYlVsdWRpQXFJSFJ5WVc1emNHOXpaVTFoZERNb0lHMWhkRE1vSUZReExDQlVNaXdnVGlBcElDazdDZ2wyWldNeklHTnZiM0prYzFzZ05DQmRPd29KWTI5dmNtUnpXeUF3SUYwZ1BTQnRZWFFnS2lBb0lISmxZM1JEYjI5eVpITmJJREFnWFNBdElGQWdLVHNLQ1dOdmIzSmtjMXNnTVNCZElEMGdiV0YwSUNvZ0tDQnlaV04wUTI5dmNtUnpXeUF4SUYwZ0xTQlFJQ2s3Q2dsamIyOXlaSE5iSURJZ1hTQTlJRzFoZENBcUlDZ2djbVZqZEVOdmIzSmtjMXNnTWlCZElDMGdVQ0FwT3dvSlkyOXZjbVJ6V3lBeklGMGdQU0J0WVhRZ0tpQW9JSEpsWTNSRGIyOXlaSE5iSURNZ1hTQXRJRkFnS1RzS0NXTnZiM0prYzFzZ01DQmRJRDBnYm05eWJXRnNhWHBsS0NCamIyOXlaSE5iSURBZ1hTQXBPd29KWTI5dmNtUnpXeUF4SUYwZ1BTQnViM0p0WVd4cGVtVW9JR052YjNKa2Mxc2dNU0JkSUNrN0NnbGpiMjl5WkhOYklESWdYU0E5SUc1dmNtMWhiR2w2WlNnZ1kyOXZjbVJ6V3lBeUlGMGdLVHNLQ1dOdmIzSmtjMXNnTXlCZElEMGdibTl5YldGc2FYcGxLQ0JqYjI5eVpITmJJRE1nWFNBcE93b0pkbVZqTXlCMlpXTjBiM0pHYjNKdFJtRmpkRzl5SUQwZ2RtVmpNeWdnTUM0d0lDazdDZ2wyWldOMGIzSkdiM0p0Um1GamRHOXlJQ3M5SUV4VVExOUZaR2RsVm1WamRHOXlSbTl5YlVaaFkzUnZjaWdnWTI5dmNtUnpXeUF3SUYwc0lHTnZiM0prYzFzZ01TQmRJQ2s3Q2dsMlpXTjBiM0pHYjNKdFJtRmpkRzl5SUNzOUlFeFVRMTlGWkdkbFZtVmpkRzl5Um05eWJVWmhZM1J2Y2lnZ1kyOXZjbVJ6V3lBeElGMHNJR052YjNKa2Mxc2dNaUJkSUNrN0NnbDJaV04wYjNKR2IzSnRSbUZqZEc5eUlDczlJRXhVUTE5RlpHZGxWbVZqZEc5eVJtOXliVVpoWTNSdmNpZ2dZMjl2Y21Seld5QXlJRjBzSUdOdmIzSmtjMXNnTXlCZElDazdDZ2wyWldOMGIzSkdiM0p0Um1GamRHOXlJQ3M5SUV4VVExOUZaR2RsVm1WamRHOXlSbTl5YlVaaFkzUnZjaWdnWTI5dmNtUnpXeUF6SUYwc0lHTnZiM0prYzFzZ01DQmRJQ2s3Q2dsbWJHOWhkQ0J5WlhOMWJIUWdQU0JNVkVOZlEyeHBjSEJsWkZOd2FHVnlaVVp2Y20xR1lXTjBiM0lvSUhabFkzUnZja1p2Y20xR1lXTjBiM0lnS1RzS0NYSmxkSFZ5YmlCMlpXTXpLQ0J5WlhOMWJIUWdLVHNLZlFwbWJHOWhkQ0JIWDBKc2FXNXVVR2h2Ym1kZlNXMXdiR2xqYVhRb0lDa2dld29KY21WMGRYSnVJREF1TWpVN0NuMEtabXh2WVhRZ1JGOUNiR2x1YmxCb2IyNW5LQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnphR2x1YVc1bGMzTXNJR052Ym5OMElHbHVJR1pzYjJGMElHUnZkRTVJSUNrZ2V3b0pjbVYwZFhKdUlGSkZRMGxRVWs5RFFVeGZVRWtnS2lBb0lITm9hVzVwYm1WemN5QXFJREF1TlNBcklERXVNQ0FwSUNvZ2NHOTNLQ0JrYjNST1NDd2djMmhwYm1sdVpYTnpJQ2s3Q24wS2RtVmpNeUJDVWtSR1gwSnNhVzV1VUdodmJtY29JR052Ym5OMElHbHVJSFpsWXpNZ2JHbG5hSFJFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nZG1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3c0lHTnZibk4wSUdsdUlIWmxZek1nYzNCbFkzVnNZWEpEYjJ4dmNpd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2MyaHBibWx1WlhOeklDa2dld29KZG1Wak15Qm9ZV3htUkdseUlEMGdibTl5YldGc2FYcGxLQ0JzYVdkb2RFUnBjaUFySUhacFpYZEVhWElnS1RzS0NXWnNiMkYwSUdSdmRFNUlJRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2dibTl5YldGc0xDQm9ZV3htUkdseUlDa2dLVHNLQ1dac2IyRjBJR1J2ZEZaSUlEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ2RtbGxkMFJwY2l3Z2FHRnNaa1JwY2lBcElDazdDZ2wyWldNeklFWWdQU0JHWDFOamFHeHBZMnNvSUhOd1pXTjFiR0Z5UTI5c2IzSXNJREV1TUN3Z1pHOTBWa2dnS1RzS0NXWnNiMkYwSUVjZ1BTQkhYMEpzYVc1dVVHaHZibWRmU1cxd2JHbGphWFFvSUNrN0NnbG1iRzloZENCRUlEMGdSRjlDYkdsdWJsQm9iMjVuS0NCemFHbHVhVzVsYzNNc0lHUnZkRTVJSUNrN0NnbHlaWFIxY200Z1JpQXFJQ2dnUnlBcUlFUWdLVHNLZlFvamFXWWdaR1ZtYVc1bFpDZ2dWVk5GWDFOSVJVVk9JQ2tLWm14dllYUWdSRjlEYUdGeWJHbGxLQ0JtYkc5aGRDQnliM1ZuYUc1bGMzTXNJR1pzYjJGMElHUnZkRTVJSUNrZ2V3b0pabXh2WVhRZ1lXeHdhR0VnUFNCd2IzY3lLQ0J5YjNWbmFHNWxjM01nS1RzS0NXWnNiMkYwSUdsdWRrRnNjR2hoSUQwZ01TNHdJQzhnWVd4d2FHRTdDZ2xtYkc5aGRDQmpiM015YUNBOUlHUnZkRTVJSUNvZ1pHOTBUa2c3Q2dsbWJHOWhkQ0J6YVc0eWFDQTlJRzFoZUNnZ01TNHdJQzBnWTI5ek1tZ3NJREF1TURBM09ERXlOU0FwT3dvSmNtVjBkWEp1SUNnZ01pNHdJQ3NnYVc1MlFXeHdhR0VnS1NBcUlIQnZkeWdnYzJsdU1tZ3NJR2x1ZGtGc2NHaGhJQ29nTUM0MUlDa2dMeUFvSURJdU1DQXFJRkJKSUNrN0NuMEtabXh2WVhRZ1ZsOU9aWFZpWld4MEtDQm1iRzloZENCa2IzUk9WaXdnWm14dllYUWdaRzkwVGt3Z0tTQjdDZ2x5WlhSMWNtNGdjMkYwZFhKaGRHVW9JREV1TUNBdklDZ2dOQzR3SUNvZ0tDQmtiM1JPVENBcklHUnZkRTVXSUMwZ1pHOTBUa3dnS2lCa2IzUk9WaUFwSUNrZ0tUc0tmUXAyWldNeklFSlNSRVpmVTJobFpXNG9JR052Ym5OMElHbHVJSFpsWXpNZ2JHbG5hSFJFYVhJc0lHTnZibk4wSUdsdUlIWmxZek1nZG1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3c0lIWmxZek1nYzJobFpXNURiMnh2Y2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnYzJobFpXNVNiM1ZuYUc1bGMzTWdLU0I3Q2dsMlpXTXpJR2hoYkdaRWFYSWdQU0J1YjNKdFlXeHBlbVVvSUd4cFoyaDBSR2x5SUNzZ2RtbGxkMFJwY2lBcE93b0pabXh2WVhRZ1pHOTBUa3dnUFNCellYUjFjbUYwWlNnZ1pHOTBLQ0J1YjNKdFlXd3NJR3hwWjJoMFJHbHlJQ2tnS1RzS0NXWnNiMkYwSUdSdmRFNVdJRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2dibTl5YldGc0xDQjJhV1YzUkdseUlDa2dLVHNLQ1dac2IyRjBJR1J2ZEU1SUlEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ2JtOXliV0ZzTENCb1lXeG1SR2x5SUNrZ0tUc0tDV1pzYjJGMElFUWdQU0JFWDBOb1lYSnNhV1VvSUhOb1pXVnVVbTkxWjJodVpYTnpMQ0JrYjNST1NDQXBPd29KWm14dllYUWdWaUE5SUZaZlRtVjFZbVZzZENnZ1pHOTBUbFlzSUdSdmRFNU1JQ2s3Q2dseVpYUjFjbTRnYzJobFpXNURiMnh2Y2lBcUlDZ2dSQ0FxSUZZZ0tUc0tmUW9qWlc1a2FXWmdMQ0JGWmlBOUlHQWphV1prWldZZ1ZWTkZYMEpWVFZCTlFWQUtDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJR0oxYlhCTllYQTdDZ2wxYm1sbWIzSnRJR1pzYjJGMElHSjFiWEJUWTJGc1pUc0tDWFpsWXpJZ1pFaGtlSGxmWm5ka0tDa2dld29KQ1habFl6SWdaRk5VWkhnZ1BTQmtSbVI0S0NCMlZYWWdLVHNLQ1FsMlpXTXlJR1JUVkdSNUlEMGdaRVprZVNnZ2RsVjJJQ2s3Q2drSlpteHZZWFFnU0d4c0lEMGdZblZ0Y0ZOallXeGxJQ29nZEdWNGRIVnlaVEpFS0NCaWRXMXdUV0Z3TENCMlZYWWdLUzU0T3dvSkNXWnNiMkYwSUdSQ2VDQTlJR0oxYlhCVFkyRnNaU0FxSUhSbGVIUjFjbVV5UkNnZ1luVnRjRTFoY0N3Z2RsVjJJQ3NnWkZOVVpIZ2dLUzU0SUMwZ1NHeHNPd29KQ1dac2IyRjBJR1JDZVNBOUlHSjFiWEJUWTJGc1pTQXFJSFJsZUhSMWNtVXlSQ2dnWW5WdGNFMWhjQ3dnZGxWMklDc2daRk5VWkhrZ0tTNTRJQzBnU0d4c093b0pDWEpsZEhWeWJpQjJaV015S0NCa1FuZ3NJR1JDZVNBcE93b0pmUW9KZG1Wak15QndaWEowZFhKaVRtOXliV0ZzUVhKaUtDQjJaV016SUhOMWNtWmZjRzl6TENCMlpXTXpJSE4xY21aZmJtOXliU3dnZG1Wak1pQmtTR1I0ZVN3Z1pteHZZWFFnWm1GalpVUnBjbVZqZEdsdmJpQXBJSHNLQ1FsMlpXTXpJSFpUYVdkdFlWZ2dQU0IyWldNektDQmtSbVI0S0NCemRYSm1YM0J2Y3k1NElDa3NJR1JHWkhnb0lITjFjbVpmY0c5ekxua2dLU3dnWkVaa2VDZ2djM1Z5Wmw5d2IzTXVlaUFwSUNrN0Nna0pkbVZqTXlCMlUybG5iV0ZaSUQwZ2RtVmpNeWdnWkVaa2VTZ2djM1Z5Wmw5d2IzTXVlQ0FwTENCa1JtUjVLQ0J6ZFhKbVgzQnZjeTU1SUNrc0lHUkdaSGtvSUhOMWNtWmZjRzl6TG5vZ0tTQXBPd29KQ1habFl6TWdkazRnUFNCemRYSm1YMjV2Y20wN0Nna0pkbVZqTXlCU01TQTlJR055YjNOektDQjJVMmxuYldGWkxDQjJUaUFwT3dvSkNYWmxZek1nVWpJZ1BTQmpjbTl6Y3lnZ2RrNHNJSFpUYVdkdFlWZ2dLVHNLQ1FsbWJHOWhkQ0JtUkdWMElEMGdaRzkwS0NCMlUybG5iV0ZZTENCU01TQXBJQ29nWm1GalpVUnBjbVZqZEdsdmJqc0tDUWwyWldNeklIWkhjbUZrSUQwZ2MybG5iaWdnWmtSbGRDQXBJQ29nS0NCa1NHUjRlUzU0SUNvZ1VqRWdLeUJrU0dSNGVTNTVJQ29nVWpJZ0tUc0tDUWx5WlhSMWNtNGdibTl5YldGc2FYcGxLQ0JoWW5Nb0lHWkVaWFFnS1NBcUlITjFjbVpmYm05eWJTQXRJSFpIY21Ga0lDazdDZ2w5Q2lObGJtUnBabUFzSUVGbUlEMGdZQ05wWmlCT1ZVMWZRMHhKVUZCSlRrZGZVRXhCVGtWVElENGdNQW9KZG1Wak5DQndiR0Z1WlRzS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZjM1JoY25RS0NXWnZjaUFvSUdsdWRDQnBJRDBnTURzZ2FTQThJRlZPU1U5T1gwTk1TVkJRU1U1SFgxQk1RVTVGVXpzZ2FTQXJLeUFwSUhzS0NRbHdiR0Z1WlNBOUlHTnNhWEJ3YVc1blVHeGhibVZ6V3lCcElGMDdDZ2tKYVdZZ0tDQmtiM1FvSUhaRGJHbHdVRzl6YVhScGIyNHNJSEJzWVc1bExuaDVlaUFwSUQ0Z2NHeGhibVV1ZHlBcElHUnBjMk5oY21RN0NnbDlDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDJWdVpBb0pJMmxtSUZWT1NVOU9YME5NU1ZCUVNVNUhYMUJNUVU1RlV5QThJRTVWVFY5RFRFbFFVRWxPUjE5UVRFRk9SVk1LQ1FsaWIyOXNJR05zYVhCd1pXUWdQU0IwY25WbE93b0pDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmYzNSaGNuUUtDUWxtYjNJZ0tDQnBiblFnYVNBOUlGVk9TVTlPWDBOTVNWQlFTVTVIWDFCTVFVNUZVenNnYVNBOElFNVZUVjlEVEVsUVVFbE9SMTlRVEVGT1JWTTdJR2tnS3lzZ0tTQjdDZ2tKQ1hCc1lXNWxJRDBnWTJ4cGNIQnBibWRRYkdGdVpYTmJJR2tnWFRzS0NRa0pZMnhwY0hCbFpDQTlJQ2dnWkc5MEtDQjJRMnhwY0ZCdmMybDBhVzl1TENCd2JHRnVaUzU0ZVhvZ0tTQStJSEJzWVc1bExuY2dLU0FtSmlCamJHbHdjR1ZrT3dvSkNYMEtDUWtqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDJWdVpBb0pDV2xtSUNnZ1kyeHBjSEJsWkNBcElHUnBjMk5oY21RN0Nna2paVzVrYVdZS0kyVnVaR2xtWUN3Z1EyWWdQU0JnSTJsbUlFNVZUVjlEVEVsUVVFbE9SMTlRVEVGT1JWTWdQaUF3Q2dsMllYSjVhVzVuSUhabFl6TWdka05zYVhCUWIzTnBkR2x2YmpzS0NYVnVhV1p2Y20wZ2RtVmpOQ0JqYkdsd2NHbHVaMUJzWVc1bGMxc2dUbFZOWDBOTVNWQlFTVTVIWDFCTVFVNUZVeUJkT3dvalpXNWthV1pnTENCTVppQTlJR0FqYVdZZ1RsVk5YME5NU1ZCUVNVNUhYMUJNUVU1RlV5QStJREFLQ1haaGNubHBibWNnZG1Wak15QjJRMnhwY0ZCdmMybDBhVzl1T3dvalpXNWthV1pnTENCU1ppQTlJR0FqYVdZZ1RsVk5YME5NU1ZCUVNVNUhYMUJNUVU1RlV5QStJREFLQ1haRGJHbHdVRzl6YVhScGIyNGdQU0F0SUcxMlVHOXphWFJwYjI0dWVIbDZPd29qWlc1a2FXWmdMQ0JRWmlBOUlHQWphV1lnWkdWbWFXNWxaQ2dnVlZORlgwTlBURTlTWDBGTVVFaEJJQ2tLQ1dScFptWjFjMlZEYjJ4dmNpQXFQU0IyUTI5c2IzSTdDaU5sYkdsbUlHUmxabWx1WldRb0lGVlRSVjlEVDB4UFVpQXBDZ2xrYVdabWRYTmxRMjlzYjNJdWNtZGlJQ285SUhaRGIyeHZjanNLSTJWdVpHbG1ZQ3dnU1dZZ1BTQmdJMmxtSUdSbFptbHVaV1FvSUZWVFJWOURUMHhQVWw5QlRGQklRU0FwQ2dsMllYSjVhVzVuSUhabFl6UWdka052Ykc5eU93b2paV3hwWmlCa1pXWnBibVZrS0NCVlUwVmZRMDlNVDFJZ0tRb0pkbUZ5ZVdsdVp5QjJaV016SUhaRGIyeHZjanNLSTJWdVpHbG1ZQ3dnUkdZZ1BTQmdJMmxtSUdSbFptbHVaV1FvSUZWVFJWOURUMHhQVWw5QlRGQklRU0FwQ2dsMllYSjVhVzVuSUhabFl6UWdka052Ykc5eU93b2paV3hwWmlCa1pXWnBibVZrS0NCVlUwVmZRMDlNVDFJZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlNVNVRWRUZPUTBsT1IxOURUMHhQVWlBcENnbDJZWEo1YVc1bklIWmxZek1nZGtOdmJHOXlPd29qWlc1a2FXWmdMQ0JHWmlBOUlHQWphV1lnWkdWbWFXNWxaQ2dnVlZORlgwTlBURTlTWDBGTVVFaEJJQ2tLQ1haRGIyeHZjaUE5SUhabFl6UW9JREV1TUNBcE93b2paV3hwWmlCa1pXWnBibVZrS0NCVlUwVmZRMDlNVDFJZ0tTQjhmQ0JrWldacGJtVmtLQ0JWVTBWZlNVNVRWRUZPUTBsT1IxOURUMHhQVWlBcENnbDJRMjlzYjNJZ1BTQjJaV016S0NBeExqQWdLVHNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmUTA5TVQxSUtDWFpEYjJ4dmNpQXFQU0JqYjJ4dmNqc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZTVTVUVkVGT1EwbE9SMTlEVDB4UFVnb0pka052Ykc5eUxuaDVlaUFxUFNCcGJuTjBZVzVqWlVOdmJHOXlMbmg1ZWpzS0kyVnVaR2xtWUN3Z1RtWWdQU0JnSTJSbFptbHVaU0JRU1NBekxqRTBNVFU1TWpZMU16VTRPVGM1TXdvalpHVm1hVzVsSUZCSk1pQTJMakk0TXpFNE5UTXdOekUzT1RVNE5nb2paR1ZtYVc1bElGQkpYMGhCVEVZZ01TNDFOekEzT1RZek1qWTNPVFE0T1RZMkNpTmtaV1pwYm1VZ1VrVkRTVkJTVDBOQlRGOVFTU0F3TGpNeE9ETXdPVGc0TmpFNE16YzVNRGNLSTJSbFptbHVaU0JTUlVOSlVGSlBRMEZNWDFCSk1pQXdMakUxT1RFMU5EazBNekE1TVRnNU5UTTFDaU5rWldacGJtVWdSVkJUU1V4UFRpQXhaUzAyQ2lOcFptNWtaV1lnYzJGMGRYSmhkR1VLSTJSbFptbHVaU0J6WVhSMWNtRjBaU2dnWVNBcElHTnNZVzF3S0NCaExDQXdMakFzSURFdU1DQXBDaU5sYm1ScFpnb2paR1ZtYVc1bElIZG9hWFJsUTI5dGNHeGxiV1Z1ZENnZ1lTQXBJQ2dnTVM0d0lDMGdjMkYwZFhKaGRHVW9JR0VnS1NBcENtWnNiMkYwSUhCdmR6SW9JR052Ym5OMElHbHVJR1pzYjJGMElIZ2dLU0I3SUhKbGRIVnliaUI0S25nN0lIMEtabXh2WVhRZ2NHOTNNeWdnWTI5dWMzUWdhVzRnWm14dllYUWdlQ0FwSUhzZ2NtVjBkWEp1SUhncWVDcDRPeUI5Q21ac2IyRjBJSEJ2ZHpRb0lHTnZibk4wSUdsdUlHWnNiMkYwSUhnZ0tTQjdJR1pzYjJGMElIZ3lJRDBnZUNwNE95QnlaWFIxY200Z2VESXFlREk3SUgwS1pteHZZWFFnYldGNE15Z2dZMjl1YzNRZ2FXNGdkbVZqTXlCMklDa2dleUJ5WlhSMWNtNGdiV0Y0S0NCdFlYZ29JSFl1ZUN3Z2RpNTVJQ2tzSUhZdWVpQXBPeUI5Q21ac2IyRjBJR0YyWlhKaFoyVW9JR052Ym5OMElHbHVJSFpsWXpNZ1kyOXNiM0lnS1NCN0lISmxkSFZ5YmlCa2IzUW9JR052Ykc5eUxDQjJaV016S0NBd0xqTXpNek1nS1NBcE95QjlDbWhwWjJod0lHWnNiMkYwSUhKaGJtUW9JR052Ym5OMElHbHVJSFpsWXpJZ2RYWWdLU0I3Q2dsamIyNXpkQ0JvYVdkb2NDQm1iRzloZENCaElEMGdNVEl1T1RnNU9Dd2dZaUE5SURjNExqSXpNeXdnWXlBOUlEUXpOelU0TGpVME5UTTdDZ2xvYVdkb2NDQm1iRzloZENCa2RDQTlJR1J2ZENnZ2RYWXVlSGtzSUhabFl6SW9JR0VzWWlBcElDa3NJSE51SUQwZ2JXOWtLQ0JrZEN3Z1VFa2dLVHNLQ1hKbGRIVnliaUJtY21GamRDZ2djMmx1S0NCemJpQXBJQ29nWXlBcE93cDlDaU5wWm1SbFppQklTVWRJWDFCU1JVTkpVMGxQVGdvSlpteHZZWFFnY0hKbFkybHphVzl1VTJGbVpVeGxibWQwYUNnZ2RtVmpNeUIySUNrZ2V5QnlaWFIxY200Z2JHVnVaM1JvS0NCMklDazdJSDBLSTJWc2MyVUtDV1pzYjJGMElIQnlaV05wYzJsdmJsTmhabVZNWlc1bmRHZ29JSFpsWXpNZ2RpQXBJSHNLQ1FsbWJHOWhkQ0J0WVhoRGIyMXdiMjVsYm5RZ1BTQnRZWGd6S0NCaFluTW9JSFlnS1NBcE93b0pDWEpsZEhWeWJpQnNaVzVuZEdnb0lIWWdMeUJ0WVhoRGIyMXdiMjVsYm5RZ0tTQXFJRzFoZUVOdmJYQnZibVZ1ZERzS0NYMEtJMlZ1WkdsbUNuTjBjblZqZENCSmJtTnBaR1Z1ZEV4cFoyaDBJSHNLQ1habFl6TWdZMjlzYjNJN0NnbDJaV016SUdScGNtVmpkR2x2YmpzS0NXSnZiMndnZG1semFXSnNaVHNLZlRzS2MzUnlkV04wSUZKbFpteGxZM1JsWkV4cFoyaDBJSHNLQ1habFl6TWdaR2x5WldOMFJHbG1ablZ6WlRzS0NYWmxZek1nWkdseVpXTjBVM0JsWTNWc1lYSTdDZ2wyWldNeklHbHVaR2x5WldOMFJHbG1ablZ6WlRzS0NYWmxZek1nYVc1a2FYSmxZM1JUY0dWamRXeGhjanNLZlRzS2MzUnlkV04wSUVkbGIyMWxkSEpwWTBOdmJuUmxlSFFnZXdvSmRtVmpNeUJ3YjNOcGRHbHZianNLQ1habFl6TWdibTl5YldGc093b0pkbVZqTXlCMmFXVjNSR2x5T3dvamFXWmtaV1lnVlZORlgwTk1SVUZTUTA5QlZBb0pkbVZqTXlCamJHVmhjbU52WVhST2IzSnRZV3c3Q2lObGJtUnBaZ3A5T3dwMlpXTXpJSFJ5WVc1elptOXliVVJwY21WamRHbHZiaWdnYVc0Z2RtVmpNeUJrYVhJc0lHbHVJRzFoZERRZ2JXRjBjbWw0SUNrZ2V3b0pjbVYwZFhKdUlHNXZjbTFoYkdsNlpTZ2dLQ0J0WVhSeWFYZ2dLaUIyWldNMEtDQmthWElzSURBdU1DQXBJQ2t1ZUhsNklDazdDbjBLZG1Wak15QnBiblpsY25ObFZISmhibk5tYjNKdFJHbHlaV04wYVc5dUtDQnBiaUIyWldNeklHUnBjaXdnYVc0Z2JXRjBOQ0J0WVhSeWFYZ2dLU0I3Q2dseVpYUjFjbTRnYm05eWJXRnNhWHBsS0NBb0lIWmxZelFvSUdScGNpd2dNQzR3SUNrZ0tpQnRZWFJ5YVhnZ0tTNTRlWG9nS1RzS2ZRcHRZWFF6SUhSeVlXNXpjRzl6WlUxaGRETW9JR052Ym5OMElHbHVJRzFoZERNZ2JTQXBJSHNLQ1cxaGRETWdkRzF3T3dvSmRHMXdXeUF3SUYwZ1BTQjJaV016S0NCdFd5QXdJRjB1ZUN3Z2JWc2dNU0JkTG5nc0lHMWJJRElnWFM1NElDazdDZ2wwYlhCYklERWdYU0E5SUhabFl6TW9JRzFiSURBZ1hTNTVMQ0J0V3lBeElGMHVlU3dnYlZzZ01pQmRMbmtnS1RzS0NYUnRjRnNnTWlCZElEMGdkbVZqTXlnZ2JWc2dNQ0JkTG5vc0lHMWJJREVnWFM1NkxDQnRXeUF5SUYwdWVpQXBPd29KY21WMGRYSnVJSFJ0Y0RzS2ZRcG1iRzloZENCc2FXNWxZWEpVYjFKbGJHRjBhWFpsVEhWdGFXNWhibU5sS0NCamIyNXpkQ0JwYmlCMlpXTXpJR052Ykc5eUlDa2dld29KZG1Wak15QjNaV2xuYUhSeklEMGdkbVZqTXlnZ01DNHlNVEkyTENBd0xqY3hOVElzSURBdU1EY3lNaUFwT3dvSmNtVjBkWEp1SUdSdmRDZ2dkMlZwWjJoMGN5d2dZMjlzYjNJdWNtZGlJQ2s3Q24wS1ltOXZiQ0JwYzFCbGNuTndaV04wYVhabFRXRjBjbWw0S0NCdFlYUTBJRzBnS1NCN0NnbHlaWFIxY200Z2JWc2dNaUJkV3lBeklGMGdQVDBnTFNBeExqQTdDbjBLZG1Wak1pQmxjWFZwY21WamRGVjJLQ0JwYmlCMlpXTXpJR1JwY2lBcElIc0tDV1pzYjJGMElIVWdQU0JoZEdGdUtDQmthWEl1ZWl3Z1pHbHlMbmdnS1NBcUlGSkZRMGxRVWs5RFFVeGZVRWt5SUNzZ01DNDFPd29KWm14dllYUWdkaUE5SUdGemFXNG9JR05zWVcxd0tDQmthWEl1ZVN3Z0xTQXhMakFzSURFdU1DQXBJQ2tnS2lCU1JVTkpVRkpQUTBGTVgxQkpJQ3NnTUM0MU93b0pjbVYwZFhKdUlIWmxZeklvSUhVc0lIWWdLVHNLZldBc0lFSm1JRDBnWUNOcFptUmxaaUJGVGxaTlFWQmZWRmxRUlY5RFZVSkZYMVZXQ2dralpHVm1hVzVsSUdOMVltVlZWbDl0WVhoTmFYQk1aWFpsYkNBNExqQUtDU05rWldacGJtVWdZM1ZpWlZWV1gyMXBiazFwY0V4bGRtVnNJRFF1TUFvSkkyUmxabWx1WlNCamRXSmxWVlpmYldGNFZHbHNaVk5wZW1VZ01qVTJMakFLQ1NOa1pXWnBibVVnWTNWaVpWVldYMjFwYmxScGJHVlRhWHBsSURFMkxqQUtDV1pzYjJGMElHZGxkRVpoWTJVb0lIWmxZek1nWkdseVpXTjBhVzl1SUNrZ2V3b0pDWFpsWXpNZ1lXSnpSR2x5WldOMGFXOXVJRDBnWVdKektDQmthWEpsWTNScGIyNGdLVHNLQ1FsbWJHOWhkQ0JtWVdObElEMGdMU0F4TGpBN0Nna0phV1lnS0NCaFluTkVhWEpsWTNScGIyNHVlQ0ErSUdGaWMwUnBjbVZqZEdsdmJpNTZJQ2tnZXdvSkNRbHBaaUFvSUdGaWMwUnBjbVZqZEdsdmJpNTRJRDRnWVdKelJHbHlaV04wYVc5dUxua2dLUW9KQ1FrSlptRmpaU0E5SUdScGNtVmpkR2x2Ymk1NElENGdNQzR3SUQ4Z01DNHdJRG9nTXk0d093b0pDUWxsYkhObENna0pDUWxtWVdObElEMGdaR2x5WldOMGFXOXVMbmtnUGlBd0xqQWdQeUF4TGpBZ09pQTBMakE3Q2drSmZTQmxiSE5sSUhzS0NRa0phV1lnS0NCaFluTkVhWEpsWTNScGIyNHVlaUErSUdGaWMwUnBjbVZqZEdsdmJpNTVJQ2tLQ1FrSkNXWmhZMlVnUFNCa2FYSmxZM1JwYjI0dWVpQStJREF1TUNBL0lESXVNQ0E2SURVdU1Ec0tDUWtKWld4elpRb0pDUWtKWm1GalpTQTlJR1JwY21WamRHbHZiaTU1SUQ0Z01DNHdJRDhnTVM0d0lEb2dOQzR3T3dvSkNYMEtDUWx5WlhSMWNtNGdabUZqWlRzS0NYMEtDWFpsWXpJZ1oyVjBWVllvSUhabFl6TWdaR2x5WldOMGFXOXVMQ0JtYkc5aGRDQm1ZV05sSUNrZ2V3b0pDWFpsWXpJZ2RYWTdDZ2tKYVdZZ0tDQm1ZV05sSUQwOUlEQXVNQ0FwSUhzS0NRa0pkWFlnUFNCMlpXTXlLQ0JrYVhKbFkzUnBiMjR1ZWl3Z1pHbHlaV04wYVc5dUxua2dLU0F2SUdGaWN5Z2daR2x5WldOMGFXOXVMbmdnS1RzS0NRbDlJR1ZzYzJVZ2FXWWdLQ0JtWVdObElEMDlJREV1TUNBcElIc0tDUWtKZFhZZ1BTQjJaV015S0NBdElHUnBjbVZqZEdsdmJpNTRMQ0F0SUdScGNtVmpkR2x2Ymk1NklDa2dMeUJoWW5Nb0lHUnBjbVZqZEdsdmJpNTVJQ2s3Q2drSmZTQmxiSE5sSUdsbUlDZ2dabUZqWlNBOVBTQXlMakFnS1NCN0Nna0pDWFYySUQwZ2RtVmpNaWdnTFNCa2FYSmxZM1JwYjI0dWVDd2daR2x5WldOMGFXOXVMbmtnS1NBdklHRmljeWdnWkdseVpXTjBhVzl1TG5vZ0tUc0tDUWw5SUdWc2MyVWdhV1lnS0NCbVlXTmxJRDA5SURNdU1DQXBJSHNLQ1FrSmRYWWdQU0IyWldNeUtDQXRJR1JwY21WamRHbHZiaTU2TENCa2FYSmxZM1JwYjI0dWVTQXBJQzhnWVdKektDQmthWEpsWTNScGIyNHVlQ0FwT3dvSkNYMGdaV3h6WlNCcFppQW9JR1poWTJVZ1BUMGdOQzR3SUNrZ2V3b0pDUWwxZGlBOUlIWmxZeklvSUMwZ1pHbHlaV04wYVc5dUxuZ3NJR1JwY21WamRHbHZiaTU2SUNrZ0x5QmhZbk1vSUdScGNtVmpkR2x2Ymk1NUlDazdDZ2tKZlNCbGJITmxJSHNLQ1FrSmRYWWdQU0IyWldNeUtDQmthWEpsWTNScGIyNHVlQ3dnWkdseVpXTjBhVzl1TG5rZ0tTQXZJR0ZpY3lnZ1pHbHlaV04wYVc5dUxub2dLVHNLQ1FsOUNna0pjbVYwZFhKdUlEQXVOU0FxSUNnZ2RYWWdLeUF4TGpBZ0tUc0tDWDBLQ1habFl6TWdZbWxzYVc1bFlYSkRkV0psVlZZb0lITmhiWEJzWlhJeVJDQmxiblpOWVhBc0lIWmxZek1nWkdseVpXTjBhVzl1TENCbWJHOWhkQ0J0YVhCSmJuUWdLU0I3Q2drSlpteHZZWFFnWm1GalpTQTlJR2RsZEVaaFkyVW9JR1JwY21WamRHbHZiaUFwT3dvSkNXWnNiMkYwSUdacGJIUmxja2x1ZENBOUlHMWhlQ2dnWTNWaVpWVldYMjFwYmsxcGNFeGxkbVZzSUMwZ2JXbHdTVzUwTENBd0xqQWdLVHNLQ1FsdGFYQkpiblFnUFNCdFlYZ29JRzFwY0VsdWRDd2dZM1ZpWlZWV1gyMXBiazFwY0V4bGRtVnNJQ2s3Q2drSlpteHZZWFFnWm1GalpWTnBlbVVnUFNCbGVIQXlLQ0J0YVhCSmJuUWdLVHNLQ1FsbWJHOWhkQ0IwWlhobGJGTnBlbVVnUFNBeExqQWdMeUFvSURNdU1DQXFJR04xWW1WVlZsOXRZWGhVYVd4bFUybDZaU0FwT3dvSkNYWmxZeklnZFhZZ1BTQm5aWFJWVmlnZ1pHbHlaV04wYVc5dUxDQm1ZV05sSUNrZ0tpQW9JR1poWTJWVGFYcGxJQzBnTVM0d0lDa2dLeUF3TGpVN0Nna0phV1lnS0NCbVlXTmxJRDRnTWk0d0lDa2dld29KQ1FsMWRpNTVJQ3M5SUdaaFkyVlRhWHBsT3dvSkNRbG1ZV05sSUMwOUlETXVNRHNLQ1FsOUNna0pkWFl1ZUNBclBTQm1ZV05sSUNvZ1ptRmpaVk5wZW1VN0Nna0phV1lnS0NCdGFYQkpiblFnUENCamRXSmxWVlpmYldGNFRXbHdUR1YyWld3Z0tTQjdDZ2tKQ1hWMkxua2dLejBnTWk0d0lDb2dZM1ZpWlZWV1gyMWhlRlJwYkdWVGFYcGxPd29KQ1gwS0NRbDFkaTU1SUNzOUlHWnBiSFJsY2tsdWRDQXFJREl1TUNBcUlHTjFZbVZWVmw5dGFXNVVhV3hsVTJsNlpUc0tDUWwxZGk1NElDczlJRE11TUNBcUlHMWhlQ2dnTUM0d0xDQmpkV0psVlZaZmJXRjRWR2xzWlZOcGVtVWdMU0F5TGpBZ0tpQm1ZV05sVTJsNlpTQXBPd29KQ1hWMklDbzlJSFJsZUdWc1UybDZaVHNLQ1FseVpYUjFjbTRnZEdWNGRIVnlaVEpFS0NCbGJuWk5ZWEFzSUhWMklDa3VjbWRpT3dvSmZRb0pJMlJsWm1sdVpTQnlNQ0F4TGpBS0NTTmtaV1pwYm1VZ2RqQWdNQzR6TXprS0NTTmtaV1pwYm1VZ2JUQWdMU0F5TGpBS0NTTmtaV1pwYm1VZ2NqRWdNQzQ0Q2dralpHVm1hVzVsSUhZeElEQXVNamMyQ2dralpHVm1hVzVsSUcweElDMGdNUzR3Q2dralpHVm1hVzVsSUhJMElEQXVOQW9KSTJSbFptbHVaU0IyTkNBd0xqQTBOZ29KSTJSbFptbHVaU0J0TkNBeUxqQUtDU05rWldacGJtVWdjalVnTUM0ek1EVUtDU05rWldacGJtVWdkalVnTUM0d01UWUtDU05rWldacGJtVWdiVFVnTXk0d0Nna2paR1ZtYVc1bElISTJJREF1TWpFS0NTTmtaV1pwYm1VZ2RqWWdNQzR3TURNNENna2paR1ZtYVc1bElHMDJJRFF1TUFvSlpteHZZWFFnY205MVoyaHVaWE56Vkc5TmFYQW9JR1pzYjJGMElISnZkV2RvYm1WemN5QXBJSHNLQ1FsbWJHOWhkQ0J0YVhBZ1BTQXdMakE3Q2drSmFXWWdLQ0J5YjNWbmFHNWxjM01nUGowZ2NqRWdLU0I3Q2drSkNXMXBjQ0E5SUNnZ2NqQWdMU0J5YjNWbmFHNWxjM01nS1NBcUlDZ2diVEVnTFNCdE1DQXBJQzhnS0NCeU1DQXRJSEl4SUNrZ0t5QnRNRHNLQ1FsOUlHVnNjMlVnYVdZZ0tDQnliM1ZuYUc1bGMzTWdQajBnY2pRZ0tTQjdDZ2tKQ1cxcGNDQTlJQ2dnY2pFZ0xTQnliM1ZuYUc1bGMzTWdLU0FxSUNnZ2JUUWdMU0J0TVNBcElDOGdLQ0J5TVNBdElISTBJQ2tnS3lCdE1Uc0tDUWw5SUdWc2MyVWdhV1lnS0NCeWIzVm5hRzVsYzNNZ1BqMGdjalVnS1NCN0Nna0pDVzFwY0NBOUlDZ2djalFnTFNCeWIzVm5hRzVsYzNNZ0tTQXFJQ2dnYlRVZ0xTQnROQ0FwSUM4Z0tDQnlOQ0F0SUhJMUlDa2dLeUJ0TkRzS0NRbDlJR1ZzYzJVZ2FXWWdLQ0J5YjNWbmFHNWxjM01nUGowZ2NqWWdLU0I3Q2drSkNXMXBjQ0E5SUNnZ2NqVWdMU0J5YjNWbmFHNWxjM01nS1NBcUlDZ2diVFlnTFNCdE5TQXBJQzhnS0NCeU5TQXRJSEkySUNrZ0t5QnROVHNLQ1FsOUlHVnNjMlVnZXdvSkNRbHRhWEFnUFNBdElESXVNQ0FxSUd4dlp6SW9JREV1TVRZZ0tpQnliM1ZuYUc1bGMzTWdLVHNKQ1gwS0NRbHlaWFIxY200Z2JXbHdPd29KZlFvSmRtVmpOQ0IwWlhoMGRYSmxRM1ZpWlZWV0tDQnpZVzF3YkdWeU1rUWdaVzUyVFdGd0xDQjJaV016SUhOaGJYQnNaVVJwY2l3Z1pteHZZWFFnY205MVoyaHVaWE56SUNrZ2V3b0pDV1pzYjJGMElHMXBjQ0E5SUdOc1lXMXdLQ0J5YjNWbmFHNWxjM05VYjAxcGNDZ2djbTkxWjJodVpYTnpJQ2tzSUcwd0xDQmpkV0psVlZaZmJXRjRUV2x3VEdWMlpXd2dLVHNLQ1FsbWJHOWhkQ0J0YVhCR0lEMGdabkpoWTNRb0lHMXBjQ0FwT3dvSkNXWnNiMkYwSUcxcGNFbHVkQ0E5SUdac2IyOXlLQ0J0YVhBZ0tUc0tDUWwyWldNeklHTnZiRzl5TUNBOUlHSnBiR2x1WldGeVEzVmlaVlZXS0NCbGJuWk5ZWEFzSUhOaGJYQnNaVVJwY2l3Z2JXbHdTVzUwSUNrN0Nna0phV1lnS0NCdGFYQkdJRDA5SURBdU1DQXBJSHNLQ1FrSmNtVjBkWEp1SUhabFl6UW9JR052Ykc5eU1Dd2dNUzR3SUNrN0Nna0pmU0JsYkhObElIc0tDUWtKZG1Wak15QmpiMnh2Y2pFZ1BTQmlhV3hwYm1WaGNrTjFZbVZWVmlnZ1pXNTJUV0Z3TENCellXMXdiR1ZFYVhJc0lHMXBjRWx1ZENBcklERXVNQ0FwT3dvSkNRbHlaWFIxY200Z2RtVmpOQ2dnYldsNEtDQmpiMnh2Y2pBc0lHTnZiRzl5TVN3Z2JXbHdSaUFwTENBeExqQWdLVHNLQ1FsOUNnbDlDaU5sYm1ScFptQXNJSHBtSUQwZ1lIWmxZek1nZEhKaGJuTm1iM0p0WldST2IzSnRZV3dnUFNCdlltcGxZM1JPYjNKdFlXdzdDaU5wWm1SbFppQlZVMFZmU1U1VFZFRk9RMGxPUndvSmJXRjBNeUJ0SUQwZ2JXRjBNeWdnYVc1emRHRnVZMlZOWVhSeWFYZ2dLVHNLQ1hSeVlXNXpabTl5YldWa1RtOXliV0ZzSUM4OUlIWmxZek1vSUdSdmRDZ2diVnNnTUNCZExDQnRXeUF3SUYwZ0tTd2daRzkwS0NCdFd5QXhJRjBzSUcxYklERWdYU0FwTENCa2IzUW9JRzFiSURJZ1hTd2diVnNnTWlCZElDa2dLVHNLQ1hSeVlXNXpabTl5YldWa1RtOXliV0ZzSUQwZ2JTQXFJSFJ5WVc1elptOXliV1ZrVG05eWJXRnNPd29qWlc1a2FXWUtkSEpoYm5ObWIzSnRaV1JPYjNKdFlXd2dQU0J1YjNKdFlXeE5ZWFJ5YVhnZ0tpQjBjbUZ1YzJadmNtMWxaRTV2Y20xaGJEc0tJMmxtWkdWbUlFWk1TVkJmVTBsRVJVUUtDWFJ5WVc1elptOXliV1ZrVG05eWJXRnNJRDBnTFNCMGNtRnVjMlp2Y20xbFpFNXZjbTFoYkRzS0kyVnVaR2xtQ2lOcFptUmxaaUJWVTBWZlZFRk9SMFZPVkFvSmRtVmpNeUIwY21GdWMyWnZjbTFsWkZSaGJtZGxiblFnUFNBb0lHMXZaR1ZzVm1sbGQwMWhkSEpwZUNBcUlIWmxZelFvSUc5aWFtVmpkRlJoYm1kbGJuUXNJREF1TUNBcElDa3VlSGw2T3dvSkkybG1aR1ZtSUVaTVNWQmZVMGxFUlVRS0NRbDBjbUZ1YzJadmNtMWxaRlJoYm1kbGJuUWdQU0F0SUhSeVlXNXpabTl5YldWa1ZHRnVaMlZ1ZERzS0NTTmxibVJwWmdvalpXNWthV1pnTENCVlppQTlJR0FqYVdaa1pXWWdWVk5GWDBSSlUxQk1RVU5GVFVWT1ZFMUJVQW9KZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnWkdsemNHeGhZMlZ0Wlc1MFRXRndPd29KZFc1cFptOXliU0JtYkc5aGRDQmthWE53YkdGalpXMWxiblJUWTJGc1pUc0tDWFZ1YVdadmNtMGdabXh2WVhRZ1pHbHpjR3hoWTJWdFpXNTBRbWxoY3pzS0kyVnVaR2xtWUN3Z1QyWWdQU0JnSTJsbVpHVm1JRlZUUlY5RVNWTlFURUZEUlUxRlRsUk5RVkFLQ1hSeVlXNXpabTl5YldWa0lDczlJRzV2Y20xaGJHbDZaU2dnYjJKcVpXTjBUbTl5YldGc0lDa2dLaUFvSUhSbGVIUjFjbVV5UkNnZ1pHbHpjR3hoWTJWdFpXNTBUV0Z3TENCMlZYWWdLUzU0SUNvZ1pHbHpjR3hoWTJWdFpXNTBVMk5oYkdVZ0t5QmthWE53YkdGalpXMWxiblJDYVdGeklDazdDaU5sYm1ScFptQXNJRWhtSUQwZ1lDTnBabVJsWmlCVlUwVmZSVTFKVTFOSlZrVk5RVkFLQ1habFl6UWdaVzFwYzNOcGRtVkRiMnh2Y2lBOUlIUmxlSFIxY21VeVJDZ2daVzFwYzNOcGRtVk5ZWEFzSUhaVmRpQXBPd29KWlcxcGMzTnBkbVZEYjJ4dmNpNXlaMklnUFNCbGJXbHpjMmwyWlUxaGNGUmxlR1ZzVkc5TWFXNWxZWElvSUdWdGFYTnphWFpsUTI5c2IzSWdLUzV5WjJJN0NnbDBiM1JoYkVWdGFYTnphWFpsVW1Ga2FXRnVZMlVnS2owZ1pXMXBjM05wZG1WRGIyeHZjaTV5WjJJN0NpTmxibVJwWm1Bc0lHdG1JRDBnWUNOcFptUmxaaUJWVTBWZlJVMUpVMU5KVmtWTlFWQUtDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJR1Z0YVhOemFYWmxUV0Z3T3dvalpXNWthV1pnTENCSFppQTlJQ0puYkY5R2NtRm5RMjlzYjNJZ1BTQnNhVzVsWVhKVWIwOTFkSEIxZEZSbGVHVnNLQ0JuYkY5R2NtRm5RMjlzYjNJZ0tUc2lMQ0JXWmlBOUlHQjJaV00wSUV4cGJtVmhjbFJ2VEdsdVpXRnlLQ0JwYmlCMlpXTTBJSFpoYkhWbElDa2dld29KY21WMGRYSnVJSFpoYkhWbE93cDlDblpsWXpRZ2MxSkhRbFJ2VEdsdVpXRnlLQ0JwYmlCMlpXTTBJSFpoYkhWbElDa2dld29KY21WMGRYSnVJSFpsWXpRb0lHMXBlQ2dnY0c5M0tDQjJZV3gxWlM1eVoySWdLaUF3TGprME56ZzJOekk1T0RZZ0t5QjJaV016S0NBd0xqQTFNakV6TWpjd01UUWdLU3dnZG1Wak15Z2dNaTQwSUNrZ0tTd2dkbUZzZFdVdWNtZGlJQ29nTUM0d056Y3pPVGt6T0RBNExDQjJaV016S0NCc1pYTnpWR2hoYmtWeGRXRnNLQ0IyWVd4MVpTNXlaMklzSUhabFl6TW9JREF1TURRd05EVWdLU0FwSUNrZ0tTd2dkbUZzZFdVdVlTQXBPd3A5Q25abFl6UWdUR2x1WldGeVZHOXpVa2RDS0NCcGJpQjJaV00wSUhaaGJIVmxJQ2tnZXdvSmNtVjBkWEp1SUhabFl6UW9JRzFwZUNnZ2NHOTNLQ0IyWVd4MVpTNXlaMklzSUhabFl6TW9JREF1TkRFMk5qWWdLU0FwSUNvZ01TNHdOVFVnTFNCMlpXTXpLQ0F3TGpBMU5TQXBMQ0IyWVd4MVpTNXlaMklnS2lBeE1pNDVNaXdnZG1Wak15Z2diR1Z6YzFSb1lXNUZjWFZoYkNnZ2RtRnNkV1V1Y21kaUxDQjJaV016S0NBd0xqQXdNekV6TURnZ0tTQXBJQ2tnS1N3Z2RtRnNkV1V1WVNBcE93cDlZQ3dnVjJZZ1BTQmdJMmxtWkdWbUlGVlRSVjlGVGxaTlFWQUtDU05wWm1SbFppQkZUbFpmVjA5U1RFUlFUMU1LQ1FsMlpXTXpJR05oYldWeVlWUnZSbkpoWnpzS0NRbHBaaUFvSUdselQzSjBhRzluY21Gd2FHbGpJQ2tnZXdvSkNRbGpZVzFsY21GVWIwWnlZV2NnUFNCdWIzSnRZV3hwZW1Vb0lIWmxZek1vSUMwZ2RtbGxkMDFoZEhKcGVGc2dNQ0JkV3lBeUlGMHNJQzBnZG1sbGQwMWhkSEpwZUZzZ01TQmRXeUF5SUYwc0lDMGdkbWxsZDAxaGRISnBlRnNnTWlCZFd5QXlJRjBnS1NBcE93b0pDWDBnWld4elpTQjdDZ2tKQ1dOaGJXVnlZVlJ2Um5KaFp5QTlJRzV2Y20xaGJHbDZaU2dnZGxkdmNteGtVRzl6YVhScGIyNGdMU0JqWVcxbGNtRlFiM05wZEdsdmJpQXBPd29KQ1gwS0NRbDJaV016SUhkdmNteGtUbTl5YldGc0lEMGdhVzUyWlhKelpWUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpZ2dibTl5YldGc0xDQjJhV1YzVFdGMGNtbDRJQ2s3Q2drSkkybG1aR1ZtSUVWT1ZrMUJVRjlOVDBSRlgxSkZSa3hGUTFSSlQwNEtDUWtKZG1Wak15QnlaV1pzWldOMFZtVmpJRDBnY21WbWJHVmpkQ2dnWTJGdFpYSmhWRzlHY21GbkxDQjNiM0pzWkU1dmNtMWhiQ0FwT3dvSkNTTmxiSE5sQ2drSkNYWmxZek1nY21WbWJHVmpkRlpsWXlBOUlISmxabkpoWTNRb0lHTmhiV1Z5WVZSdlJuSmhaeXdnZDI5eWJHUk9iM0p0WVd3c0lISmxabkpoWTNScGIyNVNZWFJwYnlBcE93b0pDU05sYm1ScFpnb0pJMlZzYzJVS0NRbDJaV016SUhKbFpteGxZM1JXWldNZ1BTQjJVbVZtYkdWamREc0tDU05sYm1ScFpnb0pJMmxtWkdWbUlFVk9WazFCVUY5VVdWQkZYME5WUWtVS0NRbDJaV00wSUdWdWRrTnZiRzl5SUQwZ2RHVjRkSFZ5WlVOMVltVW9JR1Z1ZGsxaGNDd2dkbVZqTXlnZ1pteHBjRVZ1ZGsxaGNDQXFJSEpsWm14bFkzUldaV011ZUN3Z2NtVm1iR1ZqZEZabFl5NTVlaUFwSUNrN0Nna0paVzUyUTI5c2IzSWdQU0JsYm5aTllYQlVaWGhsYkZSdlRHbHVaV0Z5S0NCbGJuWkRiMnh2Y2lBcE93b0pJMlZzYVdZZ1pHVm1hVzVsWkNnZ1JVNVdUVUZRWDFSWlVFVmZRMVZDUlY5VlZpQXBDZ2tKZG1Wak5DQmxiblpEYjJ4dmNpQTlJSFJsZUhSMWNtVkRkV0psVlZZb0lHVnVkazFoY0N3Z2NtVm1iR1ZqZEZabFl5d2dNQzR3SUNrN0Nna2paV3h6WlFvSkNYWmxZelFnWlc1MlEyOXNiM0lnUFNCMlpXTTBLQ0F3TGpBZ0tUc0tDU05sYm1ScFpnb0pJMmxtWkdWbUlFVk9WazFCVUY5Q1RFVk9SRWxPUjE5TlZVeFVTVkJNV1FvSkNXOTFkR2R2YVc1blRHbG5hSFFnUFNCdGFYZ29JRzkxZEdkdmFXNW5UR2xuYUhRc0lHOTFkR2R2YVc1blRHbG5hSFFnS2lCbGJuWkRiMnh2Y2k1NGVYb3NJSE53WldOMWJHRnlVM1J5Wlc1bmRHZ2dLaUJ5Wldac1pXTjBhWFpwZEhrZ0tUc0tDU05sYkdsbUlHUmxabWx1WldRb0lFVk9WazFCVUY5Q1RFVk9SRWxPUjE5TlNWZ2dLUW9KQ1c5MWRHZHZhVzVuVEdsbmFIUWdQU0J0YVhnb0lHOTFkR2R2YVc1blRHbG5hSFFzSUdWdWRrTnZiRzl5TG5oNWVpd2djM0JsWTNWc1lYSlRkSEpsYm1kMGFDQXFJSEpsWm14bFkzUnBkbWwwZVNBcE93b0pJMlZzYVdZZ1pHVm1hVzVsWkNnZ1JVNVdUVUZRWDBKTVJVNUVTVTVIWDBGRVJDQXBDZ2tKYjNWMFoyOXBibWRNYVdkb2RDQXJQU0JsYm5aRGIyeHZjaTU0ZVhvZ0tpQnpjR1ZqZFd4aGNsTjBjbVZ1WjNSb0lDb2djbVZtYkdWamRHbDJhWFI1T3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUhGbUlEMGdZQ05wWm1SbFppQlZVMFZmUlU1V1RVRlFDZ2wxYm1sbWIzSnRJR1pzYjJGMElHVnVkazFoY0VsdWRHVnVjMmwwZVRzS0NYVnVhV1p2Y20wZ1pteHZZWFFnWm14cGNFVnVkazFoY0RzS0NTTnBabVJsWmlCRlRsWk5RVkJmVkZsUVJWOURWVUpGQ2drSmRXNXBabTl5YlNCellXMXdiR1Z5UTNWaVpTQmxiblpOWVhBN0Nna2paV3h6WlFvSkNYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlHVnVkazFoY0RzS0NTTmxibVJwWmdvSkNpTmxibVJwWm1Bc0lGaG1JRDBnWUNOcFptUmxaaUJWVTBWZlJVNVdUVUZRQ2dsMWJtbG1iM0p0SUdac2IyRjBJSEpsWm14bFkzUnBkbWwwZVRzS0NTTnBaaUJrWldacGJtVmtLQ0JWVTBWZlFsVk5VRTFCVUNBcElIeDhJR1JsWm1sdVpXUW9JRlZUUlY5T1QxSk5RVXhOUVZBZ0tTQjhmQ0JrWldacGJtVmtLQ0JRU0U5T1J5QXBDZ2tKSTJSbFptbHVaU0JGVGxaZlYwOVNURVJRVDFNS0NTTmxibVJwWmdvSkkybG1aR1ZtSUVWT1ZsOVhUMUpNUkZCUFV3b0pDWFpoY25scGJtY2dkbVZqTXlCMlYyOXliR1JRYjNOcGRHbHZianNLQ1FsMWJtbG1iM0p0SUdac2IyRjBJSEpsWm5KaFkzUnBiMjVTWVhScGJ6c0tDU05sYkhObENna0pkbUZ5ZVdsdVp5QjJaV016SUhaU1pXWnNaV04wT3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUVwbUlEMGdZQ05wWm1SbFppQlZVMFZmUlU1V1RVRlFDZ2tqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMEpWVFZCTlFWQWdLU0I4ZkNCa1pXWnBibVZrS0NCVlUwVmZUazlTVFVGTVRVRlFJQ2tnZkh4a1pXWnBibVZrS0NCUVNFOU9SeUFwQ2drSkkyUmxabWx1WlNCRlRsWmZWMDlTVEVSUVQxTUtDU05sYm1ScFpnb0pJMmxtWkdWbUlFVk9WbDlYVDFKTVJGQlBVd29KQ1FvSkNYWmhjbmxwYm1jZ2RtVmpNeUIyVjI5eWJHUlFiM05wZEdsdmJqc0tDU05sYkhObENna0pkbUZ5ZVdsdVp5QjJaV016SUhaU1pXWnNaV04wT3dvSkNYVnVhV1p2Y20wZ1pteHZZWFFnY21WbWNtRmpkR2x2YmxKaGRHbHZPd29KSTJWdVpHbG1DaU5sYm1ScFptQXNJRmxtSUQwZ1lDTnBabVJsWmlCVlUwVmZSVTVXVFVGUUNna2phV1prWldZZ1JVNVdYMWRQVWt4RVVFOVRDZ2tKZGxkdmNteGtVRzl6YVhScGIyNGdQU0IzYjNKc1pGQnZjMmwwYVc5dUxuaDVlanNLQ1NObGJITmxDZ2tKZG1Wak15QmpZVzFsY21GVWIxWmxjblJsZURzS0NRbHBaaUFvSUdselQzSjBhRzluY21Gd2FHbGpJQ2tnZXdvSkNRbGpZVzFsY21GVWIxWmxjblJsZUNBOUlHNXZjbTFoYkdsNlpTZ2dkbVZqTXlnZ0xTQjJhV1YzVFdGMGNtbDRXeUF3SUYxYklESWdYU3dnTFNCMmFXVjNUV0YwY21sNFd5QXhJRjFiSURJZ1hTd2dMU0IyYVdWM1RXRjBjbWw0V3lBeUlGMWJJRElnWFNBcElDazdDZ2tKZlNCbGJITmxJSHNLQ1FrSlkyRnRaWEpoVkc5V1pYSjBaWGdnUFNCdWIzSnRZV3hwZW1Vb0lIZHZjbXhrVUc5emFYUnBiMjR1ZUhsNklDMGdZMkZ0WlhKaFVHOXphWFJwYjI0Z0tUc0tDUWw5Q2drSmRtVmpNeUIzYjNKc1pFNXZjbTFoYkNBOUlHbHVkbVZ5YzJWVWNtRnVjMlp2Y20xRWFYSmxZM1JwYjI0b0lIUnlZVzV6Wm05eWJXVmtUbTl5YldGc0xDQjJhV1YzVFdGMGNtbDRJQ2s3Q2drSkkybG1aR1ZtSUVWT1ZrMUJVRjlOVDBSRlgxSkZSa3hGUTFSSlQwNEtDUWtKZGxKbFpteGxZM1FnUFNCeVpXWnNaV04wS0NCallXMWxjbUZVYjFabGNuUmxlQ3dnZDI5eWJHUk9iM0p0WVd3Z0tUc0tDUWtqWld4elpRb0pDUWwyVW1WbWJHVmpkQ0E5SUhKbFpuSmhZM1FvSUdOaGJXVnlZVlJ2Vm1WeWRHVjRMQ0IzYjNKc1pFNXZjbTFoYkN3Z2NtVm1jbUZqZEdsdmJsSmhkR2x2SUNrN0Nna0pJMlZ1WkdsbUNna2paVzVrYVdZS0kyVnVaR2xtWUN3Z1dtWWdQU0JnSTJsbVpHVm1JRlZUUlY5R1QwY0tDWFpHYjJkRVpYQjBhQ0E5SUMwZ2JYWlFiM05wZEdsdmJpNTZPd29qWlc1a2FXWmdMQ0FrWmlBOUlHQWphV1prWldZZ1ZWTkZYMFpQUndvSmRtRnllV2x1WnlCbWJHOWhkQ0IyUm05blJHVndkR2c3Q2lObGJtUnBabUFzSUdwbUlEMGdZQ05wWm1SbFppQlZVMFZmUms5SENna2phV1prWldZZ1JrOUhYMFZZVURJS0NRbG1iRzloZENCbWIyZEdZV04wYjNJZ1BTQXhMakFnTFNCbGVIQW9JQzBnWm05blJHVnVjMmwwZVNBcUlHWnZaMFJsYm5OcGRIa2dLaUIyUm05blJHVndkR2dnS2lCMlJtOW5SR1Z3ZEdnZ0tUc0tDU05sYkhObENna0pabXh2WVhRZ1ptOW5SbUZqZEc5eUlEMGdjMjF2YjNSb2MzUmxjQ2dnWm05blRtVmhjaXdnWm05blJtRnlMQ0IyUm05blJHVndkR2dnS1RzS0NTTmxibVJwWmdvSloyeGZSbkpoWjBOdmJHOXlMbkpuWWlBOUlHMXBlQ2dnWjJ4ZlJuSmhaME52Ykc5eUxuSm5ZaXdnWm05blEyOXNiM0lzSUdadlowWmhZM1J2Y2lBcE93b2paVzVrYVdaZ0xDQlJaaUE5SUdBamFXWmtaV1lnVlZORlgwWlBSd29KZFc1cFptOXliU0IyWldNeklHWnZaME52Ykc5eU93b0pkbUZ5ZVdsdVp5Qm1iRzloZENCMlJtOW5SR1Z3ZEdnN0Nna2phV1prWldZZ1JrOUhYMFZZVURJS0NRbDFibWxtYjNKdElHWnNiMkYwSUdadlowUmxibk5wZEhrN0Nna2paV3h6WlFvSkNYVnVhV1p2Y20wZ1pteHZZWFFnWm05blRtVmhjanNLQ1FsMWJtbG1iM0p0SUdac2IyRjBJR1p2WjBaaGNqc0tDU05sYm1ScFpnb2paVzVrYVdaZ0xDQkxaaUE5SUdBamFXWmtaV1lnVlZORlgwZFNRVVJKUlU1VVRVRlFDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JuY21Ga2FXVnVkRTFoY0RzS0kyVnVaR2xtQ25abFl6TWdaMlYwUjNKaFpHbGxiblJKY25KaFpHbGhibU5sS0NCMlpXTXpJRzV2Y20xaGJDd2dkbVZqTXlCc2FXZG9kRVJwY21WamRHbHZiaUFwSUhzS0NXWnNiMkYwSUdSdmRFNU1JRDBnWkc5MEtDQnViM0p0WVd3c0lHeHBaMmgwUkdseVpXTjBhVzl1SUNrN0NnbDJaV015SUdOdmIzSmtJRDBnZG1Wak1pZ2daRzkwVGt3Z0tpQXdMalVnS3lBd0xqVXNJREF1TUNBcE93b0pJMmxtWkdWbUlGVlRSVjlIVWtGRVNVVk9WRTFCVUFvSkNYSmxkSFZ5YmlCMlpXTXpLQ0IwWlhoMGRYSmxNa1FvSUdkeVlXUnBaVzUwVFdGd0xDQmpiMjl5WkNBcExuSWdLVHNLQ1NObGJITmxDZ2tKY21WMGRYSnVJQ2dnWTI5dmNtUXVlQ0E4SURBdU55QXBJRDhnZG1Wak15Z2dNQzQzSUNrZ09pQjJaV016S0NBeExqQWdLVHNLQ1NObGJtUnBaZ3A5WUN3Z1pYQWdQU0JnSTJsbVpHVm1JRlZUUlY5TVNVZElWRTFCVUFvSmRtVmpOQ0JzYVdkb2RFMWhjRlJsZUdWc0lEMGdkR1Y0ZEhWeVpUSkVLQ0JzYVdkb2RFMWhjQ3dnZGxWMk1pQXBPd29KZG1Wak15QnNhV2RvZEUxaGNFbHljbUZrYVdGdVkyVWdQU0JzYVdkb2RFMWhjRlJsZUdWc1ZHOU1hVzVsWVhJb0lHeHBaMmgwVFdGd1ZHVjRaV3dnS1M1eVoySWdLaUJzYVdkb2RFMWhjRWx1ZEdWdWMybDBlVHNLQ1NOcFptNWtaV1lnVUVoWlUwbERRVXhNV1Y5RFQxSlNSVU5VWDB4SlIwaFVVd29KQ1d4cFoyaDBUV0Z3U1hKeVlXUnBZVzVqWlNBcVBTQlFTVHNLQ1NObGJtUnBaZ29KY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDczlJR3hwWjJoMFRXRndTWEp5WVdScFlXNWpaVHNLSTJWdVpHbG1ZQ3dnZEhBZ1BTQmdJMmxtWkdWbUlGVlRSVjlNU1VkSVZFMUJVQW9KZFc1cFptOXliU0J6WVcxd2JHVnlNa1FnYkdsbmFIUk5ZWEE3Q2dsMWJtbG1iM0p0SUdac2IyRjBJR3hwWjJoMFRXRndTVzUwWlc1emFYUjVPd29qWlc1a2FXWmdMQ0J1Y0NBOUlHQjJaV016SUdScFptWjFjMlVnUFNCMlpXTXpLQ0F4TGpBZ0tUc0tSMlZ2YldWMGNtbGpRMjl1ZEdWNGRDQm5aVzl0WlhSeWVUc0taMlZ2YldWMGNua3VjRzl6YVhScGIyNGdQU0J0ZGxCdmMybDBhVzl1TG5oNWVqc0taMlZ2YldWMGNua3VibTl5YldGc0lEMGdibTl5YldGc2FYcGxLQ0IwY21GdWMyWnZjbTFsWkU1dmNtMWhiQ0FwT3dwblpXOXRaWFJ5ZVM1MmFXVjNSR2x5SUQwZ0tDQnBjMDl5ZEdodlozSmhjR2hwWXlBcElEOGdkbVZqTXlnZ01Dd2dNQ3dnTVNBcElEb2dibTl5YldGc2FYcGxLQ0F0YlhaUWIzTnBkR2x2Ymk1NGVYb2dLVHNLUjJWdmJXVjBjbWxqUTI5dWRHVjRkQ0JpWVdOclIyVnZiV1YwY25rN0NtSmhZMnRIWlc5dFpYUnllUzV3YjNOcGRHbHZiaUE5SUdkbGIyMWxkSEo1TG5CdmMybDBhVzl1T3dwaVlXTnJSMlZ2YldWMGNua3VibTl5YldGc0lEMGdMV2RsYjIxbGRISjVMbTV2Y20xaGJEc0tZbUZqYTBkbGIyMWxkSEo1TG5acFpYZEVhWElnUFNCblpXOXRaWFJ5ZVM1MmFXVjNSR2x5T3dwMlRHbG5hSFJHY205dWRDQTlJSFpsWXpNb0lEQXVNQ0FwT3dwMlNXNWthWEpsWTNSR2NtOXVkQ0E5SUhabFl6TW9JREF1TUNBcE93b2phV1prWldZZ1JFOVZRa3hGWDFOSlJFVkVDZ2wyVEdsbmFIUkNZV05ySUQwZ2RtVmpNeWdnTUM0d0lDazdDZ2wyU1c1a2FYSmxZM1JDWVdOcklEMGdkbVZqTXlnZ01DNHdJQ2s3Q2lObGJtUnBaZ3BKYm1OcFpHVnVkRXhwWjJoMElHUnBjbVZqZEV4cFoyaDBPd3BtYkc5aGRDQmtiM1JPVERzS2RtVmpNeUJrYVhKbFkzUk1hV2RvZEVOdmJHOXlYMFJwWm1aMWMyVTdDblpKYm1ScGNtVmpkRVp5YjI1MElDczlJR2RsZEVGdFltbGxiblJNYVdkb2RFbHljbUZrYVdGdVkyVW9JR0Z0WW1sbGJuUk1hV2RvZEVOdmJHOXlJQ2s3Q25aSmJtUnBjbVZqZEVaeWIyNTBJQ3M5SUdkbGRFeHBaMmgwVUhKdlltVkpjbkpoWkdsaGJtTmxLQ0JzYVdkb2RGQnliMkpsTENCblpXOXRaWFJ5ZVM1dWIzSnRZV3dnS1RzS0kybG1aR1ZtSUVSUFZVSk1SVjlUU1VSRlJBb0pka2x1WkdseVpXTjBRbUZqYXlBclBTQm5aWFJCYldKcFpXNTBUR2xuYUhSSmNuSmhaR2xoYm1ObEtDQmhiV0pwWlc1MFRHbG5hSFJEYjJ4dmNpQXBPd29KZGtsdVpHbHlaV04wUW1GamF5QXJQU0JuWlhSTWFXZG9kRkJ5YjJKbFNYSnlZV1JwWVc1alpTZ2diR2xuYUhSUWNtOWlaU3dnWW1GamEwZGxiMjFsZEhKNUxtNXZjbTFoYkNBcE93b2paVzVrYVdZS0kybG1JRTVWVFY5UVQwbE9WRjlNU1VkSVZGTWdQaUF3Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gzTjBZWEowQ2dsbWIzSWdLQ0JwYm5RZ2FTQTlJREE3SUdrZ1BDQk9WVTFmVUU5SlRsUmZURWxIU0ZSVE95QnBJQ3NySUNrZ2V3b0pDV2RsZEZCdmFXNTBUR2xuYUhSSmJtWnZLQ0J3YjJsdWRFeHBaMmgwYzFzZ2FTQmRMQ0JuWlc5dFpYUnllU3dnWkdseVpXTjBUR2xuYUhRZ0tUc0tDUWxrYjNST1RDQTlJR1J2ZENnZ1oyVnZiV1YwY25rdWJtOXliV0ZzTENCa2FYSmxZM1JNYVdkb2RDNWthWEpsWTNScGIyNGdLVHNLQ1Fsa2FYSmxZM1JNYVdkb2RFTnZiRzl5WDBScFptWjFjMlVnUFNCa2FYSmxZM1JNYVdkb2RDNWpiMnh2Y2pzS0NRbDJUR2xuYUhSR2NtOXVkQ0FyUFNCellYUjFjbUYwWlNnZ1pHOTBUa3dnS1NBcUlHUnBjbVZqZEV4cFoyaDBRMjlzYjNKZlJHbG1ablZ6WlRzS0NRa2phV1prWldZZ1JFOVZRa3hGWDFOSlJFVkVDZ2tKQ1haTWFXZG9kRUpoWTJzZ0t6MGdjMkYwZFhKaGRHVW9JQzBnWkc5MFRrd2dLU0FxSUdScGNtVmpkRXhwWjJoMFEyOXNiM0pmUkdsbVpuVnpaVHNLQ1FralpXNWthV1lLQ1gwS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZaVzVrQ2lObGJtUnBaZ29qYVdZZ1RsVk5YMU5RVDFSZlRFbEhTRlJUSUQ0Z01Bb0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjl6ZEdGeWRBb0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVGxWTlgxTlFUMVJmVEVsSFNGUlRPeUJwSUNzcklDa2dld29KQ1dkbGRGTndiM1JNYVdkb2RFbHVabThvSUhOd2IzUk1hV2RvZEhOYklHa2dYU3dnWjJWdmJXVjBjbmtzSUdScGNtVmpkRXhwWjJoMElDazdDZ2tKWkc5MFRrd2dQU0JrYjNRb0lHZGxiMjFsZEhKNUxtNXZjbTFoYkN3Z1pHbHlaV04wVEdsbmFIUXVaR2x5WldOMGFXOXVJQ2s3Q2drSlpHbHlaV04wVEdsbmFIUkRiMnh2Y2w5RWFXWm1kWE5sSUQwZ1pHbHlaV04wVEdsbmFIUXVZMjlzYjNJN0Nna0pka3hwWjJoMFJuSnZiblFnS3owZ2MyRjBkWEpoZEdVb0lHUnZkRTVNSUNrZ0tpQmthWEpsWTNSTWFXZG9kRU52Ykc5eVgwUnBabVoxYzJVN0Nna0pJMmxtWkdWbUlFUlBWVUpNUlY5VFNVUkZSQW9KQ1FsMlRHbG5hSFJDWVdOcklDczlJSE5oZEhWeVlYUmxLQ0F0SUdSdmRFNU1JQ2tnS2lCa2FYSmxZM1JNYVdkb2RFTnZiRzl5WDBScFptWjFjMlU3Q2drSkkyVnVaR2xtQ2dsOUNna2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYMlZ1WkFvalpXNWthV1lLSTJsbUlFNVZUVjlFU1ZKZlRFbEhTRlJUSUQ0Z01Bb0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjl6ZEdGeWRBb0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVGxWTlgwUkpVbDlNU1VkSVZGTTdJR2tnS3lzZ0tTQjdDZ2tKWjJWMFJHbHlaV04wYVc5dVlXeE1hV2RvZEVsdVptOG9JR1JwY21WamRHbHZibUZzVEdsbmFIUnpXeUJwSUYwc0lHZGxiMjFsZEhKNUxDQmthWEpsWTNSTWFXZG9kQ0FwT3dvSkNXUnZkRTVNSUQwZ1pHOTBLQ0JuWlc5dFpYUnllUzV1YjNKdFlXd3NJR1JwY21WamRFeHBaMmgwTG1ScGNtVmpkR2x2YmlBcE93b0pDV1JwY21WamRFeHBaMmgwUTI5c2IzSmZSR2xtWm5WelpTQTlJR1JwY21WamRFeHBaMmgwTG1OdmJHOXlPd29KQ1haTWFXZG9kRVp5YjI1MElDczlJSE5oZEhWeVlYUmxLQ0JrYjNST1RDQXBJQ29nWkdseVpXTjBUR2xuYUhSRGIyeHZjbDlFYVdabWRYTmxPd29KQ1NOcFptUmxaaUJFVDFWQ1RFVmZVMGxFUlVRS0NRa0pka3hwWjJoMFFtRmpheUFyUFNCellYUjFjbUYwWlNnZ0xTQmtiM1JPVENBcElDb2daR2x5WldOMFRHbG5hSFJEYjJ4dmNsOUVhV1ptZFhObE93b0pDU05sYm1ScFpnb0pmUW9KSTNCeVlXZHRZU0IxYm5KdmJHeGZiRzl2Y0Y5bGJtUUtJMlZ1WkdsbUNpTnBaaUJPVlUxZlNFVk5TVjlNU1VkSVZGTWdQaUF3Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gzTjBZWEowQ2dsbWIzSWdLQ0JwYm5RZ2FTQTlJREE3SUdrZ1BDQk9WVTFmU0VWTlNWOU1TVWRJVkZNN0lHa2dLeXNnS1NCN0Nna0pka2x1WkdseVpXTjBSbkp2Ym5RZ0t6MGdaMlYwU0dWdGFYTndhR1Z5WlV4cFoyaDBTWEp5WVdScFlXNWpaU2dnYUdWdGFYTndhR1Z5WlV4cFoyaDBjMXNnYVNCZExDQm5aVzl0WlhSeWVTNXViM0p0WVd3Z0tUc0tDUWtqYVdaa1pXWWdSRTlWUWt4RlgxTkpSRVZFQ2drSkNYWkpibVJwY21WamRFSmhZMnNnS3owZ1oyVjBTR1Z0YVhOd2FHVnlaVXhwWjJoMFNYSnlZV1JwWVc1alpTZ2dhR1Z0YVhOd2FHVnlaVXhwWjJoMGMxc2dhU0JkTENCaVlXTnJSMlZ2YldWMGNua3VibTl5YldGc0lDazdDZ2tKSTJWdVpHbG1DZ2w5Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gyVnVaQW9qWlc1a2FXWmdMQ0JwY0NBOUlHQjFibWxtYjNKdElHSnZiMndnY21WalpXbDJaVk5vWVdSdmR6c0tkVzVwWm05eWJTQjJaV016SUdGdFltbGxiblJNYVdkb2RFTnZiRzl5T3dwMWJtbG1iM0p0SUhabFl6TWdiR2xuYUhSUWNtOWlaVnNnT1NCZE93cDJaV016SUhOb1IyVjBTWEp5WVdScFlXNWpaVUYwS0NCcGJpQjJaV016SUc1dmNtMWhiQ3dnYVc0Z2RtVmpNeUJ6YUVOdlpXWm1hV05wWlc1MGMxc2dPU0JkSUNrZ2V3b0pabXh2WVhRZ2VDQTlJRzV2Y20xaGJDNTRMQ0I1SUQwZ2JtOXliV0ZzTG5rc0lIb2dQU0J1YjNKdFlXd3VlanNLQ1habFl6TWdjbVZ6ZFd4MElEMGdjMmhEYjJWbVptbGphV1Z1ZEhOYklEQWdYU0FxSURBdU9EZzJNakkzT3dvSmNtVnpkV3gwSUNzOUlITm9RMjlsWm1acFkybGxiblJ6V3lBeElGMGdLaUF5TGpBZ0tpQXdMalV4TVRZMk5DQXFJSGs3Q2dseVpYTjFiSFFnS3owZ2MyaERiMlZtWm1samFXVnVkSE5iSURJZ1hTQXFJREl1TUNBcUlEQXVOVEV4TmpZMElDb2dlanNLQ1hKbGMzVnNkQ0FyUFNCemFFTnZaV1ptYVdOcFpXNTBjMXNnTXlCZElDb2dNaTR3SUNvZ01DNDFNVEUyTmpRZ0tpQjRPd29KY21WemRXeDBJQ3M5SUhOb1EyOWxabVpwWTJsbGJuUnpXeUEwSUYwZ0tpQXlMakFnS2lBd0xqUXlPVEEwTXlBcUlIZ2dLaUI1T3dvSmNtVnpkV3gwSUNzOUlITm9RMjlsWm1acFkybGxiblJ6V3lBMUlGMGdLaUF5TGpBZ0tpQXdMalF5T1RBME15QXFJSGtnS2lCNk93b0pjbVZ6ZFd4MElDczlJSE5vUTI5bFptWnBZMmxsYm5Seld5QTJJRjBnS2lBb0lEQXVOelF6TVRJMUlDb2dlaUFxSUhvZ0xTQXdMakkwTnpjd09DQXBPd29KY21WemRXeDBJQ3M5SUhOb1EyOWxabVpwWTJsbGJuUnpXeUEzSUYwZ0tpQXlMakFnS2lBd0xqUXlPVEEwTXlBcUlIZ2dLaUI2T3dvSmNtVnpkV3gwSUNzOUlITm9RMjlsWm1acFkybGxiblJ6V3lBNElGMGdLaUF3TGpReU9UQTBNeUFxSUNnZ2VDQXFJSGdnTFNCNUlDb2dlU0FwT3dvSmNtVjBkWEp1SUhKbGMzVnNkRHNLZlFwMlpXTXpJR2RsZEV4cFoyaDBVSEp2WW1WSmNuSmhaR2xoYm1ObEtDQmpiMjV6ZENCcGJpQjJaV016SUd4cFoyaDBVSEp2WW1WYklEa2dYU3dnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3Z0tTQjdDZ2wyWldNeklIZHZjbXhrVG05eWJXRnNJRDBnYVc1MlpYSnpaVlJ5WVc1elptOXliVVJwY21WamRHbHZiaWdnYm05eWJXRnNMQ0IyYVdWM1RXRjBjbWw0SUNrN0NnbDJaV016SUdseWNtRmthV0Z1WTJVZ1BTQnphRWRsZEVseWNtRmthV0Z1WTJWQmRDZ2dkMjl5YkdST2IzSnRZV3dzSUd4cFoyaDBVSEp2WW1VZ0tUc0tDWEpsZEhWeWJpQnBjbkpoWkdsaGJtTmxPd3A5Q25abFl6TWdaMlYwUVcxaWFXVnVkRXhwWjJoMFNYSnlZV1JwWVc1alpTZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCaGJXSnBaVzUwVEdsbmFIUkRiMnh2Y2lBcElIc0tDWFpsWXpNZ2FYSnlZV1JwWVc1alpTQTlJR0Z0WW1sbGJuUk1hV2RvZEVOdmJHOXlPd29KY21WMGRYSnVJR2x5Y21Ga2FXRnVZMlU3Q24wS1pteHZZWFFnWjJWMFJHbHpkR0Z1WTJWQmRIUmxiblZoZEdsdmJpZ2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2JHbG5hSFJFYVhOMFlXNWpaU3dnWTI5dWMzUWdhVzRnWm14dllYUWdZM1YwYjJabVJHbHpkR0Z1WTJVc0lHTnZibk4wSUdsdUlHWnNiMkYwSUdSbFkyRjVSWGh3YjI1bGJuUWdLU0I3Q2dramFXWWdaR1ZtYVc1bFpDQW9JRkJJV1ZOSlEwRk1URmxmUTA5U1VrVkRWRjlNU1VkSVZGTWdLUW9KQ1dac2IyRjBJR1JwYzNSaGJtTmxSbUZzYkc5bVppQTlJREV1TUNBdklHMWhlQ2dnY0c5M0tDQnNhV2RvZEVScGMzUmhibU5sTENCa1pXTmhlVVY0Y0c5dVpXNTBJQ2tzSURBdU1ERWdLVHNLQ1FscFppQW9JR04xZEc5bVprUnBjM1JoYm1ObElENGdNQzR3SUNrZ2V3b0pDUWxrYVhOMFlXNWpaVVpoYkd4dlptWWdLajBnY0c5M01pZ2djMkYwZFhKaGRHVW9JREV1TUNBdElIQnZkelFvSUd4cFoyaDBSR2x6ZEdGdVkyVWdMeUJqZFhSdlptWkVhWE4wWVc1alpTQXBJQ2tnS1RzS0NRbDlDZ2tKY21WMGRYSnVJR1JwYzNSaGJtTmxSbUZzYkc5bVpqc0tDU05sYkhObENna0phV1lnS0NCamRYUnZabVpFYVhOMFlXNWpaU0ErSURBdU1DQW1KaUJrWldOaGVVVjRjRzl1Wlc1MElENGdNQzR3SUNrZ2V3b0pDUWx5WlhSMWNtNGdjRzkzS0NCellYUjFjbUYwWlNnZ0xTQnNhV2RvZEVScGMzUmhibU5sSUM4Z1kzVjBiMlptUkdsemRHRnVZMlVnS3lBeExqQWdLU3dnWkdWallYbEZlSEJ2Ym1WdWRDQXBPd29KQ1gwS0NRbHlaWFIxY200Z01TNHdPd29KSTJWdVpHbG1DbjBLWm14dllYUWdaMlYwVTNCdmRFRjBkR1Z1ZFdGMGFXOXVLQ0JqYjI1emRDQnBiaUJtYkc5aGRDQmpiMjVsUTI5emFXNWxMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQndaVzUxYldKeVlVTnZjMmx1WlN3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnWVc1bmJHVkRiM05wYm1VZ0tTQjdDZ2x5WlhSMWNtNGdjMjF2YjNSb2MzUmxjQ2dnWTI5dVpVTnZjMmx1WlN3Z2NHVnVkVzFpY21GRGIzTnBibVVzSUdGdVoyeGxRMjl6YVc1bElDazdDbjBLSTJsbUlFNVZUVjlFU1ZKZlRFbEhTRlJUSUQ0Z01Bb0pjM1J5ZFdOMElFUnBjbVZqZEdsdmJtRnNUR2xuYUhRZ2V3b0pDWFpsWXpNZ1pHbHlaV04wYVc5dU93b0pDWFpsWXpNZ1kyOXNiM0k3Q2dsOU93b0pkVzVwWm05eWJTQkVhWEpsWTNScGIyNWhiRXhwWjJoMElHUnBjbVZqZEdsdmJtRnNUR2xuYUhSeld5Qk9WVTFmUkVsU1gweEpSMGhVVXlCZE93b0pkbTlwWkNCblpYUkVhWEpsWTNScGIyNWhiRXhwWjJoMFNXNW1ieWdnWTI5dWMzUWdhVzRnUkdseVpXTjBhVzl1WVd4TWFXZG9kQ0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBMQ0JqYjI1emRDQnBiaUJIWlc5dFpYUnlhV05EYjI1MFpYaDBJR2RsYjIxbGRISjVMQ0J2ZFhRZ1NXNWphV1JsYm5STWFXZG9kQ0JzYVdkb2RDQXBJSHNLQ1Fsc2FXZG9kQzVqYjJ4dmNpQTlJR1JwY21WamRHbHZibUZzVEdsbmFIUXVZMjlzYjNJN0Nna0piR2xuYUhRdVpHbHlaV04wYVc5dUlEMGdaR2x5WldOMGFXOXVZV3hNYVdkb2RDNWthWEpsWTNScGIyNDdDZ2tKYkdsbmFIUXVkbWx6YVdKc1pTQTlJSFJ5ZFdVN0NnbDlDaU5sYm1ScFpnb2phV1lnVGxWTlgxQlBTVTVVWDB4SlIwaFVVeUErSURBS0NYTjBjblZqZENCUWIybHVkRXhwWjJoMElIc0tDUWwyWldNeklIQnZjMmwwYVc5dU93b0pDWFpsWXpNZ1kyOXNiM0k3Q2drSlpteHZZWFFnWkdsemRHRnVZMlU3Q2drSlpteHZZWFFnWkdWallYazdDZ2w5T3dvSmRXNXBabTl5YlNCUWIybHVkRXhwWjJoMElIQnZhVzUwVEdsbmFIUnpXeUJPVlUxZlVFOUpUbFJmVEVsSFNGUlRJRjA3Q2dsMmIybGtJR2RsZEZCdmFXNTBUR2xuYUhSSmJtWnZLQ0JqYjI1emRDQnBiaUJRYjJsdWRFeHBaMmgwSUhCdmFXNTBUR2xuYUhRc0lHTnZibk4wSUdsdUlFZGxiMjFsZEhKcFkwTnZiblJsZUhRZ1oyVnZiV1YwY25rc0lHOTFkQ0JKYm1OcFpHVnVkRXhwWjJoMElHeHBaMmgwSUNrZ2V3b0pDWFpsWXpNZ2JGWmxZM1J2Y2lBOUlIQnZhVzUwVEdsbmFIUXVjRzl6YVhScGIyNGdMU0JuWlc5dFpYUnllUzV3YjNOcGRHbHZianNLQ1Fsc2FXZG9kQzVrYVhKbFkzUnBiMjRnUFNCdWIzSnRZV3hwZW1Vb0lHeFdaV04wYjNJZ0tUc0tDUWxtYkc5aGRDQnNhV2RvZEVScGMzUmhibU5sSUQwZ2JHVnVaM1JvS0NCc1ZtVmpkRzl5SUNrN0Nna0piR2xuYUhRdVkyOXNiM0lnUFNCd2IybHVkRXhwWjJoMExtTnZiRzl5T3dvSkNXeHBaMmgwTG1OdmJHOXlJQ285SUdkbGRFUnBjM1JoYm1ObFFYUjBaVzUxWVhScGIyNG9JR3hwWjJoMFJHbHpkR0Z1WTJVc0lIQnZhVzUwVEdsbmFIUXVaR2x6ZEdGdVkyVXNJSEJ2YVc1MFRHbG5hSFF1WkdWallYa2dLVHNLQ1Fsc2FXZG9kQzUyYVhOcFlteGxJRDBnS0NCc2FXZG9kQzVqYjJ4dmNpQWhQU0IyWldNektDQXdMakFnS1NBcE93b0pmUW9qWlc1a2FXWUtJMmxtSUU1VlRWOVRVRTlVWDB4SlIwaFVVeUErSURBS0NYTjBjblZqZENCVGNHOTBUR2xuYUhRZ2V3b0pDWFpsWXpNZ2NHOXphWFJwYjI0N0Nna0pkbVZqTXlCa2FYSmxZM1JwYjI0N0Nna0pkbVZqTXlCamIyeHZjanNLQ1FsbWJHOWhkQ0JrYVhOMFlXNWpaVHNLQ1FsbWJHOWhkQ0JrWldOaGVUc0tDUWxtYkc5aGRDQmpiMjVsUTI5ek93b0pDV1pzYjJGMElIQmxiblZ0WW5KaFEyOXpPd29KZlRzS0NYVnVhV1p2Y20wZ1UzQnZkRXhwWjJoMElITndiM1JNYVdkb2RITmJJRTVWVFY5VFVFOVVYMHhKUjBoVVV5QmRPd29KZG05cFpDQm5aWFJUY0c5MFRHbG5hSFJKYm1adktDQmpiMjV6ZENCcGJpQlRjRzkwVEdsbmFIUWdjM0J2ZEV4cFoyaDBMQ0JqYjI1emRDQnBiaUJIWlc5dFpYUnlhV05EYjI1MFpYaDBJR2RsYjIxbGRISjVMQ0J2ZFhRZ1NXNWphV1JsYm5STWFXZG9kQ0JzYVdkb2RDQXBJSHNLQ1FsMlpXTXpJR3hXWldOMGIzSWdQU0J6Y0c5MFRHbG5hSFF1Y0c5emFYUnBiMjRnTFNCblpXOXRaWFJ5ZVM1d2IzTnBkR2x2YmpzS0NRbHNhV2RvZEM1a2FYSmxZM1JwYjI0Z1BTQnViM0p0WVd4cGVtVW9JR3hXWldOMGIzSWdLVHNLQ1FsbWJHOWhkQ0JoYm1kc1pVTnZjeUE5SUdSdmRDZ2diR2xuYUhRdVpHbHlaV04wYVc5dUxDQnpjRzkwVEdsbmFIUXVaR2x5WldOMGFXOXVJQ2s3Q2drSlpteHZZWFFnYzNCdmRFRjBkR1Z1ZFdGMGFXOXVJRDBnWjJWMFUzQnZkRUYwZEdWdWRXRjBhVzl1S0NCemNHOTBUR2xuYUhRdVkyOXVaVU52Y3l3Z2MzQnZkRXhwWjJoMExuQmxiblZ0WW5KaFEyOXpMQ0JoYm1kc1pVTnZjeUFwT3dvSkNXbG1JQ2dnYzNCdmRFRjBkR1Z1ZFdGMGFXOXVJRDRnTUM0d0lDa2dld29KQ1FsbWJHOWhkQ0JzYVdkb2RFUnBjM1JoYm1ObElEMGdiR1Z1WjNSb0tDQnNWbVZqZEc5eUlDazdDZ2tKQ1d4cFoyaDBMbU52Ykc5eUlEMGdjM0J2ZEV4cFoyaDBMbU52Ykc5eUlDb2djM0J2ZEVGMGRHVnVkV0YwYVc5dU93b0pDUWxzYVdkb2RDNWpiMnh2Y2lBcVBTQm5aWFJFYVhOMFlXNWpaVUYwZEdWdWRXRjBhVzl1S0NCc2FXZG9kRVJwYzNSaGJtTmxMQ0J6Y0c5MFRHbG5hSFF1WkdsemRHRnVZMlVzSUhOd2IzUk1hV2RvZEM1a1pXTmhlU0FwT3dvSkNRbHNhV2RvZEM1MmFYTnBZbXhsSUQwZ0tDQnNhV2RvZEM1amIyeHZjaUFoUFNCMlpXTXpLQ0F3TGpBZ0tTQXBPd29KQ1gwZ1pXeHpaU0I3Q2drSkNXeHBaMmgwTG1OdmJHOXlJRDBnZG1Wak15Z2dNQzR3SUNrN0Nna0pDV3hwWjJoMExuWnBjMmxpYkdVZ1BTQm1ZV3h6WlRzS0NRbDlDZ2w5Q2lObGJtUnBaZ29qYVdZZ1RsVk5YMUpGUTFSZlFWSkZRVjlNU1VkSVZGTWdQaUF3Q2dsemRISjFZM1FnVW1WamRFRnlaV0ZNYVdkb2RDQjdDZ2tKZG1Wak15QmpiMnh2Y2pzS0NRbDJaV016SUhCdmMybDBhVzl1T3dvSkNYWmxZek1nYUdGc1psZHBaSFJvT3dvSkNYWmxZek1nYUdGc1praGxhV2RvZERzS0NYMDdDZ2wxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0JzZEdOZk1Uc0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdiSFJqWHpJN0NnbDFibWxtYjNKdElGSmxZM1JCY21WaFRHbG5hSFFnY21WamRFRnlaV0ZNYVdkb2RITmJJRTVWVFY5U1JVTlVYMEZTUlVGZlRFbEhTRlJUSUYwN0NpTmxibVJwWmdvamFXWWdUbFZOWDBoRlRVbGZURWxIU0ZSVElENGdNQW9KYzNSeWRXTjBJRWhsYldsemNHaGxjbVZNYVdkb2RDQjdDZ2tKZG1Wak15QmthWEpsWTNScGIyNDdDZ2tKZG1Wak15QnphM2xEYjJ4dmNqc0tDUWwyWldNeklHZHliM1Z1WkVOdmJHOXlPd29KZlRzS0NYVnVhV1p2Y20wZ1NHVnRhWE53YUdWeVpVeHBaMmgwSUdobGJXbHpjR2hsY21WTWFXZG9kSE5iSUU1VlRWOUlSVTFKWDB4SlIwaFVVeUJkT3dvSmRtVmpNeUJuWlhSSVpXMXBjM0JvWlhKbFRHbG5hSFJKY25KaFpHbGhibU5sS0NCamIyNXpkQ0JwYmlCSVpXMXBjM0JvWlhKbFRHbG5hSFFnYUdWdGFVeHBaMmgwTENCamIyNXpkQ0JwYmlCMlpXTXpJRzV2Y20xaGJDQXBJSHNLQ1FsbWJHOWhkQ0JrYjNST1RDQTlJR1J2ZENnZ2JtOXliV0ZzTENCb1pXMXBUR2xuYUhRdVpHbHlaV04wYVc5dUlDazdDZ2tKWm14dllYUWdhR1Z0YVVScFptWjFjMlZYWldsbmFIUWdQU0F3TGpVZ0tpQmtiM1JPVENBcklEQXVOVHNLQ1FsMlpXTXpJR2x5Y21Ga2FXRnVZMlVnUFNCdGFYZ29JR2hsYldsTWFXZG9kQzVuY205MWJtUkRiMnh2Y2l3Z2FHVnRhVXhwWjJoMExuTnJlVU52Ykc5eUxDQm9aVzFwUkdsbVpuVnpaVmRsYVdkb2RDQXBPd29KQ1hKbGRIVnliaUJwY25KaFpHbGhibU5sT3dvSmZRb2paVzVrYVdaZ0xDQnljQ0E5SUdBamFXWWdaR1ZtYVc1bFpDZ2dWVk5GWDBWT1ZrMUJVQ0FwQ2dramFXWmtaV1lnUlU1V1RVRlFYMDFQUkVWZlVrVkdVa0ZEVkVsUFRnb0pDWFZ1YVdadmNtMGdabXh2WVhRZ2NtVm1jbUZqZEdsdmJsSmhkR2x2T3dvSkkyVnVaR2xtQ2dsMlpXTXpJR2RsZEVsQ1RFbHljbUZrYVdGdVkyVW9JR052Ym5OMElHbHVJSFpsWXpNZ2JtOXliV0ZzSUNrZ2V3b0pDU05wWmlCa1pXWnBibVZrS0NCRlRsWk5RVkJmVkZsUVJWOURWVUpGWDFWV0lDa0tDUWtKZG1Wak15QjNiM0pzWkU1dmNtMWhiQ0E5SUdsdWRtVnljMlZVY21GdWMyWnZjbTFFYVhKbFkzUnBiMjRvSUc1dmNtMWhiQ3dnZG1sbGQwMWhkSEpwZUNBcE93b0pDUWwyWldNMElHVnVkazFoY0VOdmJHOXlJRDBnZEdWNGRIVnlaVU4xWW1WVlZpZ2daVzUyVFdGd0xDQjNiM0pzWkU1dmNtMWhiQ3dnTVM0d0lDazdDZ2tKQ1hKbGRIVnliaUJRU1NBcUlHVnVkazFoY0VOdmJHOXlMbkpuWWlBcUlHVnVkazFoY0VsdWRHVnVjMmwwZVRzS0NRa2paV3h6WlFvSkNRbHlaWFIxY200Z2RtVmpNeWdnTUM0d0lDazdDZ2tKSTJWdVpHbG1DZ2w5Q2dsMlpXTXpJR2RsZEVsQ1RGSmhaR2xoYm1ObEtDQmpiMjV6ZENCcGJpQjJaV016SUhacFpYZEVhWElzSUdOdmJuTjBJR2x1SUhabFl6TWdibTl5YldGc0xDQmpiMjV6ZENCcGJpQm1iRzloZENCeWIzVm5hRzVsYzNNZ0tTQjdDZ2tKSTJsbUlHUmxabWx1WldRb0lFVk9WazFCVUY5VVdWQkZYME5WUWtWZlZWWWdLUW9KQ1FsMlpXTXpJSEpsWm14bFkzUldaV003Q2drSkNTTnBabVJsWmlCRlRsWk5RVkJmVFU5RVJWOVNSVVpNUlVOVVNVOU9DZ2tKQ1FseVpXWnNaV04wVm1WaklEMGdjbVZtYkdWamRDZ2dMU0IyYVdWM1JHbHlMQ0J1YjNKdFlXd2dLVHNLQ1FrSkNYSmxabXhsWTNSV1pXTWdQU0J1YjNKdFlXeHBlbVVvSUcxcGVDZ2djbVZtYkdWamRGWmxZeXdnYm05eWJXRnNMQ0J5YjNWbmFHNWxjM01nS2lCeWIzVm5hRzVsYzNNcElDazdDZ2tKQ1NObGJITmxDZ2tKQ1FseVpXWnNaV04wVm1WaklEMGdjbVZtY21GamRDZ2dMU0IyYVdWM1JHbHlMQ0J1YjNKdFlXd3NJSEpsWm5KaFkzUnBiMjVTWVhScGJ5QXBPd29KQ1FralpXNWthV1lLQ1FrSmNtVm1iR1ZqZEZabFl5QTlJR2x1ZG1WeWMyVlVjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JSEpsWm14bFkzUldaV01zSUhacFpYZE5ZWFJ5YVhnZ0tUc0tDUWtKZG1Wak5DQmxiblpOWVhCRGIyeHZjaUE5SUhSbGVIUjFjbVZEZFdKbFZWWW9JR1Z1ZGsxaGNDd2djbVZtYkdWamRGWmxZeXdnY205MVoyaHVaWE56SUNrN0Nna0pDWEpsZEhWeWJpQmxiblpOWVhCRGIyeHZjaTV5WjJJZ0tpQmxiblpOWVhCSmJuUmxibk5wZEhrN0Nna0pJMlZzYzJVS0NRa0pjbVYwZFhKdUlIWmxZek1vSURBdU1DQXBPd29KQ1NObGJtUnBaZ29KZlFvalpXNWthV1pnTENCemNDQTlJR0JVYjI5dVRXRjBaWEpwWVd3Z2JXRjBaWEpwWVd3N0NtMWhkR1Z5YVdGc0xtUnBabVoxYzJWRGIyeHZjaUE5SUdScFptWjFjMlZEYjJ4dmNpNXlaMkk3WUN3Z2IzQWdQU0JnZG1GeWVXbHVaeUIyWldNeklIWldhV1YzVUc5emFYUnBiMjQ3Q25OMGNuVmpkQ0JVYjI5dVRXRjBaWEpwWVd3Z2V3b0pkbVZqTXlCa2FXWm1kWE5sUTI5c2IzSTdDbjA3Q25admFXUWdVa1ZmUkdseVpXTjBYMVJ2YjI0b0lHTnZibk4wSUdsdUlFbHVZMmxrWlc1MFRHbG5hSFFnWkdseVpXTjBUR2xuYUhRc0lHTnZibk4wSUdsdUlFZGxiMjFsZEhKcFkwTnZiblJsZUhRZ1oyVnZiV1YwY25rc0lHTnZibk4wSUdsdUlGUnZiMjVOWVhSbGNtbGhiQ0J0WVhSbGNtbGhiQ3dnYVc1dmRYUWdVbVZtYkdWamRHVmtUR2xuYUhRZ2NtVm1iR1ZqZEdWa1RHbG5hSFFnS1NCN0NnbDJaV016SUdseWNtRmthV0Z1WTJVZ1BTQm5aWFJIY21Ga2FXVnVkRWx5Y21Ga2FXRnVZMlVvSUdkbGIyMWxkSEo1TG01dmNtMWhiQ3dnWkdseVpXTjBUR2xuYUhRdVpHbHlaV04wYVc5dUlDa2dLaUJrYVhKbFkzUk1hV2RvZEM1amIyeHZjanNLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRFUnBabVoxYzJVZ0t6MGdhWEp5WVdScFlXNWpaU0FxSUVKU1JFWmZUR0Z0WW1WeWRDZ2diV0YwWlhKcFlXd3VaR2xtWm5WelpVTnZiRzl5SUNrN0NuMEtkbTlwWkNCU1JWOUpibVJwY21WamRFUnBabVoxYzJWZlZHOXZiaWdnWTI5dWMzUWdhVzRnZG1Wak15QnBjbkpoWkdsaGJtTmxMQ0JqYjI1emRDQnBiaUJIWlc5dFpYUnlhV05EYjI1MFpYaDBJR2RsYjIxbGRISjVMQ0JqYjI1emRDQnBiaUJVYjI5dVRXRjBaWEpwWVd3Z2JXRjBaWEpwWVd3c0lHbHViM1YwSUZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMElDa2dld29KY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDczlJR2x5Y21Ga2FXRnVZMlVnS2lCQ1VrUkdYMHhoYldKbGNuUW9JRzFoZEdWeWFXRnNMbVJwWm1aMWMyVkRiMnh2Y2lBcE93cDlDaU5rWldacGJtVWdVa1ZmUkdseVpXTjBDUWtKQ1ZKRlgwUnBjbVZqZEY5VWIyOXVDaU5rWldacGJtVWdVa1ZmU1c1a2FYSmxZM1JFYVdabWRYTmxDUWxTUlY5SmJtUnBjbVZqZEVScFptWjFjMlZmVkc5dmJnb2paR1ZtYVc1bElFMWhkR1Z5YVdGc1gweHBaMmgwVUhKdlltVk1UMFFvSUcxaGRHVnlhV0ZzSUNrSktEQXBZQ3dnWVhBZ1BTQmdRbXhwYm01UWFHOXVaMDFoZEdWeWFXRnNJRzFoZEdWeWFXRnNPd3B0WVhSbGNtbGhiQzVrYVdabWRYTmxRMjlzYjNJZ1BTQmthV1ptZFhObFEyOXNiM0l1Y21kaU93cHRZWFJsY21saGJDNXpjR1ZqZFd4aGNrTnZiRzl5SUQwZ2MzQmxZM1ZzWVhJN0NtMWhkR1Z5YVdGc0xuTndaV04xYkdGeVUyaHBibWx1WlhOeklEMGdjMmhwYm1sdVpYTnpPd3B0WVhSbGNtbGhiQzV6Y0dWamRXeGhjbE4wY21WdVozUm9JRDBnYzNCbFkzVnNZWEpUZEhKbGJtZDBhRHRnTENCc2NDQTlJR0IyWVhKNWFXNW5JSFpsWXpNZ2RsWnBaWGRRYjNOcGRHbHZianNLYzNSeWRXTjBJRUpzYVc1dVVHaHZibWROWVhSbGNtbGhiQ0I3Q2dsMlpXTXpJR1JwWm1aMWMyVkRiMnh2Y2pzS0NYWmxZek1nYzNCbFkzVnNZWEpEYjJ4dmNqc0tDV1pzYjJGMElITndaV04xYkdGeVUyaHBibWx1WlhOek93b0pabXh2WVhRZ2MzQmxZM1ZzWVhKVGRISmxibWQwYURzS2ZUc0tkbTlwWkNCU1JWOUVhWEpsWTNSZlFteHBibTVRYUc5dVp5Z2dZMjl1YzNRZ2FXNGdTVzVqYVdSbGJuUk1hV2RvZENCa2FYSmxZM1JNYVdkb2RDd2dZMjl1YzNRZ2FXNGdSMlZ2YldWMGNtbGpRMjl1ZEdWNGRDQm5aVzl0WlhSeWVTd2dZMjl1YzNRZ2FXNGdRbXhwYm01UWFHOXVaMDFoZEdWeWFXRnNJRzFoZEdWeWFXRnNMQ0JwYm05MWRDQlNaV1pzWldOMFpXUk1hV2RvZENCeVpXWnNaV04wWldSTWFXZG9kQ0FwSUhzS0NXWnNiMkYwSUdSdmRFNU1JRDBnYzJGMGRYSmhkR1VvSUdSdmRDZ2daMlZ2YldWMGNua3VibTl5YldGc0xDQmthWEpsWTNSTWFXZG9kQzVrYVhKbFkzUnBiMjRnS1NBcE93b0pkbVZqTXlCcGNuSmhaR2xoYm1ObElEMGdaRzkwVGt3Z0tpQmthWEpsWTNSTWFXZG9kQzVqYjJ4dmNqc0tDWEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEVScFptWjFjMlVnS3owZ2FYSnlZV1JwWVc1alpTQXFJRUpTUkVaZlRHRnRZbVZ5ZENnZ2JXRjBaWEpwWVd3dVpHbG1ablZ6WlVOdmJHOXlJQ2s3Q2dseVpXWnNaV04wWldSTWFXZG9kQzVrYVhKbFkzUlRjR1ZqZFd4aGNpQXJQU0JwY25KaFpHbGhibU5sSUNvZ1FsSkVSbDlDYkdsdWJsQm9iMjVuS0NCa2FYSmxZM1JNYVdkb2RDNWthWEpsWTNScGIyNHNJR2RsYjIxbGRISjVMblpwWlhkRWFYSXNJR2RsYjIxbGRISjVMbTV2Y20xaGJDd2diV0YwWlhKcFlXd3VjM0JsWTNWc1lYSkRiMnh2Y2l3Z2JXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKVGFHbHVhVzVsYzNNZ0tTQXFJRzFoZEdWeWFXRnNMbk53WldOMWJHRnlVM1J5Wlc1bmRHZzdDbjBLZG05cFpDQlNSVjlKYm1ScGNtVmpkRVJwWm1aMWMyVmZRbXhwYm01UWFHOXVaeWdnWTI5dWMzUWdhVzRnZG1Wak15QnBjbkpoWkdsaGJtTmxMQ0JqYjI1emRDQnBiaUJIWlc5dFpYUnlhV05EYjI1MFpYaDBJR2RsYjIxbGRISjVMQ0JqYjI1emRDQnBiaUJDYkdsdWJsQm9iMjVuVFdGMFpYSnBZV3dnYldGMFpYSnBZV3dzSUdsdWIzVjBJRkpsWm14bFkzUmxaRXhwWjJoMElISmxabXhsWTNSbFpFeHBaMmgwSUNrZ2V3b0pjbVZtYkdWamRHVmtUR2xuYUhRdWFXNWthWEpsWTNSRWFXWm1kWE5sSUNzOUlHbHljbUZrYVdGdVkyVWdLaUJDVWtSR1gweGhiV0psY25Rb0lHMWhkR1Z5YVdGc0xtUnBabVoxYzJWRGIyeHZjaUFwT3dwOUNpTmtaV1pwYm1VZ1VrVmZSR2x5WldOMENRa0pDVkpGWDBScGNtVmpkRjlDYkdsdWJsQm9iMjVuQ2lOa1pXWnBibVVnVWtWZlNXNWthWEpsWTNSRWFXWm1kWE5sQ1FsU1JWOUpibVJwY21WamRFUnBabVoxYzJWZlFteHBibTVRYUc5dVp3b2paR1ZtYVc1bElFMWhkR1Z5YVdGc1gweHBaMmgwVUhKdlltVk1UMFFvSUcxaGRHVnlhV0ZzSUNrSktEQXBZQ3dnWTNBZ1BTQmdVR2g1YzJsallXeE5ZWFJsY21saGJDQnRZWFJsY21saGJEc0tiV0YwWlhKcFlXd3VaR2xtWm5WelpVTnZiRzl5SUQwZ1pHbG1ablZ6WlVOdmJHOXlMbkpuWWlBcUlDZ2dNUzR3SUMwZ2JXVjBZV3h1WlhOelJtRmpkRzl5SUNrN0NuWmxZek1nWkhoNUlEMGdiV0Y0S0NCaFluTW9JR1JHWkhnb0lHZGxiMjFsZEhKNVRtOXliV0ZzSUNrZ0tTd2dZV0p6S0NCa1JtUjVLQ0JuWlc5dFpYUnllVTV2Y20xaGJDQXBJQ2tnS1RzS1pteHZZWFFnWjJWdmJXVjBjbmxTYjNWbmFHNWxjM01nUFNCdFlYZ29JRzFoZUNnZ1pIaDVMbmdzSUdSNGVTNTVJQ2tzSUdSNGVTNTZJQ2s3Q20xaGRHVnlhV0ZzTG5KdmRXZG9ibVZ6Y3lBOUlHMWhlQ2dnY205MVoyaHVaWE56Um1GamRHOXlMQ0F3TGpBMU1qVWdLVHR0WVhSbGNtbGhiQzV5YjNWbmFHNWxjM01nS3owZ1oyVnZiV1YwY25sU2IzVm5hRzVsYzNNN0NtMWhkR1Z5YVdGc0xuSnZkV2RvYm1WemN5QTlJRzFwYmlnZ2JXRjBaWEpwWVd3dWNtOTFaMmh1WlhOekxDQXhMakFnS1RzS0kybG1aR1ZtSUVsUFVnb0pJMmxtWkdWbUlGTlFSVU5WVEVGU0Nna0pabXh2WVhRZ2MzQmxZM1ZzWVhKSmJuUmxibk5wZEhsR1lXTjBiM0lnUFNCemNHVmpkV3hoY2tsdWRHVnVjMmwwZVRzS0NRbDJaV016SUhOd1pXTjFiR0Z5UTI5c2IzSkdZV04wYjNJZ1BTQnpjR1ZqZFd4aGNrTnZiRzl5T3dvSkNTTnBabVJsWmlCVlUwVmZVMUJGUTFWTVFWSkpUbFJGVGxOSlZGbE5RVkFLQ1FrSmMzQmxZM1ZzWVhKSmJuUmxibk5wZEhsR1lXTjBiM0lnS2owZ2RHVjRkSFZ5WlRKRUtDQnpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVVMWhjQ3dnZGxWMklDa3VZVHNLQ1FralpXNWthV1lLQ1FramFXWmtaV1lnVlZORlgxTlFSVU5WVEVGU1EwOU1UMUpOUVZBS0NRa0pjM0JsWTNWc1lYSkRiMnh2Y2taaFkzUnZjaUFxUFNCemNHVmpkV3hoY2tOdmJHOXlUV0Z3VkdWNFpXeFViMHhwYm1WaGNpZ2dkR1Y0ZEhWeVpUSkVLQ0J6Y0dWamRXeGhja052Ykc5eVRXRndMQ0IyVlhZZ0tTQXBMbkpuWWpzS0NRa2paVzVrYVdZS0NRbHRZWFJsY21saGJDNXpjR1ZqZFd4aGNrWTVNQ0E5SUcxcGVDZ2djM0JsWTNWc1lYSkpiblJsYm5OcGRIbEdZV04wYjNJc0lERXVNQ3dnYldWMFlXeHVaWE56Um1GamRHOXlJQ2s3Q2dralpXeHpaUW9KQ1dac2IyRjBJSE53WldOMWJHRnlTVzUwWlc1emFYUjVSbUZqZEc5eUlEMGdNUzR3T3dvSkNYWmxZek1nYzNCbFkzVnNZWEpEYjJ4dmNrWmhZM1J2Y2lBOUlIWmxZek1vSURFdU1DQXBPd29KQ1cxaGRHVnlhV0ZzTG5Od1pXTjFiR0Z5Umprd0lEMGdNUzR3T3dvSkkyVnVaR2xtQ2dsdFlYUmxjbWxoYkM1emNHVmpkV3hoY2tOdmJHOXlJRDBnYldsNEtDQnRhVzRvSUhCdmR6SW9JQ2dnYVc5eUlDMGdNUzR3SUNrZ0x5QW9JR2x2Y2lBcklERXVNQ0FwSUNrZ0tpQnpjR1ZqZFd4aGNrTnZiRzl5Um1GamRHOXlMQ0IyWldNektDQXhMakFnS1NBcElDb2djM0JsWTNWc1lYSkpiblJsYm5OcGRIbEdZV04wYjNJc0lHUnBabVoxYzJWRGIyeHZjaTV5WjJJc0lHMWxkR0ZzYm1WemMwWmhZM1J2Y2lBcE93b2paV3h6WlFvSmJXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKRGIyeHZjaUE5SUcxcGVDZ2dkbVZqTXlnZ01DNHdOQ0FwTENCa2FXWm1kWE5sUTI5c2IzSXVjbWRpTENCdFpYUmhiRzVsYzNOR1lXTjBiM0lnS1RzS0NXMWhkR1Z5YVdGc0xuTndaV04xYkdGeVJqa3dJRDBnTVM0d093b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUUtDVzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkQ0E5SUdOc1pXRnlZMjloZERzS0NXMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemN5QTlJR05zWldGeVkyOWhkRkp2ZFdkb2JtVnpjenNLQ1cxaGRHVnlhV0ZzTG1Oc1pXRnlZMjloZEVZd0lEMGdkbVZqTXlnZ01DNHdOQ0FwT3dvSmJXRjBaWEpwWVd3dVkyeGxZWEpqYjJGMFJqa3dJRDBnTVM0d093b0pJMmxtWkdWbUlGVlRSVjlEVEVWQlVrTlBRVlJOUVZBS0NRbHRZWFJsY21saGJDNWpiR1ZoY21OdllYUWdLajBnZEdWNGRIVnlaVEpFS0NCamJHVmhjbU52WVhSTllYQXNJSFpWZGlBcExuZzdDZ2tqWlc1a2FXWUtDU05wWm1SbFppQlZVMFZmUTB4RlFWSkRUMEZVWDFKUFZVZElUa1ZUVTAxQlVBb0pDVzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjeUFxUFNCMFpYaDBkWEpsTWtRb0lHTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQ3dnZGxWMklDa3VlVHNLQ1NObGJtUnBaZ29KYldGMFpYSnBZV3d1WTJ4bFlYSmpiMkYwSUQwZ2MyRjBkWEpoZEdVb0lHMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRDQXBPd2x0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nUFNCdFlYZ29JRzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjeXdnTUM0d05USTFJQ2s3Q2dsdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNNZ0t6MGdaMlZ2YldWMGNubFNiM1ZuYUc1bGMzTTdDZ2x0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nUFNCdGFXNG9JRzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjeXdnTVM0d0lDazdDaU5sYm1ScFpnb2phV1prWldZZ1ZWTkZYMU5JUlVWT0NnbHRZWFJsY21saGJDNXphR1ZsYmtOdmJHOXlJRDBnYzJobFpXNURiMnh2Y2pzS0NTTnBabVJsWmlCVlUwVmZVMGhGUlU1RFQweFBVazFCVUFvSkNXMWhkR1Z5YVdGc0xuTm9aV1Z1UTI5c2IzSWdLajBnYzJobFpXNURiMnh2Y2sxaGNGUmxlR1ZzVkc5TWFXNWxZWElvSUhSbGVIUjFjbVV5UkNnZ2MyaGxaVzVEYjJ4dmNrMWhjQ3dnZGxWMklDa2dLUzV5WjJJN0Nna2paVzVrYVdZS0NXMWhkR1Z5YVdGc0xuTm9aV1Z1VW05MVoyaHVaWE56SUQwZ1kyeGhiWEFvSUhOb1pXVnVVbTkxWjJodVpYTnpMQ0F3TGpBM0xDQXhMakFnS1RzS0NTTnBabVJsWmlCVlUwVmZVMGhGUlU1U1QxVkhTRTVGVTFOTlFWQUtDUWx0WVhSbGNtbGhiQzV6YUdWbGJsSnZkV2RvYm1WemN5QXFQU0IwWlhoMGRYSmxNa1FvSUhOb1pXVnVVbTkxWjJodVpYTnpUV0Z3TENCMlZYWWdLUzVoT3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUdod0lEMGdZSE4wY25WamRDQlFhSGx6YVdOaGJFMWhkR1Z5YVdGc0lIc0tDWFpsWXpNZ1pHbG1ablZ6WlVOdmJHOXlPd29KWm14dllYUWdjbTkxWjJodVpYTnpPd29KZG1Wak15QnpjR1ZqZFd4aGNrTnZiRzl5T3dvSlpteHZZWFFnYzNCbFkzVnNZWEpHT1RBN0Nna2phV1prWldZZ1ZWTkZYME5NUlVGU1EwOUJWQW9KQ1dac2IyRjBJR05zWldGeVkyOWhkRHNLQ1FsbWJHOWhkQ0JqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM003Q2drSmRtVmpNeUJqYkdWaGNtTnZZWFJHTURzS0NRbG1iRzloZENCamJHVmhjbU52WVhSR09UQTdDZ2tqWlc1a2FXWUtDU05wWm1SbFppQlZVMFZmVTBoRlJVNEtDUWwyWldNeklITm9aV1Z1UTI5c2IzSTdDZ2tKWm14dllYUWdjMmhsWlc1U2IzVm5hRzVsYzNNN0Nna2paVzVrYVdZS2ZUc0tkbVZqTXlCamJHVmhjbU52WVhSVGNHVmpkV3hoY2lBOUlIWmxZek1vSURBdU1DQXBPd3AyWldNeklITm9aV1Z1VTNCbFkzVnNZWElnUFNCMlpXTXpLQ0F3TGpBZ0tUc0tabXh2WVhRZ1NVSk1VMmhsWlc1Q1VrUkdLQ0JqYjI1emRDQnBiaUIyWldNeklHNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z2RtVmpNeUIyYVdWM1JHbHlMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnliM1ZuYUc1bGMzTXBJSHNLQ1dac2IyRjBJR1J2ZEU1V0lEMGdjMkYwZFhKaGRHVW9JR1J2ZENnZ2JtOXliV0ZzTENCMmFXVjNSR2x5SUNrZ0tUc0tDV1pzYjJGMElISXlJRDBnY205MVoyaHVaWE56SUNvZ2NtOTFaMmh1WlhOek93b0pabXh2WVhRZ1lTQTlJSEp2ZFdkb2JtVnpjeUE4SURBdU1qVWdQeUF0TXpNNUxqSWdLaUJ5TWlBcklERTJNUzQwSUNvZ2NtOTFaMmh1WlhOeklDMGdNalV1T1NBNklDMDRMalE0SUNvZ2NqSWdLeUF4TkM0eklDb2djbTkxWjJodVpYTnpJQzBnT1M0NU5Uc0tDV1pzYjJGMElHSWdQU0J5YjNWbmFHNWxjM01nUENBd0xqSTFJRDhnTkRRdU1DQXFJSEl5SUMwZ01qTXVOeUFxSUhKdmRXZG9ibVZ6Y3lBcklETXVNallnT2lBeExqazNJQ29nY2pJZ0xTQXpMakkzSUNvZ2NtOTFaMmh1WlhOeklDc2dNQzQzTWpzS0NXWnNiMkYwSUVSSElEMGdaWGh3S0NCaElDb2daRzkwVGxZZ0t5QmlJQ2tnS3lBb0lISnZkV2RvYm1WemN5QThJREF1TWpVZ1B5QXdMakFnT2lBd0xqRWdLaUFvSUhKdmRXZG9ibVZ6Y3lBdElEQXVNalVnS1NBcE93b0pjbVYwZFhKdUlITmhkSFZ5WVhSbEtDQkVSeUFxSUZKRlEwbFFVazlEUVV4ZlVFa2dLVHNLZlFwMlpXTXlJRVJHUjBGd2NISnZlQ2dnWTI5dWMzUWdhVzRnZG1Wak15QnViM0p0WVd3c0lHTnZibk4wSUdsdUlIWmxZek1nZG1sbGQwUnBjaXdnWTI5dWMzUWdhVzRnWm14dllYUWdjbTkxWjJodVpYTnpJQ2tnZXdvSlpteHZZWFFnWkc5MFRsWWdQU0J6WVhSMWNtRjBaU2dnWkc5MEtDQnViM0p0WVd3c0lIWnBaWGRFYVhJZ0tTQXBPd29KWTI5dWMzUWdkbVZqTkNCak1DQTlJSFpsWXpRb0lDMGdNU3dnTFNBd0xqQXlOelVzSUMwZ01DNDFOeklzSURBdU1ESXlJQ2s3Q2dsamIyNXpkQ0IyWldNMElHTXhJRDBnZG1Wak5DZ2dNU3dnTUM0d05ESTFMQ0F4TGpBMExDQXRJREF1TURRZ0tUc0tDWFpsWXpRZ2NpQTlJSEp2ZFdkb2JtVnpjeUFxSUdNd0lDc2dZekU3Q2dsbWJHOWhkQ0JoTURBMElEMGdiV2x1S0NCeUxuZ2dLaUJ5TG5nc0lHVjRjRElvSUMwZ09TNHlPQ0FxSUdSdmRFNVdJQ2tnS1NBcUlISXVlQ0FySUhJdWVUc0tDWFpsWXpJZ1ptRmlJRDBnZG1Wak1pZ2dMU0F4TGpBMExDQXhMakEwSUNrZ0tpQmhNREEwSUNzZ2NpNTZkenNLQ1hKbGRIVnliaUJtWVdJN0NuMEtkbVZqTXlCRmJuWnBjbTl1YldWdWRFSlNSRVlvSUdOdmJuTjBJR2x1SUhabFl6TWdibTl5YldGc0xDQmpiMjV6ZENCcGJpQjJaV016SUhacFpYZEVhWElzSUdOdmJuTjBJR2x1SUhabFl6TWdjM0JsWTNWc1lYSkRiMnh2Y2l3Z1kyOXVjM1FnYVc0Z1pteHZZWFFnYzNCbFkzVnNZWEpHT1RBc0lHTnZibk4wSUdsdUlHWnNiMkYwSUhKdmRXZG9ibVZ6Y3lBcElIc0tDWFpsWXpJZ1ptRmlJRDBnUkVaSFFYQndjbTk0S0NCdWIzSnRZV3dzSUhacFpYZEVhWElzSUhKdmRXZG9ibVZ6Y3lBcE93b0pjbVYwZFhKdUlITndaV04xYkdGeVEyOXNiM0lnS2lCbVlXSXVlQ0FySUhOd1pXTjFiR0Z5Umprd0lDb2dabUZpTG5rN0NuMEtkbTlwWkNCamIyMXdkWFJsVFhWc2RHbHpZMkYwZEdWeWFXNW5LQ0JqYjI1emRDQnBiaUIyWldNeklHNXZjbTFoYkN3Z1kyOXVjM1FnYVc0Z2RtVmpNeUIyYVdWM1JHbHlMQ0JqYjI1emRDQnBiaUIyWldNeklITndaV04xYkdGeVEyOXNiM0lzSUdOdmJuTjBJR2x1SUdac2IyRjBJSE53WldOMWJHRnlSamt3TENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J5YjNWbmFHNWxjM01zSUdsdWIzVjBJSFpsWXpNZ2MybHVaMnhsVTJOaGRIUmxjaXdnYVc1dmRYUWdkbVZqTXlCdGRXeDBhVk5qWVhSMFpYSWdLU0I3Q2dsMlpXTXlJR1poWWlBOUlFUkdSMEZ3Y0hKdmVDZ2dibTl5YldGc0xDQjJhV1YzUkdseUxDQnliM1ZuYUc1bGMzTWdLVHNLQ1habFl6TWdSbk56UlhOeklEMGdjM0JsWTNWc1lYSkRiMnh2Y2lBcUlHWmhZaTU0SUNzZ2MzQmxZM1ZzWVhKR09UQWdLaUJtWVdJdWVUc0tDV1pzYjJGMElFVnpjeUE5SUdaaFlpNTRJQ3NnWm1GaUxuazdDZ2xtYkc5aGRDQkZiWE1nUFNBeExqQWdMU0JGYzNNN0NnbDJaV016SUVaaGRtY2dQU0J6Y0dWamRXeGhja052Ykc5eUlDc2dLQ0F4TGpBZ0xTQnpjR1ZqZFd4aGNrTnZiRzl5SUNrZ0tpQXdMakEwTnpZeE9Uc0pkbVZqTXlCR2JYTWdQU0JHYzNORmMzTWdLaUJHWVhabklDOGdLQ0F4TGpBZ0xTQkZiWE1nS2lCR1lYWm5JQ2s3Q2dsemFXNW5iR1ZUWTJGMGRHVnlJQ3M5SUVaemMwVnpjenNLQ1cxMWJIUnBVMk5oZEhSbGNpQXJQU0JHYlhNZ0tpQkZiWE03Q24wS0kybG1JRTVWVFY5U1JVTlVYMEZTUlVGZlRFbEhTRlJUSUQ0Z01Bb0pkbTlwWkNCU1JWOUVhWEpsWTNSZlVtVmpkRUZ5WldGZlVHaDVjMmxqWVd3b0lHTnZibk4wSUdsdUlGSmxZM1JCY21WaFRHbG5hSFFnY21WamRFRnlaV0ZNYVdkb2RDd2dZMjl1YzNRZ2FXNGdSMlZ2YldWMGNtbGpRMjl1ZEdWNGRDQm5aVzl0WlhSeWVTd2dZMjl1YzNRZ2FXNGdVR2g1YzJsallXeE5ZWFJsY21saGJDQnRZWFJsY21saGJDd2dhVzV2ZFhRZ1VtVm1iR1ZqZEdWa1RHbG5hSFFnY21WbWJHVmpkR1ZrVEdsbmFIUWdLU0I3Q2drSmRtVmpNeUJ1YjNKdFlXd2dQU0JuWlc5dFpYUnllUzV1YjNKdFlXdzdDZ2tKZG1Wak15QjJhV1YzUkdseUlEMGdaMlZ2YldWMGNua3VkbWxsZDBScGNqc0tDUWwyWldNeklIQnZjMmwwYVc5dUlEMGdaMlZ2YldWMGNua3VjRzl6YVhScGIyNDdDZ2tKZG1Wak15QnNhV2RvZEZCdmN5QTlJSEpsWTNSQmNtVmhUR2xuYUhRdWNHOXphWFJwYjI0N0Nna0pkbVZqTXlCb1lXeG1WMmxrZEdnZ1BTQnlaV04wUVhKbFlVeHBaMmgwTG1oaGJHWlhhV1IwYURzS0NRbDJaV016SUdoaGJHWklaV2xuYUhRZ1BTQnlaV04wUVhKbFlVeHBaMmgwTG1oaGJHWklaV2xuYUhRN0Nna0pkbVZqTXlCc2FXZG9kRU52Ykc5eUlEMGdjbVZqZEVGeVpXRk1hV2RvZEM1amIyeHZjanNLQ1FsbWJHOWhkQ0J5YjNWbmFHNWxjM01nUFNCdFlYUmxjbWxoYkM1eWIzVm5hRzVsYzNNN0Nna0pkbVZqTXlCeVpXTjBRMjl2Y21Seld5QTBJRjA3Q2drSmNtVmpkRU52YjNKa2Mxc2dNQ0JkSUQwZ2JHbG5hSFJRYjNNZ0t5Qm9ZV3htVjJsa2RHZ2dMU0JvWVd4bVNHVnBaMmgwT3drSmNtVmpkRU52YjNKa2Mxc2dNU0JkSUQwZ2JHbG5hSFJRYjNNZ0xTQm9ZV3htVjJsa2RHZ2dMU0JvWVd4bVNHVnBaMmgwT3dvSkNYSmxZM1JEYjI5eVpITmJJRElnWFNBOUlHeHBaMmgwVUc5eklDMGdhR0ZzWmxkcFpIUm9JQ3NnYUdGc1praGxhV2RvZERzS0NRbHlaV04wUTI5dmNtUnpXeUF6SUYwZ1BTQnNhV2RvZEZCdmN5QXJJR2hoYkdaWGFXUjBhQ0FySUdoaGJHWklaV2xuYUhRN0Nna0pkbVZqTWlCMWRpQTlJRXhVUTE5VmRpZ2dibTl5YldGc0xDQjJhV1YzUkdseUxDQnliM1ZuYUc1bGMzTWdLVHNLQ1FsMlpXTTBJSFF4SUQwZ2RHVjRkSFZ5WlRKRUtDQnNkR05mTVN3Z2RYWWdLVHNLQ1FsMlpXTTBJSFF5SUQwZ2RHVjRkSFZ5WlRKRUtDQnNkR05mTWl3Z2RYWWdLVHNLQ1FsdFlYUXpJRzFKYm5ZZ1BTQnRZWFF6S0FvSkNRbDJaV016S0NCME1TNTRMQ0F3TENCME1TNTVJQ2tzQ2drSkNYWmxZek1vSUNBZ0lEQXNJREVzSUNBZ0lEQWdLU3dLQ1FrSmRtVmpNeWdnZERFdWVpd2dNQ3dnZERFdWR5QXBDZ2tKS1RzS0NRbDJaV016SUdaeVpYTnVaV3dnUFNBb0lHMWhkR1Z5YVdGc0xuTndaV04xYkdGeVEyOXNiM0lnS2lCME1pNTRJQ3NnS0NCMlpXTXpLQ0F4TGpBZ0tTQXRJRzFoZEdWeWFXRnNMbk53WldOMWJHRnlRMjlzYjNJZ0tTQXFJSFF5TG5rZ0tUc0tDUWx5Wldac1pXTjBaV1JNYVdkb2RDNWthWEpsWTNSVGNHVmpkV3hoY2lBclBTQnNhV2RvZEVOdmJHOXlJQ29nWm5KbGMyNWxiQ0FxSUV4VVExOUZkbUZzZFdGMFpTZ2dibTl5YldGc0xDQjJhV1YzUkdseUxDQndiM05wZEdsdmJpd2diVWx1ZGl3Z2NtVmpkRU52YjNKa2N5QXBPd29KQ1hKbFpteGxZM1JsWkV4cFoyaDBMbVJwY21WamRFUnBabVoxYzJVZ0t6MGdiR2xuYUhSRGIyeHZjaUFxSUcxaGRHVnlhV0ZzTG1ScFptWjFjMlZEYjJ4dmNpQXFJRXhVUTE5RmRtRnNkV0YwWlNnZ2JtOXliV0ZzTENCMmFXVjNSR2x5TENCd2IzTnBkR2x2Yml3Z2JXRjBNeWdnTVM0d0lDa3NJSEpsWTNSRGIyOXlaSE1nS1RzS0NYMEtJMlZ1WkdsbUNuWnZhV1FnVWtWZlJHbHlaV04wWDFCb2VYTnBZMkZzS0NCamIyNXpkQ0JwYmlCSmJtTnBaR1Z1ZEV4cFoyaDBJR1JwY21WamRFeHBaMmgwTENCamIyNXpkQ0JwYmlCSFpXOXRaWFJ5YVdORGIyNTBaWGgwSUdkbGIyMWxkSEo1TENCamIyNXpkQ0JwYmlCUWFIbHphV05oYkUxaGRHVnlhV0ZzSUcxaGRHVnlhV0ZzTENCcGJtOTFkQ0JTWldac1pXTjBaV1JNYVdkb2RDQnlaV1pzWldOMFpXUk1hV2RvZENBcElIc0tDV1pzYjJGMElHUnZkRTVNSUQwZ2MyRjBkWEpoZEdVb0lHUnZkQ2dnWjJWdmJXVjBjbmt1Ym05eWJXRnNMQ0JrYVhKbFkzUk1hV2RvZEM1a2FYSmxZM1JwYjI0Z0tTQXBPd29KZG1Wak15QnBjbkpoWkdsaGJtTmxJRDBnWkc5MFRrd2dLaUJrYVhKbFkzUk1hV2RvZEM1amIyeHZjanNLQ1NOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVUNna0pabXh2WVhRZ1pHOTBUa3hqWXlBOUlITmhkSFZ5WVhSbEtDQmtiM1FvSUdkbGIyMWxkSEo1TG1Oc1pXRnlZMjloZEU1dmNtMWhiQ3dnWkdseVpXTjBUR2xuYUhRdVpHbHlaV04wYVc5dUlDa2dLVHNLQ1FsMlpXTXpJR05qU1hKeVlXUnBZVzVqWlNBOUlHUnZkRTVNWTJNZ0tpQmthWEpsWTNSTWFXZG9kQzVqYjJ4dmNqc0tDUWxqYkdWaGNtTnZZWFJUY0dWamRXeGhjaUFyUFNCalkwbHljbUZrYVdGdVkyVWdLaUJDVWtSR1gwZEhXQ2dnWkdseVpXTjBUR2xuYUhRdVpHbHlaV04wYVc5dUxDQm5aVzl0WlhSeWVTNTJhV1YzUkdseUxDQm5aVzl0WlhSeWVTNWpiR1ZoY21OdllYUk9iM0p0WVd3c0lHMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRFWXdMQ0J0WVhSbGNtbGhiQzVqYkdWaGNtTnZZWFJHT1RBc0lHMWhkR1Z5YVdGc0xtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemN5QXBPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDFOSVJVVk9DZ2tKYzJobFpXNVRjR1ZqZFd4aGNpQXJQU0JwY25KaFpHbGhibU5sSUNvZ1FsSkVSbDlUYUdWbGJpZ2daR2x5WldOMFRHbG5hSFF1WkdseVpXTjBhVzl1TENCblpXOXRaWFJ5ZVM1MmFXVjNSR2x5TENCblpXOXRaWFJ5ZVM1dWIzSnRZV3dzSUcxaGRHVnlhV0ZzTG5Ob1pXVnVRMjlzYjNJc0lHMWhkR1Z5YVdGc0xuTm9aV1Z1VW05MVoyaHVaWE56SUNrN0Nna2paVzVrYVdZS0NYSmxabXhsWTNSbFpFeHBaMmgwTG1ScGNtVmpkRk53WldOMWJHRnlJQ3M5SUdseWNtRmthV0Z1WTJVZ0tpQkNVa1JHWDBkSFdDZ2daR2x5WldOMFRHbG5hSFF1WkdseVpXTjBhVzl1TENCblpXOXRaWFJ5ZVM1MmFXVjNSR2x5TENCblpXOXRaWFJ5ZVM1dWIzSnRZV3dzSUcxaGRHVnlhV0ZzTG5Od1pXTjFiR0Z5UTI5c2IzSXNJRzFoZEdWeWFXRnNMbk53WldOMWJHRnlSamt3TENCdFlYUmxjbWxoYkM1eWIzVm5hRzVsYzNNZ0tUc0tDWEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEVScFptWjFjMlVnS3owZ2FYSnlZV1JwWVc1alpTQXFJRUpTUkVaZlRHRnRZbVZ5ZENnZ2JXRjBaWEpwWVd3dVpHbG1ablZ6WlVOdmJHOXlJQ2s3Q24wS2RtOXBaQ0JTUlY5SmJtUnBjbVZqZEVScFptWjFjMlZmVUdoNWMybGpZV3dvSUdOdmJuTjBJR2x1SUhabFl6TWdhWEp5WVdScFlXNWpaU3dnWTI5dWMzUWdhVzRnUjJWdmJXVjBjbWxqUTI5dWRHVjRkQ0JuWlc5dFpYUnllU3dnWTI5dWMzUWdhVzRnVUdoNWMybGpZV3hOWVhSbGNtbGhiQ0J0WVhSbGNtbGhiQ3dnYVc1dmRYUWdVbVZtYkdWamRHVmtUR2xuYUhRZ2NtVm1iR1ZqZEdWa1RHbG5hSFFnS1NCN0NnbHlaV1pzWldOMFpXUk1hV2RvZEM1cGJtUnBjbVZqZEVScFptWjFjMlVnS3owZ2FYSnlZV1JwWVc1alpTQXFJRUpTUkVaZlRHRnRZbVZ5ZENnZ2JXRjBaWEpwWVd3dVpHbG1ablZ6WlVOdmJHOXlJQ2s3Q24wS2RtOXBaQ0JTUlY5SmJtUnBjbVZqZEZOd1pXTjFiR0Z5WDFCb2VYTnBZMkZzS0NCamIyNXpkQ0JwYmlCMlpXTXpJSEpoWkdsaGJtTmxMQ0JqYjI1emRDQnBiaUIyWldNeklHbHljbUZrYVdGdVkyVXNJR052Ym5OMElHbHVJSFpsWXpNZ1kyeGxZWEpqYjJGMFVtRmthV0Z1WTJVc0lHTnZibk4wSUdsdUlFZGxiMjFsZEhKcFkwTnZiblJsZUhRZ1oyVnZiV1YwY25rc0lHTnZibk4wSUdsdUlGQm9lWE5wWTJGc1RXRjBaWEpwWVd3Z2JXRjBaWEpwWVd3c0lHbHViM1YwSUZKbFpteGxZM1JsWkV4cFoyaDBJSEpsWm14bFkzUmxaRXhwWjJoMEtTQjdDZ2tqYVdaa1pXWWdWVk5GWDBOTVJVRlNRMDlCVkFvSkNXTnNaV0Z5WTI5aGRGTndaV04xYkdGeUlDczlJR05zWldGeVkyOWhkRkpoWkdsaGJtTmxJQ29nUlc1MmFYSnZibTFsYm5SQ1VrUkdLQ0JuWlc5dFpYUnllUzVqYkdWaGNtTnZZWFJPYjNKdFlXd3NJR2RsYjIxbGRISjVMblpwWlhkRWFYSXNJRzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRVl3TENCdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSR09UQXNJRzFoZEdWeWFXRnNMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjeUFwT3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnVlZORlgxTklSVVZPQ2drSmMyaGxaVzVUY0dWamRXeGhjaUFyUFNCcGNuSmhaR2xoYm1ObElDb2diV0YwWlhKcFlXd3VjMmhsWlc1RGIyeHZjaUFxSUVsQ1RGTm9aV1Z1UWxKRVJpZ2daMlZ2YldWMGNua3VibTl5YldGc0xDQm5aVzl0WlhSeWVTNTJhV1YzUkdseUxDQnRZWFJsY21saGJDNXphR1ZsYmxKdmRXZG9ibVZ6Y3lBcE93b0pJMlZ1WkdsbUNnbDJaV016SUhOcGJtZHNaVk5qWVhSMFpYSnBibWNnUFNCMlpXTXpLQ0F3TGpBZ0tUc0tDWFpsWXpNZ2JYVnNkR2xUWTJGMGRHVnlhVzVuSUQwZ2RtVmpNeWdnTUM0d0lDazdDZ2wyWldNeklHTnZjMmx1WlZkbGFXZG9kR1ZrU1hKeVlXUnBZVzVqWlNBOUlHbHljbUZrYVdGdVkyVWdLaUJTUlVOSlVGSlBRMEZNWDFCSk93b0pZMjl0Y0hWMFpVMTFiSFJwYzJOaGRIUmxjbWx1WnlnZ1oyVnZiV1YwY25rdWJtOXliV0ZzTENCblpXOXRaWFJ5ZVM1MmFXVjNSR2x5TENCdFlYUmxjbWxoYkM1emNHVmpkV3hoY2tOdmJHOXlMQ0J0WVhSbGNtbGhiQzV6Y0dWamRXeGhja1k1TUN3Z2JXRjBaWEpwWVd3dWNtOTFaMmh1WlhOekxDQnphVzVuYkdWVFkyRjBkR1Z5YVc1bkxDQnRkV3gwYVZOallYUjBaWEpwYm1jZ0tUc0tDWFpsWXpNZ1pHbG1ablZ6WlNBOUlHMWhkR1Z5YVdGc0xtUnBabVoxYzJWRGIyeHZjaUFxSUNnZ01TNHdJQzBnS0NCemFXNW5iR1ZUWTJGMGRHVnlhVzVuSUNzZ2JYVnNkR2xUWTJGMGRHVnlhVzVuSUNrZ0tUc0tDWEpsWm14bFkzUmxaRXhwWjJoMExtbHVaR2x5WldOMFUzQmxZM1ZzWVhJZ0t6MGdjbUZrYVdGdVkyVWdLaUJ6YVc1bmJHVlRZMkYwZEdWeWFXNW5Pd29KY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUlRjR1ZqZFd4aGNpQXJQU0J0ZFd4MGFWTmpZWFIwWlhKcGJtY2dLaUJqYjNOcGJtVlhaV2xuYUhSbFpFbHljbUZrYVdGdVkyVTdDZ2x5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRFUnBabVoxYzJVZ0t6MGdaR2xtWm5WelpTQXFJR052YzJsdVpWZGxhV2RvZEdWa1NYSnlZV1JwWVc1alpUc0tmUW9qWkdWbWFXNWxJRkpGWDBScGNtVmpkQWtKQ1FsU1JWOUVhWEpsWTNSZlVHaDVjMmxqWVd3S0kyUmxabWx1WlNCU1JWOUVhWEpsWTNSZlVtVmpkRUZ5WldFSkNWSkZYMFJwY21WamRGOVNaV04wUVhKbFlWOVFhSGx6YVdOaGJBb2paR1ZtYVc1bElGSkZYMGx1WkdseVpXTjBSR2xtWm5WelpRa0pVa1ZmU1c1a2FYSmxZM1JFYVdabWRYTmxYMUJvZVhOcFkyRnNDaU5rWldacGJtVWdVa1ZmU1c1a2FYSmxZM1JUY0dWamRXeGhjZ2tKVWtWZlNXNWthWEpsWTNSVGNHVmpkV3hoY2w5UWFIbHphV05oYkFwbWJHOWhkQ0JqYjIxd2RYUmxVM0JsWTNWc1lYSlBZMk5zZFhOcGIyNG9JR052Ym5OMElHbHVJR1pzYjJGMElHUnZkRTVXTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0JoYldKcFpXNTBUMk5qYkhWemFXOXVMQ0JqYjI1emRDQnBiaUJtYkc5aGRDQnliM1ZuYUc1bGMzTWdLU0I3Q2dseVpYUjFjbTRnYzJGMGRYSmhkR1VvSUhCdmR5Z2daRzkwVGxZZ0t5QmhiV0pwWlc1MFQyTmpiSFZ6YVc5dUxDQmxlSEF5S0NBdElERTJMakFnS2lCeWIzVm5hRzVsYzNNZ0xTQXhMakFnS1NBcElDMGdNUzR3SUNzZ1lXMWlhV1Z1ZEU5alkyeDFjMmx2YmlBcE93cDlZQ3dnZFhBZ1BTQmdDa2RsYjIxbGRISnBZME52Ym5SbGVIUWdaMlZ2YldWMGNuazdDbWRsYjIxbGRISjVMbkJ2YzJsMGFXOXVJRDBnTFNCMlZtbGxkMUJ2YzJsMGFXOXVPd3BuWlc5dFpYUnllUzV1YjNKdFlXd2dQU0J1YjNKdFlXdzdDbWRsYjIxbGRISjVMblpwWlhkRWFYSWdQU0FvSUdselQzSjBhRzluY21Gd2FHbGpJQ2tnUHlCMlpXTXpLQ0F3TENBd0xDQXhJQ2tnT2lCdWIzSnRZV3hwZW1Vb0lIWldhV1YzVUc5emFYUnBiMjRnS1RzS0kybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUUtDV2RsYjIxbGRISjVMbU5zWldGeVkyOWhkRTV2Y20xaGJDQTlJR05zWldGeVkyOWhkRTV2Y20xaGJEc0tJMlZ1WkdsbUNrbHVZMmxrWlc1MFRHbG5hSFFnWkdseVpXTjBUR2xuYUhRN0NpTnBaaUFvSUU1VlRWOVFUMGxPVkY5TVNVZElWRk1nUGlBd0lDa2dKaVlnWkdWbWFXNWxaQ2dnVWtWZlJHbHlaV04wSUNrS0NWQnZhVzUwVEdsbmFIUWdjRzlwYm5STWFXZG9kRHNLQ1NOcFppQmtaV1pwYm1Wa0tDQlZVMFZmVTBoQlJFOVhUVUZRSUNrZ0ppWWdUbFZOWDFCUFNVNVVYMHhKUjBoVVgxTklRVVJQVjFNZ1BpQXdDZ2xRYjJsdWRFeHBaMmgwVTJoaFpHOTNJSEJ2YVc1MFRHbG5hSFJUYUdGa2IzYzdDZ2tqWlc1a2FXWUtDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmYzNSaGNuUUtDV1p2Y2lBb0lHbHVkQ0JwSUQwZ01Ec2dhU0E4SUU1VlRWOVFUMGxPVkY5TVNVZElWRk03SUdrZ0t5c2dLU0I3Q2drSmNHOXBiblJNYVdkb2RDQTlJSEJ2YVc1MFRHbG5hSFJ6V3lCcElGMDdDZ2tKWjJWMFVHOXBiblJNYVdkb2RFbHVabThvSUhCdmFXNTBUR2xuYUhRc0lHZGxiMjFsZEhKNUxDQmthWEpsWTNSTWFXZG9kQ0FwT3dvSkNTTnBaaUJrWldacGJtVmtLQ0JWVTBWZlUwaEJSRTlYVFVGUUlDa2dKaVlnS0NCVlRsSlBURXhGUkY5TVQwOVFYMGxPUkVWWUlEd2dUbFZOWDFCUFNVNVVYMHhKUjBoVVgxTklRVVJQVjFNZ0tRb0pDWEJ2YVc1MFRHbG5hSFJUYUdGa2IzY2dQU0J3YjJsdWRFeHBaMmgwVTJoaFpHOTNjMXNnYVNCZE93b0pDV1JwY21WamRFeHBaMmgwTG1OdmJHOXlJQ285SUdGc2JDZ2dZblpsWXpJb0lHUnBjbVZqZEV4cFoyaDBMblpwYzJsaWJHVXNJSEpsWTJWcGRtVlRhR0ZrYjNjZ0tTQXBJRDhnWjJWMFVHOXBiblJUYUdGa2IzY29JSEJ2YVc1MFUyaGhaRzkzVFdGd1d5QnBJRjBzSUhCdmFXNTBUR2xuYUhSVGFHRmtiM2N1YzJoaFpHOTNUV0Z3VTJsNlpTd2djRzlwYm5STWFXZG9kRk5vWVdSdmR5NXphR0ZrYjNkQ2FXRnpMQ0J3YjJsdWRFeHBaMmgwVTJoaFpHOTNMbk5vWVdSdmQxSmhaR2wxY3l3Z2RsQnZhVzUwVTJoaFpHOTNRMjl2Y21SYklHa2dYU3dnY0c5cGJuUk1hV2RvZEZOb1lXUnZkeTV6YUdGa2IzZERZVzFsY21GT1pXRnlMQ0J3YjJsdWRFeHBaMmgwVTJoaFpHOTNMbk5vWVdSdmQwTmhiV1Z5WVVaaGNpQXBJRG9nTVM0d093b0pDU05sYm1ScFpnb0pDVkpGWDBScGNtVmpkQ2dnWkdseVpXTjBUR2xuYUhRc0lHZGxiMjFsZEhKNUxDQnRZWFJsY21saGJDd2djbVZtYkdWamRHVmtUR2xuYUhRZ0tUc0tDWDBLQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZlpXNWtDaU5sYm1ScFpnb2phV1lnS0NCT1ZVMWZVMUJQVkY5TVNVZElWRk1nUGlBd0lDa2dKaVlnWkdWbWFXNWxaQ2dnVWtWZlJHbHlaV04wSUNrS0NWTndiM1JNYVdkb2RDQnpjRzkwVEdsbmFIUTdDZ2tqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMU5JUVVSUFYwMUJVQ0FwSUNZbUlFNVZUVjlUVUU5VVgweEpSMGhVWDFOSVFVUlBWMU1nUGlBd0NnbFRjRzkwVEdsbmFIUlRhR0ZrYjNjZ2MzQnZkRXhwWjJoMFUyaGhaRzkzT3dvSkkyVnVaR2xtQ2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gzTjBZWEowQ2dsbWIzSWdLQ0JwYm5RZ2FTQTlJREE3SUdrZ1BDQk9WVTFmVTFCUFZGOU1TVWRJVkZNN0lHa2dLeXNnS1NCN0Nna0pjM0J2ZEV4cFoyaDBJRDBnYzNCdmRFeHBaMmgwYzFzZ2FTQmRPd29KQ1dkbGRGTndiM1JNYVdkb2RFbHVabThvSUhOd2IzUk1hV2RvZEN3Z1oyVnZiV1YwY25rc0lHUnBjbVZqZEV4cFoyaDBJQ2s3Q2drSkkybG1JR1JsWm1sdVpXUW9JRlZUUlY5VFNFRkVUMWROUVZBZ0tTQW1KaUFvSUZWT1VrOU1URVZFWDB4UFQxQmZTVTVFUlZnZ1BDQk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUNrS0NRbHpjRzkwVEdsbmFIUlRhR0ZrYjNjZ1BTQnpjRzkwVEdsbmFIUlRhR0ZrYjNkeld5QnBJRjA3Q2drSlpHbHlaV04wVEdsbmFIUXVZMjlzYjNJZ0tqMGdZV3hzS0NCaWRtVmpNaWdnWkdseVpXTjBUR2xuYUhRdWRtbHphV0pzWlN3Z2NtVmpaV2wyWlZOb1lXUnZkeUFwSUNrZ1B5Qm5aWFJUYUdGa2IzY29JSE53YjNSVGFHRmtiM2ROWVhCYklHa2dYU3dnYzNCdmRFeHBaMmgwVTJoaFpHOTNMbk5vWVdSdmQwMWhjRk5wZW1Vc0lITndiM1JNYVdkb2RGTm9ZV1J2ZHk1emFHRmtiM2RDYVdGekxDQnpjRzkwVEdsbmFIUlRhR0ZrYjNjdWMyaGhaRzkzVW1Ga2FYVnpMQ0IyVTNCdmRGTm9ZV1J2ZDBOdmIzSmtXeUJwSUYwZ0tTQTZJREV1TURzS0NRa2paVzVrYVdZS0NRbFNSVjlFYVhKbFkzUW9JR1JwY21WamRFeHBaMmgwTENCblpXOXRaWFJ5ZVN3Z2JXRjBaWEpwWVd3c0lISmxabXhsWTNSbFpFeHBaMmgwSUNrN0NnbDlDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDJWdVpBb2paVzVrYVdZS0kybG1JQ2dnVGxWTlgwUkpVbDlNU1VkSVZGTWdQaUF3SUNrZ0ppWWdaR1ZtYVc1bFpDZ2dVa1ZmUkdseVpXTjBJQ2tLQ1VScGNtVmpkR2x2Ym1Gc1RHbG5hSFFnWkdseVpXTjBhVzl1WVd4TWFXZG9kRHNLQ1NOcFppQmtaV1pwYm1Wa0tDQlZVMFZmVTBoQlJFOVhUVUZRSUNrZ0ppWWdUbFZOWDBSSlVsOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pSR2x5WldOMGFXOXVZV3hNYVdkb2RGTm9ZV1J2ZHlCa2FYSmxZM1JwYjI1aGJFeHBaMmgwVTJoaFpHOTNPd29KSTJWdVpHbG1DZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2xtYjNJZ0tDQnBiblFnYVNBOUlEQTdJR2tnUENCT1ZVMWZSRWxTWDB4SlIwaFVVenNnYVNBckt5QXBJSHNLQ1Fsa2FYSmxZM1JwYjI1aGJFeHBaMmgwSUQwZ1pHbHlaV04wYVc5dVlXeE1hV2RvZEhOYklHa2dYVHNLQ1FsblpYUkVhWEpsWTNScGIyNWhiRXhwWjJoMFNXNW1ieWdnWkdseVpXTjBhVzl1WVd4TWFXZG9kQ3dnWjJWdmJXVjBjbmtzSUdScGNtVmpkRXhwWjJoMElDazdDZ2tKSTJsbUlHUmxabWx1WldRb0lGVlRSVjlUU0VGRVQxZE5RVkFnS1NBbUppQW9JRlZPVWs5TVRFVkVYMHhQVDFCZlNVNUVSVmdnUENCT1ZVMWZSRWxTWDB4SlIwaFVYMU5JUVVSUFYxTWdLUW9KQ1dScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzY2dQU0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBVMmhoWkc5M2Mxc2dhU0JkT3dvSkNXUnBjbVZqZEV4cFoyaDBMbU52Ykc5eUlDbzlJR0ZzYkNnZ1luWmxZeklvSUdScGNtVmpkRXhwWjJoMExuWnBjMmxpYkdVc0lISmxZMlZwZG1WVGFHRmtiM2NnS1NBcElEOGdaMlYwVTJoaFpHOTNLQ0JrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoY0ZzZ2FTQmRMQ0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBVMmhoWkc5M0xuTm9ZV1J2ZDAxaGNGTnBlbVVzSUdScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzY3VjMmhoWkc5M1FtbGhjeXdnWkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmR5NXphR0ZrYjNkU1lXUnBkWE1zSUhaRWFYSmxZM1JwYjI1aGJGTm9ZV1J2ZDBOdmIzSmtXeUJwSUYwZ0tTQTZJREV1TURzS0NRa2paVzVrYVdZS0NRbFNSVjlFYVhKbFkzUW9JR1JwY21WamRFeHBaMmgwTENCblpXOXRaWFJ5ZVN3Z2JXRjBaWEpwWVd3c0lISmxabXhsWTNSbFpFeHBaMmgwSUNrN0NnbDlDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDJWdVpBb2paVzVrYVdZS0kybG1JQ2dnVGxWTlgxSkZRMVJmUVZKRlFWOU1TVWRJVkZNZ1BpQXdJQ2tnSmlZZ1pHVm1hVzVsWkNnZ1VrVmZSR2x5WldOMFgxSmxZM1JCY21WaElDa0tDVkpsWTNSQmNtVmhUR2xuYUhRZ2NtVmpkRUZ5WldGTWFXZG9kRHNLQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZmMzUmhjblFLQ1dadmNpQW9JR2x1ZENCcElEMGdNRHNnYVNBOElFNVZUVjlTUlVOVVgwRlNSVUZmVEVsSFNGUlRPeUJwSUNzcklDa2dld29KQ1hKbFkzUkJjbVZoVEdsbmFIUWdQU0J5WldOMFFYSmxZVXhwWjJoMGMxc2dhU0JkT3dvSkNWSkZYMFJwY21WamRGOVNaV04wUVhKbFlTZ2djbVZqZEVGeVpXRk1hV2RvZEN3Z1oyVnZiV1YwY25rc0lHMWhkR1Z5YVdGc0xDQnlaV1pzWldOMFpXUk1hV2RvZENBcE93b0pmUW9KSTNCeVlXZHRZU0IxYm5KdmJHeGZiRzl2Y0Y5bGJtUUtJMlZ1WkdsbUNpTnBaaUJrWldacGJtVmtLQ0JTUlY5SmJtUnBjbVZqZEVScFptWjFjMlVnS1FvSmRtVmpNeUJwWW14SmNuSmhaR2xoYm1ObElEMGdkbVZqTXlnZ01DNHdJQ2s3Q2dsMlpXTXpJR2x5Y21Ga2FXRnVZMlVnUFNCblpYUkJiV0pwWlc1MFRHbG5hSFJKY25KaFpHbGhibU5sS0NCaGJXSnBaVzUwVEdsbmFIUkRiMnh2Y2lBcE93b0phWEp5WVdScFlXNWpaU0FyUFNCblpYUk1hV2RvZEZCeWIySmxTWEp5WVdScFlXNWpaU2dnYkdsbmFIUlFjbTlpWlN3Z1oyVnZiV1YwY25rdWJtOXliV0ZzSUNrN0Nna2phV1lnS0NCT1ZVMWZTRVZOU1Y5TVNVZElWRk1nUGlBd0lDa0tDUWtqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2tKWm05eUlDZ2dhVzUwSUdrZ1BTQXdPeUJwSUR3Z1RsVk5YMGhGVFVsZlRFbEhTRlJUT3lCcElDc3JJQ2tnZXdvSkNRbHBjbkpoWkdsaGJtTmxJQ3M5SUdkbGRFaGxiV2x6Y0dobGNtVk1hV2RvZEVseWNtRmthV0Z1WTJVb0lHaGxiV2x6Y0dobGNtVk1hV2RvZEhOYklHa2dYU3dnWjJWdmJXVjBjbmt1Ym05eWJXRnNJQ2s3Q2drSmZRb0pDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmWlc1a0Nna2paVzVrYVdZS0kyVnVaR2xtQ2lOcFppQmtaV1pwYm1Wa0tDQlNSVjlKYm1ScGNtVmpkRk53WldOMWJHRnlJQ2tLQ1habFl6TWdjbUZrYVdGdVkyVWdQU0IyWldNektDQXdMakFnS1RzS0NYWmxZek1nWTJ4bFlYSmpiMkYwVW1Ga2FXRnVZMlVnUFNCMlpXTXpLQ0F3TGpBZ0tUc0tJMlZ1WkdsbVlDd2daSEFnUFNCZ0kybG1JR1JsWm1sdVpXUW9JRkpGWDBsdVpHbHlaV04wUkdsbVpuVnpaU0FwQ2dramFXWmtaV1lnVlZORlgweEpSMGhVVFVGUUNna0pkbVZqTkNCc2FXZG9kRTFoY0ZSbGVHVnNJRDBnZEdWNGRIVnlaVEpFS0NCc2FXZG9kRTFoY0N3Z2RsVjJNaUFwT3dvSkNYWmxZek1nYkdsbmFIUk5ZWEJKY25KaFpHbGhibU5sSUQwZ2JHbG5hSFJOWVhCVVpYaGxiRlJ2VEdsdVpXRnlLQ0JzYVdkb2RFMWhjRlJsZUdWc0lDa3VjbWRpSUNvZ2JHbG5hSFJOWVhCSmJuUmxibk5wZEhrN0Nna0pJMmxtYm1SbFppQlFTRmxUU1VOQlRFeFpYME5QVWxKRlExUmZURWxIU0ZSVENna0pDV3hwWjJoMFRXRndTWEp5WVdScFlXNWpaU0FxUFNCUVNUc0tDUWtqWlc1a2FXWUtDUWxwY25KaFpHbGhibU5sSUNzOUlHeHBaMmgwVFdGd1NYSnlZV1JwWVc1alpUc0tDU05sYm1ScFpnb0pJMmxtSUdSbFptbHVaV1FvSUZWVFJWOUZUbFpOUVZBZ0tTQW1KaUJrWldacGJtVmtLQ0JUVkVGT1JFRlNSQ0FwSUNZbUlHUmxabWx1WldRb0lFVk9WazFCVUY5VVdWQkZYME5WUWtWZlZWWWdLUW9KQ1dsaWJFbHljbUZrYVdGdVkyVWdLejBnWjJWMFNVSk1TWEp5WVdScFlXNWpaU2dnWjJWdmJXVjBjbmt1Ym05eWJXRnNJQ2s3Q2dralpXNWthV1lLSTJWdVpHbG1DaU5wWmlCa1pXWnBibVZrS0NCVlUwVmZSVTVXVFVGUUlDa2dKaVlnWkdWbWFXNWxaQ2dnVWtWZlNXNWthWEpsWTNSVGNHVmpkV3hoY2lBcENnbHlZV1JwWVc1alpTQXJQU0JuWlhSSlFreFNZV1JwWVc1alpTZ2daMlZ2YldWMGNua3VkbWxsZDBScGNpd2daMlZ2YldWMGNua3VibTl5YldGc0xDQnRZWFJsY21saGJDNXliM1ZuYUc1bGMzTWdLVHNLQ1NOcFptUmxaaUJWVTBWZlEweEZRVkpEVDBGVUNna0pZMnhsWVhKamIyRjBVbUZrYVdGdVkyVWdLejBnWjJWMFNVSk1VbUZrYVdGdVkyVW9JR2RsYjIxbGRISjVMblpwWlhkRWFYSXNJR2RsYjIxbGRISjVMbU5zWldGeVkyOWhkRTV2Y20xaGJDd2diV0YwWlhKcFlXd3VZMnhsWVhKamIyRjBVbTkxWjJodVpYTnpJQ2s3Q2dralpXNWthV1lLSTJWdVpHbG1ZQ3dnWm5BZ1BTQmdJMmxtSUdSbFptbHVaV1FvSUZKRlgwbHVaR2x5WldOMFJHbG1ablZ6WlNBcENnbFNSVjlKYm1ScGNtVmpkRVJwWm1aMWMyVW9JR2x5Y21Ga2FXRnVZMlVzSUdkbGIyMWxkSEo1TENCdFlYUmxjbWxoYkN3Z2NtVm1iR1ZqZEdWa1RHbG5hSFFnS1RzS0kyVnVaR2xtQ2lOcFppQmtaV1pwYm1Wa0tDQlNSVjlKYm1ScGNtVmpkRk53WldOMWJHRnlJQ2tLQ1ZKRlgwbHVaR2x5WldOMFUzQmxZM1ZzWVhJb0lISmhaR2xoYm1ObExDQnBZbXhKY25KaFpHbGhibU5sTENCamJHVmhjbU52WVhSU1lXUnBZVzVqWlN3Z1oyVnZiV1YwY25rc0lHMWhkR1Z5YVdGc0xDQnlaV1pzWldOMFpXUk1hV2RvZENBcE93b2paVzVrYVdaZ0xDQndjQ0E5SUdBamFXWWdaR1ZtYVc1bFpDZ2dWVk5GWDB4UFIwUkZVRlJJUWxWR0lDa2dKaVlnWkdWbWFXNWxaQ2dnVlZORlgweFBSMFJGVUZSSVFsVkdYMFZZVkNBcENnbG5iRjlHY21GblJHVndkR2hGV0ZRZ1BTQjJTWE5RWlhKemNHVmpkR2wyWlNBOVBTQXdMakFnUHlCbmJGOUdjbUZuUTI5dmNtUXVlaUE2SUd4dlp6SW9JSFpHY21GblJHVndkR2dnS1NBcUlHeHZaMFJsY0hSb1FuVm1Sa01nS2lBd0xqVTdDaU5sYm1ScFptQXNJRzF3SUQwZ1lDTnBaaUJrWldacGJtVmtLQ0JWVTBWZlRFOUhSRVZRVkVoQ1ZVWWdLU0FtSmlCa1pXWnBibVZrS0NCVlUwVmZURTlIUkVWUVZFaENWVVpmUlZoVUlDa0tDWFZ1YVdadmNtMGdabXh2WVhRZ2JHOW5SR1Z3ZEdoQ2RXWkdRenNLQ1haaGNubHBibWNnWm14dllYUWdka1p5WVdkRVpYQjBhRHNLQ1haaGNubHBibWNnWm14dllYUWdka2x6VUdWeWMzQmxZM1JwZG1VN0NpTmxibVJwWm1Bc0lHZHdJRDBnWUNOcFptUmxaaUJWVTBWZlRFOUhSRVZRVkVoQ1ZVWUtDU05wWm1SbFppQlZVMFZmVEU5SFJFVlFWRWhDVlVaZlJWaFVDZ2tKZG1GeWVXbHVaeUJtYkc5aGRDQjJSbkpoWjBSbGNIUm9Pd29KQ1haaGNubHBibWNnWm14dllYUWdka2x6VUdWeWMzQmxZM1JwZG1VN0Nna2paV3h6WlFvSkNYVnVhV1p2Y20wZ1pteHZZWFFnYkc5blJHVndkR2hDZFdaR1F6c0tDU05sYm1ScFpnb2paVzVrYVdaZ0xDQjRjQ0E5SUdBamFXWmtaV1lnVlZORlgweFBSMFJGVUZSSVFsVkdDZ2tqYVdaa1pXWWdWVk5GWDB4UFIwUkZVRlJJUWxWR1gwVllWQW9KQ1haR2NtRm5SR1Z3ZEdnZ1BTQXhMakFnS3lCbmJGOVFiM05wZEdsdmJpNTNPd29KQ1haSmMxQmxjbk53WldOMGFYWmxJRDBnWm14dllYUW9JR2x6VUdWeWMzQmxZM1JwZG1WTllYUnlhWGdvSUhCeWIycGxZM1JwYjI1TllYUnlhWGdnS1NBcE93b0pJMlZzYzJVS0NRbHBaaUFvSUdselVHVnljM0JsWTNScGRtVk5ZWFJ5YVhnb0lIQnliMnBsWTNScGIyNU5ZWFJ5YVhnZ0tTQXBJSHNLQ1FrSloyeGZVRzl6YVhScGIyNHVlaUE5SUd4dlp6SW9JRzFoZUNnZ1JWQlRTVXhQVGl3Z1oyeGZVRzl6YVhScGIyNHVkeUFySURFdU1DQXBJQ2tnS2lCc2IyZEVaWEIwYUVKMVprWkRJQzBnTVM0d093b0pDUWxuYkY5UWIzTnBkR2x2Ymk1NklDbzlJR2RzWDFCdmMybDBhVzl1TG5jN0Nna0pmUW9KSTJWdVpHbG1DaU5sYm1ScFptQXNJSGx3SUQwZ1lDTnBabVJsWmlCVlUwVmZUVUZRQ2dsMlpXTTBJSFJsZUdWc1EyOXNiM0lnUFNCMFpYaDBkWEpsTWtRb0lHMWhjQ3dnZGxWMklDazdDZ2wwWlhobGJFTnZiRzl5SUQwZ2JXRndWR1Y0Wld4VWIweHBibVZoY2lnZ2RHVjRaV3hEYjJ4dmNpQXBPd29KWkdsbVpuVnpaVU52Ykc5eUlDbzlJSFJsZUdWc1EyOXNiM0k3Q2lObGJtUnBabUFzSUhad0lEMGdZQ05wWm1SbFppQlZVMFZmVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQnRZWEE3Q2lObGJtUnBabUFzSUY5d0lEMGdZQ05wWmlCa1pXWnBibVZrS0NCVlUwVmZUVUZRSUNrZ2ZId2daR1ZtYVc1bFpDZ2dWVk5GWDBGTVVFaEJUVUZRSUNrS0NYWmxZeklnZFhZZ1BTQW9JSFYyVkhKaGJuTm1iM0p0SUNvZ2RtVmpNeWdnWjJ4ZlVHOXBiblJEYjI5eVpDNTRMQ0F4TGpBZ0xTQm5iRjlRYjJsdWRFTnZiM0prTG5rc0lERWdLU0FwTG5oNU93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOU5RVkFLQ1habFl6UWdiV0Z3VkdWNFpXd2dQU0IwWlhoMGRYSmxNa1FvSUcxaGNDd2dkWFlnS1RzS0NXUnBabVoxYzJWRGIyeHZjaUFxUFNCdFlYQlVaWGhsYkZSdlRHbHVaV0Z5S0NCdFlYQlVaWGhsYkNBcE93b2paVzVrYVdZS0kybG1aR1ZtSUZWVFJWOUJURkJJUVUxQlVBb0paR2xtWm5WelpVTnZiRzl5TG1FZ0tqMGdkR1Y0ZEhWeVpUSkVLQ0JoYkhCb1lVMWhjQ3dnZFhZZ0tTNW5Pd29qWlc1a2FXWmdMQ0JOY0NBOUlHQWphV1lnWkdWbWFXNWxaQ2dnVlZORlgwMUJVQ0FwSUh4OElHUmxabWx1WldRb0lGVlRSVjlCVEZCSVFVMUJVQ0FwQ2dsMWJtbG1iM0p0SUcxaGRETWdkWFpVY21GdWMyWnZjbTA3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDAxQlVBb0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdiV0Z3T3dvalpXNWthV1lLSTJsbVpHVm1JRlZUUlY5QlRGQklRVTFCVUFvSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1lXeHdhR0ZOWVhBN0NpTmxibVJwWm1Bc0lHSndJRDBnWUdac2IyRjBJRzFsZEdGc2JtVnpjMFpoWTNSdmNpQTlJRzFsZEdGc2JtVnpjenNLSTJsbVpHVm1JRlZUUlY5TlJWUkJURTVGVTFOTlFWQUtDWFpsWXpRZ2RHVjRaV3hOWlhSaGJHNWxjM01nUFNCMFpYaDBkWEpsTWtRb0lHMWxkR0ZzYm1WemMwMWhjQ3dnZGxWMklDazdDZ2x0WlhSaGJHNWxjM05HWVdOMGIzSWdLajBnZEdWNFpXeE5aWFJoYkc1bGMzTXVZanNLSTJWdVpHbG1ZQ3dnZDNBZ1BTQmdJMmxtWkdWbUlGVlRSVjlOUlZSQlRFNUZVMU5OUVZBS0NYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlHMWxkR0ZzYm1WemMwMWhjRHNLSTJWdVpHbG1ZQ3dnVTNBZ1BTQmdJMmxtWkdWbUlGVlRSVjlOVDFKUVNFNVBVazFCVEZNS0NXOWlhbVZqZEU1dmNtMWhiQ0FxUFNCdGIzSndhRlJoY21kbGRFSmhjMlZKYm1ac2RXVnVZMlU3Q2dramFXWmtaV1lnVFU5U1VFaFVRVkpIUlZSVFgxUkZXRlJWVWtVS0NRbG1iM0lnS0NCcGJuUWdhU0E5SURBN0lHa2dQQ0JOVDFKUVNGUkJVa2RGVkZOZlEwOVZUbFE3SUdrZ0t5c2dLU0I3Q2drSkNXbG1JQ2dnYlc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeld5QnBJRjBnUGlBd0xqQWdLU0J2WW1wbFkzUk9iM0p0WVd3Z0t6MGdaMlYwVFc5eWNHZ29JR2RzWDFabGNuUmxlRWxFTENCcExDQXhMQ0F5SUNrZ0tpQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSUdrZ1hUc0tDUWw5Q2dralpXeHpaUW9KQ1c5aWFtVmpkRTV2Y20xaGJDQXJQU0J0YjNKd2FFNXZjbTFoYkRBZ0tpQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSURBZ1hUc0tDUWx2WW1wbFkzUk9iM0p0WVd3Z0t6MGdiVzl5Y0doT2IzSnRZV3d4SUNvZ2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpXeUF4SUYwN0Nna0piMkpxWldOMFRtOXliV0ZzSUNzOUlHMXZjbkJvVG05eWJXRnNNaUFxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dNaUJkT3dvSkNXOWlhbVZqZEU1dmNtMWhiQ0FyUFNCdGIzSndhRTV2Y20xaGJETWdLaUJ0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhOYklETWdYVHNLQ1NObGJtUnBaZ29qWlc1a2FXWmdMQ0JVY0NBOUlHQWphV1prWldZZ1ZWTkZYMDFQVWxCSVZFRlNSMFZVVXdvSmRXNXBabTl5YlNCbWJHOWhkQ0J0YjNKd2FGUmhjbWRsZEVKaGMyVkpibVpzZFdWdVkyVTdDZ2tqYVdaa1pXWWdUVTlTVUVoVVFWSkhSVlJUWDFSRldGUlZVa1VLQ1FsMWJtbG1iM0p0SUdac2IyRjBJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ1RVOVNVRWhVUVZKSFJWUlRYME5QVlU1VUlGMDdDZ2tKZFc1cFptOXliU0J6WVcxd2JHVnlNa1JCY25KaGVTQnRiM0p3YUZSaGNtZGxkSE5VWlhoMGRYSmxPd29KQ1hWdWFXWnZjbTBnZG1Wak1pQnRiM0p3YUZSaGNtZGxkSE5VWlhoMGRYSmxVMmw2WlRzS0NRbDJaV016SUdkbGRFMXZjbkJvS0NCamIyNXpkQ0JwYmlCcGJuUWdkbVZ5ZEdWNFNXNWtaWGdzSUdOdmJuTjBJR2x1SUdsdWRDQnRiM0p3YUZSaGNtZGxkRWx1WkdWNExDQmpiMjV6ZENCcGJpQnBiblFnYjJabWMyVjBMQ0JqYjI1emRDQnBiaUJwYm5RZ2MzUnlhV1JsSUNrZ2V3b0pDUWxtYkc5aGRDQjBaWGhsYkVsdVpHVjRJRDBnWm14dllYUW9JSFpsY25SbGVFbHVaR1Y0SUNvZ2MzUnlhV1JsSUNzZ2IyWm1jMlYwSUNrN0Nna0pDV1pzYjJGMElIa2dQU0JtYkc5dmNpZ2dkR1Y0Wld4SmJtUmxlQ0F2SUcxdmNuQm9WR0Z5WjJWMGMxUmxlSFIxY21WVGFYcGxMbmdnS1RzS0NRa0pabXh2WVhRZ2VDQTlJSFJsZUdWc1NXNWtaWGdnTFNCNUlDb2diVzl5Y0doVVlYSm5aWFJ6VkdWNGRIVnlaVk5wZW1VdWVEc0tDUWtKZG1Wak15QnRiM0p3YUZWV0lEMGdkbVZqTXlnZ0tDQjRJQ3NnTUM0MUlDa2dMeUJ0YjNKd2FGUmhjbWRsZEhOVVpYaDBkWEpsVTJsNlpTNTRMQ0I1SUM4Z2JXOXljR2hVWVhKblpYUnpWR1Y0ZEhWeVpWTnBlbVV1ZVN3Z2JXOXljR2hVWVhKblpYUkpibVJsZUNBcE93b0pDUWx5WlhSMWNtNGdkR1Y0ZEhWeVpTZ2diVzl5Y0doVVlYSm5aWFJ6VkdWNGRIVnlaU3dnYlc5eWNHaFZWaUFwTG5oNWVqc0tDUWw5Q2dralpXeHpaUW9KQ1NOcFptNWtaV1lnVlZORlgwMVBVbEJJVGs5U1RVRk1Vd29KQ1FsMWJtbG1iM0p0SUdac2IyRjBJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ09DQmRPd29KQ1NObGJITmxDZ2tKQ1hWdWFXWnZjbTBnWm14dllYUWdiVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6V3lBMElGMDdDZ2tKSTJWdVpHbG1DZ2tqWlc1a2FXWUtJMlZ1WkdsbVlDd2dSWEFnUFNCZ0kybG1aR1ZtSUZWVFJWOU5UMUpRU0ZSQlVrZEZWRk1LQ1hSeVlXNXpabTl5YldWa0lDbzlJRzF2Y25Cb1ZHRnlaMlYwUW1GelpVbHVabXgxWlc1alpUc0tDU05wWm1SbFppQk5UMUpRU0ZSQlVrZEZWRk5mVkVWWVZGVlNSUW9KQ1dadmNpQW9JR2x1ZENCcElEMGdNRHNnYVNBOElFMVBVbEJJVkVGU1IwVlVVMTlEVDFWT1ZEc2dhU0FyS3lBcElIc0tDUWtKSTJsbWJtUmxaaUJWVTBWZlRVOVNVRWhPVDFKTlFVeFRDZ2tKQ1FscFppQW9JRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ2FTQmRJRDRnTUM0d0lDa2dkSEpoYm5ObWIzSnRaV1FnS3owZ1oyVjBUVzl5Y0dnb0lHZHNYMVpsY25SbGVFbEVMQ0JwTENBd0xDQXhJQ2tnS2lCdGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTmJJR2tnWFRzS0NRa0pJMlZzYzJVS0NRa0pDV2xtSUNnZ2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpXeUJwSUYwZ1BpQXdMakFnS1NCMGNtRnVjMlp2Y20xbFpDQXJQU0JuWlhSTmIzSndhQ2dnWjJ4ZlZtVnlkR1Y0U1VRc0lHa3NJREFzSURJZ0tTQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ2FTQmRPd29KQ1FralpXNWthV1lLQ1FsOUNna2paV3h6WlFvSkNYUnlZVzV6Wm05eWJXVmtJQ3M5SUcxdmNuQm9WR0Z5WjJWME1DQXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ01DQmRPd29KQ1hSeVlXNXpabTl5YldWa0lDczlJRzF2Y25Cb1ZHRnlaMlYwTVNBcUlHMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjMXNnTVNCZE93b0pDWFJ5WVc1elptOXliV1ZrSUNzOUlHMXZjbkJvVkdGeVoyVjBNaUFxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dNaUJkT3dvSkNYUnlZVzV6Wm05eWJXVmtJQ3M5SUcxdmNuQm9WR0Z5WjJWME15QXFJRzF2Y25Cb1ZHRnlaMlYwU1c1bWJIVmxibU5sYzFzZ015QmRPd29KQ1NOcFptNWtaV1lnVlZORlgwMVBVbEJJVGs5U1RVRk1Vd29KQ1FsMGNtRnVjMlp2Y20xbFpDQXJQU0J0YjNKd2FGUmhjbWRsZERRZ0tpQnRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE5iSURRZ1hUc0tDUWtKZEhKaGJuTm1iM0p0WldRZ0t6MGdiVzl5Y0doVVlYSm5aWFExSUNvZ2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpXeUExSUYwN0Nna0pDWFJ5WVc1elptOXliV1ZrSUNzOUlHMXZjbkJvVkdGeVoyVjBOaUFxSUcxdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2dOaUJkT3dvSkNRbDBjbUZ1YzJadmNtMWxaQ0FyUFNCdGIzSndhRlJoY21kbGREY2dLaUJ0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhOYklEY2dYVHNLQ1FralpXNWthV1lLQ1NObGJtUnBaZ29qWlc1a2FXWmdMQ0JCY0NBOUlHQm1iRzloZENCbVlXTmxSR2x5WldOMGFXOXVJRDBnWjJ4ZlJuSnZiblJHWVdOcGJtY2dQeUF4TGpBZ09pQXRJREV1TURzS0kybG1aR1ZtSUVaTVFWUmZVMGhCUkVWRUNnbDJaV016SUdaa2VDQTlJSFpsWXpNb0lHUkdaSGdvSUhaV2FXVjNVRzl6YVhScGIyNHVlQ0FwTENCa1JtUjRLQ0IyVm1sbGQxQnZjMmwwYVc5dUxua2dLU3dnWkVaa2VDZ2dkbFpwWlhkUWIzTnBkR2x2Ymk1NklDa2dLVHNLQ1habFl6TWdabVI1SUQwZ2RtVmpNeWdnWkVaa2VTZ2dkbFpwWlhkUWIzTnBkR2x2Ymk1NElDa3NJR1JHWkhrb0lIWldhV1YzVUc5emFYUnBiMjR1ZVNBcExDQmtSbVI1S0NCMlZtbGxkMUJ2YzJsMGFXOXVMbm9nS1NBcE93b0pkbVZqTXlCdWIzSnRZV3dnUFNCdWIzSnRZV3hwZW1Vb0lHTnliM056S0NCbVpIZ3NJR1prZVNBcElDazdDaU5sYkhObENnbDJaV016SUc1dmNtMWhiQ0E5SUc1dmNtMWhiR2w2WlNnZ2RrNXZjbTFoYkNBcE93b0pJMmxtWkdWbUlFUlBWVUpNUlY5VFNVUkZSQW9KQ1c1dmNtMWhiQ0E5SUc1dmNtMWhiQ0FxSUdaaFkyVkVhWEpsWTNScGIyNDdDZ2tqWlc1a2FXWUtDU05wWm1SbFppQlZVMFZmVkVGT1IwVk9WQW9KQ1habFl6TWdkR0Z1WjJWdWRDQTlJRzV2Y20xaGJHbDZaU2dnZGxSaGJtZGxiblFnS1RzS0NRbDJaV016SUdKcGRHRnVaMlZ1ZENBOUlHNXZjbTFoYkdsNlpTZ2dka0pwZEdGdVoyVnVkQ0FwT3dvSkNTTnBabVJsWmlCRVQxVkNURVZmVTBsRVJVUUtDUWtKZEdGdVoyVnVkQ0E5SUhSaGJtZGxiblFnS2lCbVlXTmxSR2x5WldOMGFXOXVPd29KQ1FsaWFYUmhibWRsYm5RZ1BTQmlhWFJoYm1kbGJuUWdLaUJtWVdObFJHbHlaV04wYVc5dU93b0pDU05sYm1ScFpnb0pDU05wWmlCa1pXWnBibVZrS0NCVVFVNUhSVTVVVTFCQlEwVmZUazlTVFVGTVRVRlFJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYME5NUlVGU1EwOUJWRjlPVDFKTlFVeE5RVkFnS1FvSkNRbHRZWFF6SUhaVVFrNGdQU0J0WVhRektDQjBZVzVuWlc1MExDQmlhWFJoYm1kbGJuUXNJRzV2Y20xaGJDQXBPd29KQ1NObGJtUnBaZ29KSTJWdVpHbG1DaU5sYm1ScFpncDJaV016SUdkbGIyMWxkSEo1VG05eWJXRnNJRDBnYm05eWJXRnNPMkFzSUVOd0lEMGdZQ05wWm1SbFppQlBRa3BGUTFSVFVFRkRSVjlPVDFKTlFVeE5RVkFLQ1c1dmNtMWhiQ0E5SUhSbGVIUjFjbVV5UkNnZ2JtOXliV0ZzVFdGd0xDQjJWWFlnS1M1NGVYb2dLaUF5TGpBZ0xTQXhMakE3Q2dramFXWmtaV1lnUmt4SlVGOVRTVVJGUkFvSkNXNXZjbTFoYkNBOUlDMGdibTl5YldGc093b0pJMlZ1WkdsbUNna2phV1prWldZZ1JFOVZRa3hGWDFOSlJFVkVDZ2tKYm05eWJXRnNJRDBnYm05eWJXRnNJQ29nWm1GalpVUnBjbVZqZEdsdmJqc0tDU05sYm1ScFpnb0pibTl5YldGc0lEMGdibTl5YldGc2FYcGxLQ0J1YjNKdFlXeE5ZWFJ5YVhnZ0tpQnViM0p0WVd3Z0tUc0tJMlZzYVdZZ1pHVm1hVzVsWkNnZ1ZFRk9SMFZPVkZOUVFVTkZYMDVQVWsxQlRFMUJVQ0FwQ2dsMlpXTXpJRzFoY0U0Z1BTQjBaWGgwZFhKbE1rUW9JRzV2Y20xaGJFMWhjQ3dnZGxWMklDa3VlSGw2SUNvZ01pNHdJQzBnTVM0d093b0piV0Z3VGk1NGVTQXFQU0J1YjNKdFlXeFRZMkZzWlRzS0NTTnBabVJsWmlCVlUwVmZWRUZPUjBWT1ZBb0pDVzV2Y20xaGJDQTlJRzV2Y20xaGJHbDZaU2dnZGxSQ1RpQXFJRzFoY0U0Z0tUc0tDU05sYkhObENna0pibTl5YldGc0lEMGdjR1Z5ZEhWeVlrNXZjbTFoYkRKQmNtSW9JQzBnZGxacFpYZFFiM05wZEdsdmJpd2dibTl5YldGc0xDQnRZWEJPTENCbVlXTmxSR2x5WldOMGFXOXVJQ2s3Q2dralpXNWthV1lLSTJWc2FXWWdaR1ZtYVc1bFpDZ2dWVk5GWDBKVlRWQk5RVkFnS1FvSmJtOXliV0ZzSUQwZ2NHVnlkSFZ5WWs1dmNtMWhiRUZ5WWlnZ0xTQjJWbWxsZDFCdmMybDBhVzl1TENCdWIzSnRZV3dzSUdSSVpIaDVYMlozWkNncExDQm1ZV05sUkdseVpXTjBhVzl1SUNrN0NpTmxibVJwWm1Bc0lFeHdJRDBnWUNOcFptNWtaV1lnUmt4QlZGOVRTRUZFUlVRS0NYWmhjbmxwYm1jZ2RtVmpNeUIyVG05eWJXRnNPd29KSTJsbVpHVm1JRlZUUlY5VVFVNUhSVTVVQ2drSmRtRnllV2x1WnlCMlpXTXpJSFpVWVc1blpXNTBPd29KQ1haaGNubHBibWNnZG1Wak15QjJRbWwwWVc1blpXNTBPd29KSTJWdVpHbG1DaU5sYm1ScFptQXNJRkp3SUQwZ1lDTnBabTVrWldZZ1JreEJWRjlUU0VGRVJVUUtDWFpoY25scGJtY2dkbVZqTXlCMlRtOXliV0ZzT3dvSkkybG1aR1ZtSUZWVFJWOVVRVTVIUlU1VUNna0pkbUZ5ZVdsdVp5QjJaV016SUhaVVlXNW5aVzUwT3dvSkNYWmhjbmxwYm1jZ2RtVmpNeUIyUW1sMFlXNW5aVzUwT3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUZCd0lEMGdZQ05wWm01a1pXWWdSa3hCVkY5VFNFRkVSVVFLQ1haT2IzSnRZV3dnUFNCdWIzSnRZV3hwZW1Vb0lIUnlZVzV6Wm05eWJXVmtUbTl5YldGc0lDazdDZ2tqYVdaa1pXWWdWVk5GWDFSQlRrZEZUbFFLQ1FsMlZHRnVaMlZ1ZENBOUlHNXZjbTFoYkdsNlpTZ2dkSEpoYm5ObWIzSnRaV1JVWVc1blpXNTBJQ2s3Q2drSmRrSnBkR0Z1WjJWdWRDQTlJRzV2Y20xaGJHbDZaU2dnWTNKdmMzTW9JSFpPYjNKdFlXd3NJSFpVWVc1blpXNTBJQ2tnS2lCMFlXNW5aVzUwTG5jZ0tUc0tDU05sYm1ScFpnb2paVzVrYVdaZ0xDQkpjQ0E5SUdBamFXWmtaV1lnVlZORlgwNVBVazFCVEUxQlVBb0pkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdibTl5YldGc1RXRndPd29KZFc1cFptOXliU0IyWldNeUlHNXZjbTFoYkZOallXeGxPd29qWlc1a2FXWUtJMmxtWkdWbUlFOUNTa1ZEVkZOUVFVTkZYMDVQVWsxQlRFMUJVQW9KZFc1cFptOXliU0J0WVhReklHNXZjbTFoYkUxaGRISnBlRHNLSTJWdVpHbG1DaU5wWmlBaElHUmxabWx1WldRZ0tDQlZVMFZmVkVGT1IwVk9WQ0FwSUNZbUlDZ2daR1ZtYVc1bFpDQW9JRlJCVGtkRlRsUlRVRUZEUlY5T1QxSk5RVXhOUVZBZ0tTQjhmQ0JrWldacGJtVmtJQ2dnVlZORlgwTk1SVUZTUTA5QlZGOU9UMUpOUVV4TlFWQWdLU0FwQ2dsMlpXTXpJSEJsY25SMWNtSk9iM0p0WVd3eVFYSmlLQ0IyWldNeklHVjVaVjl3YjNNc0lIWmxZek1nYzNWeVpsOXViM0p0TENCMlpXTXpJRzFoY0U0c0lHWnNiMkYwSUdaaFkyVkVhWEpsWTNScGIyNGdLU0I3Q2drSmRtVmpNeUJ4TUNBOUlIWmxZek1vSUdSR1pIZ29JR1Y1WlY5d2IzTXVlQ0FwTENCa1JtUjRLQ0JsZVdWZmNHOXpMbmtnS1N3Z1pFWmtlQ2dnWlhsbFgzQnZjeTU2SUNrZ0tUc0tDUWwyWldNeklIRXhJRDBnZG1Wak15Z2daRVprZVNnZ1pYbGxYM0J2Y3k1NElDa3NJR1JHWkhrb0lHVjVaVjl3YjNNdWVTQXBMQ0JrUm1SNUtDQmxlV1ZmY0c5ekxub2dLU0FwT3dvSkNYWmxZeklnYzNRd0lEMGdaRVprZUNnZ2RsVjJMbk4wSUNrN0Nna0pkbVZqTWlCemRERWdQU0JrUm1SNUtDQjJWWFl1YzNRZ0tUc0tDUWwyWldNeklFNGdQU0J6ZFhKbVgyNXZjbTA3Q2drSmRtVmpNeUJ4TVhCbGNuQWdQU0JqY205emN5Z2djVEVzSUU0Z0tUc0tDUWwyWldNeklIRXdjR1Z5Y0NBOUlHTnliM056S0NCT0xDQnhNQ0FwT3dvSkNYWmxZek1nVkNBOUlIRXhjR1Z5Y0NBcUlITjBNQzU0SUNzZ2NUQndaWEp3SUNvZ2MzUXhMbmc3Q2drSmRtVmpNeUJDSUQwZ2NURndaWEp3SUNvZ2MzUXdMbmtnS3lCeE1IQmxjbkFnS2lCemRERXVlVHNLQ1FsbWJHOWhkQ0JrWlhRZ1BTQnRZWGdvSUdSdmRDZ2dWQ3dnVkNBcExDQmtiM1FvSUVJc0lFSWdLU0FwT3dvSkNXWnNiMkYwSUhOallXeGxJRDBnS0NCa1pYUWdQVDBnTUM0d0lDa2dQeUF3TGpBZ09pQm1ZV05sUkdseVpXTjBhVzl1SUNvZ2FXNTJaWEp6WlhOeGNuUW9JR1JsZENBcE93b0pDWEpsZEhWeWJpQnViM0p0WVd4cGVtVW9JRlFnS2lBb0lHMWhjRTR1ZUNBcUlITmpZV3hsSUNrZ0t5QkNJQ29nS0NCdFlYQk9MbmtnS2lCelkyRnNaU0FwSUNzZ1RpQXFJRzFoY0U0dWVpQXBPd29KZlFvalpXNWthV1pnTENCRWNDQTlJR0FqYVdaa1pXWWdWVk5GWDBOTVJVRlNRMDlCVkFvSmRtVmpNeUJqYkdWaGNtTnZZWFJPYjNKdFlXd2dQU0JuWlc5dFpYUnllVTV2Y20xaGJEc0tJMlZ1WkdsbVlDd2dSbkFnUFNCZ0kybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUmZUazlTVFVGTVRVRlFDZ2wyWldNeklHTnNaV0Z5WTI5aGRFMWhjRTRnUFNCMFpYaDBkWEpsTWtRb0lHTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDd2dkbFYySUNrdWVIbDZJQ29nTWk0d0lDMGdNUzR3T3dvSlkyeGxZWEpqYjJGMFRXRndUaTU0ZVNBcVBTQmpiR1ZoY21OdllYUk9iM0p0WVd4VFkyRnNaVHNLQ1NOcFptUmxaaUJWVTBWZlZFRk9SMFZPVkFvSkNXTnNaV0Z5WTI5aGRFNXZjbTFoYkNBOUlHNXZjbTFoYkdsNlpTZ2dkbFJDVGlBcUlHTnNaV0Z5WTI5aGRFMWhjRTRnS1RzS0NTTmxiSE5sQ2drSlkyeGxZWEpqYjJGMFRtOXliV0ZzSUQwZ2NHVnlkSFZ5WWs1dmNtMWhiREpCY21Jb0lDMGdkbFpwWlhkUWIzTnBkR2x2Yml3Z1kyeGxZWEpqYjJGMFRtOXliV0ZzTENCamJHVmhjbU52WVhSTllYQk9MQ0JtWVdObFJHbHlaV04wYVc5dUlDazdDZ2tqWlc1a2FXWUtJMlZ1WkdsbVlDd2dUbkFnUFNCZ0kybG1aR1ZtSUZWVFJWOURURVZCVWtOUFFWUk5RVkFLQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUdOc1pXRnlZMjloZEUxaGNEc0tJMlZ1WkdsbUNpTnBabVJsWmlCVlUwVmZRMHhGUVZKRFQwRlVYMUpQVlVkSVRrVlRVMDFCVUFvSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1kyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndPd29qWlc1a2FXWUtJMmxtWkdWbUlGVlRSVjlEVEVWQlVrTlBRVlJmVGs5U1RVRk1UVUZRQ2dsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCamJHVmhjbU52WVhST2IzSnRZV3hOWVhBN0NnbDFibWxtYjNKdElIWmxZeklnWTJ4bFlYSmpiMkYwVG05eWJXRnNVMk5oYkdVN0NpTmxibVJwWm1Bc0lFSndJRDBnWUNOcFptUmxaaUJQVUVGUlZVVUtaR2xtWm5WelpVTnZiRzl5TG1FZ1BTQXhMakE3Q2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDFSU1FVNVRUVWxUVTBsUFRncGthV1ptZFhObFEyOXNiM0l1WVNBcVBTQjBjbUZ1YzIxcGMzTnBiMjVCYkhCb1lTQXJJREF1TVRzS0kyVnVaR2xtQ21kc1gwWnlZV2REYjJ4dmNpQTlJSFpsWXpRb0lHOTFkR2R2YVc1blRHbG5hSFFzSUdScFptWjFjMlZEYjJ4dmNpNWhJQ2s3WUN3Z2VuQWdQU0JnZG1Wak15QndZV05yVG05eWJXRnNWRzlTUjBJb0lHTnZibk4wSUdsdUlIWmxZek1nYm05eWJXRnNJQ2tnZXdvSmNtVjBkWEp1SUc1dmNtMWhiR2w2WlNnZ2JtOXliV0ZzSUNrZ0tpQXdMalVnS3lBd0xqVTdDbjBLZG1Wak15QjFibkJoWTJ0U1IwSlViMDV2Y20xaGJDZ2dZMjl1YzNRZ2FXNGdkbVZqTXlCeVoySWdLU0I3Q2dseVpYUjFjbTRnTWk0d0lDb2djbWRpTG5oNWVpQXRJREV1TURzS2ZRcGpiMjV6ZENCbWJHOWhkQ0JRWVdOclZYQnpZMkZzWlNBOUlESTFOaTRnTHlBeU5UVXVPMk52Ym5OMElHWnNiMkYwSUZWdWNHRmphMFJ2ZDI1elkyRnNaU0E5SURJMU5TNGdMeUF5TlRZdU93cGpiMjV6ZENCMlpXTXpJRkJoWTJ0R1lXTjBiM0p6SUQwZ2RtVmpNeWdnTWpVMkxpQXFJREkxTmk0Z0tpQXlOVFl1TENBeU5UWXVJQ29nTWpVMkxpd2dNalUyTGlBcE93cGpiMjV6ZENCMlpXTTBJRlZ1Y0dGamEwWmhZM1J2Y25NZ1BTQlZibkJoWTJ0RWIzZHVjMk5oYkdVZ0x5QjJaV00wS0NCUVlXTnJSbUZqZEc5eWN5d2dNUzRnS1RzS1kyOXVjM1FnWm14dllYUWdVMmhwWm5SU2FXZG9kRGdnUFNBeExpQXZJREkxTmk0N0NuWmxZelFnY0dGamEwUmxjSFJvVkc5U1IwSkJLQ0JqYjI1emRDQnBiaUJtYkc5aGRDQjJJQ2tnZXdvSmRtVmpOQ0J5SUQwZ2RtVmpOQ2dnWm5KaFkzUW9JSFlnS2lCUVlXTnJSbUZqZEc5eWN5QXBMQ0IySUNrN0NnbHlMbmw2ZHlBdFBTQnlMbmg1ZWlBcUlGTm9hV1owVW1sbmFIUTRPd2x5WlhSMWNtNGdjaUFxSUZCaFkydFZjSE5qWVd4bE93cDlDbVpzYjJGMElIVnVjR0ZqYTFKSFFrRlViMFJsY0hSb0tDQmpiMjV6ZENCcGJpQjJaV00wSUhZZ0tTQjdDZ2x5WlhSMWNtNGdaRzkwS0NCMkxDQlZibkJoWTJ0R1lXTjBiM0p6SUNrN0NuMEtkbVZqTkNCd1lXTnJNa2hoYkdaVWIxSkhRa0VvSUhabFl6SWdkaUFwSUhzS0NYWmxZelFnY2lBOUlIWmxZelFvSUhZdWVDd2dabkpoWTNRb0lIWXVlQ0FxSURJMU5TNHdJQ2tzSUhZdWVTd2dabkpoWTNRb0lIWXVlU0FxSURJMU5TNHdJQ2tnS1RzS0NYSmxkSFZ5YmlCMlpXTTBLQ0J5TG5nZ0xTQnlMbmtnTHlBeU5UVXVNQ3dnY2k1NUxDQnlMbm9nTFNCeUxuY2dMeUF5TlRVdU1Dd2djaTUzSUNrN0NuMEtkbVZqTWlCMWJuQmhZMnRTUjBKQlZHOHlTR0ZzWmlnZ2RtVmpOQ0IySUNrZ2V3b0pjbVYwZFhKdUlIWmxZeklvSUhZdWVDQXJJQ2dnZGk1NUlDOGdNalUxTGpBZ0tTd2dkaTU2SUNzZ0tDQjJMbmNnTHlBeU5UVXVNQ0FwSUNrN0NuMEtabXh2WVhRZ2RtbGxkMXBVYjA5eWRHaHZaM0poY0docFkwUmxjSFJvS0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0IyYVdWM1dpd2dZMjl1YzNRZ2FXNGdabXh2WVhRZ2JtVmhjaXdnWTI5dWMzUWdhVzRnWm14dllYUWdabUZ5SUNrZ2V3b0pjbVYwZFhKdUlDZ2dkbWxsZDFvZ0t5QnVaV0Z5SUNrZ0x5QW9JRzVsWVhJZ0xTQm1ZWElnS1RzS2ZRcG1iRzloZENCdmNuUm9iMmR5WVhCb2FXTkVaWEIwYUZSdlZtbGxkMW9vSUdOdmJuTjBJR2x1SUdac2IyRjBJR3hwYm1WaGNrTnNhWEJhTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J1WldGeUxDQmpiMjV6ZENCcGJpQm1iRzloZENCbVlYSWdLU0I3Q2dseVpYUjFjbTRnYkdsdVpXRnlRMnhwY0ZvZ0tpQW9JRzVsWVhJZ0xTQm1ZWElnS1NBdElHNWxZWEk3Q24wS1pteHZZWFFnZG1sbGQxcFViMUJsY25Od1pXTjBhWFpsUkdWd2RHZ29JR052Ym5OMElHbHVJR1pzYjJGMElIWnBaWGRhTENCamIyNXpkQ0JwYmlCbWJHOWhkQ0J1WldGeUxDQmpiMjV6ZENCcGJpQm1iRzloZENCbVlYSWdLU0I3Q2dseVpYUjFjbTRnS0NBb0lHNWxZWElnS3lCMmFXVjNXaUFwSUNvZ1ptRnlJQ2tnTHlBb0lDZ2dabUZ5SUMwZ2JtVmhjaUFwSUNvZ2RtbGxkMW9nS1RzS2ZRcG1iRzloZENCd1pYSnpjR1ZqZEdsMlpVUmxjSFJvVkc5V2FXVjNXaWdnWTI5dWMzUWdhVzRnWm14dllYUWdhVzUyUTJ4cGNGb3NJR052Ym5OMElHbHVJR1pzYjJGMElHNWxZWElzSUdOdmJuTjBJR2x1SUdac2IyRjBJR1poY2lBcElIc0tDWEpsZEhWeWJpQW9JRzVsWVhJZ0tpQm1ZWElnS1NBdklDZ2dLQ0JtWVhJZ0xTQnVaV0Z5SUNrZ0tpQnBiblpEYkdsd1dpQXRJR1poY2lBcE93cDlZQ3dnVlhBZ1BTQmdJMmxtWkdWbUlGQlNSVTFWVEZSSlVFeEpSVVJmUVV4UVNFRUtDV2RzWDBaeVlXZERiMnh2Y2k1eVoySWdLajBnWjJ4ZlJuSmhaME52Ykc5eUxtRTdDaU5sYm1ScFptQXNJRTl3SUQwZ1lIWmxZelFnYlhaUWIzTnBkR2x2YmlBOUlIWmxZelFvSUhSeVlXNXpabTl5YldWa0xDQXhMakFnS1RzS0kybG1aR1ZtSUZWVFJWOUpUbE5VUVU1RFNVNUhDZ2x0ZGxCdmMybDBhVzl1SUQwZ2FXNXpkR0Z1WTJWTllYUnlhWGdnS2lCdGRsQnZjMmwwYVc5dU93b2paVzVrYVdZS2JYWlFiM05wZEdsdmJpQTlJRzF2WkdWc1ZtbGxkMDFoZEhKcGVDQXFJRzEyVUc5emFYUnBiMjQ3Q21kc1gxQnZjMmwwYVc5dUlEMGdjSEp2YW1WamRHbHZiazFoZEhKcGVDQXFJRzEyVUc5emFYUnBiMjQ3WUN3Z1NIQWdQU0JnSTJsbVpHVm1JRVJKVkVoRlVrbE9Sd29KWjJ4ZlJuSmhaME52Ykc5eUxuSm5ZaUE5SUdScGRHaGxjbWx1WnlnZ1oyeGZSbkpoWjBOdmJHOXlMbkpuWWlBcE93b2paVzVrYVdaZ0xDQnJjQ0E5SUdBamFXWmtaV1lnUkVsVVNFVlNTVTVIQ2dsMlpXTXpJR1JwZEdobGNtbHVaeWdnZG1Wak15QmpiMnh2Y2lBcElIc0tDUWxtYkc5aGRDQm5jbWxrWDNCdmMybDBhVzl1SUQwZ2NtRnVaQ2dnWjJ4ZlJuSmhaME52YjNKa0xuaDVJQ2s3Q2drSmRtVmpNeUJrYVhSb1pYSmZjMmhwWm5SZlVrZENJRDBnZG1Wak15Z2dNQzR5TlNBdklESTFOUzR3TENBdE1DNHlOU0F2SURJMU5TNHdMQ0F3TGpJMUlDOGdNalUxTGpBZ0tUc0tDUWxrYVhSb1pYSmZjMmhwWm5SZlVrZENJRDBnYldsNEtDQXlMakFnS2lCa2FYUm9aWEpmYzJocFpuUmZVa2RDTENBdE1pNHdJQ29nWkdsMGFHVnlYM05vYVdaMFgxSkhRaXdnWjNKcFpGOXdiM05wZEdsdmJpQXBPd29KQ1hKbGRIVnliaUJqYjJ4dmNpQXJJR1JwZEdobGNsOXphR2xtZEY5U1IwSTdDZ2w5Q2lObGJtUnBabUFzSUVkd0lEMGdZR1pzYjJGMElISnZkV2RvYm1WemMwWmhZM1J2Y2lBOUlISnZkV2RvYm1WemN6c0tJMmxtWkdWbUlGVlRSVjlTVDFWSFNFNUZVMU5OUVZBS0NYWmxZelFnZEdWNFpXeFNiM1ZuYUc1bGMzTWdQU0IwWlhoMGRYSmxNa1FvSUhKdmRXZG9ibVZ6YzAxaGNDd2dkbFYySUNrN0NnbHliM1ZuYUc1bGMzTkdZV04wYjNJZ0tqMGdkR1Y0Wld4U2IzVm5hRzVsYzNNdVp6c0tJMlZ1WkdsbVlDd2dWbkFnUFNCZ0kybG1aR1ZtSUZWVFJWOVNUMVZIU0U1RlUxTk5RVkFLQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhKdmRXZG9ibVZ6YzAxaGNEc0tJMlZ1WkdsbVlDd2dWM0FnUFNCZ0kybG1aR1ZtSUZWVFJWOVRTRUZFVDFkTlFWQUtDU05wWmlCT1ZVMWZSRWxTWDB4SlIwaFVYMU5JUVVSUFYxTWdQaUF3Q2drSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1pHbHlaV04wYVc5dVlXeFRhR0ZrYjNkTllYQmJJRTVWVFY5RVNWSmZURWxIU0ZSZlUwaEJSRTlYVXlCZE93b0pDWFpoY25scGJtY2dkbVZqTkNCMlJHbHlaV04wYVc5dVlXeFRhR0ZrYjNkRGIyOXlaRnNnVGxWTlgwUkpVbDlNU1VkSVZGOVRTRUZFVDFkVElGMDdDZ2tKYzNSeWRXTjBJRVJwY21WamRHbHZibUZzVEdsbmFIUlRhR0ZrYjNjZ2V3b0pDUWxtYkc5aGRDQnphR0ZrYjNkQ2FXRnpPd29KQ1FsbWJHOWhkQ0J6YUdGa2IzZE9iM0p0WVd4Q2FXRnpPd29KQ1FsbWJHOWhkQ0J6YUdGa2IzZFNZV1JwZFhNN0Nna0pDWFpsWXpJZ2MyaGhaRzkzVFdGd1UybDZaVHNLQ1FsOU93b0pDWFZ1YVdadmNtMGdSR2x5WldOMGFXOXVZV3hNYVdkb2RGTm9ZV1J2ZHlCa2FYSmxZM1JwYjI1aGJFeHBaMmgwVTJoaFpHOTNjMXNnVGxWTlgwUkpVbDlNU1VkSVZGOVRTRUZFVDFkVElGMDdDZ2tqWlc1a2FXWUtDU05wWmlCT1ZVMWZVMUJQVkY5TVNVZElWRjlUU0VGRVQxZFRJRDRnTUFvSkNYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlITndiM1JUYUdGa2IzZE5ZWEJiSUU1VlRWOVRVRTlVWDB4SlIwaFVYMU5JUVVSUFYxTWdYVHNLQ1FsMllYSjVhVzVuSUhabFl6UWdkbE53YjNSVGFHRmtiM2REYjI5eVpGc2dUbFZOWDFOUVQxUmZURWxIU0ZSZlUwaEJSRTlYVXlCZE93b0pDWE4wY25WamRDQlRjRzkwVEdsbmFIUlRhR0ZrYjNjZ2V3b0pDUWxtYkc5aGRDQnphR0ZrYjNkQ2FXRnpPd29KQ1FsbWJHOWhkQ0J6YUdGa2IzZE9iM0p0WVd4Q2FXRnpPd29KQ1FsbWJHOWhkQ0J6YUdGa2IzZFNZV1JwZFhNN0Nna0pDWFpsWXpJZ2MyaGhaRzkzVFdGd1UybDZaVHNLQ1FsOU93b0pDWFZ1YVdadmNtMGdVM0J2ZEV4cFoyaDBVMmhoWkc5M0lITndiM1JNYVdkb2RGTm9ZV1J2ZDNOYklFNVZUVjlUVUU5VVgweEpSMGhVWDFOSVFVUlBWMU1nWFRzS0NTTmxibVJwWmdvSkkybG1JRTVWVFY5UVQwbE9WRjlNU1VkSVZGOVRTRUZFVDFkVElENGdNQW9KQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhCdmFXNTBVMmhoWkc5M1RXRndXeUJPVlUxZlVFOUpUbFJmVEVsSFNGUmZVMGhCUkU5WFV5QmRPd29KQ1haaGNubHBibWNnZG1Wak5DQjJVRzlwYm5SVGFHRmtiM2REYjI5eVpGc2dUbFZOWDFCUFNVNVVYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDUWx6ZEhKMVkzUWdVRzlwYm5STWFXZG9kRk5vWVdSdmR5QjdDZ2tKQ1dac2IyRjBJSE5vWVdSdmQwSnBZWE03Q2drSkNXWnNiMkYwSUhOb1lXUnZkMDV2Y20xaGJFSnBZWE03Q2drSkNXWnNiMkYwSUhOb1lXUnZkMUpoWkdsMWN6c0tDUWtKZG1Wak1pQnphR0ZrYjNkTllYQlRhWHBsT3dvSkNRbG1iRzloZENCemFHRmtiM2REWVcxbGNtRk9aV0Z5T3dvSkNRbG1iRzloZENCemFHRmtiM2REWVcxbGNtRkdZWEk3Q2drSmZUc0tDUWwxYm1sbWIzSnRJRkJ2YVc1MFRHbG5hSFJUYUdGa2IzY2djRzlwYm5STWFXZG9kRk5vWVdSdmQzTmJJRTVWVFY5UVQwbE9WRjlNU1VkSVZGOVRTRUZFVDFkVElGMDdDZ2tqWlc1a2FXWUtDV1pzYjJGMElIUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITmhiWEJzWlhJeVJDQmtaWEIwYUhNc0lIWmxZeklnZFhZc0lHWnNiMkYwSUdOdmJYQmhjbVVnS1NCN0Nna0pjbVYwZFhKdUlITjBaWEFvSUdOdmJYQmhjbVVzSUhWdWNHRmphMUpIUWtGVWIwUmxjSFJvS0NCMFpYaDBkWEpsTWtRb0lHUmxjSFJvY3l3Z2RYWWdLU0FwSUNrN0NnbDlDZ2wyWldNeUlIUmxlSFIxY21VeVJFUnBjM1J5YVdKMWRHbHZiaWdnYzJGdGNHeGxjakpFSUhOb1lXUnZkeXdnZG1Wak1pQjFkaUFwSUhzS0NRbHlaWFIxY200Z2RXNXdZV05yVWtkQ1FWUnZNa2hoYkdZb0lIUmxlSFIxY21VeVJDZ2djMmhoWkc5M0xDQjFkaUFwSUNrN0NnbDlDZ2xtYkc5aGRDQldVMDFUYUdGa2IzY2dLSE5oYlhCc1pYSXlSQ0J6YUdGa2IzY3NJSFpsWXpJZ2RYWXNJR1pzYjJGMElHTnZiWEJoY21VZ0tYc0tDUWxtYkc5aGRDQnZZMk5zZFhOcGIyNGdQU0F4TGpBN0Nna0pkbVZqTWlCa2FYTjBjbWxpZFhScGIyNGdQU0IwWlhoMGRYSmxNa1JFYVhOMGNtbGlkWFJwYjI0b0lITm9ZV1J2ZHl3Z2RYWWdLVHNLQ1FsbWJHOWhkQ0JvWVhKa1gzTm9ZV1J2ZHlBOUlITjBaWEFvSUdOdmJYQmhjbVVnTENCa2FYTjBjbWxpZFhScGIyNHVlQ0FwT3dvSkNXbG1JQ2hvWVhKa1gzTm9ZV1J2ZHlBaFBTQXhMakFnS1NCN0Nna0pDV1pzYjJGMElHUnBjM1JoYm1ObElEMGdZMjl0Y0dGeVpTQXRJR1JwYzNSeWFXSjFkR2x2Ymk1NElEc0tDUWtKWm14dllYUWdkbUZ5YVdGdVkyVWdQU0J0WVhnb0lEQXVNREF3TURBc0lHUnBjM1J5YVdKMWRHbHZiaTU1SUNvZ1pHbHpkSEpwWW5WMGFXOXVMbmtnS1RzS0NRa0pabXh2WVhRZ2MyOW1kRzVsYzNOZmNISnZZbUZpYVd4cGRIa2dQU0IyWVhKcFlXNWpaU0F2SUNoMllYSnBZVzVqWlNBcklHUnBjM1JoYm1ObElDb2daR2x6ZEdGdVkyVWdLVHNKQ1FsemIyWjBibVZ6YzE5d2NtOWlZV0pwYkdsMGVTQTlJR05zWVcxd0tDQW9JSE52Wm5SdVpYTnpYM0J5YjJKaFltbHNhWFI1SUMwZ01DNHpJQ2tnTHlBb0lEQXVPVFVnTFNBd0xqTWdLU3dnTUM0d0xDQXhMakFnS1RzSkNRbHZZMk5zZFhOcGIyNGdQU0JqYkdGdGNDZ2diV0Y0S0NCb1lYSmtYM05vWVdSdmR5d2djMjltZEc1bGMzTmZjSEp2WW1GaWFXeHBkSGtnS1N3Z01DNHdMQ0F4TGpBZ0tUc0tDUWw5Q2drSmNtVjBkWEp1SUc5alkyeDFjMmx2YmpzS0NYMEtDV1pzYjJGMElHZGxkRk5vWVdSdmR5Z2djMkZ0Y0d4bGNqSkVJSE5vWVdSdmQwMWhjQ3dnZG1Wak1pQnphR0ZrYjNkTllYQlRhWHBsTENCbWJHOWhkQ0J6YUdGa2IzZENhV0Z6TENCbWJHOWhkQ0J6YUdGa2IzZFNZV1JwZFhNc0lIWmxZelFnYzJoaFpHOTNRMjl2Y21RZ0tTQjdDZ2tKWm14dllYUWdjMmhoWkc5M0lEMGdNUzR3T3dvSkNYTm9ZV1J2ZDBOdmIzSmtMbmg1ZWlBdlBTQnphR0ZrYjNkRGIyOXlaQzUzT3dvSkNYTm9ZV1J2ZDBOdmIzSmtMbm9nS3owZ2MyaGhaRzkzUW1saGN6c0tDUWxpZG1Wak5DQnBia1p5ZFhOMGRXMVdaV01nUFNCaWRtVmpOQ0FvSUhOb1lXUnZkME52YjNKa0xuZ2dQajBnTUM0d0xDQnphR0ZrYjNkRGIyOXlaQzU0SUR3OUlERXVNQ3dnYzJoaFpHOTNRMjl2Y21RdWVTQStQU0F3TGpBc0lITm9ZV1J2ZDBOdmIzSmtMbmtnUEQwZ01TNHdJQ2s3Q2drSlltOXZiQ0JwYmtaeWRYTjBkVzBnUFNCaGJHd29JR2x1Um5KMWMzUjFiVlpsWXlBcE93b0pDV0oyWldNeUlHWnlkWE4wZFcxVVpYTjBWbVZqSUQwZ1luWmxZeklvSUdsdVJuSjFjM1IxYlN3Z2MyaGhaRzkzUTI5dmNtUXVlaUE4UFNBeExqQWdLVHNLQ1FsaWIyOXNJR1p5ZFhOMGRXMVVaWE4wSUQwZ1lXeHNLQ0JtY25WemRIVnRWR1Z6ZEZabFl5QXBPd29KQ1dsbUlDZ2dabkoxYzNSMWJWUmxjM1FnS1NCN0Nna0pJMmxtSUdSbFptbHVaV1FvSUZOSVFVUlBWMDFCVUY5VVdWQkZYMUJEUmlBcENna0pDWFpsWXpJZ2RHVjRaV3hUYVhwbElEMGdkbVZqTWlnZ01TNHdJQ2tnTHlCemFHRmtiM2ROWVhCVGFYcGxPd29KQ1FsbWJHOWhkQ0JrZURBZ1BTQXRJSFJsZUdWc1UybDZaUzU0SUNvZ2MyaGhaRzkzVW1Ga2FYVnpPd29KQ1FsbWJHOWhkQ0JrZVRBZ1BTQXRJSFJsZUdWc1UybDZaUzU1SUNvZ2MyaGhaRzkzVW1Ga2FYVnpPd29KQ1FsbWJHOWhkQ0JrZURFZ1BTQXJJSFJsZUdWc1UybDZaUzU0SUNvZ2MyaGhaRzkzVW1Ga2FYVnpPd29KQ1FsbWJHOWhkQ0JrZVRFZ1BTQXJJSFJsZUdWc1UybDZaUzU1SUNvZ2MyaGhaRzkzVW1Ga2FYVnpPd29KQ1FsbWJHOWhkQ0JrZURJZ1BTQmtlREFnTHlBeUxqQTdDZ2tKQ1dac2IyRjBJR1I1TWlBOUlHUjVNQ0F2SURJdU1Ec0tDUWtKWm14dllYUWdaSGd6SUQwZ1pIZ3hJQzhnTWk0d093b0pDUWxtYkc5aGRDQmtlVE1nUFNCa2VURWdMeUF5TGpBN0Nna0pDWE5vWVdSdmR5QTlJQ2dLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2djMmhoWkc5M1EyOXZjbVF1ZUhrZ0t5QjJaV015S0NCa2VEQXNJR1I1TUNBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCemFHRmtiM2REYjI5eVpDNTRlU0FySUhabFl6SW9JREF1TUN3Z1pIa3dJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU0FyQ2drSkNRbDBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSE5vWVdSdmQwTnZiM0prTG5oNUlDc2dkbVZqTWlnZ1pIZ3hMQ0JrZVRBZ0tTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2MyaGhaRzkzUTI5dmNtUXVlSGtnS3lCMlpXTXlLQ0JrZURJc0lHUjVNaUFwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0J6YUdGa2IzZERiMjl5WkM1NGVTQXJJSFpsWXpJb0lEQXVNQ3dnWkhreUlDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTQXJDZ2tKQ1FsMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lITm9ZV1J2ZDBOdmIzSmtMbmg1SUNzZ2RtVmpNaWdnWkhnekxDQmtlVElnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnYzJoaFpHOTNRMjl2Y21RdWVIa2dLeUIyWldNeUtDQmtlREFzSURBdU1DQXBMQ0J6YUdGa2IzZERiMjl5WkM1NklDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVNBcklIWmxZeklvSUdSNE1pd2dNQzR3SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1NBckNna0pDUWwwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhOb1lXUnZkME52YjNKa0xuaDVMQ0J6YUdGa2IzZERiMjl5WkM1NklDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVNBcklIWmxZeklvSUdSNE15d2dNQzR3SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1NBckNna0pDUWwwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhOb1lXUnZkME52YjNKa0xuaDVJQ3NnZG1Wak1pZ2daSGd4TENBd0xqQWdLU3dnYzJoaFpHOTNRMjl2Y21RdWVpQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2djMmhoWkc5M1EyOXZjbVF1ZUhrZ0t5QjJaV015S0NCa2VESXNJR1I1TXlBcExDQnphR0ZrYjNkRGIyOXlaQzU2SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCemFHRmtiM2REYjI5eVpDNTRlU0FySUhabFl6SW9JREF1TUN3Z1pIa3pJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU0FyQ2drSkNRbDBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSE5vWVdSdmQwTnZiM0prTG5oNUlDc2dkbVZqTWlnZ1pIZ3pMQ0JrZVRNZ0tTd2djMmhoWkc5M1EyOXZjbVF1ZWlBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2MyaGhaRzkzUTI5dmNtUXVlSGtnS3lCMlpXTXlLQ0JrZURBc0lHUjVNU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0J6YUdGa2IzZERiMjl5WkM1NGVTQXJJSFpsWXpJb0lEQXVNQ3dnWkhreElDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTQXJDZ2tKQ1FsMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lITm9ZV1J2ZDBOdmIzSmtMbmg1SUNzZ2RtVmpNaWdnWkhneExDQmtlVEVnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwQ2drSkNTa2dLaUFvSURFdU1DQXZJREUzTGpBZ0tUc0tDUWtqWld4cFppQmtaV1pwYm1Wa0tDQlRTRUZFVDFkTlFWQmZWRmxRUlY5UVEwWmZVMDlHVkNBcENna0pDWFpsWXpJZ2RHVjRaV3hUYVhwbElEMGdkbVZqTWlnZ01TNHdJQ2tnTHlCemFHRmtiM2ROWVhCVGFYcGxPd29KQ1FsbWJHOWhkQ0JrZUNBOUlIUmxlR1ZzVTJsNlpTNTRPd29KQ1FsbWJHOWhkQ0JrZVNBOUlIUmxlR1ZzVTJsNlpTNTVPd29KQ1FsMlpXTXlJSFYySUQwZ2MyaGhaRzkzUTI5dmNtUXVlSGs3Q2drSkNYWmxZeklnWmlBOUlHWnlZV04wS0NCMWRpQXFJSE5vWVdSdmQwMWhjRk5wZW1VZ0t5QXdMalVnS1RzS0NRa0pkWFlnTFQwZ1ppQXFJSFJsZUdWc1UybDZaVHNLQ1FrSmMyaGhaRzkzSUQwZ0tBb0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpd2djMmhoWkc5M1EyOXZjbVF1ZWlBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2RYWWdLeUIyWldNeUtDQmtlQ3dnTUM0d0lDa3NJSE5vWVdSdmQwTnZiM0prTG5vZ0tTQXJDZ2tKQ1FsMFpYaDBkWEpsTWtSRGIyMXdZWEpsS0NCemFHRmtiM2ROWVhBc0lIVjJJQ3NnZG1Wak1pZ2dNQzR3TENCa2VTQXBMQ0J6YUdGa2IzZERiMjl5WkM1NklDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhSbGVHVnNVMmw2WlN3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwSUNzS0NRa0pDVzFwZUNnZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JQzFrZUN3Z01DNHdJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU3dnQ2drSkNRa0pJSFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnZFhZZ0t5QjJaV015S0NBeUxqQWdLaUJrZUN3Z01DNHdJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU3dLQ1FrSkNRa2daaTU0SUNrZ0t3b0pDUWtKYldsNEtDQjBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSFYySUNzZ2RtVmpNaWdnTFdSNExDQmtlU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tzSUFvSkNRa0pDU0IwWlhoMGRYSmxNa1JEYjIxd1lYSmxLQ0J6YUdGa2IzZE5ZWEFzSUhWMklDc2dkbVZqTWlnZ01pNHdJQ29nWkhnc0lHUjVJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU3dLQ1FrSkNRa2daaTU0SUNrZ0t3b0pDUWtKYldsNEtDQjBaWGgwZFhKbE1rUkRiMjF3WVhKbEtDQnphR0ZrYjNkTllYQXNJSFYySUNzZ2RtVmpNaWdnTUM0d0xDQXRaSGtnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwTENBS0NRa0pDUWtnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lEQXVNQ3dnTWk0d0lDb2daSGtnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwTEFvSkNRa0pDU0JtTG5rZ0tTQXJDZ2tKQ1FsdGFYZ29JSFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnZFhZZ0t5QjJaV015S0NCa2VDd2dMV1I1SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1N3Z0Nna0pDUWtKSUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2RYWWdLeUIyWldNeUtDQmtlQ3dnTWk0d0lDb2daSGtnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwTEFvSkNRa0pDU0JtTG5rZ0tTQXJDZ2tKQ1FsdGFYZ29JRzFwZUNnZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JQzFrZUN3Z0xXUjVJQ2tzSUhOb1lXUnZkME52YjNKa0xub2dLU3dnQ2drSkNRa0pDU0FnZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCMWRpQXJJSFpsWXpJb0lESXVNQ0FxSUdSNExDQXRaSGtnS1N3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwTEFvSkNRa0pDUWtnSUdZdWVDQXBMQW9KQ1FrSkNTQnRhWGdvSUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z2RYWWdLeUIyWldNeUtDQXRaSGdzSURJdU1DQXFJR1I1SUNrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1N3Z0Nna0pDUWtKQ1NBZ2RHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQjFkaUFySUhabFl6SW9JREl1TUNBcUlHUjRMQ0F5TGpBZ0tpQmtlU0FwTENCemFHRmtiM2REYjI5eVpDNTZJQ2tzQ2drSkNRa0pDU0FnWmk1NElDa3NDZ2tKQ1FrSklHWXVlU0FwQ2drSkNTa2dLaUFvSURFdU1DQXZJRGt1TUNBcE93b0pDU05sYkdsbUlHUmxabWx1WldRb0lGTklRVVJQVjAxQlVGOVVXVkJGWDFaVFRTQXBDZ2tKQ1hOb1lXUnZkeUE5SUZaVFRWTm9ZV1J2ZHlnZ2MyaGhaRzkzVFdGd0xDQnphR0ZrYjNkRGIyOXlaQzU0ZVN3Z2MyaGhaRzkzUTI5dmNtUXVlaUFwT3dvSkNTTmxiSE5sQ2drSkNYTm9ZV1J2ZHlBOUlIUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2djMmhoWkc5M1EyOXZjbVF1ZUhrc0lITm9ZV1J2ZDBOdmIzSmtMbm9nS1RzS0NRa2paVzVrYVdZS0NRbDlDZ2tKY21WMGRYSnVJSE5vWVdSdmR6c0tDWDBLQ1habFl6SWdZM1ZpWlZSdlZWWW9JSFpsWXpNZ2Rpd2dabXh2WVhRZ2RHVjRaV3hUYVhwbFdTQXBJSHNLQ1FsMlpXTXpJR0ZpYzFZZ1BTQmhZbk1vSUhZZ0tUc0tDUWxtYkc5aGRDQnpZMkZzWlZSdlEzVmlaU0E5SURFdU1DQXZJRzFoZUNnZ1lXSnpWaTU0TENCdFlYZ29JR0ZpYzFZdWVTd2dZV0p6Vmk1NklDa2dLVHNLQ1FsaFluTldJQ285SUhOallXeGxWRzlEZFdKbE93b0pDWFlnS2owZ2MyTmhiR1ZVYjBOMVltVWdLaUFvSURFdU1DQXRJREl1TUNBcUlIUmxlR1ZzVTJsNlpWa2dLVHNLQ1FsMlpXTXlJSEJzWVc1aGNpQTlJSFl1ZUhrN0Nna0pabXh2WVhRZ1lXeHRiM04wUVZSbGVHVnNJRDBnTVM0MUlDb2dkR1Y0Wld4VGFYcGxXVHNLQ1FsbWJHOWhkQ0JoYkcxdmMzUlBibVVnUFNBeExqQWdMU0JoYkcxdmMzUkJWR1Y0Wld3N0Nna0phV1lnS0NCaFluTldMbm9nUGowZ1lXeHRiM04wVDI1bElDa2dld29KQ1FscFppQW9JSFl1ZWlBK0lEQXVNQ0FwQ2drSkNRbHdiR0Z1WVhJdWVDQTlJRFF1TUNBdElIWXVlRHNLQ1FsOUlHVnNjMlVnYVdZZ0tDQmhZbk5XTG5nZ1BqMGdZV3h0YjNOMFQyNWxJQ2tnZXdvSkNRbG1iRzloZENCemFXZHVXQ0E5SUhOcFoyNG9JSFl1ZUNBcE93b0pDUWx3YkdGdVlYSXVlQ0E5SUhZdWVpQXFJSE5wWjI1WUlDc2dNaTR3SUNvZ2MybG5ibGc3Q2drSmZTQmxiSE5sSUdsbUlDZ2dZV0p6Vmk1NUlENDlJR0ZzYlc5emRFOXVaU0FwSUhzS0NRa0pabXh2WVhRZ2MybG5ibGtnUFNCemFXZHVLQ0IyTG5rZ0tUc0tDUWtKY0d4aGJtRnlMbmdnUFNCMkxuZ2dLeUF5TGpBZ0tpQnphV2R1V1NBcklESXVNRHNLQ1FrSmNHeGhibUZ5TG5rZ1BTQjJMbm9nS2lCemFXZHVXU0F0SURJdU1Ec0tDUWw5Q2drSmNtVjBkWEp1SUhabFl6SW9JREF1TVRJMUxDQXdMakkxSUNrZ0tpQndiR0Z1WVhJZ0t5QjJaV015S0NBd0xqTTNOU3dnTUM0M05TQXBPd29KZlFvSlpteHZZWFFnWjJWMFVHOXBiblJUYUdGa2IzY29JSE5oYlhCc1pYSXlSQ0J6YUdGa2IzZE5ZWEFzSUhabFl6SWdjMmhoWkc5M1RXRndVMmw2WlN3Z1pteHZZWFFnYzJoaFpHOTNRbWxoY3l3Z1pteHZZWFFnYzJoaFpHOTNVbUZrYVhWekxDQjJaV00wSUhOb1lXUnZkME52YjNKa0xDQm1iRzloZENCemFHRmtiM2REWVcxbGNtRk9aV0Z5TENCbWJHOWhkQ0J6YUdGa2IzZERZVzFsY21GR1lYSWdLU0I3Q2drSmRtVmpNaUIwWlhobGJGTnBlbVVnUFNCMlpXTXlLQ0F4TGpBZ0tTQXZJQ2dnYzJoaFpHOTNUV0Z3VTJsNlpTQXFJSFpsWXpJb0lEUXVNQ3dnTWk0d0lDa2dLVHNLQ1FsMlpXTXpJR3hwWjJoMFZHOVFiM05wZEdsdmJpQTlJSE5vWVdSdmQwTnZiM0prTG5oNWVqc0tDUWxtYkc5aGRDQmtjQ0E5SUNnZ2JHVnVaM1JvS0NCc2FXZG9kRlJ2VUc5emFYUnBiMjRnS1NBdElITm9ZV1J2ZDBOaGJXVnlZVTVsWVhJZ0tTQXZJQ2dnYzJoaFpHOTNRMkZ0WlhKaFJtRnlJQzBnYzJoaFpHOTNRMkZ0WlhKaFRtVmhjaUFwT3drSlpIQWdLejBnYzJoaFpHOTNRbWxoY3pzS0NRbDJaV016SUdKa00wUWdQU0J1YjNKdFlXeHBlbVVvSUd4cFoyaDBWRzlRYjNOcGRHbHZiaUFwT3dvSkNTTnBaaUJrWldacGJtVmtLQ0JUU0VGRVQxZE5RVkJmVkZsUVJWOVFRMFlnS1NCOGZDQmtaV1pwYm1Wa0tDQlRTRUZFVDFkTlFWQmZWRmxRUlY5UVEwWmZVMDlHVkNBcElIeDhJR1JsWm1sdVpXUW9JRk5JUVVSUFYwMUJVRjlVV1ZCRlgxWlRUU0FwQ2drSkNYWmxZeklnYjJabWMyVjBJRDBnZG1Wak1pZ2dMU0F4TENBeElDa2dLaUJ6YUdGa2IzZFNZV1JwZFhNZ0tpQjBaWGhsYkZOcGVtVXVlVHNLQ1FrSmNtVjBkWEp1SUNnS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnWTNWaVpWUnZWVllvSUdKa00wUWdLeUJ2Wm1aelpYUXVlSGw1TENCMFpYaGxiRk5wZW1VdWVTQXBMQ0JrY0NBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z1kzVmlaVlJ2VlZZb0lHSmtNMFFnS3lCdlptWnpaWFF1ZVhsNUxDQjBaWGhsYkZOcGVtVXVlU0FwTENCa2NDQXBJQ3NLQ1FrSkNYUmxlSFIxY21VeVJFTnZiWEJoY21Vb0lITm9ZV1J2ZDAxaGNDd2dZM1ZpWlZSdlZWWW9JR0prTTBRZ0t5QnZabVp6WlhRdWVIbDRMQ0IwWlhobGJGTnBlbVV1ZVNBcExDQmtjQ0FwSUNzS0NRa0pDWFJsZUhSMWNtVXlSRU52YlhCaGNtVW9JSE5vWVdSdmQwMWhjQ3dnWTNWaVpWUnZWVllvSUdKa00wUWdLeUJ2Wm1aelpYUXVlWGw0TENCMFpYaGxiRk5wZW1VdWVTQXBMQ0JrY0NBcElDc0tDUWtKQ1hSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z1kzVmlaVlJ2VlZZb0lHSmtNMFFzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCamRXSmxWRzlWVmlnZ1ltUXpSQ0FySUc5bVpuTmxkQzU0ZUhrc0lIUmxlR1ZzVTJsNlpTNTVJQ2tzSUdSd0lDa2dLd29KQ1FrSmRHVjRkSFZ5WlRKRVEyOXRjR0Z5WlNnZ2MyaGhaRzkzVFdGd0xDQmpkV0psVkc5VlZpZ2dZbVF6UkNBcklHOW1abk5sZEM1NWVIa3NJSFJsZUdWc1UybDZaUzU1SUNrc0lHUndJQ2tnS3dvSkNRa0pkR1Y0ZEhWeVpUSkVRMjl0Y0dGeVpTZ2djMmhoWkc5M1RXRndMQ0JqZFdKbFZHOVZWaWdnWW1RelJDQXJJRzltWm5ObGRDNTRlSGdzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrZ0t3b0pDUWtKZEdWNGRIVnlaVEpFUTI5dGNHRnlaU2dnYzJoaFpHOTNUV0Z3TENCamRXSmxWRzlWVmlnZ1ltUXpSQ0FySUc5bVpuTmxkQzU1ZUhnc0lIUmxlR1ZzVTJsNlpTNTVJQ2tzSUdSd0lDa0tDUWtKS1NBcUlDZ2dNUzR3SUM4Z09TNHdJQ2s3Q2drSkkyVnNjMlVLQ1FrSmNtVjBkWEp1SUhSbGVIUjFjbVV5UkVOdmJYQmhjbVVvSUhOb1lXUnZkMDFoY0N3Z1kzVmlaVlJ2VlZZb0lHSmtNMFFzSUhSbGVHVnNVMmw2WlM1NUlDa3NJR1J3SUNrN0Nna0pJMlZ1WkdsbUNnbDlDaU5sYm1ScFptQXNJSEZ3SUQwZ1lDTnBabVJsWmlCVlUwVmZVMGhCUkU5WFRVRlFDZ2tqYVdZZ1RsVk5YMFJKVWw5TVNVZElWRjlUU0VGRVQxZFRJRDRnTUFvSkNYVnVhV1p2Y20wZ2JXRjBOQ0JrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoZEhKcGVGc2dUbFZOWDBSSlVsOU1TVWRJVkY5VFNFRkVUMWRUSUYwN0Nna0pkbUZ5ZVdsdVp5QjJaV00wSUhaRWFYSmxZM1JwYjI1aGJGTm9ZV1J2ZDBOdmIzSmtXeUJPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDUWx6ZEhKMVkzUWdSR2x5WldOMGFXOXVZV3hNYVdkb2RGTm9ZV1J2ZHlCN0Nna0pDV1pzYjJGMElITm9ZV1J2ZDBKcFlYTTdDZ2tKQ1dac2IyRjBJSE5vWVdSdmQwNXZjbTFoYkVKcFlYTTdDZ2tKQ1dac2IyRjBJSE5vWVdSdmQxSmhaR2wxY3pzS0NRa0pkbVZqTWlCemFHRmtiM2ROWVhCVGFYcGxPd29KQ1gwN0Nna0pkVzVwWm05eWJTQkVhWEpsWTNScGIyNWhiRXhwWjJoMFUyaGhaRzkzSUdScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzZHpXeUJPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDU05sYm1ScFpnb0pJMmxtSUU1VlRWOVRVRTlVWDB4SlIwaFVYMU5JUVVSUFYxTWdQaUF3Q2drSmRXNXBabTl5YlNCdFlYUTBJSE53YjNSVGFHRmtiM2ROWVhSeWFYaGJJRTVWVFY5VFVFOVVYMHhKUjBoVVgxTklRVVJQVjFNZ1hUc0tDUWwyWVhKNWFXNW5JSFpsWXpRZ2RsTndiM1JUYUdGa2IzZERiMjl5WkZzZ1RsVk5YMU5RVDFSZlRFbEhTRlJmVTBoQlJFOVhVeUJkT3dvSkNYTjBjblZqZENCVGNHOTBUR2xuYUhSVGFHRmtiM2NnZXdvSkNRbG1iRzloZENCemFHRmtiM2RDYVdGek93b0pDUWxtYkc5aGRDQnphR0ZrYjNkT2IzSnRZV3hDYVdGek93b0pDUWxtYkc5aGRDQnphR0ZrYjNkU1lXUnBkWE03Q2drSkNYWmxZeklnYzJoaFpHOTNUV0Z3VTJsNlpUc0tDUWw5T3dvSkNYVnVhV1p2Y20wZ1UzQnZkRXhwWjJoMFUyaGhaRzkzSUhOd2IzUk1hV2RvZEZOb1lXUnZkM05iSUU1VlRWOVRVRTlVWDB4SlIwaFVYMU5JUVVSUFYxTWdYVHNLQ1NObGJtUnBaZ29KSTJsbUlFNVZUVjlRVDBsT1ZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pDWFZ1YVdadmNtMGdiV0YwTkNCd2IybHVkRk5vWVdSdmQwMWhkSEpwZUZzZ1RsVk5YMUJQU1U1VVgweEpSMGhVWDFOSVFVUlBWMU1nWFRzS0NRbDJZWEo1YVc1bklIWmxZelFnZGxCdmFXNTBVMmhoWkc5M1EyOXZjbVJiSUU1VlRWOVFUMGxPVkY5TVNVZElWRjlUU0VGRVQxZFRJRjA3Q2drSmMzUnlkV04wSUZCdmFXNTBUR2xuYUhSVGFHRmtiM2NnZXdvSkNRbG1iRzloZENCemFHRmtiM2RDYVdGek93b0pDUWxtYkc5aGRDQnphR0ZrYjNkT2IzSnRZV3hDYVdGek93b0pDUWxtYkc5aGRDQnphR0ZrYjNkU1lXUnBkWE03Q2drSkNYWmxZeklnYzJoaFpHOTNUV0Z3VTJsNlpUc0tDUWtKWm14dllYUWdjMmhoWkc5M1EyRnRaWEpoVG1WaGNqc0tDUWtKWm14dllYUWdjMmhoWkc5M1EyRnRaWEpoUm1GeU93b0pDWDA3Q2drSmRXNXBabTl5YlNCUWIybHVkRXhwWjJoMFUyaGhaRzkzSUhCdmFXNTBUR2xuYUhSVGFHRmtiM2R6V3lCT1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVeUJkT3dvSkkyVnVaR2xtQ2lObGJtUnBabUFzSUZod0lEMGdZQ05wWm1SbFppQlZVMFZmVTBoQlJFOVhUVUZRQ2dramFXWWdUbFZOWDBSSlVsOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01DQjhmQ0JPVlUxZlUxQlBWRjlNU1VkSVZGOVRTRUZFVDFkVElENGdNQ0I4ZkNCT1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVeUErSURBS0NRbDJaV016SUhOb1lXUnZkMWR2Y214a1RtOXliV0ZzSUQwZ2FXNTJaWEp6WlZSeVlXNXpabTl5YlVScGNtVmpkR2x2YmlnZ2RISmhibk5tYjNKdFpXUk9iM0p0WVd3c0lIWnBaWGROWVhSeWFYZ2dLVHNLQ1FsMlpXTTBJSE5vWVdSdmQxZHZjbXhrVUc5emFYUnBiMjQ3Q2dralpXNWthV1lLQ1NOcFppQk9WVTFmUkVsU1gweEpSMGhVWDFOSVFVUlBWMU1nUGlBd0Nna2pjSEpoWjIxaElIVnVjbTlzYkY5c2IyOXdYM04wWVhKMENnbG1iM0lnS0NCcGJuUWdhU0E5SURBN0lHa2dQQ0JPVlUxZlJFbFNYMHhKUjBoVVgxTklRVVJQVjFNN0lHa2dLeXNnS1NCN0Nna0pjMmhoWkc5M1YyOXliR1JRYjNOcGRHbHZiaUE5SUhkdmNteGtVRzl6YVhScGIyNGdLeUIyWldNMEtDQnphR0ZrYjNkWGIzSnNaRTV2Y20xaGJDQXFJR1JwY21WamRHbHZibUZzVEdsbmFIUlRhR0ZrYjNkeld5QnBJRjB1YzJoaFpHOTNUbTl5YldGc1FtbGhjeXdnTUNBcE93b0pDWFpFYVhKbFkzUnBiMjVoYkZOb1lXUnZkME52YjNKa1d5QnBJRjBnUFNCa2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZDAxaGRISnBlRnNnYVNCZElDb2djMmhoWkc5M1YyOXliR1JRYjNOcGRHbHZianNLQ1gwS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZaVzVrQ2dralpXNWthV1lLQ1NOcFppQk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjl6ZEdGeWRBb0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVGxWTlgxTlFUMVJmVEVsSFNGUmZVMGhCUkU5WFV6c2dhU0FyS3lBcElIc0tDUWx6YUdGa2IzZFhiM0pzWkZCdmMybDBhVzl1SUQwZ2QyOXliR1JRYjNOcGRHbHZiaUFySUhabFl6UW9JSE5vWVdSdmQxZHZjbXhrVG05eWJXRnNJQ29nYzNCdmRFeHBaMmgwVTJoaFpHOTNjMXNnYVNCZExuTm9ZV1J2ZDA1dmNtMWhiRUpwWVhNc0lEQWdLVHNLQ1FsMlUzQnZkRk5vWVdSdmQwTnZiM0prV3lCcElGMGdQU0J6Y0c5MFUyaGhaRzkzVFdGMGNtbDRXeUJwSUYwZ0tpQnphR0ZrYjNkWGIzSnNaRkJ2YzJsMGFXOXVPd29KZlFvSkkzQnlZV2R0WVNCMWJuSnZiR3hmYkc5dmNGOWxibVFLQ1NObGJtUnBaZ29KSTJsbUlFNVZUVjlRVDBsT1ZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjl6ZEdGeWRBb0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVGxWTlgxQlBTVTVVWDB4SlIwaFVYMU5JUVVSUFYxTTdJR2tnS3lzZ0tTQjdDZ2tKYzJoaFpHOTNWMjl5YkdSUWIzTnBkR2x2YmlBOUlIZHZjbXhrVUc5emFYUnBiMjRnS3lCMlpXTTBLQ0J6YUdGa2IzZFhiM0pzWkU1dmNtMWhiQ0FxSUhCdmFXNTBUR2xuYUhSVGFHRmtiM2R6V3lCcElGMHVjMmhoWkc5M1RtOXliV0ZzUW1saGN5d2dNQ0FwT3dvSkNYWlFiMmx1ZEZOb1lXUnZkME52YjNKa1d5QnBJRjBnUFNCd2IybHVkRk5vWVdSdmQwMWhkSEpwZUZzZ2FTQmRJQ29nYzJoaFpHOTNWMjl5YkdSUWIzTnBkR2x2YmpzS0NYMEtDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmWlc1a0Nna2paVzVrYVdZS0kyVnVaR2xtWUN3Z1NuQWdQU0JnWm14dllYUWdaMlYwVTJoaFpHOTNUV0Z6YXlncElIc0tDV1pzYjJGMElITm9ZV1J2ZHlBOUlERXVNRHNLQ1NOcFptUmxaaUJWVTBWZlUwaEJSRTlYVFVGUUNna2phV1lnVGxWTlgwUkpVbDlNU1VkSVZGOVRTRUZFVDFkVElENGdNQW9KUkdseVpXTjBhVzl1WVd4TWFXZG9kRk5vWVdSdmR5QmthWEpsWTNScGIyNWhiRXhwWjJoME93b0pJM0J5WVdkdFlTQjFibkp2Ykd4ZmJHOXZjRjl6ZEdGeWRBb0pabTl5SUNnZ2FXNTBJR2tnUFNBd095QnBJRHdnVGxWTlgwUkpVbDlNU1VkSVZGOVRTRUZFVDFkVE95QnBJQ3NySUNrZ2V3b0pDV1JwY21WamRHbHZibUZzVEdsbmFIUWdQU0JrYVhKbFkzUnBiMjVoYkV4cFoyaDBVMmhoWkc5M2Mxc2dhU0JkT3dvSkNYTm9ZV1J2ZHlBcVBTQnlaV05sYVhabFUyaGhaRzkzSUQ4Z1oyVjBVMmhoWkc5M0tDQmthWEpsWTNScGIyNWhiRk5vWVdSdmQwMWhjRnNnYVNCZExDQmthWEpsWTNScGIyNWhiRXhwWjJoMExuTm9ZV1J2ZDAxaGNGTnBlbVVzSUdScGNtVmpkR2x2Ym1Gc1RHbG5hSFF1YzJoaFpHOTNRbWxoY3l3Z1pHbHlaV04wYVc5dVlXeE1hV2RvZEM1emFHRmtiM2RTWVdScGRYTXNJSFpFYVhKbFkzUnBiMjVoYkZOb1lXUnZkME52YjNKa1d5QnBJRjBnS1NBNklERXVNRHNLQ1gwS0NTTndjbUZuYldFZ2RXNXliMnhzWDJ4dmIzQmZaVzVrQ2dralpXNWthV1lLQ1NOcFppQk9WVTFmVTFCUFZGOU1TVWRJVkY5VFNFRkVUMWRUSUQ0Z01Bb0pVM0J2ZEV4cFoyaDBVMmhoWkc5M0lITndiM1JNYVdkb2REc0tDU053Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JmYzNSaGNuUUtDV1p2Y2lBb0lHbHVkQ0JwSUQwZ01Ec2dhU0E4SUU1VlRWOVRVRTlVWDB4SlIwaFVYMU5JUVVSUFYxTTdJR2tnS3lzZ0tTQjdDZ2tKYzNCdmRFeHBaMmgwSUQwZ2MzQnZkRXhwWjJoMFUyaGhaRzkzYzFzZ2FTQmRPd29KQ1hOb1lXUnZkeUFxUFNCeVpXTmxhWFpsVTJoaFpHOTNJRDhnWjJWMFUyaGhaRzkzS0NCemNHOTBVMmhoWkc5M1RXRndXeUJwSUYwc0lITndiM1JNYVdkb2RDNXphR0ZrYjNkTllYQlRhWHBsTENCemNHOTBUR2xuYUhRdWMyaGhaRzkzUW1saGN5d2djM0J2ZEV4cFoyaDBMbk5vWVdSdmQxSmhaR2wxY3l3Z2RsTndiM1JUYUdGa2IzZERiMjl5WkZzZ2FTQmRJQ2tnT2lBeExqQTdDZ2w5Q2dramNISmhaMjFoSUhWdWNtOXNiRjlzYjI5d1gyVnVaQW9KSTJWdVpHbG1DZ2tqYVdZZ1RsVk5YMUJQU1U1VVgweEpSMGhVWDFOSVFVUlBWMU1nUGlBd0NnbFFiMmx1ZEV4cFoyaDBVMmhoWkc5M0lIQnZhVzUwVEdsbmFIUTdDZ2tqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDNOMFlYSjBDZ2xtYjNJZ0tDQnBiblFnYVNBOUlEQTdJR2tnUENCT1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVenNnYVNBckt5QXBJSHNLQ1Fsd2IybHVkRXhwWjJoMElEMGdjRzlwYm5STWFXZG9kRk5vWVdSdmQzTmJJR2tnWFRzS0NRbHphR0ZrYjNjZ0tqMGdjbVZqWldsMlpWTm9ZV1J2ZHlBL0lHZGxkRkJ2YVc1MFUyaGhaRzkzS0NCd2IybHVkRk5vWVdSdmQwMWhjRnNnYVNCZExDQndiMmx1ZEV4cFoyaDBMbk5vWVdSdmQwMWhjRk5wZW1Vc0lIQnZhVzUwVEdsbmFIUXVjMmhoWkc5M1FtbGhjeXdnY0c5cGJuUk1hV2RvZEM1emFHRmtiM2RTWVdScGRYTXNJSFpRYjJsdWRGTm9ZV1J2ZDBOdmIzSmtXeUJwSUYwc0lIQnZhVzUwVEdsbmFIUXVjMmhoWkc5M1EyRnRaWEpoVG1WaGNpd2djRzlwYm5STWFXZG9kQzV6YUdGa2IzZERZVzFsY21GR1lYSWdLU0E2SURFdU1Ec0tDWDBLQ1NOd2NtRm5iV0VnZFc1eWIyeHNYMnh2YjNCZlpXNWtDZ2tqWlc1a2FXWUtDU05sYm1ScFpnb0pjbVYwZFhKdUlITm9ZV1J2ZHpzS2ZXQXNJRmx3SUQwZ1lDTnBabVJsWmlCVlUwVmZVMHRKVGs1SlRrY0tDVzFoZERRZ1ltOXVaVTFoZEZnZ1BTQm5aWFJDYjI1bFRXRjBjbWw0S0NCemEybHVTVzVrWlhndWVDQXBPd29KYldGME5DQmliMjVsVFdGMFdTQTlJR2RsZEVKdmJtVk5ZWFJ5YVhnb0lITnJhVzVKYm1SbGVDNTVJQ2s3Q2dsdFlYUTBJR0p2Ym1WTllYUmFJRDBnWjJWMFFtOXVaVTFoZEhKcGVDZ2djMnRwYmtsdVpHVjRMbm9nS1RzS0NXMWhkRFFnWW05dVpVMWhkRmNnUFNCblpYUkNiMjVsVFdGMGNtbDRLQ0J6YTJsdVNXNWtaWGd1ZHlBcE93b2paVzVrYVdaZ0xDQmFjQ0E5SUdBamFXWmtaV1lnVlZORlgxTkxTVTVPU1U1SENnbDFibWxtYjNKdElHMWhkRFFnWW1sdVpFMWhkSEpwZURzS0NYVnVhV1p2Y20wZ2JXRjBOQ0JpYVc1a1RXRjBjbWw0U1c1MlpYSnpaVHNLQ1NOcFptUmxaaUJDVDA1RlgxUkZXRlJWVWtVS0NRbDFibWxtYjNKdElHaHBaMmh3SUhOaGJYQnNaWEl5UkNCaWIyNWxWR1Y0ZEhWeVpUc0tDUWwxYm1sbWIzSnRJR2x1ZENCaWIyNWxWR1Y0ZEhWeVpWTnBlbVU3Q2drSmJXRjBOQ0JuWlhSQ2IyNWxUV0YwY21sNEtDQmpiMjV6ZENCcGJpQm1iRzloZENCcElDa2dld29KQ1FsbWJHOWhkQ0JxSUQwZ2FTQXFJRFF1TURzS0NRa0pabXh2WVhRZ2VDQTlJRzF2WkNnZ2Fpd2dabXh2WVhRb0lHSnZibVZVWlhoMGRYSmxVMmw2WlNBcElDazdDZ2tKQ1dac2IyRjBJSGtnUFNCbWJHOXZjaWdnYWlBdklHWnNiMkYwS0NCaWIyNWxWR1Y0ZEhWeVpWTnBlbVVnS1NBcE93b0pDUWxtYkc5aGRDQmtlQ0E5SURFdU1DQXZJR1pzYjJGMEtDQmliMjVsVkdWNGRIVnlaVk5wZW1VZ0tUc0tDUWtKWm14dllYUWdaSGtnUFNBeExqQWdMeUJtYkc5aGRDZ2dZbTl1WlZSbGVIUjFjbVZUYVhwbElDazdDZ2tKQ1hrZ1BTQmtlU0FxSUNnZ2VTQXJJREF1TlNBcE93b0pDUWwyWldNMElIWXhJRDBnZEdWNGRIVnlaVEpFS0NCaWIyNWxWR1Y0ZEhWeVpTd2dkbVZqTWlnZ1pIZ2dLaUFvSUhnZ0t5QXdMalVnS1N3Z2VTQXBJQ2s3Q2drSkNYWmxZelFnZGpJZ1BTQjBaWGgwZFhKbE1rUW9JR0p2Ym1WVVpYaDBkWEpsTENCMlpXTXlLQ0JrZUNBcUlDZ2dlQ0FySURFdU5TQXBMQ0I1SUNrZ0tUc0tDUWtKZG1Wak5DQjJNeUE5SUhSbGVIUjFjbVV5UkNnZ1ltOXVaVlJsZUhSMWNtVXNJSFpsWXpJb0lHUjRJQ29nS0NCNElDc2dNaTQxSUNrc0lIa2dLU0FwT3dvSkNRbDJaV00wSUhZMElEMGdkR1Y0ZEhWeVpUSkVLQ0JpYjI1bFZHVjRkSFZ5WlN3Z2RtVmpNaWdnWkhnZ0tpQW9JSGdnS3lBekxqVWdLU3dnZVNBcElDazdDZ2tKQ1cxaGREUWdZbTl1WlNBOUlHMWhkRFFvSUhZeExDQjJNaXdnZGpNc0lIWTBJQ2s3Q2drSkNYSmxkSFZ5YmlCaWIyNWxPd29KQ1gwS0NTTmxiSE5sQ2drSmRXNXBabTl5YlNCdFlYUTBJR0p2Ym1WTllYUnlhV05sYzFzZ1RVRllYMEpQVGtWVElGMDdDZ2tKYldGME5DQm5aWFJDYjI1bFRXRjBjbWw0S0NCamIyNXpkQ0JwYmlCbWJHOWhkQ0JwSUNrZ2V3b0pDUWx0WVhRMElHSnZibVVnUFNCaWIyNWxUV0YwY21salpYTmJJR2x1ZENocEtTQmRPd29KQ1FseVpYUjFjbTRnWW05dVpUc0tDUWw5Q2dralpXNWthV1lLSTJWdVpHbG1ZQ3dnSkhBZ1BTQmdJMmxtWkdWbUlGVlRSVjlUUzBsT1RrbE9Sd29KZG1Wak5DQnphMmx1Vm1WeWRHVjRJRDBnWW1sdVpFMWhkSEpwZUNBcUlIWmxZelFvSUhSeVlXNXpabTl5YldWa0xDQXhMakFnS1RzS0NYWmxZelFnYzJ0cGJtNWxaQ0E5SUhabFl6UW9JREF1TUNBcE93b0pjMnRwYm01bFpDQXJQU0JpYjI1bFRXRjBXQ0FxSUhOcmFXNVdaWEowWlhnZ0tpQnphMmx1VjJWcFoyaDBMbmc3Q2dsemEybHVibVZrSUNzOUlHSnZibVZOWVhSWklDb2djMnRwYmxabGNuUmxlQ0FxSUhOcmFXNVhaV2xuYUhRdWVUc0tDWE5yYVc1dVpXUWdLejBnWW05dVpVMWhkRm9nS2lCemEybHVWbVZ5ZEdWNElDb2djMnRwYmxkbGFXZG9kQzU2T3dvSmMydHBibTVsWkNBclBTQmliMjVsVFdGMFZ5QXFJSE5yYVc1V1pYSjBaWGdnS2lCemEybHVWMlZwWjJoMExuYzdDZ2wwY21GdWMyWnZjbTFsWkNBOUlDZ2dZbWx1WkUxaGRISnBlRWx1ZG1WeWMyVWdLaUJ6YTJsdWJtVmtJQ2t1ZUhsNk93b2paVzVrYVdaZ0xDQnFjQ0E5SUdBamFXWmtaV1lnVlZORlgxTkxTVTVPU1U1SENnbHRZWFEwSUhOcmFXNU5ZWFJ5YVhnZ1BTQnRZWFEwS0NBd0xqQWdLVHNLQ1hOcmFXNU5ZWFJ5YVhnZ0t6MGdjMnRwYmxkbGFXZG9kQzU0SUNvZ1ltOXVaVTFoZEZnN0NnbHphMmx1VFdGMGNtbDRJQ3M5SUhOcmFXNVhaV2xuYUhRdWVTQXFJR0p2Ym1WTllYUlpPd29KYzJ0cGJrMWhkSEpwZUNBclBTQnphMmx1VjJWcFoyaDBMbm9nS2lCaWIyNWxUV0YwV2pzS0NYTnJhVzVOWVhSeWFYZ2dLejBnYzJ0cGJsZGxhV2RvZEM1M0lDb2dZbTl1WlUxaGRGYzdDZ2x6YTJsdVRXRjBjbWw0SUQwZ1ltbHVaRTFoZEhKcGVFbHVkbVZ5YzJVZ0tpQnphMmx1VFdGMGNtbDRJQ29nWW1sdVpFMWhkSEpwZURzS0NXOWlhbVZqZEU1dmNtMWhiQ0E5SUhabFl6UW9JSE5yYVc1TllYUnlhWGdnS2lCMlpXTTBLQ0J2WW1wbFkzUk9iM0p0WVd3c0lEQXVNQ0FwSUNrdWVIbDZPd29KSTJsbVpHVm1JRlZUUlY5VVFVNUhSVTVVQ2drSmIySnFaV04wVkdGdVoyVnVkQ0E5SUhabFl6UW9JSE5yYVc1TllYUnlhWGdnS2lCMlpXTTBLQ0J2WW1wbFkzUlVZVzVuWlc1MExDQXdMakFnS1NBcExuaDVlanNLQ1NObGJtUnBaZ29qWlc1a2FXWmdMQ0JSY0NBOUlHQm1iRzloZENCemNHVmpkV3hoY2xOMGNtVnVaM1JvT3dvamFXWmtaV1lnVlZORlgxTlFSVU5WVEVGU1RVRlFDZ2wyWldNMElIUmxlR1ZzVTNCbFkzVnNZWElnUFNCMFpYaDBkWEpsTWtRb0lITndaV04xYkdGeVRXRndMQ0IyVlhZZ0tUc0tDWE53WldOMWJHRnlVM1J5Wlc1bmRHZ2dQU0IwWlhobGJGTndaV04xYkdGeUxuSTdDaU5sYkhObENnbHpjR1ZqZFd4aGNsTjBjbVZ1WjNSb0lEMGdNUzR3T3dvalpXNWthV1pnTENCTGNDQTlJR0FqYVdaa1pXWWdWVk5GWDFOUVJVTlZURUZTVFVGUUNnbDFibWxtYjNKdElITmhiWEJzWlhJeVJDQnpjR1ZqZFd4aGNrMWhjRHNLSTJWdVpHbG1ZQ3dnWlcwZ1BTQmdJMmxtSUdSbFptbHVaV1FvSUZSUFRrVmZUVUZRVUVsT1J5QXBDZ2xuYkY5R2NtRm5RMjlzYjNJdWNtZGlJRDBnZEc5dVpVMWhjSEJwYm1jb0lHZHNYMFp5WVdkRGIyeHZjaTV5WjJJZ0tUc0tJMlZ1WkdsbVlDd2dkRzBnUFNCZ0kybG1ibVJsWmlCellYUjFjbUYwWlFvalpHVm1hVzVsSUhOaGRIVnlZWFJsS0NCaElDa2dZMnhoYlhBb0lHRXNJREF1TUN3Z01TNHdJQ2tLSTJWdVpHbG1DblZ1YVdadmNtMGdabXh2WVhRZ2RHOXVaVTFoY0hCcGJtZEZlSEJ2YzNWeVpUc0tkbVZqTXlCTWFXNWxZWEpVYjI1bFRXRndjR2x1WnlnZ2RtVmpNeUJqYjJ4dmNpQXBJSHNLQ1hKbGRIVnliaUIwYjI1bFRXRndjR2x1WjBWNGNHOXpkWEpsSUNvZ1kyOXNiM0k3Q24wS2RtVmpNeUJTWldsdWFHRnlaRlJ2Ym1WTllYQndhVzVuS0NCMlpXTXpJR052Ykc5eUlDa2dld29KWTI5c2IzSWdLajBnZEc5dVpVMWhjSEJwYm1kRmVIQnZjM1Z5WlRzS0NYSmxkSFZ5YmlCellYUjFjbUYwWlNnZ1kyOXNiM0lnTHlBb0lIWmxZek1vSURFdU1DQXBJQ3NnWTI5c2IzSWdLU0FwT3dwOUNuWmxZek1nVDNCMGFXMXBlbVZrUTJsdVpXOXVWRzl1WlUxaGNIQnBibWNvSUhabFl6TWdZMjlzYjNJZ0tTQjdDZ2xqYjJ4dmNpQXFQU0IwYjI1bFRXRndjR2x1WjBWNGNHOXpkWEpsT3dvSlkyOXNiM0lnUFNCdFlYZ29JSFpsWXpNb0lEQXVNQ0FwTENCamIyeHZjaUF0SURBdU1EQTBJQ2s3Q2dseVpYUjFjbTRnY0c5M0tDQW9JR052Ykc5eUlDb2dLQ0EyTGpJZ0tpQmpiMnh2Y2lBcklEQXVOU0FwSUNrZ0x5QW9JR052Ykc5eUlDb2dLQ0EyTGpJZ0tpQmpiMnh2Y2lBcklERXVOeUFwSUNzZ01DNHdOaUFwTENCMlpXTXpLQ0F5TGpJZ0tTQXBPd3A5Q25abFl6TWdVbEpVUVc1a1QwUlVSbWwwS0NCMlpXTXpJSFlnS1NCN0NnbDJaV016SUdFZ1BTQjJJQ29nS0NCMklDc2dNQzR3TWpRMU56ZzJJQ2tnTFNBd0xqQXdNREE1TURVek56c0tDWFpsWXpNZ1lpQTlJSFlnS2lBb0lEQXVPVGd6TnpJNUlDb2dkaUFySURBdU5ETXlPVFV4TUNBcElDc2dNQzR5TXpnd09ERTdDZ2x5WlhSMWNtNGdZU0F2SUdJN0NuMEtkbVZqTXlCQlEwVlRSbWxzYldsalZHOXVaVTFoY0hCcGJtY29JSFpsWXpNZ1kyOXNiM0lnS1NCN0NnbGpiMjV6ZENCdFlYUXpJRUZEUlZOSmJuQjFkRTFoZENBOUlHMWhkRE1vQ2drSmRtVmpNeWdnTUM0MU9UY3hPU3dnTUM0d056WXdNQ3dnTUM0d01qZzBNQ0FwTEFrSmRtVmpNeWdnTUM0ek5UUTFPQ3dnTUM0NU1EZ3pOQ3dnTUM0eE16TTRNeUFwTEFvSkNYWmxZek1vSURBdU1EUTRNak1zSURBdU1ERTFOallzSURBdU9ETTNOemNnS1FvSktUc0tDV052Ym5OMElHMWhkRE1nUVVORlUwOTFkSEIxZEUxaGRDQTlJRzFoZERNb0Nna0pkbVZqTXlnZ0lERXVOakEwTnpVc0lDMHdMakV3TWpBNExDQXRNQzR3TURNeU55QXBMQWtKZG1Wak15Z2dMVEF1TlRNeE1EZ3NJQ0F4TGpFd09ERXpMQ0F0TUM0d056STNOaUFwTEFvSkNYWmxZek1vSUMwd0xqQTNNelkzTENBdE1DNHdNRFl3TlN3Z0lERXVNRGMyTURJZ0tRb0pLVHNLQ1dOdmJHOXlJQ285SUhSdmJtVk5ZWEJ3YVc1blJYaHdiM04xY21VZ0x5QXdMalk3Q2dsamIyeHZjaUE5SUVGRFJWTkpibkIxZEUxaGRDQXFJR052Ykc5eU93b0pZMjlzYjNJZ1BTQlNVbFJCYm1SUFJGUkdhWFFvSUdOdmJHOXlJQ2s3Q2dsamIyeHZjaUE5SUVGRFJWTlBkWFJ3ZFhSTllYUWdLaUJqYjJ4dmNqc0tDWEpsZEhWeWJpQnpZWFIxY21GMFpTZ2dZMjlzYjNJZ0tUc0tmUXAyWldNeklFTjFjM1J2YlZSdmJtVk5ZWEJ3YVc1bktDQjJaV016SUdOdmJHOXlJQ2tnZXlCeVpYUjFjbTRnWTI5c2IzSTdJSDFnTENCdWJTQTlJR0FqYVdaa1pXWWdWVk5GWDFSU1FVNVRUVWxUVTBsUFRnb0pabXh2WVhRZ2RISmhibk50YVhOemFXOXVRV3h3YUdFZ1BTQXhMakE3Q2dsbWJHOWhkQ0IwY21GdWMyMXBjM05wYjI1R1lXTjBiM0lnUFNCMGNtRnVjMjFwYzNOcGIyNDdDZ2xtYkc5aGRDQjBhR2xqYTI1bGMzTkdZV04wYjNJZ1BTQjBhR2xqYTI1bGMzTTdDZ2tqYVdaa1pXWWdWVk5GWDFSU1FVNVRUVWxUVTBsUFRrMUJVQW9KQ1hSeVlXNXpiV2x6YzJsdmJrWmhZM1J2Y2lBcVBTQjBaWGgwZFhKbE1rUW9JSFJ5WVc1emJXbHpjMmx2YmsxaGNDd2dkbFYySUNrdWNqc0tDU05sYm1ScFpnb0pJMmxtWkdWbUlGVlRSVjlVU0VsRFMwNUZVMU5OUVZBS0NRbDBhR2xqYTI1bGMzTkdZV04wYjNJZ0tqMGdkR1Y0ZEhWeVpUSkVLQ0IwYUdsamEyNWxjM05OWVhBc0lIWlZkaUFwTG1jN0Nna2paVzVrYVdZS0NYWmxZek1nY0c5eklEMGdkbGR2Y214a1VHOXphWFJwYjI0N0NnbDJaV016SUhZZ1BTQnViM0p0WVd4cGVtVW9JR05oYldWeVlWQnZjMmwwYVc5dUlDMGdjRzl6SUNrN0NnbDJaV016SUc0Z1BTQnBiblpsY25ObFZISmhibk5tYjNKdFJHbHlaV04wYVc5dUtDQnViM0p0WVd3c0lIWnBaWGROWVhSeWFYZ2dLVHNLQ1habFl6UWdkSEpoYm5OdGFYTnphVzl1SUQwZ1oyVjBTVUpNVm05c2RXMWxVbVZtY21GamRHbHZiaWdLQ1FsdUxDQjJMQ0J5YjNWbmFHNWxjM05HWVdOMGIzSXNJRzFoZEdWeWFXRnNMbVJwWm1aMWMyVkRiMnh2Y2l3Z2JXRjBaWEpwWVd3dWMzQmxZM1ZzWVhKRGIyeHZjaXdnYldGMFpYSnBZV3d1YzNCbFkzVnNZWEpHT1RBc0Nna0pjRzl6TENCdGIyUmxiRTFoZEhKcGVDd2dkbWxsZDAxaGRISnBlQ3dnY0hKdmFtVmpkR2x2YmsxaGRISnBlQ3dnYVc5eUxDQjBhR2xqYTI1bGMzTkdZV04wYjNJc0Nna0pZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpd2dZWFIwWlc1MVlYUnBiMjVFYVhOMFlXNWpaU0FwT3dvSmRHOTBZV3hFYVdabWRYTmxJRDBnYldsNEtDQjBiM1JoYkVScFptWjFjMlVzSUhSeVlXNXpiV2x6YzJsdmJpNXlaMklzSUhSeVlXNXpiV2x6YzJsdmJrWmhZM1J2Y2lBcE93b0pkSEpoYm5OdGFYTnphVzl1UVd4d2FHRWdQU0J0YVhnb0lIUnlZVzV6YldsemMybHZia0ZzY0doaExDQjBjbUZ1YzIxcGMzTnBiMjR1WVN3Z2RISmhibk50YVhOemFXOXVSbUZqZEc5eUlDazdDaU5sYm1ScFptQXNJR2x0SUQwZ1lDTnBabVJsWmlCVlUwVmZWRkpCVGxOTlNWTlRTVTlPQ2dsMWJtbG1iM0p0SUdac2IyRjBJSFJ5WVc1emJXbHpjMmx2YmpzS0NYVnVhV1p2Y20wZ1pteHZZWFFnZEdocFkydHVaWE56T3dvSmRXNXBabTl5YlNCbWJHOWhkQ0JoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sT3dvSmRXNXBabTl5YlNCMlpXTXpJR0YwZEdWdWRXRjBhVzl1UTI5c2IzSTdDZ2tqYVdaa1pXWWdWVk5GWDFSU1FVNVRUVWxUVTBsUFRrMUJVQW9KQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhSeVlXNXpiV2x6YzJsdmJrMWhjRHNLQ1NObGJtUnBaZ29KSTJsbVpHVm1JRlZUUlY5VVNFbERTMDVGVTFOTlFWQUtDUWwxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0IwYUdsamEyNWxjM05OWVhBN0Nna2paVzVrYVdZS0NYVnVhV1p2Y20wZ2RtVmpNaUIwY21GdWMyMXBjM05wYjI1VFlXMXdiR1Z5VTJsNlpUc0tDWFZ1YVdadmNtMGdjMkZ0Y0d4bGNqSkVJSFJ5WVc1emJXbHpjMmx2YmxOaGJYQnNaWEpOWVhBN0NnbDFibWxtYjNKdElHMWhkRFFnYlc5a1pXeE5ZWFJ5YVhnN0NnbDFibWxtYjNKdElHMWhkRFFnY0hKdmFtVmpkR2x2YmsxaGRISnBlRHNLQ1haaGNubHBibWNnZG1Wak15QjJWMjl5YkdSUWIzTnBkR2x2YmpzS0NYWmxZek1nWjJWMFZtOXNkVzFsVkhKaGJuTnRhWE56YVc5dVVtRjVLQ0IyWldNeklHNHNJSFpsWXpNZ2Rpd2dabXh2WVhRZ2RHaHBZMnR1WlhOekxDQm1iRzloZENCcGIzSXNJRzFoZERRZ2JXOWtaV3hOWVhSeWFYZ2dLU0I3Q2drSmRtVmpNeUJ5WldaeVlXTjBhVzl1Vm1WamRHOXlJRDBnY21WbWNtRmpkQ2dnTFNCMkxDQnViM0p0WVd4cGVtVW9JRzRnS1N3Z01TNHdJQzhnYVc5eUlDazdDZ2tKZG1Wak15QnRiMlJsYkZOallXeGxPd29KQ1cxdlpHVnNVMk5oYkdVdWVDQTlJR3hsYm1kMGFDZ2dkbVZqTXlnZ2JXOWtaV3hOWVhSeWFYaGJJREFnWFM1NGVYb2dLU0FwT3dvSkNXMXZaR1ZzVTJOaGJHVXVlU0E5SUd4bGJtZDBhQ2dnZG1Wak15Z2diVzlrWld4TllYUnlhWGhiSURFZ1hTNTRlWG9nS1NBcE93b0pDVzF2WkdWc1UyTmhiR1V1ZWlBOUlHeGxibWQwYUNnZ2RtVmpNeWdnYlc5a1pXeE5ZWFJ5YVhoYklESWdYUzU0ZVhvZ0tTQXBPd29KQ1hKbGRIVnliaUJ1YjNKdFlXeHBlbVVvSUhKbFpuSmhZM1JwYjI1V1pXTjBiM0lnS1NBcUlIUm9hV05yYm1WemN5QXFJRzF2WkdWc1UyTmhiR1U3Q2dsOUNnbG1iRzloZENCaGNIQnNlVWx2Y2xSdlVtOTFaMmh1WlhOektDQm1iRzloZENCeWIzVm5hRzVsYzNNc0lHWnNiMkYwSUdsdmNpQXBJSHNLQ1FseVpYUjFjbTRnY205MVoyaHVaWE56SUNvZ1kyeGhiWEFvSUdsdmNpQXFJREl1TUNBdElESXVNQ3dnTUM0d0xDQXhMakFnS1RzS0NYMEtDWFpsWXpRZ1oyVjBWSEpoYm5OdGFYTnphVzl1VTJGdGNHeGxLQ0IyWldNeUlHWnlZV2REYjI5eVpDd2dabXh2WVhRZ2NtOTFaMmh1WlhOekxDQm1iRzloZENCcGIzSWdLU0I3Q2drSlpteHZZWFFnWm5KaGJXVmlkV1ptWlhKTWIyUWdQU0JzYjJjeUtDQjBjbUZ1YzIxcGMzTnBiMjVUWVcxd2JHVnlVMmw2WlM1NElDa2dLaUJoY0hCc2VVbHZjbFJ2VW05MVoyaHVaWE56S0NCeWIzVm5hRzVsYzNNc0lHbHZjaUFwT3dvSkNTTnBabVJsWmlCVVJWaFVWVkpGWDB4UFJGOUZXRlFLQ1FrSmNtVjBkWEp1SUhSbGVIUjFjbVV5UkV4dlpFVllWQ2dnZEhKaGJuTnRhWE56YVc5dVUyRnRjR3hsY2sxaGNDd2dabkpoWjBOdmIzSmtMbmg1TENCbWNtRnRaV0oxWm1abGNreHZaQ0FwT3dvSkNTTmxiSE5sQ2drSkNYSmxkSFZ5YmlCMFpYaDBkWEpsTWtRb0lIUnlZVzV6YldsemMybHZibE5oYlhCc1pYSk5ZWEFzSUdaeVlXZERiMjl5WkM1NGVTd2dabkpoYldWaWRXWm1aWEpNYjJRZ0tUc0tDUWtqWlc1a2FXWUtDWDBLQ1habFl6TWdZWEJ3YkhsV2IyeDFiV1ZCZEhSbGJuVmhkR2x2YmlnZ2RtVmpNeUJ5WVdScFlXNWpaU3dnWm14dllYUWdkSEpoYm5OdGFYTnphVzl1UkdsemRHRnVZMlVzSUhabFl6TWdZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpd2dabXh2WVhRZ1lYUjBaVzUxWVhScGIyNUVhWE4wWVc1alpTQXBJSHNLQ1FscFppQW9JR0YwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlVnUFQwZ01DNHdJQ2tnZXdvSkNRbHlaWFIxY200Z2NtRmthV0Z1WTJVN0Nna0pmU0JsYkhObElIc0tDUWtKZG1Wak15QmhkSFJsYm5WaGRHbHZia052WldabWFXTnBaVzUwSUQwZ0xXeHZaeWdnWVhSMFpXNTFZWFJwYjI1RGIyeHZjaUFwSUM4Z1lYUjBaVzUxWVhScGIyNUVhWE4wWVc1alpUc0tDUWtKZG1Wak15QjBjbUZ1YzIxcGRIUmhibU5sSUQwZ1pYaHdLQ0F0SUdGMGRHVnVkV0YwYVc5dVEyOWxabVpwWTJsbGJuUWdLaUIwY21GdWMyMXBjM05wYjI1RWFYTjBZVzVqWlNBcE93a0pDWEpsZEhWeWJpQjBjbUZ1YzIxcGRIUmhibU5sSUNvZ2NtRmthV0Z1WTJVN0Nna0pmUW9KZlFvSmRtVmpOQ0JuWlhSSlFreFdiMngxYldWU1pXWnlZV04wYVc5dUtDQjJaV016SUc0c0lIWmxZek1nZGl3Z1pteHZZWFFnY205MVoyaHVaWE56TENCMlpXTXpJR1JwWm1aMWMyVkRiMnh2Y2l3Z2RtVmpNeUJ6Y0dWamRXeGhja052Ykc5eUxDQm1iRzloZENCemNHVmpkV3hoY2tZNU1Dd0tDUWwyWldNeklIQnZjMmwwYVc5dUxDQnRZWFEwSUcxdlpHVnNUV0YwY21sNExDQnRZWFEwSUhacFpYZE5ZWFJ5YVhnc0lHMWhkRFFnY0hKdmFrMWhkSEpwZUN3Z1pteHZZWFFnYVc5eUxDQm1iRzloZENCMGFHbGphMjVsYzNNc0Nna0pkbVZqTXlCaGRIUmxiblZoZEdsdmJrTnZiRzl5TENCbWJHOWhkQ0JoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sSUNrZ2V3b0pDWFpsWXpNZ2RISmhibk50YVhOemFXOXVVbUY1SUQwZ1oyVjBWbTlzZFcxbFZISmhibk50YVhOemFXOXVVbUY1S0NCdUxDQjJMQ0IwYUdsamEyNWxjM01zSUdsdmNpd2diVzlrWld4TllYUnlhWGdnS1RzS0NRbDJaV016SUhKbFpuSmhZM1JsWkZKaGVVVjRhWFFnUFNCd2IzTnBkR2x2YmlBcklIUnlZVzV6YldsemMybHZibEpoZVRzS0NRbDJaV00wSUc1a1kxQnZjeUE5SUhCeWIycE5ZWFJ5YVhnZ0tpQjJhV1YzVFdGMGNtbDRJQ29nZG1Wak5DZ2djbVZtY21GamRHVmtVbUY1UlhocGRDd2dNUzR3SUNrN0Nna0pkbVZqTWlCeVpXWnlZV04wYVc5dVEyOXZjbVJ6SUQwZ2JtUmpVRzl6TG5oNUlDOGdibVJqVUc5ekxuYzdDZ2tKY21WbWNtRmpkR2x2YmtOdmIzSmtjeUFyUFNBeExqQTdDZ2tKY21WbWNtRmpkR2x2YmtOdmIzSmtjeUF2UFNBeUxqQTdDZ2tKZG1Wak5DQjBjbUZ1YzIxcGRIUmxaRXhwWjJoMElEMGdaMlYwVkhKaGJuTnRhWE56YVc5dVUyRnRjR3hsS0NCeVpXWnlZV04wYVc5dVEyOXZjbVJ6TENCeWIzVm5hRzVsYzNNc0lHbHZjaUFwT3dvSkNYWmxZek1nWVhSMFpXNTFZWFJsWkVOdmJHOXlJRDBnWVhCd2JIbFdiMngxYldWQmRIUmxiblZoZEdsdmJpZ2dkSEpoYm5OdGFYUjBaV1JNYVdkb2RDNXlaMklzSUd4bGJtZDBhQ2dnZEhKaGJuTnRhWE56YVc5dVVtRjVJQ2tzSUdGMGRHVnVkV0YwYVc5dVEyOXNiM0lzSUdGMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVZ0tUc0tDUWwyWldNeklFWWdQU0JGYm5acGNtOXViV1Z1ZEVKU1JFWW9JRzRzSUhZc0lITndaV04xYkdGeVEyOXNiM0lzSUhOd1pXTjFiR0Z5Umprd0xDQnliM1ZuYUc1bGMzTWdLVHNLQ1FseVpYUjFjbTRnZG1Wak5DZ2dLQ0F4TGpBZ0xTQkdJQ2tnS2lCaGRIUmxiblZoZEdWa1EyOXNiM0lnS2lCa2FXWm1kWE5sUTI5c2IzSXNJSFJ5WVc1emJXbDBkR1ZrVEdsbmFIUXVZU0FwT3dvSmZRb2paVzVrYVdaZ0xDQnliU0E5SUdBamFXWWdLQ0JrWldacGJtVmtLQ0JWVTBWZlZWWWdLU0FtSmlBaElHUmxabWx1WldRb0lGVldVMTlXUlZKVVJWaGZUMDVNV1NBcElDa0tDWFpoY25scGJtY2dkbVZqTWlCMlZYWTdDaU5sYm1ScFptQXNJSE50SUQwZ1lDTnBabVJsWmlCVlUwVmZWVllLQ1NOcFptUmxaaUJWVmxOZlZrVlNWRVZZWDA5T1RGa0tDUWwyWldNeUlIWlZkanNLQ1NObGJITmxDZ2tKZG1GeWVXbHVaeUIyWldNeUlIWlZkanNLQ1NObGJtUnBaZ29KZFc1cFptOXliU0J0WVhReklIVjJWSEpoYm5ObWIzSnRPd29qWlc1a2FXWmdMQ0J2YlNBOUlHQWphV1prWldZZ1ZWTkZYMVZXQ2dsMlZYWWdQU0FvSUhWMlZISmhibk5tYjNKdElDb2dkbVZqTXlnZ2RYWXNJREVnS1NBcExuaDVPd29qWlc1a2FXWmdMQ0JoYlNBOUlHQWphV1lnWkdWbWFXNWxaQ2dnVlZORlgweEpSMGhVVFVGUUlDa2dmSHdnWkdWbWFXNWxaQ2dnVlZORlgwRlBUVUZRSUNrS0NYWmhjbmxwYm1jZ2RtVmpNaUIyVlhZeU93b2paVzVrYVdaZ0xDQnNiU0E5SUdBamFXWWdaR1ZtYVc1bFpDZ2dWVk5GWDB4SlIwaFVUVUZRSUNrZ2ZId2daR1ZtYVc1bFpDZ2dWVk5GWDBGUFRVRlFJQ2tLQ1dGMGRISnBZblYwWlNCMlpXTXlJSFYyTWpzS0NYWmhjbmxwYm1jZ2RtVmpNaUIyVlhZeU93b0pkVzVwWm05eWJTQnRZWFF6SUhWMk1sUnlZVzV6Wm05eWJUc0tJMlZ1WkdsbVlDd2dZMjBnUFNCZ0kybG1JR1JsWm1sdVpXUW9JRlZUUlY5TVNVZElWRTFCVUNBcElIeDhJR1JsWm1sdVpXUW9JRlZUUlY5QlQwMUJVQ0FwQ2dsMlZYWXlJRDBnS0NCMWRqSlVjbUZ1YzJadmNtMGdLaUIyWldNektDQjFkaklzSURFZ0tTQXBMbmg1T3dvalpXNWthV1pnTENCb2JTQTlJR0FqYVdZZ1pHVm1hVzVsWkNnZ1ZWTkZYMFZPVmsxQlVDQXBJSHg4SUdSbFptbHVaV1FvSUVSSlUxUkJUa05GSUNrZ2ZId2daR1ZtYVc1bFpDQW9JRlZUUlY5VFNFRkVUMWROUVZBZ0tTQjhmQ0JrWldacGJtVmtJQ2dnVlZORlgxUlNRVTVUVFVsVFUwbFBUaUFwQ2dsMlpXTTBJSGR2Y214a1VHOXphWFJwYjI0Z1BTQjJaV00wS0NCMGNtRnVjMlp2Y20xbFpDd2dNUzR3SUNrN0Nna2phV1prWldZZ1ZWTkZYMGxPVTFSQlRrTkpUa2NLQ1FsM2IzSnNaRkJ2YzJsMGFXOXVJRDBnYVc1emRHRnVZMlZOWVhSeWFYZ2dLaUIzYjNKc1pGQnZjMmwwYVc5dU93b0pJMlZ1WkdsbUNnbDNiM0pzWkZCdmMybDBhVzl1SUQwZ2JXOWtaV3hOWVhSeWFYZ2dLaUIzYjNKc1pGQnZjMmwwYVc5dU93b2paVzVrYVdaZ0xDQjFiU0E5SUdCMllYSjVhVzVuSUhabFl6SWdkbFYyT3dwMWJtbG1iM0p0SUcxaGRETWdkWFpVY21GdWMyWnZjbTA3Q25admFXUWdiV0ZwYmlncElIc0tDWFpWZGlBOUlDZ2dkWFpVY21GdWMyWnZjbTBnS2lCMlpXTXpLQ0IxZGl3Z01TQXBJQ2t1ZUhrN0NnbG5iRjlRYjNOcGRHbHZiaUE5SUhabFl6UW9JSEJ2YzJsMGFXOXVMbmg1TENBeExqQXNJREV1TUNBcE93cDlZQ3dnWkcwZ1BTQmdkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdkREpFT3dwMllYSjVhVzVuSUhabFl6SWdkbFYyT3dwMmIybGtJRzFoYVc0b0tTQjdDZ2wyWldNMElIUmxlRU52Ykc5eUlEMGdkR1Y0ZEhWeVpUSkVLQ0IwTWtRc0lIWlZkaUFwT3dvSloyeGZSbkpoWjBOdmJHOXlJRDBnYldGd1ZHVjRaV3hVYjB4cGJtVmhjaWdnZEdWNFEyOXNiM0lnS1RzS0NTTnBibU5zZFdSbElEeDBiMjVsYldGd2NHbHVaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4bGJtTnZaR2x1WjNOZlpuSmhaMjFsYm5RK0NuMWdMQ0JtYlNBOUlHQjJZWEo1YVc1bklIWmxZek1nZGxkdmNteGtSR2x5WldOMGFXOXVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ3AyYjJsa0lHMWhhVzRvS1NCN0NnbDJWMjl5YkdSRWFYSmxZM1JwYjI0Z1BTQjBjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JSEJ2YzJsMGFXOXVMQ0J0YjJSbGJFMWhkSEpwZUNBcE93b0pJMmx1WTJ4MVpHVWdQR0psWjJsdVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHdjbTlxWldOMFgzWmxjblJsZUQ0S0NXZHNYMUJ2YzJsMGFXOXVMbm9nUFNCbmJGOVFiM05wZEdsdmJpNTNPd3A5WUN3Z2NHMGdQU0JnSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjlqYjIxdGIyNWZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RXNXBabTl5YlNCbWJHOWhkQ0J2Y0dGamFYUjVPd3AyWVhKNWFXNW5JSFpsWXpNZ2RsZHZjbXhrUkdseVpXTjBhVzl1T3dvamFXNWpiSFZrWlNBOFkzVmlaVjkxZGw5eVpXWnNaV04wYVc5dVgyWnlZV2R0Wlc1MFBncDJiMmxrSUcxaGFXNG9LU0I3Q2dsMlpXTXpJSFpTWldac1pXTjBJRDBnZGxkdmNteGtSR2x5WldOMGFXOXVPd29KSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjltY21GbmJXVnVkRDRLQ1dkc1gwWnlZV2REYjJ4dmNpQTlJR1Z1ZGtOdmJHOXlPd29KWjJ4ZlJuSmhaME52Ykc5eUxtRWdLajBnYjNCaFkybDBlVHNLQ1NOcGJtTnNkV1JsSUR4MGIyNWxiV0Z3Y0dsdVoxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhsYm1OdlpHbHVaM05mWm5KaFoyMWxiblErQ24xZ0xDQnRiU0E5SUdBamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHRiM0p3YUhSaGNtZGxkRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BITnJhVzV1YVc1blgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5MlpYSjBaWGcrQ25aaGNubHBibWNnZG1Wak1pQjJTR2xuYUZCeVpXTnBjMmx2YmxwWE93cDJiMmxrSUcxaGFXNG9LU0I3Q2dramFXNWpiSFZrWlNBOGRYWmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1aVlYTmxYM1psY25SbGVENEtDU05wWm1SbFppQlZVMFZmUkVsVFVFeEJRMFZOUlU1VVRVRlFDZ2tKSTJsdVkyeDFaR1VnUEdKbFoybHVibTl5YldGc1gzWmxjblJsZUQ0S0NRa2phVzVqYkhWa1pTQThiVzl5Y0dodWIzSnRZV3hmZG1WeWRHVjRQZ29KQ1NOcGJtTnNkV1JsSUR4emEybHVibTl5YldGc1gzWmxjblJsZUQ0S0NTTmxibVJwWmdvSkkybHVZMngxWkdVZ1BHSmxaMmx1WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm01cGJtZGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1JwYzNCc1lXTmxiV1Z1ZEcxaGNGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjSEp2YW1WamRGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTkyWlhKMFpYZytDZ2wyU0dsbmFGQnlaV05wYzJsdmJscFhJRDBnWjJ4ZlVHOXphWFJwYjI0dWVuYzdDbjFnTENCbmJTQTlJR0FqYVdZZ1JFVlFWRWhmVUVGRFMwbE9SeUE5UFNBek1qQXdDZ2wxYm1sbWIzSnRJR1pzYjJGMElHOXdZV05wZEhrN0NpTmxibVJwWmdvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGNHRmphMmx1Wno0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVhSbGMzUmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTltY21GbmJXVnVkRDRLZG1GeWVXbHVaeUIyWldNeUlIWklhV2RvVUhKbFkybHphVzl1V2xjN0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dsMlpXTTBJR1JwWm1aMWMyVkRiMnh2Y2lBOUlIWmxZelFvSURFdU1DQXBPd29KSTJsbUlFUkZVRlJJWDFCQlEwdEpUa2NnUFQwZ016SXdNQW9KQ1dScFptWjFjMlZEYjJ4dmNpNWhJRDBnYjNCaFkybDBlVHNLQ1NObGJtUnBaZ29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmWm5KaFoyMWxiblErQ2dsbWJHOWhkQ0JtY21GblEyOXZjbVJhSUQwZ01DNDFJQ29nZGtocFoyaFFjbVZqYVhOcGIyNWFWMXN3WFNBdklIWklhV2RvVUhKbFkybHphVzl1V2xkYk1WMGdLeUF3TGpVN0Nna2phV1lnUkVWUVZFaGZVRUZEUzBsT1J5QTlQU0F6TWpBd0Nna0paMnhmUm5KaFowTnZiRzl5SUQwZ2RtVmpOQ2dnZG1Wak15Z2dNUzR3SUMwZ1puSmhaME52YjNKa1dpQXBMQ0J2Y0dGamFYUjVJQ2s3Q2dralpXeHBaaUJFUlZCVVNGOVFRVU5MU1U1SElEMDlJRE15TURFS0NRbG5iRjlHY21GblEyOXNiM0lnUFNCd1lXTnJSR1Z3ZEdoVWIxSkhRa0VvSUdaeVlXZERiMjl5WkZvZ0tUc0tDU05sYm1ScFpncDlZQ3dnZUcwZ1BTQmdJMlJsWm1sdVpTQkVTVk5VUVU1RFJRcDJZWEo1YVc1bklIWmxZek1nZGxkdmNteGtVRzl6YVhScGIyNDdDaU5wYm1Oc2RXUmxJRHhqYjIxdGIyNCtDaU5wYm1Oc2RXUmxJRHgxZGw5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1JwYzNCc1lXTmxiV1Z1ZEcxaGNGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTkyWlhKMFpYZytDblp2YVdRZ2JXRnBiaWdwSUhzS0NTTnBibU5zZFdSbElEeDFkbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtSmhjMlZmZG1WeWRHVjRQZ29KSTJsbVpHVm1JRlZUUlY5RVNWTlFURUZEUlUxRlRsUk5RVkFLQ1FramFXNWpiSFZrWlNBOFltVm5hVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pDU05wYm1Oc2RXUmxJRHh0YjNKd2FHNXZjbTFoYkY5MlpYSjBaWGcrQ2drSkkybHVZMngxWkdVZ1BITnJhVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMlZ1WkdsbUNna2phVzVqYkhWa1pTQThZbVZuYVc1ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdWJtbHVaMTkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdsemNHeGhZMlZ0Wlc1MGJXRndYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh3Y205cVpXTjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHgzYjNKc1pIQnZjMTkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM1psY25SbGVENEtDWFpYYjNKc1pGQnZjMmwwYVc5dUlEMGdkMjl5YkdSUWIzTnBkR2x2Ymk1NGVYbzdDbjFnTENCNWJTQTlJR0FqWkdWbWFXNWxJRVJKVTFSQlRrTkZDblZ1YVdadmNtMGdkbVZqTXlCeVpXWmxjbVZ1WTJWUWIzTnBkR2x2YmpzS2RXNXBabTl5YlNCbWJHOWhkQ0J1WldGeVJHbHpkR0Z1WTJVN0NuVnVhV1p2Y20wZ1pteHZZWFFnWm1GeVJHbHpkR0Z1WTJVN0NuWmhjbmxwYm1jZ2RtVmpNeUIyVjI5eWJHUlFiM05wZEdsdmJqc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQSEJoWTJ0cGJtYytDaU5wYm1Oc2RXUmxJRHgxZGw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVd4d2FHRjBaWE4wWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUlDZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dsMlpXTTBJR1JwWm1aMWMyVkRiMnh2Y2lBOUlIWmxZelFvSURFdU1DQXBPd29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0NnbG1iRzloZENCa2FYTjBJRDBnYkdWdVozUm9LQ0IyVjI5eWJHUlFiM05wZEdsdmJpQXRJSEpsWm1WeVpXNWpaVkJ2YzJsMGFXOXVJQ2s3Q2dsa2FYTjBJRDBnS0NCa2FYTjBJQzBnYm1WaGNrUnBjM1JoYm1ObElDa2dMeUFvSUdaaGNrUnBjM1JoYm1ObElDMGdibVZoY2tScGMzUmhibU5sSUNrN0NnbGthWE4wSUQwZ2MyRjBkWEpoZEdVb0lHUnBjM1FnS1RzS0NXZHNYMFp5WVdkRGIyeHZjaUE5SUhCaFkydEVaWEIwYUZSdlVrZENRU2dnWkdsemRDQXBPd3A5WUN3Z2RtMGdQU0JnZG1GeWVXbHVaeUIyWldNeklIWlhiM0pzWkVScGNtVmpkR2x2YmpzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S2RtOXBaQ0J0WVdsdUtDa2dld29KZGxkdmNteGtSR2x5WldOMGFXOXVJRDBnZEhKaGJuTm1iM0p0UkdseVpXTjBhVzl1S0NCd2IzTnBkR2x2Yml3Z2JXOWtaV3hOWVhSeWFYZ2dLVHNLQ1NOcGJtTnNkV1JsSUR4aVpXZHBibDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Y0hKdmFtVmpkRjkyWlhKMFpYZytDbjFnTENCZmJTQTlJR0IxYm1sbWIzSnRJSE5oYlhCc1pYSXlSQ0IwUlhGMWFYSmxZM1E3Q25aaGNubHBibWNnZG1Wak15QjJWMjl5YkdSRWFYSmxZM1JwYjI0N0NpTnBibU5zZFdSbElEeGpiMjF0YjI0K0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1habFl6TWdaR2x5WldOMGFXOXVJRDBnYm05eWJXRnNhWHBsS0NCMlYyOXliR1JFYVhKbFkzUnBiMjRnS1RzS0NYWmxZeklnYzJGdGNHeGxWVllnUFNCbGNYVnBjbVZqZEZWMktDQmthWEpsWTNScGIyNGdLVHNLQ1habFl6UWdkR1Y0UTI5c2IzSWdQU0IwWlhoMGRYSmxNa1FvSUhSRmNYVnBjbVZqZEN3Z2MyRnRjR3hsVlZZZ0tUc0tDV2RzWDBaeVlXZERiMnh2Y2lBOUlHMWhjRlJsZUdWc1ZHOU1hVzVsWVhJb0lIUmxlRU52Ykc5eUlDazdDZ2tqYVc1amJIVmtaU0E4ZEc5dVpXMWhjSEJwYm1kZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThaVzVqYjJScGJtZHpYMlp5WVdkdFpXNTBQZ3A5WUN3Z1RXMGdQU0JnZFc1cFptOXliU0JtYkc5aGRDQnpZMkZzWlRzS1lYUjBjbWxpZFhSbElHWnNiMkYwSUd4cGJtVkVhWE4wWVc1alpUc0tkbUZ5ZVdsdVp5Qm1iRzloZENCMlRHbHVaVVJwYzNSaGJtTmxPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZmRtVnlkR1Y0UGdwMmIybGtJRzFoYVc0b0tTQjdDZ2wyVEdsdVpVUnBjM1JoYm1ObElEMGdjMk5oYkdVZ0tpQnNhVzVsUkdsemRHRnVZMlU3Q2dramFXNWpiSFZrWlNBOFkyOXNiM0pmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdKbFoybHVYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh0YjNKd2FIUmhjbWRsZEY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGNISnZhbVZqZEY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThabTluWDNabGNuUmxlRDRLZldBc0lHSnRJRDBnWUhWdWFXWnZjbTBnZG1Wak15QmthV1ptZFhObE93cDFibWxtYjNKdElHWnNiMkYwSUc5d1lXTnBkSGs3Q25WdWFXWnZjbTBnWm14dllYUWdaR0Z6YUZOcGVtVTdDblZ1YVdadmNtMGdabXh2WVhRZ2RHOTBZV3hUYVhwbE93cDJZWEo1YVc1bklHWnNiMkYwSUhaTWFXNWxSR2x6ZEdGdVkyVTdDaU5wYm1Oc2RXUmxJRHhqYjIxdGIyNCtDaU5wYm1Oc2RXUmxJRHhqYjJ4dmNsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFptOW5YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblErQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZabkpoWjIxbGJuUStDZ2xwWmlBb0lHMXZaQ2dnZGt4cGJtVkVhWE4wWVc1alpTd2dkRzkwWVd4VGFYcGxJQ2tnUGlCa1lYTm9VMmw2WlNBcElIc0tDUWxrYVhOallYSmtPd29KZlFvSmRtVmpNeUJ2ZFhSbmIybHVaMHhwWjJoMElEMGdkbVZqTXlnZ01DNHdJQ2s3Q2dsMlpXTTBJR1JwWm1aMWMyVkRiMnh2Y2lBOUlIWmxZelFvSUdScFptWjFjMlVzSUc5d1lXTnBkSGtnS1RzS0NTTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbDltY21GbmJXVnVkRDRLQ1c5MWRHZHZhVzVuVEdsbmFIUWdQU0JrYVdabWRYTmxRMjlzYjNJdWNtZGlPd29KSTJsdVkyeDFaR1VnUEc5MWRIQjFkRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4MGIyNWxiV0Z3Y0dsdVoxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhsYm1OdlpHbHVaM05mWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFptOW5YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhCeVpXMTFiSFJwY0d4cFpXUmZZV3h3YUdGZlpuSmhaMjFsYm5RK0NuMWdMQ0IzYlNBOUlHQWphVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeDFkakpmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGxiblp0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhqYjJ4dmNsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5d1lYSnpYM1psY25SbGVENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BIVjJYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHgxZGpKZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5WDNabGNuUmxlRDRLQ1NOcFppQmtaV1pwYm1Wa0lDZ2dWVk5GWDBWT1ZrMUJVQ0FwSUh4OElHUmxabWx1WldRZ0tDQlZVMFZmVTB0SlRrNUpUa2NnS1FvSkNTTnBibU5zZFdSbElEeGlaV2RwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tKSTJsdVkyeDFaR1VnUEcxdmNuQm9ibTl5YldGc1gzWmxjblJsZUQ0S0NRa2phVzVqYkhWa1pTQThjMnRwYm1KaGMyVmZkbVZ5ZEdWNFBnb0pDU05wYm1Oc2RXUmxJRHh6YTJsdWJtOXliV0ZzWDNabGNuUmxlRDRLQ1FramFXNWpiSFZrWlNBOFpHVm1ZWFZzZEc1dmNtMWhiRjkyWlhKMFpYZytDZ2tqWlc1a2FXWUtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4d2NtOXFaV04wWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeDNiM0pzWkhCdmMxOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThaVzUyYldGd1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeG1iMmRmZG1WeWRHVjRQZ3A5WUN3Z1UyMGdQU0JnZFc1cFptOXliU0IyWldNeklHUnBabVoxYzJVN0NuVnVhV1p2Y20wZ1pteHZZWFFnYjNCaFkybDBlVHNLSTJsbWJtUmxaaUJHVEVGVVgxTklRVVJGUkFvSmRtRnllV2x1WnlCMlpXTXpJSFpPYjNKdFlXdzdDaU5sYm1ScFpnb2phVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThaR2wwYUdWeWFXNW5YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4ZFhaZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhWMk1sOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGIyMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiR2xuYUhSdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHVnVkbTFoY0Y5amIyMXRiMjVmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1Z1ZG0xaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFkzVmlaVjkxZGw5eVpXWnNaV04wYVc5dVgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThabTluWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh6Y0dWamRXeGhjbTFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgyWnlZV2R0Wlc1MFBncDJiMmxrSUcxaGFXNG9LU0I3Q2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDJaeVlXZHRaVzUwUGdvSmRtVmpOQ0JrYVdabWRYTmxRMjlzYjNJZ1BTQjJaV00wS0NCa2FXWm1kWE5sTENCdmNHRmphWFI1SUNrN0Nna2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXlYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdGc2NHaGhiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh6Y0dWamRXeGhjbTFoY0Y5bWNtRm5iV1Z1ZEQ0S0NWSmxabXhsWTNSbFpFeHBaMmgwSUhKbFpteGxZM1JsWkV4cFoyaDBJRDBnVW1WbWJHVmpkR1ZrVEdsbmFIUW9JSFpsWXpNb0lEQXVNQ0FwTENCMlpXTXpLQ0F3TGpBZ0tTd2dkbVZqTXlnZ01DNHdJQ2tzSUhabFl6TW9JREF1TUNBcElDazdDZ2tqYVdaa1pXWWdWVk5GWDB4SlIwaFVUVUZRQ2drSmRtVmpOQ0JzYVdkb2RFMWhjRlJsZUdWc1BTQjBaWGgwZFhKbE1rUW9JR3hwWjJoMFRXRndMQ0IyVlhZeUlDazdDZ2tKY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDczlJR3hwWjJoMFRXRndWR1Y0Wld4VWIweHBibVZoY2lnZ2JHbG5hSFJOWVhCVVpYaGxiQ0FwTG5KbllpQXFJR3hwWjJoMFRXRndTVzUwWlc1emFYUjVPd29KSTJWc2MyVUtDUWx5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRFUnBabVoxYzJVZ0t6MGdkbVZqTXlnZ01TNHdJQ2s3Q2dralpXNWthV1lLQ1NOcGJtTnNkV1JsSUR4aGIyMWhjRjltY21GbmJXVnVkRDRLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpTQXFQU0JrYVdabWRYTmxRMjlzYjNJdWNtZGlPd29KZG1Wak15QnZkWFJuYjJsdVoweHBaMmgwSUQwZ2NtVm1iR1ZqZEdWa1RHbG5hSFF1YVc1a2FYSmxZM1JFYVdabWRYTmxPd29KSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4dmRYUndkWFJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGRHOXVaVzFoY0hCcGJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Wlc1amIyUnBibWR6WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHWnZaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4d2NtVnRkV3gwYVhCc2FXVmtYMkZzY0doaFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR1JwZEdobGNtbHVaMTltY21GbmJXVnVkRDRLZldBc0lGUnRJRDBnWUNOa1pXWnBibVVnVEVGTlFrVlNWQXAyWVhKNWFXNW5JSFpsWXpNZ2RreHBaMmgwUm5KdmJuUTdDblpoY25scGJtY2dkbVZqTXlCMlNXNWthWEpsWTNSR2NtOXVkRHNLSTJsbVpHVm1JRVJQVlVKTVJWOVRTVVJGUkFvSmRtRnllV2x1WnlCMlpXTXpJSFpNYVdkb2RFSmhZMnM3Q2dsMllYSjVhVzVuSUhabFl6TWdka2x1WkdseVpXTjBRbUZqYXpzS0kyVnVaR2xtQ2lOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4MWRsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEhWMk1sOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHSnpaR1p6UGdvamFXNWpiSFZrWlNBOGJHbG5hSFJ6WDNCaGNuTmZZbVZuYVc0K0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzF2Y25Cb2RHRnlaMlYwWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThjMnRwYm01cGJtZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4emFHRmtiM2R0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOXdZWEp6WDNabGNuUmxlRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQSFYyWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4MWRqSmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ylc5eWNHaHViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITnJhVzVpWVhObFgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1Ym05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhrWldaaGRXeDBibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh3Y205cVpXTjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4M2IzSnNaSEJ2YzE5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFpXNTJiV0Z3WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4c2FXZG9kSE5mYkdGdFltVnlkRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJoaFpHOTNiV0Z3WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4bWIyZGZkbVZ5ZEdWNFBncDlZQ3dnUlcwZ1BTQmdkVzVwWm05eWJTQjJaV016SUdScFptWjFjMlU3Q25WdWFXWnZjbTBnZG1Wak15QmxiV2x6YzJsMlpUc0tkVzVwWm05eWJTQm1iRzloZENCdmNHRmphWFI1T3dwMllYSjVhVzVuSUhabFl6TWdka3hwWjJoMFJuSnZiblE3Q25aaGNubHBibWNnZG1Wak15QjJTVzVrYVhKbFkzUkdjbTl1ZERzS0kybG1aR1ZtSUVSUFZVSk1SVjlUU1VSRlJBb0pkbUZ5ZVdsdVp5QjJaV016SUhaTWFXZG9kRUpoWTJzN0NnbDJZWEo1YVc1bklIWmxZek1nZGtsdVpHbHlaV04wUW1GamF6c0tJMlZ1WkdsbUNpTnBibU5zZFdSbElEeGpiMjF0YjI0K0NpTnBibU5zZFdSbElEeHdZV05yYVc1blBnb2phVzVqYkhWa1pTQThaR2wwYUdWeWFXNW5YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4ZFhaZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhWMk1sOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGIyMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiR2xuYUhSdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHVnRhWE56YVhabGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGxiblp0WVhCZlkyOXRiVzl1WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhsYm5adFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHTjFZbVZmZFhaZmNtVm1iR1ZqZEdsdmJsOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0p6WkdaelBnb2phVzVqYkhWa1pTQThiR2xuYUhSelgzQmhjbk5mWW1WbmFXNCtDaU5wYm1Oc2RXUmxJRHhtYjJkZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhOb1lXUnZkMjFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YzJoaFpHOTNiV0Z6YTE5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YzNCbFkzVnNZWEp0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mY0dGeWMxOW1jbUZuYldWdWRENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5bWNtRm5iV1Z1ZEQ0S0NYWmxZelFnWkdsbVpuVnpaVU52Ykc5eUlEMGdkbVZqTkNnZ1pHbG1ablZ6WlN3Z2IzQmhZMmwwZVNBcE93b0pVbVZtYkdWamRHVmtUR2xuYUhRZ2NtVm1iR1ZqZEdWa1RHbG5hSFFnUFNCU1pXWnNaV04wWldSTWFXZG9kQ2dnZG1Wak15Z2dNQzR3SUNrc0lIWmxZek1vSURBdU1DQXBMQ0IyWldNektDQXdMakFnS1N3Z2RtVmpNeWdnTUM0d0lDa2dLVHNLQ1habFl6TWdkRzkwWVd4RmJXbHpjMmwyWlZKaFpHbGhibU5sSUQwZ1pXMXBjM05wZG1VN0Nna2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXlYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdGc2NHaGhiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh6Y0dWamRXeGhjbTFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGxiV2x6YzJsMlpXMWhjRjltY21GbmJXVnVkRDRLQ1NOcFptUmxaaUJFVDFWQ1RFVmZVMGxFUlVRS0NRbHlaV1pzWldOMFpXUk1hV2RvZEM1cGJtUnBjbVZqZEVScFptWjFjMlVnS3owZ0tDQm5iRjlHY205dWRFWmhZMmx1WnlBcElEOGdka2x1WkdseVpXTjBSbkp2Ym5RZ09pQjJTVzVrYVhKbFkzUkNZV05yT3dvSkkyVnNjMlVLQ1FseVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRVJwWm1aMWMyVWdLejBnZGtsdVpHbHlaV04wUm5KdmJuUTdDZ2tqWlc1a2FXWUtDU05wYm1Oc2RXUmxJRHhzYVdkb2RHMWhjRjltY21GbmJXVnVkRDRLQ1hKbFpteGxZM1JsWkV4cFoyaDBMbWx1WkdseVpXTjBSR2xtWm5WelpTQXFQU0JDVWtSR1gweGhiV0psY25Rb0lHUnBabVoxYzJWRGIyeHZjaTV5WjJJZ0tUc0tDU05wWm1SbFppQkVUMVZDVEVWZlUwbEVSVVFLQ1FseVpXWnNaV04wWldSTWFXZG9kQzVrYVhKbFkzUkVhV1ptZFhObElEMGdLQ0JuYkY5R2NtOXVkRVpoWTJsdVp5QXBJRDhnZGt4cFoyaDBSbkp2Ym5RZ09pQjJUR2xuYUhSQ1lXTnJPd29KSTJWc2MyVUtDUWx5Wldac1pXTjBaV1JNYVdkb2RDNWthWEpsWTNSRWFXWm1kWE5sSUQwZ2RreHBaMmgwUm5KdmJuUTdDZ2tqWlc1a2FXWUtDWEpsWm14bFkzUmxaRXhwWjJoMExtUnBjbVZqZEVScFptWjFjMlVnS2owZ1FsSkVSbDlNWVcxaVpYSjBLQ0JrYVdabWRYTmxRMjlzYjNJdWNtZGlJQ2tnS2lCblpYUlRhR0ZrYjNkTllYTnJLQ2s3Q2dramFXNWpiSFZrWlNBOFlXOXRZWEJmWm5KaFoyMWxiblErQ2dsMlpXTXpJRzkxZEdkdmFXNW5UR2xuYUhRZ1BTQnlaV1pzWldOMFpXUk1hV2RvZEM1a2FYSmxZM1JFYVdabWRYTmxJQ3NnY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDc2dkRzkwWVd4RmJXbHpjMmwyWlZKaFpHbGhibU5sT3dvSkkybHVZMngxWkdVZ1BHVnVkbTFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHZkWFJ3ZFhSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThkRzl1WlcxaGNIQnBibWRmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFpXNWpiMlJwYm1kelgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHdjbVZ0ZFd4MGFYQnNhV1ZrWDJGc2NHaGhYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdScGRHaGxjbWx1WjE5bWNtRm5iV1Z1ZEQ0S2ZXQXNJRUZ0SUQwZ1lDTmtaV1pwYm1VZ1RVRlVRMEZRQ25aaGNubHBibWNnZG1Wak15QjJWbWxsZDFCdmMybDBhVzl1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4amIyeHZjbDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHUnBjM0JzWVdObGJXVnVkRzFoY0Y5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5d1lYSnpYM1psY25SbGVENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BIVjJYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZbVZuYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEcxdmNuQm9ibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphMmx1WW1GelpWOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm01dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdWbVlYVnNkRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGlaV2RwYmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2gwWVhKblpYUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWFXNW5YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhrYVhOd2JHRmpaVzFsYm5SdFlYQmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdadloxOTJaWEowWlhnK0NnbDJWbWxsZDFCdmMybDBhVzl1SUQwZ0xTQnRkbEJ2YzJsMGFXOXVMbmg1ZWpzS2ZXQXNJRU50SUQwZ1lDTmtaV1pwYm1VZ1RVRlVRMEZRQ25WdWFXWnZjbTBnZG1Wak15QmthV1ptZFhObE93cDFibWxtYjNKdElHWnNiMkYwSUc5d1lXTnBkSGs3Q25WdWFXWnZjbTBnYzJGdGNHeGxjakpFSUcxaGRHTmhjRHNLZG1GeWVXbHVaeUIyWldNeklIWldhV1YzVUc5emFYUnBiMjQ3Q2lOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4a2FYUm9aWEpwYm1kZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdOdmJHOXlYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeDFkbDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGMFpYTjBYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeG1iMmRmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFluVnRjRzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Ym05eWJXRnNiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZlpuSmhaMjFsYm5RK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dsMlpXTTBJR1JwWm1aMWMyVkRiMnh2Y2lBOUlIWmxZelFvSUdScFptWjFjMlVzSUc5d1lXTnBkSGtnS1RzS0NTTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4dFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WVd4d2FHRnRZWEJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFlXeHdhR0YwWlhOMFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOW1jbUZuYldWdWRGOWlaV2RwYmo0S0NTTnBibU5zZFdSbElEeHViM0p0WVd4ZlpuSmhaMjFsYm5SZmJXRndjejRLQ1habFl6TWdkbWxsZDBScGNpQTlJRzV2Y20xaGJHbDZaU2dnZGxacFpYZFFiM05wZEdsdmJpQXBPd29KZG1Wak15QjRJRDBnYm05eWJXRnNhWHBsS0NCMlpXTXpLQ0IyYVdWM1JHbHlMbm9zSURBdU1Dd2dMU0IyYVdWM1JHbHlMbmdnS1NBcE93b0pkbVZqTXlCNUlEMGdZM0p2YzNNb0lIWnBaWGRFYVhJc0lIZ2dLVHNLQ1habFl6SWdkWFlnUFNCMlpXTXlLQ0JrYjNRb0lIZ3NJRzV2Y20xaGJDQXBMQ0JrYjNRb0lIa3NJRzV2Y20xaGJDQXBJQ2tnS2lBd0xqUTVOU0FySURBdU5Uc0tDU05wWm1SbFppQlZVMFZmVFVGVVEwRlFDZ2tKZG1Wak5DQnRZWFJqWVhCRGIyeHZjaUE5SUhSbGVIUjFjbVV5UkNnZ2JXRjBZMkZ3TENCMWRpQXBPd29KQ1cxaGRHTmhjRU52Ykc5eUlEMGdiV0YwWTJGd1ZHVjRaV3hVYjB4cGJtVmhjaWdnYldGMFkyRndRMjlzYjNJZ0tUc0tDU05sYkhObENna0pkbVZqTkNCdFlYUmpZWEJEYjJ4dmNpQTlJSFpsWXpRb0lERXVNQ0FwT3dvSkkyVnVaR2xtQ2dsMlpXTXpJRzkxZEdkdmFXNW5UR2xuYUhRZ1BTQmthV1ptZFhObFEyOXNiM0l1Y21kaUlDb2diV0YwWTJGd1EyOXNiM0l1Y21kaU93b0pJMmx1WTJ4MVpHVWdQRzkxZEhCMWRGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHgwYjI1bGJXRndjR2x1WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGxibU52WkdsdVozTmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Wm05blgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQSEJ5WlcxMWJIUnBjR3hwWldSZllXeHdhR0ZmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFpHbDBhR1Z5YVc1blgyWnlZV2R0Wlc1MFBncDlZQ3dnVEcwZ1BTQmdJMlJsWm1sdVpTQk9UMUpOUVV3S0kybG1JR1JsWm1sdVpXUW9JRVpNUVZSZlUwaEJSRVZFSUNrZ2ZId2daR1ZtYVc1bFpDZ2dWVk5GWDBKVlRWQk5RVkFnS1NCOGZDQmtaV1pwYm1Wa0tDQlVRVTVIUlU1VVUxQkJRMFZmVGs5U1RVRk1UVUZRSUNrS0NYWmhjbmxwYm1jZ2RtVmpNeUIyVm1sbGQxQnZjMmwwYVc5dU93b2paVzVrYVdZS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFpHbHpjR3hoWTJWdFpXNTBiV0Z3WDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThibTl5YldGc1gzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4Ylc5eWNHaDBZWEpuWlhSZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh6YTJsdWJtbHVaMTl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZkbVZ5ZEdWNFBncDJiMmxrSUcxaGFXNG9LU0I3Q2dramFXNWpiSFZrWlNBOGRYWmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR0psWjJsdWJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4dGIzSndhRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm1KaGMyVmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdSbFptRjFiSFJ1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThZbVZuYVc1ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdWJtbHVaMTkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WkdsemNHeGhZMlZ0Wlc1MGJXRndYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh3Y205cVpXTjBYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFkyeHBjSEJwYm1kZmNHeGhibVZ6WDNabGNuUmxlRDRLSTJsbUlHUmxabWx1WldRb0lFWk1RVlJmVTBoQlJFVkVJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMEpWVFZCTlFWQWdLU0I4ZkNCa1pXWnBibVZrS0NCVVFVNUhSVTVVVTFCQlEwVmZUazlTVFVGTVRVRlFJQ2tLQ1haV2FXVjNVRzl6YVhScGIyNGdQU0F0SUcxMlVHOXphWFJwYjI0dWVIbDZPd29qWlc1a2FXWUtmV0FzSUZKdElEMGdZQ05rWldacGJtVWdUazlTVFVGTUNuVnVhV1p2Y20wZ1pteHZZWFFnYjNCaFkybDBlVHNLSTJsbUlHUmxabWx1WldRb0lFWk1RVlJmVTBoQlJFVkVJQ2tnZkh3Z1pHVm1hVzVsWkNnZ1ZWTkZYMEpWVFZCTlFWQWdLU0I4ZkNCa1pXWnBibVZrS0NCVVFVNUhSVTVVVTFCQlEwVmZUazlTVFVGTVRVRlFJQ2tLQ1haaGNubHBibWNnZG1Wak15QjJWbWxsZDFCdmMybDBhVzl1T3dvalpXNWthV1lLSTJsdVkyeDFaR1VnUEhCaFkydHBibWMrQ2lOcGJtTnNkV1JsSUR4MWRsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJtOXliV0ZzWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhpZFcxd2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHViM0p0WVd4dFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmNHRnljMTltY21GbmJXVnVkRDRLZG05cFpDQnRZV2x1S0NrZ2V3b0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHViM0p0WVd4ZlpuSmhaMjFsYm5SZlltVm5hVzQrQ2dramFXNWpiSFZrWlNBOGJtOXliV0ZzWDJaeVlXZHRaVzUwWDIxaGNITStDZ2xuYkY5R2NtRm5RMjlzYjNJZ1BTQjJaV00wS0NCd1lXTnJUbTl5YldGc1ZHOVNSMElvSUc1dmNtMWhiQ0FwTENCdmNHRmphWFI1SUNrN0NuMWdMQ0JRYlNBOUlHQWpaR1ZtYVc1bElGQklUMDVIQ25aaGNubHBibWNnZG1Wak15QjJWbWxsZDFCdmMybDBhVzl1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4MWRqSmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGxiblp0WVhCZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhqYjJ4dmNsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdadloxOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHMXZjbkJvZEdGeVoyVjBYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGMydHBibTVwYm1kZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh6YUdGa2IzZHRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgzWmxjblJsZUQ0S0kybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5d1lYSnpYM1psY25SbGVENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BIVjJYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHgxZGpKZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHTnZiRzl5WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4aVpXZHBibTV2Y20xaGJGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0dodWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNWlZWE5sWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4emEybHVibTl5YldGc1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGtaV1poZFd4MGJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4dWIzSnRZV3hmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdKbFoybHVYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh0YjNKd2FIUmhjbWRsZEY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGMydHBibTVwYm1kZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHUnBjM0JzWVdObGJXVnVkRzFoY0Y5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGNISnZhbVZqZEY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOTJaWEowWlhnK0NnbDJWbWxsZDFCdmMybDBhVzl1SUQwZ0xTQnRkbEJ2YzJsMGFXOXVMbmg1ZWpzS0NTTnBibU5zZFdSbElEeDNiM0pzWkhCdmMxOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThaVzUyYldGd1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5MlpYSjBaWGcrQ24xZ0xDQkpiU0E5SUdBalpHVm1hVzVsSUZCSVQwNUhDblZ1YVdadmNtMGdkbVZqTXlCa2FXWm1kWE5sT3dwMWJtbG1iM0p0SUhabFl6TWdaVzFwYzNOcGRtVTdDblZ1YVdadmNtMGdkbVZqTXlCemNHVmpkV3hoY2pzS2RXNXBabTl5YlNCbWJHOWhkQ0J6YUdsdWFXNWxjM003Q25WdWFXWnZjbTBnWm14dllYUWdiM0JoWTJsMGVUc0tJMmx1WTJ4MVpHVWdQR052YlcxdmJqNEtJMmx1WTJ4MVpHVWdQSEJoWTJ0cGJtYytDaU5wYm1Oc2RXUmxJRHhrYVhSb1pYSnBibWRmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR052Ykc5eVgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4MWRsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGRYWXlYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0ZzY0doaGJXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGhiSEJvWVhSbGMzUmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnZiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYVdkb2RHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThaVzFwYzNOcGRtVnRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1Z1ZG0xaGNGOWpiMjF0YjI1ZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdWdWRtMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZM1ZpWlY5MWRsOXlaV1pzWldOMGFXOXVYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4Wm05blgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aWMyUm1jejRLSTJsdVkyeDFaR1VnUEd4cFoyaDBjMTl3WVhKelgySmxaMmx1UGdvamFXNWpiSFZrWlNBOGJtOXliV0ZzWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYVdkb2RITmZjR2h2Ym1kZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhOb1lXUnZkMjFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WW5WdGNHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThibTl5YldGc2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHpjR1ZqZFd4aGNtMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiRzluWkdWd2RHaGlkV1pmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR05zYVhCd2FXNW5YM0JzWVc1bGMxOXdZWEp6WDJaeVlXZHRaVzUwUGdwMmIybGtJRzFoYVc0b0tTQjdDZ2tqYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYMlp5WVdkdFpXNTBQZ29KZG1Wak5DQmthV1ptZFhObFEyOXNiM0lnUFNCMlpXTTBLQ0JrYVdabWRYTmxMQ0J2Y0dGamFYUjVJQ2s3Q2dsU1pXWnNaV04wWldSTWFXZG9kQ0J5Wldac1pXTjBaV1JNYVdkb2RDQTlJRkpsWm14bFkzUmxaRXhwWjJoMEtDQjJaV016S0NBd0xqQWdLU3dnZG1Wak15Z2dNQzR3SUNrc0lIWmxZek1vSURBdU1DQXBMQ0IyWldNektDQXdMakFnS1NBcE93b0pkbVZqTXlCMGIzUmhiRVZ0YVhOemFYWmxVbUZrYVdGdVkyVWdQU0JsYldsemMybDJaVHNLQ1NOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh0WVhCZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZMjlzYjNKZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThZV3h3YUdGdFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WVd4d2FHRjBaWE4wWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BITndaV04xYkdGeWJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEc1dmNtMWhiRjltY21GbmJXVnVkRjlpWldkcGJqNEtDU05wYm1Oc2RXUmxJRHh1YjNKdFlXeGZabkpoWjIxbGJuUmZiV0Z3Y3o0S0NTTnBibU5zZFdSbElEeGxiV2x6YzJsMlpXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4c2FXZG9kSE5mY0dodmJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYMlp5WVdkdFpXNTBYMkpsWjJsdVBnb0pJMmx1WTJ4MVpHVWdQR3hwWjJoMGMxOW1jbUZuYldWdWRGOXRZWEJ6UGdvSkkybHVZMngxWkdVZ1BHeHBaMmgwYzE5bWNtRm5iV1Z1ZEY5bGJtUStDZ2tqYVc1amJIVmtaU0E4WVc5dFlYQmZabkpoWjIxbGJuUStDZ2wyWldNeklHOTFkR2R2YVc1blRHbG5hSFFnUFNCeVpXWnNaV04wWldSTWFXZG9kQzVrYVhKbFkzUkVhV1ptZFhObElDc2djbVZtYkdWamRHVmtUR2xuYUhRdWFXNWthWEpsWTNSRWFXWm1kWE5sSUNzZ2NtVm1iR1ZqZEdWa1RHbG5hSFF1WkdseVpXTjBVM0JsWTNWc1lYSWdLeUJ5Wldac1pXTjBaV1JNYVdkb2RDNXBibVJwY21WamRGTndaV04xYkdGeUlDc2dkRzkwWVd4RmJXbHpjMmwyWlZKaFpHbGhibU5sT3dvSkkybHVZMngxWkdVZ1BHVnVkbTFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHZkWFJ3ZFhSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThkRzl1WlcxaGNIQnBibWRmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFpXNWpiMlJwYm1kelgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHdjbVZ0ZFd4MGFYQnNhV1ZrWDJGc2NHaGhYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdScGRHaGxjbWx1WjE5bWNtRm5iV1Z1ZEQ0S2ZXQXNJRVJ0SUQwZ1lDTmtaV1pwYm1VZ1UxUkJUa1JCVWtRS2RtRnllV2x1WnlCMlpXTXpJSFpXYVdWM1VHOXphWFJwYjI0N0NpTnBabVJsWmlCVlUwVmZWRkpCVGxOTlNWTlRTVTlPQ2dsMllYSjVhVzVuSUhabFl6TWdkbGR2Y214a1VHOXphWFJwYjI0N0NpTmxibVJwWmdvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4MWRqSmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeGpiMnh2Y2w5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEcxdmNuQm9kR0Z5WjJWMFgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHphR0ZrYjNkdFlYQmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4c2IyZGtaWEIwYUdKMVpsOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTl3WVhKelgzWmxjblJsZUQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEhWMlgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeDFkakpmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdOdmJHOXlYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhpWldkcGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGJXOXljR2h1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSE5yYVc1aVlYTmxYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdWJtOXliV0ZzWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4a1pXWmhkV3gwYm05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR0psWjJsdVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHRiM0p3YUhSaGNtZGxkRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtNXBibWRmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdScGMzQnNZV05sYldWdWRHMWhjRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Y0hKdmFtVmpkRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5MlpYSjBaWGcrQ2dsMlZtbGxkMUJ2YzJsMGFXOXVJRDBnTFNCdGRsQnZjMmwwYVc5dUxuaDVlanNLQ1NOcGJtTnNkV1JsSUR4M2IzSnNaSEJ2YzE5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGMyaGhaRzkzYldGd1gzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeG1iMmRmZG1WeWRHVjRQZ29qYVdaa1pXWWdWVk5GWDFSU1FVNVRUVWxUVTBsUFRnb0pkbGR2Y214a1VHOXphWFJwYjI0Z1BTQjNiM0pzWkZCdmMybDBhVzl1TG5oNWVqc0tJMlZ1WkdsbUNuMWdMQ0JHYlNBOUlHQWpaR1ZtYVc1bElGTlVRVTVFUVZKRUNpTnBabVJsWmlCUVNGbFRTVU5CVEFvSkkyUmxabWx1WlNCSlQxSUtDU05rWldacGJtVWdVMUJGUTFWTVFWSUtJMlZ1WkdsbUNuVnVhV1p2Y20wZ2RtVmpNeUJrYVdabWRYTmxPd3AxYm1sbWIzSnRJSFpsWXpNZ1pXMXBjM05wZG1VN0NuVnVhV1p2Y20wZ1pteHZZWFFnY205MVoyaHVaWE56T3dwMWJtbG1iM0p0SUdac2IyRjBJRzFsZEdGc2JtVnpjenNLZFc1cFptOXliU0JtYkc5aGRDQnZjR0ZqYVhSNU93b2phV1prWldZZ1NVOVNDZ2wxYm1sbWIzSnRJR1pzYjJGMElHbHZjanNLSTJWdVpHbG1DaU5wWm1SbFppQlRVRVZEVlV4QlVnb0pkVzVwWm05eWJTQm1iRzloZENCemNHVmpkV3hoY2tsdWRHVnVjMmwwZVRzS0NYVnVhV1p2Y20wZ2RtVmpNeUJ6Y0dWamRXeGhja052Ykc5eU93b0pJMmxtWkdWbUlGVlRSVjlUVUVWRFZVeEJVa2xPVkVWT1UwbFVXVTFCVUFvSkNYVnVhV1p2Y20wZ2MyRnRjR3hsY2pKRUlITndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndPd29KSTJWdVpHbG1DZ2tqYVdaa1pXWWdWVk5GWDFOUVJVTlZURUZTUTA5TVQxSk5RVkFLQ1FsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCemNHVmpkV3hoY2tOdmJHOXlUV0Z3T3dvSkkyVnVaR2xtQ2lObGJtUnBaZ29qYVdaa1pXWWdWVk5GWDBOTVJVRlNRMDlCVkFvSmRXNXBabTl5YlNCbWJHOWhkQ0JqYkdWaGNtTnZZWFE3Q2dsMWJtbG1iM0p0SUdac2IyRjBJR05zWldGeVkyOWhkRkp2ZFdkb2JtVnpjenNLSTJWdVpHbG1DaU5wWm1SbFppQlZVMFZmVTBoRlJVNEtDWFZ1YVdadmNtMGdkbVZqTXlCemFHVmxia052Ykc5eU93b0pkVzVwWm05eWJTQm1iRzloZENCemFHVmxibEp2ZFdkb2JtVnpjenNLQ1NOcFptUmxaaUJWVTBWZlUwaEZSVTVEVDB4UFVrMUJVQW9KQ1hWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhOb1pXVnVRMjlzYjNKTllYQTdDZ2tqWlc1a2FXWUtDU05wWm1SbFppQlZVMFZmVTBoRlJVNVNUMVZIU0U1RlUxTk5RVkFLQ1FsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCemFHVmxibEp2ZFdkb2JtVnpjMDFoY0RzS0NTTmxibVJwWmdvalpXNWthV1lLZG1GeWVXbHVaeUIyWldNeklIWldhV1YzVUc5emFYUnBiMjQ3Q2lOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4d1lXTnJhVzVuUGdvamFXNWpiSFZrWlNBOFpHbDBhR1Z5YVc1blgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4amIyeHZjbDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSFYyTWw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVd4d2FHRjBaWE4wWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYjIxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJHbG5hSFJ0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdWdGFYTnphWFpsYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aWMyUm1jejRLSTJsdVkyeDFaR1VnUEdOMVltVmZkWFpmY21WbWJHVmpkR2x2Ymw5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHVnVkbTFoY0Y5amIyMXRiMjVmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR1Z1ZG0xaGNGOXdhSGx6YVdOaGJGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFptOW5YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNhV2RvZEhOZmNHRnljMTlpWldkcGJqNEtJMmx1WTJ4MVpHVWdQRzV2Y20xaGJGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJHbG5hSFJ6WDNCb2VYTnBZMkZzWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHgwY21GdWMyMXBjM05wYjI1ZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEhOb1lXUnZkMjFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WW5WdGNHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThibTl5YldGc2JXRndYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGpiR1ZoY21OdllYUmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BISnZkV2RvYm1WemMyMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThiV1YwWVd4dVpYTnpiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhzYjJka1pYQjBhR0oxWmw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZlpuSmhaMjFsYm5RK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mWm5KaFoyMWxiblErQ2dsMlpXTTBJR1JwWm1aMWMyVkRiMnh2Y2lBOUlIWmxZelFvSUdScFptWjFjMlVzSUc5d1lXTnBkSGtnS1RzS0NWSmxabXhsWTNSbFpFeHBaMmgwSUhKbFpteGxZM1JsWkV4cFoyaDBJRDBnVW1WbWJHVmpkR1ZrVEdsbmFIUW9JSFpsWXpNb0lEQXVNQ0FwTENCMlpXTXpLQ0F3TGpBZ0tTd2dkbVZqTXlnZ01DNHdJQ2tzSUhabFl6TW9JREF1TUNBcElDazdDZ2wyWldNeklIUnZkR0ZzUlcxcGMzTnBkbVZTWVdScFlXNWpaU0E5SUdWdGFYTnphWFpsT3dvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhqYjJ4dmNsOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lXMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4aGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThjbTkxWjJodVpYTnpiV0Z3WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHMWxkR0ZzYm1WemMyMWhjRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4dWIzSnRZV3hmWm5KaFoyMWxiblJmWW1WbmFXNCtDZ2tqYVc1amJIVmtaU0E4Ym05eWJXRnNYMlp5WVdkdFpXNTBYMjFoY0hNK0Nna2phVzVqYkhWa1pTQThZMnhsWVhKamIyRjBYMjV2Y20xaGJGOW1jbUZuYldWdWRGOWlaV2RwYmo0S0NTTnBibU5zZFdSbElEeGpiR1ZoY21OdllYUmZibTl5YldGc1gyWnlZV2R0Wlc1MFgyMWhjSE0rQ2dramFXNWpiSFZrWlNBOFpXMXBjM05wZG1WdFlYQmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4YkdsbmFIUnpYM0JvZVhOcFkyRnNYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEd4cFoyaDBjMTltY21GbmJXVnVkRjlpWldkcGJqNEtDU05wYm1Oc2RXUmxJRHhzYVdkb2RITmZabkpoWjIxbGJuUmZiV0Z3Y3o0S0NTTnBibU5zZFdSbElEeHNhV2RvZEhOZlpuSmhaMjFsYm5SZlpXNWtQZ29KSTJsdVkyeDFaR1VnUEdGdmJXRndYMlp5WVdkdFpXNTBQZ29KZG1Wak15QjBiM1JoYkVScFptWjFjMlVnUFNCeVpXWnNaV04wWldSTWFXZG9kQzVrYVhKbFkzUkVhV1ptZFhObElDc2djbVZtYkdWamRHVmtUR2xuYUhRdWFXNWthWEpsWTNSRWFXWm1kWE5sT3dvSmRtVmpNeUIwYjNSaGJGTndaV04xYkdGeUlEMGdjbVZtYkdWamRHVmtUR2xuYUhRdVpHbHlaV04wVTNCbFkzVnNZWElnS3lCeVpXWnNaV04wWldSTWFXZG9kQzVwYm1ScGNtVmpkRk53WldOMWJHRnlPd29KSTJsdVkyeDFaR1VnUEhSeVlXNXpiV2x6YzJsdmJsOW1jbUZuYldWdWRENEtDWFpsWXpNZ2IzVjBaMjlwYm1kTWFXZG9kQ0E5SUhSdmRHRnNSR2xtWm5WelpTQXJJSFJ2ZEdGc1UzQmxZM1ZzWVhJZ0t5QjBiM1JoYkVWdGFYTnphWFpsVW1Ga2FXRnVZMlU3Q2dramFXWmtaV1lnVlZORlgxTklSVVZPQ2drSlpteHZZWFFnYzJobFpXNUZibVZ5WjNsRGIyMXdJRDBnTVM0d0lDMGdNQzR4TlRjZ0tpQnRZWGd6S0NCdFlYUmxjbWxoYkM1emFHVmxia052Ykc5eUlDazdDZ2tKYjNWMFoyOXBibWRNYVdkb2RDQTlJRzkxZEdkdmFXNW5UR2xuYUhRZ0tpQnphR1ZsYmtWdVpYSm5lVU52YlhBZ0t5QnphR1ZsYmxOd1pXTjFiR0Z5T3dvSkkyVnVaR2xtQ2dramFXWmtaV1lnVlZORlgwTk1SVUZTUTA5QlZBb0pDV1pzYjJGMElHUnZkRTVXWTJNZ1BTQnpZWFIxY21GMFpTZ2daRzkwS0NCblpXOXRaWFJ5ZVM1amJHVmhjbU52WVhST2IzSnRZV3dzSUdkbGIyMWxkSEo1TG5acFpYZEVhWElnS1NBcE93b0pDWFpsWXpNZ1JtTmpJRDBnUmw5VFkyaHNhV05yS0NCdFlYUmxjbWxoYkM1amJHVmhjbU52WVhSR01Dd2diV0YwWlhKcFlXd3VZMnhsWVhKamIyRjBSamt3TENCa2IzUk9WbU5qSUNrN0Nna0piM1YwWjI5cGJtZE1hV2RvZENBOUlHOTFkR2R2YVc1blRHbG5hSFFnS2lBb0lERXVNQ0F0SUcxaGRHVnlhV0ZzTG1Oc1pXRnlZMjloZENBcUlFWmpZeUFwSUNzZ1kyeGxZWEpqYjJGMFUzQmxZM1ZzWVhJZ0tpQnRZWFJsY21saGJDNWpiR1ZoY21OdllYUTdDZ2tqWlc1a2FXWUtDU05wYm1Oc2RXUmxJRHh2ZFhSd2RYUmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4ZEc5dVpXMWhjSEJwYm1kZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThaVzVqYjJScGJtZHpYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdadloxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHh3Y21WdGRXeDBhWEJzYVdWa1gyRnNjR2hoWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHUnBkR2hsY21sdVoxOW1jbUZuYldWdWRENEtmV0FzSUU1dElEMGdZQ05rWldacGJtVWdWRTlQVGdwMllYSjVhVzVuSUhabFl6TWdkbFpwWlhkUWIzTnBkR2x2YmpzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIVjJYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGRYWXlYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOFpHbHpjR3hoWTJWdFpXNTBiV0Z3WDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThZMjlzYjNKZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHhtYjJkZmNHRnljMTkyWlhKMFpYZytDaU5wYm1Oc2RXUmxJRHh1YjNKdFlXeGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThjMmhoWkc5M2JXRndYM0JoY25OZmRtVnlkR1Y0UGdvamFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4amJHbHdjR2x1WjE5d2JHRnVaWE5mY0dGeWMxOTJaWEowWlhnK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1NOcGJtTnNkV1JsSUR4MWRsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThkWFl5WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4amIyeHZjbDkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4WW1WbmFXNXViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHMXZjbkJvYm05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YTJsdVltRnpaVjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4YzJ0cGJtNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOFpHVm1ZWFZzZEc1dmNtMWhiRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Ym05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhpWldkcGJsOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhOcmFXNXVhVzVuWDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4a2FYTndiR0ZqWlcxbGJuUnRZWEJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEhCeWIycGxZM1JmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeGpiR2x3Y0dsdVoxOXdiR0Z1WlhOZmRtVnlkR1Y0UGdvSmRsWnBaWGRRYjNOcGRHbHZiaUE5SUMwZ2JYWlFiM05wZEdsdmJpNTRlWG83Q2dramFXNWpiSFZrWlNBOGQyOXliR1J3YjNOZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITm9ZV1J2ZDIxaGNGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThabTluWDNabGNuUmxlRDRLZldBc0lFSnRJRDBnWUNOa1pXWnBibVVnVkU5UFRncDFibWxtYjNKdElIWmxZek1nWkdsbVpuVnpaVHNLZFc1cFptOXliU0IyWldNeklHVnRhWE56YVhabE93cDFibWxtYjNKdElHWnNiMkYwSUc5d1lXTnBkSGs3Q2lOcGJtTnNkV1JsSUR4amIyMXRiMjQrQ2lOcGJtTnNkV1JsSUR4d1lXTnJhVzVuUGdvamFXNWpiSFZrWlNBOFpHbDBhR1Z5YVc1blgzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4amIyeHZjbDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThkWFpmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSFYyTWw5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4YldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aGJIQm9ZVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBQZ29qYVc1amJIVmtaU0E4WVd4d2FHRjBaWE4wWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhoYjIxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGJHbG5hSFJ0WVhCZmNHRnljMTltY21GbmJXVnVkRDRLSTJsdVkyeDFaR1VnUEdWdGFYTnphWFpsYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4bmNtRmthV1Z1ZEcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFptOW5YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeGljMlJtY3o0S0kybHVZMngxWkdVZ1BHeHBaMmgwYzE5d1lYSnpYMkpsWjJsdVBnb2phVzVqYkhWa1pTQThibTl5YldGc1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4c2FXZG9kSE5mZEc5dmJsOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOGMyaGhaRzkzYldGd1gzQmhjbk5mWm5KaFoyMWxiblErQ2lOcGJtTnNkV1JsSUR4aWRXMXdiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHh1YjNKdFlXeHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTltY21GbmJXVnVkRDRLQ1habFl6UWdaR2xtWm5WelpVTnZiRzl5SUQwZ2RtVmpOQ2dnWkdsbVpuVnpaU3dnYjNCaFkybDBlU0FwT3dvSlVtVm1iR1ZqZEdWa1RHbG5hSFFnY21WbWJHVmpkR1ZrVEdsbmFIUWdQU0JTWldac1pXTjBaV1JNYVdkb2RDZ2dkbVZqTXlnZ01DNHdJQ2tzSUhabFl6TW9JREF1TUNBcExDQjJaV016S0NBd0xqQWdLU3dnZG1Wak15Z2dNQzR3SUNrZ0tUc0tDWFpsWXpNZ2RHOTBZV3hGYldsemMybDJaVkpoWkdsaGJtTmxJRDBnWlcxcGMzTnBkbVU3Q2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4YldGd1gyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR0ZzY0doaGJXRndYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdGc2NHaGhkR1Z6ZEY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeHViM0p0WVd4ZlpuSmhaMjFsYm5SZlltVm5hVzQrQ2dramFXNWpiSFZrWlNBOGJtOXliV0ZzWDJaeVlXZHRaVzUwWDIxaGNITStDZ2tqYVc1amJIVmtaU0E4WlcxcGMzTnBkbVZ0WVhCZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThiR2xuYUhSelgzUnZiMjVmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGJHbG5hSFJ6WDJaeVlXZHRaVzUwWDJKbFoybHVQZ29KSTJsdVkyeDFaR1VnUEd4cFoyaDBjMTltY21GbmJXVnVkRjl0WVhCelBnb0pJMmx1WTJ4MVpHVWdQR3hwWjJoMGMxOW1jbUZuYldWdWRGOWxibVErQ2dramFXNWpiSFZrWlNBOFlXOXRZWEJmWm5KaFoyMWxiblErQ2dsMlpXTXpJRzkxZEdkdmFXNW5UR2xuYUhRZ1BTQnlaV1pzWldOMFpXUk1hV2RvZEM1a2FYSmxZM1JFYVdabWRYTmxJQ3NnY21WbWJHVmpkR1ZrVEdsbmFIUXVhVzVrYVhKbFkzUkVhV1ptZFhObElDc2dkRzkwWVd4RmJXbHpjMmwyWlZKaFpHbGhibU5sT3dvSkkybHVZMngxWkdVZ1BHOTFkSEIxZEY5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeDBiMjVsYldGd2NHbHVaMTltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4bGJtTnZaR2x1WjNOZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThabTluWDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BIQnlaVzExYkhScGNHeHBaV1JmWVd4d2FHRmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4WkdsMGFHVnlhVzVuWDJaeVlXZHRaVzUwUGdwOVlDd2dlbTBnUFNCZ2RXNXBabTl5YlNCbWJHOWhkQ0J6YVhwbE93cDFibWxtYjNKdElHWnNiMkYwSUhOallXeGxPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4bWIyZGZjR0Z5YzE5MlpYSjBaWGcrQ2lOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgzQmhjbk5mZG1WeWRHVjRQZ29qYVc1amJIVmtaU0E4WTJ4cGNIQnBibWRmY0d4aGJtVnpYM0JoY25OZmRtVnlkR1Y0UGdwMmIybGtJRzFoYVc0b0tTQjdDZ2tqYVc1amJIVmtaU0E4WTI5c2IzSmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR0psWjJsdVgzWmxjblJsZUQ0S0NTTnBibU5zZFdSbElEeHRiM0p3YUhSaGNtZGxkRjkyWlhKMFpYZytDZ2tqYVc1amJIVmtaU0E4Y0hKdmFtVmpkRjkyWlhKMFpYZytDZ2xuYkY5UWIybHVkRk5wZW1VZ1BTQnphWHBsT3dvSkkybG1aR1ZtSUZWVFJWOVRTVnBGUVZSVVJVNVZRVlJKVDA0S0NRbGliMjlzSUdselVHVnljM0JsWTNScGRtVWdQU0JwYzFCbGNuTndaV04wYVhabFRXRjBjbWw0S0NCd2NtOXFaV04wYVc5dVRXRjBjbWw0SUNrN0Nna0phV1lnS0NCcGMxQmxjbk53WldOMGFYWmxJQ2tnWjJ4ZlVHOXBiblJUYVhwbElDbzlJQ2dnYzJOaGJHVWdMeUF0SUcxMlVHOXphWFJwYjI0dWVpQXBPd29KSTJWdVpHbG1DZ2tqYVc1amJIVmtaU0E4Ykc5blpHVndkR2hpZFdaZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHTnNhWEJ3YVc1blgzQnNZVzVsYzE5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGQyOXliR1J3YjNOZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHWnZaMTkyWlhKMFpYZytDbjFnTENCVmJTQTlJR0IxYm1sbWIzSnRJSFpsWXpNZ1pHbG1ablZ6WlRzS2RXNXBabTl5YlNCbWJHOWhkQ0J2Y0dGamFYUjVPd29qYVc1amJIVmtaU0E4WTI5dGJXOXVQZ29qYVc1amJIVmtaU0E4WTI5c2IzSmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHMWhjRjl3WVhKMGFXTnNaVjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGMFpYTjBYM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeG1iMmRmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZabkpoWjIxbGJuUStDaU5wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S2RtOXBaQ0J0WVdsdUtDa2dld29KSTJsdVkyeDFaR1VnUEdOc2FYQndhVzVuWDNCc1lXNWxjMTltY21GbmJXVnVkRDRLQ1habFl6TWdiM1YwWjI5cGJtZE1hV2RvZENBOUlIWmxZek1vSURBdU1DQXBPd29KZG1Wak5DQmthV1ptZFhObFEyOXNiM0lnUFNCMlpXTTBLQ0JrYVdabWRYTmxMQ0J2Y0dGamFYUjVJQ2s3Q2dramFXNWpiSFZrWlNBOGJHOW5aR1Z3ZEdoaWRXWmZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4YldGd1gzQmhjblJwWTJ4bFgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR052Ykc5eVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQR0ZzY0doaGRHVnpkRjltY21GbmJXVnVkRDRLQ1c5MWRHZHZhVzVuVEdsbmFIUWdQU0JrYVdabWRYTmxRMjlzYjNJdWNtZGlPd29KSTJsdVkyeDFaR1VnUEc5MWRIQjFkRjltY21GbmJXVnVkRDRLQ1NOcGJtTnNkV1JsSUR4MGIyNWxiV0Z3Y0dsdVoxOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhsYm1OdlpHbHVaM05mWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOFptOW5YMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEhCeVpXMTFiSFJwY0d4cFpXUmZZV3h3YUdGZlpuSmhaMjFsYm5RK0NuMWdMQ0JQYlNBOUlHQWphVzVqYkhWa1pTQThZMjl0Ylc5dVBnb2phVzVqYkhWa1pTQThabTluWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThiVzl5Y0doMFlYSm5aWFJmY0dGeWMxOTJaWEowWlhnK0NpTnBibU5zZFdSbElEeHphMmx1Ym1sdVoxOXdZWEp6WDNabGNuUmxlRDRLSTJsdVkyeDFaR1VnUEhOb1lXUnZkMjFoY0Y5d1lYSnpYM1psY25SbGVENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSkkybHVZMngxWkdVZ1BHSmxaMmx1Ym05eWJXRnNYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh0YjNKd2FHNXZjbTFoYkY5MlpYSjBaWGcrQ2dramFXNWpiSFZrWlNBOGMydHBibUpoYzJWZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BITnJhVzV1YjNKdFlXeGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1JsWm1GMWJIUnViM0p0WVd4ZmRtVnlkR1Y0UGdvSkkybHVZMngxWkdVZ1BHSmxaMmx1WDNabGNuUmxlRDRLQ1NOcGJtTnNkV1JsSUR4dGIzSndhSFJoY21kbGRGOTJaWEowWlhnK0Nna2phVzVqYkhWa1pTQThjMnRwYm01cGJtZGZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSEJ5YjJwbFkzUmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQSGR2Y214a2NHOXpYM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHh6YUdGa2IzZHRZWEJmZG1WeWRHVjRQZ29KSTJsdVkyeDFaR1VnUEdadloxOTJaWEowWlhnK0NuMWdMQ0JJYlNBOUlHQjFibWxtYjNKdElIWmxZek1nWTI5c2IzSTdDblZ1YVdadmNtMGdabXh2WVhRZ2IzQmhZMmwwZVRzS0kybHVZMngxWkdVZ1BHTnZiVzF2Ymo0S0kybHVZMngxWkdVZ1BIQmhZMnRwYm1jK0NpTnBibU5zZFdSbElEeG1iMmRmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQR0p6WkdaelBnb2phVzVqYkhWa1pTQThiR2xuYUhSelgzQmhjbk5mWW1WbmFXNCtDaU5wYm1Oc2RXUmxJRHh6YUdGa2IzZHRZWEJmY0dGeWMxOW1jbUZuYldWdWRENEtJMmx1WTJ4MVpHVWdQSE5vWVdSdmQyMWhjMnRmY0dGeWMxOW1jbUZuYldWdWRENEtkbTlwWkNCdFlXbHVLQ2tnZXdvSloyeGZSbkpoWjBOdmJHOXlJRDBnZG1Wak5DZ2dZMjlzYjNJc0lHOXdZV05wZEhrZ0tpQW9JREV1TUNBdElHZGxkRk5vWVdSdmQwMWhjMnNvS1NBcElDazdDZ2tqYVc1amJIVmtaU0E4ZEc5dVpXMWhjSEJwYm1kZlpuSmhaMjFsYm5RK0Nna2phVzVqYkhWa1pTQThaVzVqYjJScGJtZHpYMlp5WVdkdFpXNTBQZ29KSTJsdVkyeDFaR1VnUEdadloxOW1jbUZuYldWdWRENEtmV0FzSUd0dElEMGdZSFZ1YVdadmNtMGdabXh2WVhRZ2NtOTBZWFJwYjI0N0NuVnVhV1p2Y20wZ2RtVmpNaUJqWlc1MFpYSTdDaU5wYm1Oc2RXUmxJRHhqYjIxdGIyNCtDaU5wYm1Oc2RXUmxJRHgxZGw5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR1p2WjE5d1lYSnpYM1psY25SbGVENEtJMmx1WTJ4MVpHVWdQR3h2WjJSbGNIUm9ZblZtWDNCaGNuTmZkbVZ5ZEdWNFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mZG1WeWRHVjRQZ3AyYjJsa0lHMWhhVzRvS1NCN0Nna2phVzVqYkhWa1pTQThkWFpmZG1WeWRHVjRQZ29KZG1Wak5DQnRkbEJ2YzJsMGFXOXVJRDBnYlc5a1pXeFdhV1YzVFdGMGNtbDRJQ29nZG1Wak5DZ2dNQzR3TENBd0xqQXNJREF1TUN3Z01TNHdJQ2s3Q2dsMlpXTXlJSE5qWVd4bE93b0pjMk5oYkdVdWVDQTlJR3hsYm1kMGFDZ2dkbVZqTXlnZ2JXOWtaV3hOWVhSeWFYaGJJREFnWFM1NExDQnRiMlJsYkUxaGRISnBlRnNnTUNCZExua3NJRzF2WkdWc1RXRjBjbWw0V3lBd0lGMHVlaUFwSUNrN0NnbHpZMkZzWlM1NUlEMGdiR1Z1WjNSb0tDQjJaV016S0NCdGIyUmxiRTFoZEhKcGVGc2dNU0JkTG5nc0lHMXZaR1ZzVFdGMGNtbDRXeUF4SUYwdWVTd2diVzlrWld4TllYUnlhWGhiSURFZ1hTNTZJQ2tnS1RzS0NTTnBabTVrWldZZ1ZWTkZYMU5KV2tWQlZGUkZUbFZCVkVsUFRnb0pDV0p2YjJ3Z2FYTlFaWEp6Y0dWamRHbDJaU0E5SUdselVHVnljM0JsWTNScGRtVk5ZWFJ5YVhnb0lIQnliMnBsWTNScGIyNU5ZWFJ5YVhnZ0tUc0tDUWxwWmlBb0lHbHpVR1Z5YzNCbFkzUnBkbVVnS1NCelkyRnNaU0FxUFNBdElHMTJVRzl6YVhScGIyNHVlanNLQ1NObGJtUnBaZ29KZG1Wak1pQmhiR2xuYm1Wa1VHOXphWFJwYjI0Z1BTQW9JSEJ2YzJsMGFXOXVMbmg1SUMwZ0tDQmpaVzUwWlhJZ0xTQjJaV015S0NBd0xqVWdLU0FwSUNrZ0tpQnpZMkZzWlRzS0NYWmxZeklnY205MFlYUmxaRkJ2YzJsMGFXOXVPd29KY205MFlYUmxaRkJ2YzJsMGFXOXVMbmdnUFNCamIzTW9JSEp2ZEdGMGFXOXVJQ2tnS2lCaGJHbG5ibVZrVUc5emFYUnBiMjR1ZUNBdElITnBiaWdnY205MFlYUnBiMjRnS1NBcUlHRnNhV2R1WldSUWIzTnBkR2x2Ymk1NU93b0pjbTkwWVhSbFpGQnZjMmwwYVc5dUxua2dQU0J6YVc0b0lISnZkR0YwYVc5dUlDa2dLaUJoYkdsbmJtVmtVRzl6YVhScGIyNHVlQ0FySUdOdmN5Z2djbTkwWVhScGIyNGdLU0FxSUdGc2FXZHVaV1JRYjNOcGRHbHZiaTU1T3dvSmJYWlFiM05wZEdsdmJpNTRlU0FyUFNCeWIzUmhkR1ZrVUc5emFYUnBiMjQ3Q2dsbmJGOVFiM05wZEdsdmJpQTlJSEJ5YjJwbFkzUnBiMjVOWVhSeWFYZ2dLaUJ0ZGxCdmMybDBhVzl1T3dvSkkybHVZMngxWkdVZ1BHeHZaMlJsY0hSb1luVm1YM1psY25SbGVENEtDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZkbVZ5ZEdWNFBnb0pJMmx1WTJ4MVpHVWdQR1p2WjE5MlpYSjBaWGcrQ24xZ0xDQkhiU0E5SUdCMWJtbG1iM0p0SUhabFl6TWdaR2xtWm5WelpUc0tkVzVwWm05eWJTQm1iRzloZENCdmNHRmphWFI1T3dvamFXNWpiSFZrWlNBOFkyOXRiVzl1UGdvamFXNWpiSFZrWlNBOGRYWmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHMWhjRjl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZV3h3YUdGdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZEQ0S0kybHVZMngxWkdVZ1BHRnNjR2hoZEdWemRGOXdZWEp6WDJaeVlXZHRaVzUwUGdvamFXNWpiSFZrWlNBOFptOW5YM0JoY25OZlpuSmhaMjFsYm5RK0NpTnBibU5zZFdSbElEeHNiMmRrWlhCMGFHSjFabDl3WVhKelgyWnlZV2R0Wlc1MFBnb2phVzVqYkhWa1pTQThZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mWm5KaFoyMWxiblErQ25admFXUWdiV0ZwYmlncElIc0tDU05wYm1Oc2RXUmxJRHhqYkdsd2NHbHVaMTl3YkdGdVpYTmZabkpoWjIxbGJuUStDZ2wyWldNeklHOTFkR2R2YVc1blRHbG5hSFFnUFNCMlpXTXpLQ0F3TGpBZ0tUc0tDWFpsWXpRZ1pHbG1ablZ6WlVOdmJHOXlJRDBnZG1Wak5DZ2daR2xtWm5WelpTd2diM0JoWTJsMGVTQXBPd29KSTJsdVkyeDFaR1VnUEd4dloyUmxjSFJvWW5WbVgyWnlZV2R0Wlc1MFBnb0pJMmx1WTJ4MVpHVWdQRzFoY0Y5bWNtRm5iV1Z1ZEQ0S0NTTnBibU5zZFdSbElEeGhiSEJvWVcxaGNGOW1jbUZuYldWdWRENEtDU05wYm1Oc2RXUmxJRHhoYkhCb1lYUmxjM1JmWm5KaFoyMWxiblErQ2dsdmRYUm5iMmx1WjB4cFoyaDBJRDBnWkdsbVpuVnpaVU52Ykc5eUxuSm5ZanNLQ1NOcGJtTnNkV1JsSUR4dmRYUndkWFJmWm5KaFoyMWxiblErQ2dramFXNWpiSFZrWlNBOGRHOXVaVzFoY0hCcGJtZGZabkpoWjIxbGJuUStDZ2tqYVc1amJIVmtaU0E4Wlc1amIyUnBibWR6WDJaeVlXZHRaVzUwUGdvSkkybHVZMngxWkdVZ1BHWnZaMTltY21GbmJXVnVkRDRLZldBc0lFWmxJRDBnZXdvZ0lDQWdZV3h3YUdGdFlYQmZabkpoWjIxbGJuUTZJSGhtTEFvZ0lDQWdZV3h3YUdGdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ2VXWXNDaUFnSUNCaGJIQm9ZWFJsYzNSZlpuSmhaMjFsYm5RNklIWm1MQW9nSUNBZ1lXeHdhR0YwWlhOMFgzQmhjbk5mWm5KaFoyMWxiblE2SUY5bUxBb2dJQ0FnWVc5dFlYQmZabkpoWjIxbGJuUTZJRTFtTEFvZ0lDQWdZVzl0WVhCZmNHRnljMTltY21GbmJXVnVkRG9nWW1Zc0NpQWdJQ0JpWldkcGJsOTJaWEowWlhnNklIZG1MQW9nSUNBZ1ltVm5hVzV1YjNKdFlXeGZkbVZ5ZEdWNE9pQlRaaXdLSUNBZ0lHSnpaR1p6T2lCVVppd0tJQ0FnSUdKMWJYQnRZWEJmY0dGeWMxOW1jbUZuYldWdWREb2dSV1lzQ2lBZ0lDQmpiR2x3Y0dsdVoxOXdiR0Z1WlhOZlpuSmhaMjFsYm5RNklFRm1MQW9nSUNBZ1kyeHBjSEJwYm1kZmNHeGhibVZ6WDNCaGNuTmZabkpoWjIxbGJuUTZJRU5tTEFvZ0lDQWdZMnhwY0hCcGJtZGZjR3hoYm1WelgzQmhjbk5mZG1WeWRHVjRPaUJNWml3S0lDQWdJR05zYVhCd2FXNW5YM0JzWVc1bGMxOTJaWEowWlhnNklGSm1MQW9nSUNBZ1kyOXNiM0pmWm5KaFoyMWxiblE2SUZCbUxBb2dJQ0FnWTI5c2IzSmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1NXWXNDaUFnSUNCamIyeHZjbDl3WVhKelgzWmxjblJsZURvZ1JHWXNDaUFnSUNCamIyeHZjbDkyWlhKMFpYZzZJRVptTEFvZ0lDQWdZMjl0Ylc5dU9pQk9aaXdLSUNBZ0lHTjFZbVZmZFhaZmNtVm1iR1ZqZEdsdmJsOW1jbUZuYldWdWREb2dRbVlzQ2lBZ0lDQmtaV1poZFd4MGJtOXliV0ZzWDNabGNuUmxlRG9nZW1Zc0NpQWdJQ0JrYVhOd2JHRmpaVzFsYm5SdFlYQmZjR0Z5YzE5MlpYSjBaWGc2SUZWbUxBb2dJQ0FnWkdsemNHeGhZMlZ0Wlc1MGJXRndYM1psY25SbGVEb2dUMllzQ2lBZ0lDQmxiV2x6YzJsMlpXMWhjRjltY21GbmJXVnVkRG9nU0dZc0NpQWdJQ0JsYldsemMybDJaVzFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBPaUJyWml3S0lDQWdJR1Z1WTI5a2FXNW5jMTltY21GbmJXVnVkRG9nUjJZc0NpQWdJQ0JsYm1OdlpHbHVaM05mY0dGeWMxOW1jbUZuYldWdWREb2dWbVlzQ2lBZ0lDQmxiblp0WVhCZlpuSmhaMjFsYm5RNklGZG1MQW9nSUNBZ1pXNTJiV0Z3WDJOdmJXMXZibDl3WVhKelgyWnlZV2R0Wlc1ME9pQnhaaXdLSUNBZ0lHVnVkbTFoY0Y5d1lYSnpYMlp5WVdkdFpXNTBPaUJZWml3S0lDQWdJR1Z1ZG0xaGNGOXdZWEp6WDNabGNuUmxlRG9nU21Zc0NpQWdJQ0JsYm5adFlYQmZjR2g1YzJsallXeGZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ2NuQXNDaUFnSUNCbGJuWnRZWEJmZG1WeWRHVjRPaUJaWml3S0lDQWdJR1p2WjE5MlpYSjBaWGc2SUZwbUxBb2dJQ0FnWm05blgzQmhjbk5mZG1WeWRHVjRPaUFrWml3S0lDQWdJR1p2WjE5bWNtRm5iV1Z1ZERvZ2FtWXNDaUFnSUNCbWIyZGZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1VXWXNDaUFnSUNCbmNtRmthV1Z1ZEcxaGNGOXdZWEp6WDJaeVlXZHRaVzUwT2lCTFppd0tJQ0FnSUd4cFoyaDBiV0Z3WDJaeVlXZHRaVzUwT2lCbGNDd0tJQ0FnSUd4cFoyaDBiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUTZJSFJ3TEFvZ0lDQWdiR2xuYUhSelgyeGhiV0psY25SZmRtVnlkR1Y0T2lCdWNDd0tJQ0FnSUd4cFoyaDBjMTl3WVhKelgySmxaMmx1T2lCcGNDd0tJQ0FnSUd4cFoyaDBjMTkwYjI5dVgyWnlZV2R0Wlc1ME9pQnpjQ3dLSUNBZ0lHeHBaMmgwYzE5MGIyOXVYM0JoY25OZlpuSmhaMjFsYm5RNklHOXdMQW9nSUNBZ2JHbG5hSFJ6WDNCb2IyNW5YMlp5WVdkdFpXNTBPaUJoY0N3S0lDQWdJR3hwWjJoMGMxOXdhRzl1WjE5d1lYSnpYMlp5WVdkdFpXNTBPaUJzY0N3S0lDQWdJR3hwWjJoMGMxOXdhSGx6YVdOaGJGOW1jbUZuYldWdWREb2dZM0FzQ2lBZ0lDQnNhV2RvZEhOZmNHaDVjMmxqWVd4ZmNHRnljMTltY21GbmJXVnVkRG9nYUhBc0NpQWdJQ0JzYVdkb2RITmZabkpoWjIxbGJuUmZZbVZuYVc0NklIVndMQW9nSUNBZ2JHbG5hSFJ6WDJaeVlXZHRaVzUwWDIxaGNITTZJR1J3TEFvZ0lDQWdiR2xuYUhSelgyWnlZV2R0Wlc1MFgyVnVaRG9nWm5Bc0NpQWdJQ0JzYjJka1pYQjBhR0oxWmw5bWNtRm5iV1Z1ZERvZ2NIQXNDaUFnSUNCc2IyZGtaWEIwYUdKMVpsOXdZWEp6WDJaeVlXZHRaVzUwT2lCdGNDd0tJQ0FnSUd4dloyUmxjSFJvWW5WbVgzQmhjbk5mZG1WeWRHVjRPaUJuY0N3S0lDQWdJR3h2WjJSbGNIUm9ZblZtWDNabGNuUmxlRG9nZUhBc0NpQWdJQ0J0WVhCZlpuSmhaMjFsYm5RNklIbHdMQW9nSUNBZ2JXRndYM0JoY25OZlpuSmhaMjFsYm5RNklIWndMQW9nSUNBZ2JXRndYM0JoY25ScFkyeGxYMlp5WVdkdFpXNTBPaUJmY0N3S0lDQWdJRzFoY0Y5d1lYSjBhV05zWlY5d1lYSnpYMlp5WVdkdFpXNTBPaUJOY0N3S0lDQWdJRzFsZEdGc2JtVnpjMjFoY0Y5bWNtRm5iV1Z1ZERvZ1luQXNDaUFnSUNCdFpYUmhiRzVsYzNOdFlYQmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ2QzQXNDaUFnSUNCdGIzSndhRzV2Y20xaGJGOTJaWEowWlhnNklGTndMQW9nSUNBZ2JXOXljR2gwWVhKblpYUmZjR0Z5YzE5MlpYSjBaWGc2SUZSd0xBb2dJQ0FnYlc5eWNHaDBZWEpuWlhSZmRtVnlkR1Y0T2lCRmNDd0tJQ0FnSUc1dmNtMWhiRjltY21GbmJXVnVkRjlpWldkcGJqb2dRWEFzQ2lBZ0lDQnViM0p0WVd4ZlpuSmhaMjFsYm5SZmJXRndjem9nUTNBc0NpQWdJQ0J1YjNKdFlXeGZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1RIQXNDaUFnSUNCdWIzSnRZV3hmY0dGeWMxOTJaWEowWlhnNklGSndMQW9nSUNBZ2JtOXliV0ZzWDNabGNuUmxlRG9nVUhBc0NpQWdJQ0J1YjNKdFlXeHRZWEJmY0dGeWMxOW1jbUZuYldWdWREb2dTWEFzQ2lBZ0lDQmpiR1ZoY21OdllYUmZibTl5YldGc1gyWnlZV2R0Wlc1MFgySmxaMmx1T2lCRWNDd0tJQ0FnSUdOc1pXRnlZMjloZEY5dWIzSnRZV3hmWm5KaFoyMWxiblJmYldGd2N6b2dSbkFzQ2lBZ0lDQmpiR1ZoY21OdllYUmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1RuQXNDaUFnSUNCdmRYUndkWFJmWm5KaFoyMWxiblE2SUVKd0xBb2dJQ0FnY0dGamEybHVaem9nZW5Bc0NpQWdJQ0J3Y21WdGRXeDBhWEJzYVdWa1gyRnNjR2hoWDJaeVlXZHRaVzUwT2lCVmNDd0tJQ0FnSUhCeWIycGxZM1JmZG1WeWRHVjRPaUJQY0N3S0lDQWdJR1JwZEdobGNtbHVaMTltY21GbmJXVnVkRG9nU0hBc0NpQWdJQ0JrYVhSb1pYSnBibWRmY0dGeWMxOW1jbUZuYldWdWREb2dhM0FzQ2lBZ0lDQnliM1ZuYUc1bGMzTnRZWEJmWm5KaFoyMWxiblE2SUVkd0xBb2dJQ0FnY205MVoyaHVaWE56YldGd1gzQmhjbk5mWm5KaFoyMWxiblE2SUZad0xBb2dJQ0FnYzJoaFpHOTNiV0Z3WDNCaGNuTmZabkpoWjIxbGJuUTZJRmR3TEFvZ0lDQWdjMmhoWkc5M2JXRndYM0JoY25OZmRtVnlkR1Y0T2lCeGNDd0tJQ0FnSUhOb1lXUnZkMjFoY0Y5MlpYSjBaWGc2SUZod0xBb2dJQ0FnYzJoaFpHOTNiV0Z6YTE5d1lYSnpYMlp5WVdkdFpXNTBPaUJLY0N3S0lDQWdJSE5yYVc1aVlYTmxYM1psY25SbGVEb2dXWEFzQ2lBZ0lDQnphMmx1Ym1sdVoxOXdZWEp6WDNabGNuUmxlRG9nV25Bc0NpQWdJQ0J6YTJsdWJtbHVaMTkyWlhKMFpYZzZJQ1J3TEFvZ0lDQWdjMnRwYm01dmNtMWhiRjkyWlhKMFpYZzZJR3B3TEFvZ0lDQWdjM0JsWTNWc1lYSnRZWEJmWm5KaFoyMWxiblE2SUZGd0xBb2dJQ0FnYzNCbFkzVnNZWEp0WVhCZmNHRnljMTltY21GbmJXVnVkRG9nUzNBc0NpQWdJQ0IwYjI1bGJXRndjR2x1WjE5bWNtRm5iV1Z1ZERvZ1pXMHNDaUFnSUNCMGIyNWxiV0Z3Y0dsdVoxOXdZWEp6WDJaeVlXZHRaVzUwT2lCMGJTd0tJQ0FnSUhSeVlXNXpiV2x6YzJsdmJsOW1jbUZuYldWdWREb2dibTBzQ2lBZ0lDQjBjbUZ1YzIxcGMzTnBiMjVmY0dGeWMxOW1jbUZuYldWdWREb2dhVzBzQ2lBZ0lDQjFkbDl3WVhKelgyWnlZV2R0Wlc1ME9pQnliU3dLSUNBZ0lIVjJYM0JoY25OZmRtVnlkR1Y0T2lCemJTd0tJQ0FnSUhWMlgzWmxjblJsZURvZ2IyMHNDaUFnSUNCMWRqSmZjR0Z5YzE5bWNtRm5iV1Z1ZERvZ1lXMHNDaUFnSUNCMWRqSmZjR0Z5YzE5MlpYSjBaWGc2SUd4dExBb2dJQ0FnZFhZeVgzWmxjblJsZURvZ1kyMHNDaUFnSUNCM2IzSnNaSEJ2YzE5MlpYSjBaWGc2SUdodExBb2dJQ0FnWW1GamEyZHliM1Z1WkY5MlpYSjBPaUIxYlN3S0lDQWdJR0poWTJ0bmNtOTFibVJmWm5KaFp6b2daRzBzQ2lBZ0lDQmpkV0psWDNabGNuUTZJR1p0TEFvZ0lDQWdZM1ZpWlY5bWNtRm5PaUJ3YlN3S0lDQWdJR1JsY0hSb1gzWmxjblE2SUcxdExBb2dJQ0FnWkdWd2RHaGZabkpoWnpvZ1oyMHNDaUFnSUNCa2FYTjBZVzVqWlZKSFFrRmZkbVZ5ZERvZ2VHMHNDaUFnSUNCa2FYTjBZVzVqWlZKSFFrRmZabkpoWnpvZ2VXMHNDaUFnSUNCbGNYVnBjbVZqZEY5MlpYSjBPaUIyYlN3S0lDQWdJR1Z4ZFdseVpXTjBYMlp5WVdjNklGOXRMQW9nSUNBZ2JHbHVaV1JoYzJobFpGOTJaWEowT2lCTmJTd0tJQ0FnSUd4cGJtVmtZWE5vWldSZlpuSmhaem9nWW0wc0NpQWdJQ0J0WlhOb1ltRnphV05mZG1WeWREb2dkMjBzQ2lBZ0lDQnRaWE5vWW1GemFXTmZabkpoWnpvZ1UyMHNDaUFnSUNCdFpYTm9iR0Z0WW1WeWRGOTJaWEowT2lCVWJTd0tJQ0FnSUcxbGMyaHNZVzFpWlhKMFgyWnlZV2M2SUVWdExBb2dJQ0FnYldWemFHMWhkR05oY0Y5MlpYSjBPaUJCYlN3S0lDQWdJRzFsYzJodFlYUmpZWEJmWm5KaFp6b2dRMjBzQ2lBZ0lDQnRaWE5vYm05eWJXRnNYM1psY25RNklFeHRMQW9nSUNBZ2JXVnphRzV2Y20xaGJGOW1jbUZuT2lCU2JTd0tJQ0FnSUcxbGMyaHdhRzl1WjE5MlpYSjBPaUJRYlN3S0lDQWdJRzFsYzJod2FHOXVaMTltY21Gbk9pQkpiU3dLSUNBZ0lHMWxjMmh3YUhsemFXTmhiRjkyWlhKME9pQkViU3dLSUNBZ0lHMWxjMmh3YUhsemFXTmhiRjltY21Gbk9pQkdiU3dLSUNBZ0lHMWxjMmgwYjI5dVgzWmxjblE2SUU1dExBb2dJQ0FnYldWemFIUnZiMjVmWm5KaFp6b2dRbTBzQ2lBZ0lDQndiMmx1ZEhOZmRtVnlkRG9nZW0wc0NpQWdJQ0J3YjJsdWRITmZabkpoWnpvZ1ZXMHNDaUFnSUNCemFHRmtiM2RmZG1WeWREb2dUMjBzQ2lBZ0lDQnphR0ZrYjNkZlpuSmhaem9nU0cwc0NpQWdJQ0J6Y0hKcGRHVmZkbVZ5ZERvZ2EyMHNDaUFnSUNCemNISnBkR1ZmWm5KaFp6b2dSMjBLZlN3Z2FXVWdQU0I3Q2lBZ0lDQmpiMjF0YjI0NklIc0tJQ0FnSUNBZ0lDQmthV1ptZFhObE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1lXVW9NVFkzTnpjeU1UVXBDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnRZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiR3dLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhWMlZISmhibk5tYjNKdE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ2JIUUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFYyTWxSeVlXNXpabTl5YlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzSUd4MENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQmhiSEJvWVUxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdZV3h3YUdGVVpYTjBPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBd0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJSE53WldOMWJHRnliV0Z3T2lCN0NpQWdJQ0FnSUNBZ2MzQmxZM1ZzWVhKTllYQTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnWlc1MmJXRndPaUI3Q2lBZ0lDQWdJQ0FnWlc1MlRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JtYkdsd1JXNTJUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXRNUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnY21WbWJHVmpkR2wyYVhSNU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCcGIzSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFdU5Rb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjbVZtY21GamRHbHZibEpoZEdsdk9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF1T1RnS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdZVzl0WVhBNklIc0tJQ0FnSUNBZ0lDQmhiMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1lXOU5ZWEJKYm5SbGJuTnBkSGs2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklERUtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnYkdsbmFIUnRZWEE2SUhzS0lDQWdJQ0FnSUNCc2FXZG9kRTFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2JHbG5hSFJOWVhCSmJuUmxibk5wZEhrNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ1pXMXBjM05wZG1WdFlYQTZJSHNLSUNBZ0lDQWdJQ0JsYldsemMybDJaVTFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBzQ2lBZ0lDQmlkVzF3YldGd09pQjdDaUFnSUNBZ0lDQWdZblZ0Y0UxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdZblZ0Y0ZOallXeGxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJRzV2Y20xaGJHMWhjRG9nZXdvZ0lDQWdJQ0FnSUc1dmNtMWhiRTFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2JtOXliV0ZzVTJOaGJHVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QllLREVzSURFcENpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJR1JwYzNCc1lXTmxiV1Z1ZEcxaGNEb2dld29nSUNBZ0lDQWdJR1JwYzNCc1lXTmxiV1Z1ZEUxaGNEb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHUnBjM0JzWVdObGJXVnVkRUpwWVhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREFLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2NtOTFaMmh1WlhOemJXRndPaUI3Q2lBZ0lDQWdJQ0FnY205MVoyaHVaWE56VFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJRzFsZEdGc2JtVnpjMjFoY0RvZ2V3b2dJQ0FnSUNBZ0lHMWxkR0ZzYm1WemMwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJSDBLSUNBZ0lIMHNDaUFnSUNCbmNtRmthV1Z1ZEcxaGNEb2dld29nSUNBZ0lDQWdJR2R5WVdScFpXNTBUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lHWnZaem9nZXdvZ0lDQWdJQ0FnSUdadlowUmxibk5wZEhrNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREkxWlMwMUNpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQm1iMmRPWldGeU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCbWIyZEdZWEk2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklESmxNd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnWm05blEyOXNiM0k2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJoWlNneE5qYzNOekl4TlNrS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdiR2xuYUhSek9pQjdDaUFnSUNBZ0lDQWdZVzFpYVdWdWRFeHBaMmgwUTI5c2IzSTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZENpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnNhV2RvZEZCeWIySmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdaR2x5WldOMGFXOXVZV3hNYVdkb2RITTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZExBb2dJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0NklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklIdDlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJtRnNUR2xuYUhSVGFHRmtiM2R6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1FtbGhjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RPYjNKdFlXeENhV0Z6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDFKaFpHbDFjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2ROWVhCVGFYcGxPaUI3ZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dXMTBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzVFdGMGNtbDRPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjM0J2ZEV4cFoyaDBjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1cxMHNDaUFnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwY21WamRHbHZiam9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBZVzVqWlRvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVsUTI5ek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJsYm5WdFluSmhRMjl6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxZMkY1T2lCN2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCemNHOTBUR2xuYUhSVGFHRmtiM2R6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1FtbGhjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2RPYjNKdFlXeENhV0Z6T2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDFKaFpHbDFjem9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2ROWVhCVGFYcGxPaUI3ZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6Y0c5MFUyaGhaRzkzVFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2MzQnZkRk5vWVdSdmQwMWhkSEpwZURvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dXMTBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhCdmFXNTBUR2xuYUhSek9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFN3S0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTZJSHQ5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVmpZWGs2SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpkR0Z1WTJVNklIdDlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIQnZhVzUwVEdsbmFIUlRhR0ZrYjNkek9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFN3S0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNRbWxoY3pvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkT2IzSnRZV3hDYVdGek9pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSdmQxSmhaR2wxY3pvZ2UzMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkTllYQlRhWHBsT2lCN2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDBOaGJXVnlZVTVsWVhJNklIdDlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1EyRnRaWEpoUm1GeU9pQjdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQndiMmx1ZEZOb1lXUnZkMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dXMTBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhCdmFXNTBVMmhoWkc5M1RXRjBjbWw0T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYUdWdGFYTndhR1Z5WlV4cFoyaDBjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1cxMHNDaUFnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJqb2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YTNsRGIyeHZjam9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNtOTFibVJEYjJ4dmNqb2dlMzBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjbVZqZEVGeVpXRk1hV2RvZEhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkTEFvZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqb2dlMzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiam9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUh0OUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUd4MFkxOHhPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0JzZEdOZk1qb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0J3YjJsdWRITTZJSHNLSUNBZ0lDQWdJQ0JrYVdabWRYTmxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dZV1VvTVRZM056Y3lNVFVwQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCdmNHRmphWFI1T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6YVhwbE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCelkyRnNaVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Rb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdiV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCaGJIQm9ZVTFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1lXeHdhR0ZVWlhOME9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCMWRsUnlZVzV6Wm05eWJUb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lHeDBDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZTd0tJQ0FnSUhOd2NtbDBaVG9nZXdvZ0lDQWdJQ0FnSUdScFptWjFjMlU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJoWlNneE5qYzNOekl4TlNrS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHOXdZV05wZEhrNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdObGJuUmxjam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJRmdvTGpVc0lDNDFLUW9nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnY205MFlYUnBiMjQ2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklEQUtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJRzFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ1lXeHdhR0ZOWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHRnNjR2hoVkdWemREb2dld29nSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2RYWlVjbUZ1YzJadmNtMDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGR5QnNkQW9nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtmU3dnY1hRZ1BTQjdDaUFnSUNCaVlYTnBZem9nZXdvZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCNWRDaGJDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtTnZiVzF2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdhV1V1YzNCbFkzVnNZWEp0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG1WdWRtMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVZVzl0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG14cFoyaDBiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnBaUzVtYjJjS0lDQWdJQ0FnSUNCZEtTd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUVabExtMWxjMmhpWVhOcFkxOTJaWEowTEFvZ0lDQWdJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJHWlM1dFpYTm9ZbUZ6YVdOZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUd4aGJXSmxjblE2SUhzS0lDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ2VYUW9Xd29nSUNBZ0lDQWdJQ0FnSUNCcFpTNWpiMjF0YjI0c0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG5Od1pXTjFiR0Z5YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwWlM1bGJuWnRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHbGxMbUZ2YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwWlM1c2FXZG9kRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdhV1V1WlcxcGMzTnBkbVZ0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG1adlp5d0tJQ0FnSUNBZ0lDQWdJQ0FnYVdVdWJHbG5hSFJ6TEFvZ0lDQWdJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiV2x6YzJsMlpUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1lXVW9NQ2tLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lGMHBMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ1JtVXViV1Z6YUd4aGJXSmxjblJmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1JtVXViV1Z6YUd4aGJXSmxjblJmWm5KaFp3b2dJQ0FnZlN3S0lDQWdJSEJvYjI1bk9pQjdDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSGwwS0ZzS0lDQWdJQ0FnSUNBZ0lDQWdhV1V1WTI5dGJXOXVMQW9nSUNBZ0lDQWdJQ0FnSUNCcFpTNXpjR1ZqZFd4aGNtMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVaVzUyYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwWlM1aGIyMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXViR2xuYUhSdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtVnRhWE56YVhabGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCcFpTNWlkVzF3YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwWlM1dWIzSnRZV3h0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG1ScGMzQnNZV05sYldWdWRHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVabTluTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBaUzVzYVdkb2RITXNDaUFnSUNBZ0lDQWdJQ0FnSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdGFYTnphWFpsT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkeUJoWlNnd0tRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITndaV04xYkdGeU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzVsZHlCaFpTZ3hNVEU0TkRneEtRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9hVzVwYm1WemN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF6TUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdYU2tzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQkdaUzV0WlhOb2NHaHZibWRmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1JtVXViV1Z6YUhCb2IyNW5YMlp5WVdjS0lDQWdJSDBzQ2lBZ0lDQnpkR0Z1WkdGeVpEb2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI1ZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR2xsTG1OdmJXMXZiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVaVzUyYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwWlM1aGIyMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXViR2xuYUhSdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtVnRhWE56YVhabGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCcFpTNWlkVzF3YldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwWlM1dWIzSnRZV3h0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG1ScGMzQnNZV05sYldWdWRHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVjbTkxWjJodVpYTnpiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnBaUzV0WlhSaGJHNWxjM050WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG1adlp5d0tJQ0FnSUNBZ0lDQWdJQ0FnYVdVdWJHbG5hSFJ6TEFvZ0lDQWdJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiV2x6YzJsMlpUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1lXVW9NQ2tLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNWbmFHNWxjM002SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Rb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxkR0ZzYm1WemN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1MlRXRndTVzUwWlc1emFYUjVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURFS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJRjBwTEFvZ0lDQWdJQ0FnSUhabGNuUmxlRk5vWVdSbGNqb2dSbVV1YldWemFIQm9lWE5wWTJGc1gzWmxjblFzQ2lBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJRVpsTG0xbGMyaHdhSGx6YVdOaGJGOW1jbUZuQ2lBZ0lDQjlMQW9nSUNBZ2RHOXZiam9nZXdvZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCNWRDaGJDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtTnZiVzF2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdhV1V1WVc5dFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUdsbExteHBaMmgwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JwWlM1bGJXbHpjMmwyWlcxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYVdVdVluVnRjRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdhV1V1Ym05eWJXRnNiV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnBaUzVrYVhOd2JHRmpaVzFsYm5SdFlYQXNDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtZHlZV1JwWlc1MGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCcFpTNW1iMmNzQ2lBZ0lDQWdJQ0FnSUNBZ0lHbGxMbXhwWjJoMGN5d0tJQ0FnSUNBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlcxcGMzTnBkbVU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJR0ZsS0RBcENpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JkS1N3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJRVpsTG0xbGMyaDBiMjl1WDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklFWmxMbTFsYzJoMGIyOXVYMlp5WVdjS0lDQWdJSDBzQ2lBZ0lDQnRZWFJqWVhBNklIc0tJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2dlWFFvV3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaUzVqYjIxdGIyNHNDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtSjFiWEJ0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJR2xsTG01dmNtMWhiRzFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdhV1V1WkdsemNHeGhZMlZ0Wlc1MGJXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCcFpTNW1iMmNzQ2lBZ0lDQWdJQ0FnSUNBZ0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhkR05oY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmRLU3dLSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklFWmxMbTFsYzJodFlYUmpZWEJmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1JtVXViV1Z6YUcxaGRHTmhjRjltY21GbkNpQWdJQ0I5TEFvZ0lDQWdjRzlwYm5Sek9pQjdDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSGwwS0ZzS0lDQWdJQ0FnSUNBZ0lDQWdhV1V1Y0c5cGJuUnpMQW9nSUNBZ0lDQWdJQ0FnSUNCcFpTNW1iMmNLSUNBZ0lDQWdJQ0JkS1N3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJRVpsTG5CdmFXNTBjMTkyWlhKMExBb2dJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCR1pTNXdiMmx1ZEhOZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUdSaGMyaGxaRG9nZXdvZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCNWRDaGJDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtTnZiVzF2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdhV1V1Wm05bkxBb2dJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF4Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGemFGTnBlbVU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Rb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZkR0ZzVTJsNlpUb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmRLU3dLSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklFWmxMbXhwYm1Wa1lYTm9aV1JmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1JtVXViR2x1WldSaGMyaGxaRjltY21GbkNpQWdJQ0I5TEFvZ0lDQWdaR1Z3ZEdnNklIc0tJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2dlWFFvV3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaUzVqYjIxdGIyNHNDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtUnBjM0JzWVdObGJXVnVkRzFoY0FvZ0lDQWdJQ0FnSUYwcExBb2dJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nUm1VdVpHVndkR2hmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1JtVXVaR1Z3ZEdoZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUc1dmNtMWhiRG9nZXdvZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCNWRDaGJDaUFnSUNBZ0lDQWdJQ0FnSUdsbExtTnZiVzF2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdhV1V1WW5WdGNHMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVibTl5YldGc2JXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCcFpTNWthWE53YkdGalpXMWxiblJ0WVhBc0NpQWdJQ0FnSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3WVdOcGRIazZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTVFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdYU2tzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQkdaUzV0WlhOb2JtOXliV0ZzWDNabGNuUXNDaUFnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklFWmxMbTFsYzJodWIzSnRZV3hmWm5KaFp3b2dJQ0FnZlN3S0lDQWdJSE53Y21sMFpUb2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI1ZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR2xsTG5Od2NtbDBaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVabTluQ2lBZ0lDQWdJQ0FnWFNrc0NpQWdJQ0FnSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUJHWlM1emNISnBkR1ZmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1JtVXVjM0J5YVhSbFgyWnlZV2NLSUNBZ0lIMHNDaUFnSUNCaVlXTnJaM0p2ZFc1a09pQjdDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RYWlVjbUZ1YzJadmNtMDZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnYkhRS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RESkVPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0IyWlhKMFpYaFRhR0ZrWlhJNklFWmxMbUpoWTJ0bmNtOTFibVJmZG1WeWRDd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1JtVXVZbUZqYTJkeWIzVnVaRjltY21GbkNpQWdJQ0I5TEFvZ0lDQWdZM1ZpWlRvZ2V3b2dJQ0FnSUNBZ0lIVnVhV1p2Y20xek9pQjVkQ2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lHbGxMbVZ1ZG0xaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCaFkybDBlVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBeENpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JkS1N3S0lDQWdJQ0FnSUNCMlpYSjBaWGhUYUdGa1pYSTZJRVpsTG1OMVltVmZkbVZ5ZEN3S0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nUm1VdVkzVmlaVjltY21GbkNpQWdJQ0I5TEFvZ0lDQWdaWEYxYVhKbFkzUTZJSHNLSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBSWEYxYVhKbFkzUTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ1JtVXVaWEYxYVhKbFkzUmZkbVZ5ZEN3S0lDQWdJQ0FnSUNCbWNtRm5iV1Z1ZEZOb1lXUmxjam9nUm1VdVpYRjFhWEpsWTNSZlpuSmhad29nSUNBZ2ZTd0tJQ0FnSUdScGMzUmhibU5sVWtkQ1FUb2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI1ZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR2xsTG1OdmJXMXZiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVaR2x6Y0d4aFkyVnRaVzUwYldGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldabGNtVnVZMlZRYjNOcGRHbHZiam9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dUUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsWVhKRWFYTjBZVzVqWlRvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQXhDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZ5UkdsemRHRnVZMlU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01XVXpDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCZEtTd0tJQ0FnSUNBZ0lDQjJaWEowWlhoVGFHRmtaWEk2SUVabExtUnBjM1JoYm1ObFVrZENRVjkyWlhKMExBb2dJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCR1pTNWthWE4wWVc1alpWSkhRa0ZmWm5KaFp3b2dJQ0FnZlN3S0lDQWdJSE5vWVdSdmR6b2dld29nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI1ZENoYkNpQWdJQ0FnSUNBZ0lDQWdJR2xsTG14cFoyaDBjeXdLSUNBZ0lDQWdJQ0FnSUNBZ2FXVXVabTluTEFvZ0lDQWdJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnWVdVb01Da0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjR0ZqYVhSNU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREVLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lGMHBMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ1JtVXVjMmhoWkc5M1gzWmxjblFzQ2lBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJRVpsTG5Ob1lXUnZkMTltY21GbkNpQWdJQ0I5Q24wN0NuRjBMbkJvZVhOcFkyRnNJRDBnZXdvZ0lDQWdkVzVwWm05eWJYTTZJSGwwS0ZzS0lDQWdJQ0FnSUNCeGRDNXpkR0Z1WkdGeVpDNTFibWxtYjNKdGN5d0tJQ0FnSUNBZ0lDQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlZMjloZERvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SURBS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGMFRXRndPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2diblZzYkFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCamJHVmhjbU52WVhSU2IzVm5hRzVsYzNNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lBd0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRzUxYkd3S0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpqYjJGMFRtOXliV0ZzVTJOaGJHVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGNnV0NneExDQXhLUW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCemFHVmxia052Ykc5eU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJR0ZsS0RBcENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1UTI5c2IzSk5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1VW05MVoyaHVaWE56T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCemFHVmxibEp2ZFdkb2JtVnpjMDFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5OdGFYTnphVzl1T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMjFwYzNOcGIyNU5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6YldsemMybHZibE5oYlhCc1pYSlRhWHBsT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM0lGZ0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5OdGFYTnphVzl1VTJGdGNHeGxjazFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkR2hwWTJ0dVpYTnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsamEyNWxjM05OWVhBNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdWRXeHNDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJR0YwZEdWdWRXRjBhVzl1UkdsemRHRnVZMlU2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdGMGRHVnVkV0YwYVc5dVEyOXNiM0k2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1WlhjZ1lXVW9NQ2tLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNCbFkzVnNZWEpKYm5SbGJuTnBkSGs2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhOd1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6Y0dWamRXeGhja052Ykc5eU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNJR0ZsS0RFc0lERXNJREVwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhOd1pXTjFiR0Z5UTI5c2IzSk5ZWEE2SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQmRLU3dLSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nUm1VdWJXVnphSEJvZVhOcFkyRnNYM1psY25Rc0NpQWdJQ0JtY21GbmJXVnVkRk5vWVdSbGNqb2dSbVV1YldWemFIQm9lWE5wWTJGc1gyWnlZV2NLZlRzS1puVnVZM1JwYjI0Z1ZtMG9jeXdnWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnYkdWMElISWdQU0J1WlhjZ1lXVW9NQ2tzSUc4Z1BTQXdMQ0JoTENCc0xDQmpJRDBnYm5Wc2JDd2dhQ0E5SURBc0lIVWdQU0J1ZFd4c093b2dJQ0FnWm5WdVkzUnBiMjRnWkNodExDQjRLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIWWdQU0FoTVN3Z1p5QTlJSGd1YVhOVFkyVnVaU0E5UFQwZ0lUQWdQeUI0TG1KaFkydG5jbTkxYm1RZ09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUdjZ0ppWWdaeTVwYzFSbGVIUjFjbVVnSmlZZ0tHY2dQU0JsTG1kbGRDaG5LU2s3Q2lBZ0lDQWdJQ0FnYkdWMElIQWdQU0J6TG5oeUxDQmZJRDBnY0M1blpYUlRaWE56YVc5dUlDWW1JSEF1WjJWMFUyVnpjMmx2YmlncE93b2dJQ0FnSUNBZ0lGOGdKaVlnWHk1bGJuWnBjbTl1YldWdWRFSnNaVzVrVFc5a1pTQTlQVDBnSW1Ga1pHbDBhWFpsSWlBbUppQW9aeUE5SUc1MWJHd3BMQ0JuSUQwOVBTQnVkV3hzSUQ4Z1ppaHlMQ0J2S1NBNklHY2dKaVlnWnk1cGMwTnZiRzl5SUNZbUlDaG1LR2NzSURFcExDQjJJRDBnSVRBcExDQW9jeTVoZFhSdlEyeGxZWElnZkh3Z2Rpa2dKaVlnY3k1amJHVmhjaWh6TG1GMWRHOURiR1ZoY2tOdmJHOXlMQ0J6TG1GMWRHOURiR1ZoY2tSbGNIUm9MQ0J6TG1GMWRHOURiR1ZoY2xOMFpXNWphV3dwTENCbklDWW1JQ2huTG1selEzVmlaVlJsZUhSMWNtVWdmSHdnWnk1dFlYQndhVzVuSUQwOVBTQlFjaWtnUHlBb2JDQTlQVDBnZG05cFpDQXdJQ1ltSUNoc0lEMGdibVYzSUhOMEtHNWxkeUIzYmlneExDQXhMQ0F4S1N3Z2JtVjNJSE51S0hzS0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ0lrSmhZMnRuY205MWJtUkRkV0psVFdGMFpYSnBZV3dpTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2dVbWtvY1hRdVkzVmlaUzUxYm1sbWIzSnRjeWtzQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nY1hRdVkzVmlaUzUyWlhKMFpYaFRhR0ZrWlhJc0NpQWdJQ0FnSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQnhkQzVqZFdKbExtWnlZV2R0Wlc1MFUyaGhaR1Z5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnphV1JsT2lCcGRDd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHaFVaWE4wT2lBaE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHaFhjbWwwWlRvZ0lURXNDaUFnSUNBZ0lDQWdJQ0FnSUdadlp6b2dJVEVLSUNBZ0lDQWdJQ0I5S1Nrc0lHd3VaMlZ2YldWMGNua3VaR1ZzWlhSbFFYUjBjbWxpZFhSbEtDSnViM0p0WVd3aUtTd2diQzVuWlc5dFpYUnllUzVrWld4bGRHVkJkSFJ5YVdKMWRHVW9JblYySWlrc0lHd3ViMjVDWldadmNtVlNaVzVrWlhJZ1BTQm1kVzVqZEdsdmJpaDVMQ0JpTENCQktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViV0YwY21sNFYyOXliR1F1WTI5d2VWQnZjMmwwYVc5dUtFRXViV0YwY21sNFYyOXliR1FwT3dvZ0lDQWdJQ0FnSUgwc0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hzTG0xaGRHVnlhV0ZzTENBaVpXNTJUV0Z3SWl3Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZFc1cFptOXliWE11Wlc1MlRXRndMblpoYkhWbE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNrc0lHNHVkWEJrWVhSbEtHd3BLU3dnYkM1dFlYUmxjbWxoYkM1MWJtbG1iM0p0Y3k1bGJuWk5ZWEF1ZG1Gc2RXVWdQU0JuTENCc0xtMWhkR1Z5YVdGc0xuVnVhV1p2Y20xekxtWnNhWEJGYm5aTllYQXVkbUZzZFdVZ1BTQm5MbWx6UTNWaVpWUmxlSFIxY21VZ0ppWWdaeTVwYzFKbGJtUmxjbFJoY21kbGRGUmxlSFIxY21VZ1BUMDlJQ0V4SUQ4Z0xURWdPaUF4TENBb1l5QWhQVDBnWnlCOGZDQm9JQ0U5UFNCbkxuWmxjbk5wYjI0Z2ZId2dkU0FoUFQwZ2N5NTBiMjVsVFdGd2NHbHVaeWtnSmlZZ0tHd3ViV0YwWlhKcFlXd3VibVZsWkhOVmNHUmhkR1VnUFNBaE1Dd2dZeUE5SUdjc0lHZ2dQU0JuTG5abGNuTnBiMjRzSUhVZ1BTQnpMblJ2Ym1WTllYQndhVzVuS1N3Z2JTNTFibk5vYVdaMEtHd3NJR3d1WjJWdmJXVjBjbmtzSUd3dWJXRjBaWEpwWVd3c0lEQXNJREFzSUc1MWJHd3BLU0E2SUdjZ0ppWWdaeTVwYzFSbGVIUjFjbVVnSmlZZ0tHRWdQVDA5SUhadmFXUWdNQ0FtSmlBb1lTQTlJRzVsZHlCemRDaHVaWGNnVUdrb01pd2dNaWtzSUc1bGR5QnpiaWg3Q2lBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNKQ1lXTnJaM0p2ZFc1a1RXRjBaWEpwWVd3aUxBb2dJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjem9nVW1rb2NYUXVZbUZqYTJkeWIzVnVaQzUxYm1sbWIzSnRjeWtzQ2lBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nY1hRdVltRmphMmR5YjNWdVpDNTJaWEowWlhoVGFHRmtaWElzQ2lBZ0lDQWdJQ0FnSUNBZ0lHWnlZV2R0Wlc1MFUyaGhaR1Z5T2lCeGRDNWlZV05yWjNKdmRXNWtMbVp5WVdkdFpXNTBVMmhoWkdWeUxBb2dJQ0FnSUNBZ0lDQWdJQ0J6YVdSbE9pQkJhU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hVWlhOME9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hYY21sMFpUb2dJVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHWnZaem9nSVRFS0lDQWdJQ0FnSUNCOUtTa3NJR0V1WjJWdmJXVjBjbmt1WkdWc1pYUmxRWFIwY21saWRYUmxLQ0p1YjNKdFlXd2lLU3dnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHRXViV0YwWlhKcFlXd3NJQ0p0WVhBaUxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MWJtbG1iM0p0Y3k1ME1rUXVkbUZzZFdVN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5S1N3Z2JpNTFjR1JoZEdVb1lTa3BMQ0JoTG0xaGRHVnlhV0ZzTG5WdWFXWnZjbTF6TG5ReVJDNTJZV3gxWlNBOUlHY3NJR2N1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5UFQwZ0lUQWdKaVlnWnk1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnWVM1dFlYUmxjbWxoYkM1MWJtbG1iM0p0Y3k1MWRsUnlZVzV6Wm05eWJTNTJZV3gxWlM1amIzQjVLR2N1YldGMGNtbDRLU3dnS0dNZ0lUMDlJR2NnZkh3Z2FDQWhQVDBnWnk1MlpYSnphVzl1SUh4OElIVWdJVDA5SUhNdWRHOXVaVTFoY0hCcGJtY3BJQ1ltSUNoaExtMWhkR1Z5YVdGc0xtNWxaV1J6VlhCa1lYUmxJRDBnSVRBc0lHTWdQU0JuTENCb0lEMGdaeTUyWlhKemFXOXVMQ0IxSUQwZ2N5NTBiMjVsVFdGd2NHbHVaeWtzSUcwdWRXNXphR2xtZENoaExDQmhMbWRsYjIxbGRISjVMQ0JoTG0xaGRHVnlhV0ZzTENBd0xDQXdMQ0J1ZFd4c0tTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJtS0cwc0lIZ3BJSHNLSUNBZ0lDQWdJQ0IwTG1KMVptWmxjbk11WTI5c2IzSXVjMlYwUTJ4bFlYSW9iUzV5TENCdExtY3NJRzB1WWl3Z2VDd2dhU2s3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUdkbGRFTnNaV0Z5UTI5c2IzSTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2Nqc0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSE5sZEVOc1pXRnlRMjlzYjNJNklHWjFibU4wYVc5dUtHMHNJSGdnUFNBeEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhJdWMyVjBLRzBwTENCdklEMGdlQ3dnWmloeUxDQnZLVHNLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUdkbGRFTnNaV0Z5UVd4d2FHRTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2J6c0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSE5sZEVOc1pXRnlRV3h3YUdFNklHWjFibU4wYVc5dUtHMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJRzBzSUdZb2Npd2dieWs3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCeVpXNWtaWEk2SUdRS0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z1YyMG9jeXdnWlN3Z2RDd2diaWtnZXdvZ0lDQWdiR1YwSUdrZ1BTQnpMbWRsZEZCaGNtRnRaWFJsY2lnek5Ea3lNU2tzSUhJZ1BTQnVMbWx6VjJWaVIwd3lJRDhnYm5Wc2JDQTZJR1V1WjJWMEtDSlBSVk5mZG1WeWRHVjRYMkZ5Y21GNVgyOWlhbVZqZENJcExDQnZJRDBnYmk1cGMxZGxZa2RNTWlCOGZDQnlJQ0U5UFNCdWRXeHNMQ0JoSUQwZ2UzMHNJR3dnUFNCNEtHNTFiR3dwTENCaklEMGdiRHNLSUNBZ0lHWjFibU4wYVc5dUlHZ29SU3dnUkN3Z1ZTd2dSaXdnVHlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1WlNBOUlDRXhPd29nSUNBZ0lDQWdJR2xtSUNodktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpaU0E5SUcwb1Jpd2dWU3dnUkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR01nSVQwOUlHTmxJQ1ltSUNoaklEMGdZMlVzSUdRb1l5NXZZbXBsWTNRcEtTd2dibVVnUFNCMktFWXNJRThwTENCdVpTQW1KaUJuS0VZc0lFOHBPd29nSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpaU0E5SUVRdWQybHlaV1p5WVcxbElEMDlQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdLR011WjJWdmJXVjBjbmtnSVQwOUlFWXVhV1FnZkh3Z1l5NXdjbTluY21GdElDRTlQU0JWTG1sa0lIeDhJR011ZDJseVpXWnlZVzFsSUNFOVBTQmpaU2tnSmlZZ0tHTXVaMlZ2YldWMGNua2dQU0JHTG1sa0xDQmpMbkJ5YjJkeVlXMGdQU0JWTG1sa0xDQmpMbmRwY21WbWNtRnRaU0E5SUdObExDQnVaU0E5SUNFd0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdSUzVwYzBsdWMzUmhibU5sWkUxbGMyZ2dQVDA5SUNFd0lDWW1JQ2h1WlNBOUlDRXdLU3dnVHlBaFBUMGdiblZzYkNBbUppQjBMblZ3WkdGMFpTaFBMQ0F6TkRrMk15a3NJRzVsSUNZbUlDaE1LRVVzSUVRc0lGVXNJRVlwTENCUElDRTlQU0J1ZFd4c0lDWW1JSE11WW1sdVpFSjFabVpsY2lnek5EazJNeXdnZEM1blpYUW9UeWt1WW5WbVptVnlLU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCMUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVMbWx6VjJWaVIwd3lJRDhnY3k1amNtVmhkR1ZXWlhKMFpYaEJjbkpoZVNncElEb2djaTVqY21WaGRHVldaWEowWlhoQmNuSmhlVTlGVXlncE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdaQ2hGS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWFYTlhaV0pIVERJZ1B5QnpMbUpwYm1SV1pYSjBaWGhCY25KaGVTaEZLU0E2SUhJdVltbHVaRlpsY25SbGVFRnljbUY1VDBWVEtFVXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWmloRktTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNHVhWE5YWldKSFRESWdQeUJ6TG1SbGJHVjBaVlpsY25SbGVFRnljbUY1S0VVcElEb2djaTVrWld4bGRHVldaWEowWlhoQmNuSmhlVTlGVXloRktUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRzBvUlN3Z1JDd2dWU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQkdJRDBnVlM1M2FYSmxabkpoYldVZ1BUMDlJQ0V3TENCUElEMGdZVnRGTG1sa1hUc0tJQ0FnSUNBZ0lDQlBJRDA5UFNCMmIybGtJREFnSmlZZ0tFOGdQU0I3ZlN3Z1lWdEZMbWxrWFNBOUlFOHBPd29nSUNBZ0lDQWdJR3hsZENCdVpTQTlJRTliUkM1cFpGMDdDaUFnSUNBZ0lDQWdibVVnUFQwOUlIWnZhV1FnTUNBbUppQW9ibVVnUFNCN2ZTd2dUMXRFTG1sa1hTQTlJRzVsS1RzS0lDQWdJQ0FnSUNCc1pYUWdZMlVnUFNCdVpWdEdYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMlVnUFQwOUlIWnZhV1FnTUNBbUppQW9ZMlVnUFNCNEtIVW9LU2tzSUc1bFcwWmRJRDBnWTJVcExDQmpaVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhnb1JTa2dld29nSUNBZ0lDQWdJR3hsZENCRUlEMGdXMTBzSUZVZ1BTQmJYU3dnUmlBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdUeUE5SURBN0lFOGdQQ0JwT3lCUEt5c3BSRnRQWFNBOUlEQXNJRlZiVDEwZ1BTQXdMQ0JHVzA5ZElEMGdNRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJQ0FnSUNCblpXOXRaWFJ5ZVRvZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZaM0poYlRvZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2QybHlaV1p5WVcxbE9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNRWFIwY21saWRYUmxjem9nUkN3S0lDQWdJQ0FnSUNBZ0lDQWdaVzVoWW14bFpFRjBkSEpwWW5WMFpYTTZJRlVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEpwWW5WMFpVUnBkbWx6YjNKek9pQkdMQW9nSUNBZ0lDQWdJQ0FnSUNCdlltcGxZM1E2SUVVc0NpQWdJQ0FnSUNBZ0lDQWdJR0YwZEhKcFluVjBaWE02SUh0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVEb2diblZzYkFvZ0lDQWdJQ0FnSUgwN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQjJLRVVzSUVRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnVlNBOUlHTXVZWFIwY21saWRYUmxjeXdnUmlBOUlFVXVZWFIwY21saWRYUmxjeXdnVHlBOUlEQTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVaU0JwYmlCR0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTmxJRDBnVlZ0dVpWMHNJRllnUFNCR1cyNWxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05sSUQwOVBTQjJiMmxrSURBZ2ZId2dZMlV1WVhSMGNtbGlkWFJsSUNFOVBTQldJSHg4SUdObExtUmhkR0VnSVQwOUlGWXVaR0YwWVNrZ2NtVjBkWEp1SUNFd093b2dJQ0FnSUNBZ0lDQWdJQ0JQS3lzN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCakxtRjBkSEpwWW5WMFpYTk9kVzBnSVQwOUlFOGdmSHdnWXk1cGJtUmxlQ0FoUFQwZ1JEc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR2NvUlN3Z1JDa2dld29nSUNBZ0lDQWdJR3hsZENCVklEMGdlMzBzSUVZZ1BTQkZMbUYwZEhKcFluVjBaWE1zSUU4Z1BTQXdPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdibVVnYVc0Z1JpbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpaU0E5SUVaYmJtVmRMQ0JXSUQwZ2UzMDdDaUFnSUNBZ0lDQWdJQ0FnSUZZdVlYUjBjbWxpZFhSbElEMGdZMlVzSUdObExtUmhkR0VnSmlZZ0tGWXVaR0YwWVNBOUlHTmxMbVJoZEdFcExDQlZXMjVsWFNBOUlGWXNJRThyS3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1l5NWhkSFJ5YVdKMWRHVnpJRDBnVlN3Z1l5NWhkSFJ5YVdKMWRHVnpUblZ0SUQwZ1R5d2dZeTVwYm1SbGVDQTlJRVE3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCd0tDa2dld29nSUNBZ0lDQWdJR3hsZENCRklEMGdZeTV1WlhkQmRIUnlhV0oxZEdWek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1JDQTlJREFzSUZVZ1BTQkZMbXhsYm1kMGFEc2dSQ0E4SUZVN0lFUXJLeWxGVzBSZElEMGdNRHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUY4b1JTa2dld29nSUNBZ0lDQWdJSGtvUlN3Z01DazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUI1S0VVc0lFUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1ZTQTlJR011Ym1WM1FYUjBjbWxpZFhSbGN5d2dSaUE5SUdNdVpXNWhZbXhsWkVGMGRISnBZblYwWlhNc0lFOGdQU0JqTG1GMGRISnBZblYwWlVScGRtbHpiM0p6T3dvZ0lDQWdJQ0FnSUZWYlJWMGdQU0F4TENCR1cwVmRJRDA5UFNBd0lDWW1JQ2h6TG1WdVlXSnNaVlpsY25SbGVFRjBkSEpwWWtGeWNtRjVLRVVwTENCR1cwVmRJRDBnTVNrc0lFOWJSVjBnSVQwOUlFUWdKaVlnS0NodUxtbHpWMlZpUjB3eUlEOGdjeUE2SUdVdVoyVjBLQ0pCVGtkTVJWOXBibk4wWVc1alpXUmZZWEp5WVhseklpa3BXMjR1YVhOWFpXSkhURElnUHlBaWRtVnlkR1Y0UVhSMGNtbGlSR2wyYVhOdmNpSWdPaUFpZG1WeWRHVjRRWFIwY21saVJHbDJhWE52Y2tGT1IweEZJbDBvUlN3Z1JDa3NJRTliUlYwZ1BTQkVLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdJb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUVVZ1BTQmpMbTVsZDBGMGRISnBZblYwWlhNc0lFUWdQU0JqTG1WdVlXSnNaV1JCZEhSeWFXSjFkR1Z6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVlNBOUlEQXNJRVlnUFNCRUxteGxibWQwYURzZ1ZTQThJRVk3SUZVckt5bEVXMVZkSUNFOVBTQkZXMVZkSUNZbUlDaHpMbVJwYzJGaWJHVldaWEowWlhoQmRIUnlhV0pCY25KaGVTaFZLU3dnUkZ0VlhTQTlJREFwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1FTaEZMQ0JFTENCVkxDQkdMQ0JQTENCdVpTa2dld29nSUNBZ0lDQWdJRzR1YVhOWFpXSkhURElnUFQwOUlDRXdJQ1ltSUNoVklEMDlQU0ExTVRJMElIeDhJRlVnUFQwOUlEVXhNalVwSUQ4Z2N5NTJaWEowWlhoQmRIUnlhV0pKVUc5cGJuUmxjaWhGTENCRUxDQlZMQ0JQTENCdVpTa2dPaUJ6TG5abGNuUmxlRUYwZEhKcFlsQnZhVzUwWlhJb1JTd2dSQ3dnVlN3Z1Jpd2dUeXdnYm1VcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdUQ2hGTENCRUxDQlZMQ0JHS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLRzR1YVhOWFpXSkhURElnUFQwOUlDRXhJQ1ltSUNoRkxtbHpTVzV6ZEdGdVkyVmtUV1Z6YUNCOGZDQkdMbWx6U1c1emRHRnVZMlZrUW5WbVptVnlSMlZ2YldWMGNua3BJQ1ltSUdVdVoyVjBLQ0pCVGtkTVJWOXBibk4wWVc1alpXUmZZWEp5WVhseklpa2dQVDA5SUc1MWJHd3BJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQndLQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElFOGdQU0JHTG1GMGRISnBZblYwWlhNc0lHNWxJRDBnVlM1blpYUkJkSFJ5YVdKMWRHVnpLQ2tzSUdObElEMGdSQzVrWldaaGRXeDBRWFIwY21saWRYUmxWbUZzZFdWek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ZpQnBiaUJ1WlNsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWElEMGdibVZiVmwwN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoWExteHZZMkYwYVc5dUlENDlJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9aU0E5SUU5YlZsMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUdVZ1BUMDlJSFp2YVdRZ01DQW1KaUFvVmlBOVBUMGdJbWx1YzNSaGJtTmxUV0YwY21sNElpQW1KaUJGTG1sdWMzUmhibU5sVFdGMGNtbDRJQ1ltSUNob1pTQTlJRVV1YVc1emRHRnVZMlZOWVhSeWFYZ3BMQ0JXSUQwOVBTQWlhVzV6ZEdGdVkyVkRiMnh2Y2lJZ0ppWWdSUzVwYm5OMFlXNWpaVU52Ykc5eUlDWW1JQ2hvWlNBOUlFVXVhVzV6ZEdGdVkyVkRiMnh2Y2lrcExDQm9aU0FoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd4bElEMGdhR1V1Ym05eWJXRnNhWHBsWkN3Z1ptVWdQU0JvWlM1cGRHVnRVMmw2WlN3Z1FtVWdQU0IwTG1kbGRDaG9aU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRUpsSUQwOVBTQjJiMmxrSURBcElHTnZiblJwYm5WbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWklEMGdRbVV1WW5WbVptVnlMQ0JEWlNBOUlFSmxMblI1Y0dVc0lIbGxJRDBnUW1VdVlubDBaWE5RWlhKRmJHVnRaVzUwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hvWlM1cGMwbHVkR1Z5YkdWaGRtVmtRblZtWm1WeVFYUjBjbWxpZFhSbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuWlNBOUlHaGxMbVJoZEdFc0lIaGxJRDBnWjJVdWMzUnlhV1JsTENCUFpTQTlJR2hsTG05bVpuTmxkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbElDWW1JR2RsTG1selNXNXpkR0Z1WTJWa1NXNTBaWEpzWldGMlpXUkNkV1ptWlhJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdSeUE5SURBN0lFY2dQQ0JYTG14dlkyRjBhVzl1VTJsNlpUc2dSeXNyS1hrb1Z5NXNiMk5oZEdsdmJpQXJJRWNzSUdkbExtMWxjMmhRWlhKQmRIUnlhV0oxZEdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSUzVwYzBsdWMzUmhibU5sWkUxbGMyZ2dJVDA5SUNFd0lDWW1JRVl1WDIxaGVFbHVjM1JoYm1ObFEyOTFiblFnUFQwOUlIWnZhV1FnTUNBbUppQW9SaTVmYldGNFNXNXpkR0Z1WTJWRGIzVnVkQ0E5SUdkbExtMWxjMmhRWlhKQmRIUnlhV0oxZEdVZ0tpQm5aUzVqYjNWdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCbWIzSW9iR1YwSUVjZ1BTQXdPeUJISUR3Z1Z5NXNiMk5oZEdsdmJsTnBlbVU3SUVjckt5bGZLRmN1Ykc5allYUnBiMjRnS3lCSEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N5NWlhVzVrUW5WbVptVnlLRE0wT1RZeUxDQlpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkhJRDBnTURzZ1J5QThJRmN1Ykc5allYUnBiMjVUYVhwbE95QkhLeXNwUVNoWExteHZZMkYwYVc5dUlDc2dSeXdnWm1VZ0x5QlhMbXh2WTJGMGFXOXVVMmw2WlN3Z1EyVXNJR3hsTENCNFpTQXFJSGxsTENBb1QyVWdLeUJtWlNBdklGY3ViRzlqWVhScGIyNVRhWHBsSUNvZ1J5a2dLaUI1WlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2hsTG1selNXNXpkR0Z1WTJWa1FuVm1abVZ5UVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHZGxJRDBnTURzZ1oyVWdQQ0JYTG14dlkyRjBhVzl1VTJsNlpUc2daMlVyS3lsNUtGY3ViRzlqWVhScGIyNGdLeUJuWlN3Z2FHVXViV1Z6YUZCbGNrRjBkSEpwWW5WMFpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JGTG1selNXNXpkR0Z1WTJWa1RXVnphQ0FoUFQwZ0lUQWdKaVlnUmk1ZmJXRjRTVzV6ZEdGdVkyVkRiM1Z1ZENBOVBUMGdkbTlwWkNBd0lDWW1JQ2hHTGw5dFlYaEpibk4wWVc1alpVTnZkVzUwSUQwZ2FHVXViV1Z6YUZCbGNrRjBkSEpwWW5WMFpTQXFJR2hsTG1OdmRXNTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHWnZjaWhzWlhRZ1oyVWdQU0F3T3lCblpTQThJRmN1Ykc5allYUnBiMjVUYVhwbE95Qm5aU3NyS1Y4b1Z5NXNiMk5oZEdsdmJpQXJJR2RsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3k1aWFXNWtRblZtWm1WeUtETTBPVFl5TENCWktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCblpTQTlJREE3SUdkbElEd2dWeTVzYjJOaGRHbHZibE5wZW1VN0lHZGxLeXNwUVNoWExteHZZMkYwYVc5dUlDc2daMlVzSUdabElDOGdWeTVzYjJOaGRHbHZibE5wZW1Vc0lFTmxMQ0JzWlN3Z1ptVWdLaUI1WlN3Z1ptVWdMeUJYTG14dlkyRjBhVzl1VTJsNlpTQXFJR2RsSUNvZ2VXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyVWdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzWlNBOUlHTmxXMVpkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWlNBaFBUMGdkbTlwWkNBd0tTQnpkMmwwWTJnb2JHVXViR1Z1WjNSb0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F5T2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N5NTJaWEowWlhoQmRIUnlhV0l5Wm5Zb1Z5NXNiMk5oZEdsdmJpd2diR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ016b0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11ZG1WeWRHVjRRWFIwY21saU0yWjJLRmN1Ykc5allYUnBiMjRzSUd4bEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCekxuWmxjblJsZUVGMGRISnBZalJtZGloWExteHZZMkYwYVc5dUxDQnNaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11ZG1WeWRHVjRRWFIwY21saU1XWjJLRmN1Ykc5allYUnBiMjRzSUd4bEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdZaWdwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1NTZ3BJSHNLSUNBZ0lDQWdJQ0JRS0NrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCRklHbHVJR0VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUkNBOUlHRmJSVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ZTQnBiaUJFS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkdJRDBnUkZ0VlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1R5QnBiaUJHS1dZb1JsdFBYUzV2WW1wbFkzUXBMQ0JrWld4bGRHVWdSbHRQWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JFVzFWZE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCaFcwVmRPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdzb1JTa2dld29nSUNBZ0lDQWdJR2xtSUNoaFcwVXVhV1JkSUQwOVBTQjJiMmxrSURBcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCc1pYUWdSQ0E5SUdGYlJTNXBaRjA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JWSUdsdUlFUXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSaUE5SUVSYlZWMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnVHlCcGJpQkdLV1lvUmx0UFhTNXZZbXBsWTNRcExDQmtaV3hsZEdVZ1JsdFBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUVSYlZWMDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1JsYkdWMFpTQmhXMFV1YVdSZE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdRaWhGS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCRUlHbHVJR0VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVlNBOUlHRmJSRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hWVzBVdWFXUmRJRDA5UFNCMmIybGtJREFwSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUmlBOUlGVmJSUzVwWkYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdUeUJwYmlCR0tXWW9SbHRQWFM1dlltcGxZM1FwTENCa1pXeGxkR1VnUmx0UFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRlZiUlM1cFpGMDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnVUNncElIc0tJQ0FnSUNBZ0lDQjNLQ2tzSUdNZ0lUMDlJR3dnSmlZZ0tHTWdQU0JzTENCa0tHTXViMkpxWldOMEtTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUIzS0NrZ2V3b2dJQ0FnSUNBZ0lHd3VaMlZ2YldWMGNua2dQU0J1ZFd4c0xDQnNMbkJ5YjJkeVlXMGdQU0J1ZFd4c0xDQnNMbmRwY21WbWNtRnRaU0E5SUNFeE93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQnpaWFIxY0RvZ2FDd0tJQ0FnSUNBZ0lDQnlaWE5sZERvZ1VDd0tJQ0FnSUNBZ0lDQnlaWE5sZEVSbFptRjFiSFJUZEdGMFpUb2dkeXdLSUNBZ0lDQWdJQ0JrYVhOd2IzTmxPaUJKTEFvZ0lDQWdJQ0FnSUhKbGJHVmhjMlZUZEdGMFpYTlBaa2RsYjIxbGRISjVPaUJyTEFvZ0lDQWdJQ0FnSUhKbGJHVmhjMlZUZEdGMFpYTlBabEJ5YjJkeVlXMDZJRUlzQ2lBZ0lDQWdJQ0FnYVc1cGRFRjBkSEpwWW5WMFpYTTZJSEFzQ2lBZ0lDQWdJQ0FnWlc1aFlteGxRWFIwY21saWRYUmxPaUJmTEFvZ0lDQWdJQ0FnSUdScGMyRmliR1ZWYm5WelpXUkJkSFJ5YVdKMWRHVnpPaUJpQ2lBZ0lDQjlPd3A5Q21aMWJtTjBhVzl1SUhGdEtITXNJR1VzSUhRc0lHNHBJSHNLSUNBZ0lHeGxkQ0JwSUQwZ2JpNXBjMWRsWWtkTU1pd2djanNLSUNBZ0lHWjFibU4wYVc5dUlHOG9ZeWtnZXdvZ0lDQWdJQ0FnSUhJZ1BTQmpPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWVNoakxDQm9LU0I3Q2lBZ0lDQWdJQ0FnY3k1a2NtRjNRWEp5WVhsektISXNJR01zSUdncExDQjBMblZ3WkdGMFpTaG9MQ0J5TENBeEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR3dvWXl3Z2FDd2dkU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaDFJRDA5UFNBd0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2JHVjBJR1FzSUdZN0NpQWdJQ0FnSUNBZ2FXWWdLR2twSUdRZ1BTQnpMQ0JtSUQwZ0ltUnlZWGRCY25KaGVYTkpibk4wWVc1alpXUWlPd29nSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1FnUFNCbExtZGxkQ2dpUVU1SFRFVmZhVzV6ZEdGdVkyVmtYMkZ5Y21GNWN5SXBMQ0JtSUQwZ0ltUnlZWGRCY25KaGVYTkpibk4wWVc1alpXUkJUa2RNUlNJc0lHUWdQVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4Q2RXWm1aWEpTWlc1a1pYSmxjam9nZFhOcGJtY2dWRWhTUlVVdVNXNXpkR0Z1WTJWa1FuVm1abVZ5UjJWdmJXVjBjbmtnWW5WMElHaGhjbVIzWVhKbElHUnZaWE1nYm05MElITjFjSEJ2Y25RZ1pYaDBaVzV6YVc5dUlFRk9SMHhGWDJsdWMzUmhibU5sWkY5aGNuSmhlWE11SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdaRnRtWFNoeUxDQmpMQ0JvTENCMUtTd2dkQzUxY0dSaGRHVW9hQ3dnY2l3Z2RTazdDaUFnSUNCOUNpQWdJQ0IwYUdsekxuTmxkRTF2WkdVZ1BTQnZMQ0IwYUdsekxuSmxibVJsY2lBOUlHRXNJSFJvYVhNdWNtVnVaR1Z5U1c1emRHRnVZMlZ6SUQwZ2JEc0tmUXBtZFc1amRHbHZiaUJZYlNoekxDQmxMQ0IwS1NCN0NpQWdJQ0JzWlhRZ2Jqc0tJQ0FnSUdaMWJtTjBhVzl1SUdrb0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0c0Z0lUMDlJSFp2YVdRZ01Da2djbVYwZFhKdUlHNDdDaUFnSUNBZ0lDQWdhV1lnS0dVdWFHRnpLQ0pGV0ZSZmRHVjRkSFZ5WlY5bWFXeDBaWEpmWVc1cGMyOTBjbTl3YVdNaUtTQTlQVDBnSVRBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFd2dQU0JsTG1kbGRDZ2lSVmhVWDNSbGVIUjFjbVZmWm1sc2RHVnlYMkZ1YVhOdmRISnZjR2xqSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJRzRnUFNCekxtZGxkRkJoY21GdFpYUmxjaWhNTGsxQldGOVVSVmhVVlZKRlgwMUJXRjlCVGtsVFQxUlNUMUJaWDBWWVZDazdDaUFnSUNBZ0lDQWdmU0JsYkhObElHNGdQU0F3T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2NpaE1LU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tFd2dQVDA5SUNKb2FXZG9jQ0lwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hNdVoyVjBVMmhoWkdWeVVISmxZMmx6YVc5dVJtOXliV0YwS0RNMU5qTXpMQ0F6TmpNek9Da3VjSEpsWTJsemFXOXVJRDRnTUNBbUppQnpMbWRsZEZOb1lXUmxjbEJ5WldOcGMybHZia1p2Y20xaGRDZ3pOVFl6TWl3Z016WXpNemdwTG5CeVpXTnBjMmx2YmlBK0lEQXBJSEpsZEhWeWJpQWlhR2xuYUhBaU93b2dJQ0FnSUNBZ0lDQWdJQ0JNSUQwZ0ltMWxaR2wxYlhBaU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1RDQTlQVDBnSW0xbFpHbDFiWEFpSUNZbUlITXVaMlYwVTJoaFpHVnlVSEpsWTJsemFXOXVSbTl5YldGMEtETTFOak16TENBek5qTXpOeWt1Y0hKbFkybHphVzl1SUQ0Z01DQW1KaUJ6TG1kbGRGTm9ZV1JsY2xCeVpXTnBjMmx2YmtadmNtMWhkQ2d6TlRZek1pd2dNell6TXpjcExuQnlaV05wYzJsdmJpQStJREFnUHlBaWJXVmthWFZ0Y0NJZ09pQWliRzkzY0NJN0NpQWdJQ0I5Q2lBZ0lDQnNaWFFnYnlBOUlIUjVjR1Z2WmlCWFpXSkhUREpTWlc1a1pYSnBibWREYjI1MFpYaDBJRHdnSW5VaUlDWW1JSE1nYVc1emRHRnVZMlZ2WmlCWFpXSkhUREpTWlc1a1pYSnBibWREYjI1MFpYaDBJSHg4SUhSNWNHVnZaaUJYWldKSFRESkRiMjF3ZFhSbFVtVnVaR1Z5YVc1blEyOXVkR1Y0ZENBOElDSjFJaUFtSmlCeklHbHVjM1JoYm1ObGIyWWdWMlZpUjB3eVEyOXRjSFYwWlZKbGJtUmxjbWx1WjBOdmJuUmxlSFFzSUdFZ1BTQjBMbkJ5WldOcGMybHZiaUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RDNXdjbVZqYVhOcGIyNGdPaUFpYUdsbmFIQWlMQ0JzSUQwZ2NpaGhLVHNLSUNBZ0lHd2dJVDA5SUdFZ0ppWWdLR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2lMQ0JoTENBaWJtOTBJSE4xY0hCdmNuUmxaQ3dnZFhOcGJtY2lMQ0JzTENBaWFXNXpkR1ZoWkM0aUtTd2dZU0E5SUd3cE93b2dJQ0FnYkdWMElHTWdQU0J2SUh4OElHVXVhR0Z6S0NKWFJVSkhURjlrY21GM1gySjFabVpsY25NaUtTd2dhQ0E5SUhRdWJHOW5ZWEpwZEdodGFXTkVaWEIwYUVKMVptWmxjaUE5UFQwZ0lUQXNJSFVnUFNCekxtZGxkRkJoY21GdFpYUmxjaWd6TkRrek1Da3NJR1FnUFNCekxtZGxkRkJoY21GdFpYUmxjaWd6TlRZMk1Da3NJR1lnUFNCekxtZGxkRkJoY21GdFpYUmxjaWd6TXpjNUtTd2diU0E5SUhNdVoyVjBVR0Z5WVcxbGRHVnlLRE0wTURjMktTd2dlQ0E5SUhNdVoyVjBVR0Z5WVcxbGRHVnlLRE0wT1RJeEtTd2dkaUE5SUhNdVoyVjBVR0Z5WVcxbGRHVnlLRE0yTXpRM0tTd2daeUE5SUhNdVoyVjBVR0Z5WVcxbGRHVnlLRE0yTXpRNEtTd2djQ0E5SUhNdVoyVjBVR0Z5WVcxbGRHVnlLRE0yTXpRNUtTd2dYeUE5SUdRZ1BpQXdMQ0I1SUQwZ2J5QjhmQ0JsTG1oaGN5Z2lUMFZUWDNSbGVIUjFjbVZmWm14dllYUWlLU3dnWWlBOUlGOGdKaVlnZVN3Z1FTQTlJRzhnUHlCekxtZGxkRkJoY21GdFpYUmxjaWd6TmpFNE15a2dPaUF3T3dvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQnBjMWRsWWtkTU1qb2dieXdLSUNBZ0lDQWdJQ0JrY21GM1FuVm1abVZ5Y3pvZ1l5d0tJQ0FnSUNBZ0lDQm5aWFJOWVhoQmJtbHpiM1J5YjNCNU9pQnBMQW9nSUNBZ0lDQWdJR2RsZEUxaGVGQnlaV05wYzJsdmJqb2djaXdLSUNBZ0lDQWdJQ0J3Y21WamFYTnBiMjQ2SUdFc0NpQWdJQ0FnSUNBZ2JHOW5ZWEpwZEdodGFXTkVaWEIwYUVKMVptWmxjam9nYUN3S0lDQWdJQ0FnSUNCdFlYaFVaWGgwZFhKbGN6b2dkU3dLSUNBZ0lDQWdJQ0J0WVhoV1pYSjBaWGhVWlhoMGRYSmxjem9nWkN3S0lDQWdJQ0FnSUNCdFlYaFVaWGgwZFhKbFUybDZaVG9nWml3S0lDQWdJQ0FnSUNCdFlYaERkV0psYldGd1UybDZaVG9nYlN3S0lDQWdJQ0FnSUNCdFlYaEJkSFJ5YVdKMWRHVnpPaUI0TEFvZ0lDQWdJQ0FnSUcxaGVGWmxjblJsZUZWdWFXWnZjbTF6T2lCMkxBb2dJQ0FnSUNBZ0lHMWhlRlpoY25scGJtZHpPaUJuTEFvZ0lDQWdJQ0FnSUcxaGVFWnlZV2R0Wlc1MFZXNXBabTl5YlhNNklIQXNDaUFnSUNBZ0lDQWdkbVZ5ZEdWNFZHVjRkSFZ5WlhNNklGOHNDaUFnSUNBZ0lDQWdabXh2WVhSR2NtRm5iV1Z1ZEZSbGVIUjFjbVZ6T2lCNUxBb2dJQ0FnSUNBZ0lHWnNiMkYwVm1WeWRHVjRWR1Y0ZEhWeVpYTTZJR0lzQ2lBZ0lDQWdJQ0FnYldGNFUyRnRjR3hsY3pvZ1FRb2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQktiU2h6S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNc0lIUWdQU0J1ZFd4c0xDQnVJRDBnTUN3Z2FTQTlJQ0V4TENCeUlEMGdJVEVzSUc4Z1BTQnVaWGNnVjNRc0lHRWdQU0J1WlhjZ2JIUXNJR3dnUFNCN0NpQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd3NDaUFnSUNBZ0lDQWdibVZsWkhOVmNHUmhkR1U2SUNFeENpQWdJQ0I5T3dvZ0lDQWdkR2hwY3k1MWJtbG1iM0p0SUQwZ2JDd2dkR2hwY3k1dWRXMVFiR0Z1WlhNZ1BTQXdMQ0IwYUdsekxtNTFiVWx1ZEdWeWMyVmpkR2x2YmlBOUlEQXNJSFJvYVhNdWFXNXBkQ0E5SUdaMWJtTjBhVzl1S0hVc0lHUXNJR1lwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiU0E5SUhVdWJHVnVaM1JvSUNFOVBTQXdJSHg4SUdRZ2ZId2diaUFoUFQwZ01DQjhmQ0JwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJwSUQwZ1pDd2dkQ0E5SUdnb2RTd2daaXdnTUNrc0lHNGdQU0IxTG14bGJtZDBhQ3dnYlRzS0lDQWdJSDBzSUhSb2FYTXVZbVZuYVc1VGFHRmtiM2R6SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdjaUE5SUNFd0xDQm9LRzUxYkd3cE93b2dJQ0FnZlN3Z2RHaHBjeTVsYm1SVGFHRmtiM2R6SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdjaUE5SUNFeExDQmpLQ2s3Q2lBZ0lDQjlMQ0IwYUdsekxuTmxkRk4wWVhSbElEMGdablZ1WTNScGIyNG9kU3dnWkN3Z1ppa2dld29nSUNBZ0lDQWdJR3hsZENCdElEMGdkUzVqYkdsd2NHbHVaMUJzWVc1bGN5d2dlQ0E5SUhVdVkyeHBjRWx1ZEdWeWMyVmpkR2x2Yml3Z2RpQTlJSFV1WTJ4cGNGTm9ZV1J2ZDNNc0lHY2dQU0J6TG1kbGRDaDFLVHNLSUNBZ0lDQWdJQ0JwWmlBb0lXa2dmSHdnYlNBOVBUMGdiblZzYkNCOGZDQnRMbXhsYm1kMGFDQTlQVDBnTUNCOGZDQnlJQ1ltSUNGMktTQnlJRDhnYUNodWRXeHNLU0E2SUdNb0tUc0tJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhBZ1BTQnlJRDhnTUNBNklHNHNJRjhnUFNCd0lDb2dOQ3dnZVNBOUlHY3VZMnhwY0hCcGJtZFRkR0YwWlNCOGZDQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNMblpoYkhWbElEMGdlU3dnZVNBOUlHZ29iU3dnWkN3Z1h5d2daaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lpQTlJREE3SUdJZ0lUMDlJRjg3SUNzcllpbDVXMkpkSUQwZ2RGdGlYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1p5NWpiR2x3Y0dsdVoxTjBZWFJsSUQwZ2VTd2dkR2hwY3k1dWRXMUpiblJsY25ObFkzUnBiMjRnUFNCNElEOGdkR2hwY3k1dWRXMVFiR0Z1WlhNZ09pQXdMQ0IwYUdsekxtNTFiVkJzWVc1bGN5QXJQU0J3T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDA3Q2lBZ0lDQm1kVzVqZEdsdmJpQmpLQ2tnZXdvZ0lDQWdJQ0FnSUd3dWRtRnNkV1VnSVQwOUlIUWdKaVlnS0d3dWRtRnNkV1VnUFNCMExDQnNMbTVsWldSelZYQmtZWFJsSUQwZ2JpQStJREFwTENCbExtNTFiVkJzWVc1bGN5QTlJRzRzSUdVdWJuVnRTVzUwWlhKelpXTjBhVzl1SUQwZ01Ec0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR2dvZFN3Z1pDd2daaXdnYlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ2RTQWhQVDBnYm5Wc2JDQS9JSFV1YkdWdVozUm9JRG9nTUN3Z2RpQTlJRzUxYkd3N0NpQWdJQ0FnSUNBZ2FXWWdLSGdnSVQwOUlEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFlnUFNCc0xuWmhiSFZsTENCdElDRTlQU0FoTUNCOGZDQjJJRDA5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJR1lnS3lCNElDb2dOQ3dnY0NBOUlHUXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZUzVuWlhST2IzSnRZV3hOWVhSeWFYZ29jQ2tzSUNoMklEMDlQU0J1ZFd4c0lIeDhJSFl1YkdWdVozUm9JRHdnWnlrZ0ppWWdLSFlnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0djcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1h5QTlJREFzSUhrZ1BTQm1PeUJmSUNFOVBTQjRPeUFySzE4c0lIa2dLejBnTkNsdkxtTnZjSGtvZFZ0ZlhTa3VZWEJ3YkhsTllYUnlhWGcwS0hBc0lHRXBMQ0J2TG01dmNtMWhiQzUwYjBGeWNtRjVLSFlzSUhrcExDQjJXM2tnS3lBelhTQTlJRzh1WTI5dWMzUmhiblE3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYkM1MllXeDFaU0E5SUhZc0lHd3VibVZsWkhOVmNHUmhkR1VnUFNBaE1Ec0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXViblZ0VUd4aGJtVnpJRDBnZUN3Z1pTNXVkVzFKYm5SbGNuTmxZM1JwYjI0Z1BTQXdMQ0IyT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUZsdEtITXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ2JtVjNJRmRsWVd0TllYQTdDaUFnSUNCbWRXNWpkR2x2YmlCMEtHOHNJR0VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVNBOVBUMGdSSE1nUHlCdkxtMWhjSEJwYm1jZ1BTQkNhU0E2SUdFZ1BUMDlJRVp6SUNZbUlDaHZMbTFoY0hCcGJtY2dQU0I2YVNrc0lHODdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ1S0c4cElIc0tJQ0FnSUNBZ0lDQnBaaUFvYnlBbUppQnZMbWx6VkdWNGRIVnlaU0FtSmlCdkxtbHpVbVZ1WkdWeVZHRnlaMlYwVkdWNGRIVnlaU0E5UFQwZ0lURXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCdkxtMWhjSEJwYm1jN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaElEMDlQU0JFY3lCOGZDQmhJRDA5UFNCR2N5a2dhV1lnS0dVdWFHRnpLRzhwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdVdVoyVjBLRzhwTG5SbGVIUjFjbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ2hzTENCdkxtMWhjSEJwYm1jcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQnZMbWx0WVdkbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3dnSmlZZ2JDNW9aV2xuYUhRZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCekxtZGxkRkpsYm1SbGNsUmhjbWRsZENncExDQm9JRDBnYm1WM0lHcHpLR3d1YUdWcFoyaDBJQzhnTWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHZ3Vabkp2YlVWeGRXbHlaV04wWVc1bmRXeGhjbFJsZUhSMWNtVW9jeXdnYnlrc0lHVXVjMlYwS0c4c0lHZ3BMQ0J6TG5ObGRGSmxibVJsY2xSaGNtZGxkQ2hqS1N3Z2J5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dhU2tzSUhRb2FDNTBaWGgwZFhKbExDQnZMbTFoY0hCcGJtY3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdk93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhU2h2S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCdkxuUmhjbWRsZERzS0lDQWdJQ0FnSUNCaExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbVJwYzNCdmMyVWlMQ0JwS1RzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdVdVoyVjBLR0VwT3dvZ0lDQWdJQ0FnSUd3Z0lUMDlJSFp2YVdRZ01DQW1KaUFvWlM1a1pXeGxkR1VvWVNrc0lHd3VaR2x6Y0c5elpTZ3BLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhJb0tTQjdDaUFnSUNBZ0lDQWdaU0E5SUc1bGR5QlhaV0ZyVFdGd093b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQm5aWFE2SUc0c0NpQWdJQ0FnSUNBZ1pHbHpjRzl6WlRvZ2Nnb2dJQ0FnZlRzS2ZRcDJZWElnUm5JZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVseUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F0TVN3Z2RDQTlJREVzSUc0Z1BTQXhMQ0JwSUQwZ0xURXNJSElnUFNBdU1Td2dieUE5SURKbE15bDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpVDNKMGFHOW5jbUZ3YUdsalEyRnRaWEpoSWl3Z2RHaHBjeTU2YjI5dElEMGdNU3dnZEdocGN5NTJhV1YzSUQwZ2JuVnNiQ3dnZEdocGN5NXNaV1owSUQwZ1pTd2dkR2hwY3k1eWFXZG9kQ0E5SUhRc0lIUm9hWE11ZEc5d0lEMGdiaXdnZEdocGN5NWliM1IwYjIwZ1BTQnBMQ0IwYUdsekxtNWxZWElnUFNCeUxDQjBhR2x6TG1aaGNpQTlJRzhzSUhSb2FYTXVkWEJrWVhSbFVISnZhbVZqZEdsdmJrMWhkSEpwZUNncE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlN3Z2RDa3NJSFJvYVhNdWJHVm1kQ0E5SUdVdWJHVm1kQ3dnZEdocGN5NXlhV2RvZENBOUlHVXVjbWxuYUhRc0lIUm9hWE11ZEc5d0lEMGdaUzUwYjNBc0lIUm9hWE11WW05MGRHOXRJRDBnWlM1aWIzUjBiMjBzSUhSb2FYTXVibVZoY2lBOUlHVXVibVZoY2l3Z2RHaHBjeTVtWVhJZ1BTQmxMbVpoY2l3Z2RHaHBjeTU2YjI5dElEMGdaUzU2YjI5dExDQjBhR2x6TG5acFpYY2dQU0JsTG5acFpYY2dQVDA5SUc1MWJHd2dQeUJ1ZFd4c0lEb2dUMkpxWldOMExtRnpjMmxuYmloN2ZTd2daUzUyYVdWM0tTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRlpwWlhkUFptWnpaWFFvWlN3Z2RDd2diaXdnYVN3Z2Npd2dieWtnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkbWxsZHlBOVBUMGdiblZzYkNBbUppQW9kR2hwY3k1MmFXVjNJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmxibUZpYkdWa09pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1puVnNiRmRwWkhSb09pQXhMQW9nSUNBZ0lDQWdJQ0FnSUNCbWRXeHNTR1ZwWjJoME9pQXhMQW9nSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFJZT2lBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0J2Wm1aelpYUlpPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBPaUF4Q2lBZ0lDQWdJQ0FnZlNrc0lIUm9hWE11ZG1sbGR5NWxibUZpYkdWa0lEMGdJVEFzSUhSb2FYTXVkbWxsZHk1bWRXeHNWMmxrZEdnZ1BTQmxMQ0IwYUdsekxuWnBaWGN1Wm5Wc2JFaGxhV2RvZENBOUlIUXNJSFJvYVhNdWRtbGxkeTV2Wm1aelpYUllJRDBnYml3Z2RHaHBjeTUyYVdWM0xtOW1abk5sZEZrZ1BTQnBMQ0IwYUdsekxuWnBaWGN1ZDJsa2RHZ2dQU0J5TENCMGFHbHpMblpwWlhjdWFHVnBaMmgwSUQwZ2J5d2dkR2hwY3k1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRLQ2s3Q2lBZ0lDQjlDaUFnSUNCamJHVmhjbFpwWlhkUFptWnpaWFFvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdWM0lDRTlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxuWnBaWGN1Wlc1aFlteGxaQ0E5SUNFeEtTd2dkR2hwY3k1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRLQ2s3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnS0hSb2FYTXVjbWxuYUhRZ0xTQjBhR2x6TG14bFpuUXBJQzhnS0RJZ0tpQjBhR2x6TG5wdmIyMHBMQ0IwSUQwZ0tIUm9hWE11ZEc5d0lDMGdkR2hwY3k1aWIzUjBiMjBwSUM4Z0tESWdLaUIwYUdsekxucHZiMjBwTENCdUlEMGdLSFJvYVhNdWNtbG5hSFFnS3lCMGFHbHpMbXhsWm5RcElDOGdNaXdnYVNBOUlDaDBhR2x6TG5SdmNDQXJJSFJvYVhNdVltOTBkRzl0S1NBdklESXNJSElnUFNCdUlDMGdaU3dnYnlBOUlHNGdLeUJsTENCaElEMGdhU0FySUhRc0lHd2dQU0JwSUMwZ2REc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTJhV1YzSUNFOVBTQnVkV3hzSUNZbUlIUm9hWE11ZG1sbGR5NWxibUZpYkdWa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnS0hSb2FYTXVjbWxuYUhRZ0xTQjBhR2x6TG14bFpuUXBJQzhnZEdocGN5NTJhV1YzTG1aMWJHeFhhV1IwYUNBdklIUm9hWE11ZW05dmJTd2dhQ0E5SUNoMGFHbHpMblJ2Y0NBdElIUm9hWE11WW05MGRHOXRLU0F2SUhSb2FYTXVkbWxsZHk1bWRXeHNTR1ZwWjJoMElDOGdkR2hwY3k1NmIyOXRPd29nSUNBZ0lDQWdJQ0FnSUNCeUlDczlJR01nS2lCMGFHbHpMblpwWlhjdWIyWm1jMlYwV0N3Z2J5QTlJSElnS3lCaklDb2dkR2hwY3k1MmFXVjNMbmRwWkhSb0xDQmhJQzA5SUdnZ0tpQjBhR2x6TG5acFpYY3ViMlptYzJWMFdTd2diQ0E5SUdFZ0xTQm9JQ29nZEdocGN5NTJhV1YzTG1obGFXZG9kRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEdocGN5NXdjbTlxWldOMGFXOXVUV0YwY21sNExtMWhhMlZQY25Sb2IyZHlZWEJvYVdNb2Npd2dieXdnWVN3Z2JDd2dkR2hwY3k1dVpXRnlMQ0IwYUdsekxtWmhjaWtzSUhSb2FYTXVjSEp2YW1WamRHbHZiazFoZEhKcGVFbHVkbVZ5YzJVdVkyOXdlU2gwYUdsekxuQnliMnBsWTNScGIyNU5ZWFJ5YVhncExtbHVkbVZ5ZENncE93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSE4xY0dWeUxuUnZTbE5QVGlobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNXZZbXBsWTNRdWVtOXZiU0E5SUhSb2FYTXVlbTl2YlN3Z2RDNXZZbXBsWTNRdWJHVm1kQ0E5SUhSb2FYTXViR1ZtZEN3Z2RDNXZZbXBsWTNRdWNtbG5hSFFnUFNCMGFHbHpMbkpwWjJoMExDQjBMbTlpYW1WamRDNTBiM0FnUFNCMGFHbHpMblJ2Y0N3Z2RDNXZZbXBsWTNRdVltOTBkRzl0SUQwZ2RHaHBjeTVpYjNSMGIyMHNJSFF1YjJKcVpXTjBMbTVsWVhJZ1BTQjBhR2x6TG01bFlYSXNJSFF1YjJKcVpXTjBMbVpoY2lBOUlIUm9hWE11Wm1GeUxDQjBhR2x6TG5acFpYY2dJVDA5SUc1MWJHd2dKaVlnS0hRdWIySnFaV04wTG5acFpYY2dQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0IwYUdsekxuWnBaWGNwS1N3Z2REc0tJQ0FnSUgwS2ZUc0tSbkl1Y0hKdmRHOTBlWEJsTG1selQzSjBhRzluY21Gd2FHbGpRMkZ0WlhKaElEMGdJVEE3Q25aaGNpQkhhU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdjMjRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlNrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJbEpoZDFOb1lXUmxjazFoZEdWeWFXRnNJanNLSUNBZ0lIMEtmVHNLUjJrdWNISnZkRzkwZVhCbExtbHpVbUYzVTJoaFpHVnlUV0YwWlhKcFlXd2dQU0FoTURzS2RtRnlJRVZwSUQwZ05Dd2dUVzRnUFNBNExDQldkQ0E5SUUxaGRHZ3VjRzkzS0RJc0lFMXVLU3dnYzJnZ1BTQmJDaUFnSUNBdU1USTFMQW9nSUNBZ0xqSXhOU3dLSUNBZ0lDNHpOU3dLSUNBZ0lDNDBORFlzQ2lBZ0lDQXVOVEkyTEFvZ0lDQWdMalU0TWdwZExDQnZhQ0E5SUUxdUlDMGdSV2tnS3lBeElDc2djMmd1YkdWdVozUm9MQ0J3YVNBOUlESXdMQ0JJY3lBOUlIc0tJQ0FnSUZ0T2RGMDZJREFzQ2lBZ0lDQmJUMmxkT2lBeENuMHNJRWR2SUQwZ2JtVjNJRVp5TENCN0lGOXNiMlJRYkdGdVpYTTZJR3BwSUN3Z1gzTnBlbVZNYjJSek9pQk1iQ0FzSUY5emFXZHRZWE02SUd4eklDQjlJRDBnV20wb0tTd2dVbXdnUFNCdVpYY2dZV1VzSUZadklEMGdiblZzYkN3Z1QyNGdQU0FvTVNBcklFMWhkR2d1YzNGeWRDZzFLU2tnTHlBeUxDQnRhU0E5SURFZ0x5QlBiaXdnVUd3Z1BTQmJDaUFnSUNCdVpYY2dUU2d4TENBeExDQXhLU3dLSUNBZ0lHNWxkeUJOS0MweExDQXhMQ0F4S1N3S0lDQWdJRzVsZHlCTktERXNJREVzSUMweEtTd0tJQ0FnSUc1bGR5Qk5LQzB4TENBeExDQXRNU2tzQ2lBZ0lDQnVaWGNnVFNnd0xDQlBiaXdnYldrcExBb2dJQ0FnYm1WM0lFMG9NQ3dnVDI0c0lDMXRhU2tzQ2lBZ0lDQnVaWGNnVFNodGFTd2dNQ3dnVDI0cExBb2dJQ0FnYm1WM0lFMG9MVzFwTENBd0xDQlBiaWtzQ2lBZ0lDQnVaWGNnVFNoUGJpd2diV2tzSURBcExBb2dJQ0FnYm1WM0lFMG9MVTl1TENCdGFTd2dNQ2tLWFN3Z1lXZ2dQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0IwYUdsekxsOXlaVzVrWlhKbGNpQTlJR1VzSUhSb2FYTXVYM0JwYm1kUWIyNW5VbVZ1WkdWeVZHRnlaMlYwSUQwZ2JuVnNiQ3dnZEdocGN5NWZZbXgxY2sxaGRHVnlhV0ZzSUQwZ0pHMG9jR2twTENCMGFHbHpMbDlsY1hWcGNtVmpkRk5vWVdSbGNpQTlJRzUxYkd3c0lIUm9hWE11WDJOMVltVnRZWEJUYUdGa1pYSWdQU0J1ZFd4c0xDQjBhR2x6TGw5amIyMXdhV3hsVFdGMFpYSnBZV3dvZEdocGN5NWZZbXgxY2sxaGRHVnlhV0ZzS1RzS0lDQWdJSDBLSUNBZ0lHWnliMjFUWTJWdVpTaGxMQ0IwSUQwZ01Dd2diaUE5SUM0eExDQnBJRDBnTVRBd0tTQjdDaUFnSUNBZ0lDQWdWbThnUFNCMGFHbHpMbDl5Wlc1a1pYSmxjaTVuWlhSU1pXNWtaWEpVWVhKblpYUW9LVHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNdVgyRnNiRzlqWVhSbFZHRnlaMlYwY3lncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6WTJWdVpWUnZRM1ZpWlZWV0tHVXNJRzRzSUdrc0lISXBMQ0IwSUQ0Z01DQW1KaUIwYUdsekxsOWliSFZ5S0hJc0lEQXNJREFzSUhRcExDQjBhR2x6TGw5aGNIQnNlVkJOVWtWTktISXBMQ0IwYUdsekxsOWpiR1ZoYm5Wd0tISXBMQ0J5T3dvZ0lDQWdmUW9nSUNBZ1puSnZiVVZ4ZFdseVpXTjBZVzVuZFd4aGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyWnliMjFVWlhoMGRYSmxLR1VwT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVU4xWW1WdFlYQW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW1jbTl0VkdWNGRIVnlaU2hsS1RzS0lDQWdJSDBLSUNBZ0lHTnZiWEJwYkdWRGRXSmxiV0Z3VTJoaFpHVnlLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYMk4xWW1WdFlYQlRhR0ZrWlhJZ1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVgyTjFZbVZ0WVhCVGFHRmtaWElnUFNCR2JDZ3BMQ0IwYUdsekxsOWpiMjF3YVd4bFRXRjBaWEpwWVd3b2RHaHBjeTVmWTNWaVpXMWhjRk5vWVdSbGNpa3BPd29nSUNBZ2ZRb2dJQ0FnWTI5dGNHbHNaVVZ4ZFdseVpXTjBZVzVuZFd4aGNsTm9ZV1JsY2lncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5bGNYVnBjbVZqZEZOb1lXUmxjaUE5UFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVmWlhGMWFYSmxZM1JUYUdGa1pYSWdQU0JFYkNncExDQjBhR2x6TGw5amIyMXdhV3hsVFdGMFpYSnBZV3dvZEdocGN5NWZaWEYxYVhKbFkzUlRhR0ZrWlhJcEtUc0tJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZZbXgxY2sxaGRHVnlhV0ZzTG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVmWTNWaVpXMWhjRk5vWVdSbGNpQWhQVDBnYm5Wc2JDQW1KaUIwYUdsekxsOWpkV0psYldGd1UyaGhaR1Z5TG1ScGMzQnZjMlVvS1N3Z2RHaHBjeTVmWlhGMWFYSmxZM1JUYUdGa1pYSWdJVDA5SUc1MWJHd2dKaVlnZEdocGN5NWZaWEYxYVhKbFkzUlRhR0ZrWlhJdVpHbHpjRzl6WlNncE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1pTQTlJREE3SUdVZ1BDQnFhUzVzWlc1bmRHZzdJR1VyS3lscWFWdGxYUzVrYVhOd2IzTmxLQ2s3Q2lBZ0lDQjlDaUFnSUNCZlkyeGxZVzUxY0NobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmNHbHVaMUJ2Ym1kU1pXNWtaWEpVWVhKblpYUXVaR2x6Y0c5elpTZ3BMQ0IwYUdsekxsOXlaVzVrWlhKbGNpNXpaWFJTWlc1a1pYSlVZWEpuWlhRb1ZtOHBMQ0JsTG5OamFYTnpiM0pVWlhOMElEMGdJVEVzSUdOektHVXNJREFzSURBc0lHVXVkMmxrZEdnc0lHVXVhR1ZwWjJoMEtUc0tJQ0FnSUgwS0lDQWdJRjltY205dFZHVjRkSFZ5WlNobEtTQjdDaUFnSUNBZ0lDQWdWbThnUFNCMGFHbHpMbDl5Wlc1a1pYSmxjaTVuWlhSU1pXNWtaWEpVWVhKblpYUW9LVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVgyRnNiRzlqWVhSbFZHRnlaMlYwY3lobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZEdWNGRIVnlaVlJ2UTNWaVpWVldLR1VzSUhRcExDQjBhR2x6TGw5aGNIQnNlVkJOVWtWTktIUXBMQ0IwYUdsekxsOWpiR1ZoYm5Wd0tIUXBMQ0IwT3dvZ0lDQWdmUW9nSUNBZ1gyRnNiRzlqWVhSbFZHRnlaMlYwY3lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUcxaFowWnBiSFJsY2pvZ2RIUXNDaUFnSUNBZ0lDQWdJQ0FnSUcxcGJrWnBiSFJsY2pvZ2RIUXNDaUFnSUNBZ0lDQWdJQ0FnSUdkbGJtVnlZWFJsVFdsd2JXRndjem9nSVRFc0NpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHdHVMQW9nSUNBZ0lDQWdJQ0FnSUNCbWIzSnRZWFE2SUdOMExBb2dJQ0FnSUNBZ0lDQWdJQ0JsYm1OdlpHbHVaem9nVG5Rc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1FuVm1abVZ5T2lBaE1Rb2dJQ0FnSUNBZ0lIMHNJRzRnUFNCSmJDaDBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTVrWlhCMGFFSjFabVpsY2lBOUlDRmxMQ0IwYUdsekxsOXdhVzVuVUc5dVoxSmxibVJsY2xSaGNtZGxkQ0E5SUVsc0tIUXBMQ0J1T3dvZ0lDQWdmUW9nSUNBZ1gyTnZiWEJwYkdWTllYUmxjbWxoYkNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQnVaWGNnYzNRb2FtbGJNRjBzSUdVcE93b2dJQ0FnSUNBZ0lIUm9hWE11WDNKbGJtUmxjbVZ5TG1OdmJYQnBiR1VvZEN3Z1IyOHBPd29nSUNBZ2ZRb2dJQ0FnWDNOalpXNWxWRzlEZFdKbFZWWW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnYm1WM0lIVjBLRGt3TENBeExDQjBMQ0J1S1N3Z2JDQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVLSUNBZ0lDQWdJQ0JkTENCaklEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4Q2lBZ0lDQWdJQ0FnWFN3Z2FDQTlJSFJvYVhNdVgzSmxibVJsY21WeUxDQjFJRDBnYUM1aGRYUnZRMnhsWVhJc0lHUWdQU0JvTG5SdmJtVk5ZWEJ3YVc1bk93b2dJQ0FnSUNBZ0lHZ3VaMlYwUTJ4bFlYSkRiMnh2Y2loU2JDa3NJR2d1ZEc5dVpVMWhjSEJwYm1jZ1BTQmZiaXdnYUM1aGRYUnZRMnhsWVhJZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JzWlhRZ1ppQTlJRzVsZHlCb2JpaDdDaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ0pRVFZKRlRTNUNZV05yWjNKdmRXNWtJaXdLSUNBZ0lDQWdJQ0FnSUNBZ2MybGtaVG9nYVhRc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1YzSnBkR1U2SUNFeExBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFGUmxjM1E2SUNFeENpQWdJQ0FnSUNBZ2ZTa3NJRzBnUFNCdVpYY2djM1FvYm1WM0lIZHVMQ0JtS1N3Z2VDQTlJQ0V4TENCMklEMGdaUzVpWVdOclozSnZkVzVrT3dvZ0lDQWdJQ0FnSUhZZ1B5QjJMbWx6UTI5c2IzSWdKaVlnS0dZdVkyOXNiM0l1WTI5d2VTaDJLU3dnWlM1aVlXTnJaM0p2ZFc1a0lEMGdiblZzYkN3Z2VDQTlJQ0V3S1NBNklDaG1MbU52Ykc5eUxtTnZjSGtvVW13cExDQjRJRDBnSVRBcE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1p5QTlJREE3SUdjZ1BDQTJPeUJuS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NDQTlJR2NnSlNBek93b2dJQ0FnSUNBZ0lDQWdJQ0J3SUQwOUlEQWdQeUFvWVM1MWNDNXpaWFFvTUN3Z2JGdG5YU3dnTUNrc0lHRXViRzl2YTBGMEtHTmJaMTBzSURBc0lEQXBLU0E2SUhBZ1BUMGdNU0EvSUNoaExuVndMbk5sZENnd0xDQXdMQ0JzVzJkZEtTd2dZUzVzYjI5clFYUW9NQ3dnWTF0blhTd2dNQ2twSURvZ0tHRXVkWEF1YzJWMEtEQXNJR3hiWjEwc0lEQXBMQ0JoTG14dmIydEJkQ2d3TENBd0xDQmpXMmRkS1Nrc0lHTnpLR2tzSUhBZ0tpQldkQ3dnWnlBK0lESWdQeUJXZENBNklEQXNJRlowTENCV2RDa3NJR2d1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLR2twTENCNElDWW1JR2d1Y21WdVpHVnlLRzBzSUdFcExDQm9MbkpsYm1SbGNpaGxMQ0JoS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JTNW5aVzl0WlhSeWVTNWthWE53YjNObEtDa3NJRzB1YldGMFpYSnBZV3d1WkdsemNHOXpaU2dwTENCb0xuUnZibVZOWVhCd2FXNW5JRDBnWkN3Z2FDNWhkWFJ2UTJ4bFlYSWdQU0IxTENCbExtSmhZMnRuY205MWJtUWdQU0IyT3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRVZ1WTI5a2FXNW5LR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXNWtaWEpsY2k1allYQmhZbWxzYVhScFpYTXVhWE5YWldKSFRESWdQVDA5SUNFd0lDWW1JSFF1Wm05eWJXRjBJRDA5UFNCamRDQW1KaUIwTG5SNWNHVWdQVDA5SUhKdUlDWW1JSFF1Wlc1amIyUnBibWNnUFQwOUlFOXBJRDhnWlM1MllXeDFaU0E5SUVoelcwNTBYU0E2SUdVdWRtRnNkV1VnUFNCSWMxdDBMbVZ1WTI5a2FXNW5YVHNLSUNBZ0lIMEtJQ0FnSUY5MFpYaDBkWEpsVkc5RGRXSmxWVllvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1ZmNtVnVaR1Z5WlhJc0lHa2dQU0JsTG0xaGNIQnBibWNnUFQwOUlFSnBJSHg4SUdVdWJXRndjR2x1WnlBOVBUMGdlbWs3Q2lBZ0lDQWdJQ0FnYVNBL0lIUm9hWE11WDJOMVltVnRZWEJUYUdGa1pYSWdQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWZZM1ZpWlcxaGNGTm9ZV1JsY2lBOUlFWnNLQ2twSURvZ2RHaHBjeTVmWlhGMWFYSmxZM1JUYUdGa1pYSWdQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWZaWEYxYVhKbFkzUlRhR0ZrWlhJZ1BTQkViQ2dwS1RzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUdrZ1B5QjBhR2x6TGw5amRXSmxiV0Z3VTJoaFpHVnlJRG9nZEdocGN5NWZaWEYxYVhKbFkzUlRhR0ZrWlhJc0lHOGdQU0J1WlhjZ2MzUW9hbWxiTUYwc0lISXBMQ0JoSUQwZ2NpNTFibWxtYjNKdGN6c0tJQ0FnSUNBZ0lDQmhMbVZ1ZGsxaGNDNTJZV3gxWlNBOUlHVXNJR2tnZkh3Z1lTNTBaWGhsYkZOcGVtVXVkbUZzZFdVdWMyVjBLREVnTHlCbExtbHRZV2RsTG5kcFpIUm9MQ0F4SUM4Z1pTNXBiV0ZuWlM1b1pXbG5hSFFwTENCMGFHbHpMbDl6WlhSRmJtTnZaR2x1WnloaExtbHVjSFYwUlc1amIyUnBibWNzSUdVcExDQmpjeWgwTENBd0xDQXdMQ0F6SUNvZ1ZuUXNJRElnS2lCV2RDa3NJRzR1YzJWMFVtVnVaR1Z5VkdGeVoyVjBLSFFwTENCdUxuSmxibVJsY2lodkxDQkhieWs3Q2lBZ0lDQjlDaUFnSUNCZllYQndiSGxRVFZKRlRTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOXlaVzVrWlhKbGNpd2diaUE5SUhRdVlYVjBiME5zWldGeU93b2dJQ0FnSUNBZ0lIUXVZWFYwYjBOc1pXRnlJRDBnSVRFN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNVHNnYVNBOElHOW9PeUJwS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJRTFoZEdndWMzRnlkQ2hzYzF0cFhTQXFJR3h6VzJsZElDMGdiSE5iYVNBdElERmRJQ29nYkhOYmFTQXRJREZkS1N3Z2J5QTlJRkJzV3locElDMGdNU2tnSlNCUWJDNXNaVzVuZEdoZE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWliSFZ5S0dVc0lHa2dMU0F4TENCcExDQnlMQ0J2S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RDNWhkWFJ2UTJ4bFlYSWdQU0J1T3dvZ0lDQWdmUW9nSUNBZ1gySnNkWElvWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ0lDQWdJR3hsZENCdklEMGdkR2hwY3k1ZmNHbHVaMUJ2Ym1kU1pXNWtaWEpVWVhKblpYUTdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHRnNaa0pzZFhJb1pTd2dieXdnZEN3Z2Jpd2dhU3dnSW14aGRHbDBkV1JwYm1Gc0lpd2djaWtzSUhSb2FYTXVYMmhoYkdaQ2JIVnlLRzhzSUdVc0lHNHNJRzRzSUdrc0lDSnNiMjVuYVhSMVpHbHVZV3dpTENCeUtUc0tJQ0FnSUgwS0lDQWdJRjlvWVd4bVFteDFjaWhsTENCMExDQnVMQ0JwTENCeUxDQnZMQ0JoS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCMGFHbHpMbDl5Wlc1a1pYSmxjaXdnWXlBOUlIUm9hWE11WDJKc2RYSk5ZWFJsY21saGJEc0tJQ0FnSUNBZ0lDQnZJQ0U5UFNBaWJHRjBhWFIxWkdsdVlXd2lJQ1ltSUc4Z0lUMDlJQ0pzYjI1bmFYUjFaR2x1WVd3aUlDWW1JR052Ym5OdmJHVXVaWEp5YjNJb0ltSnNkWElnWkdseVpXTjBhVzl1SUcxMWMzUWdZbVVnWldsMGFHVnlJR3hoZEdsMGRXUnBibUZzSUc5eUlHeHZibWRwZEhWa2FXNWhiQ0VpS1RzS0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SURNc0lIVWdQU0J1WlhjZ2MzUW9hbWxiYVYwc0lHTXBMQ0JrSUQwZ1l5NTFibWxtYjNKdGN5d2daaUE5SUV4c1cyNWRJQzBnTVN3Z2JTQTlJR2x6Um1sdWFYUmxLSElwSUQ4Z1RXRjBhQzVRU1NBdklDZ3lJQ29nWmlrZ09pQXlJQ29nVFdGMGFDNVFTU0F2SUNneUlDb2djR2tnTFNBeEtTd2dlQ0E5SUhJZ0x5QnRMQ0IySUQwZ2FYTkdhVzVwZEdVb2Npa2dQeUF4SUNzZ1RXRjBhQzVtYkc5dmNpaG9JQ29nZUNrZ09pQndhVHNLSUNBZ0lDQWdJQ0IySUQ0Z2NHa2dKaVlnWTI5dWMyOXNaUzUzWVhKdUtHQnphV2R0WVZKaFpHbGhibk1zSUNSN2NuMHNJR2x6SUhSdmJ5QnNZWEpuWlNCaGJtUWdkMmxzYkNCamJHbHdMQ0JoY3lCcGRDQnlaWEYxWlhOMFpXUWdKSHQyZlNCellXMXdiR1Z6SUhkb1pXNGdkR2hsSUcxaGVHbHRkVzBnYVhNZ2MyVjBJSFJ2SUNSN2NHbDlZQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElHY2dQU0JiWFN3Z2NDQTlJREE3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JCSUQwZ01Ec2dRU0E4SUhCcE95QXJLMEVwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVENBOUlFRWdMeUI0TENCSklEMGdUV0YwYUM1bGVIQW9MVXdnS2lCTUlDOGdNaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHY3VjSFZ6YUNoSktTd2dRU0E5UFNBd0lEOGdjQ0FyUFNCSklEb2dRU0E4SUhZZ0ppWWdLSEFnS3owZ01pQXFJRWtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVFZ1BTQXdPeUJCSUR3Z1p5NXNaVzVuZEdnN0lFRXJLeWxuVzBGZElEMGdaMXRCWFNBdklIQTdDaUFnSUNBZ0lDQWdaQzVsYm5aTllYQXVkbUZzZFdVZ1BTQmxMblJsZUhSMWNtVXNJR1F1YzJGdGNHeGxjeTUyWVd4MVpTQTlJSFlzSUdRdWQyVnBaMmgwY3k1MllXeDFaU0E5SUdjc0lHUXViR0YwYVhSMVpHbHVZV3d1ZG1Gc2RXVWdQU0J2SUQwOVBTQWliR0YwYVhSMVpHbHVZV3dpTENCaElDWW1JQ2hrTG5CdmJHVkJlR2x6TG5aaGJIVmxJRDBnWVNrc0lHUXVaRlJvWlhSaExuWmhiSFZsSUQwZ2JTd2daQzV0YVhCSmJuUXVkbUZzZFdVZ1BTQk5iaUF0SUc0N0NpQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCTWJGdHBYU3dnZVNBOUlETWdLaUJOWVhSb0xtMWhlQ2d3TENCV2RDQXRJRElnS2lCZktTd2dZaUE5SUNocElEMDlQU0F3SUQ4Z01DQTZJRElnS2lCV2RDa2dLeUF5SUNvZ1h5QXFJQ2hwSUQ0Z1RXNGdMU0JGYVNBL0lHa2dMU0JOYmlBcklFVnBJRG9nTUNrN0NpQWdJQ0FnSUNBZ1kzTW9kQ3dnZVN3Z1lpd2dNeUFxSUY4c0lESWdLaUJmS1N3Z2JDNXpaWFJTWlc1a1pYSlVZWEpuWlhRb2RDa3NJR3d1Y21WdVpHVnlLSFVzSUVkdktUc0tJQ0FnSUgwS2ZUc0tablZ1WTNScGIyNGdXbTBvS1NCN0NpQWdJQ0JzWlhRZ2N5QTlJRnRkTENCbElEMGdXMTBzSUhRZ1BTQmJYU3dnYmlBOUlFMXVPd29nSUNBZ1ptOXlLR3hsZENCcElEMGdNRHNnYVNBOElHOW9PeUJwS3lzcGV3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ1RXRjBhQzV3YjNjb01pd2diaWs3Q2lBZ0lDQWdJQ0FnWlM1d2RYTm9LSElwT3dvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnTVNBdklISTdDaUFnSUNBZ0lDQWdhU0ErSUUxdUlDMGdSV2tnUHlCdklEMGdjMmhiYVNBdElFMXVJQ3NnUldrZ0xTQXhYU0E2SUdrZ1BUMGdNQ0FtSmlBb2J5QTlJREFwTENCMExuQjFjMmdvYnlrN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNBeElDOGdLSElnTFNBeEtTd2diQ0E5SUMxaElDOGdNaXdnWXlBOUlERWdLeUJoSUM4Z01pd2dhQ0E5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnWXl3S0lDQWdJQ0FnSUNBZ0lDQWdiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1l5d0tJQ0FnSUNBZ0lDQWdJQ0FnWXl3S0lDQWdJQ0FnSUNBZ0lDQWdiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnWXl3S0lDQWdJQ0FnSUNBZ0lDQWdZeXdLSUNBZ0lDQWdJQ0FnSUNBZ2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnWXdvZ0lDQWdJQ0FnSUYwc0lIVWdQU0EyTENCa0lEMGdOaXdnWmlBOUlETXNJRzBnUFNBeUxDQjRJRDBnTVN3Z2RpQTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29aaUFxSUdRZ0tpQjFLU3dnWnlBOUlHNWxkeUJHYkc5aGRETXlRWEp5WVhrb2JTQXFJR1FnS2lCMUtTd2djQ0E5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvZUNBcUlHUWdLaUIxS1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhrZ1BTQXdPeUI1SUR3Z2RUc2dlU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdJZ1BTQjVJQ1VnTXlBcUlESWdMeUF6SUMwZ01Td2dRU0E5SUhrZ1BpQXlJRDhnTUNBNklDMHhMQ0JNSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFRXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZaUFySURJZ0x5QXpMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpSUNzZ01pQXZJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JCSUNzZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpSUNzZ01pQXZJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JCSUNzZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRU0FySURFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0NpQWdJQ0FnSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIWXVjMlYwS0V3c0lHWWdLaUJrSUNvZ2VTa3NJR2N1YzJWMEtHZ3NJRzBnS2lCa0lDb2dlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JKSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1Q2lBZ0lDQWdJQ0FnSUNBZ0lGMDdDaUFnSUNBZ0lDQWdJQ0FnSUhBdWMyVjBLRWtzSUhnZ0tpQmtJQ29nZVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JmSUQwZ2JtVjNJRjlsT3dvZ0lDQWdJQ0FnSUY4dWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QlZaU2gyTENCbUtTa3NJRjh1YzJWMFFYUjBjbWxpZFhSbEtDSjFkaUlzSUc1bGR5QlZaU2huTENCdEtTa3NJRjh1YzJWMFFYUjBjbWxpZFhSbEtDSm1ZV05sU1c1a1pYZ2lMQ0J1WlhjZ1ZXVW9jQ3dnZUNrcExDQnpMbkIxYzJnb1h5a3NJRzRnUGlCRmFTQW1KaUJ1TFMwN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lGOXNiMlJRYkdGdVpYTTZJSE1zQ2lBZ0lDQWdJQ0FnWDNOcGVtVk1iMlJ6T2lCbExBb2dJQ0FnSUNBZ0lGOXphV2R0WVhNNklIUUtJQ0FnSUgwN0NuMEtablZ1WTNScGIyNGdTV3dvY3lrZ2V3b2dJQ0FnYkdWMElHVWdQU0J1WlhjZ1FYUW9NeUFxSUZaMExDQXpJQ29nVm5Rc0lITXBPd29nSUNBZ2NtVjBkWEp1SUdVdWRHVjRkSFZ5WlM1dFlYQndhVzVuSUQwZ1VISXNJR1V1ZEdWNGRIVnlaUzV1WVcxbElEMGdJbEJOVWtWTkxtTjFZbVZWZGlJc0lHVXVjMk5wYzNOdmNsUmxjM1FnUFNBaE1Dd2daVHNLZlFwbWRXNWpkR2x2YmlCamN5aHpMQ0JsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0J6TG5acFpYZHdiM0owTG5ObGRDaGxMQ0IwTENCdUxDQnBLU3dnY3k1elkybHpjMjl5TG5ObGRDaGxMQ0IwTENCdUxDQnBLVHNLZlFwbWRXNWpkR2x2YmlBa2JTaHpLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlHNWxkeUJHYkc5aGRETXlRWEp5WVhrb2N5a3NJSFFnUFNCdVpYY2dUU2d3TENBeExDQXdLVHNLSUNBZ0lISmxkSFZ5YmlCdVpYY2dSMmtvZXdvZ0lDQWdJQ0FnSUc1aGJXVTZJQ0pUY0dobGNtbGpZV3hIWVhWemMybGhia0pzZFhJaUxBb2dJQ0FnSUNBZ0lHUmxabWx1WlhNNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnYmpvZ2N3b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXNTJUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnpZVzF3YkdWek9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01Rb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQjNaV2xuYUhSek9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1pRb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnNZWFJwZEhWa2FXNWhiRG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0V4Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUdSVWFHVjBZVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJREFLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYldsd1NXNTBPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dNQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J3YjJ4bFFYaHBjem9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSFFLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdkbVZ5ZEdWNFUyaGhaR1Z5T2lCbVlTZ3BMQW9nSUNBZ0lDQWdJR1p5WVdkdFpXNTBVMmhoWkdWeU9pQmdDZ29KQ1Fsd2NtVmphWE5wYjI0Z2JXVmthWFZ0Y0NCbWJHOWhkRHNLQ1FrSmNISmxZMmx6YVc5dUlHMWxaR2wxYlhBZ2FXNTBPd29LQ1FrSmRtRnllV2x1WnlCMlpXTXpJSFpQZFhSd2RYUkVhWEpsWTNScGIyNDdDZ29KQ1FsMWJtbG1iM0p0SUhOaGJYQnNaWEl5UkNCbGJuWk5ZWEE3Q2drSkNYVnVhV1p2Y20wZ2FXNTBJSE5oYlhCc1pYTTdDZ2tKQ1hWdWFXWnZjbTBnWm14dllYUWdkMlZwWjJoMGMxc2diaUJkT3dvSkNRbDFibWxtYjNKdElHSnZiMndnYkdGMGFYUjFaR2x1WVd3N0Nna0pDWFZ1YVdadmNtMGdabXh2WVhRZ1pGUm9aWFJoT3dvSkNRbDFibWxtYjNKdElHWnNiMkYwSUcxcGNFbHVkRHNLQ1FrSmRXNXBabTl5YlNCMlpXTXpJSEJ2YkdWQmVHbHpPd29LQ1FrSkpIdHdZU2dwZlFvS0NRa0pJMlJsWm1sdVpTQkZUbFpOUVZCZlZGbFFSVjlEVlVKRlgxVldDZ2tKQ1NOcGJtTnNkV1JsSUR4amRXSmxYM1YyWDNKbFpteGxZM1JwYjI1ZlpuSmhaMjFsYm5RK0Nnb0pDUWwyWldNeklHZGxkRk5oYlhCc1pTZ2dabXh2WVhRZ2RHaGxkR0VzSUhabFl6TWdZWGhwY3lBcElIc0tDZ2tKQ1FsbWJHOWhkQ0JqYjNOVWFHVjBZU0E5SUdOdmN5Z2dkR2hsZEdFZ0tUc0tDUWtKQ1M4dklGSnZaSEpwWjNWbGN5Y2dZWGhwY3kxaGJtZHNaU0J5YjNSaGRHbHZiZ29KQ1FrSmRtVmpNeUJ6WVcxd2JHVkVhWEpsWTNScGIyNGdQU0IyVDNWMGNIVjBSR2x5WldOMGFXOXVJQ29nWTI5elZHaGxkR0VLQ1FrSkNRa3JJR055YjNOektDQmhlR2x6TENCMlQzVjBjSFYwUkdseVpXTjBhVzl1SUNrZ0tpQnphVzRvSUhSb1pYUmhJQ2tLQ1FrSkNRa3JJR0Y0YVhNZ0tpQmtiM1FvSUdGNGFYTXNJSFpQZFhSd2RYUkVhWEpsWTNScGIyNGdLU0FxSUNnZ01TNHdJQzBnWTI5elZHaGxkR0VnS1RzS0Nna0pDUWx5WlhSMWNtNGdZbWxzYVc1bFlYSkRkV0psVlZZb0lHVnVkazFoY0N3Z2MyRnRjR3hsUkdseVpXTjBhVzl1TENCdGFYQkpiblFnS1RzS0Nna0pDWDBLQ2drSkNYWnZhV1FnYldGcGJpZ3BJSHNLQ2drSkNRbDJaV016SUdGNGFYTWdQU0JzWVhScGRIVmthVzVoYkNBL0lIQnZiR1ZCZUdseklEb2dZM0p2YzNNb0lIQnZiR1ZCZUdsekxDQjJUM1YwY0hWMFJHbHlaV04wYVc5dUlDazdDZ29KQ1FrSmFXWWdLQ0JoYkd3b0lHVnhkV0ZzS0NCaGVHbHpMQ0IyWldNektDQXdMakFnS1NBcElDa2dLU0I3Q2dvSkNRa0pDV0Y0YVhNZ1BTQjJaV016S0NCMlQzVjBjSFYwUkdseVpXTjBhVzl1TG5vc0lEQXVNQ3dnTFNCMlQzVjBjSFYwUkdseVpXTjBhVzl1TG5nZ0tUc0tDZ2tKQ1FsOUNnb0pDUWtKWVhocGN5QTlJRzV2Y20xaGJHbDZaU2dnWVhocGN5QXBPd29LQ1FrSkNXZHNYMFp5WVdkRGIyeHZjaUE5SUhabFl6UW9JREF1TUN3Z01DNHdMQ0F3TGpBc0lERXVNQ0FwT3dvSkNRa0paMnhmUm5KaFowTnZiRzl5TG5KbllpQXJQU0IzWldsbmFIUnpXeUF3SUYwZ0tpQm5aWFJUWVcxd2JHVW9JREF1TUN3Z1lYaHBjeUFwT3dvS0NRa0pDV1p2Y2lBb0lHbHVkQ0JwSUQwZ01Uc2dhU0E4SUc0N0lHa3JLeUFwSUhzS0Nna0pDUWtKYVdZZ0tDQnBJRDQ5SUhOaGJYQnNaWE1nS1NCN0Nnb0pDUWtKQ1FsaWNtVmhhenNLQ2drSkNRa0pmUW9LQ1FrSkNRbG1iRzloZENCMGFHVjBZU0E5SUdSVWFHVjBZU0FxSUdac2IyRjBLQ0JwSUNrN0Nna0pDUWtKWjJ4ZlJuSmhaME52Ykc5eUxuSm5ZaUFyUFNCM1pXbG5hSFJ6V3lCcElGMGdLaUJuWlhSVFlXMXdiR1VvSUMweExqQWdLaUIwYUdWMFlTd2dZWGhwY3lBcE93b0pDUWtKQ1dkc1gwWnlZV2REYjJ4dmNpNXlaMklnS3owZ2QyVnBaMmgwYzFzZ2FTQmRJQ29nWjJWMFUyRnRjR3hsS0NCMGFHVjBZU3dnWVhocGN5QXBPd29LQ1FrSkNYMEtDZ2tKQ1gwS0NRbGdMQW9nSUNBZ0lDQWdJR0pzWlc1a2FXNW5PaUIyYml3S0lDQWdJQ0FnSUNCa1pYQjBhRlJsYzNRNklDRXhMQW9nSUNBZ0lDQWdJR1JsY0hSb1YzSnBkR1U2SUNFeENpQWdJQ0I5S1RzS2ZRcG1kVzVqZEdsdmJpQkViQ2dwSUhzS0lDQWdJR3hsZENCeklEMGdibVYzSUZnb01Td2dNU2s3Q2lBZ0lDQnlaWFIxY200Z2JtVjNJRWRwS0hzS0lDQWdJQ0FnSUNCdVlXMWxPaUFpUlhGMWFYSmxZM1JoYm1kMWJHRnlWRzlEZFdKbFZWWWlMQW9nSUNBZ0lDQWdJSFZ1YVdadmNtMXpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnVkazFoY0RvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1MWJHd0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0Wld4VGFYcGxPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2djd29nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRFVnVZMjlrYVc1bk9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1NITmJUblJkQ2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ1ptRW9LU3dLSUNBZ0lDQWdJQ0JtY21GbmJXVnVkRk5vWVdSbGNqb2dZQW9LQ1FrSmNISmxZMmx6YVc5dUlHMWxaR2wxYlhBZ1pteHZZWFE3Q2drSkNYQnlaV05wYzJsdmJpQnRaV1JwZFcxd0lHbHVkRHNLQ2drSkNYWmhjbmxwYm1jZ2RtVmpNeUIyVDNWMGNIVjBSR2x5WldOMGFXOXVPd29LQ1FrSmRXNXBabTl5YlNCellXMXdiR1Z5TWtRZ1pXNTJUV0Z3T3dvSkNRbDFibWxtYjNKdElIWmxZeklnZEdWNFpXeFRhWHBsT3dvS0NRa0pKSHR3WVNncGZRb0tDUWtKSTJsdVkyeDFaR1VnUEdOdmJXMXZiajRLQ2drSkNYWnZhV1FnYldGcGJpZ3BJSHNLQ2drSkNRbG5iRjlHY21GblEyOXNiM0lnUFNCMlpXTTBLQ0F3TGpBc0lEQXVNQ3dnTUM0d0xDQXhMakFnS1RzS0Nna0pDUWwyWldNeklHOTFkSEIxZEVScGNtVmpkR2x2YmlBOUlHNXZjbTFoYkdsNlpTZ2dkazkxZEhCMWRFUnBjbVZqZEdsdmJpQXBPd29KQ1FrSmRtVmpNaUIxZGlBOUlHVnhkV2x5WldOMFZYWW9JRzkxZEhCMWRFUnBjbVZqZEdsdmJpQXBPd29LQ1FrSkNYWmxZeklnWmlBOUlHWnlZV04wS0NCMWRpQXZJSFJsZUdWc1UybDZaU0F0SURBdU5TQXBPd29KQ1FrSmRYWWdMVDBnWmlBcUlIUmxlR1ZzVTJsNlpUc0tDUWtKQ1habFl6TWdkR3dnUFNCbGJuWk5ZWEJVWlhobGJGUnZUR2x1WldGeUtDQjBaWGgwZFhKbE1rUWdLQ0JsYm5aTllYQXNJSFYySUNrZ0tTNXlaMkk3Q2drSkNRbDFkaTU0SUNzOUlIUmxlR1ZzVTJsNlpTNTRPd29KQ1FrSmRtVmpNeUIwY2lBOUlHVnVkazFoY0ZSbGVHVnNWRzlNYVc1bFlYSW9JSFJsZUhSMWNtVXlSQ0FvSUdWdWRrMWhjQ3dnZFhZZ0tTQXBMbkpuWWpzS0NRa0pDWFYyTG5rZ0t6MGdkR1Y0Wld4VGFYcGxMbms3Q2drSkNRbDJaV016SUdKeUlEMGdaVzUyVFdGd1ZHVjRaV3hVYjB4cGJtVmhjaWdnZEdWNGRIVnlaVEpFSUNnZ1pXNTJUV0Z3TENCMWRpQXBJQ2t1Y21kaU93b0pDUWtKZFhZdWVDQXRQU0IwWlhobGJGTnBlbVV1ZURzS0NRa0pDWFpsWXpNZ1ltd2dQU0JsYm5aTllYQlVaWGhsYkZSdlRHbHVaV0Z5S0NCMFpYaDBkWEpsTWtRZ0tDQmxiblpOWVhBc0lIVjJJQ2tnS1M1eVoySTdDZ29KQ1FrSmRtVmpNeUIwYlNBOUlHMXBlQ2dnZEd3c0lIUnlMQ0JtTG5nZ0tUc0tDUWtKQ1habFl6TWdZbTBnUFNCdGFYZ29JR0pzTENCaWNpd2daaTU0SUNrN0Nna0pDUWxuYkY5R2NtRm5RMjlzYjNJdWNtZGlJRDBnYldsNEtDQjBiU3dnWW0wc0lHWXVlU0FwT3dvS0NRa0pmUW9KQ1dBc0NpQWdJQ0FnSUNBZ1lteGxibVJwYm1jNklIWnVMQW9nSUNBZ0lDQWdJR1JsY0hSb1ZHVnpkRG9nSVRFc0NpQWdJQ0FnSUNBZ1pHVndkR2hYY21sMFpUb2dJVEVLSUNBZ0lIMHBPd3A5Q21aMWJtTjBhVzl1SUVac0tDa2dld29nSUNBZ2NtVjBkWEp1SUc1bGR5QkhhU2g3Q2lBZ0lDQWdJQ0FnYm1GdFpUb2dJa04xWW1WdFlYQlViME4xWW1WVlZpSXNDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXNTJUV0Z3T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm5Wc2JBb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEVWdVkyOWthVzVuT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nU0hOYlRuUmRDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nWm1Fb0tTd0tJQ0FnSUNBZ0lDQm1jbUZuYldWdWRGTm9ZV1JsY2pvZ1lBb0tDUWtKY0hKbFkybHphVzl1SUcxbFpHbDFiWEFnWm14dllYUTdDZ2tKQ1hCeVpXTnBjMmx2YmlCdFpXUnBkVzF3SUdsdWREc0tDZ2tKQ1haaGNubHBibWNnZG1Wak15QjJUM1YwY0hWMFJHbHlaV04wYVc5dU93b0tDUWtKZFc1cFptOXliU0J6WVcxd2JHVnlRM1ZpWlNCbGJuWk5ZWEE3Q2dvSkNRa2tlM0JoS0NsOUNnb0pDUWwyYjJsa0lHMWhhVzRvS1NCN0Nnb0pDUWtKWjJ4ZlJuSmhaME52Ykc5eUlEMGdaVzUyVFdGd1ZHVjRaV3hVYjB4cGJtVmhjaWdnZEdWNGRIVnlaVU4xWW1Vb0lHVnVkazFoY0N3Z2RtVmpNeWdnTFNCMlQzVjBjSFYwUkdseVpXTjBhVzl1TG5nc0lIWlBkWFJ3ZFhSRWFYSmxZM1JwYjI0dWVYb2dLU0FwSUNrN0Nnb0pDUWw5Q2drSllDd0tJQ0FnSUNBZ0lDQmliR1Z1WkdsdVp6b2dkbTRzQ2lBZ0lDQWdJQ0FnWkdWd2RHaFVaWE4wT2lBaE1Td0tJQ0FnSUNBZ0lDQmtaWEIwYUZkeWFYUmxPaUFoTVFvZ0lDQWdmU2s3Q24wS1puVnVZM1JwYjI0Z1ptRW9LU0I3Q2lBZ0lDQnlaWFIxY200Z1lBb0tDUWx3Y21WamFYTnBiMjRnYldWa2FYVnRjQ0JtYkc5aGREc0tDUWx3Y21WamFYTnBiMjRnYldWa2FYVnRjQ0JwYm5RN0Nnb0pDV0YwZEhKcFluVjBaU0IyWldNeklIQnZjMmwwYVc5dU93b0pDV0YwZEhKcFluVjBaU0IyWldNeUlIVjJPd29KQ1dGMGRISnBZblYwWlNCbWJHOWhkQ0JtWVdObFNXNWtaWGc3Q2dvSkNYWmhjbmxwYm1jZ2RtVmpNeUIyVDNWMGNIVjBSR2x5WldOMGFXOXVPd29LQ1Frdkx5QlNTQ0JqYjI5eVpHbHVZWFJsSUhONWMzUmxiVHNnVUUxU1JVMGdabUZqWlMxcGJtUmxlR2x1WnlCamIyNTJaVzUwYVc5dUNna0pkbVZqTXlCblpYUkVhWEpsWTNScGIyNG9JSFpsWXpJZ2RYWXNJR1pzYjJGMElHWmhZMlVnS1NCN0Nnb0pDUWwxZGlBOUlESXVNQ0FxSUhWMklDMGdNUzR3T3dvS0NRa0pkbVZqTXlCa2FYSmxZM1JwYjI0Z1BTQjJaV016S0NCMWRpd2dNUzR3SUNrN0Nnb0pDUWxwWmlBb0lHWmhZMlVnUFQwZ01DNHdJQ2tnZXdvS0NRa0pDV1JwY21WamRHbHZiaUE5SUdScGNtVmpkR2x2Ymk1NmVYZzdJQzh2SUNnZ01Td2dkaXdnZFNBcElIQnZjeUI0Q2dvSkNRbDlJR1ZzYzJVZ2FXWWdLQ0JtWVdObElEMDlJREV1TUNBcElIc0tDZ2tKQ1Fsa2FYSmxZM1JwYjI0Z1BTQmthWEpsWTNScGIyNHVlSHA1T3dvSkNRa0paR2x5WldOMGFXOXVMbmg2SUNvOUlDMHhMakE3SUM4dklDZ2dMWFVzSURFc0lDMTJJQ2tnY0c5eklIa0tDZ2tKQ1gwZ1pXeHpaU0JwWmlBb0lHWmhZMlVnUFQwZ01pNHdJQ2tnZXdvS0NRa0pDV1JwY21WamRHbHZiaTU0SUNvOUlDMHhMakE3SUM4dklDZ2dMWFVzSUhZc0lERWdLU0J3YjNNZ2Vnb0tDUWtKZlNCbGJITmxJR2xtSUNnZ1ptRmpaU0E5UFNBekxqQWdLU0I3Q2dvSkNRa0paR2x5WldOMGFXOXVJRDBnWkdseVpXTjBhVzl1TG5wNWVEc0tDUWtKQ1dScGNtVmpkR2x2Ymk1NGVpQXFQU0F0TVM0d095QXZMeUFvSUMweExDQjJMQ0F0ZFNBcElHNWxaeUI0Q2dvSkNRbDlJR1ZzYzJVZ2FXWWdLQ0JtWVdObElEMDlJRFF1TUNBcElIc0tDZ2tKQ1Fsa2FYSmxZM1JwYjI0Z1BTQmthWEpsWTNScGIyNHVlSHA1T3dvSkNRa0paR2x5WldOMGFXOXVMbmg1SUNvOUlDMHhMakE3SUM4dklDZ2dMWFVzSUMweExDQjJJQ2tnYm1WbklIa0tDZ2tKQ1gwZ1pXeHpaU0JwWmlBb0lHWmhZMlVnUFQwZ05TNHdJQ2tnZXdvS0NRa0pDV1JwY21WamRHbHZiaTU2SUNvOUlDMHhMakE3SUM4dklDZ2dkU3dnZGl3Z0xURWdLU0J1WldjZ2Vnb0tDUWtKZlFvS0NRa0pjbVYwZFhKdUlHUnBjbVZqZEdsdmJqc0tDZ2tKZlFvS0NRbDJiMmxrSUcxaGFXNG9LU0I3Q2dvSkNRbDJUM1YwY0hWMFJHbHlaV04wYVc5dUlEMGdaMlYwUkdseVpXTjBhVzl1S0NCMWRpd2dabUZqWlVsdVpHVjRJQ2s3Q2drSkNXZHNYMUJ2YzJsMGFXOXVJRDBnZG1Wak5DZ2djRzl6YVhScGIyNHNJREV1TUNBcE93b0tDUWw5Q2dsZ093cDlDbVoxYm1OMGFXOXVJSEJoS0NrZ2V3b2dJQ0FnY21WMGRYSnVJR0FLQ2drSmRXNXBabTl5YlNCcGJuUWdhVzV3ZFhSRmJtTnZaR2x1WnpzS0Nna0pJMmx1WTJ4MVpHVWdQR1Z1WTI5a2FXNW5jMTl3WVhKelgyWnlZV2R0Wlc1MFBnb0tDUWwyWldNMElHbHVjSFYwVkdWNFpXeFViMHhwYm1WaGNpZ2dkbVZqTkNCMllXeDFaU0FwSUhzS0Nna0pDV2xtSUNnZ2FXNXdkWFJGYm1OdlpHbHVaeUE5UFNBd0lDa2dld29LQ1FrSkNYSmxkSFZ5YmlCMllXeDFaVHNLQ2drSkNYMGdaV3h6WlNCN0Nnb0pDUWtKY21WMGRYSnVJSE5TUjBKVWIweHBibVZoY2lnZ2RtRnNkV1VnS1RzS0Nna0pDWDBLQ2drSmZRb0tDUWwyWldNMElHVnVkazFoY0ZSbGVHVnNWRzlNYVc1bFlYSW9JSFpsWXpRZ1kyOXNiM0lnS1NCN0Nnb0pDUWx5WlhSMWNtNGdhVzV3ZFhSVVpYaGxiRlJ2VEdsdVpXRnlLQ0JqYjJ4dmNpQXBPd29LQ1FsOUNnbGdPd3A5Q21aMWJtTjBhVzl1SUdwdEtITXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ2JtVjNJRmRsWVd0TllYQXNJSFFnUFNCdWRXeHNPd29nSUNBZ1puVnVZM1JwYjI0Z2JpaGhLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHRWdKaVlnWVM1cGMxUmxlSFIxY21VZ0ppWWdZUzVwYzFKbGJtUmxjbFJoY21kbGRGUmxlSFIxY21VZ1BUMDlJQ0V4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCc0lEMGdZUzV0WVhCd2FXNW5MQ0JqSUQwZ2JDQTlQVDBnUkhNZ2ZId2diQ0E5UFQwZ1JuTXNJR2dnUFNCc0lEMDlQU0JDYVNCOGZDQnNJRDA5UFNCNmFUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTWdmSHdnYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1V1YUdGektHRXBLU0J5WlhSMWNtNGdaUzVuWlhRb1lTa3VkR1Y0ZEhWeVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJR0V1YVcxaFoyVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTWdKaVlnZFNBbUppQjFMbWhsYVdkb2RDQStJREFnZkh3Z2FDQW1KaUIxSUNZbUlHa29kU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0J6TG1kbGRGSmxibVJsY2xSaGNtZGxkQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwSUQwOVBTQnVkV3hzSUNZbUlDaDBJRDBnYm1WM0lHRm9LSE1wS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0JqSUQ4Z2RDNW1jbTl0UlhGMWFYSmxZM1JoYm1kMWJHRnlLR0VwSURvZ2RDNW1jbTl0UTNWaVpXMWhjQ2hoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1YzJWMEtHRXNJR1lwTENCekxuTmxkRkpsYm1SbGNsUmhjbWRsZENoa0tTd2dZUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnY2lrc0lHWXVkR1Y0ZEhWeVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJwS0dFcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlEQXNJR01nUFNBMk93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FDQTlJREE3SUdnZ1BDQmpPeUJvS3lzcFlWdG9YU0FoUFQwZ2RtOXBaQ0F3SUNZbUlHd3JLenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiQ0E5UFQwZ1l6c0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJSElvWVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1lTNTBZWEpuWlhRN0NpQWdJQ0FnSUNBZ2JDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnY2lrN0NpQWdJQ0FnSUNBZ2JHVjBJR01nUFNCbExtZGxkQ2hzS1RzS0lDQWdJQ0FnSUNCaklDRTlQU0IyYjJsa0lEQWdKaVlnS0dVdVpHVnNaWFJsS0d3cExDQmpMbVJwYzNCdmMyVW9LU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdktDa2dld29nSUNBZ0lDQWdJR1VnUFNCdVpYY2dWMlZoYTAxaGNDd2dkQ0FoUFQwZ2JuVnNiQ0FtSmlBb2RDNWthWE53YjNObEtDa3NJSFFnUFNCdWRXeHNLVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQnVMQW9nSUNBZ0lDQWdJR1JwYzNCdmMyVTZJRzhLSUNBZ0lIMDdDbjBLWm5WdVkzUnBiMjRnVVcwb2N5a2dld29nSUNBZ2JHVjBJR1VnUFNCN2ZUc0tJQ0FnSUdaMWJtTjBhVzl1SUhRb2Jpa2dld29nSUNBZ0lDQWdJR2xtSUNobFcyNWRJQ0U5UFNCMmIybGtJREFwSUhKbGRIVnliaUJsVzI1ZE93b2dJQ0FnSUNBZ0lHeGxkQ0JwT3dvZ0lDQWdJQ0FnSUhOM2FYUmphQ2h1S1hzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVYwVkNSMHhmWkdWd2RHaGZkR1Y0ZEhWeVpTSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBJRDBnY3k1blpYUkZlSFJsYm5OcGIyNG9JbGRGUWtkTVgyUmxjSFJvWDNSbGVIUjFjbVVpS1NCOGZDQnpMbWRsZEVWNGRHVnVjMmx2YmlnaVRVOWFYMWRGUWtkTVgyUmxjSFJvWDNSbGVIUjFjbVVpS1NCOGZDQnpMbWRsZEVWNGRHVnVjMmx2YmlnaVYwVkNTMGxVWDFkRlFrZE1YMlJsY0hSb1gzUmxlSFIxY21VaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKRldGUmZkR1Y0ZEhWeVpWOW1hV3gwWlhKZllXNXBjMjkwY205d2FXTWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0E5SUhNdVoyVjBSWGgwWlc1emFXOXVLQ0pGV0ZSZmRHVjRkSFZ5WlY5bWFXeDBaWEpmWVc1cGMyOTBjbTl3YVdNaUtTQjhmQ0J6TG1kbGRFVjRkR1Z1YzJsdmJpZ2lUVTlhWDBWWVZGOTBaWGgwZFhKbFgyWnBiSFJsY2w5aGJtbHpiM1J5YjNCcFl5SXBJSHg4SUhNdVoyVjBSWGgwWlc1emFXOXVLQ0pYUlVKTFNWUmZSVmhVWDNSbGVIUjFjbVZmWm1sc2RHVnlYMkZ1YVhOdmRISnZjR2xqSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYM016ZEdNaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQTlJSE11WjJWMFJYaDBaVzV6YVc5dUtDSlhSVUpIVEY5amIyMXdjbVZ6YzJWa1gzUmxlSFIxY21WZmN6TjBZeUlwSUh4OElITXVaMlYwUlhoMFpXNXphVzl1S0NKTlQxcGZWMFZDUjB4ZlkyOXRjSEpsYzNObFpGOTBaWGgwZFhKbFgzTXpkR01pS1NCOGZDQnpMbWRsZEVWNGRHVnVjMmx2YmlnaVYwVkNTMGxVWDFkRlFrZE1YMk52YlhCeVpYTnpaV1JmZEdWNGRIVnlaVjl6TTNSaklpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVYwVkNSMHhmWTI5dGNISmxjM05sWkY5MFpYaDBkWEpsWDNCMmNuUmpJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnUFNCekxtZGxkRVY0ZEdWdWMybHZiaWdpVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYM0IyY25Saklpa2dmSHdnY3k1blpYUkZlSFJsYm5OcGIyNG9JbGRGUWt0SlZGOVhSVUpIVEY5amIyMXdjbVZ6YzJWa1gzUmxlSFIxY21WZmNIWnlkR01pS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNBOUlITXVaMlYwUlhoMFpXNXphVzl1S0c0cE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1pWdHVYU0E5SUdrc0lHazdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJR2hoY3pvZ1puVnVZM1JwYjI0b2Jpa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZENodUtTQWhQVDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR2x1YVhRNklHWjFibU4wYVc5dUtHNHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JpNXBjMWRsWWtkTU1pQS9JSFFvSWtWWVZGOWpiMnh2Y2w5aWRXWm1aWEpmWm14dllYUWlLU0E2SUNoMEtDSlhSVUpIVEY5a1pYQjBhRjkwWlhoMGRYSmxJaWtzSUhRb0lrOUZVMTkwWlhoMGRYSmxYMlpzYjJGMElpa3NJSFFvSWs5RlUxOTBaWGgwZFhKbFgyaGhiR1pmWm14dllYUWlLU3dnZENnaVQwVlRYM1JsZUhSMWNtVmZhR0ZzWmw5bWJHOWhkRjlzYVc1bFlYSWlLU3dnZENnaVQwVlRYM04wWVc1a1lYSmtYMlJsY21sMllYUnBkbVZ6SWlrc0lIUW9JazlGVTE5bGJHVnRaVzUwWDJsdVpHVjRYM1ZwYm5RaUtTd2dkQ2dpVDBWVFgzWmxjblJsZUY5aGNuSmhlVjl2WW1wbFkzUWlLU3dnZENnaVFVNUhURVZmYVc1emRHRnVZMlZrWDJGeWNtRjVjeUlwS1N3Z2RDZ2lUMFZUWDNSbGVIUjFjbVZmWm14dllYUmZiR2x1WldGeUlpa3NJSFFvSWtWWVZGOWpiMnh2Y2w5aWRXWm1aWEpmYUdGc1psOW1iRzloZENJcExDQjBLQ0pYUlVKSFRGOXRkV3gwYVhOaGJYQnNaV1JmY21WdVpHVnlYM1J2WDNSbGVIUjFjbVVpS1RzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvYmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFFvYmlrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBJRDA5UFNCdWRXeHNJQ1ltSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nSWlBcklHNGdLeUFpSUdWNGRHVnVjMmx2YmlCdWIzUWdjM1Z3Y0c5eWRHVmtMaUlwTENCcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwN0NuMEtablZ1WTNScGIyNGdTMjBvY3l3Z1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnYkdWMElHa2dQU0I3ZlN3Z2NpQTlJRzVsZHlCWFpXRnJUV0Z3T3dvZ0lDQWdablZ1WTNScGIyNGdieWgxS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCMUxuUmhjbWRsZERzS0lDQWdJQ0FnSUNCa0xtbHVaR1Y0SUNFOVBTQnVkV3hzSUNZbUlHVXVjbVZ0YjNabEtHUXVhVzVrWlhncE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQnBiaUJrTG1GMGRISnBZblYwWlhNcFpTNXlaVzF2ZG1Vb1pDNWhkSFJ5YVdKMWRHVnpXMjFkS1RzS0lDQWdJQ0FnSUNCa0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JbVJwYzNCdmMyVWlMQ0J2S1N3Z1pHVnNaWFJsSUdsYlpDNXBaRjA3Q2lBZ0lDQWdJQ0FnYkdWMElHWWdQU0J5TG1kbGRDaGtLVHNLSUNBZ0lDQWdJQ0JtSUNZbUlDaGxMbkpsYlc5MlpTaG1LU3dnY2k1a1pXeGxkR1VvWkNrcExDQnVMbkpsYkdWaGMyVlRkR0YwWlhOUFprZGxiMjFsZEhKNUtHUXBMQ0JrTG1selNXNXpkR0Z1WTJWa1FuVm1abVZ5UjJWdmJXVjBjbmtnUFQwOUlDRXdJQ1ltSUdSbGJHVjBaU0JrTGw5dFlYaEpibk4wWVc1alpVTnZkVzUwTENCMExtMWxiVzl5ZVM1blpXOXRaWFJ5YVdWekxTMDdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJoS0hVc0lHUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVnRrTG1sa1hTQTlQVDBnSVRBZ2ZId2dLR1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpWkdsemNHOXpaU0lzSUc4cExDQnBXMlF1YVdSZElEMGdJVEFzSUhRdWJXVnRiM0o1TG1kbGIyMWxkSEpwWlhNckt5a3NJR1E3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCc0tIVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJSFV1WVhSMGNtbGlkWFJsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUcwZ2FXNGdaQ2xsTG5Wd1pHRjBaU2hrVzIxZExDQXpORGsyTWlrN0NpQWdJQ0FnSUNBZ2JHVjBJR1lnUFNCMUxtMXZjbkJvUVhSMGNtbGlkWFJsY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUcwZ2FXNGdaaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I0SUQwZ1psdHRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMklEMGdNQ3dnWnlBOUlIZ3ViR1Z1WjNSb095QjJJRHdnWnpzZ2Rpc3JLV1V1ZFhCa1lYUmxLSGhiZGwwc0lETTBPVFl5S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmpLSFVwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUZ0ZExDQm1JRDBnZFM1cGJtUmxlQ3dnYlNBOUlIVXVZWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaXdnZUNBOUlEQTdDaUFnSUNBZ0lDQWdhV1lnS0dZZ0lUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQWdQU0JtTG1GeWNtRjVPd29nSUNBZ0lDQWdJQ0FnSUNCNElEMGdaaTUyWlhKemFXOXVPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUY4Z1BTQXdMQ0I1SUQwZ2NDNXNaVzVuZEdnN0lGOGdQQ0I1T3lCZklDczlJRE1wZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSWdQU0J3VzE4Z0t5QXdYU3dnUVNBOUlIQmJYeUFySURGZExDQk1JRDBnY0Z0ZklDc2dNbDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrTG5CMWMyZ29ZaXdnUVN3Z1FTd2dUQ3dnVEN3Z1lpazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlHMHVZWEp5WVhrN0NpQWdJQ0FnSUNBZ0lDQWdJSGdnUFNCdExuWmxjbk5wYjI0N0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdYeUE5SURBc0lIa2dQU0J3TG14bGJtZDBhQ0F2SURNZ0xTQXhPeUJmSUR3Z2VUc2dYeUFyUFNBektYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JpSUQwZ1h5QXJJREFzSUVFZ1BTQmZJQ3NnTVN3Z1RDQTlJRjhnS3lBeU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pDNXdkWE5vS0dJc0lFRXNJRUVzSUV3c0lFd3NJR0lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCMklEMGdibVYzSUNoWll5aGtLU0ErSURZMU5UTTFJRDhnV25NZ09pQlpjeWtvWkN3Z01TazdDaUFnSUNBZ0lDQWdkaTUyWlhKemFXOXVJRDBnZURzS0lDQWdJQ0FnSUNCc1pYUWdaeUE5SUhJdVoyVjBLSFVwT3dvZ0lDQWdJQ0FnSUdjZ0ppWWdaUzV5WlcxdmRtVW9aeWtzSUhJdWMyVjBLSFVzSUhZcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhQ2gxS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1FnUFNCeUxtZGxkQ2gxS1RzS0lDQWdJQ0FnSUNCcFppQW9aQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWmlBOUlIVXVhVzVrWlhnN0NpQWdJQ0FnSUNBZ0lDQWdJR1lnSVQwOUlHNTFiR3dnSmlZZ1pDNTJaWEp6YVc5dUlEd2daaTUyWlhKemFXOXVJQ1ltSUdNb2RTazdDaUFnSUNBZ0lDQWdmU0JsYkhObElHTW9kU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSEl1WjJWMEtIVXBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHRXNDaUFnSUNBZ0lDQWdkWEJrWVhSbE9pQnNMQW9nSUNBZ0lDQWdJR2RsZEZkcGNtVm1jbUZ0WlVGMGRISnBZblYwWlRvZ2FBb2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQmxaeWh6TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJRzR1YVhOWFpXSkhURElzSUhJN0NpQWdJQ0JtZFc1amRHbHZiaUJ2S0dRcElIc0tJQ0FnSUNBZ0lDQnlJRDBnWkRzS0lDQWdJSDBLSUNBZ0lHeGxkQ0JoTENCc093b2dJQ0FnWm5WdVkzUnBiMjRnWXloa0tTQjdDaUFnSUNBZ0lDQWdZU0E5SUdRdWRIbHdaU3dnYkNBOUlHUXVZbmwwWlhOUVpYSkZiR1Z0Wlc1ME93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdhQ2hrTENCbUtTQjdDaUFnSUNBZ0lDQWdjeTVrY21GM1JXeGxiV1Z1ZEhNb2Npd2daaXdnWVN3Z1pDQXFJR3dwTENCMExuVndaR0YwWlNobUxDQnlMQ0F4S1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlIVW9aQ3dnWml3Z2JTa2dld29nSUNBZ0lDQWdJR2xtSUNodElEMDlQU0F3S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElIZ3NJSFk3Q2lBZ0lDQWdJQ0FnYVdZZ0tHa3BJSGdnUFNCekxDQjJJRDBnSW1SeVlYZEZiR1Z0Wlc1MGMwbHVjM1JoYm1ObFpDSTdDaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9lQ0E5SUdVdVoyVjBLQ0pCVGtkTVJWOXBibk4wWVc1alpXUmZZWEp5WVhseklpa3NJSFlnUFNBaVpISmhkMFZzWlcxbGJuUnpTVzV6ZEdGdVkyVmtRVTVIVEVVaUxDQjRJRDA5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVNXNWtaWGhsWkVKMVptWmxjbEpsYm1SbGNtVnlPaUIxYzJsdVp5QlVTRkpGUlM1SmJuTjBZVzVqWldSQ2RXWm1aWEpIWlc5dFpYUnllU0JpZFhRZ2FHRnlaSGRoY21VZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCbGVIUmxibk5wYjI0Z1FVNUhURVZmYVc1emRHRnVZMlZrWDJGeWNtRjVjeTRpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjRXM1pkS0hJc0lHWXNJR0VzSUdRZ0tpQnNMQ0J0S1N3Z2RDNTFjR1JoZEdVb1ppd2djaXdnYlNrN0NpQWdJQ0I5Q2lBZ0lDQjBhR2x6TG5ObGRFMXZaR1VnUFNCdkxDQjBhR2x6TG5ObGRFbHVaR1Y0SUQwZ1l5d2dkR2hwY3k1eVpXNWtaWElnUFNCb0xDQjBhR2x6TG5KbGJtUmxja2x1YzNSaGJtTmxjeUE5SUhVN0NuMEtablZ1WTNScGIyNGdkR2NvY3lrZ2V3b2dJQ0FnYkdWMElHVWdQU0I3Q2lBZ0lDQWdJQ0FnWjJWdmJXVjBjbWxsY3pvZ01Dd0tJQ0FnSUNBZ0lDQjBaWGgwZFhKbGN6b2dNQW9nSUNBZ2ZTd2dkQ0E5SUhzS0lDQWdJQ0FnSUNCbWNtRnRaVG9nTUN3S0lDQWdJQ0FnSUNCallXeHNjem9nTUN3S0lDQWdJQ0FnSUNCMGNtbGhibWRzWlhNNklEQXNDaUFnSUNBZ0lDQWdjRzlwYm5Sek9pQXdMQW9nSUNBZ0lDQWdJR3hwYm1Wek9pQXdDaUFnSUNCOU93b2dJQ0FnWm5WdVkzUnBiMjRnYmloeUxDQnZMQ0JoS1NCN0NpQWdJQ0FnSUNBZ2MzZHBkR05vS0hRdVkyRnNiSE1yS3l3Z2J5bDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdORG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFF1ZEhKcFlXNW5iR1Z6SUNzOUlHRWdLaUFvY2lBdklETXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Ub0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUXViR2x1WlhNZ0t6MGdZU0FxSUNoeUlDOGdNaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXpPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQzVzYVc1bGN5QXJQU0JoSUNvZ0tISWdMU0F4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwTG14cGJtVnpJQ3M5SUdFZ0tpQnlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Eb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUXVjRzlwYm5SeklDczlJR0VnS2lCeU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEVsdVptODZJRlZ1YTI1dmQyNGdaSEpoZHlCdGIyUmxPaUlzSUc4cE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2FTZ3BJSHNLSUNBZ0lDQWdJQ0IwTG1aeVlXMWxLeXNzSUhRdVkyRnNiSE1nUFNBd0xDQjBMblJ5YVdGdVoyeGxjeUE5SURBc0lIUXVjRzlwYm5SeklEMGdNQ3dnZEM1c2FXNWxjeUE5SURBN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lHMWxiVzl5ZVRvZ1pTd0tJQ0FnSUNBZ0lDQnlaVzVrWlhJNklIUXNDaUFnSUNBZ0lDQWdjSEp2WjNKaGJYTTZJRzUxYkd3c0NpQWdJQ0FnSUNBZ1lYVjBiMUpsYzJWME9pQWhNQ3dLSUNBZ0lDQWdJQ0J5WlhObGREb2dhU3dLSUNBZ0lDQWdJQ0IxY0dSaGRHVTZJRzRLSUNBZ0lIMDdDbjBLZG1GeUlGRnpJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QnZkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JuVnNiQ3dnZENBOUlERXNJRzRnUFNBeExDQnBJRDBnTVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvYm5Wc2JDazdDaUFnSUNBZ0lDQWdkR2hwY3k1cGJXRm5aU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWd2RHZzZJR2tLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbTFoWjBacGJIUmxjaUE5SUhKMExDQjBhR2x6TG0xcGJrWnBiSFJsY2lBOUlISjBMQ0IwYUdsekxuZHlZWEJTSUQwZ2RuUXNJSFJvYVhNdVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUQwZ0lURXNJSFJvYVhNdVpteHBjRmtnUFNBaE1Td2dkR2hwY3k1MWJuQmhZMnRCYkdsbmJtMWxiblFnUFNBeE93b2dJQ0FnZlFwOU93cFJjeTV3Y205MGIzUjVjR1V1YVhORVlYUmhWR1Y0ZEhWeVpUSkVRWEp5WVhrZ1BTQWhNRHNLWm5WdVkzUnBiMjRnYm1jb2N5d2daU2tnZXdvZ0lDQWdjbVYwZFhKdUlITmJNRjBnTFNCbFd6QmRPd3A5Q21aMWJtTjBhVzl1SUdsbktITXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG1GaWN5aGxXekZkS1NBdElFMWhkR2d1WVdKektITmJNVjBwT3dwOUNtWjFibU4wYVc5dUlFNXNLSE1zSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnTVN3Z2JpQTlJR1V1YVhOSmJuUmxjbXhsWVhabFpFSjFabVpsY2tGMGRISnBZblYwWlNBL0lHVXVaR0YwWVM1aGNuSmhlU0E2SUdVdVlYSnlZWGs3Q2lBZ0lDQnVJR2x1YzNSaGJtTmxiMllnU1c1ME9FRnljbUY1SUQ4Z2RDQTlJREV5TnlBNklHNGdhVzV6ZEdGdVkyVnZaaUJKYm5ReE5rRnljbUY1SUQ4Z2RDQTlJRE15TnpZM0lEb2diaUJwYm5OMFlXNWpaVzltSUVsdWRETXlRWEp5WVhrZ1B5QjBJRDBnTWpFME56UTRNelkwTnlBNklHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVRXOXljR2gwWVhKblpYUnpPaUJWYm5OMWNIQnZjblJsWkNCdGIzSndhQ0JoZEhSeWFXSjFkR1VnWkdGMFlTQjBlWEJsT2lBaUxDQnVLU3dnY3k1a2FYWnBaR1ZUWTJGc1lYSW9kQ2s3Q24wS1puVnVZM1JwYjI0Z2NtY29jeXdnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCN2ZTd2dhU0E5SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvT0Nrc0lISWdQU0J1WlhjZ1YyVmhhMDFoY0N3Z2J5QTlJRzVsZHlCTkxDQmhJRDBnVzEwN0NpQWdJQ0JtYjNJb2JHVjBJR01nUFNBd095QmpJRHdnT0RzZ1l5c3JLV0ZiWTEwZ1BTQmJDaUFnSUNBZ0lDQWdZeXdLSUNBZ0lDQWdJQ0F3Q2lBZ0lDQmRPd29nSUNBZ1puVnVZM1JwYjI0Z2JDaGpMQ0JvTENCMUxDQmtLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHWWdQU0JqTG0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN6c0tJQ0FnSUNBZ0lDQnBaaUFvWlM1cGMxZGxZa2RNTWlBOVBUMGdJVEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcwZ1BTQm9MbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpNXNaVzVuZEdnc0lIZ2dQU0J5TG1kbGRDaG9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGdnUFQwOUlIWnZhV1FnTUNCOGZDQjRMbU52ZFc1MElDRTlQU0J0S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNElDRTlQU0IyYjJsa0lEQWdKaVlnZUM1MFpYaDBkWEpsTG1ScGMzQnZjMlVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQndJRDBnYUM1dGIzSndhRUYwZEhKcFluVjBaWE11Ym05eWJXRnNJQ0U5UFNCMmIybGtJREFzSUY4Z1BTQm9MbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpd2dlU0E5SUdndWJXOXljR2hCZEhSeWFXSjFkR1Z6TG01dmNtMWhiQ0I4ZkNCYlhTd2dZaUE5SUdndVlYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpNWpiM1Z1ZEN3Z1FTQTlJSEFnUFQwOUlDRXdJRDhnTWlBNklERXNJRXdnUFNCaUlDb2dRU3dnU1NBOUlERTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1JRDRnWlM1dFlYaFVaWGgwZFhKbFUybDZaU0FtSmlBb1NTQTlJRTFoZEdndVkyVnBiQ2hNSUM4Z1pTNXRZWGhVWlhoMGRYSmxVMmw2WlNrc0lFd2dQU0JsTG0xaGVGUmxlSFIxY21WVGFYcGxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcklEMGdibVYzSUVac2IyRjBNekpCY25KaGVTaE1JQ29nU1NBcUlEUWdLaUJ0S1N3Z1FpQTlJRzVsZHlCUmN5aHJMQ0JNTENCSkxDQnRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUl1Wm05eWJXRjBJRDBnWTNRc0lFSXVkSGx3WlNBOUlHNXVMQ0JDTG01bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1VDQTlJRUVnS2lBME93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCM0lEMGdNRHNnZHlBOElHMDdJSGNyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVVZ1BTQmZXM2RkTENCRUlEMGdlVnQzWFN3Z1ZTQTlJRXdnS2lCSklDb2dOQ0FxSUhjN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkdJRDBnTURzZ1JpQThJRVV1WTI5MWJuUTdJRVlyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4dVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaEZMQ0JHS1N3Z1JTNXViM0p0WVd4cGVtVmtJRDA5UFNBaE1DQW1KaUJPYkNodkxDQkZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUU4Z1BTQkdJQ29nVURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTF0VklDc2dUeUFySURCZElEMGdieTU0TENCclcxVWdLeUJQSUNzZ01WMGdQU0J2TG5rc0lHdGJWU0FySUU4Z0t5QXlYU0E5SUc4dWVpd2dhMXRWSUNzZ1R5QXJJRE5kSUQwZ01Dd2djQ0E5UFQwZ0lUQWdKaVlnS0c4dVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaEVMQ0JHS1N3Z1JDNXViM0p0WVd4cGVtVmtJRDA5UFNBaE1DQW1KaUJPYkNodkxDQkVLU3dnYTF0VklDc2dUeUFySURSZElEMGdieTU0TENCclcxVWdLeUJQSUNzZ05WMGdQU0J2TG5rc0lHdGJWU0FySUU4Z0t5QTJYU0E5SUc4dWVpd2dhMXRWSUNzZ1R5QXJJRGRkSUQwZ01DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjNWdWREb2diU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBkWEpsT2lCQ0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5wZW1VNklHNWxkeUJZS0V3c0lFa3BDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0J5TG5ObGRDaG9MQ0I0S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkaUE5SURBN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdjQ0E5SURBN0lIQWdQQ0JtTG14bGJtZDBhRHNnY0NzcktYWWdLejBnWmx0d1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHY2dQU0JvTG0xdmNuQm9WR0Z5WjJWMGMxSmxiR0YwYVhabElEOGdNU0E2SURFZ0xTQjJPd29nSUNBZ0lDQWdJQ0FnSUNCa0xtZGxkRlZ1YVdadmNtMXpLQ2t1YzJWMFZtRnNkV1VvY3l3Z0ltMXZjbkJvVkdGeVoyVjBRbUZ6WlVsdVpteDFaVzVqWlNJc0lHY3BMQ0JrTG1kbGRGVnVhV1p2Y20xektDa3VjMlYwVm1Gc2RXVW9jeXdnSW0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5SXNJR1lwTENCa0xtZGxkRlZ1YVdadmNtMXpLQ2t1YzJWMFZtRnNkV1VvY3l3Z0ltMXZjbkJvVkdGeVoyVjBjMVJsZUhSMWNtVWlMQ0I0TG5SbGVIUjFjbVVzSUhRcExDQmtMbWRsZEZWdWFXWnZjbTF6S0NrdWMyVjBWbUZzZFdVb2N5d2dJbTF2Y25Cb1ZHRnlaMlYwYzFSbGVIUjFjbVZUYVhwbElpd2dlQzV6YVhwbEtUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JTQTlJR1lnUFQwOUlIWnZhV1FnTUNBL0lEQWdPaUJtTG14bGJtZDBhQ3dnZUNBOUlHNWJhQzVwWkYwN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNElEMDlQU0IyYjJsa0lEQWdmSHdnZUM1c1pXNW5kR2dnSVQwOUlHMHBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGdnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VTQTlJREE3SUhrZ1BDQnRPeUI1S3lzcGVGdDVYU0E5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVcyZ3VhV1JkSUQwZ2VEc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIa2dQU0F3T3lCNUlEd2diVHNnZVNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JpSUQwZ2VGdDVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0piTUYwZ1BTQjVMQ0JpV3pGZElEMGdabHQ1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCNExuTnZjblFvYVdjcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGtnUFNBd095QjVJRHdnT0RzZ2VTc3JLWGtnUENCdElDWW1JSGhiZVYxYk1WMGdQeUFvWVZ0NVhWc3dYU0E5SUhoYmVWMWJNRjBzSUdGYmVWMWJNVjBnUFNCNFczbGRXekZkS1NBNklDaGhXM2xkV3pCZElEMGdUblZ0WW1WeUxrMUJXRjlUUVVaRlgwbE9WRVZIUlZJc0lHRmJlVjFiTVYwZ1BTQXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lTNXpiM0owS0c1bktUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIWWdQU0JvTG0xdmNuQm9RWFIwY21saWRYUmxjeTV3YjNOcGRHbHZiaXdnWnlBOUlHZ3ViVzl5Y0doQmRIUnlhV0oxZEdWekxtNXZjbTFoYkN3Z2NDQTlJREE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2VTQTlJREE3SUhrZ1BDQTRPeUI1S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0lnUFNCaFczbGRMQ0JCSUQwZ1lsc3dYU3dnVENBOUlHSmJNVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JCSUNFOVBTQk9kVzFpWlhJdVRVRllYMU5CUmtWZlNVNVVSVWRGVWlBbUppQk1JRDhnS0hZZ0ppWWdhQzVuWlhSQmRIUnlhV0oxZEdVb0ltMXZjbkJvVkdGeVoyVjBJaUFySUhrcElDRTlQU0IyVzBGZElDWW1JR2d1YzJWMFFYUjBjbWxpZFhSbEtDSnRiM0p3YUZSaGNtZGxkQ0lnS3lCNUxDQjJXMEZkS1N3Z1p5QW1KaUJvTG1kbGRFRjBkSEpwWW5WMFpTZ2liVzl5Y0doT2IzSnRZV3dpSUNzZ2VTa2dJVDA5SUdkYlFWMGdKaVlnYUM1elpYUkJkSFJ5YVdKMWRHVW9JbTF2Y25Cb1RtOXliV0ZzSWlBcklIa3NJR2RiUVYwcExDQnBXM2xkSUQwZ1RDd2djQ0FyUFNCTUtTQTZJQ2gySUNZbUlHZ3VhR0Z6UVhSMGNtbGlkWFJsS0NKdGIzSndhRlJoY21kbGRDSWdLeUI1S1NBOVBUMGdJVEFnSmlZZ2FDNWtaV3hsZEdWQmRIUnlhV0oxZEdVb0ltMXZjbkJvVkdGeVoyVjBJaUFySUhrcExDQm5JQ1ltSUdndWFHRnpRWFIwY21saWRYUmxLQ0p0YjNKd2FFNXZjbTFoYkNJZ0t5QjVLU0E5UFQwZ0lUQWdKaVlnYUM1a1pXeGxkR1ZCZEhSeWFXSjFkR1VvSW0xdmNuQm9UbTl5YldGc0lpQXJJSGtwTENCcFczbGRJRDBnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCb0xtMXZjbkJvVkdGeVoyVjBjMUpsYkdGMGFYWmxJRDhnTVNBNklERWdMU0J3T3dvZ0lDQWdJQ0FnSUNBZ0lDQmtMbWRsZEZWdWFXWnZjbTF6S0NrdWMyVjBWbUZzZFdVb2N5d2dJbTF2Y25Cb1ZHRnlaMlYwUW1GelpVbHVabXgxWlc1alpTSXNJRjhwTENCa0xtZGxkRlZ1YVdadmNtMXpLQ2t1YzJWMFZtRnNkV1VvY3l3Z0ltMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxjeUlzSUdrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdkWEJrWVhSbE9pQnNDaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJSE5uS0hNc0lHVXNJSFFzSUc0cElIc0tJQ0FnSUd4bGRDQnBJRDBnYm1WM0lGZGxZV3ROWVhBN0NpQWdJQ0JtZFc1amRHbHZiaUJ5S0d3cElIc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlHNHVjbVZ1WkdWeUxtWnlZVzFsTENCb0lEMGdiQzVuWlc5dFpYUnllU3dnZFNBOUlHVXVaMlYwS0d3c0lHZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnBMbWRsZENoMUtTQWhQVDBnWXlBbUppQW9aUzUxY0dSaGRHVW9kU2tzSUdrdWMyVjBLSFVzSUdNcEtTd2diQzVwYzBsdWMzUmhibU5sWkUxbGMyZ2dKaVlnS0d3dWFHRnpSWFpsYm5STWFYTjBaVzVsY2lnaVpHbHpjRzl6WlNJc0lHRXBJRDA5UFNBaE1TQW1KaUJzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW1ScGMzQnZjMlVpTENCaEtTd2dkQzUxY0dSaGRHVW9iQzVwYm5OMFlXNWpaVTFoZEhKcGVDd2dNelE1TmpJcExDQnNMbWx1YzNSaGJtTmxRMjlzYjNJZ0lUMDlJRzUxYkd3Z0ppWWdkQzUxY0dSaGRHVW9iQzVwYm5OMFlXNWpaVU52Ykc5eUxDQXpORGsyTWlrcExDQjFPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYnlncElIc0tJQ0FnSUNBZ0lDQnBJRDBnYm1WM0lGZGxZV3ROWVhBN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmhLR3dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUd3dWRHRnlaMlYwT3dvZ0lDQWdJQ0FnSUdNdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2laR2x6Y0c5elpTSXNJR0VwTENCMExuSmxiVzkyWlNoakxtbHVjM1JoYm1ObFRXRjBjbWw0S1N3Z1l5NXBibk4wWVc1alpVTnZiRzl5SUNFOVBTQnVkV3hzSUNZbUlIUXVjbVZ0YjNabEtHTXVhVzV6ZEdGdVkyVkRiMnh2Y2lrN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lIVndaR0YwWlRvZ2Npd0tJQ0FnSUNBZ0lDQmthWE53YjNObE9pQnZDaUFnSUNCOU93cDlDblpoY2lCdFlTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ2IzUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1MWJHd3NJSFFnUFNBeExDQnVJRDBnTVN3Z2FTQTlJREVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLRzUxYkd3cE93b2dJQ0FnSUNBZ0lIUm9hWE11YVcxaFoyVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb09pQnBDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NXRZV2RHYVd4MFpYSWdQU0J5ZEN3Z2RHaHBjeTV0YVc1R2FXeDBaWElnUFNCeWRDd2dkR2hwY3k1M2NtRndVaUE5SUhaMExDQjBhR2x6TG1kbGJtVnlZWFJsVFdsd2JXRndjeUE5SUNFeExDQjBhR2x6TG1ac2FYQlpJRDBnSVRFc0lIUm9hWE11ZFc1d1lXTnJRV3hwWjI1dFpXNTBJRDBnTVRzS0lDQWdJSDBLZlRzS2JXRXVjSEp2ZEc5MGVYQmxMbWx6UkdGMFlWUmxlSFIxY21VelJDQTlJQ0V3T3dwMllYSWdiR2dnUFNCdVpYY2diM1FzSUdOb0lEMGdibVYzSUZGekxDQm9hQ0E5SUc1bGR5QnRZU3dnZFdnZ1BTQnVaWGNnYTJrc0lFSnNJRDBnVzEwc0lIcHNJRDBnVzEwc0lGVnNJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2d4Tmlrc0lFOXNJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2c1S1N3Z1NHd2dQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLRFFwT3dwbWRXNWpkR2x2YmlCV2FTaHpMQ0JsTENCMEtTQjdDaUFnSUNCc1pYUWdiaUE5SUhOYk1GMDdDaUFnSUNCcFppQW9iaUE4UFNBd0lIeDhJRzRnUGlBd0tTQnlaWFIxY200Z2N6c0tJQ0FnSUd4bGRDQnBJRDBnWlNBcUlIUXNJSElnUFNCQ2JGdHBYVHNLSUNBZ0lHbG1JQ2h5SUQwOVBTQjJiMmxrSURBZ0ppWWdLSElnUFNCdVpYY2dSbXh2WVhRek1rRnljbUY1S0drcExDQkNiRnRwWFNBOUlISXBMQ0JsSUNFOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnYmk1MGIwRnljbUY1S0hJc0lEQXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUE5SURFc0lHRWdQU0F3T3lCdklDRTlQU0JsT3lBcksyOHBZU0FyUFNCMExDQnpXMjlkTG5SdlFYSnlZWGtvY2l3Z1lTazdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdjanNLZlFwbWRXNWpkR2x2YmlCTmRDaHpMQ0JsS1NCN0NpQWdJQ0JwWmlBb2N5NXNaVzVuZEdnZ0lUMDlJR1V1YkdWdVozUm9LU0J5WlhSMWNtNGdJVEU3Q2lBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdjeTVzWlc1bmRHZzdJSFFnUENCdU95QjBLeXNwYVdZZ0tITmJkRjBnSVQwOUlHVmJkRjBwSUhKbGRIVnliaUFoTVRzS0lDQWdJSEpsZEhWeWJpQWhNRHNLZlFwbWRXNWpkR2x2YmlCZmRDaHpMQ0JsS1NCN0NpQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnWlM1c1pXNW5kR2c3SUhRZ1BDQnVPeUIwS3lzcGMxdDBYU0E5SUdWYmRGMDdDbjBLWm5WdVkzUnBiMjRnUzNNb2N5d2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjZiRnRsWFRzS0lDQWdJSFFnUFQwOUlIWnZhV1FnTUNBbUppQW9kQ0E5SUc1bGR5QkpiblF6TWtGeWNtRjVLR1VwTENCNmJGdGxYU0E5SUhRcE93b2dJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Ec2diaUFoUFQwZ1pUc2dLeXR1S1hSYmJsMGdQU0J6TG1Gc2JHOWpZWFJsVkdWNGRIVnlaVlZ1YVhRb0tUc0tJQ0FnSUhKbGRIVnliaUIwT3dwOUNtWjFibU4wYVc5dUlHOW5LSE1zSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWpZV05vWlRzS0lDQWdJSFJiTUYwZ0lUMDlJR1VnSmlZZ0tITXVkVzVwWm05eWJURm1LSFJvYVhNdVlXUmtjaXdnWlNrc0lIUmJNRjBnUFNCbEtUc0tmUXBtZFc1amRHbHZiaUJoWnloekxDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJGamFHVTdDaUFnSUNCcFppQW9aUzU0SUNFOVBTQjJiMmxrSURBcElDaDBXekJkSUNFOVBTQmxMbmdnZkh3Z2RGc3hYU0FoUFQwZ1pTNTVLU0FtSmlBb2N5NTFibWxtYjNKdE1tWW9kR2hwY3k1aFpHUnlMQ0JsTG5nc0lHVXVlU2tzSUhSYk1GMGdQU0JsTG5nc0lIUmJNVjBnUFNCbExua3BPd29nSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tFMTBLSFFzSUdVcEtTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2N5NTFibWxtYjNKdE1tWjJLSFJvYVhNdVlXUmtjaXdnWlNrc0lGOTBLSFFzSUdVcE93b2dJQ0FnZlFwOUNtWjFibU4wYVc5dUlHeG5LSE1zSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NWpZV05vWlRzS0lDQWdJR2xtSUNobExuZ2dJVDA5SUhadmFXUWdNQ2tnS0hSYk1GMGdJVDA5SUdVdWVDQjhmQ0IwV3pGZElDRTlQU0JsTG5rZ2ZId2dkRnN5WFNBaFBUMGdaUzU2S1NBbUppQW9jeTUxYm1sbWIzSnRNMllvZEdocGN5NWhaR1J5TENCbExuZ3NJR1V1ZVN3Z1pTNTZLU3dnZEZzd1hTQTlJR1V1ZUN3Z2RGc3hYU0E5SUdVdWVTd2dkRnN5WFNBOUlHVXVlaWs3Q2lBZ0lDQmxiSE5sSUdsbUlDaGxMbklnSVQwOUlIWnZhV1FnTUNrZ0tIUmJNRjBnSVQwOUlHVXVjaUI4ZkNCMFd6RmRJQ0U5UFNCbExtY2dmSHdnZEZzeVhTQWhQVDBnWlM1aUtTQW1KaUFvY3k1MWJtbG1iM0p0TTJZb2RHaHBjeTVoWkdSeUxDQmxMbklzSUdVdVp5d2daUzVpS1N3Z2RGc3dYU0E5SUdVdWNpd2dkRnN4WFNBOUlHVXVaeXdnZEZzeVhTQTlJR1V1WWlrN0NpQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQnBaaUFvVFhRb2RDd2daU2twSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0J6TG5WdWFXWnZjbTB6Wm5Zb2RHaHBjeTVoWkdSeUxDQmxLU3dnWDNRb2RDd2daU2s3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnWTJjb2N5d2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaFkyaGxPd29nSUNBZ2FXWWdLR1V1ZUNBaFBUMGdkbTlwWkNBd0tTQW9kRnN3WFNBaFBUMGdaUzU0SUh4OElIUmJNVjBnSVQwOUlHVXVlU0I4ZkNCMFd6SmRJQ0U5UFNCbExub2dmSHdnZEZzelhTQWhQVDBnWlM1M0tTQW1KaUFvY3k1MWJtbG1iM0p0TkdZb2RHaHBjeTVoWkdSeUxDQmxMbmdzSUdVdWVTd2daUzU2TENCbExuY3BMQ0IwV3pCZElEMGdaUzU0TENCMFd6RmRJRDBnWlM1NUxDQjBXekpkSUQwZ1pTNTZMQ0IwV3pOZElEMGdaUzUzS1RzS0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hOZENoMExDQmxLU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJSE11ZFc1cFptOXliVFJtZGloMGFHbHpMbUZrWkhJc0lHVXBMQ0JmZENoMExDQmxLVHNLSUNBZ0lIMEtmUXBtZFc1amRHbHZiaUJvWnloekxDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlIUm9hWE11WTJGamFHVXNJRzRnUFNCbExtVnNaVzFsYm5Sek93b2dJQ0FnYVdZZ0tHNGdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaE5kQ2gwTENCbEtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lITXVkVzVwWm05eWJVMWhkSEpwZURKbWRpaDBhR2x6TG1Ga1pISXNJQ0V4TENCbEtTd2dYM1FvZEN3Z1pTazdDaUFnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUdsbUlDaE5kQ2gwTENCdUtTa2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lFaHNMbk5sZENodUtTd2djeTUxYm1sbWIzSnRUV0YwY21sNE1tWjJLSFJvYVhNdVlXUmtjaXdnSVRFc0lFaHNLU3dnWDNRb2RDd2diaWs3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnZFdjb2N5d2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaFkyaGxMQ0J1SUQwZ1pTNWxiR1Z0Wlc1MGN6c0tJQ0FnSUdsbUlDaHVJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNCcFppQW9UWFFvZEN3Z1pTa3BJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQnpMblZ1YVdadmNtMU5ZWFJ5YVhnelpuWW9kR2hwY3k1aFpHUnlMQ0FoTVN3Z1pTa3NJRjkwS0hRc0lHVXBPd29nSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCcFppQW9UWFFvZEN3Z2Jpa3BJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQlBiQzV6WlhRb2Jpa3NJSE11ZFc1cFptOXliVTFoZEhKcGVETm1kaWgwYUdsekxtRmtaSElzSUNFeExDQlBiQ2tzSUY5MEtIUXNJRzRwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUdSbktITXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdkR2hwY3k1allXTm9aU3dnYmlBOUlHVXVaV3hsYldWdWRITTdDaUFnSUNCcFppQW9iaUE5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ2FXWWdLRTEwS0hRc0lHVXBLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdjeTUxYm1sbWIzSnRUV0YwY21sNE5HWjJLSFJvYVhNdVlXUmtjaXdnSVRFc0lHVXBMQ0JmZENoMExDQmxLVHNLSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2FXWWdLRTEwS0hRc0lHNHBLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdWV3d1YzJWMEtHNHBMQ0J6TG5WdWFXWnZjbTFOWVhSeWFYZzBabllvZEdocGN5NWhaR1J5TENBaE1Td2dWV3dwTENCZmRDaDBMQ0J1S1RzS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCbVp5aHpMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVkyRmphR1U3Q2lBZ0lDQjBXekJkSUNFOVBTQmxJQ1ltSUNoekxuVnVhV1p2Y20weGFTaDBhR2x6TG1Ga1pISXNJR1VwTENCMFd6QmRJRDBnWlNrN0NuMEtablZ1WTNScGIyNGdjR2NvY3l3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5oWTJobE93b2dJQ0FnVFhRb2RDd2daU2tnZkh3Z0tITXVkVzVwWm05eWJUSnBkaWgwYUdsekxtRmtaSElzSUdVcExDQmZkQ2gwTENCbEtTazdDbjBLWm5WdVkzUnBiMjRnYldjb2N5d2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaFkyaGxPd29nSUNBZ1RYUW9kQ3dnWlNrZ2ZId2dLSE11ZFc1cFptOXliVE5wZGloMGFHbHpMbUZrWkhJc0lHVXBMQ0JmZENoMExDQmxLU2s3Q24wS1puVnVZM1JwYjI0Z1oyY29jeXdnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0IwYUdsekxtTmhZMmhsT3dvZ0lDQWdUWFFvZEN3Z1pTa2dmSHdnS0hNdWRXNXBabTl5YlRScGRpaDBhR2x6TG1Ga1pISXNJR1VwTENCZmRDaDBMQ0JsS1NrN0NuMEtablZ1WTNScGIyNGdlR2NvY3l3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5oWTJobE93b2dJQ0FnZEZzd1hTQWhQVDBnWlNBbUppQW9jeTUxYm1sbWIzSnRNWFZwS0hSb2FYTXVZV1JrY2l3Z1pTa3NJSFJiTUYwZ1BTQmxLVHNLZlFwbWRXNWpkR2x2YmlCNVp5aHpMQ0JsS1NCN0NpQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVkyRmphR1U3Q2lBZ0lDQk5kQ2gwTENCbEtTQjhmQ0FvY3k1MWJtbG1iM0p0TW5WcGRpaDBhR2x6TG1Ga1pISXNJR1VwTENCZmRDaDBMQ0JsS1NrN0NuMEtablZ1WTNScGIyNGdkbWNvY3l3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbU5oWTJobE93b2dJQ0FnVFhRb2RDd2daU2tnZkh3Z0tITXVkVzVwWm05eWJUTjFhWFlvZEdocGN5NWhaR1J5TENCbEtTd2dYM1FvZEN3Z1pTa3BPd3A5Q21aMWJtTjBhVzl1SUY5bktITXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdkR2hwY3k1allXTm9aVHNLSUNBZ0lFMTBLSFFzSUdVcElIeDhJQ2h6TG5WdWFXWnZjbTAwZFdsMktIUm9hWE11WVdSa2Npd2daU2tzSUY5MEtIUXNJR1VwS1RzS2ZRcG1kVzVqZEdsdmJpQk5aeWh6TENCbExDQjBLU0I3Q2lBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WTJGamFHVXNJR2tnUFNCMExtRnNiRzlqWVhSbFZHVjRkSFZ5WlZWdWFYUW9LVHNLSUNBZ0lHNWJNRjBnSVQwOUlHa2dKaVlnS0hNdWRXNXBabTl5YlRGcEtIUm9hWE11WVdSa2Npd2dhU2tzSUc1Yk1GMGdQU0JwS1N3Z2RDNXpZV1psVTJWMFZHVjRkSFZ5WlRKRUtHVWdmSHdnYkdnc0lHa3BPd3A5Q21aMWJtTjBhVzl1SUdKbktITXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWpZV05vWlN3Z2FTQTlJSFF1WVd4c2IyTmhkR1ZVWlhoMGRYSmxWVzVwZENncE93b2dJQ0FnYmxzd1hTQWhQVDBnYVNBbUppQW9jeTUxYm1sbWIzSnRNV2tvZEdocGN5NWhaR1J5TENCcEtTd2dibHN3WFNBOUlHa3BMQ0IwTG5ObGRGUmxlSFIxY21VelJDaGxJSHg4SUdob0xDQnBLVHNLZlFwbWRXNWpkR2x2YmlCM1p5aHpMQ0JsTENCMEtTQjdDaUFnSUNCc1pYUWdiaUE5SUhSb2FYTXVZMkZqYUdVc0lHa2dQU0IwTG1Gc2JHOWpZWFJsVkdWNGRIVnlaVlZ1YVhRb0tUc0tJQ0FnSUc1Yk1GMGdJVDA5SUdrZ0ppWWdLSE11ZFc1cFptOXliVEZwS0hSb2FYTXVZV1JrY2l3Z2FTa3NJRzViTUYwZ1BTQnBLU3dnZEM1ellXWmxVMlYwVkdWNGRIVnlaVU4xWW1Vb1pTQjhmQ0IxYUN3Z2FTazdDbjBLWm5WdVkzUnBiMjRnVTJjb2N5d2daU3dnZENrZ2V3b2dJQ0FnYkdWMElHNGdQU0IwYUdsekxtTmhZMmhsTENCcElEMGdkQzVoYkd4dlkyRjBaVlJsZUhSMWNtVlZibWwwS0NrN0NpQWdJQ0J1V3pCZElDRTlQU0JwSUNZbUlDaHpMblZ1YVdadmNtMHhhU2gwYUdsekxtRmtaSElzSUdrcExDQnVXekJkSUQwZ2FTa3NJSFF1YzJWMFZHVjRkSFZ5WlRKRVFYSnlZWGtvWlNCOGZDQmphQ3dnYVNrN0NuMEtablZ1WTNScGIyNGdWR2NvY3lrZ2V3b2dJQ0FnYzNkcGRHTm9LSE1wZXdvZ0lDQWdJQ0FnSUdOaGMyVWdOVEV5TmpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOW5Pd29nSUNBZ0lDQWdJR05oYzJVZ016VTJOalE2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaFp6c0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qWTFPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYkdjN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZMk5qb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05uT3dvZ0lDQWdJQ0FnSUdOaGMyVWdNelUyTnpRNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm9aenNLSUNBZ0lDQWdJQ0JqWVhObElETTFOamMxT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXYzdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTNOam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSbk93b2dJQ0FnSUNBZ0lHTmhjMlVnTlRFeU5Eb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qY3dPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1jN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZMk56b0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qY3hPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0djN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZMk9Eb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qY3lPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYldjN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZMk9Ub0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qY3pPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWjJjN0NpQWdJQ0FnSUNBZ1kyRnpaU0ExTVRJMU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlR2M3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOakk1TkRvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIbG5Pd29nSUNBZ0lDQWdJR05oYzJVZ016WXlPVFU2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMlp6c0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk1qazJPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDJjN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZM09Eb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk1UazRPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXlPVGc2Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOak13TmpvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpneU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV2M3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkzT1RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTWprNU9nb2dJQ0FnSUNBZ0lHTmhjMlVnTXpZek1EYzZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJpWnpzS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpnd09nb2dJQ0FnSUNBZ0lHTmhjMlVnTXpZek1EQTZDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qTXdPRG9LSUNBZ0lDQWdJQ0JqWVhObElETTJNamt6T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2QyYzdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qSTRPVG9LSUNBZ0lDQWdJQ0JqWVhObElETTJNekF6T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell6TVRFNkNpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpJNU1qb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRk5uT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUVWbktITXNJR1VwSUhzS0lDQWdJSE11ZFc1cFptOXliVEZtZGloMGFHbHpMbUZrWkhJc0lHVXBPd3A5Q21aMWJtTjBhVzl1SUVGbktITXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdWbWtvWlN3Z2RHaHBjeTV6YVhwbExDQXlLVHNLSUNBZ0lITXVkVzVwWm05eWJUSm1kaWgwYUdsekxtRmtaSElzSUhRcE93cDlDbVoxYm1OMGFXOXVJRU5uS0hNc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ1Zta29aU3dnZEdocGN5NXphWHBsTENBektUc0tJQ0FnSUhNdWRXNXBabTl5YlRObWRpaDBhR2x6TG1Ga1pISXNJSFFwT3dwOUNtWjFibU4wYVc5dUlFeG5LSE1zSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnVm1rb1pTd2dkR2hwY3k1emFYcGxMQ0EwS1RzS0lDQWdJSE11ZFc1cFptOXliVFJtZGloMGFHbHpMbUZrWkhJc0lIUXBPd3A5Q21aMWJtTjBhVzl1SUZKbktITXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdWbWtvWlN3Z2RHaHBjeTV6YVhwbExDQTBLVHNLSUNBZ0lITXVkVzVwWm05eWJVMWhkSEpwZURKbWRpaDBhR2x6TG1Ga1pISXNJQ0V4TENCMEtUc0tmUXBtZFc1amRHbHZiaUJRWnloekxDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlGWnBLR1VzSUhSb2FYTXVjMmw2WlN3Z09TazdDaUFnSUNCekxuVnVhV1p2Y20xTllYUnlhWGd6Wm5Zb2RHaHBjeTVoWkdSeUxDQWhNU3dnZENrN0NuMEtablZ1WTNScGIyNGdTV2NvY3l3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCV2FTaGxMQ0IwYUdsekxuTnBlbVVzSURFMktUc0tJQ0FnSUhNdWRXNXBabTl5YlUxaGRISnBlRFJtZGloMGFHbHpMbUZrWkhJc0lDRXhMQ0IwS1RzS2ZRcG1kVzVqZEdsdmJpQkVaeWh6TENCbEtTQjdDaUFnSUNCekxuVnVhV1p2Y20weGFYWW9kR2hwY3k1aFpHUnlMQ0JsS1RzS2ZRcG1kVzVqZEdsdmJpQkdaeWh6TENCbEtTQjdDaUFnSUNCekxuVnVhV1p2Y20weWFYWW9kR2hwY3k1aFpHUnlMQ0JsS1RzS2ZRcG1kVzVqZEdsdmJpQk9aeWh6TENCbEtTQjdDaUFnSUNCekxuVnVhV1p2Y20wemFYWW9kR2hwY3k1aFpHUnlMQ0JsS1RzS2ZRcG1kVzVqZEdsdmJpQkNaeWh6TENCbEtTQjdDaUFnSUNCekxuVnVhV1p2Y20wMGFYWW9kR2hwY3k1aFpHUnlMQ0JsS1RzS2ZRcG1kVzVqZEdsdmJpQjZaeWh6TENCbEtTQjdDaUFnSUNCekxuVnVhV1p2Y20weGRXbDJLSFJvYVhNdVlXUmtjaXdnWlNrN0NuMEtablZ1WTNScGIyNGdWV2NvY3l3Z1pTa2dld29nSUNBZ2N5NTFibWxtYjNKdE1uVnBkaWgwYUdsekxtRmtaSElzSUdVcE93cDlDbVoxYm1OMGFXOXVJRTluS0hNc0lHVXBJSHNLSUNBZ0lITXVkVzVwWm05eWJUTjFhWFlvZEdocGN5NWhaR1J5TENCbEtUc0tmUXBtZFc1amRHbHZiaUJJWnloekxDQmxLU0I3Q2lBZ0lDQnpMblZ1YVdadmNtMDBkV2wyS0hSb2FYTXVZV1JrY2l3Z1pTazdDbjBLWm5WdVkzUnBiMjRnYTJjb2N5d2daU3dnZENrZ2V3b2dJQ0FnYkdWMElHNGdQU0JsTG14bGJtZDBhQ3dnYVNBOUlFdHpLSFFzSUc0cE93b2dJQ0FnY3k1MWJtbG1iM0p0TVdsMktIUm9hWE11WVdSa2Npd2dhU2s3Q2lBZ0lDQm1iM0lvYkdWMElISWdQU0F3T3lCeUlDRTlQU0J1T3lBckszSXBkQzV6WVdabFUyVjBWR1Y0ZEhWeVpUSkVLR1ZiY2wwZ2ZId2diR2dzSUdsYmNsMHBPd3A5Q21aMWJtTjBhVzl1SUVkbktITXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnWlM1c1pXNW5kR2dzSUdrZ1BTQkxjeWgwTENCdUtUc0tJQ0FnSUhNdWRXNXBabTl5YlRGcGRpaDBhR2x6TG1Ga1pISXNJR2twT3dvZ0lDQWdabTl5S0d4bGRDQnlJRDBnTURzZ2NpQWhQVDBnYmpzZ0t5dHlLWFF1YzJWMFZHVjRkSFZ5WlRORUtHVmJjbDBnZkh3Z2FHZ3NJR2xiY2wwcE93cDlDbVoxYm1OMGFXOXVJRlpuS0hNc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdaUzVzWlc1bmRHZ3NJR2tnUFNCTGN5aDBMQ0J1S1RzS0lDQWdJSE11ZFc1cFptOXliVEZwZGloMGFHbHpMbUZrWkhJc0lHa3BPd29nSUNBZ1ptOXlLR3hsZENCeUlEMGdNRHNnY2lBaFBUMGdianNnS3l0eUtYUXVjMkZtWlZObGRGUmxlSFIxY21WRGRXSmxLR1ZiY2wwZ2ZId2dkV2dzSUdsYmNsMHBPd3A5Q21aMWJtTjBhVzl1SUZkbktITXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnWlM1c1pXNW5kR2dzSUdrZ1BTQkxjeWgwTENCdUtUc0tJQ0FnSUhNdWRXNXBabTl5YlRGcGRpaDBhR2x6TG1Ga1pISXNJR2twT3dvZ0lDQWdabTl5S0d4bGRDQnlJRDBnTURzZ2NpQWhQVDBnYmpzZ0t5dHlLWFF1YzJWMFZHVjRkSFZ5WlRKRVFYSnlZWGtvWlZ0eVhTQjhmQ0JqYUN3Z2FWdHlYU2s3Q24wS1puVnVZM1JwYjI0Z2NXY29jeWtnZXdvZ0lDQWdjM2RwZEdOb0tITXBld29nSUNBZ0lDQWdJR05oYzJVZ05URXlOam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVWbk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpVMk5qUTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJCWnpzS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpZMU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdRMmM3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyTmpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFeG5Pd29nSUNBZ0lDQWdJR05oYzJVZ016VTJOelE2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCU1p6c0tJQ0FnSUNBZ0lDQmpZWE5sSURNMU5qYzFPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUdjN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TlRZM05qb0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRWxuT3dvZ0lDQWdJQ0FnSUdOaGMyVWdOVEV5TkRvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjd09nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSR2M3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyTnpvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjeE9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSbWM3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyT0RvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjeU9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUbWM3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkyT1RvS0lDQWdJQ0FnSUNCallYTmxJRE0xTmpjek9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdRbWM3Q2lBZ0lDQWdJQ0FnWTJGelpTQTFNVEkxT2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VtYzdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qSTVORG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZWbk93b2dJQ0FnSUNBZ0lHTmhjMlVnTXpZeU9UVTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJQWnpzS0lDQWdJQ0FnSUNCallYTmxJRE0yTWprMk9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdTR2M3Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOVFkzT0RvS0lDQWdJQ0FnSUNCallYTmxJRE0yTVRrNE9nb2dJQ0FnSUNBZ0lHTmhjMlVnTXpZeU9UZzZDaUFnSUNBZ0lDQWdZMkZ6WlNBek5qTXdOam9LSUNBZ0lDQWdJQ0JqWVhObElETTFOamd5T2dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2EyYzdDaUFnSUNBZ0lDQWdZMkZ6WlNBek5UWTNPVG9LSUNBZ0lDQWdJQ0JqWVhObElETTJNams1T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell6TURjNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkhaenNLSUNBZ0lDQWdJQ0JqWVhObElETTFOamd3T2dvZ0lDQWdJQ0FnSUdOaGMyVWdNell6TURBNkNpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpNd09Eb0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk1qa3pPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVm1jN0NpQWdJQ0FnSUNBZ1kyRnpaU0F6TmpJNE9Ub0tJQ0FnSUNBZ0lDQmpZWE5sSURNMk16QXpPZ29nSUNBZ0lDQWdJR05oYzJVZ016WXpNVEU2Q2lBZ0lDQWdJQ0FnWTJGelpTQXpOakk1TWpvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGZG5Pd29nSUNBZ2ZRcDlDbVoxYm1OMGFXOXVJRmhuS0hNc0lHVXNJSFFwSUhzS0lDQWdJSFJvYVhNdWFXUWdQU0J6TENCMGFHbHpMbUZrWkhJZ1BTQjBMQ0IwYUdsekxtTmhZMmhsSUQwZ1cxMHNJSFJvYVhNdWMyVjBWbUZzZFdVZ1BTQlVaeWhsTG5SNWNHVXBPd3A5Q21aMWJtTjBhVzl1SUdSb0tITXNJR1VzSUhRcElIc0tJQ0FnSUhSb2FYTXVhV1FnUFNCekxDQjBhR2x6TG1Ga1pISWdQU0IwTENCMGFHbHpMbU5oWTJobElEMGdXMTBzSUhSb2FYTXVjMmw2WlNBOUlHVXVjMmw2WlN3Z2RHaHBjeTV6WlhSV1lXeDFaU0E5SUhGbktHVXVkSGx3WlNrN0NuMEtaR2d1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaVU5oWTJobElEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1OaFkyaGxPd29nSUNBZ2N5QnBibk4wWVc1alpXOW1JRVpzYjJGME16SkJjbkpoZVNBbUppQmxMbXhsYm1kMGFDQWhQVDBnY3k1c1pXNW5kR2dnSmlZZ0tIUm9hWE11WTJGamFHVWdQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLSE11YkdWdVozUm9LU2tzSUY5MEtHVXNJSE1wT3dwOU93cG1kVzVqZEdsdmJpQm1hQ2h6S1NCN0NpQWdJQ0IwYUdsekxtbGtJRDBnY3l3Z2RHaHBjeTV6WlhFZ1BTQmJYU3dnZEdocGN5NXRZWEFnUFNCN2ZUc0tmUXBtYUM1d2NtOTBiM1I1Y0dVdWMyVjBWbUZzZFdVZ1BTQm1kVzVqZEdsdmJpaHpMQ0JsTENCMEtTQjdDaUFnSUNCc1pYUWdiaUE5SUhSb2FYTXVjMlZ4T3dvZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJRzR1YkdWdVozUm9PeUJwSUNFOVBTQnlPeUFySzJrcGV3b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2JsdHBYVHNLSUNBZ0lDQWdJQ0J2TG5ObGRGWmhiSFZsS0hNc0lHVmJieTVwWkYwc0lIUXBPd29nSUNBZ2ZRcDlPd3AyWVhJZ1YyOGdQU0F2S0Z4M0t5a29YRjBwUHloY1czeGNMaWsvTDJjN0NtWjFibU4wYVc5dUlHdHNLSE1zSUdVcElIc0tJQ0FnSUhNdWMyVnhMbkIxYzJnb1pTa3NJSE11YldGd1cyVXVhV1JkSUQwZ1pUc0tmUXBtZFc1amRHbHZiaUJLWnloekxDQmxMQ0IwS1NCN0NpQWdJQ0JzWlhRZ2JpQTlJSE11Ym1GdFpTd2dhU0E5SUc0dWJHVnVaM1JvT3dvZ0lDQWdabTl5S0ZkdkxteGhjM1JKYm1SbGVDQTlJREE3T3lsN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCWGJ5NWxlR1ZqS0c0cExDQnZJRDBnVjI4dWJHRnpkRWx1WkdWNExDQmhJRDBnY2xzeFhTd2diQ0E5SUhKYk1sMGdQVDA5SUNKZElpd2dZeUE5SUhKYk0xMDdDaUFnSUNBZ0lDQWdhV1lnS0d3Z0ppWWdLR0VnUFNCaElId2dNQ2tzSUdNZ1BUMDlJSFp2YVdRZ01DQjhmQ0JqSUQwOVBTQWlXeUlnSmlZZ2J5QXJJRElnUFQwOUlHa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2Eyd29kQ3dnWXlBOVBUMGdkbTlwWkNBd0lEOGdibVYzSUZobktHRXNJSE1zSUdVcElEb2dibVYzSUdSb0tHRXNJSE1zSUdVcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0IwTG0xaGNGdGhYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RTQTlQVDBnZG05cFpDQXdJQ1ltSUNoMUlEMGdibVYzSUdab0tHRXBMQ0JyYkNoMExDQjFLU2tzSUhRZ1BTQjFPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtmUXBtZFc1amRHbHZiaUJpYmloekxDQmxLU0I3Q2lBZ0lDQjBhR2x6TG5ObGNTQTlJRnRkTENCMGFHbHpMbTFoY0NBOUlIdDlPd29nSUNBZ2JHVjBJSFFnUFNCekxtZGxkRkJ5YjJkeVlXMVFZWEpoYldWMFpYSW9aU3dnTXpVM01UZ3BPd29nSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElIUTdJQ3NyYmlsN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCekxtZGxkRUZqZEdsMlpWVnVhV1p2Y20wb1pTd2diaWtzSUhJZ1BTQnpMbWRsZEZWdWFXWnZjbTFNYjJOaGRHbHZiaWhsTENCcExtNWhiV1VwT3dvZ0lDQWdJQ0FnSUVwbktHa3NJSElzSUhSb2FYTXBPd29nSUNBZ2ZRcDlDbUp1TG5CeWIzUnZkSGx3WlM1elpYUldZV3gxWlNBOUlHWjFibU4wYVc5dUtITXNJR1VzSUhRc0lHNHBJSHNLSUNBZ0lHeGxkQ0JwSUQwZ2RHaHBjeTV0WVhCYlpWMDdDaUFnSUNCcElDRTlQU0IyYjJsa0lEQWdKaVlnYVM1elpYUldZV3gxWlNoekxDQjBMQ0J1S1RzS2ZUc0tZbTR1Y0hKdmRHOTBlWEJsTG5ObGRFOXdkR2x2Ym1Gc0lEMGdablZ1WTNScGIyNG9jeXdnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCbFczUmRPd29nSUNBZ2JpQWhQVDBnZG05cFpDQXdJQ1ltSUhSb2FYTXVjMlYwVm1Gc2RXVW9jeXdnZEN3Z2JpazdDbjA3Q21KdUxuVndiRzloWkNBOUlHWjFibU4wYVc5dUtITXNJR1VzSUhRc0lHNHBJSHNLSUNBZ0lHWnZjaWhzWlhRZ2FTQTlJREFzSUhJZ1BTQmxMbXhsYm1kMGFEc2dhU0FoUFQwZ2Nqc2dLeXRwS1hzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUdWYmFWMHNJR0VnUFNCMFcyOHVhV1JkT3dvZ0lDQWdJQ0FnSUdFdWJtVmxaSE5WY0dSaGRHVWdJVDA5SUNFeElDWW1JRzh1YzJWMFZtRnNkV1VvY3l3Z1lTNTJZV3gxWlN3Z2JpazdDaUFnSUNCOUNuMDdDbUp1TG5ObGNWZHBkR2hXWVd4MVpTQTlJR1oxYm1OMGFXOXVLSE1zSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnVzEwN0NpQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnY3k1c1pXNW5kR2c3SUc0Z0lUMDlJR2s3SUNzcmJpbDdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQnpXMjVkT3dvZ0lDQWdJQ0FnSUhJdWFXUWdhVzRnWlNBbUppQjBMbkIxYzJnb2NpazdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdkRHNLZlRzS1puVnVZM1JwYjI0Z1Iyd29jeXdnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCekxtTnlaV0YwWlZOb1lXUmxjaWhsS1RzS0lDQWdJSEpsZEhWeWJpQnpMbk5vWVdSbGNsTnZkWEpqWlNodUxDQjBLU3dnY3k1amIyMXdhV3hsVTJoaFpHVnlLRzRwTENCdU93cDlDblpoY2lCWlp5QTlJREE3Q21aMWJtTjBhVzl1SUZwbktITXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ2N5NXpjR3hwZENoZ0NtQXBPd29nSUNBZ1ptOXlLR3hsZENCMElEMGdNRHNnZENBOElHVXViR1Z1WjNSb095QjBLeXNwWlZ0MFhTQTlJSFFnS3lBeElDc2dJam9nSWlBcklHVmJkRjA3Q2lBZ0lDQnlaWFIxY200Z1pTNXFiMmx1S0dBS1lDazdDbjBLWm5WdVkzUnBiMjRnY0dnb2N5a2dld29nSUNBZ2MzZHBkR05vS0hNcGV3b2dJQ0FnSUNBZ0lHTmhjMlVnVG5RNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWlUR2x1WldGeUlpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDSW9JSFpoYkhWbElDa2lDaUFnSUNBZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ1kyRnpaU0JQYVRvS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDSnpVa2RDSWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNJb0lIWmhiSFZsSUNraUNpQWdJQ0FnSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhRY205bmNtRnRPaUJWYm5OMWNIQnZjblJsWkNCbGJtTnZaR2x1WnpvaUxDQnpLU3dnV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSWt4cGJtVmhjaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FpS0NCMllXeDFaU0FwSWdvZ0lDQWdJQ0FnSUNBZ0lDQmRPd29nSUNBZ2ZRcDlDbVoxYm1OMGFXOXVJRlpzS0hNc0lHVXNJSFFwSUhzS0lDQWdJR3hsZENCdUlEMGdjeTVuWlhSVGFHRmtaWEpRWVhKaGJXVjBaWElvWlN3Z016VTNNVE1wTENCcElEMGdjeTVuWlhSVGFHRmtaWEpKYm1adlRHOW5LR1VwTG5SeWFXMG9LVHNLSUNBZ0lISmxkSFZ5YmlCdUlDWW1JR2tnUFQwOUlDSWlJRDhnSWlJZ09pQjBMblJ2VlhCd1pYSkRZWE5sS0NrZ0t5QmdDZ3BnSUNzZ2FTQXJJR0FLQ21BZ0t5QmFaeWh6TG1kbGRGTm9ZV1JsY2xOdmRYSmpaU2hsS1NrN0NuMEtablZ1WTNScGIyNGdSRzRvY3l3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNCd2FDaGxLVHNLSUNBZ0lISmxkSFZ5YmlBaWRtVmpOQ0FpSUNzZ2N5QXJJQ0lvSUhabFl6UWdkbUZzZFdVZ0tTQjdJSEpsZEhWeWJpQWlJQ3NnZEZzd1hTQXJJQ0pVYjB4cGJtVmhjaUlnS3lCMFd6RmRJQ3NnSWpzZ2ZTSTdDbjBLWm5WdVkzUnBiMjRnSkdjb2N5d2daU2tnZXdvZ0lDQWdiR1YwSUhRZ1BTQndhQ2hsS1RzS0lDQWdJSEpsZEhWeWJpQWlkbVZqTkNBaUlDc2djeUFySUNJb0lIWmxZelFnZG1Gc2RXVWdLU0I3SUhKbGRIVnliaUJNYVc1bFlYSlVieUlnS3lCMFd6QmRJQ3NnZEZzeFhTQXJJQ0k3SUgwaU93cDlDbVoxYm1OMGFXOXVJR3BuS0hNc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwT3dvZ0lDQWdjM2RwZEdOb0tHVXBld29nSUNBZ0lDQWdJR05oYzJVZ1RuVTZDaUFnSUNBZ0lDQWdJQ0FnSUhRZ1BTQWlUR2x1WldGeUlqc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdZMkZ6WlNCQ2RUb0tJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlDSlNaV2x1YUdGeVpDSTdDaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJR05oYzJVZ2VuVTZDaUFnSUNBZ0lDQWdJQ0FnSUhRZ1BTQWlUM0IwYVcxcGVtVmtRMmx1Wlc5dUlqc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdZMkZ6WlNCVmRUb0tJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlDSkJRMFZUUm1sc2JXbGpJanNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnWTJGelpTQlBkVG9LSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJQ0pEZFhOMGIyMGlPd29nSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0JrWldaaGRXeDBPZ29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVUhKdlozSmhiVG9nVlc1emRYQndiM0owWldRZ2RHOXVaVTFoY0hCcGJtYzZJaXdnWlNrc0lIUWdQU0FpVEdsdVpXRnlJanNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUFpZG1Wak15QWlJQ3NnY3lBcklDSW9JSFpsWXpNZ1kyOXNiM0lnS1NCN0lISmxkSFZ5YmlBaUlDc2dkQ0FySUNKVWIyNWxUV0Z3Y0dsdVp5Z2dZMjlzYjNJZ0tUc2dmU0k3Q24wS1puVnVZM1JwYjI0Z1VXY29jeWtnZXdvZ0lDQWdjbVYwZFhKdUlGc0tJQ0FnSUNBZ0lDQnpMbVY0ZEdWdWMybHZia1JsY21sMllYUnBkbVZ6SUh4OElITXVaVzUyVFdGd1EzVmlaVlZXSUh4OElITXVZblZ0Y0UxaGNDQjhmQ0J6TG5SaGJtZGxiblJUY0dGalpVNXZjbTFoYkUxaGNDQjhmQ0J6TG1Oc1pXRnlZMjloZEU1dmNtMWhiRTFoY0NCOGZDQnpMbVpzWVhSVGFHRmthVzVuSUh4OElITXVjMmhoWkdWeVNVUWdQVDA5SUNKd2FIbHphV05oYkNJZ1B5QWlJMlY0ZEdWdWMybHZiaUJIVEY5UFJWTmZjM1JoYm1SaGNtUmZaR1Z5YVhaaGRHbDJaWE1nT2lCbGJtRmliR1VpSURvZ0lpSXNDaUFnSUNBZ0lDQWdLSE11WlhoMFpXNXphVzl1Um5KaFowUmxjSFJvSUh4OElITXViRzluWVhKcGRHaHRhV05FWlhCMGFFSjFabVpsY2lrZ0ppWWdjeTV5Wlc1a1pYSmxja1Y0ZEdWdWMybHZia1p5WVdkRVpYQjBhQ0EvSUNJalpYaDBaVzV6YVc5dUlFZE1YMFZZVkY5bWNtRm5YMlJsY0hSb0lEb2daVzVoWW14bElpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhNdVpYaDBaVzV6YVc5dVJISmhkMEoxWm1abGNuTWdKaVlnY3k1eVpXNWtaWEpsY2tWNGRHVnVjMmx2YmtSeVlYZENkV1ptWlhKeklEOGdJaU5sZUhSbGJuTnBiMjRnUjB4ZlJWaFVYMlJ5WVhkZlluVm1abVZ5Y3lBNklISmxjWFZwY21VaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnS0hNdVpYaDBaVzV6YVc5dVUyaGhaR1Z5VkdWNGRIVnlaVXhQUkNCOGZDQnpMbVZ1ZGsxaGNDQjhmQ0J6TG5SeVlXNXpiV2x6YzJsdmJpa2dKaVlnY3k1eVpXNWtaWEpsY2tWNGRHVnVjMmx2YmxOb1lXUmxjbFJsZUhSMWNtVk1iMlFnUHlBaUkyVjRkR1Z1YzJsdmJpQkhURjlGV0ZSZmMyaGhaR1Z5WDNSbGVIUjFjbVZmYkc5a0lEb2daVzVoWW14bElpQTZJQ0lpQ2lBZ0lDQmRMbVpwYkhSbGNpaHljaWt1YW05cGJpaGdDbUFwT3dwOUNtWjFibU4wYVc5dUlFdG5LSE1wSUhzS0lDQWdJR3hsZENCbElEMGdXMTA3Q2lBZ0lDQm1iM0lvYkdWMElIUWdhVzRnY3lsN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCelczUmRPd29nSUNBZ0lDQWdJRzRnSVQwOUlDRXhJQ1ltSUdVdWNIVnphQ2dpSTJSbFptbHVaU0FpSUNzZ2RDQXJJQ0lnSWlBcklHNHBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJR1V1YW05cGJpaGdDbUFwT3dwOUNtWjFibU4wYVc5dUlHVjRLSE1zSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnZTMwc0lHNGdQU0J6TG1kbGRGQnliMmR5WVcxUVlYSmhiV1YwWlhJb1pTd2dNelUzTWpFcE93b2dJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Ec2dhU0E4SUc0N0lHa3JLeWw3Q2lBZ0lDQWdJQ0FnYkdWMElISWdQU0J6TG1kbGRFRmpkR2wyWlVGMGRISnBZaWhsTENCcEtTd2dieUE5SUhJdWJtRnRaU3dnWVNBOUlERTdDaUFnSUNBZ0lDQWdjaTUwZVhCbElEMDlQU0F6TlRZM05DQW1KaUFvWVNBOUlESXBMQ0J5TG5SNWNHVWdQVDA5SURNMU5qYzFJQ1ltSUNoaElEMGdNeWtzSUhJdWRIbHdaU0E5UFQwZ016VTJOellnSmlZZ0tHRWdQU0EwS1N3Z2RGdHZYU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2NpNTBlWEJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5oZEdsdmJqb2djeTVuWlhSQmRIUnlhV0pNYjJOaGRHbHZiaWhsTENCdktTd0tJQ0FnSUNBZ0lDQWdJQ0FnYkc5allYUnBiMjVUYVhwbE9pQmhDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUIwT3dwOUNtWjFibU4wYVc5dUlISnlLSE1wSUhzS0lDQWdJSEpsZEhWeWJpQnpJQ0U5UFNBaUlqc0tmUXBtZFc1amRHbHZiaUJYYkNoekxDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z2N5NXlaWEJzWVdObEtDOU9WVTFmUkVsU1gweEpSMGhVVXk5bkxDQmxMbTUxYlVScGNreHBaMmgwY3lrdWNtVndiR0ZqWlNndlRsVk5YMU5RVDFSZlRFbEhTRlJUTDJjc0lHVXViblZ0VTNCdmRFeHBaMmgwY3lrdWNtVndiR0ZqWlNndlRsVk5YMUpGUTFSZlFWSkZRVjlNU1VkSVZGTXZaeXdnWlM1dWRXMVNaV04wUVhKbFlVeHBaMmgwY3lrdWNtVndiR0ZqWlNndlRsVk5YMUJQU1U1VVgweEpSMGhVVXk5bkxDQmxMbTUxYlZCdmFXNTBUR2xuYUhSektTNXlaWEJzWVdObEtDOU9WVTFmU0VWTlNWOU1TVWRJVkZNdlp5d2daUzV1ZFcxSVpXMXBUR2xuYUhSektTNXlaWEJzWVdObEtDOU9WVTFmUkVsU1gweEpSMGhVWDFOSVFVUlBWMU12Wnl3Z1pTNXVkVzFFYVhKTWFXZG9kRk5vWVdSdmQzTXBMbkpsY0d4aFkyVW9MMDVWVFY5VFVFOVVYMHhKUjBoVVgxTklRVVJQVjFNdlp5d2daUzV1ZFcxVGNHOTBUR2xuYUhSVGFHRmtiM2R6S1M1eVpYQnNZV05sS0M5T1ZVMWZVRTlKVGxSZlRFbEhTRlJmVTBoQlJFOVhVeTluTENCbExtNTFiVkJ2YVc1MFRHbG5hSFJUYUdGa2IzZHpLVHNLZlFwbWRXNWpkR2x2YmlCeGJDaHpMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdjeTV5WlhCc1lXTmxLQzlPVlUxZlEweEpVRkJKVGtkZlVFeEJUa1ZUTDJjc0lHVXViblZ0UTJ4cGNIQnBibWRRYkdGdVpYTXBMbkpsY0d4aFkyVW9MMVZPU1U5T1gwTk1TVkJRU1U1SFgxQk1RVTVGVXk5bkxDQmxMbTUxYlVOc2FYQndhVzVuVUd4aGJtVnpJQzBnWlM1dWRXMURiR2x3U1c1MFpYSnpaV04wYVc5dUtUc0tmUXAyWVhJZ2RIZ2dQU0F2WGxzZ1hIUmRLaU5wYm1Oc2RXUmxJQ3M4S0Z0Y2QxeGtMaTlkS3lrK0wyZHRPd3BtZFc1amRHbHZiaUJ5WVNoektTQjdDaUFnSUNCeVpYUjFjbTRnY3k1eVpYQnNZV05sS0hSNExDQnVlQ2s3Q24wS1puVnVZM1JwYjI0Z2JuZ29jeXdnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0JHWlZ0bFhUc0tJQ0FnSUdsbUlDaDBJRDA5UFNCMmIybGtJREFwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpUTJGdUlHNXZkQ0J5WlhOdmJIWmxJQ05wYm1Oc2RXUmxJRHdpSUNzZ1pTQXJJQ0krSWlrN0NpQWdJQ0J5WlhSMWNtNGdjbUVvZENrN0NuMEtkbUZ5SUdsNElEMGdMeU53Y21GbmJXRWdkVzV5YjJ4c1gyeHZiM0JiWEhOZEt6OW1iM0lnWENnZ2FXNTBJR2tnWEQwZ0tGeGtLeWxjT3lCcElEd2dLRnhrS3lsY095QnBJRndyWENzZ1hDa2dYSHNvVzF4elhGTmRLejhwS0Q4OVhIMHBYSDB2Wnl3Z2NuZ2dQU0F2STNCeVlXZHRZU0IxYm5KdmJHeGZiRzl2Y0Y5emRHRnlkRnh6SzJadmNseHpLbHdvWEhNcWFXNTBYSE1yYVZ4ektqMWNjeW9vWEdRcktWeHpLanRjY3lwcFhITXFQRnh6S2loY1pDc3BYSE1xTzF4ekttbGNjeXBjSzF3clhITXFYQ2xjY3lwN0tGdGNjMXhUWFNzL0tYMWNjeXNqY0hKaFoyMWhJSFZ1Y205c2JGOXNiMjl3WDJWdVpDOW5Pd3BtZFc1amRHbHZiaUJZYkNoektTQjdDaUFnSUNCeVpYUjFjbTRnY3k1eVpYQnNZV05sS0hKNExDQnRhQ2t1Y21Wd2JHRmpaU2hwZUN3Z2MzZ3BPd3A5Q21aMWJtTjBhVzl1SUhONEtITXNJR1VzSUhRc0lHNHBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbGRsWWtkTVVISnZaM0poYlRvZ0kzQnlZV2R0WVNCMWJuSnZiR3hmYkc5dmNDQnphR0ZrWlhJZ2MzbHVkR0Y0SUdseklHUmxjSEpsWTJGMFpXUXVJRkJzWldGelpTQjFjMlVnSTNCeVlXZHRZU0IxYm5KdmJHeGZiRzl2Y0Y5emRHRnlkQ0J6ZVc1MFlYZ2dhVzV6ZEdWaFpDNGlLU3dnYldnb2N5d2daU3dnZEN3Z2JpazdDbjBLWm5WdVkzUnBiMjRnYldnb2N5d2daU3dnZEN3Z2Jpa2dld29nSUNBZ2JHVjBJR2tnUFNBaUlqc0tJQ0FnSUdadmNpaHNaWFFnY2lBOUlIQmhjbk5sU1c1MEtHVXBPeUJ5SUR3Z2NHRnljMlZKYm5Rb2RDazdJSElyS3lscElDczlJRzR1Y21Wd2JHRmpaU2d2WEZ0Y2N5cHBYSE1xWEYwdlp5d2dJbHNnSWlBcklISWdLeUFpSUYwaUtTNXlaWEJzWVdObEtDOVZUbEpQVEV4RlJGOU1UMDlRWDBsT1JFVllMMmNzSUhJcE93b2dJQ0FnY21WMGRYSnVJR2s3Q24wS1puVnVZM1JwYjI0Z1Ntd29jeWtnZXdvZ0lDQWdiR1YwSUdVZ1BTQWljSEpsWTJsemFXOXVJQ0lnS3lCekxuQnlaV05wYzJsdmJpQXJJR0FnWm14dllYUTdDbkJ5WldOcGMybHZiaUJnSUNzZ2N5NXdjbVZqYVhOcGIyNGdLeUFpSUdsdWREc2lPd29nSUNBZ2NtVjBkWEp1SUhNdWNISmxZMmx6YVc5dUlEMDlQU0FpYUdsbmFIQWlJRDhnWlNBclBTQmdDaU5rWldacGJtVWdTRWxIU0Y5UVVrVkRTVk5KVDA1Z0lEb2djeTV3Y21WamFYTnBiMjRnUFQwOUlDSnRaV1JwZFcxd0lpQS9JR1VnS3owZ1lBb2paR1ZtYVc1bElFMUZSRWxWVFY5UVVrVkRTVk5KVDA1Z0lEb2djeTV3Y21WamFYTnBiMjRnUFQwOUlDSnNiM2R3SWlBbUppQW9aU0FyUFNCZ0NpTmtaV1pwYm1VZ1RFOVhYMUJTUlVOSlUwbFBUbUFwTENCbE93cDlDbVoxYm1OMGFXOXVJRzk0S0hNcElIc0tJQ0FnSUd4bGRDQmxJRDBnSWxOSVFVUlBWMDFCVUY5VVdWQkZYMEpCVTBsRElqc0tJQ0FnSUhKbGRIVnliaUJ6TG5Ob1lXUnZkMDFoY0ZSNWNHVWdQVDA5SUVoaklEOGdaU0E5SUNKVFNFRkVUMWROUVZCZlZGbFFSVjlRUTBZaUlEb2djeTV6YUdGa2IzZE5ZWEJVZVhCbElEMDlQU0JtZFNBL0lHVWdQU0FpVTBoQlJFOVhUVUZRWDFSWlVFVmZVRU5HWDFOUFJsUWlJRG9nY3k1emFHRmtiM2ROWVhCVWVYQmxJRDA5UFNCcGNpQW1KaUFvWlNBOUlDSlRTRUZFVDFkTlFWQmZWRmxRUlY5V1UwMGlLU3dnWlRzS2ZRcG1kVzVqZEdsdmJpQmhlQ2h6S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJQ0pGVGxaTlFWQmZWRmxRUlY5RFZVSkZJanNLSUNBZ0lHbG1JQ2h6TG1WdWRrMWhjQ2tnYzNkcGRHTm9LSE11Wlc1MlRXRndUVzlrWlNsN0NpQWdJQ0FnSUNBZ1kyRnpaU0JDYVRvS0lDQWdJQ0FnSUNCallYTmxJSHBwT2dvZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnSWtWT1ZrMUJVRjlVV1ZCRlgwTlZRa1VpT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCallYTmxJRkJ5T2dvZ0lDQWdJQ0FnSUdOaGMyVWdWM002Q2lBZ0lDQWdJQ0FnSUNBZ0lHVWdQU0FpUlU1V1RVRlFYMVJaVUVWZlExVkNSVjlWVmlJN0NpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlHVTdDbjBLWm5WdVkzUnBiMjRnYkhnb2N5a2dld29nSUNBZ2JHVjBJR1VnUFNBaVJVNVdUVUZRWDAxUFJFVmZVa1ZHVEVWRFZFbFBUaUk3Q2lBZ0lDQnBaaUFvY3k1bGJuWk5ZWEFwSUhOM2FYUmphQ2h6TG1WdWRrMWhjRTF2WkdVcGV3b2dJQ0FnSUNBZ0lHTmhjMlVnZW1rNkNpQWdJQ0FnSUNBZ1kyRnpaU0JYY3pvS0lDQWdJQ0FnSUNBZ0lDQWdaU0E5SUNKRlRsWk5RVkJmVFU5RVJWOVNSVVpTUVVOVVNVOU9JanNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnWlRzS2ZRcG1kVzVqZEdsdmJpQmplQ2h6S1NCN0NpQWdJQ0JzWlhRZ1pTQTlJQ0pGVGxaTlFWQmZRa3hGVGtSSlRrZGZUazlPUlNJN0NpQWdJQ0JwWmlBb2N5NWxiblpOWVhBcElITjNhWFJqYUNoekxtTnZiV0pwYm1VcGV3b2dJQ0FnSUNBZ0lHTmhjMlVnVm5NNkNpQWdJQ0FnSUNBZ0lDQWdJR1VnUFNBaVJVNVdUVUZRWDBKTVJVNUVTVTVIWDAxVlRGUkpVRXhaSWpzS0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ1kyRnpaU0JFZFRvS0lDQWdJQ0FnSUNBZ0lDQWdaU0E5SUNKRlRsWk5RVkJmUWt4RlRrUkpUa2RmVFVsWUlqc0tJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdZMkZ6WlNCR2RUb0tJQ0FnSUNBZ0lDQWdJQ0FnWlNBOUlDSkZUbFpOUVZCZlFreEZUa1JKVGtkZlFVUkVJanNLSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnWlRzS2ZRcG1kVzVqZEdsdmJpQm9lQ2h6TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JzWlhRZ2FTQTlJSE11WjJWMFEyOXVkR1Y0ZENncExDQnlJRDBnZEM1a1pXWnBibVZ6TENCdklEMGdkQzUyWlhKMFpYaFRhR0ZrWlhJc0lHRWdQU0IwTG1aeVlXZHRaVzUwVTJoaFpHVnlMQ0JzSUQwZ2IzZ29kQ2tzSUdNZ1BTQmhlQ2gwS1N3Z2FDQTlJR3g0S0hRcExDQjFJRDBnWTNnb2RDa3NJR1FnUFNCMExtbHpWMlZpUjB3eUlEOGdJaUlnT2lCUlp5aDBLU3dnWmlBOUlFdG5LSElwTENCdElEMGdhUzVqY21WaGRHVlFjbTluY21GdEtDa3NJSGdzSUhZc0lHY2dQU0IwTG1kc2MyeFdaWEp6YVc5dUlEOGdJaU4yWlhKemFXOXVJQ0lnS3lCMExtZHNjMnhXWlhKemFXOXVJQ3NnWUFwZ0lEb2dJaUk3Q2lBZ0lDQjBMbWx6VW1GM1UyaGhaR1Z5VFdGMFpYSnBZV3dnUHlBb2VDQTlJRnNLSUNBZ0lDQWdJQ0JtQ2lBZ0lDQmRMbVpwYkhSbGNpaHljaWt1YW05cGJpaGdDbUFwTENCNExteGxibWQwYUNBK0lEQWdKaVlnS0hnZ0t6MGdZQXBnS1N3Z2RpQTlJRnNLSUNBZ0lDQWdJQ0JrTEFvZ0lDQWdJQ0FnSUdZS0lDQWdJRjB1Wm1sc2RHVnlLSEp5S1M1cWIybHVLR0FLWUNrc0lIWXViR1Z1WjNSb0lENGdNQ0FtSmlBb2RpQXJQU0JnQ21BcEtTQTZJQ2g0SUQwZ1d3b2dJQ0FnSUNBZ0lFcHNLSFFwTEFvZ0lDQWdJQ0FnSUNJalpHVm1hVzVsSUZOSVFVUkZVbDlPUVUxRklDSWdLeUIwTG5Ob1lXUmxjazVoYldVc0NpQWdJQ0FnSUNBZ1ppd0tJQ0FnSUNBZ0lDQjBMbWx1YzNSaGJtTnBibWNnUHlBaUkyUmxabWx1WlNCVlUwVmZTVTVUVkVGT1EwbE9SeUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbWx1YzNSaGJtTnBibWREYjJ4dmNpQS9JQ0lqWkdWbWFXNWxJRlZUUlY5SlRsTlVRVTVEU1U1SFgwTlBURTlTSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzNWd2NHOXlkSE5XWlhKMFpYaFVaWGgwZFhKbGN5QS9JQ0lqWkdWbWFXNWxJRlpGVWxSRldGOVVSVmhVVlZKRlV5SWdPaUFpSWl3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCTlFWaGZRazlPUlZNZ0lpQXJJSFF1YldGNFFtOXVaWE1zQ2lBZ0lDQWdJQ0FnZEM1MWMyVkdiMmNnSmlZZ2RDNW1iMmNnUHlBaUkyUmxabWx1WlNCVlUwVmZSazlISWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1ZFhObFJtOW5JQ1ltSUhRdVptOW5SWGh3TWlBL0lDSWpaR1ZtYVc1bElFWlBSMTlGV0ZBeUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXRndJRDhnSWlOa1pXWnBibVVnVlZORlgwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVZ1ZGsxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5RlRsWk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVsYm5aTllYQWdQeUFpSTJSbFptbHVaU0FpSUNzZ2FDQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJHbG5hSFJOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVEVsSFNGUk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVoYjAxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5QlQwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVZ0YVhOemFYWmxUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMFZOU1ZOVFNWWkZUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1WW5WdGNFMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOUNWVTFRVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJtOXliV0ZzVFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDA1UFVrMUJURTFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG01dmNtMWhiRTFoY0NBbUppQjBMbTlpYW1WamRGTndZV05sVG05eWJXRnNUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1QwSktSVU5VVTFCQlEwVmZUazlTVFVGTVRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVibTl5YldGc1RXRndJQ1ltSUhRdWRHRnVaMlZ1ZEZOd1lXTmxUbTl5YldGc1RXRndJRDhnSWlOa1pXWnBibVVnVkVGT1IwVk9WRk5RUVVORlgwNVBVazFCVEUxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtTnNaV0Z5WTI5aGRFMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOURURVZCVWtOUFFWUk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUTB4RlFWSkRUMEZVWDFKUFZVZElUa1ZUVTAxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDQS9JQ0lqWkdWbWFXNWxJRlZUUlY5RFRFVkJVa05QUVZSZlRrOVNUVUZNVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUNZbUlIUXVjM1Z3Y0c5eWRITldaWEowWlhoVVpYaDBkWEpsY3lBL0lDSWpaR1ZtYVc1bElGVlRSVjlFU1ZOUVRFRkRSVTFGVGxSTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXpjR1ZqZFd4aGNrMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVRVRVZEVlV4QlVrMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbk53WldOMWJHRnlTVzUwWlc1emFYUjVUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMU5RUlVOVlRFRlNTVTVVUlU1VFNWUlpUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzNCbFkzVnNZWEpEYjJ4dmNrMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVRVRVZEVlV4QlVrTlBURTlTVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWNtOTFaMmh1WlhOelRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgxSlBWVWRJVGtWVFUwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbTFsZEdGc2JtVnpjMDFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlOUlZSQlRFNUZVMU5OUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1aGJIQm9ZVTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlCVEZCSVFVMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblJ5WVc1emJXbHpjMmx2YmlBL0lDSWpaR1ZtYVc1bElGVlRSVjlVVWtGT1UwMUpVMU5KVDA0aUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MGNtRnVjMjFwYzNOcGIyNU5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZWRkpCVGxOTlNWTlRTVTlPVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRHaHBZMnR1WlhOelRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgxUklTVU5MVGtWVFUwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbk5vWldWdVEyOXNiM0pOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBoRlJVNURUMHhQVWsxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTm9aV1Z1VW05MVoyaHVaWE56VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDFOSVJVVk9VazlWUjBoT1JWTlRUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1ZG1WeWRHVjRWR0Z1WjJWdWRITWdQeUFpSTJSbFptbHVaU0JWVTBWZlZFRk9SMFZPVkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5abGNuUmxlRU52Ykc5eWN5QS9JQ0lqWkdWbWFXNWxJRlZUUlY5RFQweFBVaUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblpsY25SbGVFRnNjR2hoY3lBL0lDSWpaR1ZtYVc1bElGVlRSVjlEVDB4UFVsOUJURkJJUVNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5abGNuUmxlRlYyY3lBL0lDSWpaR1ZtYVc1bElGVlRSVjlWVmlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5WMmMxWmxjblJsZUU5dWJIa2dQeUFpSTJSbFptbHVaU0JWVmxOZlZrVlNWRVZZWDA5T1RGa2lJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNW1iR0YwVTJoaFpHbHVaeUEvSUNJalpHVm1hVzVsSUVaTVFWUmZVMGhCUkVWRUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWMydHBibTVwYm1jZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVTB0SlRrNUpUa2NpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUxYzJWV1pYSjBaWGhVWlhoMGRYSmxJRDhnSWlOa1pXWnBibVVnUWs5T1JWOVVSVmhVVlZKRklpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXOXljR2hVWVhKblpYUnpJRDhnSWlOa1pXWnBibVVnVlZORlgwMVBVbEJJVkVGU1IwVlVVeUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbTF2Y25Cb1RtOXliV0ZzY3lBbUppQjBMbVpzWVhSVGFHRmthVzVuSUQwOVBTQWhNU0EvSUNJalpHVm1hVzVsSUZWVFJWOU5UMUpRU0U1UFVrMUJURk1pSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV0YjNKd2FGUmhjbWRsZEhNZ0ppWWdkQzVwYzFkbFlrZE1NaUEvSUNJalpHVm1hVzVsSUUxUFVsQklWRUZTUjBWVVUxOVVSVmhVVlZKRklpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXOXljR2hVWVhKblpYUnpJQ1ltSUhRdWFYTlhaV0pIVERJZ1B5QWlJMlJsWm1sdVpTQk5UMUpRU0ZSQlVrZEZWRk5mUTA5VlRsUWdJaUFySUhRdWJXOXljR2hVWVhKblpYUnpRMjkxYm5RZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG1SdmRXSnNaVk5wWkdWa0lEOGdJaU5rWldacGJtVWdSRTlWUWt4RlgxTkpSRVZFSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Wm14cGNGTnBaR1ZrSUQ4Z0lpTmtaV1pwYm1VZ1JreEpVRjlUU1VSRlJDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuTm9ZV1J2ZDAxaGNFVnVZV0pzWldRZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBoQlJFOVhUVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzJoaFpHOTNUV0Z3Ulc1aFlteGxaQ0EvSUNJalpHVm1hVzVsSUNJZ0t5QnNJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXphWHBsUVhSMFpXNTFZWFJwYjI0Z1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBsYVJVRlVWRVZPVlVGVVNVOU9JaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViRzluWVhKcGRHaHRhV05FWlhCMGFFSjFabVpsY2lBL0lDSWpaR1ZtYVc1bElGVlRSVjlNVDBkRVJWQlVTRUpWUmlJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG14dloyRnlhWFJvYldsalJHVndkR2hDZFdabVpYSWdKaVlnZEM1eVpXNWtaWEpsY2tWNGRHVnVjMmx2YmtaeVlXZEVaWEIwYUNBL0lDSWpaR1ZtYVc1bElGVlRSVjlNVDBkRVJWQlVTRUpWUmw5RldGUWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ0luVnVhV1p2Y20wZ2JXRjBOQ0J0YjJSbGJFMWhkSEpwZURzaUxBb2dJQ0FnSUNBZ0lDSjFibWxtYjNKdElHMWhkRFFnYlc5a1pXeFdhV1YzVFdGMGNtbDRPeUlzQ2lBZ0lDQWdJQ0FnSW5WdWFXWnZjbTBnYldGME5DQndjbTlxWldOMGFXOXVUV0YwY21sNE95SXNDaUFnSUNBZ0lDQWdJblZ1YVdadmNtMGdiV0YwTkNCMmFXVjNUV0YwY21sNE95SXNDaUFnSUNBZ0lDQWdJblZ1YVdadmNtMGdiV0YwTXlCdWIzSnRZV3hOWVhSeWFYZzdJaXdLSUNBZ0lDQWdJQ0FpZFc1cFptOXliU0IyWldNeklHTmhiV1Z5WVZCdmMybDBhVzl1T3lJc0NpQWdJQ0FnSUNBZ0luVnVhV1p2Y20wZ1ltOXZiQ0JwYzA5eWRHaHZaM0poY0docFl6c2lMQW9nSUNBZ0lDQWdJQ0lqYVdaa1pXWWdWVk5GWDBsT1UxUkJUa05KVGtjaUxBb2dJQ0FnSUNBZ0lDSUpZWFIwY21saWRYUmxJRzFoZERRZ2FXNXpkR0Z1WTJWTllYUnlhWGc3SWl3S0lDQWdJQ0FnSUNBaUkyVnVaR2xtSWl3S0lDQWdJQ0FnSUNBaUkybG1aR1ZtSUZWVFJWOUpUbE5VUVU1RFNVNUhYME5QVEU5U0lpd0tJQ0FnSUNBZ0lDQWlDV0YwZEhKcFluVjBaU0IyWldNeklHbHVjM1JoYm1ObFEyOXNiM0k3SWl3S0lDQWdJQ0FnSUNBaUkyVnVaR2xtSWl3S0lDQWdJQ0FnSUNBaVlYUjBjbWxpZFhSbElIWmxZek1nY0c5emFYUnBiMjQ3SWl3S0lDQWdJQ0FnSUNBaVlYUjBjbWxpZFhSbElIWmxZek1nYm05eWJXRnNPeUlzQ2lBZ0lDQWdJQ0FnSW1GMGRISnBZblYwWlNCMlpXTXlJSFYyT3lJc0NpQWdJQ0FnSUNBZ0lpTnBabVJsWmlCVlUwVmZWRUZPUjBWT1ZDSXNDaUFnSUNBZ0lDQWdJZ2xoZEhSeWFXSjFkR1VnZG1Wak5DQjBZVzVuWlc1ME95SXNDaUFnSUNBZ0lDQWdJaU5sYm1ScFppSXNDaUFnSUNBZ0lDQWdJaU5wWmlCa1pXWnBibVZrS0NCVlUwVmZRMDlNVDFKZlFVeFFTRUVnS1NJc0NpQWdJQ0FnSUNBZ0lnbGhkSFJ5YVdKMWRHVWdkbVZqTkNCamIyeHZjanNpTEFvZ0lDQWdJQ0FnSUNJalpXeHBaaUJrWldacGJtVmtLQ0JWVTBWZlEwOU1UMUlnS1NJc0NpQWdJQ0FnSUNBZ0lnbGhkSFJ5YVdKMWRHVWdkbVZqTXlCamIyeHZjanNpTEFvZ0lDQWdJQ0FnSUNJalpXNWthV1lpTEFvZ0lDQWdJQ0FnSUNJamFXWWdLQ0JrWldacGJtVmtLQ0JWVTBWZlRVOVNVRWhVUVZKSFJWUlRJQ2tnSmlZZ0lTQmtaV1pwYm1Wa0tDQk5UMUpRU0ZSQlVrZEZWRk5mVkVWWVZGVlNSU0FwSUNraUxBb2dJQ0FnSUNBZ0lDSUpZWFIwY21saWRYUmxJSFpsWXpNZ2JXOXljR2hVWVhKblpYUXdPeUlzQ2lBZ0lDQWdJQ0FnSWdsaGRIUnlhV0oxZEdVZ2RtVmpNeUJ0YjNKd2FGUmhjbWRsZERFN0lpd0tJQ0FnSUNBZ0lDQWlDV0YwZEhKcFluVjBaU0IyWldNeklHMXZjbkJvVkdGeVoyVjBNanNpTEFvZ0lDQWdJQ0FnSUNJSllYUjBjbWxpZFhSbElIWmxZek1nYlc5eWNHaFVZWEpuWlhRek95SXNDaUFnSUNBZ0lDQWdJZ2tqYVdaa1pXWWdWVk5GWDAxUFVsQklUazlTVFVGTVV5SXNDaUFnSUNBZ0lDQWdJZ2tKWVhSMGNtbGlkWFJsSUhabFl6TWdiVzl5Y0doT2IzSnRZV3d3T3lJc0NpQWdJQ0FnSUNBZ0lna0pZWFIwY21saWRYUmxJSFpsWXpNZ2JXOXljR2hPYjNKdFlXd3hPeUlzQ2lBZ0lDQWdJQ0FnSWdrSllYUjBjbWxpZFhSbElIWmxZek1nYlc5eWNHaE9iM0p0WVd3eU95SXNDaUFnSUNBZ0lDQWdJZ2tKWVhSMGNtbGlkWFJsSUhabFl6TWdiVzl5Y0doT2IzSnRZV3d6T3lJc0NpQWdJQ0FnSUNBZ0lna2paV3h6WlNJc0NpQWdJQ0FnSUNBZ0lna0pZWFIwY21saWRYUmxJSFpsWXpNZ2JXOXljR2hVWVhKblpYUTBPeUlzQ2lBZ0lDQWdJQ0FnSWdrSllYUjBjbWxpZFhSbElIWmxZek1nYlc5eWNHaFVZWEpuWlhRMU95SXNDaUFnSUNBZ0lDQWdJZ2tKWVhSMGNtbGlkWFJsSUhabFl6TWdiVzl5Y0doVVlYSm5aWFEyT3lJc0NpQWdJQ0FnSUNBZ0lna0pZWFIwY21saWRYUmxJSFpsWXpNZ2JXOXljR2hVWVhKblpYUTNPeUlzQ2lBZ0lDQWdJQ0FnSWdralpXNWthV1lpTEFvZ0lDQWdJQ0FnSUNJalpXNWthV1lpTEFvZ0lDQWdJQ0FnSUNJamFXWmtaV1lnVlZORlgxTkxTVTVPU1U1SElpd0tJQ0FnSUNBZ0lDQWlDV0YwZEhKcFluVjBaU0IyWldNMElITnJhVzVKYm1SbGVEc2lMQW9nSUNBZ0lDQWdJQ0lKWVhSMGNtbGlkWFJsSUhabFl6UWdjMnRwYmxkbGFXZG9kRHNpTEFvZ0lDQWdJQ0FnSUNJalpXNWthV1lpTEFvZ0lDQWdJQ0FnSUdBS1lBb2dJQ0FnWFM1bWFXeDBaWElvY25JcExtcHZhVzRvWUFwZ0tTd2dkaUE5SUZzS0lDQWdJQ0FnSUNCa0xBb2dJQ0FnSUNBZ0lFcHNLSFFwTEFvZ0lDQWdJQ0FnSUNJalpHVm1hVzVsSUZOSVFVUkZVbDlPUVUxRklDSWdLeUIwTG5Ob1lXUmxjazVoYldVc0NpQWdJQ0FnSUNBZ1ppd0tJQ0FnSUNBZ0lDQjBMblZ6WlVadlp5QW1KaUIwTG1adlp5QS9JQ0lqWkdWbWFXNWxJRlZUUlY5R1QwY2lJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNTFjMlZHYjJjZ0ppWWdkQzVtYjJkRmVIQXlJRDhnSWlOa1pXWnBibVVnUms5SFgwVllVRElpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV0WVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWJXRjBZMkZ3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMDFCVkVOQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtVnVkazFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlGVGxaTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWxiblpOWVhBZ1B5QWlJMlJsWm1sdVpTQWlJQ3NnWXlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1Wlc1MlRXRndJRDhnSWlOa1pXWnBibVVnSWlBcklHZ2dPaUFpSWl3S0lDQWdJQ0FnSUNCMExtVnVkazFoY0NBL0lDSWpaR1ZtYVc1bElDSWdLeUIxSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVzYVdkb2RFMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOU1TVWRJVkUxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExtRnZUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMEZQVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVpXMXBjM05wZG1WTllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlJVMUpVMU5KVmtWTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWlkVzF3VFdGd0lEOGdJaU5rWldacGJtVWdWVk5GWDBKVlRWQk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV1YjNKdFlXeE5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZUazlTVFVGTVRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVibTl5YldGc1RXRndJQ1ltSUhRdWIySnFaV04wVTNCaFkyVk9iM0p0WVd4TllYQWdQeUFpSTJSbFptbHVaU0JQUWtwRlExUlRVRUZEUlY5T1QxSk5RVXhOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1dWIzSnRZV3hOWVhBZ0ppWWdkQzUwWVc1blpXNTBVM0JoWTJWT2IzSnRZV3hOWVhBZ1B5QWlJMlJsWm1sdVpTQlVRVTVIUlU1VVUxQkJRMFZmVGs5U1RVRk1UVUZRSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1WTJ4bFlYSmpiMkYwSUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYME5NUlVGU1EwOUJWQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbU5zWldGeVkyOWhkRTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlEVEVWQlVrTlBRVlJOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQWdQeUFpSTJSbFptbHVaU0JWVTBWZlEweEZRVkpEVDBGVVgxSlBWVWRJVGtWVFUwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbU5zWldGeVkyOWhkRTV2Y20xaGJFMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOURURVZCVWtOUFFWUmZUazlTVFVGTVRVRlFJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVjM0JsWTNWc1lYSk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZVMUJGUTFWTVFWSk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlUVUVWRFZVeEJVa2xPVkVWT1UwbFVXVTFCVUNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZVMUJGUTFWTVFWSkRUMHhQVWsxQlVDSWdPaUFpSWl3S0lDQWdJQ0FnSUNCMExuSnZkV2RvYm1WemMwMWhjQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVNUMVZIU0U1RlUxTk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV0WlhSaGJHNWxjM05OWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVFVWVVFVeE9SVk5UVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdVlXeHdhR0ZOWVhBZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUVV4UVNFRk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVoYkhCb1lWUmxjM1FnUHlBaUkyUmxabWx1WlNCVlUwVmZRVXhRU0VGVVJWTlVJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVjMmhsWlc0Z1B5QWlJMlJsWm1sdVpTQlZVMFZmVTBoRlJVNGlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXphR1ZsYmtOdmJHOXlUV0Z3SUQ4Z0lpTmtaV1pwYm1VZ1ZWTkZYMU5JUlVWT1EwOU1UMUpOUVZBaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0NBL0lDSWpaR1ZtYVc1bElGVlRSVjlUU0VWRlRsSlBWVWRJVGtWVFUwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblJ5WVc1emJXbHpjMmx2YmlBL0lDSWpaR1ZtYVc1bElGVlRSVjlVVWtGT1UwMUpVMU5KVDA0aUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MGNtRnVjMjFwYzNOcGIyNU5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZWRkpCVGxOTlNWTlRTVTlPVFVGUUlpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRHaHBZMnR1WlhOelRXRndJRDhnSWlOa1pXWnBibVVnVlZORlgxUklTVU5MVGtWVFUwMUJVQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMblpsY25SbGVGUmhibWRsYm5SeklEOGdJaU5rWldacGJtVWdWVk5GWDFSQlRrZEZUbFFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUyWlhKMFpYaERiMnh2Y25NZ2ZId2dkQzVwYm5OMFlXNWphVzVuUTI5c2IzSWdQeUFpSTJSbFptbHVaU0JWVTBWZlEwOU1UMUlpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzUyWlhKMFpYaEJiSEJvWVhNZ1B5QWlJMlJsWm1sdVpTQlZVMFZmUTA5TVQxSmZRVXhRU0VFaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MlpYSjBaWGhWZG5NZ1B5QWlJMlJsWm1sdVpTQlZVMFZmVlZZaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1MWRuTldaWEowWlhoUGJteDVJRDhnSWlOa1pXWnBibVVnVlZaVFgxWkZVbFJGV0Y5UFRreFpJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVaM0poWkdsbGJuUk5ZWEFnUHlBaUkyUmxabWx1WlNCVlUwVmZSMUpCUkVsRlRsUk5RVkFpSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzVtYkdGMFUyaGhaR2x1WnlBL0lDSWpaR1ZtYVc1bElFWk1RVlJmVTBoQlJFVkVJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVaRzkxWW14bFUybGtaV1FnUHlBaUkyUmxabWx1WlNCRVQxVkNURVZmVTBsRVJVUWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNW1iR2x3VTJsa1pXUWdQeUFpSTJSbFptbHVaU0JHVEVsUVgxTkpSRVZFSWlBNklDSWlMQW9nSUNBZ0lDQWdJSFF1YzJoaFpHOTNUV0Z3Ulc1aFlteGxaQ0EvSUNJalpHVm1hVzVsSUZWVFJWOVRTRUZFVDFkTlFWQWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXphR0ZrYjNkTllYQkZibUZpYkdWa0lEOGdJaU5rWldacGJtVWdJaUFySUd3Z09pQWlJaXdLSUNBZ0lDQWdJQ0IwTG5CeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVNBL0lDSWpaR1ZtYVc1bElGQlNSVTFWVEZSSlVFeEpSVVJmUVV4UVNFRWlJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXdhSGx6YVdOaGJHeDVRMjl5Y21WamRFeHBaMmgwY3lBL0lDSWpaR1ZtYVc1bElGQklXVk5KUTBGTVRGbGZRMDlTVWtWRFZGOU1TVWRJVkZNaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1c2IyZGhjbWwwYUcxcFkwUmxjSFJvUW5WbVptVnlJRDhnSWlOa1pXWnBibVVnVlZORlgweFBSMFJGVUZSSVFsVkdJaUE2SUNJaUxBb2dJQ0FnSUNBZ0lIUXViRzluWVhKcGRHaHRhV05FWlhCMGFFSjFabVpsY2lBbUppQjBMbkpsYm1SbGNtVnlSWGgwWlc1emFXOXVSbkpoWjBSbGNIUm9JRDhnSWlOa1pXWnBibVVnVlZORlgweFBSMFJGVUZSSVFsVkdYMFZZVkNJZ09pQWlJaXdLSUNBZ0lDQWdJQ0FvZEM1bGVIUmxibk5wYjI1VGFHRmtaWEpVWlhoMGRYSmxURTlFSUh4OElIUXVaVzUyVFdGd0tTQW1KaUIwTG5KbGJtUmxjbVZ5UlhoMFpXNXphVzl1VTJoaFpHVnlWR1Y0ZEhWeVpVeHZaQ0EvSUNJalpHVm1hVzVsSUZSRldGUlZVa1ZmVEU5RVgwVllWQ0lnT2lBaUlpd0tJQ0FnSUNBZ0lDQWlkVzVwWm05eWJTQnRZWFEwSUhacFpYZE5ZWFJ5YVhnN0lpd0tJQ0FnSUNBZ0lDQWlkVzVwWm05eWJTQjJaV016SUdOaGJXVnlZVkJ2YzJsMGFXOXVPeUlzQ2lBZ0lDQWdJQ0FnSW5WdWFXWnZjbTBnWW05dmJDQnBjMDl5ZEdodlozSmhjR2hwWXpzaUxBb2dJQ0FnSUNBZ0lIUXVkRzl1WlUxaGNIQnBibWNnSVQwOUlGOXVJRDhnSWlOa1pXWnBibVVnVkU5T1JWOU5RVkJRU1U1SElpQTZJQ0lpTEFvZ0lDQWdJQ0FnSUhRdWRHOXVaVTFoY0hCcGJtY2dJVDA5SUY5dUlEOGdSbVV1ZEc5dVpXMWhjSEJwYm1kZmNHRnljMTltY21GbmJXVnVkQ0E2SUNJaUxBb2dJQ0FnSUNBZ0lIUXVkRzl1WlUxaGNIQnBibWNnSVQwOUlGOXVJRDhnYW1jb0luUnZibVZOWVhCd2FXNW5JaXdnZEM1MGIyNWxUV0Z3Y0dsdVp5a2dPaUFpSWl3S0lDQWdJQ0FnSUNCMExtUnBkR2hsY21sdVp5QS9JQ0lqWkdWbWFXNWxJRVJKVkVoRlVrbE9SeUlnT2lBaUlpd0tJQ0FnSUNBZ0lDQjBMbVp2Y20xaGRDQTlQVDBnUjI0Z1B5QWlJMlJsWm1sdVpTQlBVRUZSVlVVaUlEb2dJaUlzQ2lBZ0lDQWdJQ0FnUm1VdVpXNWpiMlJwYm1kelgzQmhjbk5mWm5KaFoyMWxiblFzQ2lBZ0lDQWdJQ0FnZEM1dFlYQWdQeUJFYmlnaWJXRndWR1Y0Wld4VWIweHBibVZoY2lJc0lIUXViV0Z3Ulc1amIyUnBibWNwSURvZ0lpSXNDaUFnSUNBZ0lDQWdkQzV0WVhSallYQWdQeUJFYmlnaWJXRjBZMkZ3VkdWNFpXeFViMHhwYm1WaGNpSXNJSFF1YldGMFkyRndSVzVqYjJScGJtY3BJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNWxiblpOWVhBZ1B5QkViaWdpWlc1MlRXRndWR1Y0Wld4VWIweHBibVZoY2lJc0lIUXVaVzUyVFdGd1JXNWpiMlJwYm1jcElEb2dJaUlzQ2lBZ0lDQWdJQ0FnZEM1bGJXbHpjMmwyWlUxaGNDQS9JRVJ1S0NKbGJXbHpjMmwyWlUxaGNGUmxlR1ZzVkc5TWFXNWxZWElpTENCMExtVnRhWE56YVhabFRXRndSVzVqYjJScGJtY3BJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXpjR1ZqZFd4aGNrTnZiRzl5VFdGd0lEOGdSRzRvSW5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEJVWlhobGJGUnZUR2x1WldGeUlpd2dkQzV6Y0dWamRXeGhja052Ykc5eVRXRndSVzVqYjJScGJtY3BJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXphR1ZsYmtOdmJHOXlUV0Z3SUQ4Z1JHNG9Jbk5vWldWdVEyOXNiM0pOWVhCVVpYaGxiRlJ2VEdsdVpXRnlJaXdnZEM1emFHVmxia052Ykc5eVRXRndSVzVqYjJScGJtY3BJRG9nSWlJc0NpQWdJQ0FnSUNBZ2RDNXNhV2RvZEUxaGNDQS9JRVJ1S0NKc2FXZG9kRTFoY0ZSbGVHVnNWRzlNYVc1bFlYSWlMQ0IwTG14cFoyaDBUV0Z3Ulc1amIyUnBibWNwSURvZ0lpSXNDaUFnSUNBZ0lDQWdKR2NvSW14cGJtVmhjbFJ2VDNWMGNIVjBWR1Y0Wld3aUxDQjBMbTkxZEhCMWRFVnVZMjlrYVc1bktTd0tJQ0FnSUNBZ0lDQjBMbVJsY0hSb1VHRmphMmx1WnlBL0lDSWpaR1ZtYVc1bElFUkZVRlJJWDFCQlEwdEpUa2NnSWlBcklIUXVaR1Z3ZEdoUVlXTnJhVzVuSURvZ0lpSXNDaUFnSUNBZ0lDQWdZQXBnQ2lBZ0lDQmRMbVpwYkhSbGNpaHljaWt1YW05cGJpaGdDbUFwS1N3Z2J5QTlJSEpoS0c4cExDQnZJRDBnVjJ3b2J5d2dkQ2tzSUc4Z1BTQnhiQ2h2TENCMEtTd2dZU0E5SUhKaEtHRXBMQ0JoSUQwZ1Yyd29ZU3dnZENrc0lHRWdQU0J4YkNoaExDQjBLU3dnYnlBOUlGaHNLRzhwTENCaElEMGdXR3dvWVNrc0lIUXVhWE5YWldKSFRESWdKaVlnZEM1cGMxSmhkMU5vWVdSbGNrMWhkR1Z5YVdGc0lDRTlQU0FoTUNBbUppQW9aeUE5SUdBamRtVnljMmx2YmlBek1EQWdaWE1LWUN3Z2VDQTlJRnNLSUNBZ0lDQWdJQ0FpY0hKbFkybHphVzl1SUcxbFpHbDFiWEFnYzJGdGNHeGxjakpFUVhKeVlYazdJaXdLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0JoZEhSeWFXSjFkR1VnYVc0aUxBb2dJQ0FnSUNBZ0lDSWpaR1ZtYVc1bElIWmhjbmxwYm1jZ2IzVjBJaXdLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0IwWlhoMGRYSmxNa1FnZEdWNGRIVnlaU0lLSUNBZ0lGMHVhbTlwYmloZ0NtQXBJQ3NnWUFwZ0lDc2dlQ3dnZGlBOUlGc0tJQ0FnSUNBZ0lDQWlJMlJsWm1sdVpTQjJZWEo1YVc1bklHbHVJaXdLSUNBZ0lDQWdJQ0IwTG1kc2MyeFdaWEp6YVc5dUlEMDlQU0I0YkNBL0lDSWlJRG9nSW14aGVXOTFkQ2hzYjJOaGRHbHZiaUE5SURBcElHOTFkQ0JvYVdkb2NDQjJaV00wSUhCalgyWnlZV2REYjJ4dmNqc2lMQW9nSUNBZ0lDQWdJSFF1WjJ4emJGWmxjbk5wYjI0Z1BUMDlJSGhzSUQ4Z0lpSWdPaUFpSTJSbFptbHVaU0JuYkY5R2NtRm5RMjlzYjNJZ2NHTmZabkpoWjBOdmJHOXlJaXdLSUNBZ0lDQWdJQ0FpSTJSbFptbHVaU0JuYkY5R2NtRm5SR1Z3ZEdoRldGUWdaMnhmUm5KaFowUmxjSFJvSWl3S0lDQWdJQ0FnSUNBaUkyUmxabWx1WlNCMFpYaDBkWEpsTWtRZ2RHVjRkSFZ5WlNJc0NpQWdJQ0FnSUNBZ0lpTmtaV1pwYm1VZ2RHVjRkSFZ5WlVOMVltVWdkR1Y0ZEhWeVpTSXNDaUFnSUNBZ0lDQWdJaU5rWldacGJtVWdkR1Y0ZEhWeVpUSkVVSEp2YWlCMFpYaDBkWEpsVUhKdmFpSXNDaUFnSUNBZ0lDQWdJaU5rWldacGJtVWdkR1Y0ZEhWeVpUSkVURzlrUlZoVUlIUmxlSFIxY21WTWIyUWlMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJSFJsZUhSMWNtVXlSRkJ5YjJwTWIyUkZXRlFnZEdWNGRIVnlaVkJ5YjJwTWIyUWlMQW9nSUNBZ0lDQWdJQ0lqWkdWbWFXNWxJSFJsZUhSMWNtVkRkV0psVEc5a1JWaFVJSFJsZUhSMWNtVk1iMlFpTEFvZ0lDQWdJQ0FnSUNJalpHVm1hVzVsSUhSbGVIUjFjbVV5UkVkeVlXUkZXRlFnZEdWNGRIVnlaVWR5WVdRaUxBb2dJQ0FnSUNBZ0lDSWpaR1ZtYVc1bElIUmxlSFIxY21VeVJGQnliMnBIY21Ga1JWaFVJSFJsZUhSMWNtVlFjbTlxUjNKaFpDSXNDaUFnSUNBZ0lDQWdJaU5rWldacGJtVWdkR1Y0ZEhWeVpVTjFZbVZIY21Ga1JWaFVJSFJsZUhSMWNtVkhjbUZrSWdvZ0lDQWdYUzVxYjJsdUtHQUtZQ2tnS3lCZ0NtQWdLeUIyS1RzS0lDQWdJR3hsZENCd0lEMGdaeUFySUhnZ0t5QnZMQ0JmSUQwZ1p5QXJJSFlnS3lCaExDQjVJRDBnUjJ3b2FTd2dNelUyTXpNc0lIQXBMQ0JpSUQwZ1Iyd29hU3dnTXpVMk16SXNJRjhwT3dvZ0lDQWdhV1lnS0drdVlYUjBZV05vVTJoaFpHVnlLRzBzSUhrcExDQnBMbUYwZEdGamFGTm9ZV1JsY2lodExDQmlLU3dnZEM1cGJtUmxlREJCZEhSeWFXSjFkR1ZPWVcxbElDRTlQU0IyYjJsa0lEQWdQeUJwTG1KcGJtUkJkSFJ5YVdKTWIyTmhkR2x2YmlodExDQXdMQ0IwTG1sdVpHVjRNRUYwZEhKcFluVjBaVTVoYldVcElEb2dkQzV0YjNKd2FGUmhjbWRsZEhNZ1BUMDlJQ0V3SUNZbUlHa3VZbWx1WkVGMGRISnBZa3h2WTJGMGFXOXVLRzBzSURBc0lDSndiM05wZEdsdmJpSXBMQ0JwTG14cGJtdFFjbTluY21GdEtHMHBMQ0J6TG1SbFluVm5MbU5vWldOclUyaGhaR1Z5UlhKeWIzSnpLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElFa2dQU0JwTG1kbGRGQnliMmR5WVcxSmJtWnZURzluS0cwcExuUnlhVzBvS1N3Z2F5QTlJR2t1WjJWMFUyaGhaR1Z5U1c1bWIweHZaeWg1S1M1MGNtbHRLQ2tzSUVJZ1BTQnBMbWRsZEZOb1lXUmxja2x1Wm05TWIyY29ZaWt1ZEhKcGJTZ3BMQ0JRSUQwZ0lUQXNJSGNnUFNBaE1Ec0tJQ0FnSUNBZ0lDQnBaaUFvYVM1blpYUlFjbTluY21GdFVHRnlZVzFsZEdWeUtHMHNJRE0xTnpFMEtTQTlQVDBnSVRFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnVUNBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdSU0E5SUZac0tHa3NJSGtzSUNKMlpYSjBaWGdpS1N3Z1JDQTlJRlpzS0drc0lHSXNJQ0ptY21GbmJXVnVkQ0lwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGQnliMmR5WVcwNklGTm9ZV1JsY2lCRmNuSnZjaUFpSUNzZ2FTNW5aWFJGY25KdmNpZ3BJQ3NnSWlBdElGWkJURWxFUVZSRlgxTlVRVlJWVXlBaUlDc2dhUzVuWlhSUWNtOW5jbUZ0VUdGeVlXMWxkR1Z5S0cwc0lETTFOekUxS1NBcklHQUtDbEJ5YjJkeVlXMGdTVzVtYnlCTWIyYzZJR0FnS3lCSklDc2dZQXBnSUNzZ1JTQXJJR0FLWUNBcklFUXBPd29nSUNBZ0lDQWdJSDBnWld4elpTQkpJQ0U5UFNBaUlpQS9JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFFjbTluY21GdE9pQlFjbTluY21GdElFbHVabThnVEc5bk9pSXNJRWtwSURvZ0tHc2dQVDA5SUNJaUlIeDhJRUlnUFQwOUlDSWlLU0FtSmlBb2R5QTlJQ0V4S1RzS0lDQWdJQ0FnSUNCM0lDWW1JQ2gwYUdsekxtUnBZV2R1YjNOMGFXTnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlkVzV1WVdKc1pUb2dVQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NISnZaM0poYlV4dlp6b2dTU3dLSUNBZ0lDQWdJQ0FnSUNBZ2RtVnlkR1Y0VTJoaFpHVnlPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJjNklHc3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbVZtYVhnNklIZ0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdabkpoWjIxbGJuUlRhR0ZrWlhJNklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZaem9nUWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpXWnBlRG9nZGdvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQjlDaUFnSUNCcExtUmxiR1YwWlZOb1lXUmxjaWg1S1N3Z2FTNWtaV3hsZEdWVGFHRmtaWElvWWlrN0NpQWdJQ0JzWlhRZ1FUc0tJQ0FnSUhSb2FYTXVaMlYwVlc1cFptOXliWE1nUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1FTQTlQVDBnZG05cFpDQXdJQ1ltSUNoQklEMGdibVYzSUdKdUtHa3NJRzBwS1N3Z1FUc0tJQ0FnSUgwN0NpQWdJQ0JzWlhRZ1REc0tJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRUYwZEhKcFluVjBaWE1nUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1RDQTlQVDBnZG05cFpDQXdJQ1ltSUNoTUlEMGdaWGdvYVN3Z2JTa3BMQ0JNT3dvZ0lDQWdmU3dnZEdocGN5NWtaWE4wY205NUlEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnYmk1eVpXeGxZWE5sVTNSaGRHVnpUMlpRY205bmNtRnRLSFJvYVhNcExDQnBMbVJsYkdWMFpWQnliMmR5WVcwb2JTa3NJSFJvYVhNdWNISnZaM0poYlNBOUlIWnZhV1FnTURzS0lDQWdJSDBzSUhSb2FYTXVibUZ0WlNBOUlIUXVjMmhoWkdWeVRtRnRaU3dnZEdocGN5NXBaQ0E5SUZsbkt5c3NJSFJvYVhNdVkyRmphR1ZMWlhrZ1BTQmxMQ0IwYUdsekxuVnpaV1JVYVcxbGN5QTlJREVzSUhSb2FYTXVjSEp2WjNKaGJTQTlJRzBzSUhSb2FYTXVkbVZ5ZEdWNFUyaGhaR1Z5SUQwZ2VTd2dkR2hwY3k1bWNtRm5iV1Z1ZEZOb1lXUmxjaUE5SUdJc0lIUm9hWE03Q24wS2RtRnlJSFY0SUQwZ01Dd2daMmdnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjMmhoWkdWeVEyRmphR1VnUFNCdVpYY2dUV0Z3TENCMGFHbHpMbTFoZEdWeWFXRnNRMkZqYUdVZ1BTQnVaWGNnVFdGd093b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1V1ZG1WeWRHVjRVMmhoWkdWeUxDQnVJRDBnWlM1bWNtRm5iV1Z1ZEZOb1lXUmxjaXdnYVNBOUlIUm9hWE11WDJkbGRGTm9ZV1JsY2xOMFlXZGxLSFFwTENCeUlEMGdkR2hwY3k1ZloyVjBVMmhoWkdWeVUzUmhaMlVvYmlrc0lHOGdQU0IwYUdsekxsOW5aWFJUYUdGa1pYSkRZV05vWlVadmNrMWhkR1Z5YVdGc0tHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnZMbWhoY3locEtTQTlQVDBnSVRFZ0ppWWdLRzh1WVdSa0tHa3BMQ0JwTG5WelpXUlVhVzFsY3lzcktTd2dieTVvWVhNb2Npa2dQVDA5SUNFeElDWW1JQ2h2TG1Ga1pDaHlLU3dnY2k1MWMyVmtWR2x0WlhNckt5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnlaVzF2ZG1Vb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1dFlYUmxjbWxoYkVOaFkyaGxMbWRsZENobEtUc0tJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnVJRzltSUhRcGJpNTFjMlZrVkdsdFpYTXRMU3dnYmk1MWMyVmtWR2x0WlhNZ1BUMDlJREFnSmlZZ2RHaHBjeTV6YUdGa1pYSkRZV05vWlM1a1pXeGxkR1VvYmlrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV0YwWlhKcFlXeERZV05vWlM1a1pXeGxkR1VvWlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUldaWEowWlhoVGFHRmtaWEpKUkNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJkbGRGTm9ZV1JsY2xOMFlXZGxLR1V1ZG1WeWRHVjRVMmhoWkdWeUtTNXBaRHNLSUNBZ0lIMEtJQ0FnSUdkbGRFWnlZV2R0Wlc1MFUyaGhaR1Z5U1VRb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5blpYUlRhR0ZrWlhKVGRHRm5aU2hsTG1aeVlXZHRaVzUwVTJoaFpHVnlLUzVwWkRzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1emFHRmtaWEpEWVdOb1pTNWpiR1ZoY2lncExDQjBhR2x6TG0xaGRHVnlhV0ZzUTJGamFHVXVZMnhsWVhJb0tUc0tJQ0FnSUgwS0lDQWdJRjluWlhSVGFHRmtaWEpEWVdOb1pVWnZjazFoZEdWeWFXRnNLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXViV0YwWlhKcFlXeERZV05vWlRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1b1lYTW9aU2tnUFQwOUlDRXhJQ1ltSUhRdWMyVjBLR1VzSUc1bGR5QlRaWFFwTENCMExtZGxkQ2hsS1RzS0lDQWdJSDBLSUNBZ0lGOW5aWFJUYUdGa1pYSlRkR0ZuWlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5Ob1lXUmxja05oWTJobE93b2dJQ0FnSUNBZ0lHbG1JQ2gwTG1oaGN5aGxLU0E5UFQwZ0lURXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCdVpYY2dlR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUXVjMlYwS0dVc0lHNHBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQzVuWlhRb1pTazdDaUFnSUNCOUNuMHNJSGhvSUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCMGFHbHpMbWxrSUQwZ2RYZ3JLeXdnZEdocGN5NTFjMlZrVkdsdFpYTWdQU0F3T3dvZ0lDQWdmUXA5T3dwbWRXNWpkR2x2YmlCa2VDaHpMQ0JsTENCMExDQnVMQ0JwTENCeUxDQnZLU0I3Q2lBZ0lDQnNaWFFnWVNBOUlHNWxkeUJLY3l3Z2JDQTlJRzVsZHlCbmFDd2dZeUE5SUZ0ZExDQm9JRDBnYVM1cGMxZGxZa2RNTWl3Z2RTQTlJR2t1Ykc5bllYSnBkR2h0YVdORVpYQjBhRUoxWm1abGNpd2daQ0E5SUdrdVpteHZZWFJXWlhKMFpYaFVaWGgwZFhKbGN5d2daaUE5SUdrdWJXRjRWbVZ5ZEdWNFZXNXBabTl5YlhNc0lHMGdQU0JwTG5abGNuUmxlRlJsZUhSMWNtVnpMQ0I0SUQwZ2FTNXdjbVZqYVhOcGIyNHNJSFlnUFNCN0NpQWdJQ0FnSUNBZ1RXVnphRVJsY0hSb1RXRjBaWEpwWVd3NklDSmtaWEIwYUNJc0NpQWdJQ0FnSUNBZ1RXVnphRVJwYzNSaGJtTmxUV0YwWlhKcFlXdzZJQ0prYVhOMFlXNWpaVkpIUWtFaUxBb2dJQ0FnSUNBZ0lFMWxjMmhPYjNKdFlXeE5ZWFJsY21saGJEb2dJbTV2Y20xaGJDSXNDaUFnSUNBZ0lDQWdUV1Z6YUVKaGMybGpUV0YwWlhKcFlXdzZJQ0ppWVhOcFl5SXNDaUFnSUNBZ0lDQWdUV1Z6YUV4aGJXSmxjblJOWVhSbGNtbGhiRG9nSW14aGJXSmxjblFpTEFvZ0lDQWdJQ0FnSUUxbGMyaFFhRzl1WjAxaGRHVnlhV0ZzT2lBaWNHaHZibWNpTEFvZ0lDQWdJQ0FnSUUxbGMyaFViMjl1VFdGMFpYSnBZV3c2SUNKMGIyOXVJaXdLSUNBZ0lDQWdJQ0JOWlhOb1UzUmhibVJoY21STllYUmxjbWxoYkRvZ0luQm9lWE5wWTJGc0lpd0tJQ0FnSUNBZ0lDQk5aWE5vVUdoNWMybGpZV3hOWVhSbGNtbGhiRG9nSW5Cb2VYTnBZMkZzSWl3S0lDQWdJQ0FnSUNCTlpYTm9UV0YwWTJGd1RXRjBaWEpwWVd3NklDSnRZWFJqWVhBaUxBb2dJQ0FnSUNBZ0lFeHBibVZDWVhOcFkwMWhkR1Z5YVdGc09pQWlZbUZ6YVdNaUxBb2dJQ0FnSUNBZ0lFeHBibVZFWVhOb1pXUk5ZWFJsY21saGJEb2dJbVJoYzJobFpDSXNDaUFnSUNBZ0lDQWdVRzlwYm5SelRXRjBaWEpwWVd3NklDSndiMmx1ZEhNaUxBb2dJQ0FnSUNBZ0lGTm9ZV1J2ZDAxaGRHVnlhV0ZzT2lBaWMyaGhaRzkzSWl3S0lDQWdJQ0FnSUNCVGNISnBkR1ZOWVhSbGNtbGhiRG9nSW5Od2NtbDBaU0lLSUNBZ0lIMDdDaUFnSUNCbWRXNWpkR2x2YmlCbktIY3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1JDQTlJSGN1YzJ0bGJHVjBiMjR1WW05dVpYTTdDaUFnSUNBZ0lDQWdhV1lnS0dRcElISmxkSFZ5YmlBeE1ESTBPd29nSUNBZ0lDQWdJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVlnUFNCTllYUm9MbVpzYjI5eUtDaG1JQzBnTWpBcElDOGdOQ2tzSUU4Z1BTQk5ZWFJvTG0xcGJpaEdMQ0JFTG14bGJtZDBhQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUElEd2dSQzVzWlc1bmRHZ2dQeUFvWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJUYTJWc1pYUnZiaUJvWVhNZ0lpQXJJRVF1YkdWdVozUm9JQ3NnSWlCaWIyNWxjeTRnVkdocGN5QkhVRlVnYzNWd2NHOXlkSE1nSWlBcklFOGdLeUFpTGlJcExDQXdLU0E2SUU4N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdjQ2gzS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRVU3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSGNnSmlZZ2R5NXBjMVJsZUhSMWNtVWdQeUJGSUQwZ2R5NWxibU52WkdsdVp5QTZJSGNnSmlZZ2R5NXBjMWRsWWtkTVVtVnVaR1Z5VkdGeVoyVjBJRDhnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhRY205bmNtRnRjeTVuWlhSVVpYaDBkWEpsUlc1amIyUnBibWRHY205dFRXRndPaUJrYjI0bmRDQjFjMlVnY21WdVpHVnlJSFJoY21kbGRITWdZWE1nZEdWNGRIVnlaWE11SUZWelpTQjBhR1ZwY2lBdWRHVjRkSFZ5WlNCd2NtOXdaWEowZVNCcGJuTjBaV0ZrTGlJcExDQkZJRDBnZHk1MFpYaDBkWEpsTG1WdVkyOWthVzVuS1NBNklFVWdQU0JPZEN3Z2FDQW1KaUIzSUNZbUlIY3VhWE5VWlhoMGRYSmxJQ1ltSUhjdVptOXliV0YwSUQwOVBTQmpkQ0FtSmlCM0xuUjVjR1VnUFQwOUlISnVJQ1ltSUhjdVpXNWpiMlJwYm1jZ1BUMDlJRTlwSUNZbUlDaEZJRDBnVG5RcExDQkZPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWHloM0xDQkZMQ0JFTENCVkxDQkdLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElFOGdQU0JWTG1adlp5d2dibVVnUFNCM0xtbHpUV1Z6YUZOMFlXNWtZWEprVFdGMFpYSnBZV3dnUHlCVkxtVnVkbWx5YjI1dFpXNTBJRG9nYm5Wc2JDd2dZMlVnUFNBb2R5NXBjMDFsYzJoVGRHRnVaR0Z5WkUxaGRHVnlhV0ZzSUQ4Z2RDQTZJR1VwTG1kbGRDaDNMbVZ1ZGsxaGNDQjhmQ0J1WlNrc0lGWWdQU0IyVzNjdWRIbHdaVjBzSUZjZ1BTQkdMbWx6VTJ0cGJtNWxaRTFsYzJnZ1B5Qm5LRVlwSURvZ01Ec0tJQ0FnSUNBZ0lDQjNMbkJ5WldOcGMybHZiaUFoUFQwZ2JuVnNiQ0FtSmlBb2VDQTlJR2t1WjJWMFRXRjRVSEpsWTJsemFXOXVLSGN1Y0hKbFkybHphVzl1S1N3Z2VDQWhQVDBnZHk1d2NtVmphWE5wYjI0Z0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGQnliMmR5WVcwdVoyVjBVR0Z5WVcxbGRHVnljem9pTENCM0xuQnlaV05wYzJsdmJpd2dJbTV2ZENCemRYQndiM0owWldRc0lIVnphVzVuSWl3Z2VDd2dJbWx1YzNSbFlXUXVJaWtwT3dvZ0lDQWdJQ0FnSUd4bGRDQm9aU3dnYkdVc0lHWmxMQ0JDWlRzS0lDQWdJQ0FnSUNCcFppQW9WaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUdVZ1BTQnhkRnRXWFRzS0lDQWdJQ0FnSUNBZ0lDQWdhR1VnUFNCNFpTNTJaWEowWlhoVGFHRmtaWElzSUd4bElEMGdlR1V1Wm5KaFoyMWxiblJUYUdGa1pYSTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHaGxJRDBnZHk1MlpYSjBaWGhUYUdGa1pYSXNJR3hsSUQwZ2R5NW1jbUZuYldWdWRGTm9ZV1JsY2l3Z2JDNTFjR1JoZEdVb2R5a3NJR1psSUQwZ2JDNW5aWFJXWlhKMFpYaFRhR0ZrWlhKSlJDaDNLU3dnUW1VZ1BTQnNMbWRsZEVaeVlXZHRaVzUwVTJoaFpHVnlTVVFvZHlrN0NpQWdJQ0FnSUNBZ2JHVjBJRmtnUFNCekxtZGxkRkpsYm1SbGNsUmhjbWRsZENncExDQkRaU0E5SUhjdVlXeHdhR0ZVWlhOMElENGdNQ3dnZVdVZ1BTQjNMbU5zWldGeVkyOWhkQ0ErSURBN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdhWE5YWldKSFRESTZJR2dzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1JsY2tsRU9pQldMQW9nSUNBZ0lDQWdJQ0FnSUNCemFHRmtaWEpPWVcxbE9pQjNMblI1Y0dVc0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVGTm9ZV1JsY2pvZ2FHVXNDaUFnSUNBZ0lDQWdJQ0FnSUdaeVlXZHRaVzUwVTJoaFpHVnlPaUJzWlN3S0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtYVc1bGN6b2dkeTVrWldacGJtVnpMQW9nSUNBZ0lDQWdJQ0FnSUNCamRYTjBiMjFXWlhKMFpYaFRhR0ZrWlhKSlJEb2dabVVzQ2lBZ0lDQWdJQ0FnSUNBZ0lHTjFjM1J2YlVaeVlXZHRaVzUwVTJoaFpHVnlTVVE2SUVKbExBb2dJQ0FnSUNBZ0lDQWdJQ0JwYzFKaGQxTm9ZV1JsY2sxaGRHVnlhV0ZzT2lCM0xtbHpVbUYzVTJoaFpHVnlUV0YwWlhKcFlXd2dQVDA5SUNFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0JuYkhOc1ZtVnljMmx2YmpvZ2R5NW5iSE5zVm1WeWMybHZiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2NISmxZMmx6YVc5dU9pQjRMQW9nSUNBZ0lDQWdJQ0FnSUNCcGJuTjBZVzVqYVc1bk9pQkdMbWx6U1c1emRHRnVZMlZrVFdWemFDQTlQVDBnSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJR2x1YzNSaGJtTnBibWREYjJ4dmNqb2dSaTVwYzBsdWMzUmhibU5sWkUxbGMyZ2dQVDA5SUNFd0lDWW1JRVl1YVc1emRHRnVZMlZEYjJ4dmNpQWhQVDBnYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNWd2NHOXlkSE5XWlhKMFpYaFVaWGgwZFhKbGN6b2diU3dLSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwUlc1amIyUnBibWM2SUZrZ0lUMDlJRzUxYkd3Z1B5QndLRmt1ZEdWNGRIVnlaU2tnT2lCekxtOTFkSEIxZEVWdVkyOWthVzVuTEFvZ0lDQWdJQ0FnSUNBZ0lDQnRZWEE2SUNFaGR5NXRZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHMWhjRVZ1WTI5a2FXNW5PaUJ3S0hjdWJXRndLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMkZ3T2lBaElYY3ViV0YwWTJGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0J0WVhSallYQkZibU52WkdsdVp6b2djQ2gzTG0xaGRHTmhjQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHVnVkazFoY0RvZ0lTRmpaU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pXNTJUV0Z3VFc5a1pUb2dZMlVnSmlZZ1kyVXViV0Z3Y0dsdVp5d0tJQ0FnSUNBZ0lDQWdJQ0FnWlc1MlRXRndSVzVqYjJScGJtYzZJSEFvWTJVcExBb2dJQ0FnSUNBZ0lDQWdJQ0JsYm5aTllYQkRkV0psVlZZNklDRWhZMlVnSmlZZ0tHTmxMbTFoY0hCcGJtY2dQVDA5SUZCeUlIeDhJR05sTG0xaGNIQnBibWNnUFQwOUlGZHpLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHbG5hSFJOWVhBNklDRWhkeTVzYVdkb2RFMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JHbG5hSFJOWVhCRmJtTnZaR2x1WnpvZ2NDaDNMbXhwWjJoMFRXRndLU3dLSUNBZ0lDQWdJQ0FnSUNBZ1lXOU5ZWEE2SUNFaGR5NWhiMDFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdaVzFwYzNOcGRtVk5ZWEE2SUNFaGR5NWxiV2x6YzJsMlpVMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pXMXBjM05wZG1WTllYQkZibU52WkdsdVp6b2djQ2gzTG1WdGFYTnphWFpsVFdGd0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnWW5WdGNFMWhjRG9nSVNGM0xtSjFiWEJOWVhBc0NpQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJFMWhjRG9nSVNGM0xtNXZjbTFoYkUxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBVM0JoWTJWT2IzSnRZV3hOWVhBNklIY3VibTl5YldGc1RXRndWSGx3WlNBOVBUMGdlbVFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUmhibWRsYm5SVGNHRmpaVTV2Y20xaGJFMWhjRG9nZHk1dWIzSnRZV3hOWVhCVWVYQmxJRDA5UFNCSWFTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSmpiMkYwT2lCNVpTd0tJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSmpiMkYwVFdGd09pQjVaU0FtSmlBaElYY3VZMnhsWVhKamIyRjBUV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTk5ZWEE2SUhsbElDWW1JQ0VoZHk1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQXNDaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlZMjloZEU1dmNtMWhiRTFoY0RvZ2VXVWdKaVlnSVNGM0xtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhZMlZ0Wlc1MFRXRndPaUFoSVhjdVpHbHpjR3hoWTJWdFpXNTBUV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnliM1ZuYUc1bGMzTk5ZWEE2SUNFaGR5NXliM1ZuYUc1bGMzTk5ZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHMWxkR0ZzYm1WemMwMWhjRG9nSVNGM0xtMWxkR0ZzYm1WemMwMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2MzQmxZM1ZzWVhKTllYQTZJQ0VoZHk1emNHVmpkV3hoY2sxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBNklDRWhkeTV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdjM0JsWTNWc1lYSkRiMnh2Y2sxaGNEb2dJU0YzTG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lITndaV04xYkdGeVEyOXNiM0pOWVhCRmJtTnZaR2x1WnpvZ2NDaDNMbk53WldOMWJHRnlRMjlzYjNKTllYQXBMQW9nSUNBZ0lDQWdJQ0FnSUNCaGJIQm9ZVTFoY0RvZ0lTRjNMbUZzY0doaFRXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCaGJIQm9ZVlJsYzNRNklFTmxMQW9nSUNBZ0lDQWdJQ0FnSUNCbmNtRmthV1Z1ZEUxaGNEb2dJU0YzTG1keVlXUnBaVzUwVFdGd0xBb2dJQ0FnSUNBZ0lDQWdJQ0J6YUdWbGJqb2dkeTV6YUdWbGJpQStJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9aV1Z1UTI5c2IzSk5ZWEE2SUNFaGR5NXphR1ZsYmtOdmJHOXlUV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQnphR1ZsYmtOdmJHOXlUV0Z3Ulc1amIyUnBibWM2SUhBb2R5NXphR1ZsYmtOdmJHOXlUV0Z3S1N3S0lDQWdJQ0FnSUNBZ0lDQWdjMmhsWlc1U2IzVm5hRzVsYzNOTllYQTZJQ0VoZHk1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0N3S0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5OdGFYTnphVzl1T2lCM0xuUnlZVzV6YldsemMybHZiaUErSURBc0NpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1emJXbHpjMmx2YmsxaGNEb2dJU0YzTG5SeVlXNXpiV2x6YzJsdmJrMWhjQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBZMnR1WlhOelRXRndPaUFoSVhjdWRHaHBZMnR1WlhOelRXRndMQW9nSUNBZ0lDQWdJQ0FnSUNCamIyMWlhVzVsT2lCM0xtTnZiV0pwYm1Vc0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVGUmhibWRsYm5Sek9pQWhJWGN1Ym05eWJXRnNUV0Z3SUNZbUlDRWhSaTVuWlc5dFpYUnllU0FtSmlBaElVWXVaMlZ2YldWMGNua3VZWFIwY21saWRYUmxjeTUwWVc1blpXNTBMQW9nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhEYjJ4dmNuTTZJSGN1ZG1WeWRHVjRRMjlzYjNKekxBb2dJQ0FnSUNBZ0lDQWdJQ0IyWlhKMFpYaEJiSEJvWVhNNklIY3VkbVZ5ZEdWNFEyOXNiM0p6SUQwOVBTQWhNQ0FtSmlBaElVWXVaMlZ2YldWMGNua2dKaVlnSVNGR0xtZGxiMjFsZEhKNUxtRjBkSEpwWW5WMFpYTXVZMjlzYjNJZ0ppWWdSaTVuWlc5dFpYUnllUzVoZEhSeWFXSjFkR1Z6TG1OdmJHOXlMbWwwWlcxVGFYcGxJRDA5UFNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0IyWlhKMFpYaFZkbk02SUNFaGR5NXRZWEFnZkh3Z0lTRjNMbUoxYlhCTllYQWdmSHdnSVNGM0xtNXZjbTFoYkUxaGNDQjhmQ0FoSVhjdWMzQmxZM1ZzWVhKTllYQWdmSHdnSVNGM0xtRnNjR2hoVFdGd0lIeDhJQ0VoZHk1bGJXbHpjMmwyWlUxaGNDQjhmQ0FoSVhjdWNtOTFaMmh1WlhOelRXRndJSHg4SUNFaGR5NXRaWFJoYkc1bGMzTk5ZWEFnZkh3Z0lTRjNMbU5zWldGeVkyOWhkRTFoY0NCOGZDQWhJWGN1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0lIeDhJQ0VoZHk1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBZ2ZId2dJU0YzTG1ScGMzQnNZV05sYldWdWRFMWhjQ0I4ZkNBaElYY3VkSEpoYm5OdGFYTnphVzl1VFdGd0lIeDhJQ0VoZHk1MGFHbGphMjVsYzNOTllYQWdmSHdnSVNGM0xuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndJSHg4SUNFaGR5NXpjR1ZqZFd4aGNrTnZiRzl5VFdGd0lIeDhJQ0VoZHk1emFHVmxia052Ykc5eVRXRndJSHg4SUNFaGR5NXphR1ZsYmxKdmRXZG9ibVZ6YzAxaGNDd0tJQ0FnSUNBZ0lDQWdJQ0FnZFhaelZtVnlkR1Y0VDI1c2VUb2dJU2doSVhjdWJXRndJSHg4SUNFaGR5NWlkVzF3VFdGd0lIeDhJQ0VoZHk1dWIzSnRZV3hOWVhBZ2ZId2dJU0YzTG5Od1pXTjFiR0Z5VFdGd0lIeDhJQ0VoZHk1aGJIQm9ZVTFoY0NCOGZDQWhJWGN1WlcxcGMzTnBkbVZOWVhBZ2ZId2dJU0YzTG5KdmRXZG9ibVZ6YzAxaGNDQjhmQ0FoSVhjdWJXVjBZV3h1WlhOelRXRndJSHg4SUNFaGR5NWpiR1ZoY21OdllYUk9iM0p0WVd4TllYQWdmSHdnZHk1MGNtRnVjMjFwYzNOcGIyNGdQaUF3SUh4OElDRWhkeTUwY21GdWMyMXBjM05wYjI1TllYQWdmSHdnSVNGM0xuUm9hV05yYm1WemMwMWhjQ0I4ZkNBaElYY3VjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEFnZkh3Z0lTRjNMbk53WldOMWJHRnlRMjlzYjNKTllYQWdmSHdnZHk1emFHVmxiaUErSURBZ2ZId2dJU0YzTG5Ob1pXVnVRMjlzYjNKTllYQWdmSHdnSVNGM0xuTm9aV1Z1VW05MVoyaHVaWE56VFdGd0tTQW1KaUFoSVhjdVpHbHpjR3hoWTJWdFpXNTBUV0Z3TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iMmM2SUNFaFR5d0tJQ0FnSUNBZ0lDQWdJQ0FnZFhObFJtOW5PaUIzTG1adlp5d0tJQ0FnSUNBZ0lDQWdJQ0FnWm05blJYaHdNam9nVHlBbUppQlBMbWx6Um05blJYaHdNaXdLSUNBZ0lDQWdJQ0FnSUNBZ1pteGhkRk5vWVdScGJtYzZJQ0VoZHk1bWJHRjBVMmhoWkdsdVp5d0tJQ0FnSUNBZ0lDQWdJQ0FnYzJsNlpVRjBkR1Z1ZFdGMGFXOXVPaUIzTG5OcGVtVkJkSFJsYm5WaGRHbHZiaXdLSUNBZ0lDQWdJQ0FnSUNBZ2JHOW5ZWEpwZEdodGFXTkVaWEIwYUVKMVptWmxjam9nZFN3S0lDQWdJQ0FnSUNBZ0lDQWdjMnRwYm01cGJtYzZJRVl1YVhOVGEybHVibVZrVFdWemFDQTlQVDBnSVRBZ0ppWWdWeUErSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRzFoZUVKdmJtVnpPaUJYTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZXWlhKMFpYaFVaWGgwZFhKbE9pQmtMQW9nSUNBZ0lDQWdJQ0FnSUNCdGIzSndhRlJoY21kbGRITTZJQ0VoUmk1blpXOXRaWFJ5ZVNBbUppQWhJVVl1WjJWdmJXVjBjbmt1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVMQW9nSUNBZ0lDQWdJQ0FnSUNCdGIzSndhRTV2Y20xaGJITTZJQ0VoUmk1blpXOXRaWFJ5ZVNBbUppQWhJVVl1WjJWdmJXVjBjbmt1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbTV2Y20xaGJDd0tJQ0FnSUNBZ0lDQWdJQ0FnYlc5eWNHaFVZWEpuWlhSelEyOTFiblE2SUNFaFJpNW5aVzl0WlhSeWVTQW1KaUFoSVVZdVoyVnZiV1YwY25rdWJXOXljR2hCZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1SUQ4Z1JpNW5aVzl0WlhSeWVTNXRiM0p3YUVGMGRISnBZblYwWlhNdWNHOXphWFJwYjI0dWJHVnVaM1JvSURvZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFJHbHlUR2xuYUhSek9pQkZMbVJwY21WamRHbHZibUZzTG14bGJtZDBhQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRVRzlwYm5STWFXZG9kSE02SUVVdWNHOXBiblF1YkdWdVozUm9MQW9nSUNBZ0lDQWdJQ0FnSUNCdWRXMVRjRzkwVEdsbmFIUnpPaUJGTG5Od2IzUXViR1Z1WjNSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0J1ZFcxU1pXTjBRWEpsWVV4cFoyaDBjem9nUlM1eVpXTjBRWEpsWVM1c1pXNW5kR2dzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNTFiVWhsYldsTWFXZG9kSE02SUVVdWFHVnRhUzVzWlc1bmRHZ3NDaUFnSUNBZ0lDQWdJQ0FnSUc1MWJVUnBja3hwWjJoMFUyaGhaRzkzY3pvZ1JTNWthWEpsWTNScGIyNWhiRk5vWVdSdmQwMWhjQzVzWlc1bmRHZ3NDaUFnSUNBZ0lDQWdJQ0FnSUc1MWJWQnZhVzUwVEdsbmFIUlRhR0ZrYjNkek9pQkZMbkJ2YVc1MFUyaGhaRzkzVFdGd0xteGxibWQwYUN3S0lDQWdJQ0FnSUNBZ0lDQWdiblZ0VTNCdmRFeHBaMmgwVTJoaFpHOTNjem9nUlM1emNHOTBVMmhoWkc5M1RXRndMbXhsYm1kMGFDd0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFEyeHBjSEJwYm1kUWJHRnVaWE02SUc4dWJuVnRVR3hoYm1WekxBb2dJQ0FnSUNBZ0lDQWdJQ0J1ZFcxRGJHbHdTVzUwWlhKelpXTjBhVzl1T2lCdkxtNTFiVWx1ZEdWeWMyVmpkR2x2Yml3S0lDQWdJQ0FnSUNBZ0lDQWdabTl5YldGME9pQjNMbVp2Y20xaGRDd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdsMGFHVnlhVzVuT2lCM0xtUnBkR2hsY21sdVp5d0tJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNUV0Z3Ulc1aFlteGxaRG9nY3k1emFHRmtiM2ROWVhBdVpXNWhZbXhsWkNBbUppQkVMbXhsYm1kMGFDQStJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDAxaGNGUjVjR1U2SUhNdWMyaGhaRzkzVFdGd0xuUjVjR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnZibVZOWVhCd2FXNW5PaUIzTG5SdmJtVk5ZWEJ3WldRZ1B5QnpMblJ2Ym1WTllYQndhVzVuSURvZ1gyNHNDaUFnSUNBZ0lDQWdJQ0FnSUhCb2VYTnBZMkZzYkhsRGIzSnlaV04wVEdsbmFIUnpPaUJ6TG5Cb2VYTnBZMkZzYkhsRGIzSnlaV04wVEdsbmFIUnpMQW9nSUNBZ0lDQWdJQ0FnSUNCd2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFNklIY3VjSEpsYlhWc2RHbHdiR2xsWkVGc2NHaGhMQW9nSUNBZ0lDQWdJQ0FnSUNCa2IzVmliR1ZUYVdSbFpEb2dkeTV6YVdSbElEMDlQU0JEYVN3S0lDQWdJQ0FnSUNBZ0lDQWdabXhwY0ZOcFpHVmtPaUIzTG5OcFpHVWdQVDA5SUdsMExBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFGQmhZMnRwYm1jNklIY3VaR1Z3ZEdoUVlXTnJhVzVuSUNFOVBTQjJiMmxrSURBZ1B5QjNMbVJsY0hSb1VHRmphMmx1WnlBNklDRXhMQW9nSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlREJCZEhSeWFXSjFkR1ZPWVcxbE9pQjNMbWx1WkdWNE1FRjBkSEpwWW5WMFpVNWhiV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHVjRkR1Z1YzJsdmJrUmxjbWwyWVhScGRtVnpPaUIzTG1WNGRHVnVjMmx2Ym5NZ0ppWWdkeTVsZUhSbGJuTnBiMjV6TG1SbGNtbDJZWFJwZG1WekxBb2dJQ0FnSUNBZ0lDQWdJQ0JsZUhSbGJuTnBiMjVHY21GblJHVndkR2c2SUhjdVpYaDBaVzV6YVc5dWN5QW1KaUIzTG1WNGRHVnVjMmx2Ym5NdVpuSmhaMFJsY0hSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0JsZUhSbGJuTnBiMjVFY21GM1FuVm1abVZ5Y3pvZ2R5NWxlSFJsYm5OcGIyNXpJQ1ltSUhjdVpYaDBaVzV6YVc5dWN5NWtjbUYzUW5WbVptVnljeXdLSUNBZ0lDQWdJQ0FnSUNBZ1pYaDBaVzV6YVc5dVUyaGhaR1Z5VkdWNGRIVnlaVXhQUkRvZ2R5NWxlSFJsYm5OcGIyNXpJQ1ltSUhjdVpYaDBaVzV6YVc5dWN5NXphR0ZrWlhKVVpYaDBkWEpsVEU5RUxBb2dJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSmxja1Y0ZEdWdWMybHZia1p5WVdkRVpYQjBhRG9nYUNCOGZDQnVMbWhoY3lnaVJWaFVYMlp5WVdkZlpHVndkR2dpS1N3S0lDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVpYSkZlSFJsYm5OcGIyNUVjbUYzUW5WbVptVnljem9nYUNCOGZDQnVMbWhoY3lnaVYwVkNSMHhmWkhKaGQxOWlkV1ptWlhKeklpa3NDaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbVZ5UlhoMFpXNXphVzl1VTJoaFpHVnlWR1Y0ZEhWeVpVeHZaRG9nYUNCOGZDQnVMbWhoY3lnaVJWaFVYM05vWVdSbGNsOTBaWGgwZFhKbFgyeHZaQ0lwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxUWNtOW5jbUZ0UTJGamFHVkxaWGs2SUhjdVkzVnpkRzl0VUhKdlozSmhiVU5oWTJobFMyVjVLQ2tLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2VTaDNLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElFVWdQU0JiWFRzS0lDQWdJQ0FnSUNCcFppQW9keTV6YUdGa1pYSkpSQ0EvSUVVdWNIVnphQ2gzTG5Ob1lXUmxja2xFS1NBNklDaEZMbkIxYzJnb2R5NWpkWE4wYjIxV1pYSjBaWGhUYUdGa1pYSkpSQ2tzSUVVdWNIVnphQ2gzTG1OMWMzUnZiVVp5WVdkdFpXNTBVMmhoWkdWeVNVUXBLU3dnZHk1a1pXWnBibVZ6SUNFOVBTQjJiMmxrSURBcElHWnZjaWhzWlhRZ1JDQnBiaUIzTG1SbFptbHVaWE1wUlM1d2RYTm9LRVFwTENCRkxuQjFjMmdvZHk1a1pXWnBibVZ6VzBSZEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2R5NXBjMUpoZDFOb1lXUmxjazFoZEdWeWFXRnNJRDA5UFNBaE1TQW1KaUFvWWloRkxDQjNLU3dnUVNoRkxDQjNLU3dnUlM1d2RYTm9LSE11YjNWMGNIVjBSVzVqYjJScGJtY3BLU3dnUlM1d2RYTm9LSGN1WTNWemRHOXRVSEp2WjNKaGJVTmhZMmhsUzJWNUtTd2dSUzVxYjJsdUtDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJpS0hjc0lFVXBJSHNLSUNBZ0lDQWdJQ0IzTG5CMWMyZ29SUzV3Y21WamFYTnBiMjRwTENCM0xuQjFjMmdvUlM1dmRYUndkWFJGYm1OdlpHbHVaeWtzSUhjdWNIVnphQ2hGTG0xaGNFVnVZMjlrYVc1bktTd2dkeTV3ZFhOb0tFVXViV0YwWTJGd1JXNWpiMlJwYm1jcExDQjNMbkIxYzJnb1JTNWxiblpOWVhCTmIyUmxLU3dnZHk1d2RYTm9LRVV1Wlc1MlRXRndSVzVqYjJScGJtY3BMQ0IzTG5CMWMyZ29SUzVzYVdkb2RFMWhjRVZ1WTI5a2FXNW5LU3dnZHk1d2RYTm9LRVV1WlcxcGMzTnBkbVZOWVhCRmJtTnZaR2x1Wnlrc0lIY3VjSFZ6YUNoRkxtTnZiV0pwYm1VcExDQjNMbkIxYzJnb1JTNTJaWEowWlhoVmRuTXBMQ0IzTG5CMWMyZ29SUzVtYjJkRmVIQXlLU3dnZHk1d2RYTm9LRVV1YzJsNlpVRjBkR1Z1ZFdGMGFXOXVLU3dnZHk1d2RYTm9LRVV1YldGNFFtOXVaWE1wTENCM0xuQjFjMmdvUlM1dGIzSndhRlJoY21kbGRITkRiM1Z1ZENrc0lIY3VjSFZ6YUNoRkxtNTFiVVJwY2t4cFoyaDBjeWtzSUhjdWNIVnphQ2hGTG01MWJWQnZhVzUwVEdsbmFIUnpLU3dnZHk1d2RYTm9LRVV1Ym5WdFUzQnZkRXhwWjJoMGN5a3NJSGN1Y0hWemFDaEZMbTUxYlVobGJXbE1hV2RvZEhNcExDQjNMbkIxYzJnb1JTNXVkVzFTWldOMFFYSmxZVXhwWjJoMGN5a3NJSGN1Y0hWemFDaEZMbTUxYlVScGNreHBaMmgwVTJoaFpHOTNjeWtzSUhjdWNIVnphQ2hGTG01MWJWQnZhVzUwVEdsbmFIUlRhR0ZrYjNkektTd2dkeTV3ZFhOb0tFVXViblZ0VTNCdmRFeHBaMmgwVTJoaFpHOTNjeWtzSUhjdWNIVnphQ2hGTG5Ob1lXUnZkMDFoY0ZSNWNHVXBMQ0IzTG5CMWMyZ29SUzUwYjI1bFRXRndjR2x1Wnlrc0lIY3VjSFZ6YUNoRkxtNTFiVU5zYVhCd2FXNW5VR3hoYm1WektTd2dkeTV3ZFhOb0tFVXViblZ0UTJ4cGNFbHVkR1Z5YzJWamRHbHZiaWtzSUhjdWNIVnphQ2hGTG1admNtMWhkQ2tzSUhjdWNIVnphQ2hGTG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEJGYm1OdlpHbHVaeWtzSUhjdWNIVnphQ2hGTG5Ob1pXVnVRMjlzYjNKTllYQkZibU52WkdsdVp5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJCS0hjc0lFVXBJSHNLSUNBZ0lDQWdJQ0JoTG1ScGMyRmliR1ZCYkd3b0tTd2dSUzVwYzFkbFlrZE1NaUFtSmlCaExtVnVZV0pzWlNnd0tTd2dSUzV6ZFhCd2IzSjBjMVpsY25SbGVGUmxlSFIxY21WeklDWW1JR0V1Wlc1aFlteGxLREVwTENCRkxtbHVjM1JoYm1OcGJtY2dKaVlnWVM1bGJtRmliR1VvTWlrc0lFVXVhVzV6ZEdGdVkybHVaME52Ykc5eUlDWW1JR0V1Wlc1aFlteGxLRE1wTENCRkxtMWhjQ0FtSmlCaExtVnVZV0pzWlNnMEtTd2dSUzV0WVhSallYQWdKaVlnWVM1bGJtRmliR1VvTlNrc0lFVXVaVzUyVFdGd0lDWW1JR0V1Wlc1aFlteGxLRFlwTENCRkxtVnVkazFoY0VOMVltVlZWaUFtSmlCaExtVnVZV0pzWlNnM0tTd2dSUzVzYVdkb2RFMWhjQ0FtSmlCaExtVnVZV0pzWlNnNEtTd2dSUzVoYjAxaGNDQW1KaUJoTG1WdVlXSnNaU2c1S1N3Z1JTNWxiV2x6YzJsMlpVMWhjQ0FtSmlCaExtVnVZV0pzWlNneE1Da3NJRVV1WW5WdGNFMWhjQ0FtSmlCaExtVnVZV0pzWlNneE1Ta3NJRVV1Ym05eWJXRnNUV0Z3SUNZbUlHRXVaVzVoWW14bEtERXlLU3dnUlM1dlltcGxZM1JUY0dGalpVNXZjbTFoYkUxaGNDQW1KaUJoTG1WdVlXSnNaU2d4TXlrc0lFVXVkR0Z1WjJWdWRGTndZV05sVG05eWJXRnNUV0Z3SUNZbUlHRXVaVzVoWW14bEtERTBLU3dnUlM1amJHVmhjbU52WVhRZ0ppWWdZUzVsYm1GaWJHVW9NVFVwTENCRkxtTnNaV0Z5WTI5aGRFMWhjQ0FtSmlCaExtVnVZV0pzWlNneE5pa3NJRVV1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0lDWW1JR0V1Wlc1aFlteGxLREUzS1N3Z1JTNWpiR1ZoY21OdllYUk9iM0p0WVd4TllYQWdKaVlnWVM1bGJtRmliR1VvTVRncExDQkZMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQW1KaUJoTG1WdVlXSnNaU2d4T1Nrc0lFVXVjM0JsWTNWc1lYSk5ZWEFnSmlZZ1lTNWxibUZpYkdVb01qQXBMQ0JGTG5KdmRXZG9ibVZ6YzAxaGNDQW1KaUJoTG1WdVlXSnNaU2d5TVNrc0lFVXViV1YwWVd4dVpYTnpUV0Z3SUNZbUlHRXVaVzVoWW14bEtESXlLU3dnUlM1bmNtRmthV1Z1ZEUxaGNDQW1KaUJoTG1WdVlXSnNaU2d5TXlrc0lFVXVZV3h3YUdGTllYQWdKaVlnWVM1bGJtRmliR1VvTWpRcExDQkZMbUZzY0doaFZHVnpkQ0FtSmlCaExtVnVZV0pzWlNneU5Ta3NJRVV1ZG1WeWRHVjRRMjlzYjNKeklDWW1JR0V1Wlc1aFlteGxLREkyS1N3Z1JTNTJaWEowWlhoQmJIQm9ZWE1nSmlZZ1lTNWxibUZpYkdVb01qY3BMQ0JGTG5abGNuUmxlRlYyY3lBbUppQmhMbVZ1WVdKc1pTZ3lPQ2tzSUVVdWRtVnlkR1Y0VkdGdVoyVnVkSE1nSmlZZ1lTNWxibUZpYkdVb01qa3BMQ0JGTG5WMmMxWmxjblJsZUU5dWJIa2dKaVlnWVM1bGJtRmliR1VvTXpBcExDQkZMbVp2WnlBbUppQmhMbVZ1WVdKc1pTZ3pNU2tzSUhjdWNIVnphQ2hoTG0xaGMyc3BMQ0JoTG1ScGMyRmliR1ZCYkd3b0tTd2dSUzUxYzJWR2IyY2dKaVlnWVM1bGJtRmliR1VvTUNrc0lFVXVabXhoZEZOb1lXUnBibWNnSmlZZ1lTNWxibUZpYkdVb01Ta3NJRVV1Ykc5bllYSnBkR2h0YVdORVpYQjBhRUoxWm1abGNpQW1KaUJoTG1WdVlXSnNaU2d5S1N3Z1JTNXphMmx1Ym1sdVp5QW1KaUJoTG1WdVlXSnNaU2d6S1N3Z1JTNTFjMlZXWlhKMFpYaFVaWGgwZFhKbElDWW1JR0V1Wlc1aFlteGxLRFFwTENCRkxtMXZjbkJvVkdGeVoyVjBjeUFtSmlCaExtVnVZV0pzWlNnMUtTd2dSUzV0YjNKd2FFNXZjbTFoYkhNZ0ppWWdZUzVsYm1GaWJHVW9OaWtzSUVVdWNISmxiWFZzZEdsd2JHbGxaRUZzY0doaElDWW1JR0V1Wlc1aFlteGxLRGNwTENCRkxuTm9ZV1J2ZDAxaGNFVnVZV0pzWldRZ0ppWWdZUzVsYm1GaWJHVW9PQ2tzSUVVdWNHaDVjMmxqWVd4c2VVTnZjbkpsWTNSTWFXZG9kSE1nSmlZZ1lTNWxibUZpYkdVb09Ta3NJRVV1Wkc5MVlteGxVMmxrWldRZ0ppWWdZUzVsYm1GaWJHVW9NVEFwTENCRkxtWnNhWEJUYVdSbFpDQW1KaUJoTG1WdVlXSnNaU2d4TVNrc0lFVXVaR1Z3ZEdoUVlXTnJhVzVuSUNZbUlHRXVaVzVoWW14bEtERXlLU3dnUlM1a2FYUm9aWEpwYm1jZ0ppWWdZUzVsYm1GaWJHVW9NVE1wTENCRkxuTndaV04xYkdGeVNXNTBaVzV6YVhSNVRXRndJQ1ltSUdFdVpXNWhZbXhsS0RFMEtTd2dSUzV6Y0dWamRXeGhja052Ykc5eVRXRndJQ1ltSUdFdVpXNWhZbXhsS0RFMUtTd2dSUzUwY21GdWMyMXBjM05wYjI0Z0ppWWdZUzVsYm1GaWJHVW9NVFlwTENCRkxuUnlZVzV6YldsemMybHZiazFoY0NBbUppQmhMbVZ1WVdKc1pTZ3hOeWtzSUVVdWRHaHBZMnR1WlhOelRXRndJQ1ltSUdFdVpXNWhZbXhsS0RFNEtTd2dSUzV6YUdWbGJpQW1KaUJoTG1WdVlXSnNaU2d4T1Nrc0lFVXVjMmhsWlc1RGIyeHZjazFoY0NBbUppQmhMbVZ1WVdKc1pTZ3lNQ2tzSUVVdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhBZ0ppWWdZUzVsYm1GaWJHVW9NakVwTENCM0xuQjFjMmdvWVM1dFlYTnJLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUV3b2R5a2dld29nSUNBZ0lDQWdJR3hsZENCRklEMGdkbHQzTG5SNWNHVmRMQ0JFT3dvZ0lDQWdJQ0FnSUdsbUlDaEZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JWSUQwZ2NYUmJSVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lFUWdQU0IxWmk1amJHOXVaU2hWTG5WdWFXWnZjbTF6S1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnUkNBOUlIY3VkVzVwWm05eWJYTTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlFUTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJKS0hjc0lFVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1JEc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGVWdQU0F3TENCR0lEMGdZeTVzWlc1bmRHZzdJRlVnUENCR095QlZLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVHlBOUlHTmJWVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hQTG1OaFkyaGxTMlY1SUQwOVBTQkZLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JFSUQwZ1R5d2dLeXRFTG5WelpXUlVhVzFsY3pzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCRUlEMDlQU0IyYjJsa0lEQWdKaVlnS0VRZ1BTQnVaWGNnYUhnb2N5d2dSU3dnZHl3Z2Npa3NJR011Y0hWemFDaEVLU2tzSUVRN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnJLSGNwSUhzS0lDQWdJQ0FnSUNCcFppQW9MUzEzTG5WelpXUlVhVzFsY3lBOVBUMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUlNBOUlHTXVhVzVrWlhoUFppaDNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kxdEZYU0E5SUdOYll5NXNaVzVuZEdnZ0xTQXhYU3dnWXk1d2IzQW9LU3dnZHk1a1pYTjBjbTk1S0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdRaWgzS1NCN0NpQWdJQ0FnSUNBZ2JDNXlaVzF2ZG1Vb2R5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJRS0NrZ2V3b2dJQ0FnSUNBZ0lHd3VaR2x6Y0c5elpTZ3BPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JuWlhSUVlYSmhiV1YwWlhKek9pQmZMQW9nSUNBZ0lDQWdJR2RsZEZCeWIyZHlZVzFEWVdOb1pVdGxlVG9nZVN3S0lDQWdJQ0FnSUNCblpYUlZibWxtYjNKdGN6b2dUQ3dLSUNBZ0lDQWdJQ0JoWTNGMWFYSmxVSEp2WjNKaGJUb2dTU3dLSUNBZ0lDQWdJQ0J5Wld4bFlYTmxVSEp2WjNKaGJUb2dheXdLSUNBZ0lDQWdJQ0J5Wld4bFlYTmxVMmhoWkdWeVEyRmphR1U2SUVJc0NpQWdJQ0FnSUNBZ2NISnZaM0poYlhNNklHTXNDaUFnSUNBZ0lDQWdaR2x6Y0c5elpUb2dVQW9nSUNBZ2ZUc0tmUXBtZFc1amRHbHZiaUJtZUNncElIc0tJQ0FnSUd4bGRDQnpJRDBnYm1WM0lGZGxZV3ROWVhBN0NpQWdJQ0JtZFc1amRHbHZiaUJsS0hJcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlITXVaMlYwS0hJcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdklEMDlQU0IyYjJsa0lEQWdKaVlnS0c4Z1BTQjdmU3dnY3k1elpYUW9jaXdnYnlrcExDQnZPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZENoeUtTQjdDaUFnSUNBZ0lDQWdjeTVrWld4bGRHVW9jaWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdUtISXNJRzhzSUdFcElIc0tJQ0FnSUNBZ0lDQnpMbWRsZENoeUtWdHZYU0E5SUdFN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnBLQ2tnZXdvZ0lDQWdJQ0FnSUhNZ1BTQnVaWGNnVjJWaGEwMWhjRHNLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQmxMQW9nSUNBZ0lDQWdJSEpsYlc5MlpUb2dkQ3dLSUNBZ0lDQWdJQ0IxY0dSaGRHVTZJRzRzQ2lBZ0lDQWdJQ0FnWkdsemNHOXpaVG9nYVFvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCd2VDaHpMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdjeTVuY205MWNFOXlaR1Z5SUNFOVBTQmxMbWR5YjNWd1QzSmtaWElnUHlCekxtZHliM1Z3VDNKa1pYSWdMU0JsTG1keWIzVndUM0prWlhJZ09pQnpMbkpsYm1SbGNrOXlaR1Z5SUNFOVBTQmxMbkpsYm1SbGNrOXlaR1Z5SUQ4Z2N5NXlaVzVrWlhKUGNtUmxjaUF0SUdVdWNtVnVaR1Z5VDNKa1pYSWdPaUJ6TG0xaGRHVnlhV0ZzTG1sa0lDRTlQU0JsTG0xaGRHVnlhV0ZzTG1sa0lEOGdjeTV0WVhSbGNtbGhiQzVwWkNBdElHVXViV0YwWlhKcFlXd3VhV1FnT2lCekxub2dJVDA5SUdVdWVpQS9JSE11ZWlBdElHVXVlaUE2SUhNdWFXUWdMU0JsTG1sa093cDlDbVoxYm1OMGFXOXVJRmxzS0hNc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCekxtZHliM1Z3VDNKa1pYSWdJVDA5SUdVdVozSnZkWEJQY21SbGNpQS9JSE11WjNKdmRYQlBjbVJsY2lBdElHVXVaM0p2ZFhCUGNtUmxjaUE2SUhNdWNtVnVaR1Z5VDNKa1pYSWdJVDA5SUdVdWNtVnVaR1Z5VDNKa1pYSWdQeUJ6TG5KbGJtUmxjazl5WkdWeUlDMGdaUzV5Wlc1a1pYSlBjbVJsY2lBNklITXVlaUFoUFQwZ1pTNTZJRDhnWlM1NklDMGdjeTU2SURvZ2N5NXBaQ0F0SUdVdWFXUTdDbjBLWm5WdVkzUnBiMjRnV213b0tTQjdDaUFnSUNCc1pYUWdjeUE5SUZ0ZExDQmxJRDBnTUN3Z2RDQTlJRnRkTENCdUlEMGdXMTBzSUdrZ1BTQmJYVHNLSUNBZ0lHWjFibU4wYVc5dUlISW9LU0I3Q2lBZ0lDQWdJQ0FnWlNBOUlEQXNJSFF1YkdWdVozUm9JRDBnTUN3Z2JpNXNaVzVuZEdnZ1BTQXdMQ0JwTG14bGJtZDBhQ0E5SURBN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnZLSFVzSUdRc0lHWXNJRzBzSUhnc0lIWXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1p5QTlJSE5iWlYwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdjZ1BUMDlJSFp2YVdRZ01DQS9JQ2huSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ2RTNXBaQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2IySnFaV04wT2lCMUxBb2dJQ0FnSUNBZ0lDQWdJQ0JuWlc5dFpYUnllVG9nWkN3S0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXdzZJR1lzQ2lBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z3VDNKa1pYSTZJRzBzQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY2s5eVpHVnlPaUIxTG5KbGJtUmxjazl5WkdWeUxBb2dJQ0FnSUNBZ0lDQWdJQ0I2T2lCNExBb2dJQ0FnSUNBZ0lDQWdJQ0JuY205MWNEb2dkZ29nSUNBZ0lDQWdJSDBzSUhOYlpWMGdQU0JuS1NBNklDaG5MbWxrSUQwZ2RTNXBaQ3dnWnk1dlltcGxZM1FnUFNCMUxDQm5MbWRsYjIxbGRISjVJRDBnWkN3Z1p5NXRZWFJsY21saGJDQTlJR1lzSUdjdVozSnZkWEJQY21SbGNpQTlJRzBzSUdjdWNtVnVaR1Z5VDNKa1pYSWdQU0IxTG5KbGJtUmxjazl5WkdWeUxDQm5Mbm9nUFNCNExDQm5MbWR5YjNWd0lEMGdkaWtzSUdVckt5d2daenNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdFb2RTd2daQ3dnWml3Z2JTd2dlQ3dnZGlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ2J5aDFMQ0JrTENCbUxDQnRMQ0I0TENCMktUc0tJQ0FnSUNBZ0lDQm1MblJ5WVc1emJXbHpjMmx2YmlBK0lEQWdQeUJ1TG5CMWMyZ29aeWtnT2lCbUxuUnlZVzV6Y0dGeVpXNTBJRDA5UFNBaE1DQS9JR2t1Y0hWemFDaG5LU0E2SUhRdWNIVnphQ2huS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHd29kU3dnWkN3Z1ppd2diU3dnZUN3Z2Rpa2dld29nSUNBZ0lDQWdJR3hsZENCbklEMGdieWgxTENCa0xDQm1MQ0J0TENCNExDQjJLVHNLSUNBZ0lDQWdJQ0JtTG5SeVlXNXpiV2x6YzJsdmJpQStJREFnUHlCdUxuVnVjMmhwWm5Rb1p5a2dPaUJtTG5SeVlXNXpjR0Z5Wlc1MElEMDlQU0FoTUNBL0lHa3VkVzV6YUdsbWRDaG5LU0E2SUhRdWRXNXphR2xtZENobktUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR01vZFN3Z1pDa2dld29nSUNBZ0lDQWdJSFF1YkdWdVozUm9JRDRnTVNBbUppQjBMbk52Y25Rb2RTQjhmQ0J3ZUNrc0lHNHViR1Z1WjNSb0lENGdNU0FtSmlCdUxuTnZjblFvWkNCOGZDQlpiQ2tzSUdrdWJHVnVaM1JvSUQ0Z01TQW1KaUJwTG5OdmNuUW9aQ0I4ZkNCWmJDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJvS0NrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RTQTlJR1VzSUdRZ1BTQnpMbXhsYm1kMGFEc2dkU0E4SUdRN0lIVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtSUQwZ2MxdDFYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1l1YVdRZ1BUMDlJRzUxYkd3cElHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1MbWxrSUQwZ2JuVnNiQ3dnWmk1dlltcGxZM1FnUFNCdWRXeHNMQ0JtTG1kbGIyMWxkSEo1SUQwZ2JuVnNiQ3dnWmk1dFlYUmxjbWxoYkNBOUlHNTFiR3dzSUdZdVozSnZkWEFnUFNCdWRXeHNPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnYjNCaGNYVmxPaUIwTEFvZ0lDQWdJQ0FnSUhSeVlXNXpiV2x6YzJsMlpUb2diaXdLSUNBZ0lDQWdJQ0IwY21GdWMzQmhjbVZ1ZERvZ2FTd0tJQ0FnSUNBZ0lDQnBibWwwT2lCeUxBb2dJQ0FnSUNBZ0lIQjFjMmc2SUdFc0NpQWdJQ0FnSUNBZ2RXNXphR2xtZERvZ2JDd0tJQ0FnSUNBZ0lDQm1hVzVwYzJnNklHZ3NDaUFnSUNBZ0lDQWdjMjl5ZERvZ1l3b2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQnRlQ2dwSUhzS0lDQWdJR3hsZENCeklEMGdibVYzSUZkbFlXdE5ZWEE3Q2lBZ0lDQm1kVzVqZEdsdmJpQmxLRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY3k1b1lYTW9iaWtnUFQwOUlDRXhJRDhnS0hJZ1BTQnVaWGNnV213c0lITXVjMlYwS0c0c0lGc0tJQ0FnSUNBZ0lDQWdJQ0FnY2dvZ0lDQWdJQ0FnSUYwcEtTQTZJR2tnUGowZ2N5NW5aWFFvYmlrdWJHVnVaM1JvSUQ4Z0tISWdQU0J1WlhjZ1dtd3NJSE11WjJWMEtHNHBMbkIxYzJnb2Npa3BJRG9nY2lBOUlITXVaMlYwS0c0cFcybGRMQ0J5T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2RDZ3BJSHNLSUNBZ0lDQWdJQ0J6SUQwZ2JtVjNJRmRsWVd0TllYQTdDaUFnSUNCOUNpQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJR2RsZERvZ1pTd0tJQ0FnSUNBZ0lDQmthWE53YjNObE9pQjBDaUFnSUNCOU93cDlDbVoxYm1OMGFXOXVJR2Q0S0NrZ2V3b2dJQ0FnYkdWMElITWdQU0I3ZlRzS0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlobEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpXMlV1YVdSZElDRTlQU0IyYjJsa0lEQXBJSEpsZEhWeWJpQnpXMlV1YVdSZE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2REc0tJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9LR1V1ZEhsd1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKRWFYSmxZM1JwYjI1aGJFeHBaMmgwSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjQ2SUc1bGR5Qk5MQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ2JtVjNJR0ZsQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxOd2IzUk1hV2RvZENJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQ0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUc1bGR5Qk5MQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNDZJRzVsZHlCTkxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjam9nYm1WM0lHRmxMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1WlVOdmN6b2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR1Z1ZFcxaWNtRkRiM002SURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFkyRjVPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxCdmFXNTBUR2xuYUhRaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFFnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lCdVpYY2dUU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklHNWxkeUJoWlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemRHRnVZMlU2SURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFkyRjVPaUF3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWtobGJXbHpjR2hsY21WTWFXZG9kQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x5WldOMGFXOXVPaUJ1WlhjZ1RTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MydDVRMjlzYjNJNklHNWxkeUJoWlN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjNKdmRXNWtRMjlzYjNJNklHNWxkeUJoWlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKU1pXTjBRWEpsWVV4cFoyaDBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ2JtVjNJR0ZsTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiam9nYm1WM0lFMHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhiR1pYYVdSMGFEb2dibVYzSUUwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJHWklaV2xuYUhRNklHNWxkeUJOQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MxdGxMbWxrWFNBOUlIUXNJSFE3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmVHNLZlFwbWRXNWpkR2x2YmlCNGVDZ3BJSHNLSUNBZ0lHeGxkQ0J6SUQwZ2UzMDdDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9aU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzF0bExtbGtYU0FoUFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnYzF0bExtbGtYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNobExuUjVjR1VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlSR2x5WldOMGFXOXVZV3hNYVdkb2RDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaRzkzUW1saGN6b2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1RtOXliV0ZzUW1saGN6b2dNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1VtRmthWFZ6T2lBeExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2ROWVhCVGFYcGxPaUJ1WlhjZ1dBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlRjRzkwVEdsbmFIUWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZV1J2ZDBKcFlYTTZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSdmQwNXZjbTFoYkVKcFlYTTZJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSdmQxSmhaR2wxY3pvZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaRzkzVFdGd1UybDZaVG9nYm1WM0lGZ0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlVRzlwYm5STWFXZG9kQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1FtbGhjem9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNUbTl5YldGc1FtbGhjem9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaFpHOTNVbUZrYVhWek9pQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphR0ZrYjNkTllYQlRhWHBsT2lCdVpYY2dXQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1EyRnRaWEpoVG1WaGNqb2dNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmhoWkc5M1EyRnRaWEpoUm1GeU9pQXhaVE1LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCelcyVXVhV1JkSUQwZ2RDd2dkRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlPd3A5Q25aaGNpQjVlQ0E5SURBN0NtWjFibU4wYVc5dUlIWjRLSE1zSUdVcElIc0tJQ0FnSUhKbGRIVnliaUFvWlM1allYTjBVMmhoWkc5M0lEOGdNU0E2SURBcElDMGdLSE11WTJGemRGTm9ZV1J2ZHlBL0lERWdPaUF3S1RzS2ZRcG1kVzVqZEdsdmJpQmZlQ2h6TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SUc1bGR5Qm5lQ3dnYmlBOUlIaDRLQ2tzSUdrZ1BTQjdDaUFnSUNBZ0lDQWdkbVZ5YzJsdmJqb2dNQ3dLSUNBZ0lDQWdJQ0JvWVhOb09pQjdDaUFnSUNBZ0lDQWdJQ0FnSUdScGNtVmpkR2x2Ym1Gc1RHVnVaM1JvT2lBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUk1aVzVuZEdnNklDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNCemNHOTBUR1Z1WjNSb09pQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtVmpkRUZ5WldGTVpXNW5kR2c2SUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0JvWlcxcFRHVnVaM1JvT2lBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFJHbHlaV04wYVc5dVlXeFRhR0ZrYjNkek9pQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRVRzlwYm5SVGFHRmtiM2R6T2lBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYm5WdFUzQnZkRk5vWVdSdmQzTTZJQzB4Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCaGJXSnBaVzUwT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBS0lDQWdJQ0FnSUNCZExBb2dJQ0FnSUNBZ0lIQnliMkpsT2lCYlhTd0tJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNWhiRG9nVzEwc0NpQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dVlXeFRhR0ZrYjNjNklGdGRMQW9nSUNBZ0lDQWdJR1JwY21WamRHbHZibUZzVTJoaFpHOTNUV0Z3T2lCYlhTd0tJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNWhiRk5vWVdSdmQwMWhkSEpwZURvZ1cxMHNDaUFnSUNBZ0lDQWdjM0J2ZERvZ1cxMHNDaUFnSUNBZ0lDQWdjM0J2ZEZOb1lXUnZkem9nVzEwc0NpQWdJQ0FnSUNBZ2MzQnZkRk5vWVdSdmQwMWhjRG9nVzEwc0NpQWdJQ0FnSUNBZ2MzQnZkRk5vWVdSdmQwMWhkSEpwZURvZ1cxMHNDaUFnSUNBZ0lDQWdjbVZqZEVGeVpXRTZJRnRkTEFvZ0lDQWdJQ0FnSUhKbFkzUkJjbVZoVEZSRE1Ub2diblZzYkN3S0lDQWdJQ0FnSUNCeVpXTjBRWEpsWVV4VVF6STZJRzUxYkd3c0NpQWdJQ0FnSUNBZ2NHOXBiblE2SUZ0ZExBb2dJQ0FnSUNBZ0lIQnZhVzUwVTJoaFpHOTNPaUJiWFN3S0lDQWdJQ0FnSUNCd2IybHVkRk5vWVdSdmQwMWhjRG9nVzEwc0NpQWdJQ0FnSUNBZ2NHOXBiblJUYUdGa2IzZE5ZWFJ5YVhnNklGdGRMQW9nSUNBZ0lDQWdJR2hsYldrNklGdGRDaUFnSUNCOU93b2dJQ0FnWm05eUtHeGxkQ0JvSUQwZ01Ec2dhQ0E4SURrN0lHZ3JLeWxwTG5CeWIySmxMbkIxYzJnb2JtVjNJRTBwT3dvZ0lDQWdiR1YwSUhJZ1BTQnVaWGNnVFN3Z2J5QTlJRzVsZHlCd1pTd2dZU0E5SUc1bGR5QndaVHNLSUNBZ0lHWjFibU4wYVc5dUlHd29hQ3dnZFNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ01Dd2daaUE5SURBc0lHMGdQU0F3T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYXlBOUlEQTdJR3NnUENBNU95QnJLeXNwYVM1d2NtOWlaVnRyWFM1elpYUW9NQ3dnTUN3Z01DazdDaUFnSUNBZ0lDQWdiR1YwSUhnZ1BTQXdMQ0IySUQwZ01Dd2daeUE5SURBc0lIQWdQU0F3TENCZklEMGdNQ3dnZVNBOUlEQXNJR0lnUFNBd0xDQkJJRDBnTURzS0lDQWdJQ0FnSUNCb0xuTnZjblFvZG5ncE93b2dJQ0FnSUNBZ0lHeGxkQ0JNSUQwZ2RTQWhQVDBnSVRBZ1B5Qk5ZWFJvTGxCSklEb2dNVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR3NnUFNBd0xDQkNJRDBnYUM1c1pXNW5kR2c3SUdzZ1BDQkNPeUJyS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1VDQTlJR2hiYTEwc0lIY2dQU0JRTG1OdmJHOXlMQ0JGSUQwZ1VDNXBiblJsYm5OcGRIa3NJRVFnUFNCUUxtUnBjM1JoYm1ObExDQlZJRDBnVUM1emFHRmtiM2NnSmlZZ1VDNXphR0ZrYjNjdWJXRndJRDhnVUM1emFHRmtiM2N1YldGd0xuUmxlSFIxY21VZ09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVUM1cGMwRnRZbWxsYm5STWFXZG9kQ2tnWkNBclBTQjNMbklnS2lCRklDb2dUQ3dnWmlBclBTQjNMbWNnS2lCRklDb2dUQ3dnYlNBclBTQjNMbUlnS2lCRklDb2dURHNLSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1VDNXBjMHhwWjJoMFVISnZZbVVwSUdadmNpaHNaWFFnUmlBOUlEQTdJRVlnUENBNU95QkdLeXNwYVM1d2NtOWlaVnRHWFM1aFpHUlRZMkZzWldSV1pXTjBiM0lvVUM1emFDNWpiMlZtWm1samFXVnVkSE5iUmwwc0lFVXBPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoUUxtbHpSR2x5WldOMGFXOXVZV3hNYVdkb2RDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVZZ1BTQjBMbWRsZENoUUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hHTG1OdmJHOXlMbU52Y0hrb1VDNWpiMnh2Y2lrdWJYVnNkR2x3YkhsVFkyRnNZWElvVUM1cGJuUmxibk5wZEhrZ0tpQk1LU3dnVUM1allYTjBVMmhoWkc5M0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFOGdQU0JRTG5Ob1lXUnZkeXdnYm1VZ1BTQnVMbWRsZENoUUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlM1emFHRmtiM2RDYVdGeklEMGdUeTVpYVdGekxDQnVaUzV6YUdGa2IzZE9iM0p0WVd4Q2FXRnpJRDBnVHk1dWIzSnRZV3hDYVdGekxDQnVaUzV6YUdGa2IzZFNZV1JwZFhNZ1BTQlBMbkpoWkdsMWN5d2dibVV1YzJoaFpHOTNUV0Z3VTJsNlpTQTlJRTh1YldGd1UybDZaU3dnYVM1a2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZDF0NFhTQTlJRzVsTENCcExtUnBjbVZqZEdsdmJtRnNVMmhoWkc5M1RXRndXM2hkSUQwZ1ZTd2dhUzVrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoZEhKcGVGdDRYU0E5SUZBdWMyaGhaRzkzTG0xaGRISnBlQ3dnZVNzck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNWthWEpsWTNScGIyNWhiRnQ0WFNBOUlFWXNJSGdyS3pzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hRTG1selUzQnZkRXhwWjJoMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUmlBOUlIUXVaMlYwS0ZBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRVl1Y0c5emFYUnBiMjR1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtGQXViV0YwY21sNFYyOXliR1FwTENCR0xtTnZiRzl5TG1OdmNIa29keWt1YlhWc2RHbHdiSGxUWTJGc1lYSW9SU0FxSUV3cExDQkdMbVJwYzNSaGJtTmxJRDBnUkN3Z1JpNWpiMjVsUTI5eklEMGdUV0YwYUM1amIzTW9VQzVoYm1kc1pTa3NJRVl1Y0dWdWRXMWljbUZEYjNNZ1BTQk5ZWFJvTG1OdmN5aFFMbUZ1WjJ4bElDb2dLREVnTFNCUUxuQmxiblZ0WW5KaEtTa3NJRVl1WkdWallYa2dQU0JRTG1SbFkyRjVMQ0JRTG1OaGMzUlRhR0ZrYjNjcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1R5QTlJRkF1YzJoaFpHOTNMQ0J1WlNBOUlHNHVaMlYwS0ZBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsTG5Ob1lXUnZkMEpwWVhNZ1BTQlBMbUpwWVhNc0lHNWxMbk5vWVdSdmQwNXZjbTFoYkVKcFlYTWdQU0JQTG01dmNtMWhiRUpwWVhNc0lHNWxMbk5vWVdSdmQxSmhaR2wxY3lBOUlFOHVjbUZrYVhWekxDQnVaUzV6YUdGa2IzZE5ZWEJUYVhwbElEMGdUeTV0WVhCVGFYcGxMQ0JwTG5Od2IzUlRhR0ZrYjNkYloxMGdQU0J1WlN3Z2FTNXpjRzkwVTJoaFpHOTNUV0Z3VzJkZElEMGdWU3dnYVM1emNHOTBVMmhoWkc5M1RXRjBjbWw0VzJkZElEMGdVQzV6YUdGa2IzY3ViV0YwY21sNExDQkJLeXM3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwTG5Od2IzUmJaMTBnUFNCR0xDQm5LeXM3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9VQzVwYzFKbFkzUkJjbVZoVEdsbmFIUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCR0lEMGdkQzVuWlhRb1VDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdMbU52Ykc5eUxtTnZjSGtvZHlrdWJYVnNkR2x3YkhsVFkyRnNZWElvUlNrc0lFWXVhR0ZzWmxkcFpIUm9Mbk5sZENoUUxuZHBaSFJvSUNvZ0xqVXNJREFzSURBcExDQkdMbWhoYkdaSVpXbG5hSFF1YzJWMEtEQXNJRkF1YUdWcFoyaDBJQ29nTGpVc0lEQXBMQ0JwTG5KbFkzUkJjbVZoVzNCZElEMGdSaXdnY0Nzck93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0ZBdWFYTlFiMmx1ZEV4cFoyaDBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1JpQTlJSFF1WjJWMEtGQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VZdVkyOXNiM0l1WTI5d2VTaFFMbU52Ykc5eUtTNXRkV3gwYVhCc2VWTmpZV3hoY2loUUxtbHVkR1Z1YzJsMGVTQXFJRXdwTENCR0xtUnBjM1JoYm1ObElEMGdVQzVrYVhOMFlXNWpaU3dnUmk1a1pXTmhlU0E5SUZBdVpHVmpZWGtzSUZBdVkyRnpkRk5vWVdSdmR5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlBJRDBnVUM1emFHRmtiM2NzSUc1bElEMGdiaTVuWlhRb1VDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1VdWMyaGhaRzkzUW1saGN5QTlJRTh1WW1saGN5d2dibVV1YzJoaFpHOTNUbTl5YldGc1FtbGhjeUE5SUU4dWJtOXliV0ZzUW1saGN5d2dibVV1YzJoaFpHOTNVbUZrYVhWeklEMGdUeTV5WVdScGRYTXNJRzVsTG5Ob1lXUnZkMDFoY0ZOcGVtVWdQU0JQTG0xaGNGTnBlbVVzSUc1bExuTm9ZV1J2ZDBOaGJXVnlZVTVsWVhJZ1BTQlBMbU5oYldWeVlTNXVaV0Z5TENCdVpTNXphR0ZrYjNkRFlXMWxjbUZHWVhJZ1BTQlBMbU5oYldWeVlTNW1ZWElzSUdrdWNHOXBiblJUYUdGa2IzZGJkbDBnUFNCdVpTd2dhUzV3YjJsdWRGTm9ZV1J2ZDAxaGNGdDJYU0E5SUZVc0lHa3VjRzlwYm5SVGFHRmtiM2ROWVhSeWFYaGJkbDBnUFNCUUxuTm9ZV1J2ZHk1dFlYUnlhWGdzSUdJckt6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa3VjRzlwYm5SYmRsMGdQU0JHTENCMkt5czdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1VDNXBjMGhsYldsemNHaGxjbVZNYVdkb2RDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVZZ1BTQjBMbWRsZENoUUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFWXVjMnQ1UTI5c2IzSXVZMjl3ZVNoUUxtTnZiRzl5S1M1dGRXeDBhWEJzZVZOallXeGhjaWhGSUNvZ1RDa3NJRVl1WjNKdmRXNWtRMjlzYjNJdVkyOXdlU2hRTG1keWIzVnVaRU52Ykc5eUtTNXRkV3gwYVhCc2VWTmpZV3hoY2loRklDb2dUQ2tzSUdrdWFHVnRhVnRmWFNBOUlFWXNJRjhyS3pzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J3SUQ0Z01DQW1KaUFvWlM1cGMxZGxZa2RNTWlCOGZDQnpMbWhoY3lnaVQwVlRYM1JsZUhSMWNtVmZabXh2WVhSZmJHbHVaV0Z5SWlrZ1BUMDlJQ0V3SUQ4Z0tHa3VjbVZqZEVGeVpXRk1WRU14SUQwZ2FXVXVURlJEWDBaTVQwRlVYekVzSUdrdWNtVmpkRUZ5WldGTVZFTXlJRDBnYVdVdVRGUkRYMFpNVDBGVVh6SXBJRG9nY3k1b1lYTW9JazlGVTE5MFpYaDBkWEpsWDJoaGJHWmZabXh2WVhSZmJHbHVaV0Z5SWlrZ1BUMDlJQ0V3SUQ4Z0tHa3VjbVZqZEVGeVpXRk1WRU14SUQwZ2FXVXVURlJEWDBoQlRFWmZNU3dnYVM1eVpXTjBRWEpsWVV4VVF6SWdQU0JwWlM1TVZFTmZTRUZNUmw4eUtTQTZJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRlZ1WVdKc1pTQjBieUIxYzJVZ1VtVmpkRUZ5WldGTWFXZG9kQzRnVFdsemMybHVaeUJYWldKSFRDQmxlSFJsYm5OcGIyNXpMaUlwS1N3Z2FTNWhiV0pwWlc1MFd6QmRJRDBnWkN3Z2FTNWhiV0pwWlc1MFd6RmRJRDBnWml3Z2FTNWhiV0pwWlc1MFd6SmRJRDBnYlRzS0lDQWdJQ0FnSUNCc1pYUWdTU0E5SUdrdWFHRnphRHNLSUNBZ0lDQWdJQ0FvU1M1a2FYSmxZM1JwYjI1aGJFeGxibWQwYUNBaFBUMGdlQ0I4ZkNCSkxuQnZhVzUwVEdWdVozUm9JQ0U5UFNCMklIeDhJRWt1YzNCdmRFeGxibWQwYUNBaFBUMGdaeUI4ZkNCSkxuSmxZM1JCY21WaFRHVnVaM1JvSUNFOVBTQndJSHg4SUVrdWFHVnRhVXhsYm1kMGFDQWhQVDBnWHlCOGZDQkpMbTUxYlVScGNtVmpkR2x2Ym1Gc1UyaGhaRzkzY3lBaFBUMGdlU0I4ZkNCSkxtNTFiVkJ2YVc1MFUyaGhaRzkzY3lBaFBUMGdZaUI4ZkNCSkxtNTFiVk53YjNSVGFHRmtiM2R6SUNFOVBTQkJLU0FtSmlBb2FTNWthWEpsWTNScGIyNWhiQzVzWlc1bmRHZ2dQU0I0TENCcExuTndiM1F1YkdWdVozUm9JRDBnWnl3Z2FTNXlaV04wUVhKbFlTNXNaVzVuZEdnZ1BTQndMQ0JwTG5CdmFXNTBMbXhsYm1kMGFDQTlJSFlzSUdrdWFHVnRhUzVzWlc1bmRHZ2dQU0JmTENCcExtUnBjbVZqZEdsdmJtRnNVMmhoWkc5M0xteGxibWQwYUNBOUlIa3NJR2t1WkdseVpXTjBhVzl1WVd4VGFHRmtiM2ROWVhBdWJHVnVaM1JvSUQwZ2VTd2dhUzV3YjJsdWRGTm9ZV1J2ZHk1c1pXNW5kR2dnUFNCaUxDQnBMbkJ2YVc1MFUyaGhaRzkzVFdGd0xteGxibWQwYUNBOUlHSXNJR2t1YzNCdmRGTm9ZV1J2ZHk1c1pXNW5kR2dnUFNCQkxDQnBMbk53YjNSVGFHRmtiM2ROWVhBdWJHVnVaM1JvSUQwZ1FTd2dhUzVrYVhKbFkzUnBiMjVoYkZOb1lXUnZkMDFoZEhKcGVDNXNaVzVuZEdnZ1BTQjVMQ0JwTG5CdmFXNTBVMmhoWkc5M1RXRjBjbWw0TG14bGJtZDBhQ0E5SUdJc0lHa3VjM0J2ZEZOb1lXUnZkMDFoZEhKcGVDNXNaVzVuZEdnZ1BTQkJMQ0JKTG1ScGNtVmpkR2x2Ym1Gc1RHVnVaM1JvSUQwZ2VDd2dTUzV3YjJsdWRFeGxibWQwYUNBOUlIWXNJRWt1YzNCdmRFeGxibWQwYUNBOUlHY3NJRWt1Y21WamRFRnlaV0ZNWlc1bmRHZ2dQU0J3TENCSkxtaGxiV2xNWlc1bmRHZ2dQU0JmTENCSkxtNTFiVVJwY21WamRHbHZibUZzVTJoaFpHOTNjeUE5SUhrc0lFa3ViblZ0VUc5cGJuUlRhR0ZrYjNkeklEMGdZaXdnU1M1dWRXMVRjRzkwVTJoaFpHOTNjeUE5SUVFc0lHa3VkbVZ5YzJsdmJpQTlJSGw0S3lzcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdZeWhvTENCMUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdRZ1BTQXdMQ0JtSUQwZ01Dd2diU0E5SURBc0lIZ2dQU0F3TENCMklEMGdNQ3dnWnlBOUlIVXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdjQ0E5SURBc0lGOGdQU0JvTG14bGJtZDBhRHNnY0NBOElGODdJSEFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNUlEMGdhRnR3WFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hrdWFYTkVhWEpsWTNScGIyNWhiRXhwWjJoMEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlHa3VaR2x5WldOMGFXOXVZV3hiWkYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaUxtUnBjbVZqZEdsdmJpNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZVM1dFlYUnlhWGhYYjNKc1pDa3NJSEl1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIa3VkR0Z5WjJWMExtMWhkSEpwZUZkdmNteGtLU3dnWWk1a2FYSmxZM1JwYjI0dWMzVmlLSElwTENCaUxtUnBjbVZqZEdsdmJpNTBjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9aeWtzSUdRckt6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoNUxtbHpVM0J2ZEV4cFoyaDBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lpQTlJR2t1YzNCdmRGdHRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0l1Y0c5emFYUnBiMjR1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIa3ViV0YwY21sNFYyOXliR1FwTENCaUxuQnZjMmwwYVc5dUxtRndjR3g1VFdGMGNtbDROQ2huS1N3Z1lpNWthWEpsWTNScGIyNHVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hrdWJXRjBjbWw0VjI5eWJHUXBMQ0J5TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaDVMblJoY21kbGRDNXRZWFJ5YVhoWGIzSnNaQ2tzSUdJdVpHbHlaV04wYVc5dUxuTjFZaWh5S1N3Z1lpNWthWEpsWTNScGIyNHVkSEpoYm5ObWIzSnRSR2x5WldOMGFXOXVLR2NwTENCdEt5czdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2VTNXBjMUpsWTNSQmNtVmhUR2xuYUhRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JpSUQwZ2FTNXlaV04wUVhKbFlWdDRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0l1Y0c5emFYUnBiMjR1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIa3ViV0YwY21sNFYyOXliR1FwTENCaUxuQnZjMmwwYVc5dUxtRndjR3g1VFdGMGNtbDROQ2huS1N3Z1lTNXBaR1Z1ZEdsMGVTZ3BMQ0J2TG1OdmNIa29lUzV0WVhSeWFYaFhiM0pzWkNrc0lHOHVjSEpsYlhWc2RHbHdiSGtvWnlrc0lHRXVaWGgwY21GamRGSnZkR0YwYVc5dUtHOHBMQ0JpTG1oaGJHWlhhV1IwYUM1elpYUW9lUzUzYVdSMGFDQXFJQzQxTENBd0xDQXdLU3dnWWk1b1lXeG1TR1ZwWjJoMExuTmxkQ2d3TENCNUxtaGxhV2RvZENBcUlDNDFMQ0F3S1N3Z1lpNW9ZV3htVjJsa2RHZ3VZWEJ3YkhsTllYUnlhWGcwS0dFcExDQmlMbWhoYkdaSVpXbG5hSFF1WVhCd2JIbE5ZWFJ5YVhnMEtHRXBMQ0I0S3lzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZVM1cGMxQnZhVzUwVEdsbmFIUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaUlEMGdhUzV3YjJsdWRGdG1YVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0l1Y0c5emFYUnBiMjR1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIa3ViV0YwY21sNFYyOXliR1FwTENCaUxuQnZjMmwwYVc5dUxtRndjR3g1VFdGMGNtbDROQ2huS1N3Z1ppc3JPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIa3VhWE5JWlcxcGMzQm9aWEpsVEdsbmFIUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaUlEMGdhUzVvWlcxcFczWmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZaTVrYVhKbFkzUnBiMjR1YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtIa3ViV0YwY21sNFYyOXliR1FwTENCaUxtUnBjbVZqZEdsdmJpNTBjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9aeWtzSUdJdVpHbHlaV04wYVc5dUxtNXZjbTFoYkdsNlpTZ3BMQ0IyS3lzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCeVpYUjFjbTRnZXdvZ0lDQWdJQ0FnSUhObGRIVndPaUJzTEFvZ0lDQWdJQ0FnSUhObGRIVndWbWxsZHpvZ1l5d0tJQ0FnSUNBZ0lDQnpkR0YwWlRvZ2FRb2dJQ0FnZlRzS2ZRcG1kVzVqZEdsdmJpQWtiQ2h6TENCbEtTQjdDaUFnSUNCc1pYUWdkQ0E5SUc1bGR5QmZlQ2h6TENCbEtTd2diaUE5SUZ0ZExDQnBJRDBnVzEwN0NpQWdJQ0JtZFc1amRHbHZiaUJ5S0NrZ2V3b2dJQ0FnSUNBZ0lHNHViR1Z1WjNSb0lEMGdNQ3dnYVM1c1pXNW5kR2dnUFNBd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdieWgxS1NCN0NpQWdJQ0FnSUNBZ2JpNXdkWE5vS0hVcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdZU2gxS1NCN0NpQWdJQ0FnSUNBZ2FTNXdkWE5vS0hVcE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdiQ2gxS1NCN0NpQWdJQ0FnSUNBZ2RDNXpaWFIxY0NodUxDQjFLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdNb2RTa2dld29nSUNBZ0lDQWdJSFF1YzJWMGRYQldhV1YzS0c0c0lIVXBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JwYm1sME9pQnlMQW9nSUNBZ0lDQWdJSE4wWVhSbE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4cFoyaDBjMEZ5Y21GNU9pQnVMQW9nSUNBZ0lDQWdJQ0FnSUNCemFHRmtiM2R6UVhKeVlYazZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHeHBaMmgwY3pvZ2RBb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjMlYwZFhCTWFXZG9kSE02SUd3c0NpQWdJQ0FnSUNBZ2MyVjBkWEJNYVdkb2RITldhV1YzT2lCakxBb2dJQ0FnSUNBZ0lIQjFjMmhNYVdkb2REb2dieXdLSUNBZ0lDQWdJQ0J3ZFhOb1UyaGhaRzkzT2lCaENpQWdJQ0I5T3dwOUNtWjFibU4wYVc5dUlFMTRLSE1zSUdVcElIc0tJQ0FnSUd4bGRDQjBJRDBnYm1WM0lGZGxZV3ROWVhBN0NpQWdJQ0JtZFc1amRHbHZiaUJ1S0hJc0lHOGdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR0U3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFF1YUdGektISXBJRDA5UFNBaE1TQS9JQ2hoSUQwZ2JtVjNJQ1JzS0hNc0lHVXBMQ0IwTG5ObGRDaHlMQ0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lHRUtJQ0FnSUNBZ0lDQmRLU2tnT2lCdklENDlJSFF1WjJWMEtISXBMbXhsYm1kMGFDQS9JQ2hoSUQwZ2JtVjNJQ1JzS0hNc0lHVXBMQ0IwTG1kbGRDaHlLUzV3ZFhOb0tHRXBLU0E2SUdFZ1BTQjBMbWRsZENoeUtWdHZYU3dnWVRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHa29LU0I3Q2lBZ0lDQWdJQ0FnZENBOUlHNWxkeUJYWldGclRXRndPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHNHNDaUFnSUNBZ0lDQWdaR2x6Y0c5elpUb2dhUW9nSUNBZ2ZUc0tmUXAyWVhJZ1pXOGdQU0JqYkdGemN5QmxlSFJsYm1SeklHUjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ0lrMWxjMmhFWlhCMGFFMWhkR1Z5YVdGc0lpd2dkR2hwY3k1a1pYQjBhRkJoWTJ0cGJtY2dQU0JPWkN3Z2RHaHBjeTV0WVhBZ1BTQnVkV3hzTENCMGFHbHpMbUZzY0doaFRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bElEMGdNU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJDYVdGeklEMGdNQ3dnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0FoTVN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNBeExDQjBhR2x6TG1adlp5QTlJQ0V4TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtUmxjSFJvVUdGamEybHVaeUE5SUdVdVpHVndkR2hRWVdOcmFXNW5MQ0IwYUdsekxtMWhjQ0E5SUdVdWJXRndMQ0IwYUdsekxtRnNjR2hoVFdGd0lEMGdaUzVoYkhCb1lVMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5d2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQmxMbmRwY21WbWNtRnRaU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0JsTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUN3Z2RHaHBjenNLSUNBZ0lIMEtmVHNLWlc4dWNISnZkRzkwZVhCbExtbHpUV1Z6YUVSbGNIUm9UV0YwWlhKcFlXd2dQU0FoTURzS2RtRnlJSFJ2SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJrZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pOWlhOb1JHbHpkR0Z1WTJWTllYUmxjbWxoYkNJc0lIUm9hWE11Y21WbVpYSmxibU5sVUc5emFYUnBiMjRnUFNCdVpYY2dUU3dnZEdocGN5NXVaV0Z5UkdsemRHRnVZMlVnUFNBeExDQjBhR2x6TG1aaGNrUnBjM1JoYm1ObElEMGdNV1V6TENCMGFHbHpMbTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZV3h3YUdGTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVZ1BTQXhMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRUpwWVhNZ1BTQXdMQ0IwYUdsekxtWnZaeUE5SUNFeExDQjBhR2x6TG5ObGRGWmhiSFZsY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbkpsWm1WeVpXNWpaVkJ2YzJsMGFXOXVMbU52Y0hrb1pTNXlaV1psY21WdVkyVlFiM05wZEdsdmJpa3NJSFJvYVhNdWJtVmhja1JwYzNSaGJtTmxJRDBnWlM1dVpXRnlSR2x6ZEdGdVkyVXNJSFJvYVhNdVptRnlSR2x6ZEdGdVkyVWdQU0JsTG1aaGNrUnBjM1JoYm1ObExDQjBhR2x6TG0xaGNDQTlJR1V1YldGd0xDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ1pTNWhiSEJvWVUxaGNDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnUFNCbExtUnBjM0JzWVdObGJXVnVkRTFoY0N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SUdVdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SUdVdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3l3Z2RHaHBjenNLSUNBZ0lIMEtmVHNLZEc4dWNISnZkRzkwZVhCbExtbHpUV1Z6YUVScGMzUmhibU5sVFdGMFpYSnBZV3dnUFNBaE1Ec0tkbUZ5SUdKNElEMGdZSFp2YVdRZ2JXRnBiaWdwSUhzS0NXZHNYMUJ2YzJsMGFXOXVJRDBnZG1Wak5DZ2djRzl6YVhScGIyNHNJREV1TUNBcE93cDlZQ3dnZDNnZ1BTQmdkVzVwWm05eWJTQnpZVzF3YkdWeU1rUWdjMmhoWkc5M1gzQmhjM003Q25WdWFXWnZjbTBnZG1Wak1pQnlaWE52YkhWMGFXOXVPd3AxYm1sbWIzSnRJR1pzYjJGMElISmhaR2wxY3pzS0kybHVZMngxWkdVZ1BIQmhZMnRwYm1jK0NuWnZhV1FnYldGcGJpZ3BJSHNLQ1dOdmJuTjBJR1pzYjJGMElITmhiWEJzWlhNZ1BTQm1iRzloZENnZ1ZsTk5YMU5CVFZCTVJWTWdLVHNLQ1dac2IyRjBJRzFsWVc0Z1BTQXdMakE3Q2dsbWJHOWhkQ0J6Y1hWaGNtVmtYMjFsWVc0Z1BTQXdMakE3Q2dsbWJHOWhkQ0IxZGxOMGNtbGtaU0E5SUhOaGJYQnNaWE1nUEQwZ01TNHdJRDhnTUM0d0lEb2dNaTR3SUM4Z0tDQnpZVzF3YkdWeklDMGdNUzR3SUNrN0NnbG1iRzloZENCMWRsTjBZWEowSUQwZ2MyRnRjR3hsY3lBOFBTQXhMakFnUHlBd0xqQWdPaUF0SURFdU1Ec0tDV1p2Y2lBb0lHWnNiMkYwSUdrZ1BTQXdMakE3SUdrZ1BDQnpZVzF3YkdWek95QnBJQ3NySUNrZ2V3b0pDV1pzYjJGMElIVjJUMlptYzJWMElEMGdkWFpUZEdGeWRDQXJJR2tnS2lCMWRsTjBjbWxrWlRzS0NRa2phV1prWldZZ1NFOVNTVnBQVGxSQlRGOVFRVk5UQ2drSkNYWmxZeklnWkdsemRISnBZblYwYVc5dUlEMGdkVzV3WVdOclVrZENRVlJ2TWtoaGJHWW9JSFJsZUhSMWNtVXlSQ2dnYzJoaFpHOTNYM0JoYzNNc0lDZ2daMnhmUm5KaFowTnZiM0prTG5oNUlDc2dkbVZqTWlnZ2RYWlBabVp6WlhRc0lEQXVNQ0FwSUNvZ2NtRmthWFZ6SUNrZ0x5QnlaWE52YkhWMGFXOXVJQ2tnS1RzS0NRa0piV1ZoYmlBclBTQmthWE4wY21saWRYUnBiMjR1ZURzS0NRa0pjM0YxWVhKbFpGOXRaV0Z1SUNzOUlHUnBjM1J5YVdKMWRHbHZiaTU1SUNvZ1pHbHpkSEpwWW5WMGFXOXVMbmtnS3lCa2FYTjBjbWxpZFhScGIyNHVlQ0FxSUdScGMzUnlhV0oxZEdsdmJpNTRPd29KQ1NObGJITmxDZ2tKQ1dac2IyRjBJR1JsY0hSb0lEMGdkVzV3WVdOclVrZENRVlJ2UkdWd2RHZ29JSFJsZUhSMWNtVXlSQ2dnYzJoaFpHOTNYM0JoYzNNc0lDZ2daMnhmUm5KaFowTnZiM0prTG5oNUlDc2dkbVZqTWlnZ01DNHdMQ0IxZGs5bVpuTmxkQ0FwSUNvZ2NtRmthWFZ6SUNrZ0x5QnlaWE52YkhWMGFXOXVJQ2tnS1RzS0NRa0piV1ZoYmlBclBTQmtaWEIwYURzS0NRa0pjM0YxWVhKbFpGOXRaV0Z1SUNzOUlHUmxjSFJvSUNvZ1pHVndkR2c3Q2drSkkyVnVaR2xtQ2dsOUNnbHRaV0Z1SUQwZ2JXVmhiaUF2SUhOaGJYQnNaWE03Q2dsemNYVmhjbVZrWDIxbFlXNGdQU0J6Y1hWaGNtVmtYMjFsWVc0Z0x5QnpZVzF3YkdWek93b0pabXh2WVhRZ2MzUmtYMlJsZGlBOUlITnhjblFvSUhOeGRXRnlaV1JmYldWaGJpQXRJRzFsWVc0Z0tpQnRaV0Z1SUNrN0NnbG5iRjlHY21GblEyOXNiM0lnUFNCd1lXTnJNa2hoYkdaVWIxSkhRa0VvSUhabFl6SW9JRzFsWVc0c0lITjBaRjlrWlhZZ0tTQXBPd3A5WURzS1puVnVZM1JwYjI0Z2VXZ29jeXdnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCdVpYY2dSSElzSUdrZ1BTQnVaWGNnV0N3Z2NpQTlJRzVsZHlCWUxDQnZJRDBnYm1WM0lGWmxMQ0JoSUQwZ2JtVjNJR1Z2S0hzS0lDQWdJQ0FnSUNCa1pYQjBhRkJoWTJ0cGJtYzZJRUprQ2lBZ0lDQjlLU3dnYkNBOUlHNWxkeUIwYnl3Z1l5QTlJSHQ5TENCb0lEMGdkQzV0WVhoVVpYaDBkWEpsVTJsNlpTd2dkU0E5SUhzS0lDQWdJQ0FnSUNBd09pQnBkQ3dLSUNBZ0lDQWdJQ0F4T2lCQmFTd0tJQ0FnSUNBZ0lDQXlPaUJEYVFvZ0lDQWdmU3dnWkNBOUlHNWxkeUJ6YmloN0NpQWdJQ0FnSUNBZ1pHVm1hVzVsY3pvZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JXVTAxZlUwRk5VRXhGVXpvZ09Bb2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdkVzVwWm05eWJYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaRzkzWDNCaGMzTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVkV3hzQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkWFJwYjI0NklIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYY2dXQW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0J5WVdScGRYTTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQTBDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lIWmxjblJsZUZOb1lXUmxjam9nWW5nc0NpQWdJQ0FnSUNBZ1puSmhaMjFsYm5SVGFHRmtaWEk2SUhkNENpQWdJQ0I5S1N3Z1ppQTlJR1F1WTJ4dmJtVW9LVHNLSUNBZ0lHWXVaR1ZtYVc1bGN5NUlUMUpKV2s5T1ZFRk1YMUJCVTFNZ1BTQXhPd29nSUNBZ2JHVjBJRzBnUFNCdVpYY2dYMlU3Q2lBZ0lDQnRMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnVldVb2JtVjNJRVpzYjJGME16SkJjbkpoZVNoYkNpQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnTGpVc0NpQWdJQ0FnSUNBZ015d0tJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0F1TlN3S0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQzQxQ2lBZ0lDQmRLU3dnTXlrcE93b2dJQ0FnYkdWMElIZ2dQU0J1WlhjZ2MzUW9iU3dnWkNrc0lIWWdQU0IwYUdsek93b2dJQ0FnZEdocGN5NWxibUZpYkdWa0lEMGdJVEVzSUhSb2FYTXVZWFYwYjFWd1pHRjBaU0E5SUNFd0xDQjBhR2x6TG01bFpXUnpWWEJrWVhSbElEMGdJVEVzSUhSb2FYTXVkSGx3WlNBOUlFaGpMQ0IwYUdsekxuSmxibVJsY2lBOUlHWjFibU4wYVc5dUtIa3NJR0lzSUVFcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZGk1bGJtRmliR1ZrSUQwOVBTQWhNU0I4ZkNCMkxtRjFkRzlWY0dSaGRHVWdQVDA5SUNFeElDWW1JSFl1Ym1WbFpITlZjR1JoZEdVZ1BUMDlJQ0V4SUh4OElIa3ViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElFd2dQU0J6TG1kbGRGSmxibVJsY2xSaGNtZGxkQ2dwTENCSklEMGdjeTVuWlhSQlkzUnBkbVZEZFdKbFJtRmpaU2dwTENCcklEMGdjeTVuWlhSQlkzUnBkbVZOYVhCdFlYQk1aWFpsYkNncExDQkNJRDBnY3k1emRHRjBaVHNLSUNBZ0lDQWdJQ0JDTG5ObGRFSnNaVzVrYVc1bktIWnVLU3dnUWk1aWRXWm1aWEp6TG1OdmJHOXlMbk5sZEVOc1pXRnlLREVzSURFc0lERXNJREVwTENCQ0xtSjFabVpsY25NdVpHVndkR2d1YzJWMFZHVnpkQ2doTUNrc0lFSXVjMlYwVTJOcGMzTnZjbFJsYzNRb0lURXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdVQ0E5SURBc0lIY2dQU0I1TG14bGJtZDBhRHNnVUNBOElIYzdJRkFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRklEMGdlVnRRWFN3Z1JDQTlJRVV1YzJoaFpHOTNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9SQ0E5UFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVTJoaFpHOTNUV0Z3T2lJc0lFVXNJQ0pvWVhNZ2JtOGdjMmhoWkc5M0xpSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VRdVlYVjBiMVZ3WkdGMFpTQTlQVDBnSVRFZ0ppWWdSQzV1WldWa2MxVndaR0YwWlNBOVBUMGdJVEVwSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBMbU52Y0hrb1JDNXRZWEJUYVhwbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGVWdQU0JFTG1kbGRFWnlZVzFsUlhoMFpXNTBjeWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVM1dGRXeDBhWEJzZVNoVktTd2djaTVqYjNCNUtFUXViV0Z3VTJsNlpTa3NJQ2hwTG5nZ1BpQm9JSHg4SUdrdWVTQStJR2dwSUNZbUlDaHBMbmdnUGlCb0lDWW1JQ2h5TG5nZ1BTQk5ZWFJvTG1ac2IyOXlLR2dnTHlCVkxuZ3BMQ0JwTG5nZ1BTQnlMbmdnS2lCVkxuZ3NJRVF1YldGd1UybDZaUzU0SUQwZ2NpNTRLU3dnYVM1NUlENGdhQ0FtSmlBb2NpNTVJRDBnVFdGMGFDNW1iRzl2Y2lob0lDOGdWUzU1S1N3Z2FTNTVJRDBnY2k1NUlDb2dWUzU1TENCRUxtMWhjRk5wZW1VdWVTQTlJSEl1ZVNrcExDQkVMbTFoY0NBOVBUMGdiblZzYkNBbUppQWhSQzVwYzFCdmFXNTBUR2xuYUhSVGFHRmtiM2NnSmlZZ2RHaHBjeTUwZVhCbElEMDlQU0JwY2lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRThnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1Um1sc2RHVnlPaUIwZEN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZV2RHYVd4MFpYSTZJSFIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTFoZERvZ1kzUUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVMbTFoY0NBOUlHNWxkeUJCZENocExuZ3NJR2t1ZVN3Z1R5a3NJRVF1YldGd0xuUmxlSFIxY21VdWJtRnRaU0E5SUVVdWJtRnRaU0FySUNJdWMyaGhaRzkzVFdGd0lpd2dSQzV0WVhCUVlYTnpJRDBnYm1WM0lFRjBLR2t1ZUN3Z2FTNTVMQ0JQS1N3Z1JDNWpZVzFsY21FdWRYQmtZWFJsVUhKdmFtVmpkR2x2YmsxaGRISnBlQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEVMbTFoY0NBOVBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRThnUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1Um1sc2RHVnlPaUJ5ZEN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZV2RHYVd4MFpYSTZJSEowTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTFoZERvZ1kzUUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVMbTFoY0NBOUlHNWxkeUJCZENocExuZ3NJR2t1ZVN3Z1R5a3NJRVF1YldGd0xuUmxlSFIxY21VdWJtRnRaU0E5SUVVdWJtRnRaU0FySUNJdWMyaGhaRzkzVFdGd0lpd2dSQzVqWVcxbGNtRXVkWEJrWVhSbFVISnZhbVZqZEdsdmJrMWhkSEpwZUNncE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lITXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtFUXViV0Z3S1N3Z2N5NWpiR1ZoY2lncE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1JpQTlJRVF1WjJWMFZtbGxkM0J2Y25SRGIzVnVkQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFOGdQU0F3T3lCUElEd2dSanNnVHlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1WlNBOUlFUXVaMlYwVm1sbGQzQnZjblFvVHlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxuTmxkQ2h5TG5nZ0tpQnVaUzU0TENCeUxua2dLaUJ1WlM1NUxDQnlMbmdnS2lCdVpTNTZMQ0J5TG5rZ0tpQnVaUzUzS1N3Z1FpNTJhV1YzY0c5eWRDaHZLU3dnUkM1MWNHUmhkR1ZOWVhSeWFXTmxjeWhGTENCUEtTd2diaUE5SUVRdVoyVjBSbkoxYzNSMWJTZ3BMQ0JmS0dJc0lFRXNJRVF1WTJGdFpYSmhMQ0JGTENCMGFHbHpMblI1Y0dVcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDRkVMbWx6VUc5cGJuUk1hV2RvZEZOb1lXUnZkeUFtSmlCMGFHbHpMblI1Y0dVZ1BUMDlJR2x5SUNZbUlHY29SQ3dnUVNrc0lFUXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Uc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkaTV1WldWa2MxVndaR0YwWlNBOUlDRXhMQ0J6TG5ObGRGSmxibVJsY2xSaGNtZGxkQ2hNTENCSkxDQnJLVHNLSUNBZ0lIMDdDaUFnSUNCbWRXNWpkR2x2YmlCbktIa3NJR0lwSUhzS0lDQWdJQ0FnSUNCc1pYUWdRU0E5SUdVdWRYQmtZWFJsS0hncE93b2dJQ0FnSUNBZ0lHUXVaR1ZtYVc1bGN5NVdVMDFmVTBGTlVFeEZVeUFoUFQwZ2VTNWliSFZ5VTJGdGNHeGxjeUFtSmlBb1pDNWtaV1pwYm1WekxsWlRUVjlUUVUxUVRFVlRJRDBnZVM1aWJIVnlVMkZ0Y0d4bGN5d2daaTVrWldacGJtVnpMbFpUVFY5VFFVMVFURVZUSUQwZ2VTNWliSFZ5VTJGdGNHeGxjeXdnWkM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCbUxtNWxaV1J6VlhCa1lYUmxJRDBnSVRBcExDQmtMblZ1YVdadmNtMXpMbk5vWVdSdmQxOXdZWE56TG5aaGJIVmxJRDBnZVM1dFlYQXVkR1Y0ZEhWeVpTd2daQzUxYm1sbWIzSnRjeTV5WlhOdmJIVjBhVzl1TG5aaGJIVmxJRDBnZVM1dFlYQlRhWHBsTENCa0xuVnVhV1p2Y20xekxuSmhaR2wxY3k1MllXeDFaU0E5SUhrdWNtRmthWFZ6TENCekxuTmxkRkpsYm1SbGNsUmhjbWRsZENoNUxtMWhjRkJoYzNNcExDQnpMbU5zWldGeUtDa3NJSE11Y21WdVpHVnlRblZtWm1WeVJHbHlaV04wS0dJc0lHNTFiR3dzSUVFc0lHUXNJSGdzSUc1MWJHd3BMQ0JtTG5WdWFXWnZjbTF6TG5Ob1lXUnZkMTl3WVhOekxuWmhiSFZsSUQwZ2VTNXRZWEJRWVhOekxuUmxlSFIxY21Vc0lHWXVkVzVwWm05eWJYTXVjbVZ6YjJ4MWRHbHZiaTUyWVd4MVpTQTlJSGt1YldGd1UybDZaU3dnWmk1MWJtbG1iM0p0Y3k1eVlXUnBkWE11ZG1Gc2RXVWdQU0I1TG5KaFpHbDFjeXdnY3k1elpYUlNaVzVrWlhKVVlYSm5aWFFvZVM1dFlYQXBMQ0J6TG1Oc1pXRnlLQ2tzSUhNdWNtVnVaR1Z5UW5WbVptVnlSR2x5WldOMEtHSXNJRzUxYkd3c0lFRXNJR1lzSUhnc0lHNTFiR3dwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2NDaDVMQ0JpTENCQkxDQk1MQ0JKTENCckxDQkNLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElGQWdQU0J1ZFd4c0xDQjNJRDBnVEM1cGMxQnZhVzUwVEdsbmFIUWdQVDA5SUNFd0lEOGdlUzVqZFhOMGIyMUVhWE4wWVc1alpVMWhkR1Z5YVdGc0lEb2dlUzVqZFhOMGIyMUVaWEIwYUUxaGRHVnlhV0ZzT3dvZ0lDQWdJQ0FnSUdsbUlDaDNJQ0U5UFNCMmIybGtJREFnUHlCUUlEMGdkeUE2SUZBZ1BTQk1MbWx6VUc5cGJuUk1hV2RvZENBOVBUMGdJVEFnUHlCc0lEb2dZU3dnY3k1c2IyTmhiRU5zYVhCd2FXNW5SVzVoWW14bFpDQW1KaUJCTG1Oc2FYQlRhR0ZrYjNkeklEMDlQU0FoTUNBbUppQkJMbU5zYVhCd2FXNW5VR3hoYm1WekxteGxibWQwYUNBaFBUMGdNQ0I4ZkNCQkxtUnBjM0JzWVdObGJXVnVkRTFoY0NBbUppQkJMbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxJQ0U5UFNBd0lIeDhJRUV1WVd4d2FHRk5ZWEFnSmlZZ1FTNWhiSEJvWVZSbGMzUWdQaUF3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRklEMGdVQzUxZFdsa0xDQkVJRDBnUVM1MWRXbGtMQ0JWSUQwZ1kxdEZYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ZTQTlQVDBnZG05cFpDQXdJQ1ltSUNoVklEMGdlMzBzSUdOYlJWMGdQU0JWS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVZZ1BTQlZXMFJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQkdJRDA5UFNCMmIybGtJREFnSmlZZ0tFWWdQU0JRTG1Oc2IyNWxLQ2tzSUZWYlJGMGdQU0JHS1N3Z1VDQTlJRVk3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJRTG5acGMybGliR1VnUFNCQkxuWnBjMmxpYkdVc0lGQXVkMmx5WldaeVlXMWxJRDBnUVM1M2FYSmxabkpoYldVc0lFSWdQVDA5SUdseUlEOGdVQzV6YVdSbElEMGdRUzV6YUdGa2IzZFRhV1JsSUNFOVBTQnVkV3hzSUQ4Z1FTNXphR0ZrYjNkVGFXUmxJRG9nUVM1emFXUmxJRG9nVUM1emFXUmxJRDBnUVM1emFHRmtiM2RUYVdSbElDRTlQU0J1ZFd4c0lEOGdRUzV6YUdGa2IzZFRhV1JsSURvZ2RWdEJMbk5wWkdWZExDQlFMbUZzY0doaFRXRndJRDBnUVM1aGJIQm9ZVTFoY0N3Z1VDNWhiSEJvWVZSbGMzUWdQU0JCTG1Gc2NHaGhWR1Z6ZEN3Z1VDNWpiR2x3VTJoaFpHOTNjeUE5SUVFdVkyeHBjRk5vWVdSdmQzTXNJRkF1WTJ4cGNIQnBibWRRYkdGdVpYTWdQU0JCTG1Oc2FYQndhVzVuVUd4aGJtVnpMQ0JRTG1Oc2FYQkpiblJsY25ObFkzUnBiMjRnUFNCQkxtTnNhWEJKYm5SbGNuTmxZM1JwYjI0c0lGQXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEMGdRUzVrYVhOd2JHRmpaVzFsYm5STllYQXNJRkF1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VnUFNCQkxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bExDQlFMbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTWdQU0JCTG1ScGMzQnNZV05sYldWdWRFSnBZWE1zSUZBdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdRUzUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dzSUZBdWJHbHVaWGRwWkhSb0lEMGdRUzVzYVc1bGQybGtkR2dzSUV3dWFYTlFiMmx1ZEV4cFoyaDBJRDA5UFNBaE1DQW1KaUJRTG1selRXVnphRVJwYzNSaGJtTmxUV0YwWlhKcFlXd2dQVDA5SUNFd0lDWW1JQ2hRTG5KbFptVnlaVzVqWlZCdmMybDBhVzl1TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaE1MbTFoZEhKcGVGZHZjbXhrS1N3Z1VDNXVaV0Z5UkdsemRHRnVZMlVnUFNCSkxDQlFMbVpoY2tScGMzUmhibU5sSUQwZ2F5a3NJRkE3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCZktIa3NJR0lzSUVFc0lFd3NJRWtwSUhzS0lDQWdJQ0FnSUNCcFppQW9lUzUyYVhOcFlteGxJRDA5UFNBaE1Ta2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lHbG1JQ2g1TG14aGVXVnljeTUwWlhOMEtHSXViR0Y1WlhKektTQW1KaUFvZVM1cGMwMWxjMmdnZkh3Z2VTNXBjMHhwYm1VZ2ZId2dlUzVwYzFCdmFXNTBjeWtnSmlZZ0tIa3VZMkZ6ZEZOb1lXUnZkeUI4ZkNCNUxuSmxZMlZwZG1WVGFHRmtiM2NnSmlZZ1NTQTlQVDBnYVhJcElDWW1JQ2doZVM1bWNuVnpkSFZ0UTNWc2JHVmtJSHg4SUc0dWFXNTBaWEp6WldOMGMwOWlhbVZqZENoNUtTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2VTNXRiMlJsYkZacFpYZE5ZWFJ5YVhndWJYVnNkR2x3YkhsTllYUnlhV05sY3loQkxtMWhkSEpwZUZkdmNteGtTVzUyWlhKelpTd2dlUzV0WVhSeWFYaFhiM0pzWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCUUlEMGdaUzUxY0dSaGRHVW9lU2tzSUhjZ1BTQjVMbTFoZEdWeWFXRnNPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoM0tTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVVZ1BTQlFMbWR5YjNWd2N6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1JDQTlJREFzSUZVZ1BTQkZMbXhsYm1kMGFEc2dSQ0E4SUZVN0lFUXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVlnUFNCRlcwUmRMQ0JQSUQwZ2QxdEdMbTFoZEdWeWFXRnNTVzVrWlhoZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUElDWW1JRTh1ZG1semFXSnNaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JtVWdQU0J3S0hrc0lGQXNJRThzSUV3c0lFRXVibVZoY2l3Z1FTNW1ZWElzSUVrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCekxuSmxibVJsY2tKMVptWmxja1JwY21WamRDaEJMQ0J1ZFd4c0xDQlFMQ0J1WlN3Z2VTd2dSaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hjdWRtbHphV0pzWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVVnUFNCd0tIa3NJRkFzSUhjc0lFd3NJRUV1Ym1WaGNpd2dRUzVtWVhJc0lFa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjeTV5Wlc1a1pYSkNkV1ptWlhKRWFYSmxZM1FvUVN3Z2JuVnNiQ3dnVUN3Z1JTd2dlU3dnYm5Wc2JDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJRUlnUFNCNUxtTm9hV3hrY21WdU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1VDQTlJREFzSUhjZ1BTQkNMbXhsYm1kMGFEc2dVQ0E4SUhjN0lGQXJLeWxmS0VKYlVGMHNJR0lzSUVFc0lFd3NJRWtwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUZONEtITXNJR1VzSUhRcElIc0tJQ0FnSUd4bGRDQnVJRDBnZEM1cGMxZGxZa2RNTWpzS0lDQWdJR1oxYm1OMGFXOXVJR2tvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRklnUFNBaE1Td2daV1VnUFNCdVpYY2dWbVVzSUZFZ1BTQnVkV3hzTENCRlpTQTlJRzVsZHlCV1pTZ3dMQ0F3TENBd0xDQXdLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJQ0FnSUNCelpYUk5ZWE5yT2lCbWRXNWpkR2x2YmlodFpTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVU0FoUFQwZ2JXVWdKaVlnSVZJZ0ppWWdLSE11WTI5c2IzSk5ZWE5yS0cxbExDQnRaU3dnYldVc0lHMWxLU3dnVVNBOUlHMWxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFRHOWphMlZrT2lCbWRXNWpkR2x2YmlodFpTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVaUE5SUcxbE93b2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJEYkdWaGNqb2dablZ1WTNScGIyNG9iV1VzSUZKbExDQnZaU3dnVEdVc0lGaGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JZWlNBOVBUMGdJVEFnSmlZZ0tHMWxJQ285SUV4bExDQlNaU0FxUFNCTVpTd2diMlVnS2owZ1RHVXBMQ0JsWlM1elpYUW9iV1VzSUZKbExDQnZaU3dnVEdVcExDQkZaUzVsY1hWaGJITW9aV1VwSUQwOVBTQWhNU0FtSmlBb2N5NWpiR1ZoY2tOdmJHOXlLRzFsTENCU1pTd2diMlVzSUV4bEtTd2dSV1V1WTI5d2VTaGxaU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCeVpYTmxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCU0lEMGdJVEVzSUZFZ1BTQnVkV3hzTENCRlpTNXpaWFFvTFRFc0lEQXNJREFzSURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlISW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElGSWdQU0FoTVN3Z1pXVWdQU0J1ZFd4c0xDQlJJRDBnYm5Wc2JDd2dSV1VnUFNCdWRXeHNPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUmxjM1E2SUdaMWJtTjBhVzl1S0cxbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaU0EvSUd4bEtESTVNamtwSURvZ1ptVW9Namt5T1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRTFoYzJzNklHWjFibU4wYVc5dUtHMWxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsWlNBaFBUMGdiV1VnSmlZZ0lWSWdKaVlnS0hNdVpHVndkR2hOWVhOcktHMWxLU3dnWldVZ1BTQnRaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhObGRFWjFibU02SUdaMWJtTjBhVzl1S0cxbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVVNBaFBUMGdiV1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldVcElITjNhWFJqYUNodFpTbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhVNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpMbVJsY0hSb1JuVnVZeWcxTVRJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdRWFU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCekxtUmxjSFJvUm5WdVl5ZzFNVGtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1EzVTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TG1SbGNIUm9SblZ1WXlnMU1UTXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWldFNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpMbVJsY0hSb1JuVnVZeWcxTVRVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdUSFU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCekxtUmxjSFJvUm5WdVl5ZzFNVFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1VuVTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TG1SbGNIUm9SblZ1WXlnMU1UZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVUhVNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpMbVJsY0hSb1JuVnVZeWcxTVRZcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdTWFU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCekxtUmxjSFJvUm5WdVl5ZzFNVGNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TG1SbGNIUm9SblZ1WXlnMU1UVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhNdVpHVndkR2hHZFc1aktEVXhOU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VTQTlJRzFsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCelpYUk1iMk5yWldRNklHWjFibU4wYVc5dUtHMWxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JTSUQwZ2JXVTdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ0lDQWdJSE5sZEVOc1pXRnlPaUJtZFc1amRHbHZiaWh0WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JXVWdJVDA5SUcxbElDWW1JQ2h6TG1Oc1pXRnlSR1Z3ZEdnb2JXVXBMQ0JGWlNBOUlHMWxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnY21WelpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVWlBOUlDRXhMQ0JsWlNBOUlHNTFiR3dzSUZFZ1BTQnVkV3hzTENCRlpTQTlJRzUxYkd3N0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2J5Z3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1VpQTlJQ0V4TENCbFpTQTlJRzUxYkd3c0lGRWdQU0J1ZFd4c0xDQkZaU0E5SUc1MWJHd3NJRzFsSUQwZ2JuVnNiQ3dnVW1VZ1BTQnVkV3hzTENCdlpTQTlJRzUxYkd3c0lFeGxJRDBnYm5Wc2JDd2dXR1VnUFNCdWRXeHNPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjdDaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUmxjM1E2SUdaMWJtTjBhVzl1S0ZkbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNJSHg4SUNoWFpTQS9JR3hsS0RJNU5qQXBJRG9nWm1Vb01qazJNQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCelpYUk5ZWE5yT2lCbWRXNWpkR2x2YmloWFpTa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV1VnSVQwOUlGZGxJQ1ltSUNGU0lDWW1JQ2h6TG5OMFpXNWphV3hOWVhOcktGZGxLU3dnWldVZ1BTQlhaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUhObGRFWjFibU02SUdaMWJtTjBhVzl1S0ZkbExDQlZkQ3dnVDNRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaFJJQ0U5UFNCWFpTQjhmQ0JGWlNBaFBUMGdWWFFnZkh3Z2JXVWdJVDA5SUU5MEtTQW1KaUFvY3k1emRHVnVZMmxzUm5WdVl5aFhaU3dnVlhRc0lFOTBLU3dnVVNBOUlGZGxMQ0JGWlNBOUlGVjBMQ0J0WlNBOUlFOTBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFQzQTZJR1oxYm1OMGFXOXVLRmRsTENCVmRDd2dUM1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoU1pTQWhQVDBnVjJVZ2ZId2diMlVnSVQwOUlGVjBJSHg4SUV4bElDRTlQU0JQZENrZ0ppWWdLSE11YzNSbGJtTnBiRTl3S0ZkbExDQlZkQ3dnVDNRcExDQlNaU0E5SUZkbExDQnZaU0E5SUZWMExDQk1aU0E5SUU5MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjMlYwVEc5amEyVmtPaUJtZFc1amRHbHZiaWhYWlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VpQTlJRmRsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNCelpYUkRiR1ZoY2pvZ1puVnVZM1JwYjI0b1YyVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRmhsSUNFOVBTQlhaU0FtSmlBb2N5NWpiR1ZoY2xOMFpXNWphV3dvVjJVcExDQllaU0E5SUZkbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6WlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVaUE5SUNFeExDQmxaU0E5SUc1MWJHd3NJRkVnUFNCdWRXeHNMQ0JGWlNBOUlHNTFiR3dzSUcxbElEMGdiblZzYkN3Z1VtVWdQU0J1ZFd4c0xDQnZaU0E5SUc1MWJHd3NJRXhsSUQwZ2JuVnNiQ3dnV0dVZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQmhJRDBnYm1WM0lHa3NJR3dnUFNCdVpYY2djaXdnWXlBOUlHNWxkeUJ2TENCb0lEMGdlMzBzSUhVZ1BTQjdmU3dnWkNBOUlHNTFiR3dzSUdZZ1BTQWhNU3dnYlNBOUlHNTFiR3dzSUhnZ1BTQnVkV3hzTENCMklEMGdiblZzYkN3Z1p5QTlJRzUxYkd3c0lIQWdQU0J1ZFd4c0xDQmZJRDBnYm5Wc2JDd2dlU0E5SUc1MWJHd3NJR0lnUFNBaE1Td2dRU0E5SUc1MWJHd3NJRXdnUFNCdWRXeHNMQ0JKSUQwZ2JuVnNiQ3dnYXlBOUlHNTFiR3dzSUVJZ1BTQnVkV3hzTENCUUlEMGdjeTVuWlhSUVlYSmhiV1YwWlhJb016VTJOakVwTENCM0lEMGdJVEVzSUVVZ1BTQXdMQ0JFSUQwZ2N5NW5aWFJRWVhKaGJXVjBaWElvTnprek9DazdDaUFnSUNCRUxtbHVaR1Y0VDJZb0lsZGxZa2RNSWlrZ0lUMDlJQzB4SUQ4Z0tFVWdQU0J3WVhKelpVWnNiMkYwS0M5ZVYyVmlSMHdnS0Z4a0tTOHVaWGhsWXloRUtWc3hYU2tzSUhjZ1BTQkZJRDQ5SURFcElEb2dSQzVwYm1SbGVFOW1LQ0pQY0dWdVIwd2dSVk1pS1NBaFBUMGdMVEVnSmlZZ0tFVWdQU0J3WVhKelpVWnNiMkYwS0M5ZVQzQmxia2RNSUVWVElDaGNaQ2t2TG1WNFpXTW9SQ2xiTVYwcExDQjNJRDBnUlNBK1BTQXlLVHNLSUNBZ0lHeGxkQ0JWSUQwZ2JuVnNiQ3dnUmlBOUlIdDlMQ0JQSUQwZ2N5NW5aWFJRWVhKaGJXVjBaWElvTXpBNE9Da3NJRzVsSUQwZ2N5NW5aWFJRWVhKaGJXVjBaWElvTWprM09Da3NJR05sSUQwZ2JtVjNJRlpsS0NrdVpuSnZiVUZ5Y21GNUtFOHBMQ0JXSUQwZ2JtVjNJRlpsS0NrdVpuSnZiVUZ5Y21GNUtHNWxLVHNLSUNBZ0lHWjFibU4wYVc5dUlGY29VaXdnWldVc0lGRXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1JXVWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTZzBLU3dnYldVZ1BTQnpMbU55WldGMFpWUmxlSFIxY21Vb0tUc0tJQ0FnSUNBZ0lDQnpMbUpwYm1SVVpYaDBkWEpsS0ZJc0lHMWxLU3dnY3k1MFpYaFFZWEpoYldWMFpYSnBLRklzSURFd01qUXhMQ0E1TnpJNEtTd2djeTUwWlhoUVlYSmhiV1YwWlhKcEtGSXNJREV3TWpRd0xDQTVOekk0S1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUZKbElEMGdNRHNnVW1VZ1BDQlJPeUJTWlNzcktYTXVkR1Y0U1cxaFoyVXlSQ2hsWlNBcklGSmxMQ0F3TENBMk5EQTRMQ0F4TENBeExDQXdMQ0EyTkRBNExDQTFNVEl4TENCRlpTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMWxPd29nSUNBZ2ZRb2dJQ0FnYkdWMElHaGxJRDBnZTMwN0NpQWdJQ0JvWlZzek5UVXpYU0E5SUZjb016VTFNeXdnTXpVMU15d2dNU2tzSUdobFd6TTBNRFkzWFNBOUlGY29NelF3Tmpjc0lETTBNRFk1TENBMktTd2dZUzV6WlhSRGJHVmhjaWd3TENBd0xDQXdMQ0F4S1N3Z2JDNXpaWFJEYkdWaGNpZ3hLU3dnWXk1elpYUkRiR1ZoY2lnd0tTd2diR1VvTWpreU9Ta3NJR3d1YzJWMFJuVnVZeWhsWVNrc0lFOWxLQ0V4S1N3Z1J5aDBiQ2tzSUd4bEtESTRPRFFwTENCblpTaDJiaWs3Q2lBZ0lDQm1kVzVqZEdsdmJpQnNaU2hTS1NCN0NpQWdJQ0FnSUNBZ2FGdFNYU0FoUFQwZ0lUQWdKaVlnS0hNdVpXNWhZbXhsS0ZJcExDQm9XMUpkSUQwZ0lUQXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWm1Vb1Vpa2dld29nSUNBZ0lDQWdJR2hiVWwwZ0lUMDlJQ0V4SUNZbUlDaHpMbVJwYzJGaWJHVW9VaWtzSUdoYlVsMGdQU0FoTVNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQkNaU2hTTENCbFpTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjFXMUpkSUNFOVBTQmxaU0EvSUNoekxtSnBibVJHY21GdFpXSjFabVpsY2loU0xDQmxaU2tzSUhWYlVsMGdQU0JsWlN3Z2JpQW1KaUFvVWlBOVBUMGdNell3TURrZ0ppWWdLSFZiTXpZeE5qQmRJRDBnWldVcExDQlNJRDA5UFNBek5qRTJNQ0FtSmlBb2RWc3pOakF3T1YwZ1BTQmxaU2twTENBaE1Da2dPaUFoTVRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlGa29VaWtnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJrSUNFOVBTQlNJRDhnS0hNdWRYTmxVSEp2WjNKaGJTaFNLU3dnWkNBOUlGSXNJQ0V3S1NBNklDRXhPd29nSUNBZ2ZRb2dJQ0FnYkdWMElFTmxJRDBnZXdvZ0lDQWdJQ0FnSUZ0ZmFWMDZJRE15TnpjMExBb2dJQ0FnSUNBZ0lGdHRkVjA2SURNeU56YzRMQW9nSUNBZ0lDQWdJRnRuZFYwNklETXlOemM1Q2lBZ0lDQjlPd29nSUNBZ2FXWWdLRzRwSUVObFczTnNYU0E5SURNeU56YzFMQ0JEWlZ0dmJGMGdQU0F6TWpjM05qc0tJQ0FnSUdWc2MyVWdld29nSUNBZ0lDQWdJR3hsZENCU0lEMGdaUzVuWlhRb0lrVllWRjlpYkdWdVpGOXRhVzV0WVhnaUtUc0tJQ0FnSUNBZ0lDQlNJQ0U5UFNCdWRXeHNJQ1ltSUNoRFpWdHpiRjBnUFNCU0xrMUpUbDlGV0ZRc0lFTmxXMjlzWFNBOUlGSXVUVUZZWDBWWVZDazdDaUFnSUNCOUNpQWdJQ0JzWlhRZ2VXVWdQU0I3Q2lBZ0lDQWdJQ0FnVzNoMVhUb2dNQ3dLSUNBZ0lDQWdJQ0JiZVhWZE9pQXhMQW9nSUNBZ0lDQWdJRnQyZFYwNklEYzJPQ3dLSUNBZ0lDQWdJQ0JiUjJOZE9pQTNOekFzQ2lBZ0lDQWdJQ0FnVzFSMVhUb2dOemMyTEFvZ0lDQWdJQ0FnSUZ0M2RWMDZJRGMzTkN3S0lDQWdJQ0FnSUNCYlRYVmRPaUEzTnpJc0NpQWdJQ0FnSUNBZ1cxOTFYVG9nTnpZNUxBb2dJQ0FnSUNBZ0lGdFdZMTA2SURjM01Td0tJQ0FnSUNBZ0lDQmJVM1ZkT2lBM056VXNDaUFnSUNBZ0lDQWdXMkoxWFRvZ056Y3pDaUFnSUNCOU93b2dJQ0FnWm5WdVkzUnBiMjRnWjJVb1Vpd2daV1VzSUZFc0lFVmxMQ0J0WlN3Z1VtVXNJRzlsTENCTVpTa2dld29nSUNBZ0lDQWdJR2xtSUNoU0lEMDlQU0IyYmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtSUQwOVBTQWhNQ0FtSmlBb1ptVW9NekEwTWlrc0lHWWdQU0FoTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0dZZ1BUMDlJQ0V4SUNZbUlDaHNaU2d6TURReUtTd2daaUE5SUNFd0tTd2dVaUFoUFQwZ2NIVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRklnSVQwOUlHMGdmSHdnVEdVZ0lUMDlJR0lwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ29lQ0FoUFQwZ1gya2dmSHdnY0NBaFBUMGdYMmtwSUNZbUlDaHpMbUpzWlc1a1JYRjFZWFJwYjI0b016STNOelFwTENCNElEMGdYMmtzSUhBZ1BTQmZhU2tzSUV4bEtTQnpkMmwwWTJnb1VpbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQnpjam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjeTVpYkdWdVpFWjFibU5UWlhCaGNtRjBaU2d4TENBM056RXNJREVzSURjM01TazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnYm13NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNdVlteGxibVJHZFc1aktERXNJREVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElHbHNPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpMbUpzWlc1a1JuVnVZMU5sY0dGeVlYUmxLREFzSURBc0lEYzJPU3dnTnpjeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0J5YkRvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3k1aWJHVnVaRVoxYm1OVFpYQmhjbUYwWlNnd0xDQTNOamdzSURBc0lEYzNNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SUVsdWRtRnNhV1FnWW14bGJtUnBibWM2SUNJc0lGSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdjM2RwZEdOb0tGSXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdjM0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11WW14bGJtUkdkVzVqVTJWd1lYSmhkR1VvTnpjd0xDQTNOekVzSURFc0lEYzNNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2JtdzZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXVZbXhsYm1SR2RXNWpLRGMzTUN3Z01TazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnYVd3NkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNdVlteGxibVJHZFc1aktEQXNJRGMyT1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdjbXc2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11WW14bGJtUkdkVzVqS0RBc0lEYzJPQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SUVsdWRtRnNhV1FnWW14bGJtUnBibWM2SUNJc0lGSXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZZ1BTQnVkV3hzTENCbklEMGdiblZzYkN3Z1h5QTlJRzUxYkd3c0lIa2dQU0J1ZFd4c0xDQnRJRDBnVWl3Z1lpQTlJRXhsT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYldVZ1BTQnRaU0I4ZkNCbFpTd2dVbVVnUFNCU1pTQjhmQ0JSTENCdlpTQTlJRzlsSUh4OElFVmxMQ0FvWldVZ0lUMDlJSGdnZkh3Z2JXVWdJVDA5SUhBcElDWW1JQ2h6TG1Kc1pXNWtSWEYxWVhScGIyNVRaWEJoY21GMFpTaERaVnRsWlYwc0lFTmxXMjFsWFNrc0lIZ2dQU0JsWlN3Z2NDQTlJRzFsS1N3Z0tGRWdJVDA5SUhZZ2ZId2dSV1VnSVQwOUlHY2dmSHdnVW1VZ0lUMDlJRjhnZkh3Z2IyVWdJVDA5SUhrcElDWW1JQ2h6TG1Kc1pXNWtSblZ1WTFObGNHRnlZWFJsS0hsbFcxRmRMQ0I1WlZ0RlpWMHNJSGxsVzFKbFhTd2dlV1ZiYjJWZEtTd2dkaUE5SUZFc0lHY2dQU0JGWlN3Z1h5QTlJRkpsTENCNUlEMGdiMlVwTENCdElEMGdVaXdnWWlBOUlHNTFiR3c3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCNFpTaFNMQ0JsWlNrZ2V3b2dJQ0FnSUNBZ0lGSXVjMmxrWlNBOVBUMGdRMmtnUHlCbVpTZ3lPRGcwS1NBNklHeGxLREk0T0RRcE93b2dJQ0FnSUNBZ0lHeGxkQ0JSSUQwZ1VpNXphV1JsSUQwOVBTQnBkRHNLSUNBZ0lDQWdJQ0JsWlNBbUppQW9VU0E5SUNGUktTd2dUMlVvVVNrc0lGSXVZbXhsYm1ScGJtY2dQVDA5SUhOeUlDWW1JRkl1ZEhKaGJuTndZWEpsYm5RZ1BUMDlJQ0V4SUQ4Z1oyVW9kbTRwSURvZ1oyVW9VaTVpYkdWdVpHbHVaeXdnVWk1aWJHVnVaRVZ4ZFdGMGFXOXVMQ0JTTG1Kc1pXNWtVM0pqTENCU0xtSnNaVzVrUkhOMExDQlNMbUpzWlc1a1JYRjFZWFJwYjI1QmJIQm9ZU3dnVWk1aWJHVnVaRk55WTBGc2NHaGhMQ0JTTG1Kc1pXNWtSSE4wUVd4d2FHRXNJRkl1Y0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoS1N3Z2JDNXpaWFJHZFc1aktGSXVaR1Z3ZEdoR2RXNWpLU3dnYkM1elpYUlVaWE4wS0ZJdVpHVndkR2hVWlhOMEtTd2diQzV6WlhSTllYTnJLRkl1WkdWd2RHaFhjbWwwWlNrc0lHRXVjMlYwVFdGemF5aFNMbU52Ykc5eVYzSnBkR1VwT3dvZ0lDQWdJQ0FnSUd4bGRDQkZaU0E5SUZJdWMzUmxibU5wYkZkeWFYUmxPd29nSUNBZ0lDQWdJR011YzJWMFZHVnpkQ2hGWlNrc0lFVmxJQ1ltSUNoakxuTmxkRTFoYzJzb1VpNXpkR1Z1WTJsc1YzSnBkR1ZOWVhOcktTd2dZeTV6WlhSR2RXNWpLRkl1YzNSbGJtTnBiRVoxYm1Nc0lGSXVjM1JsYm1OcGJGSmxaaXdnVWk1emRHVnVZMmxzUm5WdVkwMWhjMnNwTENCakxuTmxkRTl3S0ZJdWMzUmxibU5wYkVaaGFXd3NJRkl1YzNSbGJtTnBiRnBHWVdsc0xDQlNMbk4wWlc1amFXeGFVR0Z6Y3lrcExDQkxLRkl1Y0c5c2VXZHZiazltWm5ObGRDd2dVaTV3YjJ4NVoyOXVUMlptYzJWMFJtRmpkRzl5TENCU0xuQnZiSGxuYjI1UFptWnpaWFJWYm1sMGN5a3NJRkl1WVd4d2FHRlViME52ZG1WeVlXZGxJRDA5UFNBaE1DQS9JR3hsS0RNeU9USTJLU0E2SUdabEtETXlPVEkyS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFOWxLRklwSUhzS0lDQWdJQ0FnSUNCQklDRTlQU0JTSUNZbUlDaFNJRDhnY3k1bWNtOXVkRVpoWTJVb01qTXdOQ2tnT2lCekxtWnliMjUwUm1GalpTZ3lNekExS1N3Z1FTQTlJRklwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1J5aFNLU0I3Q2lBZ0lDQWdJQ0FnVWlBaFBUMGdkWFVnUHlBb2JHVW9Namc0TkNrc0lGSWdJVDA5SUV3Z0ppWWdLRklnUFQwOUlIUnNJRDhnY3k1amRXeHNSbUZqWlNneE1ESTVLU0E2SUZJZ1BUMDlJR1IxSUQ4Z2N5NWpkV3hzUm1GalpTZ3hNREk0S1NBNklITXVZM1ZzYkVaaFkyVW9NVEF6TWlrcEtTQTZJR1psS0RJNE9EUXBMQ0JNSUQwZ1Vqc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR29vVWlrZ2V3b2dJQ0FnSUNBZ0lGSWdJVDA5SUVrZ0ppWWdLSGNnSmlZZ2N5NXNhVzVsVjJsa2RHZ29VaWtzSUVrZ1BTQlNLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVzb1Vpd2daV1VzSUZFcElIc0tJQ0FnSUNBZ0lDQlNJRDhnS0d4bEtETXlPREl6S1N3Z0tHc2dJVDA5SUdWbElIeDhJRUlnSVQwOUlGRXBJQ1ltSUNoekxuQnZiSGxuYjI1UFptWnpaWFFvWldVc0lGRXBMQ0JySUQwZ1pXVXNJRUlnUFNCUktTa2dPaUJtWlNnek1qZ3lNeWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCMVpTaFNLU0I3Q2lBZ0lDQWdJQ0FnVWlBL0lHeGxLRE13T0RrcElEb2dabVVvTXpBNE9TazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ6WlNoU0tTQjdDaUFnSUNBZ0lDQWdVaUE5UFQwZ2RtOXBaQ0F3SUNZbUlDaFNJRDBnTXpNNU9EUWdLeUJRSUMwZ01Ta3NJRlVnSVQwOUlGSWdKaVlnS0hNdVlXTjBhWFpsVkdWNGRIVnlaU2hTS1N3Z1ZTQTlJRklwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1UyVW9VaXdnWldVcElIc0tJQ0FnSUNBZ0lDQlZJRDA5UFNCdWRXeHNJQ1ltSUhObEtDazdDaUFnSUNBZ0lDQWdiR1YwSUZFZ1BTQkdXMVZkT3dvZ0lDQWdJQ0FnSUZFZ1BUMDlJSFp2YVdRZ01DQW1KaUFvVVNBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dkbTlwWkNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0IwWlhoMGRYSmxPaUIyYjJsa0lEQUtJQ0FnSUNBZ0lDQjlMQ0JHVzFWZElEMGdVU2tzSUNoUkxuUjVjR1VnSVQwOUlGSWdmSHdnVVM1MFpYaDBkWEpsSUNFOVBTQmxaU2tnSmlZZ0tITXVZbWx1WkZSbGVIUjFjbVVvVWl3Z1pXVWdmSHdnYUdWYlVsMHBMQ0JSTG5SNWNHVWdQU0JTTENCUkxuUmxlSFIxY21VZ1BTQmxaU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCVVpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1VpQTlJRVpiVlYwN0NpQWdJQ0FnSUNBZ1VpQWhQVDBnZG05cFpDQXdJQ1ltSUZJdWRIbHdaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHpMbUpwYm1SVVpYaDBkWEpsS0ZJdWRIbHdaU3dnYm5Wc2JDa3NJRkl1ZEhsd1pTQTlJSFp2YVdRZ01Dd2dVaTUwWlhoMGRYSmxJRDBnZG05cFpDQXdLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUZCbEtDa2dld29nSUNBZ0lDQWdJSFJ5ZVNCN0NpQWdJQ0FnSUNBZ0lDQWdJSE11WTI5dGNISmxjM05sWkZSbGVFbHRZV2RsTWtRdVlYQndiSGtvY3l3Z1lYSm5kVzFsYm5SektUc0tJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaFNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SWl3Z1VpazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnV1dVb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjeTUwWlhoVGRXSkpiV0ZuWlRKRUxtRndjR3g1S0hNc0lHRnlaM1Z0Wlc1MGN5azdDaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9VaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGTjBZWFJsT2lJc0lGSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUVNb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjeTUwWlhoVGRXSkpiV0ZuWlRORUxtRndjR3g1S0hNc0lHRnlaM1Z0Wlc1MGN5azdDaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9VaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGTjBZWFJsT2lJc0lGSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUZRb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjeTVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVeVJDNWhjSEJzZVNoekxDQmhjbWQxYldWdWRITXBPd29nSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLRklwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VjJWaVIweFRkR0YwWlRvaUxDQlNLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCS0tDa2dld29nSUNBZ0lDQWdJSFJ5ZVNCN0NpQWdJQ0FnSUNBZ0lDQWdJSE11ZEdWNFUzUnZjbUZuWlRKRUxtRndjR3g1S0hNc0lHRnlaM1Z0Wlc1MGN5azdDaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9VaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGTjBZWFJsT2lJc0lGSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUNRb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjeTUwWlhoVGRHOXlZV2RsTTBRdVlYQndiSGtvY3l3Z1lYSm5kVzFsYm5SektUc0tJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaFNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbGRsWWtkTVUzUmhkR1U2SWl3Z1VpazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnY21Vb0tTQjdDaUFnSUNBZ0lDQWdkSEo1SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjeTUwWlhoSmJXRm5aVEpFTG1Gd2NHeDVLSE1zSUdGeVozVnRaVzUwY3lrN0NpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1Vpa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVhaV0pIVEZOMFlYUmxPaUlzSUZJcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRm9vS1NCN0NpQWdJQ0FnSUNBZ2RISjVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2N5NTBaWGhKYldGblpUTkVMbUZ3Y0d4NUtITXNJR0Z5WjNWdFpXNTBjeWs3Q2lBZ0lDQWdJQ0FnZlNCallYUmphQ0FvVWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1WFpXSkhURk4wWVhSbE9pSXNJRklwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlFMWxLRklwSUhzS0lDQWdJQ0FnSUNCalpTNWxjWFZoYkhNb1Vpa2dQVDA5SUNFeElDWW1JQ2h6TG5OamFYTnpiM0lvVWk1NExDQlNMbmtzSUZJdWVpd2dVaTUzS1N3Z1kyVXVZMjl3ZVNoU0tTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUIyWlNoU0tTQjdDaUFnSUNBZ0lDQWdWaTVsY1hWaGJITW9VaWtnUFQwOUlDRXhJQ1ltSUNoekxuWnBaWGR3YjNKMEtGSXVlQ3dnVWk1NUxDQlNMbm9zSUZJdWR5a3NJRll1WTI5d2VTaFNLU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCMFpTZ3BJSHNLSUNBZ0lDQWdJQ0J6TG1ScGMyRmliR1VvTXpBME1pa3NJSE11WkdsellXSnNaU2d5T0RnMEtTd2djeTVrYVhOaFlteGxLREk1TWprcExDQnpMbVJwYzJGaWJHVW9Nekk0TWpNcExDQnpMbVJwYzJGaWJHVW9NekE0T1Nrc0lITXVaR2x6WVdKc1pTZ3lPVFl3S1N3Z2N5NWthWE5oWW14bEtETXlPVEkyS1N3Z2N5NWliR1Z1WkVWeGRXRjBhVzl1S0RNeU56YzBLU3dnY3k1aWJHVnVaRVoxYm1Nb01Td2dNQ2tzSUhNdVlteGxibVJHZFc1alUyVndZWEpoZEdVb01Td2dNQ3dnTVN3Z01Da3NJSE11WTI5c2IzSk5ZWE5yS0NFd0xDQWhNQ3dnSVRBc0lDRXdLU3dnY3k1amJHVmhja052Ykc5eUtEQXNJREFzSURBc0lEQXBMQ0J6TG1SbGNIUm9UV0Z6YXlnaE1Da3NJSE11WkdWd2RHaEdkVzVqS0RVeE15a3NJSE11WTJ4bFlYSkVaWEIwYUNneEtTd2djeTV6ZEdWdVkybHNUV0Z6YXlnME1qazBPVFkzTWprMUtTd2djeTV6ZEdWdVkybHNSblZ1WXlnMU1Ua3NJREFzSURReU9UUTVOamN5T1RVcExDQnpMbk4wWlc1amFXeFBjQ2czTmpnd0xDQTNOamd3TENBM05qZ3dLU3dnY3k1amJHVmhjbE4wWlc1amFXd29NQ2tzSUhNdVkzVnNiRVpoWTJVb01UQXlPU2tzSUhNdVpuSnZiblJHWVdObEtESXpNRFVwTENCekxuQnZiSGxuYjI1UFptWnpaWFFvTUN3Z01Da3NJSE11WVdOMGFYWmxWR1Y0ZEhWeVpTZ3pNems0TkNrc0lITXVZbWx1WkVaeVlXMWxZblZtWm1WeUtETTJNVFl3TENCdWRXeHNLU3dnYmlBOVBUMGdJVEFnSmlZZ0tITXVZbWx1WkVaeVlXMWxZblZtWm1WeUtETTJNREE1TENCdWRXeHNLU3dnY3k1aWFXNWtSbkpoYldWaWRXWm1aWElvTXpZd01EZ3NJRzUxYkd3cEtTd2djeTUxYzJWUWNtOW5jbUZ0S0c1MWJHd3BMQ0J6TG14cGJtVlhhV1IwYUNneEtTd2djeTV6WTJsemMyOXlLREFzSURBc0lITXVZMkZ1ZG1GekxuZHBaSFJvTENCekxtTmhiblpoY3k1b1pXbG5hSFFwTENCekxuWnBaWGR3YjNKMEtEQXNJREFzSUhNdVkyRnVkbUZ6TG5kcFpIUm9MQ0J6TG1OaGJuWmhjeTVvWldsbmFIUXBMQ0JvSUQwZ2UzMHNJRlVnUFNCdWRXeHNMQ0JHSUQwZ2UzMHNJSFVnUFNCN2ZTd2daQ0E5SUc1MWJHd3NJR1lnUFNBaE1Td2diU0E5SUc1MWJHd3NJSGdnUFNCdWRXeHNMQ0IySUQwZ2JuVnNiQ3dnWnlBOUlHNTFiR3dzSUhBZ1BTQnVkV3hzTENCZklEMGdiblZzYkN3Z2VTQTlJRzUxYkd3c0lHSWdQU0FoTVN3Z1FTQTlJRzUxYkd3c0lFd2dQU0J1ZFd4c0xDQkpJRDBnYm5Wc2JDd2dheUE5SUc1MWJHd3NJRUlnUFNCdWRXeHNMQ0JqWlM1elpYUW9NQ3dnTUN3Z2N5NWpZVzUyWVhNdWQybGtkR2dzSUhNdVkyRnVkbUZ6TG1obGFXZG9kQ2tzSUZZdWMyVjBLREFzSURBc0lITXVZMkZ1ZG1GekxuZHBaSFJvTENCekxtTmhiblpoY3k1b1pXbG5hSFFwTENCaExuSmxjMlYwS0Nrc0lHd3VjbVZ6WlhRb0tTd2dZeTV5WlhObGRDZ3BPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0JpZFdabVpYSnpPaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCaExBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFEb2diQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2MzUmxibU5wYkRvZ1l3b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdaVzVoWW14bE9pQnNaU3dLSUNBZ0lDQWdJQ0JrYVhOaFlteGxPaUJtWlN3S0lDQWdJQ0FnSUNCaWFXNWtSbkpoYldWaWRXWm1aWEk2SUVKbExBb2dJQ0FnSUNBZ0lIVnpaVkJ5YjJkeVlXMDZJRmtzQ2lBZ0lDQWdJQ0FnYzJWMFFteGxibVJwYm1jNklHZGxMQW9nSUNBZ0lDQWdJSE5sZEUxaGRHVnlhV0ZzT2lCNFpTd0tJQ0FnSUNBZ0lDQnpaWFJHYkdsd1UybGtaV1E2SUU5bExBb2dJQ0FnSUNBZ0lITmxkRU4xYkd4R1lXTmxPaUJITEFvZ0lDQWdJQ0FnSUhObGRFeHBibVZYYVdSMGFEb2dhaXdLSUNBZ0lDQWdJQ0J6WlhSUWIyeDVaMjl1VDJabWMyVjBPaUJMTEFvZ0lDQWdJQ0FnSUhObGRGTmphWE56YjNKVVpYTjBPaUIxWlN3S0lDQWdJQ0FnSUNCaFkzUnBkbVZVWlhoMGRYSmxPaUJ6WlN3S0lDQWdJQ0FnSUNCaWFXNWtWR1Y0ZEhWeVpUb2dVMlVzQ2lBZ0lDQWdJQ0FnZFc1aWFXNWtWR1Y0ZEhWeVpUb2dWR1VzQ2lBZ0lDQWdJQ0FnWTI5dGNISmxjM05sWkZSbGVFbHRZV2RsTWtRNklGQmxMQW9nSUNBZ0lDQWdJSFJsZUVsdFlXZGxNa1E2SUhKbExBb2dJQ0FnSUNBZ0lIUmxlRWx0WVdkbE0wUTZJRm9zQ2lBZ0lDQWdJQ0FnZEdWNFUzUnZjbUZuWlRKRU9pQktMQW9nSUNBZ0lDQWdJSFJsZUZOMGIzSmhaMlV6UkRvZ0pDd0tJQ0FnSUNBZ0lDQjBaWGhUZFdKSmJXRm5aVEpFT2lCWlpTd0tJQ0FnSUNBZ0lDQjBaWGhUZFdKSmJXRm5aVE5FT2lCRExBb2dJQ0FnSUNBZ0lHTnZiWEJ5WlhOelpXUlVaWGhUZFdKSmJXRm5aVEpFT2lCVUxBb2dJQ0FnSUNBZ0lITmphWE56YjNJNklFMWxMQW9nSUNBZ0lDQWdJSFpwWlhkd2IzSjBPaUIyWlN3S0lDQWdJQ0FnSUNCeVpYTmxkRG9nZEdVS0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z1ZIZ29jeXdnWlN3Z2RDd2diaXdnYVN3Z2Npd2dieWtnZXdvZ0lDQWdiR1YwSUdFZ1BTQnBMbWx6VjJWaVIwd3lMQ0JzSUQwZ2FTNXRZWGhVWlhoMGRYSmxjeXdnWXlBOUlHa3ViV0Y0UTNWaVpXMWhjRk5wZW1Vc0lHZ2dQU0JwTG0xaGVGUmxlSFIxY21WVGFYcGxMQ0IxSUQwZ2FTNXRZWGhUWVcxd2JHVnpMQ0JtSUQwZ1pTNW9ZWE1vSWxkRlFrZE1YMjExYkhScGMyRnRjR3hsWkY5eVpXNWtaWEpmZEc5ZmRHVjRkSFZ5WlNJcElEOGdaUzVuWlhRb0lsZEZRa2RNWDIxMWJIUnBjMkZ0Y0d4bFpGOXlaVzVrWlhKZmRHOWZkR1Y0ZEhWeVpTSXBJRG9nZG05cFpDQXdMQ0J0SUQwZ2JtVjNJRmRsWVd0TllYQXNJSGdzSUhZZ1BTQWhNVHNLSUNBZ0lIUnllU0I3Q2lBZ0lDQWdJQ0FnZGlBOUlIUjVjR1Z2WmlCUFptWnpZM0psWlc1RFlXNTJZWE1nUENBaWRTSWdKaVlnYm1WM0lFOW1abk5qY21WbGJrTmhiblpoY3lneExDQXhLUzVuWlhSRGIyNTBaWGgwS0NJeVpDSXBJQ0U5UFNCdWRXeHNPd29nSUNBZ2ZTQmpZWFJqYUNBZ2UzMEtJQ0FnSUdaMWJtTjBhVzl1SUdjb1F5d2dWQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIySUQ4Z2JtVjNJRTltWm5OamNtVmxia05oYm5aaGN5aERMQ0JVS1NBNklIRnpLQ0pqWVc1MllYTWlLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUhBb1F5d2dWQ3dnU2l3Z0pDa2dld29nSUNBZ0lDQWdJR3hsZENCeVpTQTlJREU3Q2lBZ0lDQWdJQ0FnYVdZZ0tDaERMbmRwWkhSb0lENGdKQ0I4ZkNCRExtaGxhV2RvZENBK0lDUXBJQ1ltSUNoeVpTQTlJQ1FnTHlCTllYUm9MbTFoZUNoRExuZHBaSFJvTENCRExtaGxhV2RvZENrcExDQnlaU0E4SURFZ2ZId2dWQ0E5UFQwZ0lUQXBJR2xtSUNoMGVYQmxiMllnU0ZSTlRFbHRZV2RsUld4bGJXVnVkQ0E4SUNKMUlpQW1KaUJESUdsdWMzUmhibU5sYjJZZ1NGUk5URWx0WVdkbFJXeGxiV1Z1ZENCOGZDQjBlWEJsYjJZZ1NGUk5URU5oYm5aaGMwVnNaVzFsYm5RZ1BDQWlkU0lnSmlZZ1F5QnBibk4wWVc1alpXOW1JRWhVVFV4RFlXNTJZWE5GYkdWdFpXNTBJSHg4SUhSNWNHVnZaaUJKYldGblpVSnBkRzFoY0NBOElDSjFJaUFtSmlCRElHbHVjM1JoYm1ObGIyWWdTVzFoWjJWQ2FYUnRZWEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZvZ1BTQlVJRDhnU21NZ09pQk5ZWFJvTG1ac2IyOXlMQ0JOWlNBOUlGb29jbVVnS2lCRExuZHBaSFJvS1N3Z2RtVWdQU0JhS0hKbElDb2dReTVvWldsbmFIUXBPd29nSUNBZ0lDQWdJQ0FnSUNCNElEMDlQU0IyYjJsa0lEQWdKaVlnS0hnZ1BTQm5LRTFsTENCMlpTa3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR1VnUFNCS0lEOGdaeWhOWlN3Z2RtVXBJRG9nZURzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUmxMbmRwWkhSb0lEMGdUV1VzSUhSbExtaGxhV2RvZENBOUlIWmxMQ0IwWlM1blpYUkRiMjUwWlhoMEtDSXlaQ0lwTG1SeVlYZEpiV0ZuWlNoRExDQXdMQ0F3TENCTlpTd2dkbVVwTENCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUZSbGVIUjFjbVVnYUdGeklHSmxaVzRnY21WemFYcGxaQ0JtY205dElDZ2lJQ3NnUXk1M2FXUjBhQ0FySUNKNElpQXJJRU11YUdWcFoyaDBJQ3NnSWlrZ2RHOGdLQ0lnS3lCTlpTQXJJQ0o0SWlBcklIWmxJQ3NnSWlrdUlpa3NJSFJsT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdJbVJoZEdFaUlHbHVJRU1nSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCSmJXRm5aU0JwYmlCRVlYUmhWR1Y0ZEhWeVpTQnBjeUIwYjI4Z1ltbG5JQ2dpSUNzZ1F5NTNhV1IwYUNBcklDSjRJaUFySUVNdWFHVnBaMmgwSUNzZ0lpa3VJaWtzSUVNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVNN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmZLRU1wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVdFb1F5NTNhV1IwYUNrZ0ppWWdhV0VvUXk1b1pXbG5hSFFwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z2VTaERLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR0VnUHlBaE1TQTZJRU11ZDNKaGNGTWdJVDA5SUhaMElIeDhJRU11ZDNKaGNGUWdJVDA5SUhaMElIeDhJRU11YldsdVJtbHNkR1Z5SUNFOVBTQnlkQ0FtSmlCRExtMXBia1pwYkhSbGNpQWhQVDBnZEhRN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmlLRU1zSUZRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1F5NW5aVzVsY21GMFpVMXBjRzFoY0hNZ0ppWWdWQ0FtSmlCRExtMXBia1pwYkhSbGNpQWhQVDBnY25RZ0ppWWdReTV0YVc1R2FXeDBaWElnSVQwOUlIUjBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnUVNoREtTQjdDaUFnSUNBZ0lDQWdjeTVuWlc1bGNtRjBaVTFwY0cxaGNDaERLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUV3b1F5d2dWQ3dnU2l3Z0pDa2dld29nSUNBZ0lDQWdJR2xtSUNoaElEMDlQU0FoTVNrZ2NtVjBkWEp1SUZRN0NpQWdJQ0FnSUNBZ2FXWWdLRU1nSVQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOYlExMGdJVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVJSE5iUTEwN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dRWFIwWlcxd2RDQjBieUIxYzJVZ2JtOXVMV1Y0YVhOMGFXNW5JRmRsWWtkTUlHbHVkR1Z5Ym1Gc0lHWnZjbTFoZENBbklpQXJJRU1nS3lBaUp5SXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2NtVWdQU0JVT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJVSUQwOVBTQTJOREF6SUNZbUlDaEtJRDA5UFNBMU1USTJJQ1ltSUNoeVpTQTlJRE16TXpJMktTd2dTaUE5UFQwZ05URXpNU0FtSmlBb2NtVWdQU0F6TXpNeU5Ta3NJRW9nUFQwOUlEVXhNakVnSmlZZ0tISmxJRDBnTXpNek1qRXBLU3dnVkNBOVBUMGdOalF3TnlBbUppQW9TaUE5UFQwZ05URXlOaUFtSmlBb2NtVWdQU0F6TkRnek55a3NJRW9nUFQwOUlEVXhNekVnSmlZZ0tISmxJRDBnTXpRNE5ETXBMQ0JLSUQwOVBTQTFNVEl4SUNZbUlDaHlaU0E5SURNeU9EUTVLU2tzSUZRZ1BUMDlJRFkwTURnZ0ppWWdLRW9nUFQwOUlEVXhNallnSmlZZ0tISmxJRDBnTXpRNE16WXBMQ0JLSUQwOVBTQTFNVE14SUNZbUlDaHlaU0E5SURNME9EUXlLU3dnU2lBOVBUMGdOVEV5TVNBbUppQW9jbVVnUFNBa0lEMDlQU0JQYVNBL0lETTFPVEEzSURvZ016STROVFlwS1N3Z0tISmxJRDA5UFNBek16TXlOU0I4ZkNCeVpTQTlQVDBnTXpNek1qWWdmSHdnY21VZ1BUMDlJRE0wT0RReUlIeDhJSEpsSUQwOVBTQXpORGd6TmlrZ0ppWWdaUzVuWlhRb0lrVllWRjlqYjJ4dmNsOWlkV1ptWlhKZlpteHZZWFFpS1N3Z2NtVTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJKS0VNc0lGUXNJRW9wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWWloRExDQktLU0E5UFQwZ0lUQWdmSHdnUXk1cGMwWnlZVzFsWW5WbVptVnlWR1Y0ZEhWeVpTQW1KaUJETG0xcGJrWnBiSFJsY2lBaFBUMGdjblFnSmlZZ1F5NXRhVzVHYVd4MFpYSWdJVDA5SUhSMElEOGdUV0YwYUM1c2IyY3lLRTFoZEdndWJXRjRLRlF1ZDJsa2RHZ3NJRlF1YUdWcFoyaDBLU2tnS3lBeElEb2dReTV0YVhCdFlYQnpJQ0U5UFNCMmIybGtJREFnSmlZZ1F5NXRhWEJ0WVhCekxteGxibWQwYUNBK0lEQWdQeUJETG0xcGNHMWhjSE11YkdWdVozUm9JRG9nUXk1cGMwTnZiWEJ5WlhOelpXUlVaWGgwZFhKbElDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb1F5NXBiV0ZuWlNrZ1B5QlVMbTFwY0cxaGNITXViR1Z1WjNSb0lEb2dNVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdzb1F5a2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQkRJRDA5UFNCeWRDQjhmQ0JESUQwOVBTQjBZU0I4ZkNCRElEMDlQU0J1WVNBL0lEazNNamdnT2lBNU56STVPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnUWloREtTQjdDaUFnSUNBZ0lDQWdiR1YwSUZRZ1BTQkRMblJoY21kbGREc0tJQ0FnSUNBZ0lDQlVMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSW1ScGMzQnZjMlVpTENCQ0tTd2dkeWhVS1N3Z1ZDNXBjMVpwWkdWdlZHVjRkSFZ5WlNBbUppQnRMbVJsYkdWMFpTaFVLU3dnYnk1dFpXMXZjbmt1ZEdWNGRIVnlaWE10TFRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlGQW9ReWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQlVJRDBnUXk1MFlYSm5aWFE3Q2lBZ0lDQWdJQ0FnVkM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dVQ2tzSUVVb1ZDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUIzS0VNcElIc0tJQ0FnSUNBZ0lDQnNaWFFnVkNBOUlHNHVaMlYwS0VNcE93b2dJQ0FnSUNBZ0lGUXVYMTkzWldKbmJFbHVhWFFnSVQwOUlIWnZhV1FnTUNBbUppQW9jeTVrWld4bGRHVlVaWGgwZFhKbEtGUXVYMTkzWldKbmJGUmxlSFIxY21VcExDQnVMbkpsYlc5MlpTaERLU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCRktFTXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1ZDQTlJRU11ZEdWNGRIVnlaU3dnU2lBOUlHNHVaMlYwS0VNcExDQWtJRDBnYmk1blpYUW9WQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tDRWhReWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkM1ZlgzZGxZbWRzVkdWNGRIVnlaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHpMbVJsYkdWMFpWUmxlSFIxY21Vb0pDNWZYM2RsWW1kc1ZHVjRkSFZ5WlNrc0lHOHViV1Z0YjNKNUxuUmxlSFIxY21WekxTMHBMQ0JETG1SbGNIUm9WR1Y0ZEhWeVpTQW1KaUJETG1SbGNIUm9WR1Y0ZEhWeVpTNWthWE53YjNObEtDa3NJRU11YVhOWFpXSkhURU4xWW1WU1pXNWtaWEpVWVhKblpYUXBJR1p2Y2loc1pYUWdjbVVnUFNBd095QnlaU0E4SURZN0lISmxLeXNwY3k1a1pXeGxkR1ZHY21GdFpXSjFabVpsY2loS0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNsdHlaVjBwTENCS0xsOWZkMlZpWjJ4RVpYQjBhR0oxWm1abGNpQW1KaUJ6TG1SbGJHVjBaVkpsYm1SbGNtSjFabVpsY2loS0xsOWZkMlZpWjJ4RVpYQjBhR0oxWm1abGNsdHlaVjBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhNdVpHVnNaWFJsUm5KaGJXVmlkV1ptWlhJb1NpNWZYM2RsWW1kc1JuSmhiV1ZpZFdabVpYSXBMQ0JLTGw5ZmQyVmlaMnhFWlhCMGFHSjFabVpsY2lBbUppQnpMbVJsYkdWMFpWSmxibVJsY21KMVptWmxjaWhLTGw5ZmQyVmlaMnhFWlhCMGFHSjFabVpsY2lrc0lFb3VYMTkzWldKbmJFMTFiSFJwYzJGdGNHeGxaRVp5WVcxbFluVm1abVZ5SUNZbUlITXVaR1ZzWlhSbFJuSmhiV1ZpZFdabVpYSW9TaTVmWDNkbFltZHNUWFZzZEdsellXMXdiR1ZrUm5KaGJXVmlkV1ptWlhJcExDQktMbDlmZDJWaVoyeERiMnh2Y2xKbGJtUmxjbUoxWm1abGNpQW1KaUJ6TG1SbGJHVjBaVkpsYm1SbGNtSjFabVpsY2loS0xsOWZkMlZpWjJ4RGIyeHZjbEpsYm1SbGNtSjFabVpsY2lrc0lFb3VYMTkzWldKbmJFUmxjSFJvVW1WdVpHVnlZblZtWm1WeUlDWW1JSE11WkdWc1pYUmxVbVZ1WkdWeVluVm1abVZ5S0VvdVgxOTNaV0puYkVSbGNIUm9VbVZ1WkdWeVluVm1abVZ5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VNdWFYTlhaV0pIVEUxMWJIUnBjR3hsVW1WdVpHVnlWR0Z5WjJWMGN5a2dabTl5S0d4bGRDQnlaU0E5SURBc0lGb2dQU0JVTG14bGJtZDBhRHNnY21VZ1BDQmFPeUJ5WlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JOWlNBOUlHNHVaMlYwS0ZSYmNtVmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTFsTGw5ZmQyVmlaMnhVWlhoMGRYSmxJQ1ltSUNoekxtUmxiR1YwWlZSbGVIUjFjbVVvVFdVdVgxOTNaV0puYkZSbGVIUjFjbVVwTENCdkxtMWxiVzl5ZVM1MFpYaDBkWEpsY3kwdEtTd2diaTV5WlcxdmRtVW9WRnR5WlYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHNHVjbVZ0YjNabEtGUXBMQ0J1TG5KbGJXOTJaU2hES1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQnNaWFFnUkNBOUlEQTdDaUFnSUNCbWRXNWpkR2x2YmlCVktDa2dld29nSUNBZ0lDQWdJRVFnUFNBd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdSaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdReUE5SUVRN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVNZ1BqMGdiQ0FtSmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVkdWNGRIVnlaWE02SUZSeWVXbHVaeUIwYnlCMWMyVWdJaUFySUVNZ0t5QWlJSFJsZUhSMWNtVWdkVzVwZEhNZ2QyaHBiR1VnZEdocGN5QkhVRlVnYzNWd2NHOXlkSE1nYjI1c2VTQWlJQ3NnYkNrc0lFUWdLejBnTVN3Z1F6c0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRThvUXl3Z1ZDa2dld29nSUNBZ0lDQWdJR3hsZENCS0lEMGdiaTVuWlhRb1F5azdDaUFnSUNBZ0lDQWdhV1lnS0VNdWFYTldhV1JsYjFSbGVIUjFjbVVnSmlZZ2MyVW9ReWtzSUVNdWRtVnljMmx2YmlBK0lEQWdKaVlnU2k1ZlgzWmxjbk5wYjI0Z0lUMDlJRU11ZG1WeWMybHZiaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnSkNBOUlFTXVhVzFoWjJVN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNna0lEMDlQU0IyYjJsa0lEQXBJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dWR1Y0ZEhWeVpTQnRZWEpyWldRZ1ptOXlJSFZ3WkdGMFpTQmlkWFFnYVcxaFoyVWdhWE1nZFc1a1pXWnBibVZrSWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLQ1F1WTI5dGNHeGxkR1VnUFQwOUlDRXhLU0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJRlJsZUhSMWNtVWdiV0Z5YTJWa0lHWnZjaUIxY0dSaGRHVWdZblYwSUdsdFlXZGxJR2x6SUdsdVkyOXRjR3hsZEdVaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkNaU2hLTENCRExDQlVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMExtRmpkR2wyWlZSbGVIUjFjbVVvTXpNNU9EUWdLeUJVS1N3Z2RDNWlhVzVrVkdWNGRIVnlaU2d6TlRVekxDQktMbDlmZDJWaVoyeFVaWGgwZFhKbEtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRzVsS0VNc0lGUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1NpQTlJRzR1WjJWMEtFTXBPd29nSUNBZ0lDQWdJR2xtSUNoRExuWmxjbk5wYjI0Z1BpQXdJQ1ltSUVvdVgxOTJaWEp6YVc5dUlDRTlQU0JETG5abGNuTnBiMjRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdRbVVvU2l3Z1F5d2dWQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RDNWhZM1JwZG1WVVpYaDBkWEpsS0RNek9UZzBJQ3NnVkNrc0lIUXVZbWx1WkZSbGVIUjFjbVVvTXpVNE5qWXNJRW91WDE5M1pXSm5iRlJsZUhSMWNtVXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnWTJVb1F5d2dWQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQktJRDBnYmk1blpYUW9ReWs3Q2lBZ0lDQWdJQ0FnYVdZZ0tFTXVkbVZ5YzJsdmJpQStJREFnSmlZZ1NpNWZYM1psY25OcGIyNGdJVDA5SUVNdWRtVnljMmx2YmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JDWlNoS0xDQkRMQ0JVS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBMbUZqZEdsMlpWUmxlSFIxY21Vb016TTVPRFFnS3lCVUtTd2dkQzVpYVc1a1ZHVjRkSFZ5WlNnek1qZzNPU3dnU2k1ZlgzZGxZbWRzVkdWNGRIVnlaU2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCV0tFTXNJRlFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdTaUE5SUc0dVoyVjBLRU1wT3dvZ0lDQWdJQ0FnSUdsbUlDaERMblpsY25OcGIyNGdQaUF3SUNZbUlFb3VYMTkyWlhKemFXOXVJQ0U5UFNCRExuWmxjbk5wYjI0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnV1NoS0xDQkRMQ0JVS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBMbUZqZEdsMlpWUmxlSFIxY21Vb016TTVPRFFnS3lCVUtTd2dkQzVpYVc1a1ZHVjRkSFZ5WlNnek5EQTJOeXdnU2k1ZlgzZGxZbWRzVkdWNGRIVnlaU2s3Q2lBZ0lDQjlDaUFnSUNCc1pYUWdWeUE5SUhzS0lDQWdJQ0FnSUNCYlRuTmRPaUF4TURRNU55d0tJQ0FnSUNBZ0lDQmJkblJkT2lBek16QTNNU3dLSUNBZ0lDQWdJQ0JiUW5OZE9pQXpNelkwT0FvZ0lDQWdmU3dnYUdVZ1BTQjdDaUFnSUNBZ0lDQWdXM0owWFRvZ09UY3lPQ3dLSUNBZ0lDQWdJQ0JiZEdGZE9pQTVPVGcwTEFvZ0lDQWdJQ0FnSUZ0dVlWMDZJRGs1T0RZc0NpQWdJQ0FnSUNBZ1czUjBYVG9nT1RjeU9Td0tJQ0FnSUNBZ0lDQmJWMk5kT2lBNU9UZzFMQW9nSUNBZ0lDQWdJRnRWYVYwNklEazVPRGNLSUNBZ0lIMDdDaUFnSUNCbWRXNWpkR2x2YmlCc1pTaERMQ0JVTENCS0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0VvZ1B5QW9jeTUwWlhoUVlYSmhiV1YwWlhKcEtFTXNJREV3TWpReUxDQlhXMVF1ZDNKaGNGTmRLU3dnY3k1MFpYaFFZWEpoYldWMFpYSnBLRU1zSURFd01qUXpMQ0JYVzFRdWQzSmhjRlJkS1N3Z0tFTWdQVDA5SURNeU9EYzVJSHg4SUVNZ1BUMDlJRE0xT0RZMktTQW1KaUJ6TG5SbGVGQmhjbUZ0WlhSbGNta29ReXdnTXpJNE9ESXNJRmRiVkM1M2NtRndVbDBwTENCekxuUmxlRkJoY21GdFpYUmxjbWtvUXl3Z01UQXlOREFzSUdobFcxUXViV0ZuUm1sc2RHVnlYU2tzSUhNdWRHVjRVR0Z5WVcxbGRHVnlhU2hETENBeE1ESTBNU3dnYUdWYlZDNXRhVzVHYVd4MFpYSmRLU2tnT2lBb2N5NTBaWGhRWVhKaGJXVjBaWEpwS0VNc0lERXdNalF5TENBek16QTNNU2tzSUhNdWRHVjRVR0Z5WVcxbGRHVnlhU2hETENBeE1ESTBNeXdnTXpNd056RXBMQ0FvUXlBOVBUMGdNekk0TnprZ2ZId2dReUE5UFQwZ016VTROallwSUNZbUlITXVkR1Y0VUdGeVlXMWxkR1Z5YVNoRExDQXpNamc0TWl3Z016TXdOekVwTENBb1ZDNTNjbUZ3VXlBaFBUMGdkblFnZkh3Z1ZDNTNjbUZ3VkNBaFBUMGdkblFwSUNZbUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1ZHVjRkSFZ5WlNCcGN5QnViM1FnY0c5M1pYSWdiMllnZEhkdkxpQlVaWGgwZFhKbExuZHlZWEJUSUdGdVpDQlVaWGgwZFhKbExuZHlZWEJVSUhOb2IzVnNaQ0JpWlNCelpYUWdkRzhnVkVoU1JVVXVRMnhoYlhCVWIwVmtaMlZYY21Gd2NHbHVaeTRpS1N3Z2N5NTBaWGhRWVhKaGJXVjBaWEpwS0VNc0lERXdNalF3TENCcktGUXViV0ZuUm1sc2RHVnlLU2tzSUhNdWRHVjRVR0Z5WVcxbGRHVnlhU2hETENBeE1ESTBNU3dnYXloVUxtMXBia1pwYkhSbGNpa3BMQ0JVTG0xcGJrWnBiSFJsY2lBaFBUMGdjblFnSmlZZ1ZDNXRhVzVHYVd4MFpYSWdJVDA5SUhSMElDWW1JR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dWR1Y0ZEhWeVpTQnBjeUJ1YjNRZ2NHOTNaWElnYjJZZ2RIZHZMaUJVWlhoMGRYSmxMbTFwYmtacGJIUmxjaUJ6YUc5MWJHUWdZbVVnYzJWMElIUnZJRlJJVWtWRkxrNWxZWEpsYzNSR2FXeDBaWElnYjNJZ1ZFaFNSVVV1VEdsdVpXRnlSbWxzZEdWeUxpSXBLU3dnWlM1b1lYTW9Ja1ZZVkY5MFpYaDBkWEpsWDJacGJIUmxjbDloYm1semIzUnliM0JwWXlJcElEMDlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ0pDQTlJR1V1WjJWMEtDSkZXRlJmZEdWNGRIVnlaVjltYVd4MFpYSmZZVzVwYzI5MGNtOXdhV01pS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0ZRdWRIbHdaU0E5UFQwZ2JtNGdKaVlnWlM1b1lYTW9JazlGVTE5MFpYaDBkWEpsWDJac2IyRjBYMnhwYm1WaGNpSXBJRDA5UFNBaE1TQjhmQ0JoSUQwOVBTQWhNU0FtSmlCVUxuUjVjR1VnUFQwOUlHdHVJQ1ltSUdVdWFHRnpLQ0pQUlZOZmRHVjRkSFZ5WlY5b1lXeG1YMlpzYjJGMFgyeHBibVZoY2lJcElEMDlQU0FoTVNrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQW9WQzVoYm1semIzUnliM0I1SUQ0Z01TQjhmQ0J1TG1kbGRDaFVLUzVmWDJOMWNuSmxiblJCYm1semIzUnliM0I1S1NBbUppQW9jeTUwWlhoUVlYSmhiV1YwWlhKbUtFTXNJQ1F1VkVWWVZGVlNSVjlOUVZoZlFVNUpVMDlVVWs5UVdWOUZXRlFzSUUxaGRHZ3ViV2x1S0ZRdVlXNXBjMjkwY205d2VTd2dhUzVuWlhSTllYaEJibWx6YjNSeWIzQjVLQ2twS1N3Z2JpNW5aWFFvVkNrdVgxOWpkWEp5Wlc1MFFXNXBjMjkwY205d2VTQTlJRlF1WVc1cGMyOTBjbTl3ZVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdabVVvUXl3Z1ZDa2dld29nSUNBZ0lDQWdJRU11WDE5M1pXSm5iRWx1YVhRZ1BUMDlJSFp2YVdRZ01DQW1KaUFvUXk1ZlgzZGxZbWRzU1c1cGRDQTlJQ0V3TENCVUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltUnBjM0J2YzJVaUxDQkNLU3dnUXk1ZlgzZGxZbWRzVkdWNGRIVnlaU0E5SUhNdVkzSmxZWFJsVkdWNGRIVnlaU2dwTENCdkxtMWxiVzl5ZVM1MFpYaDBkWEpsY3lzcktUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRUpsS0VNc0lGUXNJRW9wSUhzS0lDQWdJQ0FnSUNCc1pYUWdKQ0E5SURNMU5UTTdDaUFnSUNBZ0lDQWdWQzVwYzBSaGRHRlVaWGgwZFhKbE1rUkJjbkpoZVNBbUppQW9KQ0E5SURNMU9EWTJLU3dnVkM1cGMwUmhkR0ZVWlhoMGRYSmxNMFFnSmlZZ0tDUWdQU0F6TWpnM09Ta3NJR1psS0VNc0lGUXBMQ0IwTG1GamRHbDJaVlJsZUhSMWNtVW9Nek01T0RRZ0t5QktLU3dnZEM1aWFXNWtWR1Y0ZEhWeVpTZ2tMQ0JETGw5ZmQyVmlaMnhVWlhoMGRYSmxLU3dnY3k1d2FYaGxiRk4wYjNKbGFTZ3pOelEwTUN3Z1ZDNW1iR2x3V1Nrc0lITXVjR2w0Wld4VGRHOXlaV2tvTXpjME5ERXNJRlF1Y0hKbGJYVnNkR2x3YkhsQmJIQm9ZU2tzSUhNdWNHbDRaV3hUZEc5eVpXa29Nek14Tnl3Z1ZDNTFibkJoWTJ0QmJHbG5ibTFsYm5RcExDQnpMbkJwZUdWc1UzUnZjbVZwS0RNM05EUXpMQ0F3S1RzS0lDQWdJQ0FnSUNCc1pYUWdjbVVnUFNCNUtGUXBJQ1ltSUY4b1ZDNXBiV0ZuWlNrZ1BUMDlJQ0V4TENCYUlEMGdjQ2hVTG1sdFlXZGxMQ0J5WlN3Z0lURXNJR2dwTENCTlpTQTlJRjhvV2lrZ2ZId2dZU3dnZG1VZ1BTQnlMbU52Ym5abGNuUW9WQzVtYjNKdFlYUXBMQ0IwWlNBOUlISXVZMjl1ZG1WeWRDaFVMblI1Y0dVcExDQlNJRDBnVENoVUxtbHVkR1Z5Ym1Gc1JtOXliV0YwTENCMlpTd2dkR1VzSUZRdVpXNWpiMlJwYm1jcE93b2dJQ0FnSUNBZ0lHeGxLQ1FzSUZRc0lFMWxLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1pXVXNJRkVnUFNCVUxtMXBjRzFoY0hNc0lFVmxJRDBnWVNBbUppQlVMbWx6Vm1sa1pXOVVaWGgwZFhKbElDRTlQU0FoTUN3Z2JXVWdQU0JETGw5ZmRtVnljMmx2YmlBOVBUMGdkbTlwWkNBd0xDQlNaU0E5SUVrb1ZDd2dXaXdnVFdVcE93b2dJQ0FnSUNBZ0lHbG1JQ2hVTG1selJHVndkR2hVWlhoMGRYSmxLU0JTSUQwZ05qUXdNaXdnWVNBL0lGUXVkSGx3WlNBOVBUMGdibTRnUHlCU0lEMGdNell3TVRJZ09pQlVMblI1Y0dVZ1BUMDlJRkJ6SUQ4Z1VpQTlJRE16TVRrd0lEb2dWQzUwZVhCbElEMDlQU0JVYVNBL0lGSWdQU0F6TlRBMU5pQTZJRklnUFNBek16RTRPU0E2SUZRdWRIbHdaU0E5UFQwZ2JtNGdKaVlnWTI5dWMyOXNaUzVsY25KdmNpZ2lWMlZpUjB4U1pXNWtaWEpsY2pvZ1JteHZZWFJwYm1jZ2NHOXBiblFnWkdWd2RHZ2dkR1Y0ZEhWeVpTQnlaWEYxYVhKbGN5QlhaV0pIVERJdUlpa3NJRlF1Wm05eWJXRjBJRDA5UFNCV2JpQW1KaUJTSUQwOVBTQTJOREF5SUNZbUlGUXVkSGx3WlNBaFBUMGdZM0lnSmlZZ1ZDNTBlWEJsSUNFOVBTQlFjeUFtSmlBb1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCVmMyVWdWVzV6YVdkdVpXUlRhRzl5ZEZSNWNHVWdiM0lnVlc1emFXZHVaV1JKYm5SVWVYQmxJR1p2Y2lCRVpYQjBhRVp2Y20xaGRDQkVaWEIwYUZSbGVIUjFjbVV1SWlrc0lGUXVkSGx3WlNBOUlHTnlMQ0IwWlNBOUlISXVZMjl1ZG1WeWRDaFVMblI1Y0dVcEtTd2dWQzVtYjNKdFlYUWdQVDA5SUV4cElDWW1JRklnUFQwOUlEWTBNRElnSmlZZ0tGSWdQU0F6TkRBME1Td2dWQzUwZVhCbElDRTlQU0JVYVNBbUppQW9ZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQlZjMlVnVlc1emFXZHVaV1JKYm5ReU5EaFVlWEJsSUdadmNpQkVaWEIwYUZOMFpXNWphV3hHYjNKdFlYUWdSR1Z3ZEdoVVpYaDBkWEpsTGlJcExDQlVMblI1Y0dVZ1BTQlVhU3dnZEdVZ1BTQnlMbU52Ym5abGNuUW9WQzUwZVhCbEtTa3BMQ0JGWlNBbUppQnRaU0EvSUhRdWRHVjRVM1J2Y21GblpUSkVLRE0xTlRNc0lERXNJRklzSUZvdWQybGtkR2dzSUZvdWFHVnBaMmgwS1NBNklIUXVkR1Y0U1cxaFoyVXlSQ2d6TlRVekxDQXdMQ0JTTENCYUxuZHBaSFJvTENCYUxtaGxhV2RvZEN3Z01Dd2dkbVVzSUhSbExDQnVkV3hzS1RzS0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoVUxtbHpSR0YwWVZSbGVIUjFjbVVwSUdsbUlDaFJMbXhsYm1kMGFDQStJREFnSmlZZ1RXVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1JXVWdKaVlnYldVZ0ppWWdkQzUwWlhoVGRHOXlZV2RsTWtRb016VTFNeXdnVW1Vc0lGSXNJRkZiTUYwdWQybGtkR2dzSUZGYk1GMHVhR1ZwWjJoMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J2WlNBOUlEQXNJRXhsSUQwZ1VTNXNaVzVuZEdnN0lHOWxJRHdnVEdVN0lHOWxLeXNwWldVZ1BTQlJXMjlsWFN3Z1JXVWdQeUIwTG5SbGVGTjFZa2x0WVdkbE1rUW9NelUxTXl3Z01Dd2dNQ3dnTUN3Z1pXVXVkMmxrZEdnc0lHVmxMbWhsYVdkb2RDd2dkbVVzSUhSbExDQmxaUzVrWVhSaEtTQTZJSFF1ZEdWNFNXMWhaMlV5UkNnek5UVXpMQ0J2WlN3Z1Vpd2daV1V1ZDJsa2RHZ3NJR1ZsTG1obGFXZG9kQ3dnTUN3Z2RtVXNJSFJsTENCbFpTNWtZWFJoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdWQzVuWlc1bGNtRjBaVTFwY0cxaGNITWdQU0FoTVRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnUldVZ1B5QW9iV1VnSmlZZ2RDNTBaWGhUZEc5eVlXZGxNa1FvTXpVMU15d2dVbVVzSUZJc0lGb3VkMmxrZEdnc0lGb3VhR1ZwWjJoMEtTd2dkQzUwWlhoVGRXSkpiV0ZuWlRKRUtETTFOVE1zSURBc0lEQXNJREFzSUZvdWQybGtkR2dzSUZvdWFHVnBaMmgwTENCMlpTd2dkR1VzSUZvdVpHRjBZU2twSURvZ2RDNTBaWGhKYldGblpUSkVLRE0xTlRNc0lEQXNJRklzSUZvdWQybGtkR2dzSUZvdWFHVnBaMmgwTENBd0xDQjJaU3dnZEdVc0lGb3VaR0YwWVNrN0NpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1ZDNXBjME52YlhCeVpYTnpaV1JVWlhoMGRYSmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFVmxJQ1ltSUcxbElDWW1JSFF1ZEdWNFUzUnZjbUZuWlRKRUtETTFOVE1zSUZKbExDQlNMQ0JSV3pCZExuZHBaSFJvTENCUld6QmRMbWhsYVdkb2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYjJVZ1BTQXdMQ0JNWlNBOUlGRXViR1Z1WjNSb095QnZaU0E4SUV4bE95QnZaU3NyS1dWbElEMGdVVnR2WlYwc0lGUXVabTl5YldGMElDRTlQU0JqZENBbUppQlVMbVp2Y20xaGRDQWhQVDBnUjI0Z1B5QjJaU0FoUFQwZ2JuVnNiQ0EvSUVWbElEOGdkQzVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVeVJDZ3pOVFV6TENCdlpTd2dNQ3dnTUN3Z1pXVXVkMmxrZEdnc0lHVmxMbWhsYVdkb2RDd2dkbVVzSUdWbExtUmhkR0VwSURvZ2RDNWpiMjF3Y21WemMyVmtWR1Y0U1cxaFoyVXlSQ2d6TlRVekxDQnZaU3dnVWl3Z1pXVXVkMmxrZEdnc0lHVmxMbWhsYVdkb2RDd2dNQ3dnWldVdVpHRjBZU2tnT2lCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUVGMGRHVnRjSFFnZEc4Z2JHOWhaQ0IxYm5OMWNIQnZjblJsWkNCamIyMXdjbVZ6YzJWa0lIUmxlSFIxY21VZ1ptOXliV0YwSUdsdUlDNTFjR3h2WVdSVVpYaDBkWEpsS0NraUtTQTZJRVZsSUQ4Z2RDNTBaWGhUZFdKSmJXRm5aVEpFS0RNMU5UTXNJRzlsTENBd0xDQXdMQ0JsWlM1M2FXUjBhQ3dnWldVdWFHVnBaMmgwTENCMlpTd2dkR1VzSUdWbExtUmhkR0VwSURvZ2RDNTBaWGhKYldGblpUSkVLRE0xTlRNc0lHOWxMQ0JTTENCbFpTNTNhV1IwYUN3Z1pXVXVhR1ZwWjJoMExDQXdMQ0IyWlN3Z2RHVXNJR1ZsTG1SaGRHRXBPd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvVkM1cGMwUmhkR0ZVWlhoMGRYSmxNa1JCY25KaGVTa2dSV1VnUHlBb2JXVWdKaVlnZEM1MFpYaFRkRzl5WVdkbE0wUW9NelU0TmpZc0lGSmxMQ0JTTENCYUxuZHBaSFJvTENCYUxtaGxhV2RvZEN3Z1dpNWtaWEIwYUNrc0lIUXVkR1Y0VTNWaVNXMWhaMlV6UkNnek5UZzJOaXdnTUN3Z01Dd2dNQ3dnTUN3Z1dpNTNhV1IwYUN3Z1dpNW9aV2xuYUhRc0lGb3VaR1Z3ZEdnc0lIWmxMQ0IwWlN3Z1dpNWtZWFJoS1NrZ09pQjBMblJsZUVsdFlXZGxNMFFvTXpVNE5qWXNJREFzSUZJc0lGb3VkMmxrZEdnc0lGb3VhR1ZwWjJoMExDQmFMbVJsY0hSb0xDQXdMQ0IyWlN3Z2RHVXNJRm91WkdGMFlTazdDaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9WQzVwYzBSaGRHRlVaWGgwZFhKbE0wUXBJRVZsSUQ4Z0tHMWxJQ1ltSUhRdWRHVjRVM1J2Y21GblpUTkVLRE15T0RjNUxDQlNaU3dnVWl3Z1dpNTNhV1IwYUN3Z1dpNW9aV2xuYUhRc0lGb3VaR1Z3ZEdncExDQjBMblJsZUZOMVlrbHRZV2RsTTBRb016STROemtzSURBc0lEQXNJREFzSURBc0lGb3VkMmxrZEdnc0lGb3VhR1ZwWjJoMExDQmFMbVJsY0hSb0xDQjJaU3dnZEdVc0lGb3VaR0YwWVNrcElEb2dkQzUwWlhoSmJXRm5aVE5FS0RNeU9EYzVMQ0F3TENCU0xDQmFMbmRwWkhSb0xDQmFMbWhsYVdkb2RDd2dXaTVrWlhCMGFDd2dNQ3dnZG1Vc0lIUmxMQ0JhTG1SaGRHRXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRlF1YVhOR2NtRnRaV0oxWm1abGNsUmxlSFIxY21VcElFVmxJQ1ltSUcxbElEOGdkQzUwWlhoVGRHOXlZV2RsTWtRb016VTFNeXdnVW1Vc0lGSXNJRm91ZDJsa2RHZ3NJRm91YUdWcFoyaDBLU0E2SUhRdWRHVjRTVzFoWjJVeVJDZ3pOVFV6TENBd0xDQlNMQ0JhTG5kcFpIUm9MQ0JhTG1obGFXZG9kQ3dnTUN3Z2RtVXNJSFJsTENCdWRXeHNLVHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hSTG14bGJtZDBhQ0ErSURBZ0ppWWdUV1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdSV1VnSmlZZ2JXVWdKaVlnZEM1MFpYaFRkRzl5WVdkbE1rUW9NelUxTXl3Z1VtVXNJRklzSUZGYk1GMHVkMmxrZEdnc0lGRmJNRjB1YUdWcFoyaDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdlpTQTlJREFzSUV4bElEMGdVUzVzWlc1bmRHZzdJRzlsSUR3Z1RHVTdJRzlsS3lzcFpXVWdQU0JSVzI5bFhTd2dSV1VnUHlCMExuUmxlRk4xWWtsdFlXZGxNa1FvTXpVMU15d2diMlVzSURBc0lEQXNJSFpsTENCMFpTd2daV1VwSURvZ2RDNTBaWGhKYldGblpUSkVLRE0xTlRNc0lHOWxMQ0JTTENCMlpTd2dkR1VzSUdWbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnVkM1blpXNWxjbUYwWlUxcGNHMWhjSE1nUFNBaE1Uc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1JXVWdQeUFvYldVZ0ppWWdkQzUwWlhoVGRHOXlZV2RsTWtRb016VTFNeXdnVW1Vc0lGSXNJRm91ZDJsa2RHZ3NJRm91YUdWcFoyaDBLU3dnZEM1MFpYaFRkV0pKYldGblpUSkVLRE0xTlRNc0lEQXNJREFzSURBc0lIWmxMQ0IwWlN3Z1dpa3BJRG9nZEM1MFpYaEpiV0ZuWlRKRUtETTFOVE1zSURBc0lGSXNJSFpsTENCMFpTd2dXaWs3Q2lBZ0lDQWdJQ0FnWWloVUxDQk5aU2tnSmlZZ1FTZ2tLU3dnUXk1ZlgzWmxjbk5wYjI0Z1BTQlVMblpsY25OcGIyNHNJRlF1YjI1VmNHUmhkR1VnSmlZZ1ZDNXZibFZ3WkdGMFpTaFVLVHNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUZrb1F5d2dWQ3dnU2lrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hVTG1sdFlXZGxMbXhsYm1kMGFDQWhQVDBnTmlrZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUdabEtFTXNJRlFwTENCMExtRmpkR2wyWlZSbGVIUjFjbVVvTXpNNU9EUWdLeUJLS1N3Z2RDNWlhVzVrVkdWNGRIVnlaU2d6TkRBMk55d2dReTVmWDNkbFltZHNWR1Y0ZEhWeVpTa3NJSE11Y0dsNFpXeFRkRzl5Wldrb016YzBOREFzSUZRdVpteHBjRmtwTENCekxuQnBlR1ZzVTNSdmNtVnBLRE0zTkRReExDQlVMbkJ5WlcxMWJIUnBjR3g1UVd4d2FHRXBMQ0J6TG5CcGVHVnNVM1J2Y21WcEtETXpNVGNzSUZRdWRXNXdZV05yUVd4cFoyNXRaVzUwS1N3Z2N5NXdhWGhsYkZOMGIzSmxhU2d6TnpRME15d2dNQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElDUWdQU0JVSUNZbUlDaFVMbWx6UTI5dGNISmxjM05sWkZSbGVIUjFjbVVnZkh3Z1ZDNXBiV0ZuWlZzd1hTNXBjME52YlhCeVpYTnpaV1JVWlhoMGRYSmxLU3dnY21VZ1BTQlVMbWx0WVdkbFd6QmRJQ1ltSUZRdWFXMWhaMlZiTUYwdWFYTkVZWFJoVkdWNGRIVnlaU3dnV2lBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiMlVnUFNBd095QnZaU0E4SURZN0lHOWxLeXNwSVNRZ0ppWWdJWEpsSUQ4Z1dsdHZaVjBnUFNCd0tGUXVhVzFoWjJWYmIyVmRMQ0FoTVN3Z0lUQXNJR01wSURvZ1dsdHZaVjBnUFNCeVpTQS9JRlF1YVcxaFoyVmJiMlZkTG1sdFlXZGxJRG9nVkM1cGJXRm5aVnR2WlYwN0NpQWdJQ0FnSUNBZ2JHVjBJRTFsSUQwZ1dsc3dYU3dnZG1VZ1BTQmZLRTFsS1NCOGZDQmhMQ0IwWlNBOUlISXVZMjl1ZG1WeWRDaFVMbVp2Y20xaGRDa3NJRklnUFNCeUxtTnZiblpsY25Rb1ZDNTBlWEJsS1N3Z1pXVWdQU0JNS0ZRdWFXNTBaWEp1WVd4R2IzSnRZWFFzSUhSbExDQlNMQ0JVTG1WdVkyOWthVzVuS1N3Z1VTQTlJR0VnSmlZZ1ZDNXBjMVpwWkdWdlZHVjRkSFZ5WlNBaFBUMGdJVEFzSUVWbElEMGdReTVmWDNabGNuTnBiMjRnUFQwOUlIWnZhV1FnTUN3Z2JXVWdQU0JKS0ZRc0lFMWxMQ0IyWlNrN0NpQWdJQ0FnSUNBZ2JHVW9NelF3Tmpjc0lGUXNJSFpsS1RzS0lDQWdJQ0FnSUNCc1pYUWdVbVU3Q2lBZ0lDQWdJQ0FnYVdZZ0tDUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1VTQW1KaUJGWlNBbUppQjBMblJsZUZOMGIzSmhaMlV5UkNnek5EQTJOeXdnYldVc0lHVmxMQ0JOWlM1M2FXUjBhQ3dnVFdVdWFHVnBaMmgwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnZaU0E5SURBN0lHOWxJRHdnTmpzZ2IyVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JTWlNBOUlGcGJiMlZkTG0xcGNHMWhjSE03Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRXhsSUQwZ01Ec2dUR1VnUENCU1pTNXNaVzVuZEdnN0lFeGxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JZWlNBOUlGSmxXMHhsWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVMbVp2Y20xaGRDQWhQVDBnWTNRZ0ppWWdWQzVtYjNKdFlYUWdJVDA5SUVkdUlEOGdkR1VnSVQwOUlHNTFiR3dnUHlCUklEOGdkQzVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVeVJDZ3pOREEyT1NBcklHOWxMQ0JNWlN3Z01Dd2dNQ3dnV0dVdWQybGtkR2dzSUZobExtaGxhV2RvZEN3Z2RHVXNJRmhsTG1SaGRHRXBJRG9nZEM1amIyMXdjbVZ6YzJWa1ZHVjRTVzFoWjJVeVJDZ3pOREEyT1NBcklHOWxMQ0JNWlN3Z1pXVXNJRmhsTG5kcFpIUm9MQ0JZWlM1b1pXbG5hSFFzSURBc0lGaGxMbVJoZEdFcElEb2dZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQkJkSFJsYlhCMElIUnZJR3h2WVdRZ2RXNXpkWEJ3YjNKMFpXUWdZMjl0Y0hKbGMzTmxaQ0IwWlhoMGRYSmxJR1p2Y20xaGRDQnBiaUF1YzJWMFZHVjRkSFZ5WlVOMVltVW9LU0lwSURvZ1VTQS9JSFF1ZEdWNFUzVmlTVzFoWjJVeVJDZ3pOREEyT1NBcklHOWxMQ0JNWlN3Z01Dd2dNQ3dnV0dVdWQybGtkR2dzSUZobExtaGxhV2RvZEN3Z2RHVXNJRklzSUZobExtUmhkR0VwSURvZ2RDNTBaWGhKYldGblpUSkVLRE0wTURZNUlDc2diMlVzSUV4bExDQmxaU3dnV0dVdWQybGtkR2dzSUZobExtaGxhV2RvZEN3Z01Dd2dkR1VzSUZJc0lGaGxMbVJoZEdFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1VtVWdQU0JVTG0xcGNHMWhjSE1zSUZFZ0ppWWdSV1VnSmlZZ0tGSmxMbXhsYm1kMGFDQStJREFnSmlZZ2JXVXJLeXdnZEM1MFpYaFRkRzl5WVdkbE1rUW9NelF3Tmpjc0lHMWxMQ0JsWlN3Z1dsc3dYUzUzYVdSMGFDd2dXbHN3WFM1b1pXbG5hSFFwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnZaU0E5SURBN0lHOWxJRHdnTmpzZ2IyVXJLeWxwWmlBb2NtVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkVnUHlCMExuUmxlRk4xWWtsdFlXZGxNa1FvTXpRd05qa2dLeUJ2WlN3Z01Dd2dNQ3dnTUN3Z1dsdHZaVjB1ZDJsa2RHZ3NJRnBiYjJWZExtaGxhV2RvZEN3Z2RHVXNJRklzSUZwYmIyVmRMbVJoZEdFcElEb2dkQzUwWlhoSmJXRm5aVEpFS0RNME1EWTVJQ3NnYjJVc0lEQXNJR1ZsTENCYVcyOWxYUzUzYVdSMGFDd2dXbHR2WlYwdWFHVnBaMmgwTENBd0xDQjBaU3dnVWl3Z1dsdHZaVjB1WkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFeGxJRDBnTURzZ1RHVWdQQ0JTWlM1c1pXNW5kR2c3SUV4bEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlhaU0E5SUZKbFcweGxYUzVwYldGblpWdHZaVjB1YVcxaFoyVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVVNBL0lIUXVkR1Y0VTNWaVNXMWhaMlV5UkNnek5EQTJPU0FySUc5bExDQk1aU0FySURFc0lEQXNJREFzSUZkbExuZHBaSFJvTENCWFpTNW9aV2xuYUhRc0lIUmxMQ0JTTENCWFpTNWtZWFJoS1NBNklIUXVkR1Y0U1cxaFoyVXlSQ2d6TkRBMk9TQXJJRzlsTENCTVpTQXJJREVzSUdWbExDQlhaUzUzYVdSMGFDd2dWMlV1YUdWcFoyaDBMQ0F3TENCMFpTd2dVaXdnVjJVdVpHRjBZU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUklEOGdkQzUwWlhoVGRXSkpiV0ZuWlRKRUtETTBNRFk1SUNzZ2IyVXNJREFzSURBc0lEQXNJSFJsTENCU0xDQmFXMjlsWFNrZ09pQjBMblJsZUVsdFlXZGxNa1FvTXpRd05qa2dLeUJ2WlN3Z01Dd2daV1VzSUhSbExDQlNMQ0JhVzI5bFhTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFeGxJRDBnTURzZ1RHVWdQQ0JTWlM1c1pXNW5kR2c3SUV4bEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQllaU0E5SUZKbFcweGxYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUklEOGdkQzUwWlhoVGRXSkpiV0ZuWlRKRUtETTBNRFk1SUNzZ2IyVXNJRXhsSUNzZ01Td2dNQ3dnTUN3Z2RHVXNJRklzSUZobExtbHRZV2RsVzI5bFhTa2dPaUIwTG5SbGVFbHRZV2RsTWtRb016UXdOamtnS3lCdlpTd2dUR1VnS3lBeExDQmxaU3dnZEdVc0lGSXNJRmhsTG1sdFlXZGxXMjlsWFNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWWloVUxDQjJaU2tnSmlZZ1FTZ3pOREEyTnlrc0lFTXVYMTkyWlhKemFXOXVJRDBnVkM1MlpYSnphVzl1TENCVUxtOXVWWEJrWVhSbElDWW1JRlF1YjI1VmNHUmhkR1VvVkNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQkRaU2hETENCVUxDQktMQ0FrTENCeVpTa2dld29nSUNBZ0lDQWdJR3hsZENCYUlEMGdjaTVqYjI1MlpYSjBLRW91Wm05eWJXRjBLU3dnVFdVZ1BTQnlMbU52Ym5abGNuUW9TaTUwZVhCbEtTd2dkbVVnUFNCTUtFb3VhVzUwWlhKdVlXeEdiM0p0WVhRc0lGb3NJRTFsTENCS0xtVnVZMjlrYVc1bktUc0tJQ0FnSUNBZ0lDQnVMbWRsZENoVUtTNWZYMmhoYzBWNGRHVnlibUZzVkdWNGRIVnlaWE1nZkh3Z0tISmxJRDA5UFNBek1qZzNPU0I4ZkNCeVpTQTlQVDBnTXpVNE5qWWdQeUIwTG5SbGVFbHRZV2RsTTBRb2NtVXNJREFzSUhabExDQlVMbmRwWkhSb0xDQlVMbWhsYVdkb2RDd2dWQzVrWlhCMGFDd2dNQ3dnV2l3Z1RXVXNJRzUxYkd3cElEb2dkQzUwWlhoSmJXRm5aVEpFS0hKbExDQXdMQ0IyWlN3Z1ZDNTNhV1IwYUN3Z1ZDNW9aV2xuYUhRc0lEQXNJRm9zSUUxbExDQnVkV3hzS1Nrc0lIUXVZbWx1WkVaeVlXMWxZblZtWm1WeUtETTJNVFl3TENCREtTd2dWQzUxYzJWU1pXNWtaWEpVYjFSbGVIUjFjbVVnUHlCbUxtWnlZVzFsWW5WbVptVnlWR1Y0ZEhWeVpUSkVUWFZzZEdsellXMXdiR1ZGV0ZRb016WXhOakFzSUNRc0lISmxMQ0J1TG1kbGRDaEtLUzVmWDNkbFltZHNWR1Y0ZEhWeVpTd2dNQ3dnZFdVb1ZDa3BJRG9nY3k1bWNtRnRaV0oxWm1abGNsUmxlSFIxY21VeVJDZ3pOakUyTUN3Z0pDd2djbVVzSUc0dVoyVjBLRW9wTGw5ZmQyVmlaMnhVWlhoMGRYSmxMQ0F3S1N3Z2RDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb016WXhOakFzSUc1MWJHd3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZVdVb1F5d2dWQ3dnU2lrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2h6TG1KcGJtUlNaVzVrWlhKaWRXWm1aWElvTXpZeE5qRXNJRU1wTENCVUxtUmxjSFJvUW5WbVptVnlJQ1ltSUNGVUxuTjBaVzVqYVd4Q2RXWm1aWElwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUNRZ1BTQXpNekU0T1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VvZ2ZId2dWQzUxYzJWU1pXNWtaWEpVYjFSbGVIUjFjbVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlaU0E5SUZRdVpHVndkR2hVWlhoMGRYSmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVVnSmlZZ2NtVXVhWE5FWlhCMGFGUmxlSFIxY21VZ0ppWWdLSEpsTG5SNWNHVWdQVDA5SUc1dUlEOGdKQ0E5SURNMk1ERXlJRG9nY21VdWRIbHdaU0E5UFQwZ1VITWdKaVlnS0NRZ1BTQXpNekU1TUNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRm9nUFNCMVpTaFVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlF1ZFhObFVtVnVaR1Z5Vkc5VVpYaDBkWEpsSUQ4Z1ppNXlaVzVrWlhKaWRXWm1aWEpUZEc5eVlXZGxUWFZzZEdsellXMXdiR1ZGV0ZRb016WXhOakVzSUZvc0lDUXNJRlF1ZDJsa2RHZ3NJRlF1YUdWcFoyaDBLU0E2SUhNdWNtVnVaR1Z5WW5WbVptVnlVM1J2Y21GblpVMTFiSFJwYzJGdGNHeGxLRE0yTVRZeExDQmFMQ0FrTENCVUxuZHBaSFJvTENCVUxtaGxhV2RvZENrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnpMbkpsYm1SbGNtSjFabVpsY2xOMGIzSmhaMlVvTXpZeE5qRXNJQ1FzSUZRdWQybGtkR2dzSUZRdWFHVnBaMmgwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjeTVtY21GdFpXSjFabVpsY2xKbGJtUmxjbUoxWm1abGNpZ3pOakUyTUN3Z016WXdPVFlzSURNMk1UWXhMQ0JES1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGUXVaR1Z3ZEdoQ2RXWm1aWElnSmlZZ1ZDNXpkR1Z1WTJsc1FuVm1abVZ5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENBa0lEMGdkV1VvVkNrN0NpQWdJQ0FnSUNBZ0lDQWdJRW9nSmlZZ1ZDNTFjMlZTWlc1a1pYSmlkV1ptWlhJZ1B5QnpMbkpsYm1SbGNtSjFabVpsY2xOMGIzSmhaMlZOZFd4MGFYTmhiWEJzWlNnek5qRTJNU3dnSkN3Z016VXdOVFlzSUZRdWQybGtkR2dzSUZRdWFHVnBaMmgwS1NBNklGUXVkWE5sVW1WdVpHVnlWRzlVWlhoMGRYSmxJRDhnWmk1eVpXNWtaWEppZFdabVpYSlRkRzl5WVdkbFRYVnNkR2x6WVcxd2JHVkZXRlFvTXpZeE5qRXNJQ1FzSURNMU1EVTJMQ0JVTG5kcFpIUm9MQ0JVTG1obGFXZG9kQ2tnT2lCekxuSmxibVJsY21KMVptWmxjbE4wYjNKaFoyVW9Nell4TmpFc0lETTBNRFF4TENCVUxuZHBaSFJvTENCVUxtaGxhV2RvZENrc0lITXVabkpoYldWaWRXWm1aWEpTWlc1a1pYSmlkV1ptWlhJb016WXhOakFzSURNek16QTJMQ0F6TmpFMk1Td2dReWs3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJQ1FnUFNCVUxtbHpWMlZpUjB4TmRXeDBhWEJzWlZKbGJtUmxjbFJoY21kbGRITWdQVDA5SUNFd0lEOGdWQzUwWlhoMGRYSmxXekJkSURvZ1ZDNTBaWGgwZFhKbExDQnlaU0E5SUhJdVkyOXVkbVZ5ZENna0xtWnZjbTFoZENrc0lGb2dQU0J5TG1OdmJuWmxjblFvSkM1MGVYQmxLU3dnVFdVZ1BTQk1LQ1F1YVc1MFpYSnVZV3hHYjNKdFlYUXNJSEpsTENCYUxDQWtMbVZ1WTI5a2FXNW5LU3dnZG1VZ1BTQjFaU2hVS1RzS0lDQWdJQ0FnSUNBZ0lDQWdTaUFtSmlCVUxuVnpaVkpsYm1SbGNtSjFabVpsY2lBL0lITXVjbVZ1WkdWeVluVm1abVZ5VTNSdmNtRm5aVTExYkhScGMyRnRjR3hsS0RNMk1UWXhMQ0IyWlN3Z1RXVXNJRlF1ZDJsa2RHZ3NJRlF1YUdWcFoyaDBLU0E2SUZRdWRYTmxVbVZ1WkdWeVZHOVVaWGgwZFhKbElEOGdaaTV5Wlc1a1pYSmlkV1ptWlhKVGRHOXlZV2RsVFhWc2RHbHpZVzF3YkdWRldGUW9Nell4TmpFc0lIWmxMQ0JOWlN3Z1ZDNTNhV1IwYUN3Z1ZDNW9aV2xuYUhRcElEb2djeTV5Wlc1a1pYSmlkV1ptWlhKVGRHOXlZV2RsS0RNMk1UWXhMQ0JOWlN3Z1ZDNTNhV1IwYUN3Z1ZDNW9aV2xuYUhRcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnpMbUpwYm1SU1pXNWtaWEppZFdabVpYSW9Nell4TmpFc0lHNTFiR3dwT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1oyVW9ReXdnVkNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hVSUNZbUlGUXVhWE5YWldKSFRFTjFZbVZTWlc1a1pYSlVZWEpuWlhRcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaVJHVndkR2dnVkdWNGRIVnlaU0IzYVhSb0lHTjFZbVVnY21WdVpHVnlJSFJoY21kbGRITWdhWE1nYm05MElITjFjSEJ2Y25SbFpDSXBPd29nSUNBZ0lDQWdJR2xtSUNoMExtSnBibVJHY21GdFpXSjFabVpsY2lnek5qRTJNQ3dnUXlrc0lDRW9WQzVrWlhCMGFGUmxlSFIxY21VZ0ppWWdWQzVrWlhCMGFGUmxlSFIxY21VdWFYTkVaWEIwYUZSbGVIUjFjbVVwS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSW5KbGJtUmxjbFJoY21kbGRDNWtaWEIwYUZSbGVIUjFjbVVnYlhWemRDQmlaU0JoYmlCcGJuTjBZVzVqWlNCdlppQlVTRkpGUlM1RVpYQjBhRlJsZUhSMWNtVWlLVHNLSUNBZ0lDQWdJQ0FvSVc0dVoyVjBLRlF1WkdWd2RHaFVaWGgwZFhKbEtTNWZYM2RsWW1kc1ZHVjRkSFZ5WlNCOGZDQlVMbVJsY0hSb1ZHVjRkSFZ5WlM1cGJXRm5aUzUzYVdSMGFDQWhQVDBnVkM1M2FXUjBhQ0I4ZkNCVUxtUmxjSFJvVkdWNGRIVnlaUzVwYldGblpTNW9aV2xuYUhRZ0lUMDlJRlF1YUdWcFoyaDBLU0FtSmlBb1ZDNWtaWEIwYUZSbGVIUjFjbVV1YVcxaFoyVXVkMmxrZEdnZ1BTQlVMbmRwWkhSb0xDQlVMbVJsY0hSb1ZHVjRkSFZ5WlM1cGJXRm5aUzVvWldsbmFIUWdQU0JVTG1obGFXZG9kQ3dnVkM1a1pYQjBhRlJsZUhSMWNtVXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Da3NJRThvVkM1a1pYQjBhRlJsZUhSMWNtVXNJREFwT3dvZ0lDQWdJQ0FnSUd4bGRDQWtJRDBnYmk1blpYUW9WQzVrWlhCMGFGUmxlSFIxY21VcExsOWZkMlZpWjJ4VVpYaDBkWEpsTENCeVpTQTlJSFZsS0ZRcE93b2dJQ0FnSUNBZ0lHbG1JQ2hVTG1SbGNIUm9WR1Y0ZEhWeVpTNW1iM0p0WVhRZ1BUMDlJRlp1S1NCVUxuVnpaVkpsYm1SbGNsUnZWR1Y0ZEhWeVpTQS9JR1l1Wm5KaGJXVmlkV1ptWlhKVVpYaDBkWEpsTWtSTmRXeDBhWE5oYlhCc1pVVllWQ2d6TmpFMk1Dd2dNell3T1RZc0lETTFOVE1zSUNRc0lEQXNJSEpsS1NBNklITXVabkpoYldWaWRXWm1aWEpVWlhoMGRYSmxNa1FvTXpZeE5qQXNJRE0yTURrMkxDQXpOVFV6TENBa0xDQXdLVHNLSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hVTG1SbGNIUm9WR1Y0ZEhWeVpTNW1iM0p0WVhRZ1BUMDlJRXhwS1NCVUxuVnpaVkpsYm1SbGNsUnZWR1Y0ZEhWeVpTQS9JR1l1Wm5KaGJXVmlkV1ptWlhKVVpYaDBkWEpsTWtSTmRXeDBhWE5oYlhCc1pVVllWQ2d6TmpFMk1Dd2dNek16TURZc0lETTFOVE1zSUNRc0lEQXNJSEpsS1NBNklITXVabkpoYldWaWRXWm1aWEpVWlhoMGRYSmxNa1FvTXpZeE5qQXNJRE16TXpBMkxDQXpOVFV6TENBa0xDQXdLVHNLSUNBZ0lDQWdJQ0JsYkhObElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaVZXNXJibTkzYmlCa1pYQjBhRlJsZUhSMWNtVWdabTl5YldGMElpazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUI0WlNoREtTQjdDaUFnSUNBZ0lDQWdiR1YwSUZRZ1BTQnVMbWRsZENoREtTd2dTaUE5SUVNdWFYTlhaV0pIVEVOMVltVlNaVzVrWlhKVVlYSm5aWFFnUFQwOUlDRXdPd29nSUNBZ0lDQWdJR2xtSUNoRExtUmxjSFJvVkdWNGRIVnlaU0FtSmlBaFZDNWZYMkYxZEc5QmJHeHZZMkYwWlVSbGNIUm9RblZtWm1WeUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEtLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9JblJoY21kbGRDNWtaWEIwYUZSbGVIUjFjbVVnYm05MElITjFjSEJ2Y25SbFpDQnBiaUJEZFdKbElISmxibVJsY2lCMFlYSm5aWFJ6SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR2RsS0ZRdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeUxDQkRLVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0VvcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnVkM1ZlgzZGxZbWRzUkdWd2RHaGlkV1ptWlhJZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENBa0lEMGdNRHNnSkNBOElEWTdJQ1FyS3lsMExtSnBibVJHY21GdFpXSjFabVpsY2lnek5qRTJNQ3dnVkM1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhKYkpGMHBMQ0JVTGw5ZmQyVmlaMnhFWlhCMGFHSjFabVpsY2xza1hTQTlJSE11WTNKbFlYUmxVbVZ1WkdWeVluVm1abVZ5S0Nrc0lIbGxLRlF1WDE5M1pXSm5iRVJsY0hSb1luVm1abVZ5V3lSZExDQkRMQ0FoTVNrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhRdVltbHVaRVp5WVcxbFluVm1abVZ5S0RNMk1UWXdMQ0JVTGw5ZmQyVmlaMnhHY21GdFpXSjFabVpsY2lrc0lGUXVYMTkzWldKbmJFUmxjSFJvWW5WbVptVnlJRDBnY3k1amNtVmhkR1ZTWlc1a1pYSmlkV1ptWlhJb0tTd2dlV1VvVkM1ZlgzZGxZbWRzUkdWd2RHaGlkV1ptWlhJc0lFTXNJQ0V4S1RzS0lDQWdJQ0FnSUNCMExtSnBibVJHY21GdFpXSjFabVpsY2lnek5qRTJNQ3dnYm5Wc2JDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJQWlNoRExDQlVMQ0JLS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJQ1FnUFNCdUxtZGxkQ2hES1RzS0lDQWdJQ0FnSUNCVUlDRTlQU0IyYjJsa0lEQWdKaVlnUTJVb0pDNWZYM2RsWW1kc1JuSmhiV1ZpZFdabVpYSXNJRU1zSUVNdWRHVjRkSFZ5WlN3Z016WXdOalFzSURNMU5UTXBMQ0JLSUNFOVBTQjJiMmxrSURBZ0ppWWdlR1VvUXlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQkhLRU1wSUhzS0lDQWdJQ0FnSUNCc1pYUWdWQ0E5SUVNdWRHVjRkSFZ5WlN3Z1NpQTlJRzR1WjJWMEtFTXBMQ0FrSUQwZ2JpNW5aWFFvVkNrN0NpQWdJQ0FnSUNBZ1F5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dVQ2tzSUVNdWFYTlhaV0pIVEUxMWJIUnBjR3hsVW1WdVpHVnlWR0Z5WjJWMGN5QWhQVDBnSVRBZ0ppWWdLQ1F1WDE5M1pXSm5iRlJsZUhSMWNtVWdQVDA5SUhadmFXUWdNQ0FtSmlBb0pDNWZYM2RsWW1kc1ZHVjRkSFZ5WlNBOUlITXVZM0psWVhSbFZHVjRkSFZ5WlNncEtTd2dKQzVmWDNabGNuTnBiMjRnUFNCVUxuWmxjbk5wYjI0c0lHOHViV1Z0YjNKNUxuUmxlSFIxY21Wekt5c3BPd29nSUNBZ0lDQWdJR3hsZENCeVpTQTlJRU11YVhOWFpXSkhURU4xWW1WU1pXNWtaWEpVWVhKblpYUWdQVDA5SUNFd0xDQmFJRDBnUXk1cGMxZGxZa2RNVFhWc2RHbHdiR1ZTWlc1a1pYSlVZWEpuWlhSeklEMDlQU0FoTUN3Z1RXVWdQU0JVTG1selJHRjBZVlJsZUhSMWNtVXpSQ0I4ZkNCVUxtbHpSR0YwWVZSbGVIUjFjbVV5UkVGeWNtRjVMQ0IyWlNBOUlGOG9ReWtnZkh3Z1lUc0tJQ0FnSUNBZ0lDQnBaaUFvWVNBbUppQlVMbVp2Y20xaGRDQTlQVDBnUjI0Z0ppWWdLRlF1ZEhsd1pTQTlQVDBnYm00Z2ZId2dWQzUwZVhCbElEMDlQU0JyYmlrZ0ppWWdLRlF1Wm05eWJXRjBJRDBnWTNRc0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ1VtVnVaR1Z5YVc1bklIUnZJSFJsZUhSMWNtVnpJSGRwZEdnZ1VrZENJR1p2Y20xaGRDQnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0xpQlZjMmx1WnlCU1IwSkJJR1p2Y20xaGRDQnBibk4wWldGa0xpSXBLU3dnY21VcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnU2k1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMFpTQTlJREE3SUhSbElEd2dOanNnZEdVckt5bEtMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjbHQwWlYwZ1BTQnpMbU55WldGMFpVWnlZVzFsWW5WbVptVnlLQ2s3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoS0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNpQTlJSE11WTNKbFlYUmxSbkpoYldWaWRXWm1aWElvS1N3Z1dpa2dhV1lnS0drdVpISmhkMEoxWm1abGNuTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFJsSUQwZ1F5NTBaWGgwZFhKbE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRklnUFNBd0xDQmxaU0E5SUhSbExteGxibWQwYURzZ1VpQThJR1ZsT3lCU0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZFZ1BTQnVMbWRsZENoMFpWdFNYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JSTGw5ZmQyVmlaMnhVWlhoMGRYSmxJRDA5UFNCMmIybGtJREFnSmlZZ0tGRXVYMTkzWldKbmJGUmxlSFIxY21VZ1BTQnpMbU55WldGMFpWUmxlSFIxY21Vb0tTd2dieTV0WlcxdmNua3VkR1Y0ZEhWeVpYTXJLeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCWFpXSkhURTExYkhScGNHeGxVbVZ1WkdWeVZHRnlaMlYwY3lCallXNGdiMjVzZVNCaVpTQjFjMlZrSUhkcGRHZ2dWMlZpUjB3eUlHOXlJRmRGUWtkTVgyUnlZWGRmWW5WbVptVnljeUJsZUhSbGJuTnBiMjR1SWlrN0NpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1F5NTFjMlZTWlc1a1pYSmlkV1ptWlhJcElHbG1JQ2hoS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJRW91WDE5M1pXSm5iRTExYkhScGMyRnRjR3hsWkVaeVlXMWxZblZtWm1WeUlEMGdjeTVqY21WaGRHVkdjbUZ0WldKMVptWmxjaWdwTENCS0xsOWZkMlZpWjJ4RGIyeHZjbEpsYm1SbGNtSjFabVpsY2lBOUlITXVZM0psWVhSbFVtVnVaR1Z5WW5WbVptVnlLQ2tzSUhNdVltbHVaRkpsYm1SbGNtSjFabVpsY2lnek5qRTJNU3dnU2k1ZlgzZGxZbWRzUTI5c2IzSlNaVzVrWlhKaWRXWm1aWElwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEdVZ1BTQnlMbU52Ym5abGNuUW9WQzVtYjNKdFlYUXBMQ0JTSUQwZ2NpNWpiMjUyWlhKMEtGUXVkSGx3WlNrc0lHVmxJRDBnVENoVUxtbHVkR1Z5Ym1Gc1JtOXliV0YwTENCMFpTd2dVaXdnVkM1bGJtTnZaR2x1Wnlrc0lGRWdQU0IxWlNoREtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY3k1eVpXNWtaWEppZFdabVpYSlRkRzl5WVdkbFRYVnNkR2x6WVcxd2JHVW9Nell4TmpFc0lGRXNJR1ZsTENCRExuZHBaSFJvTENCRExtaGxhV2RvZENrc0lIUXVZbWx1WkVaeVlXMWxZblZtWm1WeUtETTJNVFl3TENCS0xsOWZkMlZpWjJ4TmRXeDBhWE5oYlhCc1pXUkdjbUZ0WldKMVptWmxjaWtzSUhNdVpuSmhiV1ZpZFdabVpYSlNaVzVrWlhKaWRXWm1aWElvTXpZeE5qQXNJRE0yTURZMExDQXpOakUyTVN3Z1NpNWZYM2RsWW1kc1EyOXNiM0pTWlc1a1pYSmlkV1ptWlhJcExDQnpMbUpwYm1SU1pXNWtaWEppZFdabVpYSW9Nell4TmpFc0lHNTFiR3dwTENCRExtUmxjSFJvUW5WbVptVnlJQ1ltSUNoS0xsOWZkMlZpWjJ4RVpYQjBhRkpsYm1SbGNtSjFabVpsY2lBOUlITXVZM0psWVhSbFVtVnVaR1Z5WW5WbVptVnlLQ2tzSUhsbEtFb3VYMTkzWldKbmJFUmxjSFJvVW1WdVpHVnlZblZtWm1WeUxDQkRMQ0FoTUNrcExDQjBMbUpwYm1SR2NtRnRaV0oxWm1abGNpZ3pOakUyTUN3Z2JuVnNiQ2s3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dWMlZpUjB4TmRXeDBhWE5oYlhCc1pWSmxibVJsY2xSaGNtZGxkQ0JqWVc0Z2IyNXNlU0JpWlNCMWMyVmtJSGRwZEdnZ1YyVmlSMHd5TGlJcE93b2dJQ0FnSUNBZ0lHbG1JQ2h5WlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwTG1KcGJtUlVaWGgwZFhKbEtETTBNRFkzTENBa0xsOWZkMlZpWjJ4VVpYaDBkWEpsS1N3Z2JHVW9NelF3Tmpjc0lGUXNJSFpsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjBaU0E5SURBN0lIUmxJRHdnTmpzZ2RHVXJLeWxEWlNoS0xsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNsdDBaVjBzSUVNc0lGUXNJRE0yTURZMExDQXpOREEyT1NBcklIUmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lpaFVMQ0IyWlNrZ0ppWWdRU2d6TkRBMk55a3NJSFF1ZFc1aWFXNWtWR1Y0ZEhWeVpTZ3BPd29nSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvV2lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHVWdQU0JETG5SbGVIUjFjbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1VpQTlJREFzSUdWbElEMGdkR1V1YkdWdVozUm9PeUJTSUR3Z1pXVTdJRklyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVU0E5SUhSbFcxSmRMQ0JGWlNBOUlHNHVaMlYwS0ZFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDNWlhVzVrVkdWNGRIVnlaU2d6TlRVekxDQkZaUzVmWDNkbFltZHNWR1Y0ZEhWeVpTa3NJR3hsS0RNMU5UTXNJRkVzSUhabEtTd2dRMlVvU2k1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJc0lFTXNJRkVzSURNMk1EWTBJQ3NnVWl3Z016VTFNeWtzSUdJb1VTd2dkbVVwSUNZbUlFRW9NelUxTXlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2RDNTFibUpwYm1SVVpYaDBkWEpsS0NrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSbElEMGdNelUxTXpzS0lDQWdJQ0FnSUNBZ0lDQWdUV1VnSmlZZ0tHRWdQeUIwWlNBOUlGUXVhWE5FWVhSaFZHVjRkSFZ5WlRORUlEOGdNekk0TnprZ09pQXpOVGcyTmlBNklHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVSR0YwWVZSbGVIUjFjbVV6UkNCaGJtUWdWRWhTUlVVdVJHRjBZVlJsZUhSMWNtVXlSRUZ5Y21GNUlHOXViSGtnYzNWd2NHOXlkR1ZrSUhkcGRHZ2dWMlZpUjB3eUxpSXBLU3dnZEM1aWFXNWtWR1Y0ZEhWeVpTaDBaU3dnSkM1ZlgzZGxZbWRzVkdWNGRIVnlaU2tzSUd4bEtIUmxMQ0JVTENCMlpTa3NJRU5sS0VvdVgxOTNaV0puYkVaeVlXMWxZblZtWm1WeUxDQkRMQ0JVTENBek5qQTJOQ3dnZEdVcExDQmlLRlFzSUhabEtTQW1KaUJCS0hSbEtTd2dkQzUxYm1KcGJtUlVaWGgwZFhKbEtDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJRU11WkdWd2RHaENkV1ptWlhJZ0ppWWdlR1VvUXlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnFLRU1wSUhzS0lDQWdJQ0FnSUNCc1pYUWdWQ0E5SUY4b1F5a2dmSHdnWVN3Z1NpQTlJRU11YVhOWFpXSkhURTExYkhScGNHeGxVbVZ1WkdWeVZHRnlaMlYwY3lBOVBUMGdJVEFnUHlCRExuUmxlSFIxY21VZ09pQmJDaUFnSUNBZ0lDQWdJQ0FnSUVNdWRHVjRkSFZ5WlFvZ0lDQWdJQ0FnSUYwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENBa0lEMGdNQ3dnY21VZ1BTQktMbXhsYm1kMGFEc2dKQ0E4SUhKbE95QWtLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnV2lBOUlFcGJKRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hpS0Zvc0lGUXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RXVWdQU0JETG1selYyVmlSMHhEZFdKbFVtVnVaR1Z5VkdGeVoyVjBJRDhnTXpRd05qY2dPaUF6TlRVekxDQjJaU0E5SUc0dVoyVjBLRm9wTGw5ZmQyVmlaMnhVWlhoMGRYSmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQzVpYVc1a1ZHVjRkSFZ5WlNoTlpTd2dkbVVwTENCQktFMWxLU3dnZEM1MWJtSnBibVJVWlhoMGRYSmxLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJMS0VNcElIc0tJQ0FnSUNBZ0lDQnBaaUFvUXk1MWMyVlNaVzVrWlhKaWRXWm1aWElwSUdsbUlDaGhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JVSUQwZ1F5NTNhV1IwYUN3Z1NpQTlJRU11YUdWcFoyaDBMQ0FrSUQwZ01UWXpPRFFzSUhKbElEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNell3TmpRS0lDQWdJQ0FnSUNBZ0lDQWdYU3dnV2lBOUlFTXVjM1JsYm1OcGJFSjFabVpsY2lBL0lETXpNekEySURvZ016WXdPVFk3Q2lBZ0lDQWdJQ0FnSUNBZ0lFTXVaR1Z3ZEdoQ2RXWm1aWElnSmlZZ2NtVXVjSFZ6YUNoYUtTd2dReTVwWjI1dmNtVkVaWEIwYUVadmNrMTFiSFJwYzJGdGNHeGxRMjl3ZVNCOGZDQW9ReTVrWlhCMGFFSjFabVpsY2lBbUppQW9KQ0I4UFNBeU5UWXBMQ0JETG5OMFpXNWphV3hDZFdabVpYSWdKaVlnS0NRZ2ZEMGdNVEF5TkNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1RXVWdQU0J1TG1kbGRDaERLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb016WXdNRGdzSUUxbExsOWZkMlZpWjJ4TmRXeDBhWE5oYlhCc1pXUkdjbUZ0WldKMVptWmxjaWtzSUhRdVltbHVaRVp5WVcxbFluVm1abVZ5S0RNMk1EQTVMQ0JOWlM1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJcExDQkRMbWxuYm05eVpVUmxjSFJvUm05eVRYVnNkR2x6WVcxd2JHVkRiM0I1SUNZbUlDaHpMbWx1ZG1Gc2FXUmhkR1ZHY21GdFpXSjFabVpsY2lnek5qQXdPQ3dnV3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnV2dvZ0lDQWdJQ0FnSUNBZ0lDQmRLU3dnY3k1cGJuWmhiR2xrWVhSbFJuSmhiV1ZpZFdabVpYSW9Nell3TURrc0lGc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGb0tJQ0FnSUNBZ0lDQWdJQ0FnWFNrcExDQnpMbUpzYVhSR2NtRnRaV0oxWm1abGNpZ3dMQ0F3TENCVUxDQktMQ0F3TENBd0xDQlVMQ0JLTENBa0xDQTVOekk0S1N3Z2N5NXBiblpoYkdsa1lYUmxSbkpoYldWaWRXWm1aWElvTXpZd01EZ3NJSEpsS1N3Z2RDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb016WXdNRGdzSUc1MWJHd3BMQ0IwTG1KcGJtUkdjbUZ0WldKMVptWmxjaWd6TmpBd09Td2dUV1V1WDE5M1pXSm5iRTExYkhScGMyRnRjR3hsWkVaeVlXMWxZblZtWm1WeUtUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCWFpXSkhURTExYkhScGMyRnRjR3hsVW1WdVpHVnlWR0Z5WjJWMElHTmhiaUJ2Ym14NUlHSmxJSFZ6WldRZ2QybDBhQ0JYWldKSFRESXVJaWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCMVpTaERLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR0VnSmlZZ0tFTXVkWE5sVW1WdVpHVnlZblZtWm1WeUlIeDhJRU11ZFhObFVtVnVaR1Z5Vkc5VVpYaDBkWEpsS1NBL0lFMWhkR2d1YldsdUtIVXNJRU11YzJGdGNHeGxjeWtnT2lBd093b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdjMlVvUXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JVSUQwZ2J5NXlaVzVrWlhJdVpuSmhiV1U3Q2lBZ0lDQWdJQ0FnYlM1blpYUW9ReWtnSVQwOUlGUWdKaVlnS0cwdWMyVjBLRU1zSUZRcExDQkRMblZ3WkdGMFpTZ3BLVHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQlRaU0E5SUNFeExDQlVaU0E5SUNFeE93b2dJQ0FnWm5WdVkzUnBiMjRnVUdVb1F5d2dWQ2tnZXdvZ0lDQWdJQ0FnSUVNZ0ppWWdReTVwYzFkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwSUNZbUlDaFRaU0E5UFQwZ0lURWdKaVlnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhVWlhoMGRYSmxjeTV6WVdabFUyVjBWR1Y0ZEhWeVpUSkVPaUJrYjI0bmRDQjFjMlVnY21WdVpHVnlJSFJoY21kbGRITWdZWE1nZEdWNGRIVnlaWE11SUZWelpTQjBhR1ZwY2lBdWRHVjRkSFZ5WlNCd2NtOXdaWEowZVNCcGJuTjBaV0ZrTGlJcExDQlRaU0E5SUNFd0tTd2dReUE5SUVNdWRHVjRkSFZ5WlNrc0lFOG9ReXdnVkNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQlpaU2hETENCVUtTQjdDaUFnSUNBZ0lDQWdReUFtSmlCRExtbHpWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwSUNZbUlDaFVaU0E5UFQwZ0lURWdKaVlnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhVWlhoMGRYSmxjeTV6WVdabFUyVjBWR1Y0ZEhWeVpVTjFZbVU2SUdSdmJpZDBJSFZ6WlNCamRXSmxJSEpsYm1SbGNpQjBZWEpuWlhSeklHRnpJSFJsZUhSMWNtVnpMaUJWYzJVZ2RHaGxhWElnTG5SbGVIUjFjbVVnY0hKdmNHVnlkSGtnYVc1emRHVmhaQzRpS1N3Z1ZHVWdQU0FoTUNrc0lFTWdQU0JETG5SbGVIUjFjbVVwTENCV0tFTXNJRlFwT3dvZ0lDQWdmUW9nSUNBZ2RHaHBjeTVoYkd4dlkyRjBaVlJsZUhSMWNtVlZibWwwSUQwZ1Jpd2dkR2hwY3k1eVpYTmxkRlJsZUhSMWNtVlZibWwwY3lBOUlGVXNJSFJvYVhNdWMyVjBWR1Y0ZEhWeVpUSkVJRDBnVHl3Z2RHaHBjeTV6WlhSVVpYaDBkWEpsTWtSQmNuSmhlU0E5SUc1bExDQjBhR2x6TG5ObGRGUmxlSFIxY21VelJDQTlJR05sTENCMGFHbHpMbk5sZEZSbGVIUjFjbVZEZFdKbElEMGdWaXdnZEdocGN5NXlaV0pwYm1SVVpYaDBkWEpsY3lBOUlFOWxMQ0IwYUdsekxuTmxkSFZ3VW1WdVpHVnlWR0Z5WjJWMElEMGdSeXdnZEdocGN5NTFjR1JoZEdWU1pXNWtaWEpVWVhKblpYUk5hWEJ0WVhBZ1BTQnFMQ0IwYUdsekxuVndaR0YwWlUxMWJIUnBjMkZ0Y0d4bFVtVnVaR1Z5VkdGeVoyVjBJRDBnU3l3Z2RHaHBjeTV6WlhSMWNFUmxjSFJvVW1WdVpHVnlZblZtWm1WeUlEMGdlR1VzSUhSb2FYTXVjMlYwZFhCR2NtRnRaVUoxWm1abGNsUmxlSFIxY21VZ1BTQkRaU3dnZEdocGN5NXpZV1psVTJWMFZHVjRkSFZ5WlRKRUlEMGdVR1VzSUhSb2FYTXVjMkZtWlZObGRGUmxlSFIxY21WRGRXSmxJRDBnV1dVN0NuMEtablZ1WTNScGIyNGdSWGdvY3l3Z1pTd2dkQ2tnZXdvZ0lDQWdiR1YwSUc0Z1BTQjBMbWx6VjJWaVIwd3lPd29nSUNBZ1puVnVZM1JwYjI0Z2FTaHlLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHODdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJSEp1S1NCeVpYUjFjbTRnTlRFeU1Uc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdWblVwSUhKbGRIVnliaUF6TWpneE9Uc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdWM1VwSUhKbGRIVnliaUF6TWpneU1Ec0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdjWFVwSUhKbGRIVnliaUF6TXpZek5Uc0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdTSFVwSUhKbGRIVnliaUExTVRJd093b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQnJkU2tnY21WMGRYSnVJRFV4TWpJN0NpQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlHTnlLU0J5WlhSMWNtNGdOVEV5TXpzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1IzVXBJSEpsZEhWeWJpQTFNVEkwT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCUWN5a2djbVYwZFhKdUlEVXhNalU3Q2lBZ0lDQWdJQ0FnYVdZZ0tISWdQVDA5SUc1dUtTQnlaWFIxY200Z05URXlOanNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnYTI0cElISmxkSFZ5YmlCdUlEOGdOVEV6TVNBNklDaHZJRDBnWlM1blpYUW9JazlGVTE5MFpYaDBkWEpsWDJoaGJHWmZabXh2WVhRaUtTd2dieUFoUFQwZ2JuVnNiQ0EvSUc4dVNFRk1SbDlHVEU5QlZGOVBSVk1nT2lCdWRXeHNLVHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnV0hVcElISmxkSFZ5YmlBMk5EQTJPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0JIYmlrZ2NtVjBkWEp1SURZME1EYzdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJR04wS1NCeVpYUjFjbTRnTmpRd09Ec0tJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdTblVwSUhKbGRIVnliaUEyTkRBNU93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQlpkU2tnY21WMGRYSnVJRFkwTVRBN0NpQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlGWnVLU0J5WlhSMWNtNGdOalF3TWpzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1RHa3BJSEpsZEhWeWJpQXpOREEwTVRzS0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1duVXBJSEpsZEhWeWJpQTJOREF6T3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNBa2RTa2djbVYwZFhKdUlETTJNalEwT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCcWRTa2djbVYwZFhKdUlETXpNekU1T3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCUmRTa2djbVYwZFhKdUlETXpNekl3T3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCTGRTa2djbVYwZFhKdUlETTJNalE0T3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCbFpDa2djbVYwZFhKdUlETTJNalE1T3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCaGJDQjhmQ0J5SUQwOVBTQnNiQ0I4ZkNCeUlEMDlQU0JqYkNCOGZDQnlJRDA5UFNCb2JDa2dhV1lnS0c4Z1BTQmxMbWRsZENnaVYwVkNSMHhmWTI5dGNISmxjM05sWkY5MFpYaDBkWEpsWDNNemRHTWlLU3dnYnlBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnWVd3cElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVa2RDWDFNelZFTmZSRmhVTVY5RldGUTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCc2JDa2djbVYwZFhKdUlHOHVRMDlOVUZKRlUxTkZSRjlTUjBKQlgxTXpWRU5mUkZoVU1WOUZXRlE3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQmpiQ2tnY21WMGRYSnVJRzh1UTA5TlVGSkZVMU5GUkY5U1IwSkJYMU16VkVOZlJGaFVNMTlGV0ZRN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0JvYkNrZ2NtVjBkWEp1SUc4dVEwOU5VRkpGVTFORlJGOVNSMEpCWDFNelZFTmZSRmhVTlY5RldGUTdDaUFnSUNBZ0lDQWdmU0JsYkhObElISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0IxYkNCOGZDQnlJRDA5UFNCa2JDQjhmQ0J5SUQwOVBTQm1iQ0I4ZkNCeUlEMDlQU0J3YkNrZ2FXWWdLRzhnUFNCbExtZGxkQ2dpVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYM0IyY25Saklpa3NJRzhnSVQwOUlHNTFiR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJSFZzS1NCeVpYUjFjbTRnYnk1RFQwMVFVa1ZUVTBWRVgxSkhRbDlRVmxKVVExODBRbEJRVmpGZlNVMUhPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUE5UFQwZ1pHd3BJSEpsZEhWeWJpQnZMa05QVFZCU1JWTlRSVVJmVWtkQ1gxQldVbFJEWHpKQ1VGQldNVjlKVFVjN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0JtYkNrZ2NtVjBkWEp1SUc4dVEwOU5VRkpGVTFORlJGOVNSMEpCWDFCV1VsUkRYelJDVUZCV01WOUpUVWM3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQndiQ2tnY21WMGRYSnVJRzh1UTA5TlVGSkZVMU5GUkY5U1IwSkJYMUJXVWxSRFh6SkNVRkJXTVY5SlRVYzdDaUFnSUNBZ0lDQWdmU0JsYkhObElISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0IwWkNrZ2NtVjBkWEp1SUc4Z1BTQmxMbWRsZENnaVYwVkNSMHhmWTI5dGNISmxjM05sWkY5MFpYaDBkWEpsWDJWMFl6RWlLU3dnYnlBaFBUMGdiblZzYkNBL0lHOHVRMDlOVUZKRlUxTkZSRjlTUjBKZlJWUkRNVjlYUlVKSFRDQTZJRzUxYkd3N0NpQWdJQ0FnSUNBZ2FXWWdLQ2h5SUQwOVBTQnRiQ0I4ZkNCeUlEMDlQU0JuYkNrZ0ppWWdLRzhnUFNCbExtZGxkQ2dpVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYMlYwWXlJcExDQnZJQ0U5UFNCdWRXeHNLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBOVBUMGdiV3dwSUhKbGRIVnliaUJ2TGtOUFRWQlNSVk5UUlVSZlVrZENPRjlGVkVNeU93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NpQTlQVDBnWjJ3cElISmxkSFZ5YmlCdkxrTlBUVkJTUlZOVFJVUmZVa2RDUVRoZlJWUkRNbDlGUVVNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQnVaQ0I4ZkNCeUlEMDlQU0JwWkNCOGZDQnlJRDA5UFNCeVpDQjhmQ0J5SUQwOVBTQnpaQ0I4ZkNCeUlEMDlQU0J2WkNCOGZDQnlJRDA5UFNCaFpDQjhmQ0J5SUQwOVBTQnNaQ0I4ZkNCeUlEMDlQU0JqWkNCOGZDQnlJRDA5UFNCb1pDQjhmQ0J5SUQwOVBTQjFaQ0I4ZkNCeUlEMDlQU0JrWkNCOGZDQnlJRDA5UFNCbVpDQjhmQ0J5SUQwOVBTQndaQ0I4ZkNCeUlEMDlQU0J0WkNCOGZDQnlJRDA5UFNCNFpDQjhmQ0J5SUQwOVBTQjVaQ0I4ZkNCeUlEMDlQU0IyWkNCOGZDQnlJRDA5UFNCZlpDQjhmQ0J5SUQwOVBTQk5aQ0I4ZkNCeUlEMDlQU0JpWkNCOGZDQnlJRDA5UFNCM1pDQjhmQ0J5SUQwOVBTQlRaQ0I4ZkNCeUlEMDlQU0JVWkNCOGZDQnlJRDA5UFNCRlpDQjhmQ0J5SUQwOVBTQkJaQ0I4ZkNCeUlEMDlQU0JEWkNCOGZDQnlJRDA5UFNCTVpDQjhmQ0J5SUQwOVBTQlNaQ2tnY21WMGRYSnVJRzhnUFNCbExtZGxkQ2dpVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYMkZ6ZEdNaUtTd2dieUFoUFQwZ2JuVnNiQ0EvSUhJZ09pQnVkV3hzT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCblpDa2djbVYwZFhKdUlHOGdQU0JsTG1kbGRDZ2lSVmhVWDNSbGVIUjFjbVZmWTI5dGNISmxjM05wYjI1ZlluQjBZeUlwTENCdklDRTlQU0J1ZFd4c0lEOGdjaUE2SUc1MWJHdzdDaUFnSUNBZ0lDQWdhV1lnS0hJZ1BUMDlJRlJwS1NCeVpYUjFjbTRnYmlBL0lETTBNRFF5SURvZ0tHOGdQU0JsTG1kbGRDZ2lWMFZDUjB4ZlpHVndkR2hmZEdWNGRIVnlaU0lwTENCdklDRTlQU0J1ZFd4c0lEOGdieTVWVGxOSlIwNUZSRjlKVGxSZk1qUmZPRjlYUlVKSFRDQTZJRzUxYkd3cE93b2dJQ0FnZlFvZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQmpiMjUyWlhKME9pQnBDaUFnSUNCOU93cDlDblpoY2lCbllTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ2RYUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUZ0ZEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11WTJGdFpYSmhjeUE5SUdVN0NpQWdJQ0I5Q24wN0NtZGhMbkJ5YjNSdmRIbHdaUzVwYzBGeWNtRjVRMkZ0WlhKaElEMGdJVEE3Q25aaGNpQkliaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdUbVVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDSkhjbTkxY0NJN0NpQWdJQ0I5Q24wN0NraHVMbkJ5YjNSdmRIbHdaUzVwYzBkeWIzVndJRDBnSVRBN0NuWmhjaUJCZUNBOUlIc0tJQ0FnSUhSNWNHVTZJQ0p0YjNabElncDlMQ0JKY3lBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdGeVoyVjBVbUY1SUQwZ2JuVnNiQ3dnZEdocGN5NWZaM0pwY0NBOUlHNTFiR3dzSUhSb2FYTXVYMmhoYm1RZ1BTQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ1oyVjBTR0Z1WkZOd1lXTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW9ZVzVrSUQwOVBTQnVkV3hzSUNZbUlDaDBhR2x6TGw5b1lXNWtJRDBnYm1WM0lFaHVMQ0IwYUdsekxsOW9ZVzVrTG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1ZmFHRnVaQzUyYVhOcFlteGxJRDBnSVRFc0lIUm9hWE11WDJoaGJtUXVhbTlwYm5SeklEMGdlMzBzSUhSb2FYTXVYMmhoYm1RdWFXNXdkWFJUZEdGMFpTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NHbHVZMmhwYm1jNklDRXhDaUFnSUNBZ0lDQWdmU2tzSUhSb2FYTXVYMmhoYm1RN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJVWVhKblpYUlNZWGxUY0dGalpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRHRnlaMlYwVW1GNUlEMDlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxsOTBZWEpuWlhSU1lYa2dQU0J1WlhjZ1NHNHNJSFJvYVhNdVgzUmhjbWRsZEZKaGVTNXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElEMGdJVEVzSUhSb2FYTXVYM1JoY21kbGRGSmhlUzUyYVhOcFlteGxJRDBnSVRFc0lIUm9hWE11WDNSaGNtZGxkRkpoZVM1b1lYTk1hVzVsWVhKV1pXeHZZMmwwZVNBOUlDRXhMQ0IwYUdsekxsOTBZWEpuWlhSU1lYa3ViR2x1WldGeVZtVnNiMk5wZEhrZ1BTQnVaWGNnVFN3Z2RHaHBjeTVmZEdGeVoyVjBVbUY1TG1oaGMwRnVaM1ZzWVhKV1pXeHZZMmwwZVNBOUlDRXhMQ0IwYUdsekxsOTBZWEpuWlhSU1lYa3VZVzVuZFd4aGNsWmxiRzlqYVhSNUlEMGdibVYzSUUwcExDQjBhR2x6TGw5MFlYSm5aWFJTWVhrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJIY21sd1UzQmhZMlVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmR5YVhBZ1BUMDlJRzUxYkd3Z0ppWWdLSFJvYVhNdVgyZHlhWEFnUFNCdVpYY2dTRzRzSUhSb2FYTXVYMmR5YVhBdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNBOUlDRXhMQ0IwYUdsekxsOW5jbWx3TG5acGMybGliR1VnUFNBaE1Td2dkR2hwY3k1ZlozSnBjQzVvWVhOTWFXNWxZWEpXWld4dlkybDBlU0E5SUNFeExDQjBhR2x6TGw5bmNtbHdMbXhwYm1WaGNsWmxiRzlqYVhSNUlEMGdibVYzSUUwc0lIUm9hWE11WDJkeWFYQXVhR0Z6UVc1bmRXeGhjbFpsYkc5amFYUjVJRDBnSVRFc0lIUm9hWE11WDJkeWFYQXVZVzVuZFd4aGNsWmxiRzlqYVhSNUlEMGdibVYzSUUwcExDQjBhR2x6TGw5bmNtbHdPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHRjBZMmhGZG1WdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzUmhjbWRsZEZKaGVTQWhQVDBnYm5Wc2JDQW1KaUIwYUdsekxsOTBZWEpuWlhSU1lYa3VaR2x6Y0dGMFkyaEZkbVZ1ZENobEtTd2dkR2hwY3k1ZlozSnBjQ0FoUFQwZ2JuVnNiQ0FtSmlCMGFHbHpMbDluY21sd0xtUnBjM0JoZEdOb1JYWmxiblFvWlNrc0lIUm9hWE11WDJoaGJtUWdJVDA5SUc1MWJHd2dKaVlnZEdocGN5NWZhR0Z1WkM1a2FYTndZWFJqYUVWMlpXNTBLR1VwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWkdselkyOXVibVZqZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdsemNHRjBZMmhGZG1WdWRDaDdDaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0prYVhOamIyNXVaV04wWldRaUxBb2dJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQmxDaUFnSUNBZ0lDQWdmU2tzSUhSb2FYTXVYM1JoY21kbGRGSmhlU0FoUFQwZ2JuVnNiQ0FtSmlBb2RHaHBjeTVmZEdGeVoyVjBVbUY1TG5acGMybGliR1VnUFNBaE1Ta3NJSFJvYVhNdVgyZHlhWEFnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WDJkeWFYQXVkbWx6YVdKc1pTQTlJQ0V4S1N3Z2RHaHBjeTVmYUdGdVpDQWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWZhR0Z1WkM1MmFYTnBZbXhsSUQwZ0lURXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHNTFiR3dzSUhJZ1BTQnVkV3hzTENCdklEMGdiblZzYkN3Z1lTQTlJSFJvYVhNdVgzUmhjbWRsZEZKaGVTd2diQ0E5SUhSb2FYTXVYMmR5YVhBc0lHTWdQU0IwYUdsekxsOW9ZVzVrT3dvZ0lDQWdJQ0FnSUdsbUlDaGxJQ1ltSUhRdWMyVnpjMmx2Ymk1MmFYTnBZbWxzYVhSNVUzUmhkR1VnSVQwOUlDSjJhWE5wWW14bExXSnNkWEp5WldRaUtTQnBaaUFvWVNBaFBUMGdiblZzYkNBbUppQW9hU0E5SUhRdVoyVjBVRzl6WlNobExuUmhjbWRsZEZKaGVWTndZV05sTENCdUtTd2dhU0FoUFQwZ2JuVnNiQ0FtSmlBb1lTNXRZWFJ5YVhndVpuSnZiVUZ5Y21GNUtHa3VkSEpoYm5ObWIzSnRMbTFoZEhKcGVDa3NJR0V1YldGMGNtbDRMbVJsWTI5dGNHOXpaU2hoTG5CdmMybDBhVzl1TENCaExuSnZkR0YwYVc5dUxDQmhMbk5qWVd4bEtTd2dhUzVzYVc1bFlYSldaV3h2WTJsMGVTQS9JQ2hoTG1oaGMweHBibVZoY2xabGJHOWphWFI1SUQwZ0lUQXNJR0V1YkdsdVpXRnlWbVZzYjJOcGRIa3VZMjl3ZVNocExteHBibVZoY2xabGJHOWphWFI1S1NrZ09pQmhMbWhoYzB4cGJtVmhjbFpsYkc5amFYUjVJRDBnSVRFc0lHa3VZVzVuZFd4aGNsWmxiRzlqYVhSNUlEOGdLR0V1YUdGelFXNW5kV3hoY2xabGJHOWphWFI1SUQwZ0lUQXNJR0V1WVc1bmRXeGhjbFpsYkc5amFYUjVMbU52Y0hrb2FTNWhibWQxYkdGeVZtVnNiMk5wZEhrcEtTQTZJR0V1YUdGelFXNW5kV3hoY2xabGJHOWphWFI1SUQwZ0lURXNJSFJvYVhNdVpHbHpjR0YwWTJoRmRtVnVkQ2hCZUNrcEtTd2dZeUFtSmlCbExtaGhibVFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdieUE5SUNFd093b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0I0SUc5bUlHVXVhR0Z1WkM1MllXeDFaWE1vS1NsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkaUE5SUhRdVoyVjBTbTlwYm5SUWIzTmxLSGdzSUc0cE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR011YW05cGJuUnpXM2d1YW05cGJuUk9ZVzFsWFNBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQWdQU0J1WlhjZ1NHNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0M1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUQwZ0lURXNJSEF1ZG1semFXSnNaU0E5SUNFeExDQmpMbXB2YVc1MGMxdDRMbXB2YVc1MFRtRnRaVjBnUFNCd0xDQmpMbUZrWkNod0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ1l5NXFiMmx1ZEhOYmVDNXFiMmx1ZEU1aGJXVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaUFoUFQwZ2JuVnNiQ0FtSmlBb1p5NXRZWFJ5YVhndVpuSnZiVUZ5Y21GNUtIWXVkSEpoYm5ObWIzSnRMbTFoZEhKcGVDa3NJR2N1YldGMGNtbDRMbVJsWTI5dGNHOXpaU2huTG5CdmMybDBhVzl1TENCbkxuSnZkR0YwYVc5dUxDQm5Mbk5qWVd4bEtTd2daeTVxYjJsdWRGSmhaR2wxY3lBOUlIWXVjbUZrYVhWektTd2daeTUyYVhOcFlteGxJRDBnZGlBaFBUMGdiblZzYkRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUdNdWFtOXBiblJ6V3lKcGJtUmxlQzFtYVc1blpYSXRkR2x3SWwwc0lIVWdQU0JqTG1wdmFXNTBjMXNpZEdoMWJXSXRkR2x3SWwwc0lHUWdQU0JvTG5CdmMybDBhVzl1TG1ScGMzUmhibU5sVkc4b2RTNXdiM05wZEdsdmJpa3NJR1lnUFNBdU1ESXNJRzBnUFNBdU1EQTFPd29nSUNBZ0lDQWdJQ0FnSUNCakxtbHVjSFYwVTNSaGRHVXVjR2x1WTJocGJtY2dKaVlnWkNBK0lHWWdLeUJ0SUQ4Z0tHTXVhVzV3ZFhSVGRHRjBaUzV3YVc1amFHbHVaeUE5SUNFeExDQjBhR2x6TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0luQnBibU5vWlc1a0lpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJsWkc1bGMzTTZJR1V1YUdGdVpHVmtibVZ6Y3l3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRG9nZEdocGN3b2dJQ0FnSUNBZ0lDQWdJQ0I5S1NrZ09pQWhZeTVwYm5CMWRGTjBZWFJsTG5CcGJtTm9hVzVuSUNZbUlHUWdQRDBnWmlBdElHMGdKaVlnS0dNdWFXNXdkWFJUZEdGMFpTNXdhVzVqYUdsdVp5QTlJQ0V3TENCMGFHbHpMbVJwYzNCaGRHTm9SWFpsYm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSW5CcGJtTm9jM1JoY25RaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR1ZrYm1WemN6b2daUzVvWVc1a1pXUnVaWE56TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBPaUIwYUdsekNpQWdJQ0FnSUNBZ0lDQWdJSDBwS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYkNBaFBUMGdiblZzYkNBbUppQmxMbWR5YVhCVGNHRmpaU0FtSmlBb2NpQTlJSFF1WjJWMFVHOXpaU2hsTG1keWFYQlRjR0ZqWlN3Z2Jpa3NJSElnSVQwOUlHNTFiR3dnSmlZZ0tHd3ViV0YwY21sNExtWnliMjFCY25KaGVTaHlMblJ5WVc1elptOXliUzV0WVhSeWFYZ3BMQ0JzTG0xaGRISnBlQzVrWldOdmJYQnZjMlVvYkM1d2IzTnBkR2x2Yml3Z2JDNXliM1JoZEdsdmJpd2diQzV6WTJGc1pTa3NJSEl1YkdsdVpXRnlWbVZzYjJOcGRIa2dQeUFvYkM1b1lYTk1hVzVsWVhKV1pXeHZZMmwwZVNBOUlDRXdMQ0JzTG14cGJtVmhjbFpsYkc5amFYUjVMbU52Y0hrb2NpNXNhVzVsWVhKV1pXeHZZMmwwZVNrcElEb2diQzVvWVhOTWFXNWxZWEpXWld4dlkybDBlU0E5SUNFeExDQnlMbUZ1WjNWc1lYSldaV3h2WTJsMGVTQS9JQ2hzTG1oaGMwRnVaM1ZzWVhKV1pXeHZZMmwwZVNBOUlDRXdMQ0JzTG1GdVozVnNZWEpXWld4dlkybDBlUzVqYjNCNUtISXVZVzVuZFd4aGNsWmxiRzlqYVhSNUtTa2dPaUJzTG1oaGMwRnVaM1ZzWVhKV1pXeHZZMmwwZVNBOUlDRXhLU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR0VnSVQwOUlHNTFiR3dnSmlZZ0tHRXVkbWx6YVdKc1pTQTlJR2tnSVQwOUlHNTFiR3dwTENCc0lDRTlQU0J1ZFd4c0lDWW1JQ2hzTG5acGMybGliR1VnUFNCeUlDRTlQU0J1ZFd4c0tTd2dZeUFoUFQwZ2JuVnNiQ0FtSmlBb1l5NTJhWE5wWW14bElEMGdieUFoUFQwZ2JuVnNiQ2tzSUhSb2FYTTdDaUFnSUNCOUNuMHNJR3R6SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJ2ZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0J2TENCaExDQnNMQ0JqTENCb0tYc0tJQ0FnSUNBZ0lDQnBaaUFvYUNBOUlHZ2dJVDA5SUhadmFXUWdNQ0EvSUdnZ09pQldiaXdnYUNBaFBUMGdWbTRnSmlZZ2FDQWhQVDBnVEdrcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaVJHVndkR2hVWlhoMGRYSmxJR1p2Y20xaGRDQnRkWE4wSUdKbElHVnBkR2hsY2lCVVNGSkZSUzVFWlhCMGFFWnZjbTFoZENCdmNpQlVTRkpGUlM1RVpYQjBhRk4wWlc1amFXeEdiM0p0WVhRaUtUc0tJQ0FnSUNBZ0lDQnVJRDA5UFNCMmIybGtJREFnSmlZZ2FDQTlQVDBnVm00Z0ppWWdLRzRnUFNCamNpa3NJRzRnUFQwOUlIWnZhV1FnTUNBbUppQm9JRDA5UFNCTWFTQW1KaUFvYmlBOUlGUnBLVHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHVkV3hzTENCcExDQnlMQ0J2TENCaExDQnNMQ0JvTENCdUxDQmpLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtbHRZV2RsSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCMENpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1dFlXZEdhV3gwWlhJZ1BTQmhJQ0U5UFNCMmIybGtJREFnUHlCaElEb2djblFzSUhSb2FYTXViV2x1Um1sc2RHVnlJRDBnYkNBaFBUMGdkbTlwWkNBd0lEOGdiQ0E2SUhKMExDQjBhR2x6TG1ac2FYQlpJRDBnSVRFc0lIUm9hWE11WjJWdVpYSmhkR1ZOYVhCdFlYQnpJRDBnSVRFN0NpQWdJQ0I5Q24wN0NtdHpMbkJ5YjNSdmRIbHdaUzVwYzBSbGNIUm9WR1Y0ZEhWeVpTQTlJQ0V3T3dwMllYSWdkbWdnUFNCamJHRnpjeUJsZUhSbGJtUnpJRVZ1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TENCcElEMGdiblZzYkN3Z2NpQTlJREVzSUc4Z1BTQnVkV3hzTENCaElEMGdJbXh2WTJGc0xXWnNiMjl5SWl3Z2JDQTlJR1V1WlhoMFpXNXphVzl1Y3k1b1lYTW9JbGRGUWtkTVgyMTFiSFJwYzJGdGNHeGxaRjl5Wlc1a1pYSmZkRzlmZEdWNGRIVnlaU0lwTENCaklEMGdiblZzYkN3Z2FDQTlJRzUxYkd3c0lIVWdQU0J1ZFd4c0xDQmtJRDBnYm5Wc2JDd2daaUE5SUNFeExDQnRJRDBnYm5Wc2JDd2dlQ0E5SUhRdVoyVjBRMjl1ZEdWNGRFRjBkSEpwWW5WMFpYTW9LU3dnZGlBOUlHNTFiR3dzSUdjZ1BTQnVkV3hzTENCd0lEMGdXMTBzSUY4Z1BTQnVaWGNnVFdGd0xDQjVJRDBnYm1WM0lIVjBPd29nSUNBZ0lDQWdJSGt1YkdGNVpYSnpMbVZ1WVdKc1pTZ3hLU3dnZVM1MmFXVjNjRzl5ZENBOUlHNWxkeUJXWlRzS0lDQWdJQ0FnSUNCc1pYUWdZaUE5SUc1bGR5QjFkRHNLSUNBZ0lDQWdJQ0JpTG14aGVXVnljeTVsYm1GaWJHVW9NaWtzSUdJdWRtbGxkM0J2Y25RZ1BTQnVaWGNnVm1VN0NpQWdJQ0FnSUNBZ2JHVjBJRUVnUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJSGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lHSUtJQ0FnSUNBZ0lDQmRMQ0JNSUQwZ2JtVjNJR2RoT3dvZ0lDQWdJQ0FnSUV3dWJHRjVaWEp6TG1WdVlXSnNaU2d4S1N3Z1RDNXNZWGxsY25NdVpXNWhZbXhsS0RJcE93b2dJQ0FnSUNBZ0lHeGxkQ0JKSUQwZ2JuVnNiQ3dnYXlBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpZVzFsY21GQmRYUnZWWEJrWVhSbElEMGdJVEFzSUhSb2FYTXVaVzVoWW14bFpDQTlJQ0V4TENCMGFHbHpMbWx6VUhKbGMyVnVkR2x1WnlBOUlDRXhMQ0IwYUdsekxtZGxkRU52Ym5SeWIyeHNaWElnUFNCbWRXNWpkR2x2YmloV0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQlhJRDBnY0Z0V1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRmNnUFQwOUlIWnZhV1FnTUNBbUppQW9WeUE5SUc1bGR5QkpjeXdnY0Z0V1hTQTlJRmNwTENCWExtZGxkRlJoY21kbGRGSmhlVk53WVdObEtDazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJEYjI1MGNtOXNiR1Z5UjNKcGNDQTlJR1oxYm1OMGFXOXVLRllwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZjZ1BTQndXMVpkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1Z5QTlQVDBnZG05cFpDQXdJQ1ltSUNoWElEMGdibVYzSUVsekxDQndXMVpkSUQwZ1Z5a3NJRmN1WjJWMFIzSnBjRk53WVdObEtDazdDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NW5aWFJJWVc1a0lEMGdablZ1WTNScGIyNG9WaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVnlBOUlIQmJWbDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCWElEMDlQU0IyYjJsa0lEQWdKaVlnS0ZjZ1BTQnVaWGNnU1hNc0lIQmJWbDBnUFNCWEtTd2dWeTVuWlhSSVlXNWtVM0JoWTJVb0tUc0tJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRUlvVmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1Z5QTlJRjh1WjJWMEtGWXVhVzV3ZFhSVGIzVnlZMlVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQlhJQ1ltSUZjdVpHbHpjR0YwWTJoRmRtVnVkQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQldMblI1Y0dVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJXTG1sdWNIVjBVMjkxY21ObENpQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCUUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCZkxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1Zpd2dWeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVmk1a2FYTmpiMjV1WldOMEtGY3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUtTd2dYeTVqYkdWaGNpZ3BMQ0JKSUQwZ2JuVnNiQ3dnYXlBOUlHNTFiR3dzSUdVdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0hZcExDQmtJRDBnYm5Wc2JDd2dkU0E5SUc1MWJHd3NJR2dnUFNCdWRXeHNMQ0JwSUQwZ2JuVnNiQ3dnWnlBOUlHNTFiR3dzSUdObExuTjBiM0FvS1N3Z2JpNXBjMUJ5WlhObGJuUnBibWNnUFNBaE1Td2diaTVrYVhOd1lYUmphRVYyWlc1MEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKelpYTnphVzl1Wlc1a0lnb2dJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSR2NtRnRaV0oxWm1abGNsTmpZV3hsUm1GamRHOXlJRDBnWm5WdVkzUnBiMjRvVmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5SUQwZ1Zpd2diaTVwYzFCeVpYTmxiblJwYm1jZ1BUMDlJQ0V3SUNZbUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpV0ZKTllXNWhaMlZ5T2lCRFlXNXViM1FnWTJoaGJtZGxJR1p5WVcxbFluVm1abVZ5SUhOallXeGxJSGRvYVd4bElIQnlaWE5sYm5ScGJtY3VJaWs3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV6WlhSU1pXWmxjbVZ1WTJWVGNHRmpaVlI1Y0dVZ1BTQm1kVzVqZEdsdmJpaFdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHRWdQU0JXTENCdUxtbHpVSEpsYzJWdWRHbHVaeUE5UFQwZ0lUQWdKaVlnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSllVazFoYm1GblpYSTZJRU5oYm01dmRDQmphR0Z1WjJVZ2NtVm1aWEpsYm1ObElITndZV05sSUhSNWNHVWdkMmhwYkdVZ2NISmxjMlZ1ZEdsdVp5NGlLVHNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbWRsZEZKbFptVnlaVzVqWlZOd1lXTmxJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVaMlYwUW1GelpVeGhlV1Z5SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIxSUNFOVBTQnVkV3hzSUQ4Z2RTQTZJR1E3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSQ2FXNWthVzVuSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJvT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11WjJWMFJuSmhiV1VnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzA3Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVuWlhSVFpYTnphVzl1SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJwT3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11YzJWMFUyVnpjMmx2YmlBOUlHRnplVzVqSUdaMWJtTjBhVzl1S0ZZcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dQU0JXTENCcElDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZGlBOUlHVXVaMlYwVW1WdVpHVnlWR0Z5WjJWMEtDa3NJR2t1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpYzJWc1pXTjBJaXdnUWlrc0lHa3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2ljMlZzWldOMGMzUmhjblFpTENCQ0tTd2dhUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p6Wld4bFkzUmxibVFpTENCQ0tTd2dhUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p6Y1hWbFpYcGxJaXdnUWlrc0lHa3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2ljM0YxWldWNlpYTjBZWEowSWl3Z1Fpa3NJR2t1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpYzNGMVpXVjZaV1Z1WkNJc0lFSXBMQ0JwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSW1WdVpDSXNJRkFwTENCcExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltbHVjSFYwYzI5MWNtTmxjMk5vWVc1blpTSXNJSGNwTENCNExuaHlRMjl0Y0dGMGFXSnNaU0FoUFQwZ0lUQWdKaVlnWVhkaGFYUWdkQzV0WVd0bFdGSkRiMjF3WVhScFlteGxLQ2tzSUdrdWNtVnVaR1Z5VTNSaGRHVXViR0Y1WlhKeklEMDlQU0IyYjJsa0lEQWdmSHdnWlM1allYQmhZbWxzYVhScFpYTXVhWE5YWldKSFRESWdQVDA5SUNFeEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGY2dQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z1ZEdsaGJHbGhjem9nYVM1eVpXNWtaWEpUZEdGMFpTNXNZWGxsY25NZ1BUMDlJSFp2YVdRZ01DQS9JSGd1WVc1MGFXRnNhV0Z6SURvZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnNjR2hoT2lCNExtRnNjR2hoTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhCMGFEb2dlQzVrWlhCMGFDd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmxibU5wYkRvZ2VDNXpkR1Z1WTJsc0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtRnRaV0oxWm1abGNsTmpZV3hsUm1GamRHOXlPaUJ5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrSUQwZ2JtVjNJRmhTVjJWaVIweE1ZWGxsY2locExDQjBMQ0JYS1N3Z2FTNTFjR1JoZEdWU1pXNWtaWEpUZEdGMFpTaDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhjMlZNWVhsbGNqb2daQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcExDQm5JRDBnYm1WM0lFRjBLR1F1Wm5KaGJXVmlkV1ptWlhKWGFXUjBhQ3dnWkM1bWNtRnRaV0oxWm1abGNraGxhV2RvZEN3Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSnRZWFE2SUdOMExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJ5Yml3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1amIyUnBibWM2SUdVdWIzVjBjSFYwUlc1amIyUnBibWNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaUE5SUhndVlXNTBhV0ZzYVdGek93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCWElEMGdiblZzYkN3Z2FHVWdQU0J1ZFd4c0xDQnNaU0E5SUc1MWJHdzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUM1a1pYQjBhQ0FtSmlBb2JHVWdQU0I0TG5OMFpXNWphV3dnUHlBek5UQTFOaUE2SURNek1Ua3dMQ0JYSUQwZ2VDNXpkR1Z1WTJsc0lEOGdUR2tnT2lCV2Jpd2dhR1VnUFNCNExuTjBaVzVqYVd3Z1B5QlVhU0E2SUdOeUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVJtOXliV0YwT2lCNExtRnNjR2hoSUh4OElHWWdQeUF6TWpnMU5pQTZJRE15T0RRNUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYQjBhRVp2Y20xaGREb2diR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFJtRmpkRzl5T2lCeUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb0lEMGdibVYzSUZoU1YyVmlSMHhDYVc1a2FXNW5LR2tzSUhRcExDQjFJRDBnYUM1amNtVmhkR1ZRY205cVpXTjBhVzl1VEdGNVpYSW9abVVwTENCcExuVndaR0YwWlZKbGJtUmxjbE4wWVhSbEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEp6T2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1N3Z1ppQS9JR2NnUFNCdVpYY2dXSE1vZFM1MFpYaDBkWEpsVjJsa2RHZ3NJSFV1ZEdWNGRIVnlaVWhsYVdkb2RDd2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0p0WVhRNklHTjBMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCeWJpd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hVWlhoMGRYSmxPaUJ1WlhjZ2EzTW9kUzUwWlhoMGRYSmxWMmxrZEdnc0lIVXVkR1Y0ZEhWeVpVaGxhV2RvZEN3Z2FHVXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQjJiMmxrSURBc0lIWnZhV1FnTUN3Z2RtOXBaQ0F3TENCMmIybGtJREFzSUZjcExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHVnVZMmxzUW5WbVptVnlPaUI0TG5OMFpXNWphV3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xuYm05eVpVUmxjSFJvT2lCMUxtbG5ibTl5WlVSbGNIUm9WbUZzZFdWekxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVlNaVzVrWlhKVWIxUmxlSFIxY21VNklHd3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVZMjlrYVc1bk9pQmxMbTkxZEhCMWRFVnVZMjlrYVc1bkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2tnT2lCbklEMGdibVYzSUVGMEtIVXVkR1Y0ZEhWeVpWZHBaSFJvTENCMUxuUmxlSFIxY21WSVpXbG5hSFFzSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJXRjBPaUI0TG1Gc2NHaGhJRDhnWTNRZ09pQkhiaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2NtNHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxjSFJvVkdWNGRIVnlaVG9nYm1WM0lHdHpLSFV1ZEdWNGRIVnlaVmRwWkhSb0xDQjFMblJsZUhSMWNtVklaV2xuYUhRc0lHaGxMQ0IyYjJsa0lEQXNJSFp2YVdRZ01Dd2dkbTlwWkNBd0xDQjJiMmxrSURBc0lIWnZhV1FnTUN3Z2RtOXBaQ0F3TENCWEtTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmxibU5wYkVKMVptWmxjam9nZUM1emRHVnVZMmxzTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWjI1dmNtVkVaWEIwYURvZ2RTNXBaMjV2Y21WRVpYQjBhRlpoYkhWbGN5d0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWpiMlJwYm1jNklHVXViM1YwY0hWMFJXNWpiMlJwYm1jS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBSbTkyWldGMGFXOXVLREVwTENCdklEMGdZWGRoYVhRZ2FTNXlaWEYxWlhOMFVtVm1aWEpsYm1ObFUzQmhZMlVvWVNrc0lHTmxMbk5sZEVOdmJuUmxlSFFvYVNrc0lHTmxMbk4wWVhKMEtDa3NJRzR1YVhOUWNtVnpaVzUwYVc1bklEMGdJVEFzSUc0dVpHbHpjR0YwWTJoRmRtVnVkQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSW5ObGMzTnBiMjV6ZEdGeWRDSUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQjNLRllwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZjZ1BTQnBMbWx1Y0hWMFUyOTFjbU5sY3pzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQm9aU0E5SURBN0lHaGxJRHdnY0M1c1pXNW5kR2c3SUdobEt5c3BYeTV6WlhRb1YxdG9aVjBzSUhCYmFHVmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCb1pTQTlJREE3SUdobElEd2dWaTV5WlcxdmRtVmtMbXhsYm1kMGFEc2dhR1VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiR1VnUFNCV0xuSmxiVzkyWldSYmFHVmRMQ0JtWlNBOUlGOHVaMlYwS0d4bEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmxJQ1ltSUNobVpTNWthWE53WVhSamFFVjJaVzUwS0hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVpHbHpZMjl1Ym1WamRHVmtJaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJzWlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrc0lGOHVaR1ZzWlhSbEtHeGxLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JvWlNBOUlEQTdJR2hsSUR3Z1ZpNWhaR1JsWkM1c1pXNW5kR2c3SUdobEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd4bElEMGdWaTVoWkdSbFpGdG9aVjBzSUdabElEMGdYeTVuWlhRb2JHVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabVVnSmlZZ1ptVXVaR2x6Y0dGMFkyaEZkbVZ1ZENoN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ltTnZibTVsWTNSbFpDSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2diR1VLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCRklEMGdibVYzSUUwc0lFUWdQU0J1WlhjZ1RUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQlZLRllzSUZjc0lHaGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFVXVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0ZjdWJXRjBjbWw0VjI5eWJHUXBMQ0JFTG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaG9aUzV0WVhSeWFYaFhiM0pzWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCc1pTQTlJRVV1WkdsemRHRnVZMlZVYnloRUtTd2dabVVnUFNCWExuQnliMnBsWTNScGIyNU5ZWFJ5YVhndVpXeGxiV1Z1ZEhNc0lFSmxJRDBnYUdVdWNISnZhbVZqZEdsdmJrMWhkSEpwZUM1bGJHVnRaVzUwY3l3Z1dTQTlJR1psV3pFMFhTQXZJQ2htWlZzeE1GMGdMU0F4S1N3Z1EyVWdQU0JtWlZzeE5GMGdMeUFvWm1WYk1UQmRJQ3NnTVNrc0lIbGxJRDBnS0dabFd6bGRJQ3NnTVNrZ0x5Qm1aVnMxWFN3Z1oyVWdQU0FvWm1WYk9WMGdMU0F4S1NBdklHWmxXelZkTENCNFpTQTlJQ2htWlZzNFhTQXRJREVwSUM4Z1ptVmJNRjBzSUU5bElEMGdLRUpsV3poZElDc2dNU2tnTHlCQ1pWc3dYU3dnUnlBOUlGa2dLaUI0WlN3Z2FpQTlJRmtnS2lCUFpTd2dTeUE5SUd4bElDOGdLQzE0WlNBcklFOWxLU3dnZFdVZ1BTQkxJQ29nTFhobE93b2dJQ0FnSUNBZ0lDQWdJQ0JYTG0xaGRISnBlRmR2Y214a0xtUmxZMjl0Y0c5elpTaFdMbkJ2YzJsMGFXOXVMQ0JXTG5GMVlYUmxjbTVwYjI0c0lGWXVjMk5oYkdVcExDQldMblJ5WVc1emJHRjBaVmdvZFdVcExDQldMblJ5WVc1emJHRjBaVm9vU3lrc0lGWXViV0YwY21sNFYyOXliR1F1WTI5dGNHOXpaU2hXTG5CdmMybDBhVzl1TENCV0xuRjFZWFJsY201cGIyNHNJRll1YzJOaGJHVXBMQ0JXTG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlM1amIzQjVLRll1YldGMGNtbDRWMjl5YkdRcExtbHVkbVZ5ZENncE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MyVWdQU0JaSUNzZ1N5d2dVMlVnUFNCRFpTQXJJRXNzSUZSbElEMGdSeUF0SUhWbExDQlFaU0E5SUdvZ0t5QW9iR1VnTFNCMVpTa3NJRmxsSUQwZ2VXVWdLaUJEWlNBdklGTmxJQ29nYzJVc0lFTWdQU0JuWlNBcUlFTmxJQzhnVTJVZ0tpQnpaVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ZpNXdjbTlxWldOMGFXOXVUV0YwY21sNExtMWhhMlZRWlhKemNHVmpkR2wyWlNoVVpTd2dVR1VzSUZsbExDQkRMQ0J6WlN3Z1UyVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJHS0ZZc0lGY3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1Z5QTlQVDBnYm5Wc2JDQS9JRll1YldGMGNtbDRWMjl5YkdRdVkyOXdlU2hXTG0xaGRISnBlQ2tnT2lCV0xtMWhkSEpwZUZkdmNteGtMbTExYkhScGNHeDVUV0YwY21salpYTW9WeTV0WVhSeWFYaFhiM0pzWkN3Z1ZpNXRZWFJ5YVhncExDQldMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaUzVqYjNCNUtGWXViV0YwY21sNFYyOXliR1FwTG1sdWRtVnlkQ2dwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpVTmhiV1Z5WVNBOUlHWjFibU4wYVc5dUtGWXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlHNTFiR3dwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ1RDNXVaV0Z5SUQwZ1lpNXVaV0Z5SUQwZ2VTNXVaV0Z5SUQwZ1ZpNXVaV0Z5TENCTUxtWmhjaUE5SUdJdVptRnlJRDBnZVM1bVlYSWdQU0JXTG1aaGNpd2dLRWtnSVQwOUlFd3VibVZoY2lCOGZDQnJJQ0U5UFNCTUxtWmhjaWtnSmlZZ0tHa3VkWEJrWVhSbFVtVnVaR1Z5VTNSaGRHVW9ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z3ZEdoT1pXRnlPaUJNTG01bFlYSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWEIwYUVaaGNqb2dUQzVtWVhJS0lDQWdJQ0FnSUNBZ0lDQWdmU2tzSUVrZ1BTQk1MbTVsWVhJc0lHc2dQU0JNTG1aaGNpazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQlhJRDBnVmk1d1lYSmxiblFzSUdobElEMGdUQzVqWVcxbGNtRnpPd29nSUNBZ0lDQWdJQ0FnSUNCR0tFd3NJRmNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHWmxJRDBnTURzZ1ptVWdQQ0JvWlM1c1pXNW5kR2c3SUdabEt5c3BSaWhvWlZ0bVpWMHNJRmNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQk1MbTFoZEhKcGVGZHZjbXhrTG1SbFkyOXRjRzl6WlNoTUxuQnZjMmwwYVc5dUxDQk1MbkYxWVhSbGNtNXBiMjRzSUV3dWMyTmhiR1VwTENCV0xuQnZjMmwwYVc5dUxtTnZjSGtvVEM1d2IzTnBkR2x2Ymlrc0lGWXVjWFZoZEdWeWJtbHZiaTVqYjNCNUtFd3VjWFZoZEdWeWJtbHZiaWtzSUZZdWMyTmhiR1V1WTI5d2VTaE1Mbk5qWVd4bEtTd2dWaTV0WVhSeWFYZ3VZMjl3ZVNoTUxtMWhkSEpwZUNrc0lGWXViV0YwY21sNFYyOXliR1F1WTI5d2VTaE1MbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd4bElEMGdWaTVqYUdsc1pISmxianNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbVpTQTlJREFzSUVKbElEMGdiR1V1YkdWdVozUm9PeUJtWlNBOElFSmxPeUJtWlNzcktXeGxXMlpsWFM1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNnaE1DazdDaUFnSUNBZ0lDQWdJQ0FnSUdobExteGxibWQwYUNBOVBUMGdNaUEvSUZVb1RDd2dlU3dnWWlrZ09pQk1MbkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ3VZMjl3ZVNoNUxuQnliMnBsWTNScGIyNU5ZWFJ5YVhncE93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVoyVjBRMkZ0WlhKaElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCTU93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVoyVjBSbTkyWldGMGFXOXVJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMUlDRTlQU0J1ZFd4c0tTQnlaWFIxY200Z2RTNW1hWGhsWkVadmRtVmhkR2x2YmpzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dRZ0lUMDlJRzUxYkd3cElISmxkSFZ5YmlCa0xtWnBlR1ZrUm05MlpXRjBhVzl1T3dvZ0lDQWdJQ0FnSUgwc0lIUm9hWE11YzJWMFJtOTJaV0YwYVc5dUlEMGdablZ1WTNScGIyNG9WaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjFJQ0U5UFNCdWRXeHNJQ1ltSUNoMUxtWnBlR1ZrUm05MlpXRjBhVzl1SUQwZ1Zpa3NJR1FnSVQwOUlHNTFiR3dnSmlZZ1pDNW1hWGhsWkVadmRtVmhkR2x2YmlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hrTG1acGVHVmtSbTkyWldGMGFXOXVJRDBnVmlrN0NpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnNaWFFnVHlBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYm1Vb1Zpd2dWeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWXlBOUlGY3VaMlYwVm1sbGQyVnlVRzl6WlNodktTd2diU0E5SUZjc0lHTWdJVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCc1pTQTlJR011ZG1sbGQzTTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtJQ0U5UFNCdWRXeHNJQ1ltSUNobExuTmxkRkpsYm1SbGNsUmhjbWRsZEVaeVlXMWxZblZtWm1WeUtHY3NJR1F1Wm5KaGJXVmlkV1ptWlhJcExDQmxMbk5sZEZKbGJtUmxjbFJoY21kbGRDaG5LU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptVWdQU0FoTVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bExteGxibWQwYUNBaFBUMGdUQzVqWVcxbGNtRnpMbXhsYm1kMGFDQW1KaUFvVEM1allXMWxjbUZ6TG14bGJtZDBhQ0E5SURBc0lHWmxJRDBnSVRBcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCQ1pTQTlJREE3SUVKbElEd2diR1V1YkdWdVozUm9PeUJDWlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1dTQTlJR3hsVzBKbFhTd2dRMlVnUFNCdWRXeHNPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtJQ0U5UFNCdWRXeHNLU0JEWlNBOUlHUXVaMlYwVm1sbGQzQnZjblFvV1NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm5aU0E5SUdndVoyVjBWbWxsZDFOMVlrbHRZV2RsS0hVc0lGa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkRaU0E5SUdkbExuWnBaWGR3YjNKMExDQkNaU0E5UFQwZ01DQW1KaUFvWlM1elpYUlNaVzVrWlhKVVlYSm5aWFJVWlhoMGRYSmxjeWhuTENCblpTNWpiMnh2Y2xSbGVIUjFjbVVzSUhVdWFXZHViM0psUkdWd2RHaFdZV3gxWlhNZ1B5QjJiMmxrSURBZ09pQm5aUzVrWlhCMGFGTjBaVzVqYVd4VVpYaDBkWEpsS1N3Z1pTNXpaWFJTWlc1a1pYSlVZWEpuWlhRb1p5a3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVdVZ1BTQkJXMEpsWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVaUzV0WVhSeWFYZ3Vabkp2YlVGeWNtRjVLRmt1ZEhKaGJuTm1iM0p0TG0xaGRISnBlQ2tzSUhsbExuQnliMnBsWTNScGIyNU5ZWFJ5YVhndVpuSnZiVUZ5Y21GNUtGa3VjSEp2YW1WamRHbHZiazFoZEhKcGVDa3NJSGxsTG5acFpYZHdiM0owTG5ObGRDaERaUzU0TENCRFpTNTVMQ0JEWlM1M2FXUjBhQ3dnUTJVdWFHVnBaMmgwS1N3Z1FtVWdQVDA5SURBZ0ppWWdUQzV0WVhSeWFYZ3VZMjl3ZVNoNVpTNXRZWFJ5YVhncExDQm1aU0E5UFQwZ0lUQWdKaVlnVEM1allXMWxjbUZ6TG5CMWMyZ29lV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9aU0E5SUdrdWFXNXdkWFJUYjNWeVkyVnpPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUd4bElEMGdNRHNnYkdVZ1BDQndMbXhsYm1kMGFEc2diR1VyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabVVnUFNCd1cyeGxYU3dnUW1VZ1BTQm9aVnRzWlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVpTNTFjR1JoZEdVb1FtVXNJRmNzSUc4cE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lFOGdKaVlnVHloV0xDQlhLU3dnYlNBOUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQmpaU0E5SUc1bGR5QnlhRHNLSUNBZ0lDQWdJQ0JqWlM1elpYUkJibWx0WVhScGIyNU1iMjl3S0c1bEtTd2dkR2hwY3k1elpYUkJibWx0WVhScGIyNU1iMjl3SUQwZ1puVnVZM1JwYjI0b1Zpa2dld29nSUNBZ0lDQWdJQ0FnSUNCUElEMGdWanNLSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbVJwYzNCdmMyVWdQU0JtZFc1amRHbHZiaWdwSUh0OU93b2dJQ0FnZlFwOU93cG1kVzVqZEdsdmJpQkRlQ2h6S1NCN0NpQWdJQ0JtZFc1amRHbHZiaUJsS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0JuTG1adlowTnZiRzl5TG5aaGJIVmxMbU52Y0hrb2NDNWpiMnh2Y2lrc0lIQXVhWE5HYjJjZ1B5QW9aeTVtYjJkT1pXRnlMblpoYkhWbElEMGdjQzV1WldGeUxDQm5MbVp2WjBaaGNpNTJZV3gxWlNBOUlIQXVabUZ5S1NBNklIQXVhWE5HYjJkRmVIQXlJQ1ltSUNobkxtWnZaMFJsYm5OcGRIa3VkbUZzZFdVZ1BTQndMbVJsYm5OcGRIa3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZENobkxDQndMQ0JmTENCNUxDQmlLU0I3Q2lBZ0lDQWdJQ0FnY0M1cGMwMWxjMmhDWVhOcFkwMWhkR1Z5YVdGc0lEOGdiaWhuTENCd0tTQTZJSEF1YVhOTlpYTm9UR0Z0WW1WeWRFMWhkR1Z5YVdGc0lEOGdLRzRvWnl3Z2NDa3NJR3dvWnl3Z2NDa3BJRG9nY0M1cGMwMWxjMmhVYjI5dVRXRjBaWEpwWVd3Z1B5QW9iaWhuTENCd0tTd2dhQ2huTENCd0tTa2dPaUJ3TG1selRXVnphRkJvYjI1blRXRjBaWEpwWVd3Z1B5QW9iaWhuTENCd0tTd2dZeWhuTENCd0tTa2dPaUJ3TG1selRXVnphRk4wWVc1a1lYSmtUV0YwWlhKcFlXd2dQeUFvYmlobkxDQndLU3dnY0M1cGMwMWxjMmhRYUhsemFXTmhiRTFoZEdWeWFXRnNJRDhnWkNobkxDQndMQ0JpS1NBNklIVW9aeXdnY0NrcElEb2djQzVwYzAxbGMyaE5ZWFJqWVhCTllYUmxjbWxoYkNBL0lDaHVLR2NzSUhBcExDQm1LR2NzSUhBcEtTQTZJSEF1YVhOTlpYTm9SR1Z3ZEdoTllYUmxjbWxoYkNBL0lDaHVLR2NzSUhBcExDQnRLR2NzSUhBcEtTQTZJSEF1YVhOTlpYTm9SR2x6ZEdGdVkyVk5ZWFJsY21saGJDQS9JQ2h1S0djc0lIQXBMQ0I0S0djc0lIQXBLU0E2SUhBdWFYTk5aWE5vVG05eWJXRnNUV0YwWlhKcFlXd2dQeUFvYmlobkxDQndLU3dnZGlobkxDQndLU2tnT2lCd0xtbHpUR2x1WlVKaGMybGpUV0YwWlhKcFlXd2dQeUFvYVNobkxDQndLU3dnY0M1cGMweHBibVZFWVhOb1pXUk5ZWFJsY21saGJDQW1KaUJ5S0djc0lIQXBLU0E2SUhBdWFYTlFiMmx1ZEhOTllYUmxjbWxoYkNBL0lHOG9aeXdnY0N3Z1h5d2dlU2tnT2lCd0xtbHpVM0J5YVhSbFRXRjBaWEpwWVd3Z1B5QmhLR2NzSUhBcElEb2djQzVwYzFOb1lXUnZkMDFoZEdWeWFXRnNJRDhnS0djdVkyOXNiM0l1ZG1Gc2RXVXVZMjl3ZVNod0xtTnZiRzl5S1N3Z1p5NXZjR0ZqYVhSNUxuWmhiSFZsSUQwZ2NDNXZjR0ZqYVhSNUtTQTZJSEF1YVhOVGFHRmtaWEpOWVhSbGNtbGhiQ0FtSmlBb2NDNTFibWxtYjNKdGMwNWxaV1JWY0dSaGRHVWdQU0FoTVNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnVLR2NzSUhBcElIc0tJQ0FnSUNBZ0lDQm5MbTl3WVdOcGRIa3VkbUZzZFdVZ1BTQndMbTl3WVdOcGRIa3NJSEF1WTI5c2IzSWdKaVlnWnk1a2FXWm1kWE5sTG5aaGJIVmxMbU52Y0hrb2NDNWpiMnh2Y2lrc0lIQXVaVzFwYzNOcGRtVWdKaVlnWnk1bGJXbHpjMmwyWlM1MllXeDFaUzVqYjNCNUtIQXVaVzFwYzNOcGRtVXBMbTExYkhScGNHeDVVMk5oYkdGeUtIQXVaVzFwYzNOcGRtVkpiblJsYm5OcGRIa3BMQ0J3TG0xaGNDQW1KaUFvWnk1dFlYQXVkbUZzZFdVZ1BTQndMbTFoY0Nrc0lIQXVZV3h3YUdGTllYQWdKaVlnS0djdVlXeHdhR0ZOWVhBdWRtRnNkV1VnUFNCd0xtRnNjR2hoVFdGd0tTd2djQzV6Y0dWamRXeGhjazFoY0NBbUppQW9aeTV6Y0dWamRXeGhjazFoY0M1MllXeDFaU0E5SUhBdWMzQmxZM1ZzWVhKTllYQXBMQ0J3TG1Gc2NHaGhWR1Z6ZENBK0lEQWdKaVlnS0djdVlXeHdhR0ZVWlhOMExuWmhiSFZsSUQwZ2NDNWhiSEJvWVZSbGMzUXBPd29nSUNBZ0lDQWdJR3hsZENCZklEMGdjeTVuWlhRb2NDa3VaVzUyVFdGd093b2dJQ0FnSUNBZ0lGOGdKaVlnS0djdVpXNTJUV0Z3TG5aaGJIVmxJRDBnWHl3Z1p5NW1iR2x3Ulc1MlRXRndMblpoYkhWbElEMGdYeTVwYzBOMVltVlVaWGgwZFhKbElDWW1JRjh1YVhOU1pXNWtaWEpVWVhKblpYUlVaWGgwZFhKbElEMDlQU0FoTVNBL0lDMHhJRG9nTVN3Z1p5NXlaV1pzWldOMGFYWnBkSGt1ZG1Gc2RXVWdQU0J3TG5KbFpteGxZM1JwZG1sMGVTd2daeTVwYjNJdWRtRnNkV1VnUFNCd0xtbHZjaXdnWnk1eVpXWnlZV04wYVc5dVVtRjBhVzh1ZG1Gc2RXVWdQU0J3TG5KbFpuSmhZM1JwYjI1U1lYUnBieWtzSUhBdWJHbG5hSFJOWVhBZ0ppWWdLR2N1YkdsbmFIUk5ZWEF1ZG1Gc2RXVWdQU0J3TG14cFoyaDBUV0Z3TENCbkxteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUxuWmhiSFZsSUQwZ2NDNXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTa3NJSEF1WVc5TllYQWdKaVlnS0djdVlXOU5ZWEF1ZG1Gc2RXVWdQU0J3TG1GdlRXRndMQ0JuTG1GdlRXRndTVzUwWlc1emFYUjVMblpoYkhWbElEMGdjQzVoYjAxaGNFbHVkR1Z1YzJsMGVTazdDaUFnSUNBZ0lDQWdiR1YwSUhrN0NpQWdJQ0FnSUNBZ2NDNXRZWEFnUHlCNUlEMGdjQzV0WVhBZ09pQndMbk53WldOMWJHRnlUV0Z3SUQ4Z2VTQTlJSEF1YzNCbFkzVnNZWEpOWVhBZ09pQndMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQS9JSGtnUFNCd0xtUnBjM0JzWVdObGJXVnVkRTFoY0NBNklIQXVibTl5YldGc1RXRndJRDhnZVNBOUlIQXVibTl5YldGc1RXRndJRG9nY0M1aWRXMXdUV0Z3SUQ4Z2VTQTlJSEF1WW5WdGNFMWhjQ0E2SUhBdWNtOTFaMmh1WlhOelRXRndJRDhnZVNBOUlIQXVjbTkxWjJodVpYTnpUV0Z3SURvZ2NDNXRaWFJoYkc1bGMzTk5ZWEFnUHlCNUlEMGdjQzV0WlhSaGJHNWxjM05OWVhBZ09pQndMbUZzY0doaFRXRndJRDhnZVNBOUlIQXVZV3h3YUdGTllYQWdPaUJ3TG1WdGFYTnphWFpsVFdGd0lEOGdlU0E5SUhBdVpXMXBjM05wZG1WTllYQWdPaUJ3TG1Oc1pXRnlZMjloZEUxaGNDQS9JSGtnUFNCd0xtTnNaV0Z5WTI5aGRFMWhjQ0E2SUhBdVkyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd0lEOGdlU0E5SUhBdVkyeGxZWEpqYjJGMFRtOXliV0ZzVFdGd0lEb2djQzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM05OWVhBZ1B5QjVJRDBnY0M1amJHVmhjbU52WVhSU2IzVm5hRzVsYzNOTllYQWdPaUJ3TG5Od1pXTjFiR0Z5U1c1MFpXNXphWFI1VFdGd0lEOGdlU0E5SUhBdWMzQmxZM1ZzWVhKSmJuUmxibk5wZEhsTllYQWdPaUJ3TG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnUHlCNUlEMGdjQzV6Y0dWamRXeGhja052Ykc5eVRXRndJRG9nY0M1MGNtRnVjMjFwYzNOcGIyNU5ZWEFnUHlCNUlEMGdjQzUwY21GdWMyMXBjM05wYjI1TllYQWdPaUJ3TG5Sb2FXTnJibVZ6YzAxaGNDQS9JSGtnUFNCd0xuUm9hV05yYm1WemMwMWhjQ0E2SUhBdWMyaGxaVzVEYjJ4dmNrMWhjQ0EvSUhrZ1BTQndMbk5vWldWdVEyOXNiM0pOWVhBZ09pQndMbk5vWldWdVVtOTFaMmh1WlhOelRXRndJQ1ltSUNoNUlEMGdjQzV6YUdWbGJsSnZkV2RvYm1WemMwMWhjQ2tzSUhrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvZVM1cGMxZGxZa2RNVW1WdVpHVnlWR0Z5WjJWMElDWW1JQ2g1SUQwZ2VTNTBaWGgwZFhKbEtTd2dlUzV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDA5UFNBaE1DQW1KaUI1TG5Wd1pHRjBaVTFoZEhKcGVDZ3BMQ0JuTG5WMlZISmhibk5tYjNKdExuWmhiSFZsTG1OdmNIa29lUzV0WVhSeWFYZ3BLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1lqc0tJQ0FnSUNBZ0lDQndMbUZ2VFdGd0lEOGdZaUE5SUhBdVlXOU5ZWEFnT2lCd0xteHBaMmgwVFdGd0lDWW1JQ2hpSUQwZ2NDNXNhV2RvZEUxaGNDa3NJR0lnSVQwOUlIWnZhV1FnTUNBbUppQW9ZaTVwYzFkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwSUNZbUlDaGlJRDBnWWk1MFpYaDBkWEpsS1N3Z1lpNXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElEMDlQU0FoTUNBbUppQmlMblZ3WkdGMFpVMWhkSEpwZUNncExDQm5MblYyTWxSeVlXNXpabTl5YlM1MllXeDFaUzVqYjNCNUtHSXViV0YwY21sNEtTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJwS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0JuTG1ScFptWjFjMlV1ZG1Gc2RXVXVZMjl3ZVNod0xtTnZiRzl5S1N3Z1p5NXZjR0ZqYVhSNUxuWmhiSFZsSUQwZ2NDNXZjR0ZqYVhSNU93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdjaWhuTENCd0tTQjdDaUFnSUNBZ0lDQWdaeTVrWVhOb1UybDZaUzUyWVd4MVpTQTlJSEF1WkdGemFGTnBlbVVzSUdjdWRHOTBZV3hUYVhwbExuWmhiSFZsSUQwZ2NDNWtZWE5vVTJsNlpTQXJJSEF1WjJGd1UybDZaU3dnWnk1elkyRnNaUzUyWVd4MVpTQTlJSEF1YzJOaGJHVTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ2S0djc0lIQXNJRjhzSUhrcElIc0tJQ0FnSUNBZ0lDQm5MbVJwWm1aMWMyVXVkbUZzZFdVdVkyOXdlU2h3TG1OdmJHOXlLU3dnWnk1dmNHRmphWFI1TG5aaGJIVmxJRDBnY0M1dmNHRmphWFI1TENCbkxuTnBlbVV1ZG1Gc2RXVWdQU0J3TG5OcGVtVWdLaUJmTENCbkxuTmpZV3hsTG5aaGJIVmxJRDBnZVNBcUlDNDFMQ0J3TG0xaGNDQW1KaUFvWnk1dFlYQXVkbUZzZFdVZ1BTQndMbTFoY0Nrc0lIQXVZV3h3YUdGTllYQWdKaVlnS0djdVlXeHdhR0ZOWVhBdWRtRnNkV1VnUFNCd0xtRnNjR2hoVFdGd0tTd2djQzVoYkhCb1lWUmxjM1FnUGlBd0lDWW1JQ2huTG1Gc2NHaGhWR1Z6ZEM1MllXeDFaU0E5SUhBdVlXeHdhR0ZVWlhOMEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWWpzS0lDQWdJQ0FnSUNCd0xtMWhjQ0EvSUdJZ1BTQndMbTFoY0NBNklIQXVZV3h3YUdGTllYQWdKaVlnS0dJZ1BTQndMbUZzY0doaFRXRndLU3dnWWlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hpTG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFQwOUlDRXdJQ1ltSUdJdWRYQmtZWFJsVFdGMGNtbDRLQ2tzSUdjdWRYWlVjbUZ1YzJadmNtMHVkbUZzZFdVdVkyOXdlU2hpTG0xaGRISnBlQ2twT3dvZ0lDQWdmUW9nSUNBZ1puVnVZM1JwYjI0Z1lTaG5MQ0J3S1NCN0NpQWdJQ0FnSUNBZ1p5NWthV1ptZFhObExuWmhiSFZsTG1OdmNIa29jQzVqYjJ4dmNpa3NJR2N1YjNCaFkybDBlUzUyWVd4MVpTQTlJSEF1YjNCaFkybDBlU3dnWnk1eWIzUmhkR2x2Ymk1MllXeDFaU0E5SUhBdWNtOTBZWFJwYjI0c0lIQXViV0Z3SUNZbUlDaG5MbTFoY0M1MllXeDFaU0E5SUhBdWJXRndLU3dnY0M1aGJIQm9ZVTFoY0NBbUppQW9aeTVoYkhCb1lVMWhjQzUyWVd4MVpTQTlJSEF1WVd4d2FHRk5ZWEFwTENCd0xtRnNjR2hoVkdWemRDQStJREFnSmlZZ0tHY3VZV3h3YUdGVVpYTjBMblpoYkhWbElEMGdjQzVoYkhCb1lWUmxjM1FwT3dvZ0lDQWdJQ0FnSUd4bGRDQmZPd29nSUNBZ0lDQWdJSEF1YldGd0lEOGdYeUE5SUhBdWJXRndJRG9nY0M1aGJIQm9ZVTFoY0NBbUppQW9YeUE5SUhBdVlXeHdhR0ZOWVhBcExDQmZJQ0U5UFNCMmIybGtJREFnSmlZZ0tGOHViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlQVDBnSVRBZ0ppWWdYeTUxY0dSaGRHVk5ZWFJ5YVhnb0tTd2daeTUxZGxSeVlXNXpabTl5YlM1MllXeDFaUzVqYjNCNUtGOHViV0YwY21sNEtTazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJzS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0J3TG1WdGFYTnphWFpsVFdGd0lDWW1JQ2huTG1WdGFYTnphWFpsVFdGd0xuWmhiSFZsSUQwZ2NDNWxiV2x6YzJsMlpVMWhjQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCaktHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCbkxuTndaV04xYkdGeUxuWmhiSFZsTG1OdmNIa29jQzV6Y0dWamRXeGhjaWtzSUdjdWMyaHBibWx1WlhOekxuWmhiSFZsSUQwZ1RXRjBhQzV0WVhnb2NDNXphR2x1YVc1bGMzTXNJREZsTFRRcExDQndMbVZ0YVhOemFYWmxUV0Z3SUNZbUlDaG5MbVZ0YVhOemFYWmxUV0Z3TG5aaGJIVmxJRDBnY0M1bGJXbHpjMmwyWlUxaGNDa3NJSEF1WW5WdGNFMWhjQ0FtSmlBb1p5NWlkVzF3VFdGd0xuWmhiSFZsSUQwZ2NDNWlkVzF3VFdGd0xDQm5MbUoxYlhCVFkyRnNaUzUyWVd4MVpTQTlJSEF1WW5WdGNGTmpZV3hsTENCd0xuTnBaR1VnUFQwOUlHbDBJQ1ltSUNobkxtSjFiWEJUWTJGc1pTNTJZV3gxWlNBcVBTQXRNU2twTENCd0xtNXZjbTFoYkUxaGNDQW1KaUFvWnk1dWIzSnRZV3hOWVhBdWRtRnNkV1VnUFNCd0xtNXZjbTFoYkUxaGNDd2daeTV1YjNKdFlXeFRZMkZzWlM1MllXeDFaUzVqYjNCNUtIQXVibTl5YldGc1UyTmhiR1VwTENCd0xuTnBaR1VnUFQwOUlHbDBJQ1ltSUdjdWJtOXliV0ZzVTJOaGJHVXVkbUZzZFdVdWJtVm5ZWFJsS0NrcExDQndMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQW1KaUFvWnk1a2FYTndiR0ZqWlcxbGJuUk5ZWEF1ZG1Gc2RXVWdQU0J3TG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnWnk1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlM1MllXeDFaU0E5SUhBdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVc0lHY3VaR2x6Y0d4aFkyVnRaVzUwUW1saGN5NTJZV3gxWlNBOUlIQXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJvS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0J3TG1keVlXUnBaVzUwVFdGd0lDWW1JQ2huTG1keVlXUnBaVzUwVFdGd0xuWmhiSFZsSUQwZ2NDNW5jbUZrYVdWdWRFMWhjQ2tzSUhBdVpXMXBjM05wZG1WTllYQWdKaVlnS0djdVpXMXBjM05wZG1WTllYQXVkbUZzZFdVZ1BTQndMbVZ0YVhOemFYWmxUV0Z3S1N3Z2NDNWlkVzF3VFdGd0lDWW1JQ2huTG1KMWJYQk5ZWEF1ZG1Gc2RXVWdQU0J3TG1KMWJYQk5ZWEFzSUdjdVluVnRjRk5qWVd4bExuWmhiSFZsSUQwZ2NDNWlkVzF3VTJOaGJHVXNJSEF1YzJsa1pTQTlQVDBnYVhRZ0ppWWdLR2N1WW5WdGNGTmpZV3hsTG5aaGJIVmxJQ285SUMweEtTa3NJSEF1Ym05eWJXRnNUV0Z3SUNZbUlDaG5MbTV2Y20xaGJFMWhjQzUyWVd4MVpTQTlJSEF1Ym05eWJXRnNUV0Z3TENCbkxtNXZjbTFoYkZOallXeGxMblpoYkhWbExtTnZjSGtvY0M1dWIzSnRZV3hUWTJGc1pTa3NJSEF1YzJsa1pTQTlQVDBnYVhRZ0ppWWdaeTV1YjNKdFlXeFRZMkZzWlM1MllXeDFaUzV1WldkaGRHVW9LU2tzSUhBdVpHbHpjR3hoWTJWdFpXNTBUV0Z3SUNZbUlDaG5MbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDNTJZV3gxWlNBOUlIQXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0xDQm5MbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxMblpoYkhWbElEMGdjQzVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU3dnWnk1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6TG5aaGJIVmxJRDBnY0M1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6S1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlIVW9aeXdnY0NrZ2V3b2dJQ0FnSUNBZ0lHY3VjbTkxWjJodVpYTnpMblpoYkhWbElEMGdjQzV5YjNWbmFHNWxjM01zSUdjdWJXVjBZV3h1WlhOekxuWmhiSFZsSUQwZ2NDNXRaWFJoYkc1bGMzTXNJSEF1Y205MVoyaHVaWE56VFdGd0lDWW1JQ2huTG5KdmRXZG9ibVZ6YzAxaGNDNTJZV3gxWlNBOUlIQXVjbTkxWjJodVpYTnpUV0Z3S1N3Z2NDNXRaWFJoYkc1bGMzTk5ZWEFnSmlZZ0tHY3ViV1YwWVd4dVpYTnpUV0Z3TG5aaGJIVmxJRDBnY0M1dFpYUmhiRzVsYzNOTllYQXBMQ0J3TG1WdGFYTnphWFpsVFdGd0lDWW1JQ2huTG1WdGFYTnphWFpsVFdGd0xuWmhiSFZsSUQwZ2NDNWxiV2x6YzJsMlpVMWhjQ2tzSUhBdVluVnRjRTFoY0NBbUppQW9aeTVpZFcxd1RXRndMblpoYkhWbElEMGdjQzVpZFcxd1RXRndMQ0JuTG1KMWJYQlRZMkZzWlM1MllXeDFaU0E5SUhBdVluVnRjRk5qWVd4bExDQndMbk5wWkdVZ1BUMDlJR2wwSUNZbUlDaG5MbUoxYlhCVFkyRnNaUzUyWVd4MVpTQXFQU0F0TVNrcExDQndMbTV2Y20xaGJFMWhjQ0FtSmlBb1p5NXViM0p0WVd4TllYQXVkbUZzZFdVZ1BTQndMbTV2Y20xaGJFMWhjQ3dnWnk1dWIzSnRZV3hUWTJGc1pTNTJZV3gxWlM1amIzQjVLSEF1Ym05eWJXRnNVMk5oYkdVcExDQndMbk5wWkdVZ1BUMDlJR2wwSUNZbUlHY3VibTl5YldGc1UyTmhiR1V1ZG1Gc2RXVXVibVZuWVhSbEtDa3BMQ0J3TG1ScGMzQnNZV05sYldWdWRFMWhjQ0FtSmlBb1p5NWthWE53YkdGalpXMWxiblJOWVhBdWRtRnNkV1VnUFNCd0xtUnBjM0JzWVdObGJXVnVkRTFoY0N3Z1p5NWthWE53YkdGalpXMWxiblJUWTJGc1pTNTJZV3gxWlNBOUlIQXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJR2N1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeTUyWVd4MVpTQTlJSEF1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeWtzSUhNdVoyVjBLSEFwTG1WdWRrMWhjQ0FtSmlBb1p5NWxiblpOWVhCSmJuUmxibk5wZEhrdWRtRnNkV1VnUFNCd0xtVnVkazFoY0VsdWRHVnVjMmwwZVNrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQmtLR2NzSUhBc0lGOHBJSHNLSUNBZ0lDQWdJQ0IxS0djc0lIQXBMQ0JuTG1sdmNpNTJZV3gxWlNBOUlIQXVhVzl5TENCd0xuTm9aV1Z1SUQ0Z01DQW1KaUFvWnk1emFHVmxia052Ykc5eUxuWmhiSFZsTG1OdmNIa29jQzV6YUdWbGJrTnZiRzl5S1M1dGRXeDBhWEJzZVZOallXeGhjaWh3TG5Ob1pXVnVLU3dnWnk1emFHVmxibEp2ZFdkb2JtVnpjeTUyWVd4MVpTQTlJSEF1YzJobFpXNVNiM1ZuYUc1bGMzTXNJSEF1YzJobFpXNURiMnh2Y2sxaGNDQW1KaUFvWnk1emFHVmxia052Ykc5eVRXRndMblpoYkhWbElEMGdjQzV6YUdWbGJrTnZiRzl5VFdGd0tTd2djQzV6YUdWbGJsSnZkV2RvYm1WemMwMWhjQ0FtSmlBb1p5NXphR1ZsYmxKdmRXZG9ibVZ6YzAxaGNDNTJZV3gxWlNBOUlIQXVjMmhsWlc1U2IzVm5hRzVsYzNOTllYQXBLU3dnY0M1amJHVmhjbU52WVhRZ1BpQXdJQ1ltSUNobkxtTnNaV0Z5WTI5aGRDNTJZV3gxWlNBOUlIQXVZMnhsWVhKamIyRjBMQ0JuTG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6Y3k1MllXeDFaU0E5SUhBdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOekxDQndMbU5zWldGeVkyOWhkRTFoY0NBbUppQW9aeTVqYkdWaGNtTnZZWFJOWVhBdWRtRnNkV1VnUFNCd0xtTnNaV0Z5WTI5aGRFMWhjQ2tzSUhBdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndJQ1ltSUNobkxtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQzUyWVd4MVpTQTlJSEF1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0tTd2djQzVqYkdWaGNtTnZZWFJPYjNKdFlXeE5ZWEFnSmlZZ0tHY3VZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1V1ZG1Gc2RXVXVZMjl3ZVNod0xtTnNaV0Z5WTI5aGRFNXZjbTFoYkZOallXeGxLU3dnWnk1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBdWRtRnNkV1VnUFNCd0xtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDd2djQzV6YVdSbElEMDlQU0JwZENBbUppQm5MbU5zWldGeVkyOWhkRTV2Y20xaGJGTmpZV3hsTG5aaGJIVmxMbTVsWjJGMFpTZ3BLU2tzSUhBdWRISmhibk50YVhOemFXOXVJRDRnTUNBbUppQW9aeTUwY21GdWMyMXBjM05wYjI0dWRtRnNkV1VnUFNCd0xuUnlZVzV6YldsemMybHZiaXdnWnk1MGNtRnVjMjFwYzNOcGIyNVRZVzF3YkdWeVRXRndMblpoYkhWbElEMGdYeTUwWlhoMGRYSmxMQ0JuTG5SeVlXNXpiV2x6YzJsdmJsTmhiWEJzWlhKVGFYcGxMblpoYkhWbExuTmxkQ2hmTG5kcFpIUm9MQ0JmTG1obGFXZG9kQ2tzSUhBdWRISmhibk50YVhOemFXOXVUV0Z3SUNZbUlDaG5MblJ5WVc1emJXbHpjMmx2YmsxaGNDNTJZV3gxWlNBOUlIQXVkSEpoYm5OdGFYTnphVzl1VFdGd0tTd2daeTUwYUdsamEyNWxjM011ZG1Gc2RXVWdQU0J3TG5Sb2FXTnJibVZ6Y3l3Z2NDNTBhR2xqYTI1bGMzTk5ZWEFnSmlZZ0tHY3VkR2hwWTJ0dVpYTnpUV0Z3TG5aaGJIVmxJRDBnY0M1MGFHbGphMjVsYzNOTllYQXBMQ0JuTG1GMGRHVnVkV0YwYVc5dVJHbHpkR0Z1WTJVdWRtRnNkV1VnUFNCd0xtRjBkR1Z1ZFdGMGFXOXVSR2x6ZEdGdVkyVXNJR2N1WVhSMFpXNTFZWFJwYjI1RGIyeHZjaTUyWVd4MVpTNWpiM0I1S0hBdVlYUjBaVzUxWVhScGIyNURiMnh2Y2lrcExDQm5Mbk53WldOMWJHRnlTVzUwWlc1emFYUjVMblpoYkhWbElEMGdjQzV6Y0dWamRXeGhja2x1ZEdWdWMybDBlU3dnWnk1emNHVmpkV3hoY2tOdmJHOXlMblpoYkhWbExtTnZjSGtvY0M1emNHVmpkV3hoY2tOdmJHOXlLU3dnY0M1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNDQW1KaUFvWnk1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNDNTJZV3gxWlNBOUlIQXVjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEFwTENCd0xuTndaV04xYkdGeVEyOXNiM0pOWVhBZ0ppWWdLR2N1YzNCbFkzVnNZWEpEYjJ4dmNrMWhjQzUyWVd4MVpTQTlJSEF1YzNCbFkzVnNZWEpEYjJ4dmNrMWhjQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCbUtHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCd0xtMWhkR05oY0NBbUppQW9aeTV0WVhSallYQXVkbUZzZFdVZ1BTQndMbTFoZEdOaGNDa3NJSEF1WW5WdGNFMWhjQ0FtSmlBb1p5NWlkVzF3VFdGd0xuWmhiSFZsSUQwZ2NDNWlkVzF3VFdGd0xDQm5MbUoxYlhCVFkyRnNaUzUyWVd4MVpTQTlJSEF1WW5WdGNGTmpZV3hsTENCd0xuTnBaR1VnUFQwOUlHbDBJQ1ltSUNobkxtSjFiWEJUWTJGc1pTNTJZV3gxWlNBcVBTQXRNU2twTENCd0xtNXZjbTFoYkUxaGNDQW1KaUFvWnk1dWIzSnRZV3hOWVhBdWRtRnNkV1VnUFNCd0xtNXZjbTFoYkUxaGNDd2daeTV1YjNKdFlXeFRZMkZzWlM1MllXeDFaUzVqYjNCNUtIQXVibTl5YldGc1UyTmhiR1VwTENCd0xuTnBaR1VnUFQwOUlHbDBJQ1ltSUdjdWJtOXliV0ZzVTJOaGJHVXVkbUZzZFdVdWJtVm5ZWFJsS0NrcExDQndMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQW1KaUFvWnk1a2FYTndiR0ZqWlcxbGJuUk5ZWEF1ZG1Gc2RXVWdQU0J3TG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnWnk1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlM1MllXeDFaU0E5SUhBdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVc0lHY3VaR2x6Y0d4aFkyVnRaVzUwUW1saGN5NTJZV3gxWlNBOUlIQXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJ0S0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0J3TG1ScGMzQnNZV05sYldWdWRFMWhjQ0FtSmlBb1p5NWthWE53YkdGalpXMWxiblJOWVhBdWRtRnNkV1VnUFNCd0xtUnBjM0JzWVdObGJXVnVkRTFoY0N3Z1p5NWthWE53YkdGalpXMWxiblJUWTJGc1pTNTJZV3gxWlNBOUlIQXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJR2N1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeTUyWVd4MVpTQTlJSEF1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeWs3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCNEtHY3NJSEFwSUhzS0lDQWdJQ0FnSUNCd0xtUnBjM0JzWVdObGJXVnVkRTFoY0NBbUppQW9aeTVrYVhOd2JHRmpaVzFsYm5STllYQXVkbUZzZFdVZ1BTQndMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2daeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaUzUyWVd4MVpTQTlJSEF1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUdjdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3k1MllXeDFaU0E5SUhBdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lrc0lHY3VjbVZtWlhKbGJtTmxVRzl6YVhScGIyNHVkbUZzZFdVdVkyOXdlU2h3TG5KbFptVnlaVzVqWlZCdmMybDBhVzl1S1N3Z1p5NXVaV0Z5UkdsemRHRnVZMlV1ZG1Gc2RXVWdQU0J3TG01bFlYSkVhWE4wWVc1alpTd2daeTVtWVhKRWFYTjBZVzVqWlM1MllXeDFaU0E5SUhBdVptRnlSR2x6ZEdGdVkyVTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUIyS0djc0lIQXBJSHNLSUNBZ0lDQWdJQ0J3TG1KMWJYQk5ZWEFnSmlZZ0tHY3VZblZ0Y0UxaGNDNTJZV3gxWlNBOUlIQXVZblZ0Y0UxaGNDd2daeTVpZFcxd1UyTmhiR1V1ZG1Gc2RXVWdQU0J3TG1KMWJYQlRZMkZzWlN3Z2NDNXphV1JsSUQwOVBTQnBkQ0FtSmlBb1p5NWlkVzF3VTJOaGJHVXVkbUZzZFdVZ0tqMGdMVEVwS1N3Z2NDNXViM0p0WVd4TllYQWdKaVlnS0djdWJtOXliV0ZzVFdGd0xuWmhiSFZsSUQwZ2NDNXViM0p0WVd4TllYQXNJR2N1Ym05eWJXRnNVMk5oYkdVdWRtRnNkV1V1WTI5d2VTaHdMbTV2Y20xaGJGTmpZV3hsS1N3Z2NDNXphV1JsSUQwOVBTQnBkQ0FtSmlCbkxtNXZjbTFoYkZOallXeGxMblpoYkhWbExtNWxaMkYwWlNncEtTd2djQzVrYVhOd2JHRmpaVzFsYm5STllYQWdKaVlnS0djdVpHbHpjR3hoWTJWdFpXNTBUV0Z3TG5aaGJIVmxJRDBnY0M1a2FYTndiR0ZqWlcxbGJuUk5ZWEFzSUdjdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVdWRtRnNkV1VnUFNCd0xtUnBjM0JzWVdObGJXVnVkRk5qWVd4bExDQm5MbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTXVkbUZzZFdVZ1BTQndMbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTXBPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSHNLSUNBZ0lDQWdJQ0J5WldaeVpYTm9SbTluVlc1cFptOXliWE02SUdVc0NpQWdJQ0FnSUNBZ2NtVm1jbVZ6YUUxaGRHVnlhV0ZzVlc1cFptOXliWE02SUhRS0lDQWdJSDA3Q24wS1puVnVZM1JwYjI0Z1RIZ29LU0I3Q2lBZ0lDQnNaWFFnY3lBOUlIRnpLQ0pqWVc1MllYTWlLVHNLSUNBZ0lISmxkSFZ5YmlCekxuTjBlV3hsTG1ScGMzQnNZWGtnUFNBaVlteHZZMnNpTENCek93cDlDbVoxYm1OMGFXOXVJSEZsS0hNZ1BTQjdmU2tnZXdvZ0lDQWdiR1YwSUdVZ1BTQnpMbU5oYm5aaGN5QWhQVDBnZG05cFpDQXdJRDhnY3k1allXNTJZWE1nT2lCTWVDZ3BMQ0IwSUQwZ2N5NWpiMjUwWlhoMElDRTlQU0IyYjJsa0lEQWdQeUJ6TG1OdmJuUmxlSFFnT2lCdWRXeHNMQ0J1SUQwZ2N5NWhiSEJvWVNBaFBUMGdkbTlwWkNBd0lEOGdjeTVoYkhCb1lTQTZJQ0V4TENCcElEMGdjeTVrWlhCMGFDQWhQVDBnZG05cFpDQXdJRDhnY3k1a1pYQjBhQ0E2SUNFd0xDQnlJRDBnY3k1emRHVnVZMmxzSUNFOVBTQjJiMmxrSURBZ1B5QnpMbk4wWlc1amFXd2dPaUFoTUN3Z2J5QTlJSE11WVc1MGFXRnNhV0Z6SUNFOVBTQjJiMmxrSURBZ1B5QnpMbUZ1ZEdsaGJHbGhjeUE2SUNFeExDQmhJRDBnY3k1d2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFZ0lUMDlJSFp2YVdRZ01DQS9JSE11Y0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoSURvZ0lUQXNJR3dnUFNCekxuQnlaWE5sY25abFJISmhkMmx1WjBKMVptWmxjaUFoUFQwZ2RtOXBaQ0F3SUQ4Z2N5NXdjbVZ6WlhKMlpVUnlZWGRwYm1kQ2RXWm1aWElnT2lBaE1Td2dZeUE5SUhNdWNHOTNaWEpRY21WbVpYSmxibU5sSUNFOVBTQjJiMmxrSURBZ1B5QnpMbkJ2ZDJWeVVISmxabVZ5Wlc1alpTQTZJQ0prWldaaGRXeDBJaXdnYUNBOUlITXVabUZwYkVsbVRXRnFiM0pRWlhKbWIzSnRZVzVqWlVOaGRtVmhkQ0FoUFQwZ2RtOXBaQ0F3SUQ4Z2N5NW1ZV2xzU1daTllXcHZjbEJsY21admNtMWhibU5sUTJGMlpXRjBJRG9nSVRFc0lIVWdQU0J1ZFd4c0xDQmtJRDBnYm5Wc2JDd2daaUE5SUZ0ZExDQnRJRDBnVzEwN0NpQWdJQ0IwYUdsekxtUnZiVVZzWlcxbGJuUWdQU0JsTENCMGFHbHpMbVJsWW5WbklEMGdld29nSUNBZ0lDQWdJR05vWldOclUyaGhaR1Z5UlhKeWIzSnpPaUFoTUFvZ0lDQWdmU3dnZEdocGN5NWhkWFJ2UTJ4bFlYSWdQU0FoTUN3Z2RHaHBjeTVoZFhSdlEyeGxZWEpEYjJ4dmNpQTlJQ0V3TENCMGFHbHpMbUYxZEc5RGJHVmhja1JsY0hSb0lEMGdJVEFzSUhSb2FYTXVZWFYwYjBOc1pXRnlVM1JsYm1OcGJDQTlJQ0V3TENCMGFHbHpMbk52Y25SUFltcGxZM1J6SUQwZ0lUQXNJSFJvYVhNdVkyeHBjSEJwYm1kUWJHRnVaWE1nUFNCYlhTd2dkR2hwY3k1c2IyTmhiRU5zYVhCd2FXNW5SVzVoWW14bFpDQTlJQ0V4TENCMGFHbHpMbTkxZEhCMWRFVnVZMjlrYVc1bklEMGdUblFzSUhSb2FYTXVjR2g1YzJsallXeHNlVU52Y25KbFkzUk1hV2RvZEhNZ1BTQWhNU3dnZEdocGN5NTBiMjVsVFdGd2NHbHVaeUE5SUY5dUxDQjBhR2x6TG5SdmJtVk5ZWEJ3YVc1blJYaHdiM04xY21VZ1BTQXhPd29nSUNBZ2JHVjBJSGdnUFNCMGFHbHpMQ0IySUQwZ0lURXNJR2NnUFNBd0xDQndJRDBnTUN3Z1h5QTlJRzUxYkd3c0lIa2dQU0F0TVN3Z1lpQTlJRzUxYkd3c0lFRWdQU0J1WlhjZ1ZtVXNJRXdnUFNCdVpYY2dWbVVzSUVrZ1BTQnVkV3hzTENCcklEMGdaUzUzYVdSMGFDd2dRaUE5SUdVdWFHVnBaMmgwTENCUUlEMGdNU3dnZHlBOUlHNTFiR3dzSUVVZ1BTQnVkV3hzTENCRUlEMGdibVYzSUZabEtEQXNJREFzSUdzc0lFSXBMQ0JWSUQwZ2JtVjNJRlpsS0RBc0lEQXNJR3NzSUVJcExDQkdJRDBnSVRFc0lFOGdQU0JiWFN3Z2JtVWdQU0J1WlhjZ1JISXNJR05sSUQwZ0lURXNJRllnUFNBaE1Td2dWeUE5SUc1MWJHd3NJR2hsSUQwZ2JtVjNJSEJsTENCc1pTQTlJRzVsZHlCTkxDQm1aU0E5SUhzS0lDQWdJQ0FnSUNCaVlXTnJaM0p2ZFc1a09pQnVkV3hzTEFvZ0lDQWdJQ0FnSUdadlp6b2diblZzYkN3S0lDQWdJQ0FnSUNCbGJuWnBjbTl1YldWdWREb2diblZzYkN3S0lDQWdJQ0FnSUNCdmRtVnljbWxrWlUxaGRHVnlhV0ZzT2lCdWRXeHNMQW9nSUNBZ0lDQWdJR2x6VTJObGJtVTZJQ0V3Q2lBZ0lDQjlPd29nSUNBZ1puVnVZM1JwYjI0Z1FtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRjhnUFQwOUlHNTFiR3dnUHlCUUlEb2dNVHNLSUNBZ0lIMEtJQ0FnSUd4bGRDQlpJRDBnZERzS0lDQWdJR1oxYm1OMGFXOXVJRU5sS0ZNc0lFNHBJSHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRWdnUFNBd095QklJRHdnVXk1c1pXNW5kR2c3SUVnckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnVTF0SVhTd2djU0E5SUdVdVoyVjBRMjl1ZEdWNGRDaDZMQ0JPS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hFZ0lUMDlJRzUxYkd3cElISmxkSFZ5YmlCeE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lIMEtJQ0FnSUhSeWVTQjdDaUFnSUNBZ0lDQWdiR1YwSUZNZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdGc2NHaGhPaUJ1TEFvZ0lDQWdJQ0FnSUNBZ0lDQmtaWEIwYURvZ2FTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzNSbGJtTnBiRG9nY2l3S0lDQWdJQ0FnSUNBZ0lDQWdZVzUwYVdGc2FXRnpPaUJ2TEFvZ0lDQWdJQ0FnSUNBZ0lDQndjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRTZJR0VzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQnlaWE5sY25abFJISmhkMmx1WjBKMVptWmxjam9nYkN3S0lDQWdJQ0FnSUNBZ0lDQWdjRzkzWlhKUWNtVm1aWEpsYm1ObE9pQmpMQW9nSUNBZ0lDQWdJQ0FnSUNCbVlXbHNTV1pOWVdwdmNsQmxjbVp2Y20xaGJtTmxRMkYyWldGME9pQm9DaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0JwWmlBb0luTmxkRUYwZEhKcFluVjBaU0lnYVc0Z1pTQW1KaUJsTG5ObGRFRjBkSEpwWW5WMFpTZ2laR0YwWVMxbGJtZHBibVVpTENCZ2RHaHlaV1V1YW5NZ2NpUjdZMkY5WUNrc0lHVXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2lkMlZpWjJ4amIyNTBaWGgwYkc5emRDSXNJRVZsTENBaE1Ta3NJR1V1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpZDJWaVoyeGpiMjUwWlhoMGNtVnpkRzl5WldRaUxDQnRaU3dnSVRFcExDQlpJRDA5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JPSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0luZGxZbWRzTWlJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaWQyVmlaMndpTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSW1WNGNHVnlhVzFsYm5SaGJDMTNaV0puYkNJS0lDQWdJQ0FnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGd1YVhOWFpXSkhUREZTWlc1a1pYSmxjaUE5UFQwZ0lUQWdKaVlnVGk1emFHbG1kQ2dwTENCWklEMGdRMlVvVGl3Z1V5a3NJRmtnUFQwOUlHNTFiR3dwSUhSb2NtOTNJRU5sS0U0cElEOGdibVYzSUVWeWNtOXlLQ0pGY25KdmNpQmpjbVZoZEdsdVp5QlhaV0pIVENCamIyNTBaWGgwSUhkcGRHZ2dlVzkxY2lCelpXeGxZM1JsWkNCaGRIUnlhV0oxZEdWekxpSXBJRG9nYm1WM0lFVnljbTl5S0NKRmNuSnZjaUJqY21WaGRHbHVaeUJYWldKSFRDQmpiMjUwWlhoMExpSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JaTG1kbGRGTm9ZV1JsY2xCeVpXTnBjMmx2YmtadmNtMWhkQ0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaFpMbWRsZEZOb1lXUmxjbEJ5WldOcGMybHZia1p2Y20xaGRDQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtRnVaMlZOYVc0NklERXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlZVzVuWlUxaGVEb2dNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldOcGMybHZiam9nTVFvZ0lDQWdJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdmU0JqWVhSamFDQW9VeWtnZXdvZ0lDQWdJQ0FnSUhSb2NtOTNJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQ0lnS3lCVExtMWxjM05oWjJVcExDQlRPd29nSUNBZ2ZRb2dJQ0FnYkdWMElIbGxMQ0JuWlN3Z2VHVXNJRTlsTENCSExDQnFMQ0JMTENCMVpTd2djMlVzSUZObExDQlVaU3dnVUdVc0lGbGxMQ0JETENCVUxDQktMQ0FrTENCeVpTd2dXaXdnVFdVc0lIWmxMQ0IwWlN3Z1Vqc0tJQ0FnSUdaMWJtTjBhVzl1SUdWbEtDa2dld29nSUNBZ0lDQWdJSGxsSUQwZ2JtVjNJRkZ0S0ZrcExDQm5aU0E5SUc1bGR5QlliU2haTENCNVpTd2djeWtzSUhsbExtbHVhWFFvWjJVcExDQjBaU0E5SUc1bGR5QkZlQ2haTENCNVpTd2daMlVwTENCNFpTQTlJRzVsZHlCVGVDaFpMQ0I1WlN3Z1oyVXBMQ0JQV3pCZElEMGdNVEF5T1N3Z1QyVWdQU0J1WlhjZ2RHY29XU2tzSUVjZ1BTQnVaWGNnWm5nc0lHb2dQU0J1WlhjZ1ZIZ29XU3dnZVdVc0lIaGxMQ0JITENCblpTd2dkR1VzSUU5bEtTd2dTeUE5SUc1bGR5QlpiU2g0S1N3Z2RXVWdQU0J1WlhjZ2FtMG9lQ2tzSUhObElEMGdibVYzSUdkbUtGa3NJR2RsS1N3Z1VpQTlJRzVsZHlCWGJTaFpMQ0I1WlN3Z2MyVXNJR2RsS1N3Z1UyVWdQU0J1WlhjZ1MyMG9XU3dnYzJVc0lFOWxMQ0JTS1N3Z1ZHVWdQU0J1WlhjZ2MyY29XU3dnVTJVc0lITmxMQ0JQWlNrc0lGb2dQU0J1WlhjZ2NtY29XU3dnWjJVc0lHb3BMQ0JLSUQwZ2JtVjNJRXB0S0VjcExDQlFaU0E5SUc1bGR5QmtlQ2g0TENCTExDQjFaU3dnZVdVc0lHZGxMQ0JTTENCS0tTd2dXV1VnUFNCdVpYY2dRM2dvUnlrc0lFTWdQU0J1WlhjZ2JYZ3NJRlFnUFNCdVpYY2dUWGdvZVdVc0lHZGxLU3dnY21VZ1BTQnVaWGNnVm0wb2VDd2dTeXdnZUdVc0lGUmxMQ0JoS1N3Z0pDQTlJRzVsZHlCNWFDaDRMQ0JVWlN3Z1oyVXBMQ0JOWlNBOUlHNWxkeUJ4YlNoWkxDQjVaU3dnVDJVc0lHZGxLU3dnZG1VZ1BTQnVaWGNnWldjb1dTd2dlV1VzSUU5bExDQm5aU2tzSUU5bExuQnliMmR5WVcxeklEMGdVR1V1Y0hKdlozSmhiWE1zSUhndVkyRndZV0pwYkdsMGFXVnpJRDBnWjJVc0lIZ3VaWGgwWlc1emFXOXVjeUE5SUhsbExDQjRMbkJ5YjNCbGNuUnBaWE1nUFNCSExDQjRMbkpsYm1SbGNreHBjM1J6SUQwZ1F5d2dlQzV6YUdGa2IzZE5ZWEFnUFNBa0xDQjRMbk4wWVhSbElEMGdlR1VzSUhndWFXNW1ieUE5SUU5bE93b2dJQ0FnZlFvZ0lDQWdaV1VvS1RzS0lDQWdJR3hsZENCUklEMGdibVYzSUhab0tIZ3NJRmtwT3dvZ0lDQWdkR2hwY3k1NGNpQTlJRkVzSUhSb2FYTXVaMlYwUTI5dWRHVjRkQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCWk93b2dJQ0FnZlN3Z2RHaHBjeTVuWlhSRGIyNTBaWGgwUVhSMGNtbGlkWFJsY3lBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQlpMbWRsZEVOdmJuUmxlSFJCZEhSeWFXSjFkR1Z6S0NrN0NpQWdJQ0I5TENCMGFHbHpMbVp2Y21ObFEyOXVkR1Y0ZEV4dmMzTWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdVeUE5SUhsbExtZGxkQ2dpVjBWQ1IweGZiRzl6WlY5amIyNTBaWGgwSWlrN0NpQWdJQ0FnSUNBZ1V5QW1KaUJUTG14dmMyVkRiMjUwWlhoMEtDazdDaUFnSUNCOUxDQjBhR2x6TG1admNtTmxRMjl1ZEdWNGRGSmxjM1J2Y21VZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1V5QTlJSGxsTG1kbGRDZ2lWMFZDUjB4ZmJHOXpaVjlqYjI1MFpYaDBJaWs3Q2lBZ0lDQWdJQ0FnVXlBbUppQlRMbkpsYzNSdmNtVkRiMjUwWlhoMEtDazdDaUFnSUNCOUxDQjBhR2x6TG1kbGRGQnBlR1ZzVW1GMGFXOGdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVURzS0lDQWdJSDBzSUhSb2FYTXVjMlYwVUdsNFpXeFNZWFJwYnlBOUlHWjFibU4wYVc5dUtGTXBJSHNLSUNBZ0lDQWdJQ0JUSUNFOVBTQjJiMmxrSURBZ0ppWWdLRkFnUFNCVExDQjBhR2x6TG5ObGRGTnBlbVVvYXl3Z1Fpd2dJVEVwS1RzS0lDQWdJSDBzSUhSb2FYTXVaMlYwVTJsNlpTQTlJR1oxYm1OMGFXOXVLRk1wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVXk1elpYUW9heXdnUWlrN0NpQWdJQ0I5TENCMGFHbHpMbk5sZEZOcGVtVWdQU0JtZFc1amRHbHZiaWhUTENCT0xDQklLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tGRXVhWE5RY21WelpXNTBhVzVuS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dRMkZ1SjNRZ1kyaGhibWRsSUhOcGVtVWdkMmhwYkdVZ1ZsSWdaR1YyYVdObElHbHpJSEJ5WlhObGJuUnBibWN1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdheUE5SUZNc0lFSWdQU0JPTENCbExuZHBaSFJvSUQwZ1RXRjBhQzVtYkc5dmNpaFRJQ29nVUNrc0lHVXVhR1ZwWjJoMElEMGdUV0YwYUM1bWJHOXZjaWhPSUNvZ1VDa3NJRWdnSVQwOUlDRXhJQ1ltSUNobExuTjBlV3hsTG5kcFpIUm9JRDBnVXlBcklDSndlQ0lzSUdVdWMzUjViR1V1YUdWcFoyaDBJRDBnVGlBcklDSndlQ0lwTENCMGFHbHpMbk5sZEZacFpYZHdiM0owS0RBc0lEQXNJRk1zSUU0cE93b2dJQ0FnZlN3Z2RHaHBjeTVuWlhSRWNtRjNhVzVuUW5WbVptVnlVMmw2WlNBOUlHWjFibU4wYVc5dUtGTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVeTV6WlhRb2F5QXFJRkFzSUVJZ0tpQlFLUzVtYkc5dmNpZ3BPd29nSUNBZ2ZTd2dkR2hwY3k1elpYUkVjbUYzYVc1blFuVm1abVZ5VTJsNlpTQTlJR1oxYm1OMGFXOXVLRk1zSUU0c0lFZ3BJSHNLSUNBZ0lDQWdJQ0JySUQwZ1V5d2dRaUE5SUU0c0lGQWdQU0JJTENCbExuZHBaSFJvSUQwZ1RXRjBhQzVtYkc5dmNpaFRJQ29nU0Nrc0lHVXVhR1ZwWjJoMElEMGdUV0YwYUM1bWJHOXZjaWhPSUNvZ1NDa3NJSFJvYVhNdWMyVjBWbWxsZDNCdmNuUW9NQ3dnTUN3Z1V5d2dUaWs3Q2lBZ0lDQjlMQ0IwYUdsekxtZGxkRU4xY25KbGJuUldhV1YzY0c5eWRDQTlJR1oxYm1OMGFXOXVLRk1wSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnVXk1amIzQjVLRUVwT3dvZ0lDQWdmU3dnZEdocGN5NW5aWFJXYVdWM2NHOXlkQ0E5SUdaMWJtTjBhVzl1S0ZNcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1V5NWpiM0I1S0VRcE93b2dJQ0FnZlN3Z2RHaHBjeTV6WlhSV2FXVjNjRzl5ZENBOUlHWjFibU4wYVc5dUtGTXNJRTRzSUVnc0lIb3BJSHNLSUNBZ0lDQWdJQ0JUTG1selZtVmpkRzl5TkNBL0lFUXVjMlYwS0ZNdWVDd2dVeTU1TENCVExub3NJRk11ZHlrZ09pQkVMbk5sZENoVExDQk9MQ0JJTENCNktTd2dlR1V1ZG1sbGQzQnZjblFvUVM1amIzQjVLRVFwTG0xMWJIUnBjR3g1VTJOaGJHRnlLRkFwTG1ac2IyOXlLQ2twT3dvZ0lDQWdmU3dnZEdocGN5NW5aWFJUWTJsemMyOXlJRDBnWm5WdVkzUnBiMjRvVXlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCVExtTnZjSGtvVlNrN0NpQWdJQ0I5TENCMGFHbHpMbk5sZEZOamFYTnpiM0lnUFNCbWRXNWpkR2x2YmloVExDQk9MQ0JJTENCNktTQjdDaUFnSUNBZ0lDQWdVeTVwYzFabFkzUnZjalFnUHlCVkxuTmxkQ2hUTG5nc0lGTXVlU3dnVXk1NkxDQlRMbmNwSURvZ1ZTNXpaWFFvVXl3Z1Rpd2dTQ3dnZWlrc0lIaGxMbk5qYVhOemIzSW9UQzVqYjNCNUtGVXBMbTExYkhScGNHeDVVMk5oYkdGeUtGQXBMbVpzYjI5eUtDa3BPd29nSUNBZ2ZTd2dkR2hwY3k1blpYUlRZMmx6YzI5eVZHVnpkQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCR093b2dJQ0FnZlN3Z2RHaHBjeTV6WlhSVFkybHpjMjl5VkdWemRDQTlJR1oxYm1OMGFXOXVLRk1wSUhzS0lDQWdJQ0FnSUNCNFpTNXpaWFJUWTJsemMyOXlWR1Z6ZENoR0lEMGdVeWs3Q2lBZ0lDQjlMQ0IwYUdsekxuTmxkRTl3WVhGMVpWTnZjblFnUFNCbWRXNWpkR2x2YmloVEtTQjdDaUFnSUNBZ0lDQWdkeUE5SUZNN0NpQWdJQ0I5TENCMGFHbHpMbk5sZEZSeVlXNXpjR0Z5Wlc1MFUyOXlkQ0E5SUdaMWJtTjBhVzl1S0ZNcElIc0tJQ0FnSUNBZ0lDQkZJRDBnVXpzS0lDQWdJSDBzSUhSb2FYTXVaMlYwUTJ4bFlYSkRiMnh2Y2lBOUlHWjFibU4wYVc5dUtGTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVeTVqYjNCNUtISmxMbWRsZEVOc1pXRnlRMjlzYjNJb0tTazdDaUFnSUNCOUxDQjBhR2x6TG5ObGRFTnNaV0Z5UTI5c2IzSWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCeVpTNXpaWFJEYkdWaGNrTnZiRzl5TG1Gd2NHeDVLSEpsTENCaGNtZDFiV1Z1ZEhNcE93b2dJQ0FnZlN3Z2RHaHBjeTVuWlhSRGJHVmhja0ZzY0doaElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsTG1kbGRFTnNaV0Z5UVd4d2FHRW9LVHNLSUNBZ0lIMHNJSFJvYVhNdWMyVjBRMnhsWVhKQmJIQm9ZU0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxMbk5sZEVOc1pXRnlRV3h3YUdFdVlYQndiSGtvY21Vc0lHRnlaM1Z0Wlc1MGN5azdDaUFnSUNCOUxDQjBhR2x6TG1Oc1pXRnlJRDBnWm5WdVkzUnBiMjRvVXl3Z1Rpd2dTQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnTURzS0lDQWdJQ0FnSUNBb1V5QTlQVDBnZG05cFpDQXdJSHg4SUZNcElDWW1JQ2g2SUh3OUlERTJNemcwS1N3Z0tFNGdQVDA5SUhadmFXUWdNQ0I4ZkNCT0tTQW1KaUFvZWlCOFBTQXlOVFlwTENBb1NDQTlQVDBnZG05cFpDQXdJSHg4SUVncElDWW1JQ2g2SUh3OUlERXdNalFwTENCWkxtTnNaV0Z5S0hvcE93b2dJQ0FnZlN3Z2RHaHBjeTVqYkdWaGNrTnZiRzl5SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1amJHVmhjaWdoTUN3Z0lURXNJQ0V4S1RzS0lDQWdJSDBzSUhSb2FYTXVZMnhsWVhKRVpYQjBhQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WTJ4bFlYSW9JVEVzSUNFd0xDQWhNU2s3Q2lBZ0lDQjlMQ0IwYUdsekxtTnNaV0Z5VTNSbGJtTnBiQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WTJ4bFlYSW9JVEVzSUNFeExDQWhNQ2s3Q2lBZ0lDQjlMQ0IwYUdsekxtUnBjM0J2YzJVZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0JsTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0luZGxZbWRzWTI5dWRHVjRkR3h2YzNRaUxDQkZaU3dnSVRFcExDQmxMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSW5kbFltZHNZMjl1ZEdWNGRISmxjM1J2Y21Wa0lpd2diV1VzSUNFeEtTd2dReTVrYVhOd2IzTmxLQ2tzSUZRdVpHbHpjRzl6WlNncExDQkhMbVJwYzNCdmMyVW9LU3dnU3k1a2FYTndiM05sS0Nrc0lIVmxMbVJwYzNCdmMyVW9LU3dnVkdVdVpHbHpjRzl6WlNncExDQlNMbVJwYzNCdmMyVW9LU3dnVUdVdVpHbHpjRzl6WlNncExDQlJMbVJwYzNCdmMyVW9LU3dnVVM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDSnpaWE56YVc5dWMzUmhjblFpTENCVmRDa3NJRkV1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnaWMyVnpjMmx2Ym1WdVpDSXNJRTkwS1N3Z1Z5QW1KaUFvVnk1a2FYTndiM05sS0Nrc0lGY2dQU0J1ZFd4c0tTd2dURzR1YzNSdmNDZ3BPd29nSUNBZ2ZUc0tJQ0FnSUdaMWJtTjBhVzl1SUVWbEtGTXBJSHNLSUNBZ0lDQWdJQ0JUTG5CeVpYWmxiblJFWldaaGRXeDBLQ2tzSUdOdmJuTnZiR1V1Ykc5bktDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJEYjI1MFpYaDBJRXh2YzNRdUlpa3NJSFlnUFNBaE1Ec0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRzFsS0NrZ2V3b2dJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lCRGIyNTBaWGgwSUZKbGMzUnZjbVZrTGlJcExDQjJJRDBnSVRFN0NpQWdJQ0FnSUNBZ2JHVjBJRk1nUFNCUFpTNWhkWFJ2VW1WelpYUXNJRTRnUFNBa0xtVnVZV0pzWldRc0lFZ2dQU0FrTG1GMWRHOVZjR1JoZEdVc0lIb2dQU0FrTG01bFpXUnpWWEJrWVhSbExDQnhJRDBnSkM1MGVYQmxPd29nSUNBZ0lDQWdJR1ZsS0Nrc0lFOWxMbUYxZEc5U1pYTmxkQ0E5SUZNc0lDUXVaVzVoWW14bFpDQTlJRTRzSUNRdVlYVjBiMVZ3WkdGMFpTQTlJRWdzSUNRdWJtVmxaSE5WY0dSaGRHVWdQU0I2TENBa0xuUjVjR1VnUFNCeE93b2dJQ0FnZlFvZ0lDQWdablZ1WTNScGIyNGdVbVVvVXlrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JPSUQwZ1V5NTBZWEpuWlhRN0NpQWdJQ0FnSUNBZ1RpNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0prYVhOd2IzTmxJaXdnVW1VcExDQnZaU2hPS1RzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHOWxLRk1wSUhzS0lDQWdJQ0FnSUNCTVpTaFRLU3dnUnk1eVpXMXZkbVVvVXlrN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQk1aU2hUS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRTRnUFNCSExtZGxkQ2hUS1M1d2NtOW5jbUZ0Y3pzS0lDQWdJQ0FnSUNCT0lDRTlQU0IyYjJsa0lEQWdKaVlnS0U0dVptOXlSV0ZqYUNobWRXNWpkR2x2YmloSUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUZCbExuSmxiR1ZoYzJWUWNtOW5jbUZ0S0VncE93b2dJQ0FnSUNBZ0lIMHBMQ0JUTG1selUyaGhaR1Z5VFdGMFpYSnBZV3dnSmlZZ1VHVXVjbVZzWldGelpWTm9ZV1JsY2tOaFkyaGxLRk1wS1RzS0lDQWdJSDBLSUNBZ0lIUm9hWE11Y21WdVpHVnlRblZtWm1WeVJHbHlaV04wSUQwZ1puVnVZM1JwYjI0b1V5d2dUaXdnU0N3Z2Vpd2djU3dnWW1VcElIc0tJQ0FnSUNBZ0lDQk9JRDA5UFNCdWRXeHNJQ1ltSUNoT0lEMGdabVVwT3dvZ0lDQWdJQ0FnSUd4bGRDQkJaU0E5SUhFdWFYTk5aWE5vSUNZbUlIRXViV0YwY21sNFYyOXliR1F1WkdWMFpYSnRhVzVoYm5Rb0tTQThJREFzSUVsbElEMGdiSFVvVXl3Z1Rpd2dTQ3dnZWl3Z2NTazdDaUFnSUNBZ0lDQWdlR1V1YzJWMFRXRjBaWEpwWVd3b2Vpd2dRV1VwT3dvZ0lDQWdJQ0FnSUd4bGRDQjNaU0E5SUVndWFXNWtaWGdzSUVobElEMGdTQzVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0FnSUdsbUlDaDNaU0E5UFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvU0dVZ1BUMDlJSFp2YVdRZ01DQjhmQ0JJWlM1amIzVnVkQ0E5UFQwZ01Da2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kMlV1WTI5MWJuUWdQVDA5SURBcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCc1pYUWdSR1VnUFNBeE93b2dJQ0FnSUNBZ0lIb3VkMmx5WldaeVlXMWxJRDA5UFNBaE1DQW1KaUFvZDJVZ1BTQlRaUzVuWlhSWGFYSmxabkpoYldWQmRIUnlhV0oxZEdVb1NDa3NJRVJsSUQwZ01pa3NJRkl1YzJWMGRYQW9jU3dnZWl3Z1NXVXNJRWdzSUhkbEtUc0tJQ0FnSUNBZ0lDQnNaWFFnZW1Vc0lHcGxJRDBnVFdVN0NpQWdJQ0FnSUNBZ2QyVWdJVDA5SUc1MWJHd2dKaVlnS0hwbElEMGdjMlV1WjJWMEtIZGxLU3dnYW1VZ1BTQjJaU3dnYW1VdWMyVjBTVzVrWlhnb2VtVXBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1VtNGdQU0IzWlNBaFBUMGdiblZzYkNBL0lIZGxMbU52ZFc1MElEb2dTR1V1WTI5MWJuUXNJR1ZwSUQwZ1NDNWtjbUYzVW1GdVoyVXVjM1JoY25RZ0tpQkVaU3dnUjJVZ1BTQklMbVJ5WVhkU1lXNW5aUzVqYjNWdWRDQXFJRVJsTENCSWRDQTlJR0psSUNFOVBTQnVkV3hzSUQ4Z1ltVXVjM1JoY25RZ0tpQkVaU0E2SURBc0lHRjBJRDBnWW1VZ0lUMDlJRzUxYkd3Z1B5QmlaUzVqYjNWdWRDQXFJRVJsSURvZ01TQXZJREFzSUd0MElEMGdUV0YwYUM1dFlYZ29aV2tzSUVoMEtTd2dSM0lnUFNCTllYUm9MbTFwYmloU2Jpd2daV2tnS3lCSFpTd2dTSFFnS3lCaGRDa2dMU0F4TENCSGRDQTlJRTFoZEdndWJXRjRLREFzSUVkeUlDMGdhM1FnS3lBeEtUc0tJQ0FnSUNBZ0lDQnBaaUFvUjNRZ0lUMDlJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hFdWFYTk5aWE5vS1NCNkxuZHBjbVZtY21GdFpTQTlQVDBnSVRBZ1B5QW9lR1V1YzJWMFRHbHVaVmRwWkhSb0tIb3VkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9JQ29nUW1Vb0tTa3NJR3BsTG5ObGRFMXZaR1VvTVNrcElEb2dhbVV1YzJWMFRXOWtaU2cwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9jUzVwYzB4cGJtVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCYWRDQTlJSG91YkdsdVpYZHBaSFJvT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnV25RZ1BUMDlJSFp2YVdRZ01DQW1KaUFvV25RZ1BTQXhLU3dnZUdVdWMyVjBUR2x1WlZkcFpIUm9LRnAwSUNvZ1FtVW9LU2tzSUhFdWFYTk1hVzVsVTJWbmJXVnVkSE1nUHlCcVpTNXpaWFJOYjJSbEtERXBJRG9nY1M1cGMweHBibVZNYjI5d0lEOGdhbVV1YzJWMFRXOWtaU2d5S1NBNklHcGxMbk5sZEUxdlpHVW9NeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCeExtbHpVRzlwYm5SeklEOGdhbVV1YzJWMFRXOWtaU2d3S1NBNklIRXVhWE5UY0hKcGRHVWdKaVlnYW1VdWMyVjBUVzlrWlNnMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIRXVhWE5KYm5OMFlXNWpaV1JOWlhOb0tTQnFaUzV5Wlc1a1pYSkpibk4wWVc1alpYTW9hM1FzSUVkMExDQnhMbU52ZFc1MEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvU0M1cGMwbHVjM1JoYm1ObFpFSjFabVpsY2tkbGIyMWxkSEo1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdXblFnUFNCTllYUm9MbTFwYmloSUxtbHVjM1JoYm1ObFEyOTFiblFzSUVndVgyMWhlRWx1YzNSaGJtTmxRMjkxYm5RcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FtVXVjbVZ1WkdWeVNXNXpkR0Z1WTJWektHdDBMQ0JIZEN3Z1duUXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYW1VdWNtVnVaR1Z5S0d0MExDQkhkQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dnZEdocGN5NWpiMjF3YVd4bElEMGdablZ1WTNScGIyNG9VeXdnVGlrZ2V3b2dJQ0FnSUNBZ0lHUWdQU0JVTG1kbGRDaFRLU3dnWkM1cGJtbDBLQ2tzSUcwdWNIVnphQ2hrS1N3Z1V5NTBjbUYyWlhKelpWWnBjMmxpYkdVb1puVnVZM1JwYjI0b1NDa2dld29nSUNBZ0lDQWdJQ0FnSUNCSUxtbHpUR2xuYUhRZ0ppWWdTQzVzWVhsbGNuTXVkR1Z6ZENoT0xteGhlV1Z5Y3lrZ0ppWWdLR1F1Y0hWemFFeHBaMmgwS0VncExDQklMbU5oYzNSVGFHRmtiM2NnSmlZZ1pDNXdkWE5vVTJoaFpHOTNLRWdwS1RzS0lDQWdJQ0FnSUNCOUtTd2daQzV6WlhSMWNFeHBaMmgwY3loNExuQm9lWE5wWTJGc2JIbERiM0p5WldOMFRHbG5hSFJ6S1N3Z1V5NTBjbUYyWlhKelpTaG1kVzVqZEdsdmJpaElLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0I2SUQwZ1NDNXRZWFJsY21saGJEc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIb3BJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSG9wS1NCbWIzSW9iR1YwSUhFZ1BTQXdPeUJ4SUR3Z2VpNXNaVzVuZEdnN0lIRXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ltVWdQU0I2VzNGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VHOG9ZbVVzSUZNc0lFZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2VHOG9laXdnVXl3Z1NDazdDaUFnSUNBZ0lDQWdmU2tzSUcwdWNHOXdLQ2tzSUdRZ1BTQnVkV3hzT3dvZ0lDQWdmVHNLSUNBZ0lHeGxkQ0JZWlNBOUlHNTFiR3c3Q2lBZ0lDQm1kVzVqZEdsdmJpQlhaU2hUS1NCN0NpQWdJQ0FnSUNBZ1dHVWdKaVlnV0dVb1V5azdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJWZENncElIc0tJQ0FnSUNBZ0lDQk1iaTV6ZEc5d0tDazdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJQZENncElIc0tJQ0FnSUNBZ0lDQk1iaTV6ZEdGeWRDZ3BPd29nSUNBZ2ZRb2dJQ0FnYkdWMElFeHVJRDBnYm1WM0lISm9Pd29nSUNBZ1RHNHVjMlYwUVc1cGJXRjBhVzl1VEc5dmNDaFhaU2tzSUhSNWNHVnZaaUIzYVc1a2IzY2dQQ0FpZFNJZ0ppWWdURzR1YzJWMFEyOXVkR1Y0ZENoM2FXNWtiM2NwTENCMGFHbHpMbk5sZEVGdWFXMWhkR2x2Ymt4dmIzQWdQU0JtZFc1amRHbHZiaWhUS1NCN0NpQWdJQ0FnSUNBZ1dHVWdQU0JUTENCUkxuTmxkRUZ1YVcxaGRHbHZia3h2YjNBb1V5a3NJRk1nUFQwOUlHNTFiR3dnUHlCTWJpNXpkRzl3S0NrZ09pQk1iaTV6ZEdGeWRDZ3BPd29nSUNBZ2ZTd2dVUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0p6WlhOemFXOXVjM1JoY25RaUxDQlZkQ2tzSUZFdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnaWMyVnpjMmx2Ym1WdVpDSXNJRTkwS1N3Z2RHaHBjeTV5Wlc1a1pYSWdQU0JtZFc1amRHbHZiaWhUTENCT0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0U0Z0lUMDlJSFp2YVdRZ01DQW1KaUJPTG1selEyRnRaWEpoSUNFOVBTQWhNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeUxuSmxibVJsY2pvZ1kyRnRaWEpoSUdseklHNXZkQ0JoYmlCcGJuTjBZVzVqWlNCdlppQlVTRkpGUlM1RFlXMWxjbUV1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0hZZ1BUMDlJQ0V3S1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnVXk1aGRYUnZWWEJrWVhSbElEMDlQU0FoTUNBbUppQlRMblZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLQ2tzSUU0dWNHRnlaVzUwSUQwOVBTQnVkV3hzSUNZbUlFNHVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9LU3dnVVM1bGJtRmliR1ZrSUQwOVBTQWhNQ0FtSmlCUkxtbHpVSEpsYzJWdWRHbHVaeUE5UFQwZ0lUQWdKaVlnS0ZFdVkyRnRaWEpoUVhWMGIxVndaR0YwWlNBOVBUMGdJVEFnSmlZZ1VTNTFjR1JoZEdWRFlXMWxjbUVvVGlrc0lFNGdQU0JSTG1kbGRFTmhiV1Z5WVNncEtTd2dVeTVwYzFOalpXNWxJRDA5UFNBaE1DQW1KaUJUTG05dVFtVm1iM0psVW1WdVpHVnlLSGdzSUZNc0lFNHNJRjhwTENCa0lEMGdWQzVuWlhRb1V5d2diUzVzWlc1bmRHZ3BMQ0JrTG1sdWFYUW9LU3dnYlM1d2RYTm9LR1FwTENCb1pTNXRkV3gwYVhCc2VVMWhkSEpwWTJWektFNHVjSEp2YW1WamRHbHZiazFoZEhKcGVDd2dUaTV0WVhSeWFYaFhiM0pzWkVsdWRtVnljMlVwTENCdVpTNXpaWFJHY205dFVISnZhbVZqZEdsdmJrMWhkSEpwZUNob1pTa3NJRllnUFNCMGFHbHpMbXh2WTJGc1EyeHBjSEJwYm1kRmJtRmliR1ZrTENCalpTQTlJRW91YVc1cGRDaDBhR2x6TG1Oc2FYQndhVzVuVUd4aGJtVnpMQ0JXTENCT0tTd2dkU0E5SUVNdVoyVjBLRk1zSUdZdWJHVnVaM1JvS1N3Z2RTNXBibWwwS0Nrc0lHWXVjSFZ6YUNoMUtTd2dVV0VvVXl3Z1Rpd2dNQ3dnZUM1emIzSjBUMkpxWldOMGN5a3NJSFV1Wm1sdWFYTm9LQ2tzSUhndWMyOXlkRTlpYW1WamRITWdQVDA5SUNFd0lDWW1JSFV1YzI5eWRDaDNMQ0JGS1N3Z1kyVWdQVDA5SUNFd0lDWW1JRW91WW1WbmFXNVRhR0ZrYjNkektDazdDaUFnSUNBZ0lDQWdiR1YwSUVnZ1BTQmtMbk4wWVhSbExuTm9ZV1J2ZDNOQmNuSmhlVHNLSUNBZ0lDQWdJQ0JwWmlBb0pDNXlaVzVrWlhJb1NDd2dVeXdnVGlrc0lHTmxJRDA5UFNBaE1DQW1KaUJLTG1WdVpGTm9ZV1J2ZDNNb0tTd2dkR2hwY3k1cGJtWnZMbUYxZEc5U1pYTmxkQ0E5UFQwZ0lUQWdKaVlnZEdocGN5NXBibVp2TG5KbGMyVjBLQ2tzSUhKbExuSmxibVJsY2loMUxDQlRLU3dnWkM1elpYUjFjRXhwWjJoMGN5aDRMbkJvZVhOcFkyRnNiSGxEYjNKeVpXTjBUR2xuYUhSektTd2dUaTVwYzBGeWNtRjVRMkZ0WlhKaEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnVGk1allXMWxjbUZ6T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIRWdQU0F3TENCaVpTQTlJSG91YkdWdVozUm9PeUJ4SUR3Z1ltVTdJSEVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdRV1VnUFNCNlczRmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTMkVvZFN3Z1V5d2dRV1VzSUVGbExuWnBaWGR3YjNKMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JMWVNoMUxDQlRMQ0JPS1RzS0lDQWdJQ0FnSUNCZklDRTlQU0J1ZFd4c0lDWW1JQ2hxTG5Wd1pHRjBaVTExYkhScGMyRnRjR3hsVW1WdVpHVnlWR0Z5WjJWMEtGOHBMQ0JxTG5Wd1pHRjBaVkpsYm1SbGNsUmhjbWRsZEUxcGNHMWhjQ2hmS1Nrc0lGTXVhWE5UWTJWdVpTQTlQVDBnSVRBZ0ppWWdVeTV2YmtGbWRHVnlVbVZ1WkdWeUtIZ3NJRk1zSUU0cExDQjRaUzVpZFdabVpYSnpMbVJsY0hSb0xuTmxkRlJsYzNRb0lUQXBMQ0I0WlM1aWRXWm1aWEp6TG1SbGNIUm9Mbk5sZEUxaGMyc29JVEFwTENCNFpTNWlkV1ptWlhKekxtTnZiRzl5TG5ObGRFMWhjMnNvSVRBcExDQjRaUzV6WlhSUWIyeDVaMjl1VDJabWMyVjBLQ0V4S1N3Z1VpNXlaWE5sZEVSbFptRjFiSFJUZEdGMFpTZ3BMQ0I1SUQwZ0xURXNJR0lnUFNCdWRXeHNMQ0J0TG5CdmNDZ3BMQ0J0TG14bGJtZDBhQ0ErSURBZ1B5QmtJRDBnYlZ0dExteGxibWQwYUNBdElERmRJRG9nWkNBOUlHNTFiR3dzSUdZdWNHOXdLQ2tzSUdZdWJHVnVaM1JvSUQ0Z01DQS9JSFVnUFNCbVcyWXViR1Z1WjNSb0lDMGdNVjBnT2lCMUlEMGdiblZzYkRzS0lDQWdJSDA3Q2lBZ0lDQm1kVzVqZEdsdmJpQlJZU2hUTENCT0xDQklMQ0I2S1NCN0NpQWdJQ0FnSUNBZ2FXWWdLRk11ZG1semFXSnNaU0E5UFQwZ0lURXBJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQnBaaUFvVXk1c1lYbGxjbk11ZEdWemRDaE9MbXhoZVdWeWN5a3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRk11YVhOSGNtOTFjQ2tnU0NBOUlGTXVjbVZ1WkdWeVQzSmtaWEk3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tGTXVhWE5NVDBRcElGTXVZWFYwYjFWd1pHRjBaU0E5UFQwZ0lUQWdKaVlnVXk1MWNHUmhkR1VvVGlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRk11YVhOTWFXZG9kQ2tnWkM1d2RYTm9UR2xuYUhRb1V5a3NJRk11WTJGemRGTm9ZV1J2ZHlBbUppQmtMbkIxYzJoVGFHRmtiM2NvVXlrN0NpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRk11YVhOVGNISnBkR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hVeTVtY25WemRIVnRRM1ZzYkdWa0lIeDhJRzVsTG1sdWRHVnljMlZqZEhOVGNISnBkR1VvVXlrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I2SUNZbUlHeGxMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloVExtMWhkSEpwZUZkdmNteGtLUzVoY0hCc2VVMWhkSEpwZURRb2FHVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkJaU0E5SUZSbExuVndaR0YwWlNoVEtTd2dTV1VnUFNCVExtMWhkR1Z5YVdGc093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWxsTG5acGMybGliR1VnSmlZZ2RTNXdkWE5vS0ZNc0lFRmxMQ0JKWlN3Z1NDd2diR1V1ZWl3Z2JuVnNiQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9LRk11YVhOTlpYTm9JSHg4SUZNdWFYTk1hVzVsSUh4OElGTXVhWE5RYjJsdWRITXBJQ1ltSUNoVExtbHpVMnRwYm01bFpFMWxjMmdnSmlZZ1V5NXphMlZzWlhSdmJpNW1jbUZ0WlNBaFBUMGdUMlV1Y21WdVpHVnlMbVp5WVcxbElDWW1JQ2hUTG5OclpXeGxkRzl1TG5Wd1pHRjBaU2dwTENCVExuTnJaV3hsZEc5dUxtWnlZVzFsSUQwZ1QyVXVjbVZ1WkdWeUxtWnlZVzFsS1N3Z0lWTXVabkoxYzNSMWJVTjFiR3hsWkNCOGZDQnVaUzVwYm5SbGNuTmxZM1J6VDJKcVpXTjBLRk1wS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VpQW1KaUJzWlM1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9VeTV0WVhSeWFYaFhiM0pzWkNrdVlYQndiSGxOWVhSeWFYZzBLR2hsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkJaU0E5SUZSbExuVndaR0YwWlNoVEtTd2dTV1VnUFNCVExtMWhkR1Z5YVdGc093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1NXVXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGRsSUQwZ1FXVXVaM0p2ZFhCek93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdTR1VnUFNBd0xDQkVaU0E5SUhkbExteGxibWQwYURzZ1NHVWdQQ0JFWlRzZ1NHVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNlpTQTlJSGRsVzBobFhTd2dhbVVnUFNCSlpWdDZaUzV0WVhSbGNtbGhiRWx1WkdWNFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FtVWdKaVlnYW1VdWRtbHphV0pzWlNBbUppQjFMbkIxYzJnb1V5d2dRV1VzSUdwbExDQklMQ0JzWlM1NkxDQjZaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUVsbExuWnBjMmxpYkdVZ0ppWWdkUzV3ZFhOb0tGTXNJRUZsTENCSlpTd2dTQ3dnYkdVdWVpd2diblZzYkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYkdWMElHSmxJRDBnVXk1amFHbHNaSEpsYmpzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVGbElEMGdNQ3dnU1dVZ1BTQmlaUzVzWlc1bmRHZzdJRUZsSUR3Z1NXVTdJRUZsS3lzcFVXRW9ZbVZiUVdWZExDQk9MQ0JJTENCNktUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJRXRoS0ZNc0lFNHNJRWdzSUhvcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY1NBOUlGTXViM0JoY1hWbExDQmlaU0E5SUZNdWRISmhibk50YVhOemFYWmxMQ0JCWlNBOUlGTXVkSEpoYm5Od1lYSmxiblE3Q2lBZ0lDQWdJQ0FnWkM1elpYUjFjRXhwWjJoMGMxWnBaWGNvU0Nrc0lHSmxMbXhsYm1kMGFDQStJREFnSmlZZ2IzVW9jU3dnVGl3Z1NDa3NJSG9nSmlZZ2VHVXVkbWxsZDNCdmNuUW9RUzVqYjNCNUtIb3BLU3dnY1M1c1pXNW5kR2dnUGlBd0lDWW1JR3R5S0hFc0lFNHNJRWdwTENCaVpTNXNaVzVuZEdnZ1BpQXdJQ1ltSUd0eUtHSmxMQ0JPTENCSUtTd2dRV1V1YkdWdVozUm9JRDRnTUNBbUppQnJjaWhCWlN3Z1Rpd2dTQ2s3Q2lBZ0lDQjlDaUFnSUNCbWRXNWpkR2x2YmlCdmRTaFRMQ0JPTENCSUtTQjdDaUFnSUNBZ0lDQWdhV1lnS0ZjZ1BUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFRmxJRDBnYnlBOVBUMGdJVEFnSmlZZ1oyVXVhWE5YWldKSFRESWdQVDA5SUNFd0lEOGdXSE1nT2lCQmREc0tJQ0FnSUNBZ0lDQWdJQ0FnVnlBOUlHNWxkeUJCWlNneE1ESTBMQ0F4TURJMExDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aVzVsY21GMFpVMXBjRzFoY0hNNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2RHVXVZMjl1ZG1WeWRDaHJiaWtnSVQwOUlHNTFiR3dnUHlCcmJpQTZJSEp1TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsdVJtbHNkR1Z5T2lCVmFTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhaMFpwYkhSbGNqb2djblFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzY21Gd1V6b2dkblFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzY21Gd1ZEb2dkblFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWU1pXNWtaWEpVYjFSbGVIUjFjbVU2SUhsbExtaGhjeWdpVjBWQ1IweGZiWFZzZEdsellXMXdiR1ZrWDNKbGJtUmxjbDkwYjE5MFpYaDBkWEpsSWlrS0lDQWdJQ0FnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnZUM1blpYUlNaVzVrWlhKVVlYSm5aWFFvS1RzS0lDQWdJQ0FnSUNCNExuTmxkRkpsYm1SbGNsUmhjbWRsZENoWEtTd2dlQzVqYkdWaGNpZ3BPd29nSUNBZ0lDQWdJR3hsZENCeElEMGdlQzUwYjI1bFRXRndjR2x1WnpzS0lDQWdJQ0FnSUNCNExuUnZibVZOWVhCd2FXNW5JRDBnWDI0c0lHdHlLRk1zSUU0c0lFZ3BMQ0I0TG5SdmJtVk5ZWEJ3YVc1bklEMGdjU3dnYWk1MWNHUmhkR1ZOZFd4MGFYTmhiWEJzWlZKbGJtUmxjbFJoY21kbGRDaFhLU3dnYWk1MWNHUmhkR1ZTWlc1a1pYSlVZWEpuWlhSTmFYQnRZWEFvVnlrc0lIZ3VjMlYwVW1WdVpHVnlWR0Z5WjJWMEtIb3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnYTNJb1V5d2dUaXdnU0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0I2SUQwZ1RpNXBjMU5qWlc1bElEMDlQU0FoTUNBL0lFNHViM1psY25KcFpHVk5ZWFJsY21saGJDQTZJRzUxYkd3N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCeElEMGdNQ3dnWW1VZ1BTQlRMbXhsYm1kMGFEc2djU0E4SUdKbE95QnhLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUVdVZ1BTQlRXM0ZkTENCSlpTQTlJRUZsTG05aWFtVmpkQ3dnZDJVZ1BTQkJaUzVuWlc5dFpYUnllU3dnU0dVZ1BTQjZJRDA5UFNCdWRXeHNJRDhnUVdVdWJXRjBaWEpwWVd3Z09pQjZMQ0JFWlNBOUlFRmxMbWR5YjNWd093b2dJQ0FnSUNBZ0lDQWdJQ0JKWlM1c1lYbGxjbk11ZEdWemRDaElMbXhoZVdWeWN5a2dKaVlnWVhVb1NXVXNJRTRzSUVnc0lIZGxMQ0JJWlN3Z1JHVXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdGMUtGTXNJRTRzSUVnc0lIb3NJSEVzSUdKbEtTQjdDaUFnSUNBZ0lDQWdVeTV2YmtKbFptOXlaVkpsYm1SbGNpaDRMQ0JPTENCSUxDQjZMQ0J4TENCaVpTa3NJRk11Ylc5a1pXeFdhV1YzVFdGMGNtbDRMbTExYkhScGNHeDVUV0YwY21salpYTW9TQzV0WVhSeWFYaFhiM0pzWkVsdWRtVnljMlVzSUZNdWJXRjBjbWw0VjI5eWJHUXBMQ0JUTG01dmNtMWhiRTFoZEhKcGVDNW5aWFJPYjNKdFlXeE5ZWFJ5YVhnb1V5NXRiMlJsYkZacFpYZE5ZWFJ5YVhncExDQnhMbTl1UW1WbWIzSmxVbVZ1WkdWeUtIZ3NJRTRzSUVnc0lIb3NJRk1zSUdKbEtTd2djUzUwY21GdWMzQmhjbVZ1ZENBOVBUMGdJVEFnSmlZZ2NTNXphV1JsSUQwOVBTQkRhU0EvSUNoeExuTnBaR1VnUFNCcGRDd2djUzV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0I0TG5KbGJtUmxja0oxWm1abGNrUnBjbVZqZENoSUxDQk9MQ0I2TENCeExDQlRMQ0JpWlNrc0lIRXVjMmxrWlNBOUlFRnBMQ0J4TG01bFpXUnpWWEJrWVhSbElEMGdJVEFzSUhndWNtVnVaR1Z5UW5WbVptVnlSR2x5WldOMEtFZ3NJRTRzSUhvc0lIRXNJRk1zSUdKbEtTd2djUzV6YVdSbElEMGdRMmtwSURvZ2VDNXlaVzVrWlhKQ2RXWm1aWEpFYVhKbFkzUW9TQ3dnVGl3Z2Vpd2djU3dnVXl3Z1ltVXBMQ0JUTG05dVFXWjBaWEpTWlc1a1pYSW9lQ3dnVGl3Z1NDd2dlaXdnY1N3Z1ltVXBPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZUc4b1V5d2dUaXdnU0NrZ2V3b2dJQ0FnSUNBZ0lFNHVhWE5UWTJWdVpTQWhQVDBnSVRBZ0ppWWdLRTRnUFNCbVpTazdDaUFnSUNBZ0lDQWdiR1YwSUhvZ1BTQkhMbWRsZENoVEtTd2djU0E5SUdRdWMzUmhkR1V1YkdsbmFIUnpMQ0JpWlNBOUlHUXVjM1JoZEdVdWMyaGhaRzkzYzBGeWNtRjVMQ0JCWlNBOUlIRXVjM1JoZEdVdWRtVnljMmx2Yml3Z1NXVWdQU0JRWlM1blpYUlFZWEpoYldWMFpYSnpLRk1zSUhFdWMzUmhkR1VzSUdKbExDQk9MQ0JJS1N3Z2QyVWdQU0JRWlM1blpYUlFjbTluY21GdFEyRmphR1ZMWlhrb1NXVXBMQ0JJWlNBOUlIb3VjSEp2WjNKaGJYTTdDaUFnSUNBZ0lDQWdlaTVsYm5acGNtOXViV1Z1ZENBOUlGTXVhWE5OWlhOb1UzUmhibVJoY21STllYUmxjbWxoYkNBL0lFNHVaVzUyYVhKdmJtMWxiblFnT2lCdWRXeHNMQ0I2TG1adlp5QTlJRTR1Wm05bkxDQjZMbVZ1ZGsxaGNDQTlJQ2hUTG1selRXVnphRk4wWVc1a1lYSmtUV0YwWlhKcFlXd2dQeUIxWlNBNklFc3BMbWRsZENoVExtVnVkazFoY0NCOGZDQjZMbVZ1ZG1seWIyNXRaVzUwS1N3Z1NHVWdQVDA5SUhadmFXUWdNQ0FtSmlBb1V5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmthWE53YjNObElpd2dVbVVwTENCSVpTQTlJRzVsZHlCTllYQXNJSG91Y0hKdlozSmhiWE1nUFNCSVpTazdDaUFnSUNBZ0lDQWdiR1YwSUVSbElEMGdTR1V1WjJWMEtIZGxLVHNLSUNBZ0lDQWdJQ0JwWmlBb1JHVWdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZWk1amRYSnlaVzUwVUhKdlozSmhiU0E5UFQwZ1JHVWdKaVlnZWk1c2FXZG9kSE5UZEdGMFpWWmxjbk5wYjI0Z1BUMDlJRUZsS1NCeVpYUjFjbTRnWld3b1V5d2dTV1VwTENCRVpUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1NXVXVkVzVwWm05eWJYTWdQU0JRWlM1blpYUlZibWxtYjNKdGN5aFRLU3dnVXk1dmJrSjFhV3hrS0Vnc0lFbGxMQ0I0S1N3Z1V5NXZia0psWm05eVpVTnZiWEJwYkdVb1NXVXNJSGdwTENCRVpTQTlJRkJsTG1GamNYVnBjbVZRY205bmNtRnRLRWxsTENCM1pTa3NJRWhsTG5ObGRDaDNaU3dnUkdVcExDQjZMblZ1YVdadmNtMXpJRDBnU1dVdWRXNXBabTl5YlhNN0NpQWdJQ0FnSUNBZ2JHVjBJSHBsSUQwZ2VpNTFibWxtYjNKdGN6c0tJQ0FnSUNBZ0lDQW9JVk11YVhOVGFHRmtaWEpOWVhSbGNtbGhiQ0FtSmlBaFV5NXBjMUpoZDFOb1lXUmxjazFoZEdWeWFXRnNJSHg4SUZNdVkyeHBjSEJwYm1jZ1BUMDlJQ0V3S1NBbUppQW9lbVV1WTJ4cGNIQnBibWRRYkdGdVpYTWdQU0JLTG5WdWFXWnZjbTBwTENCbGJDaFRMQ0JKWlNrc0lIb3VibVZsWkhOTWFXZG9kSE1nUFNCb2RTaFRLU3dnZWk1c2FXZG9kSE5UZEdGMFpWWmxjbk5wYjI0Z1BTQkJaU3dnZWk1dVpXVmtjMHhwWjJoMGN5QW1KaUFvZW1VdVlXMWlhV1Z1ZEV4cFoyaDBRMjlzYjNJdWRtRnNkV1VnUFNCeExuTjBZWFJsTG1GdFltbGxiblFzSUhwbExteHBaMmgwVUhKdlltVXVkbUZzZFdVZ1BTQnhMbk4wWVhSbExuQnliMkpsTENCNlpTNWthWEpsWTNScGIyNWhiRXhwWjJoMGN5NTJZV3gxWlNBOUlIRXVjM1JoZEdVdVpHbHlaV04wYVc5dVlXd3NJSHBsTG1ScGNtVmpkR2x2Ym1Gc1RHbG5hSFJUYUdGa2IzZHpMblpoYkhWbElEMGdjUzV6ZEdGMFpTNWthWEpsWTNScGIyNWhiRk5vWVdSdmR5d2dlbVV1YzNCdmRFeHBaMmgwY3k1MllXeDFaU0E5SUhFdWMzUmhkR1V1YzNCdmRDd2dlbVV1YzNCdmRFeHBaMmgwVTJoaFpHOTNjeTUyWVd4MVpTQTlJSEV1YzNSaGRHVXVjM0J2ZEZOb1lXUnZkeXdnZW1VdWNtVmpkRUZ5WldGTWFXZG9kSE11ZG1Gc2RXVWdQU0J4TG5OMFlYUmxMbkpsWTNSQmNtVmhMQ0I2WlM1c2RHTmZNUzUyWVd4MVpTQTlJSEV1YzNSaGRHVXVjbVZqZEVGeVpXRk1WRU14TENCNlpTNXNkR05mTWk1MllXeDFaU0E5SUhFdWMzUmhkR1V1Y21WamRFRnlaV0ZNVkVNeUxDQjZaUzV3YjJsdWRFeHBaMmgwY3k1MllXeDFaU0E5SUhFdWMzUmhkR1V1Y0c5cGJuUXNJSHBsTG5CdmFXNTBUR2xuYUhSVGFHRmtiM2R6TG5aaGJIVmxJRDBnY1M1emRHRjBaUzV3YjJsdWRGTm9ZV1J2ZHl3Z2VtVXVhR1Z0YVhOd2FHVnlaVXhwWjJoMGN5NTJZV3gxWlNBOUlIRXVjM1JoZEdVdWFHVnRhU3dnZW1VdVpHbHlaV04wYVc5dVlXeFRhR0ZrYjNkTllYQXVkbUZzZFdVZ1BTQnhMbk4wWVhSbExtUnBjbVZqZEdsdmJtRnNVMmhoWkc5M1RXRndMQ0I2WlM1a2FYSmxZM1JwYjI1aGJGTm9ZV1J2ZDAxaGRISnBlQzUyWVd4MVpTQTlJSEV1YzNSaGRHVXVaR2x5WldOMGFXOXVZV3hUYUdGa2IzZE5ZWFJ5YVhnc0lIcGxMbk53YjNSVGFHRmtiM2ROWVhBdWRtRnNkV1VnUFNCeExuTjBZWFJsTG5Od2IzUlRhR0ZrYjNkTllYQXNJSHBsTG5Od2IzUlRhR0ZrYjNkTllYUnlhWGd1ZG1Gc2RXVWdQU0J4TG5OMFlYUmxMbk53YjNSVGFHRmtiM2ROWVhSeWFYZ3NJSHBsTG5CdmFXNTBVMmhoWkc5M1RXRndMblpoYkhWbElEMGdjUzV6ZEdGMFpTNXdiMmx1ZEZOb1lXUnZkMDFoY0N3Z2VtVXVjRzlwYm5SVGFHRmtiM2ROWVhSeWFYZ3VkbUZzZFdVZ1BTQnhMbk4wWVhSbExuQnZhVzUwVTJoaFpHOTNUV0YwY21sNEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYW1VZ1BTQkVaUzVuWlhSVmJtbG1iM0p0Y3lncExDQlNiaUE5SUdKdUxuTmxjVmRwZEdoV1lXeDFaU2hxWlM1elpYRXNJSHBsS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZWk1amRYSnlaVzUwVUhKdlozSmhiU0E5SUVSbExDQjZMblZ1YVdadmNtMXpUR2x6ZENBOUlGSnVMQ0JFWlRzS0lDQWdJSDBLSUNBZ0lHWjFibU4wYVc5dUlHVnNLRk1zSUU0cElIc0tJQ0FnSUNBZ0lDQnNaWFFnU0NBOUlFY3VaMlYwS0ZNcE93b2dJQ0FnSUNBZ0lFZ3ViM1YwY0hWMFJXNWpiMlJwYm1jZ1BTQk9MbTkxZEhCMWRFVnVZMjlrYVc1bkxDQklMbWx1YzNSaGJtTnBibWNnUFNCT0xtbHVjM1JoYm1OcGJtY3NJRWd1YzJ0cGJtNXBibWNnUFNCT0xuTnJhVzV1YVc1bkxDQklMbTF2Y25Cb1ZHRnlaMlYwY3lBOUlFNHViVzl5Y0doVVlYSm5aWFJ6TENCSUxtMXZjbkJvVG05eWJXRnNjeUE5SUU0dWJXOXljR2hPYjNKdFlXeHpMQ0JJTG0xdmNuQm9WR0Z5WjJWMGMwTnZkVzUwSUQwZ1RpNXRiM0p3YUZSaGNtZGxkSE5EYjNWdWRDd2dTQzV1ZFcxRGJHbHdjR2x1WjFCc1lXNWxjeUE5SUU0dWJuVnRRMnhwY0hCcGJtZFFiR0Z1WlhNc0lFZ3ViblZ0U1c1MFpYSnpaV04wYVc5dUlEMGdUaTV1ZFcxRGJHbHdTVzUwWlhKelpXTjBhVzl1TENCSUxuWmxjblJsZUVGc2NHaGhjeUE5SUU0dWRtVnlkR1Y0UVd4d2FHRnpMQ0JJTG5abGNuUmxlRlJoYm1kbGJuUnpJRDBnVGk1MlpYSjBaWGhVWVc1blpXNTBjeXdnU0M1MGIyNWxUV0Z3Y0dsdVp5QTlJRTR1ZEc5dVpVMWhjSEJwYm1jN0NpQWdJQ0I5Q2lBZ0lDQm1kVzVqZEdsdmJpQnNkU2hUTENCT0xDQklMQ0I2TENCeEtTQjdDaUFnSUNBZ0lDQWdUaTVwYzFOalpXNWxJQ0U5UFNBaE1DQW1KaUFvVGlBOUlHWmxLU3dnYWk1eVpYTmxkRlJsZUhSMWNtVlZibWwwY3lncE93b2dJQ0FnSUNBZ0lHeGxkQ0JpWlNBOUlFNHVabTluTENCQlpTQTlJSG91YVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJDQS9JRTR1Wlc1MmFYSnZibTFsYm5RZ09pQnVkV3hzTENCSlpTQTlJRjhnUFQwOUlHNTFiR3dnUHlCNExtOTFkSEIxZEVWdVkyOWthVzVuSURvZ1h5NTBaWGgwZFhKbExtVnVZMjlrYVc1bkxDQjNaU0E5SUNoNkxtbHpUV1Z6YUZOMFlXNWtZWEprVFdGMFpYSnBZV3dnUHlCMVpTQTZJRXNwTG1kbGRDaDZMbVZ1ZGsxaGNDQjhmQ0JCWlNrc0lFaGxJRDBnZWk1MlpYSjBaWGhEYjJ4dmNuTWdQVDA5SUNFd0lDWW1JQ0VoU0M1aGRIUnlhV0oxZEdWekxtTnZiRzl5SUNZbUlFZ3VZWFIwY21saWRYUmxjeTVqYjJ4dmNpNXBkR1Z0VTJsNlpTQTlQVDBnTkN3Z1JHVWdQU0FoSVhvdWJtOXliV0ZzVFdGd0lDWW1JQ0VoU0M1aGRIUnlhV0oxZEdWekxuUmhibWRsYm5Rc0lIcGxJRDBnSVNGSUxtMXZjbkJvUVhSMGNtbGlkWFJsY3k1d2IzTnBkR2x2Yml3Z2FtVWdQU0FoSVVndWJXOXljR2hCZEhSeWFXSjFkR1Z6TG01dmNtMWhiQ3dnVW00Z1BTQklMbTF2Y25Cb1FYUjBjbWxpZFhSbGN5NXdiM05wZEdsdmJpQS9JRWd1Ylc5eWNHaEJkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVMbXhsYm1kMGFDQTZJREFzSUdWcElEMGdlaTUwYjI1bFRXRndjR1ZrSUQ4Z2VDNTBiMjVsVFdGd2NHbHVaeUE2SUY5dUxDQkhaU0E5SUVjdVoyVjBLSG9wTENCSWRDQTlJR1F1YzNSaGRHVXViR2xuYUhSek93b2dJQ0FnSUNBZ0lHbG1JQ2hqWlNBOVBUMGdJVEFnSmlZZ0tGWWdQVDA5SUNFd0lIeDhJRk1nSVQwOUlHSXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JRZENBOUlGTWdQVDA5SUdJZ0ppWWdlaTVwWkNBOVBUMGdlVHNLSUNBZ0lDQWdJQ0FnSUNBZ1NpNXpaWFJUZEdGMFpTaDZMQ0JUTENCUWRDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCaGRDQTlJQ0V4T3dvZ0lDQWdJQ0FnSUhvdWRtVnljMmx2YmlBOVBUMGdSMlV1WDE5MlpYSnphVzl1SUQ4Z0tFZGxMbTVsWldSelRHbG5hSFJ6SUNZbUlFZGxMbXhwWjJoMGMxTjBZWFJsVm1WeWMybHZiaUFoUFQwZ1NIUXVjM1JoZEdVdWRtVnljMmx2YmlCOGZDQkhaUzV2ZFhSd2RYUkZibU52WkdsdVp5QWhQVDBnU1dVZ2ZId2djUzVwYzBsdWMzUmhibU5sWkUxbGMyZ2dKaVlnUjJVdWFXNXpkR0Z1WTJsdVp5QTlQVDBnSVRFZ2ZId2dJWEV1YVhOSmJuTjBZVzVqWldSTlpYTm9JQ1ltSUVkbExtbHVjM1JoYm1OcGJtY2dQVDA5SUNFd0lIeDhJSEV1YVhOVGEybHVibVZrVFdWemFDQW1KaUJIWlM1emEybHVibWx1WnlBOVBUMGdJVEVnZkh3Z0lYRXVhWE5UYTJsdWJtVmtUV1Z6YUNBbUppQkhaUzV6YTJsdWJtbHVaeUE5UFQwZ0lUQWdmSHdnUjJVdVpXNTJUV0Z3SUNFOVBTQjNaU0I4ZkNCNkxtWnZaeUFtSmlCSFpTNW1iMmNnSVQwOUlHSmxJSHg4SUVkbExtNTFiVU5zYVhCd2FXNW5VR3hoYm1WeklDRTlQU0IyYjJsa0lEQWdKaVlnS0VkbExtNTFiVU5zYVhCd2FXNW5VR3hoYm1WeklDRTlQU0JLTG01MWJWQnNZVzVsY3lCOGZDQkhaUzV1ZFcxSmJuUmxjbk5sWTNScGIyNGdJVDA5SUVvdWJuVnRTVzUwWlhKelpXTjBhVzl1S1NCOGZDQkhaUzUyWlhKMFpYaEJiSEJvWVhNZ0lUMDlJRWhsSUh4OElFZGxMblpsY25SbGVGUmhibWRsYm5SeklDRTlQU0JFWlNCOGZDQkhaUzV0YjNKd2FGUmhjbWRsZEhNZ0lUMDlJSHBsSUh4OElFZGxMbTF2Y25Cb1RtOXliV0ZzY3lBaFBUMGdhbVVnZkh3Z1IyVXVkRzl1WlUxaGNIQnBibWNnSVQwOUlHVnBJSHg4SUdkbExtbHpWMlZpUjB3eUlEMDlQU0FoTUNBbUppQkhaUzV0YjNKd2FGUmhjbWRsZEhORGIzVnVkQ0FoUFQwZ1VtNHBJQ1ltSUNoaGRDQTlJQ0V3S1NBNklDaGhkQ0E5SUNFd0xDQkhaUzVmWDNabGNuTnBiMjRnUFNCNkxuWmxjbk5wYjI0cE93b2dJQ0FnSUNBZ0lHeGxkQ0JyZENBOUlFZGxMbU4xY25KbGJuUlFjbTluY21GdE93b2dJQ0FnSUNBZ0lHRjBJRDA5UFNBaE1DQW1KaUFvYTNRZ1BTQjRieWg2TENCT0xDQnhLU2s3Q2lBZ0lDQWdJQ0FnYkdWMElFZHlJRDBnSVRFc0lFZDBJRDBnSVRFc0lGcDBJRDBnSVRFc0lIaDBJRDBnYTNRdVoyVjBWVzVwWm05eWJYTW9LU3dnV0drZ1BTQkhaUzUxYm1sbWIzSnRjenNLSUNBZ0lDQWdJQ0JwWmlBb2VHVXVkWE5sVUhKdlozSmhiU2hyZEM1d2NtOW5jbUZ0S1NBbUppQW9SM0lnUFNBaE1Dd2dSM1FnUFNBaE1Dd2dXblFnUFNBaE1Da3NJSG91YVdRZ0lUMDlJSGtnSmlZZ0tIa2dQU0I2TG1sa0xDQkhkQ0E5SUNFd0tTd2dSM0lnZkh3Z1lpQWhQVDBnVXlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2VIUXVjMlYwVm1Gc2RXVW9XU3dnSW5CeWIycGxZM1JwYjI1TllYUnlhWGdpTENCVExuQnliMnBsWTNScGIyNU5ZWFJ5YVhncExDQm5aUzVzYjJkaGNtbDBhRzFwWTBSbGNIUm9RblZtWm1WeUlDWW1JSGgwTG5ObGRGWmhiSFZsS0Zrc0lDSnNiMmRFWlhCMGFFSjFaa1pESWl3Z01pQXZJQ2hOWVhSb0xteHZaeWhUTG1aaGNpQXJJREVwSUM4Z1RXRjBhQzVNVGpJcEtTd2dZaUFoUFQwZ1V5QW1KaUFvWWlBOUlGTXNJRWQwSUQwZ0lUQXNJRnAwSUQwZ0lUQXBMQ0I2TG1selUyaGhaR1Z5VFdGMFpYSnBZV3dnZkh3Z2VpNXBjMDFsYzJoUWFHOXVaMDFoZEdWeWFXRnNJSHg4SUhvdWFYTk5aWE5vVkc5dmJrMWhkR1Z5YVdGc0lIeDhJSG91YVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJDQjhmQ0I2TG1WdWRrMWhjQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGQjBJRDBnZUhRdWJXRndMbU5oYldWeVlWQnZjMmwwYVc5dU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VIUWdJVDA5SUhadmFXUWdNQ0FtSmlCUWRDNXpaWFJXWVd4MVpTaFpMQ0JzWlM1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9VeTV0WVhSeWFYaFhiM0pzWkNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDaDZMbWx6VFdWemFGQm9iMjVuVFdGMFpYSnBZV3dnZkh3Z2VpNXBjMDFsYzJoVWIyOXVUV0YwWlhKcFlXd2dmSHdnZWk1cGMwMWxjMmhNWVcxaVpYSjBUV0YwWlhKcFlXd2dmSHdnZWk1cGMwMWxjMmhDWVhOcFkwMWhkR1Z5YVdGc0lIeDhJSG91YVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJDQjhmQ0I2TG1selUyaGhaR1Z5VFdGMFpYSnBZV3dwSUNZbUlIaDBMbk5sZEZaaGJIVmxLRmtzSUNKcGMwOXlkR2h2WjNKaGNHaHBZeUlzSUZNdWFYTlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRWdQVDA5SUNFd0tTd2dLSG91YVhOTlpYTm9VR2h2Ym1kTllYUmxjbWxoYkNCOGZDQjZMbWx6VFdWemFGUnZiMjVOWVhSbGNtbGhiQ0I4ZkNCNkxtbHpUV1Z6YUV4aGJXSmxjblJOWVhSbGNtbGhiQ0I4ZkNCNkxtbHpUV1Z6YUVKaGMybGpUV0YwWlhKcFlXd2dmSHdnZWk1cGMwMWxjMmhUZEdGdVpHRnlaRTFoZEdWeWFXRnNJSHg4SUhvdWFYTlRhR0ZrWlhKTllYUmxjbWxoYkNCOGZDQjZMbWx6VTJoaFpHOTNUV0YwWlhKcFlXd2dmSHdnY1M1cGMxTnJhVzV1WldSTlpYTm9LU0FtSmlCNGRDNXpaWFJXWVd4MVpTaFpMQ0FpZG1sbGQwMWhkSEpwZUNJc0lGTXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tIRXVhWE5UYTJsdWJtVmtUV1Z6YUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0I0ZEM1elpYUlBjSFJwYjI1aGJDaFpMQ0J4TENBaVltbHVaRTFoZEhKcGVDSXBMQ0I0ZEM1elpYUlBjSFJwYjI1aGJDaFpMQ0J4TENBaVltbHVaRTFoZEhKcGVFbHVkbVZ5YzJVaUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGQjBJRDBnY1M1emEyVnNaWFJ2YmpzS0lDQWdJQ0FnSUNBZ0lDQWdVSFFnSmlZZ0tHZGxMbVpzYjJGMFZtVnlkR1Y0VkdWNGRIVnlaWE1nUHlBb1VIUXVZbTl1WlZSbGVIUjFjbVVnUFQwOUlHNTFiR3dnSmlZZ1VIUXVZMjl0Y0hWMFpVSnZibVZVWlhoMGRYSmxLQ2tzSUhoMExuTmxkRlpoYkhWbEtGa3NJQ0ppYjI1bFZHVjRkSFZ5WlNJc0lGQjBMbUp2Ym1WVVpYaDBkWEpsTENCcUtTd2dlSFF1YzJWMFZtRnNkV1VvV1N3Z0ltSnZibVZVWlhoMGRYSmxVMmw2WlNJc0lGQjBMbUp2Ym1WVVpYaDBkWEpsVTJsNlpTa3BJRG9nZUhRdWMyVjBUM0IwYVc5dVlXd29XU3dnVUhRc0lDSmliMjVsVFdGMGNtbGpaWE1pS1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlBaElVZ2dKaVlnS0VndWJXOXljR2hCZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1SUNFOVBTQjJiMmxrSURBZ2ZId2dTQzV0YjNKd2FFRjBkSEpwWW5WMFpYTXVibTl5YldGc0lDRTlQU0IyYjJsa0lEQXBJQ1ltSUZvdWRYQmtZWFJsS0hFc0lFZ3NJSG9zSUd0MEtTd2dLRWQwSUh4OElFZGxMbkpsWTJWcGRtVlRhR0ZrYjNjZ0lUMDlJSEV1Y21WalpXbDJaVk5vWVdSdmR5a2dKaVlnS0VkbExuSmxZMlZwZG1WVGFHRmtiM2NnUFNCeExuSmxZMlZwZG1WVGFHRmtiM2NzSUhoMExuTmxkRlpoYkhWbEtGa3NJQ0p5WldObGFYWmxVMmhoWkc5M0lpd2djUzV5WldObGFYWmxVMmhoWkc5M0tTa3NJRWQwSUNZbUlDaDRkQzV6WlhSV1lXeDFaU2haTENBaWRHOXVaVTFoY0hCcGJtZEZlSEJ2YzNWeVpTSXNJSGd1ZEc5dVpVMWhjSEJwYm1kRmVIQnZjM1Z5WlNrc0lFZGxMbTVsWldSelRHbG5hSFJ6SUNZbUlHTjFLRmhwTENCYWRDa3NJR0psSUNZbUlIb3VabTluSUNZbUlGbGxMbkpsWm5KbGMyaEdiMmRWYm1sbWIzSnRjeWhZYVN3Z1ltVXBMQ0JaWlM1eVpXWnlaWE5vVFdGMFpYSnBZV3hWYm1sbWIzSnRjeWhZYVN3Z2Vpd2dVQ3dnUWl3Z1Z5a3NJR0p1TG5Wd2JHOWhaQ2haTENCSFpTNTFibWxtYjNKdGMweHBjM1FzSUZocExDQnFLU2tzSUhvdWFYTlRhR0ZrWlhKTllYUmxjbWxoYkNBbUppQjZMblZ1YVdadmNtMXpUbVZsWkZWd1pHRjBaU0E5UFQwZ0lUQWdKaVlnS0dKdUxuVndiRzloWkNoWkxDQkhaUzUxYm1sbWIzSnRjMHhwYzNRc0lGaHBMQ0JxS1N3Z2VpNTFibWxtYjNKdGMwNWxaV1JWY0dSaGRHVWdQU0FoTVNrc0lIb3VhWE5UY0hKcGRHVk5ZWFJsY21saGJDQW1KaUI0ZEM1elpYUldZV3gxWlNoWkxDQWlZMlZ1ZEdWeUlpd2djUzVqWlc1MFpYSXBMQ0I0ZEM1elpYUldZV3gxWlNoWkxDQWliVzlrWld4V2FXVjNUV0YwY21sNElpd2djUzV0YjJSbGJGWnBaWGROWVhSeWFYZ3BMQ0I0ZEM1elpYUldZV3gxWlNoWkxDQWlibTl5YldGc1RXRjBjbWw0SWl3Z2NTNXViM0p0WVd4TllYUnlhWGdwTENCNGRDNXpaWFJXWVd4MVpTaFpMQ0FpYlc5a1pXeE5ZWFJ5YVhnaUxDQnhMbTFoZEhKcGVGZHZjbXhrS1N3Z2EzUTdDaUFnSUNCOUNpQWdJQ0JtZFc1amRHbHZiaUJqZFNoVExDQk9LU0I3Q2lBZ0lDQWdJQ0FnVXk1aGJXSnBaVzUwVEdsbmFIUkRiMnh2Y2k1dVpXVmtjMVZ3WkdGMFpTQTlJRTRzSUZNdWJHbG5hSFJRY205aVpTNXVaV1ZrYzFWd1pHRjBaU0E5SUU0c0lGTXVaR2x5WldOMGFXOXVZV3hNYVdkb2RITXVibVZsWkhOVmNHUmhkR1VnUFNCT0xDQlRMbVJwY21WamRHbHZibUZzVEdsbmFIUlRhR0ZrYjNkekxtNWxaV1J6VlhCa1lYUmxJRDBnVGl3Z1V5NXdiMmx1ZEV4cFoyaDBjeTV1WldWa2MxVndaR0YwWlNBOUlFNHNJRk11Y0c5cGJuUk1hV2RvZEZOb1lXUnZkM011Ym1WbFpITlZjR1JoZEdVZ1BTQk9MQ0JUTG5Od2IzUk1hV2RvZEhNdWJtVmxaSE5WY0dSaGRHVWdQU0JPTENCVExuTndiM1JNYVdkb2RGTm9ZV1J2ZDNNdWJtVmxaSE5WY0dSaGRHVWdQU0JPTENCVExuSmxZM1JCY21WaFRHbG5hSFJ6TG01bFpXUnpWWEJrWVhSbElEMGdUaXdnVXk1b1pXMXBjM0JvWlhKbFRHbG5hSFJ6TG01bFpXUnpWWEJrWVhSbElEMGdUanNLSUNBZ0lIMEtJQ0FnSUdaMWJtTjBhVzl1SUdoMUtGTXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVeTVwYzAxbGMyaE1ZVzFpWlhKMFRXRjBaWEpwWVd3Z2ZId2dVeTVwYzAxbGMyaFViMjl1VFdGMFpYSnBZV3dnZkh3Z1V5NXBjMDFsYzJoUWFHOXVaMDFoZEdWeWFXRnNJSHg4SUZNdWFYTk5aWE5vVTNSaGJtUmhjbVJOWVhSbGNtbGhiQ0I4ZkNCVExtbHpVMmhoWkc5M1RXRjBaWEpwWVd3Z2ZId2dVeTVwYzFOb1lXUmxjazFoZEdWeWFXRnNJQ1ltSUZNdWJHbG5hSFJ6SUQwOVBTQWhNRHNLSUNBZ0lIMEtJQ0FnSUhSb2FYTXVaMlYwUVdOMGFYWmxRM1ZpWlVaaFkyVWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWnpzS0lDQWdJSDBzSUhSb2FYTXVaMlYwUVdOMGFYWmxUV2x3YldGd1RHVjJaV3dnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2NEc0tJQ0FnSUgwc0lIUm9hWE11WjJWMFVtVnVaR1Z5VkdGeVoyVjBJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY4N0NpQWdJQ0I5TENCMGFHbHpMbk5sZEZKbGJtUmxjbFJoY21kbGRGUmxlSFIxY21WeklEMGdablZ1WTNScGIyNG9VeXdnVGl3Z1NDa2dld29nSUNBZ0lDQWdJRWN1WjJWMEtGTXVkR1Y0ZEhWeVpTa3VYMTkzWldKbmJGUmxlSFIxY21VZ1BTQk9MQ0JITG1kbGRDaFRMbVJsY0hSb1ZHVjRkSFZ5WlNrdVgxOTNaV0puYkZSbGVIUjFjbVVnUFNCSU93b2dJQ0FnSUNBZ0lHeGxkQ0I2SUQwZ1J5NW5aWFFvVXlrN0NpQWdJQ0FnSUNBZ2VpNWZYMmhoYzBWNGRHVnlibUZzVkdWNGRIVnlaWE1nUFNBaE1Dd2dlaTVmWDJoaGMwVjRkR1Z5Ym1Gc1ZHVjRkSFZ5WlhNZ0ppWWdLSG91WDE5aGRYUnZRV3hzYjJOaGRHVkVaWEIwYUVKMVptWmxjaUE5SUVnZ1BUMDlJSFp2YVdRZ01Dd2dlaTVmWDJGMWRHOUJiR3h2WTJGMFpVUmxjSFJvUW5WbVptVnlJSHg4SUZNdWRYTmxVbVZ1WkdWeVZHOVVaWGgwZFhKbElDWW1JQ2hqYjI1emIyeGxMbmRoY200b0luSmxibVJsY2kxMGJ5MTBaWGgwZFhKbElHVjRkR1Z1YzJsdmJpQjNZWE1nWkdsellXSnNaV1FnWW1WallYVnpaU0JoYmlCbGVIUmxjbTVoYkNCMFpYaDBkWEpsSUhkaGN5QndjbTkyYVdSbFpDSXBMQ0JUTG5WelpWSmxibVJsY2xSdlZHVjRkSFZ5WlNBOUlDRXhMQ0JUTG5WelpWSmxibVJsY21KMVptWmxjaUE5SUNFd0tTazdDaUFnSUNCOUxDQjBhR2x6TG5ObGRGSmxibVJsY2xSaGNtZGxkRVp5WVcxbFluVm1abVZ5SUQwZ1puVnVZM1JwYjI0b1V5d2dUaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQklJRDBnUnk1blpYUW9VeWs3Q2lBZ0lDQWdJQ0FnU0M1ZlgzZGxZbWRzUm5KaGJXVmlkV1ptWlhJZ1BTQk9MQ0JJTGw5ZmRYTmxSR1ZtWVhWc2RFWnlZVzFsWW5WbVptVnlJRDBnVGlBOVBUMGdkbTlwWkNBd093b2dJQ0FnZlN3Z2RHaHBjeTV6WlhSU1pXNWtaWEpVWVhKblpYUWdQU0JtZFc1amRHbHZiaWhUTENCT0lEMGdNQ3dnU0NBOUlEQXBJSHNLSUNBZ0lDQWdJQ0JmSUQwZ1V5d2daeUE5SUU0c0lIQWdQU0JJT3dvZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnSVRBN0NpQWdJQ0FnSUNBZ2FXWWdLRk1wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhkbElEMGdSeTVuWlhRb1V5azdDaUFnSUNBZ0lDQWdJQ0FnSUhkbExsOWZkWE5sUkdWbVlYVnNkRVp5WVcxbFluVm1abVZ5SUNFOVBTQjJiMmxrSURBZ1B5QW9lR1V1WW1sdVpFWnlZVzFsWW5WbVptVnlLRE0yTVRZd0xDQnVkV3hzS1N3Z2VpQTlJQ0V4S1NBNklIZGxMbDlmZDJWaVoyeEdjbUZ0WldKMVptWmxjaUE5UFQwZ2RtOXBaQ0F3SUQ4Z2FpNXpaWFIxY0ZKbGJtUmxjbFJoY21kbGRDaFRLU0E2SUhkbExsOWZhR0Z6UlhoMFpYSnVZV3hVWlhoMGRYSmxjeUFtSmlCcUxuSmxZbWx1WkZSbGVIUjFjbVZ6S0ZNc0lFY3VaMlYwS0ZNdWRHVjRkSFZ5WlNrdVgxOTNaV0puYkZSbGVIUjFjbVVzSUVjdVoyVjBLRk11WkdWd2RHaFVaWGgwZFhKbEtTNWZYM2RsWW1kc1ZHVjRkSFZ5WlNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0J4SUQwZ2JuVnNiQ3dnWW1VZ1BTQWhNU3dnUVdVZ1BTQWhNVHNLSUNBZ0lDQWdJQ0JwWmlBb1V5a2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkMlVnUFNCVExuUmxlSFIxY21VN0NpQWdJQ0FnSUNBZ0lDQWdJQ2gzWlM1cGMwUmhkR0ZVWlhoMGRYSmxNMFFnZkh3Z2QyVXVhWE5FWVhSaFZHVjRkSFZ5WlRKRVFYSnlZWGtwSUNZbUlDaEJaU0E5SUNFd0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFaGxJRDBnUnk1blpYUW9VeWt1WDE5M1pXSm5iRVp5WVcxbFluVm1abVZ5T3dvZ0lDQWdJQ0FnSUNBZ0lDQlRMbWx6VjJWaVIweERkV0psVW1WdVpHVnlWR0Z5WjJWMElEOGdLSEVnUFNCSVpWdE9YU3dnWW1VZ1BTQWhNQ2tnT2lCVExuVnpaVkpsYm1SbGNtSjFabVpsY2lBL0lIRWdQU0JITG1kbGRDaFRLUzVmWDNkbFltZHNUWFZzZEdsellXMXdiR1ZrUm5KaGJXVmlkV1ptWlhJZ09pQnhJRDBnU0dVc0lFRXVZMjl3ZVNoVExuWnBaWGR3YjNKMEtTd2dUQzVqYjNCNUtGTXVjMk5wYzNOdmNpa3NJRWtnUFNCVExuTmphWE56YjNKVVpYTjBPd29nSUNBZ0lDQWdJSDBnWld4elpTQkJMbU52Y0hrb1JDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb1VDa3VabXh2YjNJb0tTd2dUQzVqYjNCNUtGVXBMbTExYkhScGNHeDVVMk5oYkdGeUtGQXBMbVpzYjI5eUtDa3NJRWtnUFNCR093b2dJQ0FnSUNBZ0lHbG1JQ2g0WlM1aWFXNWtSbkpoYldWaWRXWm1aWElvTXpZeE5qQXNJSEVwSUNZbUlHZGxMbVJ5WVhkQ2RXWm1aWEp6SUNZbUlIb3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGRsSUQwZ0lURTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaFRLU0JwWmlBb1V5NXBjMWRsWWtkTVRYVnNkR2x3YkdWU1pXNWtaWEpVWVhKblpYUnpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1NHVWdQU0JUTG5SbGVIUjFjbVU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1R5NXNaVzVuZEdnZ0lUMDlJRWhsTG14bGJtZDBhQ0I4ZkNCUFd6QmRJQ0U5UFNBek5qQTJOQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1JHVWdQU0F3TENCNlpTQTlJRWhsTG14bGJtZDBhRHNnUkdVZ1BDQjZaVHNnUkdVckt5bFBXMFJsWFNBOUlETTJNRFkwSUNzZ1JHVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVHk1c1pXNW5kR2dnUFNCSVpTNXNaVzVuZEdnc0lIZGxJRDBnSVRBN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQW9UeTVzWlc1bmRHZ2dJVDA5SURFZ2ZId2dUMXN3WFNBaFBUMGdNell3TmpRcElDWW1JQ2hQV3pCZElEMGdNell3TmpRc0lFOHViR1Z1WjNSb0lEMGdNU3dnZDJVZ1BTQWhNQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnS0U4dWJHVnVaM1JvSUNFOVBTQXhJSHg4SUU5Yk1GMGdJVDA5SURFd01qa3BJQ1ltSUNoUFd6QmRJRDBnTVRBeU9Td2dUeTVzWlc1bmRHZ2dQU0F4TENCM1pTQTlJQ0V3S1RzS0lDQWdJQ0FnSUNBZ0lDQWdkMlVnSmlZZ0tHZGxMbWx6VjJWaVIwd3lJRDhnV1M1a2NtRjNRblZtWm1WeWN5aFBLU0E2SUhsbExtZGxkQ2dpVjBWQ1IweGZaSEpoZDE5aWRXWm1aWEp6SWlrdVpISmhkMEoxWm1abGNuTlhSVUpIVENoUEtTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoNFpTNTJhV1YzY0c5eWRDaEJLU3dnZUdVdWMyTnBjM052Y2loTUtTd2dlR1V1YzJWMFUyTnBjM052Y2xSbGMzUW9TU2tzSUdKbEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjNaU0E5SUVjdVoyVjBLRk11ZEdWNGRIVnlaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lGa3VabkpoYldWaWRXWm1aWEpVWlhoMGRYSmxNa1FvTXpZeE5qQXNJRE0yTURZMExDQXpOREEyT1NBcklFNHNJSGRsTGw5ZmQyVmlaMnhVWlhoMGRYSmxMQ0JJS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tFRmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IzWlNBOUlFY3VaMlYwS0ZNdWRHVjRkSFZ5WlNrc0lFaGxJRDBnVGlCOGZDQXdPd29nSUNBZ0lDQWdJQ0FnSUNCWkxtWnlZVzFsWW5WbVptVnlWR1Y0ZEhWeVpVeGhlV1Z5S0RNMk1UWXdMQ0F6TmpBMk5Dd2dkMlV1WDE5M1pXSm5iRlJsZUhSMWNtVXNJRWdnZkh3Z01Dd2dTR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCNUlEMGdMVEU3Q2lBZ0lDQjlMQ0IwYUdsekxuSmxZV1JTWlc1a1pYSlVZWEpuWlhSUWFYaGxiSE1nUFNCbWRXNWpkR2x2YmloVExDQk9MQ0JJTENCNkxDQnhMQ0JpWlN3Z1FXVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb0lTaFRJQ1ltSUZNdWFYTlhaV0pIVEZKbGJtUmxjbFJoY21kbGRDa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2k1eVpXRmtVbVZ1WkdWeVZHRnlaMlYwVUdsNFpXeHpPaUJ5Wlc1a1pYSlVZWEpuWlhRZ2FYTWdibTkwSUZSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5VkdGeVoyVjBMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JKWlNBOUlFY3VaMlYwS0ZNcExsOWZkMlZpWjJ4R2NtRnRaV0oxWm1abGNqc0tJQ0FnSUNBZ0lDQnBaaUFvVXk1cGMxZGxZa2RNUTNWaVpWSmxibVJsY2xSaGNtZGxkQ0FtSmlCQlpTQWhQVDBnZG05cFpDQXdJQ1ltSUNoSlpTQTlJRWxsVzBGbFhTa3NJRWxsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSGhsTG1KcGJtUkdjbUZ0WldKMVptWmxjaWd6TmpFMk1Dd2dTV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIZGxJRDBnVXk1MFpYaDBkWEpsTENCSVpTQTlJSGRsTG1admNtMWhkQ3dnUkdVZ1BTQjNaUzUwZVhCbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRWhsSUNFOVBTQmpkQ0FtSmlCMFpTNWpiMjUyWlhKMEtFaGxLU0FoUFQwZ1dTNW5aWFJRWVhKaGJXVjBaWElvTXpVM016a3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2k1eVpXRmtVbVZ1WkdWeVZHRnlaMlYwVUdsNFpXeHpPaUJ5Wlc1a1pYSlVZWEpuWlhRZ2FYTWdibTkwSUdsdUlGSkhRa0VnYjNJZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnWkdWbWFXNWxaQ0JtYjNKdFlYUXVJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIcGxJRDBnUkdVZ1BUMDlJR3R1SUNZbUlDaDVaUzVvWVhNb0lrVllWRjlqYjJ4dmNsOWlkV1ptWlhKZmFHRnNabDltYkc5aGRDSXBJSHg4SUdkbExtbHpWMlZpUjB3eUlDWW1JSGxsTG1oaGN5Z2lSVmhVWDJOdmJHOXlYMkoxWm1abGNsOW1iRzloZENJcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hFWlNBaFBUMGdjbTRnSmlZZ2RHVXVZMjl1ZG1WeWRDaEVaU2tnSVQwOUlGa3VaMlYwVUdGeVlXMWxkR1Z5S0RNMU56TTRLU0FtSmlBaEtFUmxJRDA5UFNCdWJpQW1KaUFvWjJVdWFYTlhaV0pIVERJZ2ZId2dlV1V1YUdGektDSlBSVk5mZEdWNGRIVnlaVjltYkc5aGRDSXBJSHg4SUhsbExtaGhjeWdpVjBWQ1IweGZZMjlzYjNKZlluVm1abVZ5WDJac2IyRjBJaWtwS1NBbUppQWhlbVVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeUxuSmxZV1JTWlc1a1pYSlVZWEpuWlhSUWFYaGxiSE02SUhKbGJtUmxjbFJoY21kbGRDQnBjeUJ1YjNRZ2FXNGdWVzV6YVdkdVpXUkNlWFJsVkhsd1pTQnZjaUJwYlhCc1pXMWxiblJoZEdsdmJpQmtaV1pwYm1Wa0lIUjVjR1V1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1dTNWphR1ZqYTBaeVlXMWxZblZtWm1WeVUzUmhkSFZ6S0RNMk1UWXdLU0E5UFQwZ016WXdOVE1nUHlCT0lENDlJREFnSmlZZ1RpQThQU0JUTG5kcFpIUm9JQzBnZWlBbUppQklJRDQ5SURBZ0ppWWdTQ0E4UFNCVExtaGxhV2RvZENBdElIRWdKaVlnV1M1eVpXRmtVR2w0Wld4ektFNHNJRWdzSUhvc0lIRXNJSFJsTG1OdmJuWmxjblFvU0dVcExDQjBaUzVqYjI1MlpYSjBLRVJsS1N3Z1ltVXBJRG9nWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjaTV5WldGa1VtVnVaR1Z5VkdGeVoyVjBVR2w0Wld4ek9pQnlaV0ZrVUdsNFpXeHpJR1p5YjIwZ2NtVnVaR1Z5VkdGeVoyVjBJR1poYVd4bFpDNGdSbkpoYldWaWRXWm1aWElnYm05MElHTnZiWEJzWlhSbExpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkMlVnUFNCZklDRTlQU0J1ZFd4c0lEOGdSeTVuWlhRb1h5a3VYMTkzWldKbmJFWnlZVzFsWW5WbVptVnlJRG9nYm5Wc2JEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaGxMbUpwYm1SR2NtRnRaV0oxWm1abGNpZ3pOakUyTUN3Z2QyVXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3Z2RHaHBjeTVqYjNCNVJuSmhiV1ZpZFdabVpYSlViMVJsZUhSMWNtVWdQU0JtZFc1amRHbHZiaWhUTENCT0xDQklJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hPTG1selJuSmhiV1ZpZFdabVpYSlVaWGgwZFhKbElDRTlQU0FoTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUJqYjNCNVJuSmhiV1ZpZFdabVpYSlViMVJsZUhSMWNtVW9LU0JqWVc0Z2IyNXNlU0JpWlNCMWMyVmtJSGRwZEdnZ1JuSmhiV1ZpZFdabVpYSlVaWGgwZFhKbExpSXBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQjZJRDBnVFdGMGFDNXdiM2NvTWl3Z0xVZ3BMQ0J4SUQwZ1RXRjBhQzVtYkc5dmNpaE9MbWx0WVdkbExuZHBaSFJvSUNvZ2Vpa3NJR0psSUQwZ1RXRjBhQzVtYkc5dmNpaE9MbWx0WVdkbExtaGxhV2RvZENBcUlIb3BPd29nSUNBZ0lDQWdJR291YzJWMFZHVjRkSFZ5WlRKRUtFNHNJREFwTENCWkxtTnZjSGxVWlhoVGRXSkpiV0ZuWlRKRUtETTFOVE1zSUVnc0lEQXNJREFzSUZNdWVDd2dVeTU1TENCeExDQmlaU2tzSUhobExuVnVZbWx1WkZSbGVIUjFjbVVvS1RzS0lDQWdJSDBzSUhSb2FYTXVZMjl3ZVZSbGVIUjFjbVZVYjFSbGVIUjFjbVVnUFNCbWRXNWpkR2x2YmloVExDQk9MQ0JJTENCNklEMGdNQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnhJRDBnVGk1cGJXRm5aUzUzYVdSMGFDd2dZbVVnUFNCT0xtbHRZV2RsTG1obGFXZG9kQ3dnUVdVZ1BTQjBaUzVqYjI1MlpYSjBLRWd1Wm05eWJXRjBLU3dnU1dVZ1BTQjBaUzVqYjI1MlpYSjBLRWd1ZEhsd1pTazdDaUFnSUNBZ0lDQWdhaTV6WlhSVVpYaDBkWEpsTWtRb1NDd2dNQ2tzSUZrdWNHbDRaV3hUZEc5eVpXa29NemMwTkRBc0lFZ3VabXhwY0ZrcExDQlpMbkJwZUdWc1UzUnZjbVZwS0RNM05EUXhMQ0JJTG5CeVpXMTFiSFJwY0d4NVFXeHdhR0VwTENCWkxuQnBlR1ZzVTNSdmNtVnBLRE16TVRjc0lFZ3VkVzV3WVdOclFXeHBaMjV0Wlc1MEtTd2dUaTVwYzBSaGRHRlVaWGgwZFhKbElEOGdXUzUwWlhoVGRXSkpiV0ZuWlRKRUtETTFOVE1zSUhvc0lGTXVlQ3dnVXk1NUxDQnhMQ0JpWlN3Z1FXVXNJRWxsTENCT0xtbHRZV2RsTG1SaGRHRXBJRG9nVGk1cGMwTnZiWEJ5WlhOelpXUlVaWGgwZFhKbElEOGdXUzVqYjIxd2NtVnpjMlZrVkdWNFUzVmlTVzFoWjJVeVJDZ3pOVFV6TENCNkxDQlRMbmdzSUZNdWVTd2dUaTV0YVhCdFlYQnpXekJkTG5kcFpIUm9MQ0JPTG0xcGNHMWhjSE5iTUYwdWFHVnBaMmgwTENCQlpTd2dUaTV0YVhCdFlYQnpXekJkTG1SaGRHRXBJRG9nV1M1MFpYaFRkV0pKYldGblpUSkVLRE0xTlRNc0lIb3NJRk11ZUN3Z1V5NTVMQ0JCWlN3Z1NXVXNJRTR1YVcxaFoyVXBMQ0I2SUQwOVBTQXdJQ1ltSUVndVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUNZbUlGa3VaMlZ1WlhKaGRHVk5hWEJ0WVhBb016VTFNeWtzSUhobExuVnVZbWx1WkZSbGVIUjFjbVVvS1RzS0lDQWdJSDBzSUhSb2FYTXVZMjl3ZVZSbGVIUjFjbVZVYjFSbGVIUjFjbVV6UkNBOUlHWjFibU4wYVc5dUtGTXNJRTRzSUVnc0lIb3NJSEVnUFNBd0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0hndWFYTlhaV0pIVERGU1pXNWtaWEpsY2lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSXVZMjl3ZVZSbGVIUjFjbVZVYjFSbGVIUjFjbVV6UkRvZ1kyRnVJRzl1YkhrZ1ltVWdkWE5sWkNCM2FYUm9JRmRsWWtkTU1pNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdZbVVnUFNCVExtMWhlQzU0SUMwZ1V5NXRhVzR1ZUNBcklERXNJRUZsSUQwZ1V5NXRZWGd1ZVNBdElGTXViV2x1TG5rZ0t5QXhMQ0JKWlNBOUlGTXViV0Y0TG5vZ0xTQlRMbTFwYmk1NklDc2dNU3dnZDJVZ1BTQjBaUzVqYjI1MlpYSjBLSG91Wm05eWJXRjBLU3dnU0dVZ1BTQjBaUzVqYjI1MlpYSjBLSG91ZEhsd1pTa3NJRVJsT3dvZ0lDQWdJQ0FnSUdsbUlDaDZMbWx6UkdGMFlWUmxlSFIxY21VelJDa2dhaTV6WlhSVVpYaDBkWEpsTTBRb2Vpd2dNQ2tzSUVSbElEMGdNekk0TnprN0NpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2VpNXBjMFJoZEdGVVpYaDBkWEpsTWtSQmNuSmhlU2tnYWk1elpYUlVaWGgwZFhKbE1rUkJjbkpoZVNoNkxDQXdLU3dnUkdVZ1BTQXpOVGcyTmpzS0lDQWdJQ0FnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5TG1OdmNIbFVaWGgwZFhKbFZHOVVaWGgwZFhKbE0wUTZJRzl1YkhrZ2MzVndjRzl5ZEhNZ1ZFaFNSVVV1UkdGMFlWUmxlSFIxY21VelJDQmhibVFnVkVoU1JVVXVSR0YwWVZSbGVIUjFjbVV5UkVGeWNtRjVMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lGa3VjR2w0Wld4VGRHOXlaV2tvTXpjME5EQXNJSG91Wm14cGNGa3BMQ0JaTG5CcGVHVnNVM1J2Y21WcEtETTNORFF4TENCNkxuQnlaVzExYkhScGNHeDVRV3h3YUdFcExDQlpMbkJwZUdWc1UzUnZjbVZwS0RNek1UY3NJSG91ZFc1d1lXTnJRV3hwWjI1dFpXNTBLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2VtVWdQU0JaTG1kbGRGQmhjbUZ0WlhSbGNpZ3pNekUwS1N3Z2FtVWdQU0JaTG1kbGRGQmhjbUZ0WlhSbGNpZ3pNamczT0Nrc0lGSnVJRDBnV1M1blpYUlFZWEpoYldWMFpYSW9Nek14Tmlrc0lHVnBJRDBnV1M1blpYUlFZWEpoYldWMFpYSW9Nek14TlNrc0lFZGxJRDBnV1M1blpYUlFZWEpoYldWMFpYSW9Nekk0TnpjcExDQklkQ0E5SUVndWFYTkRiMjF3Y21WemMyVmtWR1Y0ZEhWeVpTQS9JRWd1Yldsd2JXRndjMXN3WFNBNklFZ3VhVzFoWjJVN0NpQWdJQ0FnSUNBZ1dTNXdhWGhsYkZOMGIzSmxhU2d6TXpFMExDQklkQzUzYVdSMGFDa3NJRmt1Y0dsNFpXeFRkRzl5Wldrb016STROemdzSUVoMExtaGxhV2RvZENrc0lGa3VjR2w0Wld4VGRHOXlaV2tvTXpNeE5pd2dVeTV0YVc0dWVDa3NJRmt1Y0dsNFpXeFRkRzl5Wldrb016TXhOU3dnVXk1dGFXNHVlU2tzSUZrdWNHbDRaV3hUZEc5eVpXa29Nekk0Tnpjc0lGTXViV2x1TG5vcExDQklMbWx6UkdGMFlWUmxlSFIxY21VZ2ZId2dTQzVwYzBSaGRHRlVaWGgwZFhKbE0wUWdQeUJaTG5SbGVGTjFZa2x0WVdkbE0wUW9SR1VzSUhFc0lFNHVlQ3dnVGk1NUxDQk9Mbm9zSUdKbExDQkJaU3dnU1dVc0lIZGxMQ0JJWlN3Z1NIUXVaR0YwWVNrZ09pQklMbWx6UTI5dGNISmxjM05sWkZSbGVIUjFjbVVnUHlBb1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5TG1OdmNIbFVaWGgwZFhKbFZHOVVaWGgwZFhKbE0wUTZJSFZ1ZEdWemRHVmtJSE4xY0hCdmNuUWdabTl5SUdOdmJYQnlaWE56WldRZ2MzSmpWR1Y0ZEhWeVpTNGlLU3dnV1M1amIyMXdjbVZ6YzJWa1ZHVjRVM1ZpU1cxaFoyVXpSQ2hFWlN3Z2NTd2dUaTU0TENCT0xua3NJRTR1ZWl3Z1ltVXNJRUZsTENCSlpTd2dkMlVzSUVoMExtUmhkR0VwS1NBNklGa3VkR1Y0VTNWaVNXMWhaMlV6UkNoRVpTd2djU3dnVGk1NExDQk9MbmtzSUU0dWVpd2dZbVVzSUVGbExDQkpaU3dnZDJVc0lFaGxMQ0JJZENrc0lGa3VjR2w0Wld4VGRHOXlaV2tvTXpNeE5Dd2dlbVVwTENCWkxuQnBlR1ZzVTNSdmNtVnBLRE15T0RjNExDQnFaU2tzSUZrdWNHbDRaV3hUZEc5eVpXa29Nek14Tml3Z1VtNHBMQ0JaTG5CcGVHVnNVM1J2Y21WcEtETXpNVFVzSUdWcEtTd2dXUzV3YVhobGJGTjBiM0psYVNnek1qZzNOeXdnUjJVcExDQnhJRDA5UFNBd0lDWW1JSG91WjJWdVpYSmhkR1ZOYVhCdFlYQnpJQ1ltSUZrdVoyVnVaWEpoZEdWTmFYQnRZWEFvUkdVcExDQjRaUzUxYm1KcGJtUlVaWGgwZFhKbEtDazdDaUFnSUNCOUxDQjBhR2x6TG1sdWFYUlVaWGgwZFhKbElEMGdablZ1WTNScGIyNG9VeWtnZXdvZ0lDQWdJQ0FnSUdvdWMyVjBWR1Y0ZEhWeVpUSkVLRk1zSURBcExDQjRaUzUxYm1KcGJtUlVaWGgwZFhKbEtDazdDaUFnSUNCOUxDQjBhR2x6TG5KbGMyVjBVM1JoZEdVZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0JuSUQwZ01Dd2djQ0E5SURBc0lGOGdQU0J1ZFd4c0xDQjRaUzV5WlhObGRDZ3BMQ0JTTG5KbGMyVjBLQ2s3Q2lBZ0lDQjlMQ0IwZVhCbGIyWWdYMTlVU0ZKRlJWOUVSVlpVVDA5TVUxOWZJRHdnSW5VaUlDWW1JRjlmVkVoU1JVVmZSRVZXVkU5UFRGTmZYeTVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnaWIySnpaWEoyWlNJc0lIc0tJQ0FnSUNBZ0lDQmtaWFJoYVd3NklIUm9hWE1LSUNBZ0lIMHBLVHNLZlFweFpTNXdjbTkwYjNSNWNHVXVhWE5YWldKSFRGSmxibVJsY21WeUlEMGdJVEE3Q25aaGNpQmZhQ0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdjV1VnZXdwOU93cGZhQzV3Y205MGIzUjVjR1V1YVhOWFpXSkhUREZTWlc1a1pYSmxjaUE5SUNFd093cDJZWElnVG5JZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBJRDBnTWpWbExUVXBld29nSUNBZ0lDQWdJSFJvYVhNdWJtRnRaU0E5SUNJaUxDQjBhR2x6TG1OdmJHOXlJRDBnYm1WM0lHRmxLR1VwTENCMGFHbHpMbVJsYm5OcGRIa2dQU0IwT3dvZ0lDQWdmUW9nSUNBZ1kyeHZibVVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk9jaWgwYUdsekxtTnZiRzl5TENCMGFHbHpMbVJsYm5OcGRIa3BPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKR2IyZEZlSEF5SWl3S0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklIUm9hWE11WTI5c2IzSXVaMlYwU0dWNEtDa3NDaUFnSUNBZ0lDQWdJQ0FnSUdSbGJuTnBkSGs2SUhSb2FYTXVaR1Z1YzJsMGVRb2dJQ0FnSUNBZ0lIMDdDaUFnSUNCOUNuMDdDazV5TG5CeWIzUnZkSGx3WlM1cGMwWnZaMFY0Y0RJZ1BTQWhNRHNLZG1GeUlFSnlJRDBnWTJ4aGMzTWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZENBOUlERXNJRzRnUFNBeFpUTXBld29nSUNBZ0lDQWdJSFJvYVhNdWJtRnRaU0E5SUNJaUxDQjBhR2x6TG1OdmJHOXlJRDBnYm1WM0lHRmxLR1VwTENCMGFHbHpMbTVsWVhJZ1BTQjBMQ0IwYUdsekxtWmhjaUE5SUc0N0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRUp5S0hSb2FYTXVZMjlzYjNJc0lIUm9hWE11Ym1WaGNpd2dkR2hwY3k1bVlYSXBPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUI3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKR2IyY2lMQW9nSUNBZ0lDQWdJQ0FnSUNCamIyeHZjam9nZEdocGN5NWpiMnh2Y2k1blpYUklaWGdvS1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVZoY2pvZ2RHaHBjeTV1WldGeUxBb2dJQ0FnSUNBZ0lDQWdJQ0JtWVhJNklIUm9hWE11Wm1GeUNpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS2ZUc0tRbkl1Y0hKdmRHOTBlWEJsTG1selJtOW5JRDBnSVRBN0NuWmhjaUJ1YnlBOUlHTnNZWE56SUdWNGRHVnVaSE1nVG1VZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pUWTJWdVpTSXNJSFJvYVhNdVltRmphMmR5YjNWdVpDQTlJRzUxYkd3c0lIUm9hWE11Wlc1MmFYSnZibTFsYm5RZ1BTQnVkV3hzTENCMGFHbHpMbVp2WnlBOUlHNTFiR3dzSUhSb2FYTXViM1psY25KcFpHVk5ZWFJsY21saGJDQTlJRzUxYkd3c0lIUm9hWE11WVhWMGIxVndaR0YwWlNBOUlDRXdMQ0IwZVhCbGIyWWdYMTlVU0ZKRlJWOUVSVlpVVDA5TVUxOWZJRHdnSW5VaUlDWW1JRjlmVkVoU1JVVmZSRVZXVkU5UFRGTmZYeTVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnaWIySnpaWEoyWlNJc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWMFlXbHNPaUIwYUdsekNpQWdJQ0FnSUNBZ2ZTa3BPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTd2dkQ2tzSUdVdVltRmphMmR5YjNWdVpDQWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NWlZV05yWjNKdmRXNWtJRDBnWlM1aVlXTnJaM0p2ZFc1a0xtTnNiMjVsS0NrcExDQmxMbVZ1ZG1seWIyNXRaVzUwSUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TG1WdWRtbHliMjV0Wlc1MElEMGdaUzVsYm5acGNtOXViV1Z1ZEM1amJHOXVaU2dwS1N3Z1pTNW1iMmNnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11Wm05bklEMGdaUzVtYjJjdVkyeHZibVVvS1Nrc0lHVXViM1psY25KcFpHVk5ZWFJsY21saGJDQWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NXZkbVZ5Y21sa1pVMWhkR1Z5YVdGc0lEMGdaUzV2ZG1WeWNtbGtaVTFoZEdWeWFXRnNMbU5zYjI1bEtDa3BMQ0IwYUdsekxtRjFkRzlWY0dSaGRHVWdQU0JsTG1GMWRHOVZjR1JoZEdVc0lIUm9hWE11YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUdVdWJXRjBjbWw0UVhWMGIxVndaR0YwWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCemRYQmxjaTUwYjBwVFQwNG9aU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVptOW5JQ0U5UFNCdWRXeHNJQ1ltSUNoMExtOWlhbVZqZEM1bWIyY2dQU0IwYUdsekxtWnZaeTUwYjBwVFQwNG9LU2tzSUhRN0NpQWdJQ0I5Q24wN0NtNXZMbkJ5YjNSdmRIbHdaUzVwYzFOalpXNWxJRDBnSVRBN0NuWmhjaUFrYmlBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXBld29nSUNBZ0lDQWdJSFJvYVhNdVlYSnlZWGtnUFNCbExDQjBhR2x6TG5OMGNtbGtaU0E5SUhRc0lIUm9hWE11WTI5MWJuUWdQU0JsSUNFOVBTQjJiMmxrSURBZ1B5QmxMbXhsYm1kMGFDQXZJSFFnT2lBd0xDQjBhR2x6TG5WellXZGxJRDBnYUhJc0lIUm9hWE11ZFhCa1lYUmxVbUZ1WjJVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRG9nTUN3S0lDQWdJQ0FnSUNBZ0lDQWdZMjkxYm5RNklDMHhDaUFnSUNBZ0lDQWdmU3dnZEdocGN5NTJaWEp6YVc5dUlEMGdNQ3dnZEdocGN5NTFkV2xrSUQwZ1JYUW9LVHNLSUNBZ0lIMEtJQ0FnSUc5dVZYQnNiMkZrUTJGc2JHSmhZMnNvS1NCN2ZRb2dJQ0FnYzJWMElHNWxaV1J6VlhCa1lYUmxLR1VwSUhzS0lDQWdJQ0FnSUNCbElEMDlQU0FoTUNBbUppQjBhR2x6TG5abGNuTnBiMjRyS3pzS0lDQWdJSDBLSUNBZ0lITmxkRlZ6WVdkbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MWMyRm5aU0E5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhjbkpoZVNBOUlHNWxkeUJsTG1GeWNtRjVMbU52Ym5OMGNuVmpkRzl5S0dVdVlYSnlZWGtwTENCMGFHbHpMbU52ZFc1MElEMGdaUzVqYjNWdWRDd2dkR2hwY3k1emRISnBaR1VnUFNCbExuTjBjbWxrWlN3Z2RHaHBjeTUxYzJGblpTQTlJR1V1ZFhOaFoyVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1UVhRb1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lHVWdLajBnZEdocGN5NXpkSEpwWkdVc0lHNGdLajBnZEM1emRISnBaR1U3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUhSb2FYTXVjM1J5YVdSbE95QnBJRHdnY2pzZ2FTc3JLWFJvYVhNdVlYSnlZWGxiWlNBcklHbGRJRDBnZEM1aGNuSmhlVnR1SUNzZ2FWMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU3dnZENBOUlEQXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGNuSmhlUzV6WlhRb1pTd2dkQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnWlM1aGNuSmhlVUoxWm1abGNuTWdQVDA5SUhadmFXUWdNQ0FtSmlBb1pTNWhjbkpoZVVKMVptWmxjbk1nUFNCN2ZTa3NJSFJvYVhNdVlYSnlZWGt1WW5WbVptVnlMbDkxZFdsa0lEMDlQU0IyYjJsa0lEQWdKaVlnS0hSb2FYTXVZWEp5WVhrdVluVm1abVZ5TGw5MWRXbGtJRDBnUlhRb0tTa3NJR1V1WVhKeVlYbENkV1ptWlhKelczUm9hWE11WVhKeVlYa3VZblZtWm1WeUxsOTFkV2xrWFNBOVBUMGdkbTlwWkNBd0lDWW1JQ2hsTG1GeWNtRjVRblZtWm1WeWMxdDBhR2x6TG1GeWNtRjVMbUoxWm1abGNpNWZkWFZwWkYwZ1BTQjBhR2x6TG1GeWNtRjVMbk5zYVdObEtEQXBMbUoxWm1abGNpazdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQnVaWGNnZEdocGN5NWhjbkpoZVM1amIyNXpkSEoxWTNSdmNpaGxMbUZ5Y21GNVFuVm1abVZ5YzF0MGFHbHpMbUZ5Y21GNUxtSjFabVpsY2k1ZmRYVnBaRjBwTENCdUlEMGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvZEN3Z2RHaHBjeTV6ZEhKcFpHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVMbk5sZEZWellXZGxLSFJvYVhNdWRYTmhaMlVwTENCdU93b2dJQ0FnZlFvZ0lDQWdiMjVWY0d4dllXUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtOXVWWEJzYjJGa1EyRnNiR0poWTJzZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVoY25KaGVVSjFabVpsY25NZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWlM1aGNuSmhlVUoxWm1abGNuTWdQU0I3ZlNrc0lIUm9hWE11WVhKeVlYa3VZblZtWm1WeUxsOTFkV2xrSUQwOVBTQjJiMmxrSURBZ0ppWWdLSFJvYVhNdVlYSnlZWGt1WW5WbVptVnlMbDkxZFdsa0lEMGdSWFFvS1Nrc0lHVXVZWEp5WVhsQ2RXWm1aWEp6VzNSb2FYTXVZWEp5WVhrdVluVm1abVZ5TGw5MWRXbGtYU0E5UFQwZ2RtOXBaQ0F3SUNZbUlDaGxMbUZ5Y21GNVFuVm1abVZ5YzF0MGFHbHpMbUZ5Y21GNUxtSjFabVpsY2k1ZmRYVnBaRjBnUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNodVpYY2dWV2x1ZERNeVFYSnlZWGtvZEdocGN5NWhjbkpoZVM1aWRXWm1aWElwS1Nrc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnZFhWcFpEb2dkR2hwY3k1MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCaWRXWm1aWEk2SUhSb2FYTXVZWEp5WVhrdVluVm1abVZ5TGw5MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUIwYUdsekxtRnljbUY1TG1OdmJuTjBjblZqZEc5eUxtNWhiV1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lITjBjbWxrWlRvZ2RHaHBjeTV6ZEhKcFpHVUtJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRcDlPd29rYmk1d2NtOTBiM1I1Y0dVdWFYTkpiblJsY214bFlYWmxaRUoxWm1abGNpQTlJQ0V3T3dwMllYSWdTMlVnUFNCdVpYY2dUU3dnVTI0Z1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcElEMGdJVEVwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVibUZ0WlNBOUlDSWlMQ0IwYUdsekxtUmhkR0VnUFNCbExDQjBhR2x6TG1sMFpXMVRhWHBsSUQwZ2RDd2dkR2hwY3k1dlptWnpaWFFnUFNCdUxDQjBhR2x6TG01dmNtMWhiR2w2WldRZ1BTQnBJRDA5UFNBaE1Ec0tJQ0FnSUgwS0lDQWdJR2RsZENCamIzVnVkQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWtZWFJoTG1OdmRXNTBPd29nSUNBZ2ZRb2dJQ0FnWjJWMElHRnljbUY1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJoZEdFdVlYSnlZWGs3Q2lBZ0lDQjlDaUFnSUNCelpYUWdibVZsWkhOVmNHUmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11WkdGMFlTNXVaV1ZrYzFWd1pHRjBaU0E5SUdVN0NpQWdJQ0I5Q2lBZ0lDQmhjSEJzZVUxaGRISnBlRFFvWlNrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RDQTlJREFzSUc0Z1BTQjBhR2x6TG1SaGRHRXVZMjkxYm5RN0lIUWdQQ0J1T3lCMEt5c3BTMlV1ZUNBOUlIUm9hWE11WjJWMFdDaDBLU3dnUzJVdWVTQTlJSFJvYVhNdVoyVjBXU2gwS1N3Z1MyVXVlaUE5SUhSb2FYTXVaMlYwV2loMEtTd2dTMlV1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0IwYUdsekxuTmxkRmhaV2loMExDQkxaUzU0TENCTFpTNTVMQ0JMWlM1NktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGd2NHeDVUbTl5YldGc1RXRjBjbWw0S0dVcElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdkR2hwY3k1amIzVnVkRHNnZENBOElHNDdJSFFyS3lsTFpTNTRJRDBnZEdocGN5NW5aWFJZS0hRcExDQkxaUzU1SUQwZ2RHaHBjeTVuWlhSWktIUXBMQ0JMWlM1NklEMGdkR2hwY3k1blpYUmFLSFFwTENCTFpTNWhjSEJzZVU1dmNtMWhiRTFoZEhKcGVDaGxLU3dnZEdocGN5NXpaWFJZV1Zvb2RDd2dTMlV1ZUN3Z1MyVXVlU3dnUzJVdWVpazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGNtRnVjMlp2Y20xRWFYSmxZM1JwYjI0b1pTa2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0IwYUdsekxtTnZkVzUwT3lCMElEd2dianNnZENzcktVdGxMbmdnUFNCMGFHbHpMbWRsZEZnb2RDa3NJRXRsTG5rZ1BTQjBhR2x6TG1kbGRGa29kQ2tzSUV0bExub2dQU0IwYUdsekxtZGxkRm9vZENrc0lFdGxMblJ5WVc1elptOXliVVJwY21WamRHbHZiaWhsS1N3Z2RHaHBjeTV6WlhSWVdWb29kQ3dnUzJVdWVDd2dTMlV1ZVN3Z1MyVXVlaWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJZS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a1lYUmhMbUZ5Y21GNVcyVWdLaUIwYUdsekxtUmhkR0V1YzNSeWFXUmxJQ3NnZEdocGN5NXZabVp6WlhSZElEMGdkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUmhkR0V1WVhKeVlYbGJaU0FxSUhSb2FYTXVaR0YwWVM1emRISnBaR1VnS3lCMGFHbHpMbTltWm5ObGRDQXJJREZkSUQwZ2RDd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRm9vWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SaGRHRXVZWEp5WVhsYlpTQXFJSFJvYVhNdVpHRjBZUzV6ZEhKcFpHVWdLeUIwYUdsekxtOW1abk5sZENBcklESmRJRDBnZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGY29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJoZEdFdVlYSnlZWGxiWlNBcUlIUm9hWE11WkdGMFlTNXpkSEpwWkdVZ0t5QjBhR2x6TG05bVpuTmxkQ0FySUROZElEMGdkQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEZnb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SaGRHRXVZWEp5WVhsYlpTQXFJSFJvYVhNdVpHRjBZUzV6ZEhKcFpHVWdLeUIwYUdsekxtOW1abk5sZEYwN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJaS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVrWVhSaExtRnljbUY1VzJVZ0tpQjBhR2x6TG1SaGRHRXVjM1J5YVdSbElDc2dkR2hwY3k1dlptWnpaWFFnS3lBeFhUc0tJQ0FnSUgwS0lDQWdJR2RsZEZvb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SaGRHRXVZWEp5WVhsYlpTQXFJSFJvYVhNdVpHRjBZUzV6ZEhKcFpHVWdLeUIwYUdsekxtOW1abk5sZENBcklESmRPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZ5aGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ29nZEdocGN5NWtZWFJoTG5OMGNtbGtaU0FySUhSb2FYTXViMlptYzJWMElDc2dNMTA3Q2lBZ0lDQjlDaUFnSUNCelpYUllXU2hsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1VnUFNCbElDb2dkR2hwY3k1a1lYUmhMbk4wY21sa1pTQXJJSFJvYVhNdWIyWm1jMlYwTENCMGFHbHpMbVJoZEdFdVlYSnlZWGxiWlNBcklEQmRJRDBnZEN3Z2RHaHBjeTVrWVhSaExtRnljbUY1VzJVZ0t5QXhYU0E5SUc0c0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUllXVm9vWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbElEMGdaU0FxSUhSb2FYTXVaR0YwWVM1emRISnBaR1VnS3lCMGFHbHpMbTltWm5ObGRDd2dkR2hwY3k1a1lYUmhMbUZ5Y21GNVcyVWdLeUF3WFNBOUlIUXNJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ3NnTVYwZ1BTQnVMQ0IwYUdsekxtUmhkR0V1WVhKeVlYbGJaU0FySURKZElEMGdhU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEZoWldsY29aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbElEMGdaU0FxSUhSb2FYTXVaR0YwWVM1emRISnBaR1VnS3lCMGFHbHpMbTltWm5ObGRDd2dkR2hwY3k1a1lYUmhMbUZ5Y21GNVcyVWdLeUF3WFNBOUlIUXNJSFJvYVhNdVpHRjBZUzVoY25KaGVWdGxJQ3NnTVYwZ1BTQnVMQ0IwYUdsekxtUmhkR0V1WVhKeVlYbGJaU0FySURKZElEMGdhU3dnZEdocGN5NWtZWFJoTG1GeWNtRjVXMlVnS3lBelhTQTlJSElzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWdpVkVoU1JVVXVTVzUwWlhKc1pXRjJaV1JDZFdabVpYSkJkSFJ5YVdKMWRHVXVZMnh2Ym1Vb0tUb2dRMnh2Ym1sdVp5QmhiaUJwYm5SbGNteGhkbVZrSUdKMVptWmxjaUJoZEhSeWFXSjFkR1VnZDJsc2JDQmtaV2x1ZEdWeWJHVmhkbVVnWW5WbVptVnlJR1JoZEdFdUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBN0lHNGdQQ0IwYUdsekxtTnZkVzUwT3lCdUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVJQ29nZEdocGN5NWtZWFJoTG5OMGNtbGtaU0FySUhSb2FYTXViMlptYzJWME93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCeUlEMGdNRHNnY2lBOElIUm9hWE11YVhSbGJWTnBlbVU3SUhJckt5bDBMbkIxYzJnb2RHaHBjeTVrWVhSaExtRnljbUY1VzJrZ0t5QnlYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVlpTaHVaWGNnZEdocGN5NWhjbkpoZVM1amIyNXpkSEoxWTNSdmNpaDBLU3dnZEdocGN5NXBkR1Z0VTJsNlpTd2dkR2hwY3k1dWIzSnRZV3hwZW1Wa0tUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2NtVjBkWEp1SUdVdWFXNTBaWEpzWldGMlpXUkNkV1ptWlhKeklEMDlQU0IyYjJsa0lEQWdKaVlnS0dVdWFXNTBaWEpzWldGMlpXUkNkV1ptWlhKeklEMGdlMzBwTENCbExtbHVkR1Z5YkdWaGRtVmtRblZtWm1WeWMxdDBhR2x6TG1SaGRHRXVkWFZwWkYwZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWlM1cGJuUmxjbXhsWVhabFpFSjFabVpsY25OYmRHaHBjeTVrWVhSaExuVjFhV1JkSUQwZ2RHaHBjeTVrWVhSaExtTnNiMjVsS0dVcEtTd2dibVYzSUZOdUtHVXVhVzUwWlhKc1pXRjJaV1JDZFdabVpYSnpXM1JvYVhNdVpHRjBZUzUxZFdsa1hTd2dkR2hwY3k1cGRHVnRVMmw2WlN3Z2RHaHBjeTV2Wm1aelpYUXNJSFJvYVhNdWJtOXliV0ZzYVhwbFpDazdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaGxJRDA5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSWxSSVVrVkZMa2x1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxMblJ2U2xOUFRpZ3BPaUJUWlhKcFlXeHBlbWx1WnlCaGJpQnBiblJsY214aGRtVmtJR0oxWm1abGNpQmhkSFJ5YVdKMWRHVWdkMmxzYkNCa1pXbHVkR1Z5YkdWaGRtVWdZblZtWm1WeUlHUmhkR0V1SWlrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREE3SUc0Z1BDQjBhR2x6TG1OdmRXNTBPeUJ1S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdUlDb2dkR2hwY3k1a1lYUmhMbk4wY21sa1pTQXJJSFJvYVhNdWIyWm1jMlYwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J5SUQwZ01Ec2djaUE4SUhSb2FYTXVhWFJsYlZOcGVtVTdJSElyS3lsMExuQjFjMmdvZEdocGN5NWtZWFJoTG1GeWNtRjVXMmtnS3lCeVhTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzFUYVhwbE9pQjBhR2x6TG1sMFpXMVRhWHBsTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dkR2hwY3k1aGNuSmhlUzVqYjI1emRISjFZM1J2Y2k1dVlXMWxMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEp5WVhrNklIUXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtPaUIwYUdsekxtNXZjbTFoYkdsNlpXUUtJQ0FnSUNBZ0lDQWdJQ0FnZlRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnY21WMGRYSnVJR1V1YVc1MFpYSnNaV0YyWldSQ2RXWm1aWEp6SUQwOVBTQjJiMmxrSURBZ0ppWWdLR1V1YVc1MFpYSnNaV0YyWldSQ2RXWm1aWEp6SUQwZ2UzMHBMQ0JsTG1sdWRHVnliR1ZoZG1Wa1FuVm1abVZ5YzF0MGFHbHpMbVJoZEdFdWRYVnBaRjBnUFQwOUlIWnZhV1FnTUNBbUppQW9aUzVwYm5SbGNteGxZWFpsWkVKMVptWmxjbk5iZEdocGN5NWtZWFJoTG5WMWFXUmRJRDBnZEdocGN5NWtZWFJoTG5SdlNsTlBUaWhsS1Nrc0lIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVhOSmJuUmxjbXhsWVhabFpFSjFabVpsY2tGMGRISnBZblYwWlRvZ0lUQXNDaUFnSUNBZ0lDQWdJQ0FnSUdsMFpXMVRhWHBsT2lCMGFHbHpMbWwwWlcxVGFYcGxMQW9nSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUIwYUdsekxtUmhkR0V1ZFhWcFpDd0tJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBPaUIwYUdsekxtOW1abk5sZEN3S0lDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxaRG9nZEdocGN5NXViM0p0WVd4cGVtVmtDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtmVHNLVTI0dWNISnZkRzkwZVhCbExtbHpTVzUwWlhKc1pXRjJaV1JDZFdabVpYSkJkSFJ5YVdKMWRHVWdQU0FoTURzS2RtRnlJR2x2SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJrZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pUY0hKcGRHVk5ZWFJsY21saGJDSXNJSFJvYVhNdVkyOXNiM0lnUFNCdVpYY2dZV1VvTVRZM056Y3lNVFVwTENCMGFHbHpMbTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZV3h3YUdGTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG5KdmRHRjBhVzl1SUQwZ01Dd2dkR2hwY3k1emFYcGxRWFIwWlc1MVlYUnBiMjRnUFNBaE1Dd2dkR2hwY3k1MGNtRnVjM0JoY21WdWRDQTlJQ0V3TENCMGFHbHpMbk5sZEZaaGJIVmxjeWhsS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtTnZiRzl5TG1OdmNIa29aUzVqYjJ4dmNpa3NJSFJvYVhNdWJXRndJRDBnWlM1dFlYQXNJSFJvYVhNdVlXeHdhR0ZOWVhBZ1BTQmxMbUZzY0doaFRXRndMQ0IwYUdsekxuSnZkR0YwYVc5dUlEMGdaUzV5YjNSaGRHbHZiaXdnZEdocGN5NXphWHBsUVhSMFpXNTFZWFJwYjI0Z1BTQmxMbk5wZW1WQmRIUmxiblZoZEdsdmJpd2dkR2hwY3pzS0lDQWdJSDBLZlRzS2FXOHVjSEp2ZEc5MGVYQmxMbWx6VTNCeWFYUmxUV0YwWlhKcFlXd2dQU0FoTURzS2RtRnlJR2RwTENCUmFTQTlJRzVsZHlCTkxDQjRhU0E5SUc1bGR5Qk5MQ0I1YVNBOUlHNWxkeUJOTENCMmFTQTlJRzVsZHlCWUxDQkxhU0E5SUc1bGR5QllMQ0JOYUNBOUlHNWxkeUJ3WlN3Z2FITWdQU0J1WlhjZ1RTd2daWElnUFNCdVpYY2dUU3dnZFhNZ1BTQnVaWGNnVFN3Z2Ftd2dQU0J1WlhjZ1dDd2djVzhnUFNCdVpYY2dXQ3dnVVd3Z1BTQnVaWGNnV0N3Z2NtOGdQU0JqYkdGemN5QmxlSFJsYm1SeklFNWxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEhsd1pTQTlJQ0pUY0hKcGRHVWlMQ0JuYVNBOVBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdkcElEMGdibVYzSUY5bE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29Xd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMUzQxTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTFM0MUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMalVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F0TGpVc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVOU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzQxTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xTNDFMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMalVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURFS0lDQWdJQ0FnSUNBZ0lDQWdYU2tzSUc0Z1BTQnVaWGNnSkc0b2RDd2dOU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHZHBMbk5sZEVsdVpHVjRLRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTWl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ013b2dJQ0FnSUNBZ0lDQWdJQ0JkS1N3Z1oya3VjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUJUYmlodUxDQXpMQ0F3TENBaE1Ta3BMQ0JuYVM1elpYUkJkSFJ5YVdKMWRHVW9JblYySWl3Z2JtVjNJRk51S0c0c0lESXNJRE1zSUNFeEtTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdVoyVnZiV1YwY25rZ1BTQm5hU3dnZEdocGN5NXRZWFJsY21saGJDQTlJR1VnSVQwOUlIWnZhV1FnTUNBL0lHVWdPaUJ1WlhjZ2FXOHNJSFJvYVhNdVkyVnVkR1Z5SUQwZ2JtVjNJRmdvTGpVc0lDNDFLVHNLSUNBZ0lIMEtJQ0FnSUhKaGVXTmhjM1FvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR1V1WTJGdFpYSmhJRDA5UFNCdWRXeHNJQ1ltSUdOdmJuTnZiR1V1WlhKeWIzSW9KMVJJVWtWRkxsTndjbWwwWlRvZ0lsSmhlV05oYzNSbGNpNWpZVzFsY21FaUlHNWxaV1J6SUhSdklHSmxJSE5sZENCcGJpQnZjbVJsY2lCMGJ5QnlZWGxqWVhOMElHRm5ZV2x1YzNRZ2MzQnlhWFJsY3k0bktTd2dlR2t1YzJWMFJuSnZiVTFoZEhKcGVGTmpZV3hsS0hSb2FYTXViV0YwY21sNFYyOXliR1FwTENCTmFDNWpiM0I1S0dVdVkyRnRaWEpoTG0xaGRISnBlRmR2Y214a0tTd2dkR2hwY3k1dGIyUmxiRlpwWlhkTllYUnlhWGd1YlhWc2RHbHdiSGxOWVhSeWFXTmxjeWhsTG1OaGJXVnlZUzV0WVhSeWFYaFhiM0pzWkVsdWRtVnljMlVzSUhSb2FYTXViV0YwY21sNFYyOXliR1FwTENCNWFTNXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NXRiMlJsYkZacFpYZE5ZWFJ5YVhncExDQmxMbU5oYldWeVlTNXBjMUJsY25Od1pXTjBhWFpsUTJGdFpYSmhJQ1ltSUhSb2FYTXViV0YwWlhKcFlXd3VjMmw2WlVGMGRHVnVkV0YwYVc5dUlEMDlQU0FoTVNBbUppQjRhUzV0ZFd4MGFYQnNlVk5qWVd4aGNpZ3RlV2t1ZWlrN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbTFoZEdWeWFXRnNMbkp2ZEdGMGFXOXVMQ0JwTENCeU93b2dJQ0FnSUNBZ0lHNGdJVDA5SURBZ0ppWWdLSElnUFNCTllYUm9MbU52Y3lodUtTd2dhU0E5SUUxaGRHZ3VjMmx1S0c0cEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlIUm9hWE11WTJWdWRHVnlPd29nSUNBZ0lDQWdJR1J6S0doekxuTmxkQ2d0TGpVc0lDMHVOU3dnTUNrc0lIbHBMQ0J2TENCNGFTd2dhU3dnY2lrc0lHUnpLR1Z5TG5ObGRDZ3VOU3dnTFM0MUxDQXdLU3dnZVdrc0lHOHNJSGhwTENCcExDQnlLU3dnWkhNb2RYTXVjMlYwS0M0MUxDQXVOU3dnTUNrc0lIbHBMQ0J2TENCNGFTd2dhU3dnY2lrc0lHcHNMbk5sZENnd0xDQXdLU3dnY1c4dWMyVjBLREVzSURBcExDQlJiQzV6WlhRb01Td2dNU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0JsTG5KaGVTNXBiblJsY25ObFkzUlVjbWxoYm1kc1pTaG9jeXdnWlhJc0lIVnpMQ0FoTVN3Z1VXa3BPd29nSUNBZ0lDQWdJR2xtSUNoaElEMDlQU0J1ZFd4c0lDWW1JQ2hrY3lobGNpNXpaWFFvTFM0MUxDQXVOU3dnTUNrc0lIbHBMQ0J2TENCNGFTd2dhU3dnY2lrc0lIRnZMbk5sZENnd0xDQXhLU3dnWVNBOUlHVXVjbUY1TG1sdWRHVnljMlZqZEZSeWFXRnVaMnhsS0doekxDQjFjeXdnWlhJc0lDRXhMQ0JSYVNrc0lHRWdQVDA5SUc1MWJHd3BLU0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdiR1YwSUd3Z1BTQmxMbkpoZVM1dmNtbG5hVzR1WkdsemRHRnVZMlZVYnloUmFTazdDaUFnSUNBZ0lDQWdiQ0E4SUdVdWJtVmhjaUI4ZkNCc0lENGdaUzVtWVhJZ2ZId2dkQzV3ZFhOb0tIc0tJQ0FnSUNBZ0lDQWdJQ0FnWkdsemRHRnVZMlU2SUd3c0NpQWdJQ0FnSUNBZ0lDQWdJSEJ2YVc1ME9pQlJhUzVqYkc5dVpTZ3BMQW9nSUNBZ0lDQWdJQ0FnSUNCMWRqb2diblF1WjJWMFZWWW9VV2tzSUdoekxDQmxjaXdnZFhNc0lHcHNMQ0J4Ynl3Z1VXd3NJRzVsZHlCWUtTd0tJQ0FnSUNBZ0lDQWdJQ0FnWm1GalpUb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdiMkpxWldOME9pQjBhR2x6Q2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnWlM1alpXNTBaWElnSVQwOUlIWnZhV1FnTUNBbUppQjBhR2x6TG1ObGJuUmxjaTVqYjNCNUtHVXVZMlZ1ZEdWeUtTd2dkR2hwY3k1dFlYUmxjbWxoYkNBOUlHVXViV0YwWlhKcFlXd3NJSFJvYVhNN0NpQWdJQ0I5Q24wN0NuSnZMbkJ5YjNSdmRIbHdaUzVwYzFOd2NtbDBaU0E5SUNFd093cG1kVzVqZEdsdmJpQmtjeWh6TENCbExDQjBMQ0J1TENCcExDQnlLU0I3Q2lBZ0lDQjJhUzV6ZFdKV1pXTjBiM0p6S0hNc0lIUXBMbUZrWkZOallXeGhjaWd1TlNrdWJYVnNkR2x3Ykhrb2Jpa3NJR2tnSVQwOUlIWnZhV1FnTUNBL0lDaExhUzU0SUQwZ2NpQXFJSFpwTG5nZ0xTQnBJQ29nZG1rdWVTd2dTMmt1ZVNBOUlHa2dLaUIyYVM1NElDc2djaUFxSUhacExua3BJRG9nUzJrdVkyOXdlU2gyYVNrc0lITXVZMjl3ZVNobEtTd2djeTU0SUNzOUlFdHBMbmdzSUhNdWVTQXJQU0JMYVM1NUxDQnpMbUZ3Y0d4NVRXRjBjbWw0TkNoTmFDazdDbjBLZG1GeUlHWnpJRDBnYm1WM0lFMHNJRXRzSUQwZ2JtVjNJRTBzSUdKb0lEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCT1pTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3Bld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEV4bGRtVnNJRDBnTUN3Z2RHaHBjeTUwZVhCbElEMGdJa3hQUkNJc0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0hSb2FYTXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjJaV3h6T2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYUW9nSUNBZ0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lDQWdJQ0JwYzB4UFJEb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklDRXdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1aGRYUnZWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCemRYQmxjaTVqYjNCNUtHVXNJQ0V4S1RzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdWJHVjJaV3h6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQThJR2s3SUc0ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEZ0dVhUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhaR1JNWlhabGJDaHlMbTlpYW1WamRDNWpiRzl1WlNncExDQnlMbVJwYzNSaGJtTmxLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYVjBiMVZ3WkdGMFpTQTlJR1V1WVhWMGIxVndaR0YwWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdGa1pFeGxkbVZzS0dVc0lIUWdQU0F3S1NCN0NpQWdJQ0FnSUNBZ2RDQTlJRTFoZEdndVlXSnpLSFFwT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NXNaWFpsYkhNc0lHazdDaUFnSUNBZ0lDQWdabTl5S0drZ1BTQXdPeUJwSUR3Z2JpNXNaVzVuZEdnZ0ppWWdJU2gwSUR3Z2JsdHBYUzVrYVhOMFlXNWpaU2s3SUdrckt5azdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNHVjM0JzYVdObEtHa3NJREFzSUhzS0lDQWdJQ0FnSUNBZ0lDQWdaR2x6ZEdGdVkyVTZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOWlhbVZqZERvZ1pRb2dJQ0FnSUNBZ0lIMHBMQ0IwYUdsekxtRmtaQ2hsS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFTjFjbkpsYm5STVpYWmxiQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZM1Z5Y21WdWRFeGxkbVZzT3dvZ0lDQWdmUW9nSUNBZ1oyVjBUMkpxWldOMFJtOXlSR2x6ZEdGdVkyVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NXNaWFpsYkhNN0NpQWdJQ0FnSUNBZ2FXWWdLSFF1YkdWdVozUm9JRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2Jpd2dhVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLRzRnUFNBeExDQnBJRDBnZEM1c1pXNW5kR2c3SUc0Z1BDQnBJQ1ltSUNFb1pTQThJSFJiYmwwdVpHbHpkR0Z1WTJVcE95QnVLeXNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RGdHVJQzBnTVYwdWIySnFaV04wT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJSEpoZVdOaGMzUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxteGxkbVZzY3k1c1pXNW5kR2dnUGlBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdaekxuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWgwYUdsekxtMWhkSEpwZUZkdmNteGtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCbExuSmhlUzV2Y21sbmFXNHVaR2x6ZEdGdVkyVlVieWhtY3lrN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyVjBUMkpxWldOMFJtOXlSR2x6ZEdGdVkyVW9hU2t1Y21GNVkyRnpkQ2hsTENCMEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NXNaWFpsYkhNN0NpQWdJQ0FnSUNBZ2FXWWdLSFF1YkdWdVozUm9JRDRnTVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtY3k1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9aUzV0WVhSeWFYaFhiM0pzWkNrc0lFdHNMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloMGFHbHpMbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc0Z1BTQm1jeTVrYVhOMFlXNWpaVlJ2S0V0c0tTQXZJR1V1ZW05dmJUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEZzd1hTNXZZbXBsWTNRdWRtbHphV0pzWlNBOUlDRXdPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU3dnY2pzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0drZ1BTQXhMQ0J5SUQwZ2RDNXNaVzVuZEdnN0lHa2dQQ0J5SUNZbUlHNGdQajBnZEZ0cFhTNWthWE4wWVc1alpUc2dhU3NyS1hSYmFTQXRJREZkTG05aWFtVmpkQzUyYVhOcFlteGxJRDBnSVRFc0lIUmJhVjB1YjJKcVpXTjBMblpwYzJsaWJHVWdQU0FoTURzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0hSb2FYTXVYMk4xY25KbGJuUk1aWFpsYkNBOUlHa2dMU0F4T3lCcElEd2djanNnYVNzcktYUmJhVjB1YjJKcVpXTjBMblpwYzJsaWJHVWdQU0FoTVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdjM1Z3WlhJdWRHOUtVMDlPS0dVcE93b2dJQ0FnSUNBZ0lIUm9hWE11WVhWMGIxVndaR0YwWlNBOVBUMGdJVEVnSmlZZ0tIUXViMkpxWldOMExtRjFkRzlWY0dSaGRHVWdQU0FoTVNrc0lIUXViMkpxWldOMExteGxkbVZzY3lBOUlGdGRPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1c1pYWmxiSE03Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUc0dWJHVnVaM1JvT3lCcElEd2djanNnYVNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0J1VzJsZE93b2dJQ0FnSUNBZ0lDQWdJQ0IwTG05aWFtVmpkQzVzWlhabGJITXVjSFZ6YUNoN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltcGxZM1E2SUc4dWIySnFaV04wTG5WMWFXUXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2dieTVrYVhOMFlXNWpaUW9nSUNBZ0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUTdDaUFnSUNCOUNuMHNJR1ZqSUQwZ2JtVjNJRTBzSUhSaklEMGdibVYzSUZabExDQnVZeUE5SUc1bGR5QldaU3dnVW5nZ1BTQnVaWGNnVFN3Z2FXTWdQU0J1WlhjZ2NHVXNJSE52SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJ6ZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlVMnRwYm01bFpFMWxjMmdpTENCMGFHbHpMbUpwYm1STmIyUmxJRDBnSW1GMGRHRmphR1ZrSWl3Z2RHaHBjeTVpYVc1a1RXRjBjbWw0SUQwZ2JtVjNJSEJsTENCMGFHbHpMbUpwYm1STllYUnlhWGhKYm5abGNuTmxJRDBnYm1WM0lIQmxPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11WW1sdVpFMXZaR1VnUFNCbExtSnBibVJOYjJSbExDQjBhR2x6TG1KcGJtUk5ZWFJ5YVhndVkyOXdlU2hsTG1KcGJtUk5ZWFJ5YVhncExDQjBhR2x6TG1KcGJtUk5ZWFJ5YVhoSmJuWmxjbk5sTG1OdmNIa29aUzVpYVc1a1RXRjBjbWw0U1c1MlpYSnpaU2tzSUhSb2FYTXVjMnRsYkdWMGIyNGdQU0JsTG5OclpXeGxkRzl1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWW1sdVpDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6YTJWc1pYUnZiaUE5SUdVc0lIUWdQVDA5SUhadmFXUWdNQ0FtSmlBb2RHaHBjeTUxY0dSaGRHVk5ZWFJ5YVhoWGIzSnNaQ2doTUNrc0lIUm9hWE11YzJ0bGJHVjBiMjR1WTJGc1kzVnNZWFJsU1c1MlpYSnpaWE1vS1N3Z2RDQTlJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXBMQ0IwYUdsekxtSnBibVJOWVhSeWFYZ3VZMjl3ZVNoMEtTd2dkR2hwY3k1aWFXNWtUV0YwY21sNFNXNTJaWEp6WlM1amIzQjVLSFFwTG1sdWRtVnlkQ2dwT3dvZ0lDQWdmUW9nSUNBZ2NHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbk5yWld4bGRHOXVMbkJ2YzJVb0tUc0tJQ0FnSUgwS0lDQWdJRzV2Y20xaGJHbDZaVk5yYVc1WFpXbG5hSFJ6S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2JtVjNJRlpsTENCMElEMGdkR2hwY3k1blpXOXRaWFJ5ZVM1aGRIUnlhV0oxZEdWekxuTnJhVzVYWldsbmFIUTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTUN3Z2FTQTlJSFF1WTI5MWJuUTdJRzRnUENCcE95QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQmxMbmdnUFNCMExtZGxkRmdvYmlrc0lHVXVlU0E5SUhRdVoyVjBXU2h1S1N3Z1pTNTZJRDBnZEM1blpYUmFLRzRwTENCbExuY2dQU0IwTG1kbGRGY29iaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ01TQXZJR1V1YldGdWFHRjBkR0Z1VEdWdVozUm9LQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISWdJVDA5SURFZ0x5QXdJRDhnWlM1dGRXeDBhWEJzZVZOallXeGhjaWh5S1NBNklHVXVjMlYwS0RFc0lEQXNJREFzSURBcExDQjBMbk5sZEZoWldsY29iaXdnWlM1NExDQmxMbmtzSUdVdWVpd2daUzUzS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdWTllYUnlhWGhYYjNKc1pDaGxLU0I3Q2lBZ0lDQWdJQ0FnYzNWd1pYSXVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9aU2tzSUhSb2FYTXVZbWx1WkUxdlpHVWdQVDA5SUNKaGRIUmhZMmhsWkNJZ1B5QjBhR2x6TG1KcGJtUk5ZWFJ5YVhoSmJuWmxjbk5sTG1OdmNIa29kR2hwY3k1dFlYUnlhWGhYYjNKc1pDa3VhVzUyWlhKMEtDa2dPaUIwYUdsekxtSnBibVJOYjJSbElEMDlQU0FpWkdWMFlXTm9aV1FpSUQ4Z2RHaHBjeTVpYVc1a1RXRjBjbWw0U1c1MlpYSnpaUzVqYjNCNUtIUm9hWE11WW1sdVpFMWhkSEpwZUNrdWFXNTJaWEowS0NrZ09pQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbE5yYVc1dVpXUk5aWE5vT2lCVmJuSmxZMjluYm1sNlpXUWdZbWx1WkUxdlpHVTZJQ0lnS3lCMGFHbHpMbUpwYm1STmIyUmxLVHNLSUNBZ0lIMEtJQ0FnSUdKdmJtVlVjbUZ1YzJadmNtMG9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTV6YTJWc1pYUnZiaXdnYVNBOUlIUm9hWE11WjJWdmJXVjBjbms3Q2lBZ0lDQWdJQ0FnZEdNdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHBMbUYwZEhKcFluVjBaWE11YzJ0cGJrbHVaR1Y0TENCbEtTd2dibU11Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNocExtRjBkSEpwWW5WMFpYTXVjMnRwYmxkbGFXZG9kQ3dnWlNrc0lHVmpMbU52Y0hrb2RDa3VZWEJ3YkhsTllYUnlhWGcwS0hSb2FYTXVZbWx1WkUxaGRISnBlQ2tzSUhRdWMyVjBLREFzSURBc0lEQXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdjaUE5SURBN0lISWdQQ0EwT3lCeUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdieUE5SUc1akxtZGxkRU52YlhCdmJtVnVkQ2h5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c4Z0lUMDlJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZEdNdVoyVjBRMjl0Y0c5dVpXNTBLSElwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdNdWJYVnNkR2x3YkhsTllYUnlhV05sY3lodUxtSnZibVZ6VzJGZExtMWhkSEpwZUZkdmNteGtMQ0J1TG1KdmJtVkpiblpsY25ObGMxdGhYU2tzSUhRdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0ZKNExtTnZjSGtvWldNcExtRndjR3g1VFdGMGNtbDROQ2hwWXlrc0lHOHBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtRndjR3g1VFdGMGNtbDROQ2gwYUdsekxtSnBibVJOWVhSeWFYaEpiblpsY25ObEtUc0tJQ0FnSUgwS2ZUc0tjMjh1Y0hKdmRHOTBlWEJsTG1selUydHBibTVsWkUxbGMyZ2dQU0FoTURzS2RtRnlJRzl2SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJPWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lncGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJa0p2Ym1VaU93b2dJQ0FnZlFwOU93cHZieTV3Y205MGIzUjVjR1V1YVhOQ2IyNWxJRDBnSVRBN0NuWmhjaUJ4YmlBOUlHTnNZWE56SUdWNGRHVnVaSE1nYjNRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzUxYkd3c0lIUWdQU0F4TENCdUlEMGdNU3dnYVN3Z2Npd2dieXdnWVN3Z2JDd2dZeUE5SUhKMExDQm9JRDBnY25Rc0lIVXNJR1FwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLRzUxYkd3c0lHOHNJR0VzSUd3c0lHTXNJR2dzSUdrc0lISXNJSFVzSUdRcE93b2dJQ0FnSUNBZ0lIUm9hWE11YVcxaFoyVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUc0S0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG0xaFowWnBiSFJsY2lBOUlHTXNJSFJvYVhNdWJXbHVSbWxzZEdWeUlEMGdhQ3dnZEdocGN5NW5aVzVsY21GMFpVMXBjRzFoY0hNZ1BTQWhNU3dnZEdocGN5NW1iR2x3V1NBOUlDRXhMQ0IwYUdsekxuVnVjR0ZqYTBGc2FXZHViV1Z1ZENBOUlERTdDaUFnSUNCOUNuMDdDbkZ1TG5CeWIzUnZkSGx3WlM1cGMwUmhkR0ZVWlhoMGRYSmxJRDBnSVRBN0NuWmhjaUJ5WXlBOUlHNWxkeUJ3WlN3Z1VIZ2dQU0J1WlhjZ2NHVXNJR0Z2SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlGdGRMQ0IwSUQwZ1cxMHBld29nSUNBZ0lDQWdJSFJvYVhNdWRYVnBaQ0E5SUVWMEtDa3NJSFJvYVhNdVltOXVaWE1nUFNCbExuTnNhV05sS0RBcExDQjBhR2x6TG1KdmJtVkpiblpsY25ObGN5QTlJSFFzSUhSb2FYTXVZbTl1WlUxaGRISnBZMlZ6SUQwZ2JuVnNiQ3dnZEdocGN5NWliMjVsVkdWNGRIVnlaU0E5SUc1MWJHd3NJSFJvYVhNdVltOXVaVlJsZUhSMWNtVlRhWHBsSUQwZ01Dd2dkR2hwY3k1bWNtRnRaU0E5SUMweExDQjBhR2x6TG1sdWFYUW9LVHNLSUNBZ0lIMEtJQ0FnSUdsdWFYUW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxtSnZibVZ6TENCMElEMGdkR2hwY3k1aWIyNWxTVzUyWlhKelpYTTdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZbTl1WlUxaGRISnBZMlZ6SUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNobExteGxibWQwYUNBcUlERTJLU3dnZEM1c1pXNW5kR2dnUFQwOUlEQXBJSFJvYVhNdVkyRnNZM1ZzWVhSbFNXNTJaWEp6WlhNb0tUc0tJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGxMbXhsYm1kMGFDQWhQVDBnZEM1c1pXNW5kR2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVUYTJWc1pYUnZiam9nVG5WdFltVnlJRzltSUdsdWRtVnljMlVnWW05dVpTQnRZWFJ5YVdObGN5QmtiMlZ6SUc1dmRDQnRZWFJqYUNCaGJXOTFiblFnYjJZZ1ltOXVaWE11SWlrc0lIUm9hWE11WW05dVpVbHVkbVZ5YzJWeklEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQjBhR2x6TG1KdmJtVnpMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWwwYUdsekxtSnZibVZKYm5abGNuTmxjeTV3ZFhOb0tHNWxkeUJ3WlNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdZMkZzWTNWc1lYUmxTVzUyWlhKelpYTW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWliMjVsU1c1MlpYSnpaWE11YkdWdVozUm9JRDBnTURzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdVZ1BTQXdMQ0IwSUQwZ2RHaHBjeTVpYjI1bGN5NXNaVzVuZEdnN0lHVWdQQ0IwT3lCbEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUc1bGR5QndaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpYjI1bGMxdGxYU0FtSmlCdUxtTnZjSGtvZEdocGN5NWliMjVsYzF0bFhTNXRZWFJ5YVhoWGIzSnNaQ2t1YVc1MlpYSjBLQ2tzSUhSb2FYTXVZbTl1WlVsdWRtVnljMlZ6TG5CMWMyZ29iaWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2NHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdVZ1BTQXdMQ0IwSUQwZ2RHaHBjeTVpYjI1bGN5NXNaVzVuZEdnN0lHVWdQQ0IwT3lCbEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVZbTl1WlhOYlpWMDdDaUFnSUNBZ0lDQWdJQ0FnSUc0Z0ppWWdiaTV0WVhSeWFYaFhiM0pzWkM1amIzQjVLSFJvYVhNdVltOXVaVWx1ZG1WeWMyVnpXMlZkS1M1cGJuWmxjblFvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbElEMGdNQ3dnZENBOUlIUm9hWE11WW05dVpYTXViR1Z1WjNSb095QmxJRHdnZERzZ1pTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbUp2Ym1WelcyVmRPd29nSUNBZ0lDQWdJQ0FnSUNCdUlDWW1JQ2h1TG5CaGNtVnVkQ0FtSmlCdUxuQmhjbVZ1ZEM1cGMwSnZibVVnUHlBb2JpNXRZWFJ5YVhndVkyOXdlU2h1TG5CaGNtVnVkQzV0WVhSeWFYaFhiM0pzWkNrdWFXNTJaWEowS0Nrc0lHNHViV0YwY21sNExtMTFiSFJwY0d4NUtHNHViV0YwY21sNFYyOXliR1FwS1NBNklHNHViV0YwY21sNExtTnZjSGtvYmk1dFlYUnlhWGhYYjNKc1pDa3NJRzR1YldGMGNtbDRMbVJsWTI5dGNHOXpaU2h1TG5CdmMybDBhVzl1TENCdUxuRjFZWFJsY201cGIyNHNJRzR1YzJOaGJHVXBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1VvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbUp2Ym1WekxDQjBJRDBnZEdocGN5NWliMjVsU1c1MlpYSnpaWE1zSUc0Z1BTQjBhR2x6TG1KdmJtVk5ZWFJ5YVdObGN5d2dhU0E5SUhSb2FYTXVZbTl1WlZSbGVIUjFjbVU3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J5SUQwZ01Dd2dieUE5SUdVdWJHVnVaM1JvT3lCeUlEd2dienNnY2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0JsVzNKZElEOGdaVnR5WFM1dFlYUnlhWGhYYjNKc1pDQTZJRkI0T3dvZ0lDQWdJQ0FnSUNBZ0lDQnlZeTV0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLR0VzSUhSYmNsMHBMQ0J5WXk1MGIwRnljbUY1S0c0c0lISWdLaUF4TmlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHa2dJVDA5SUc1MWJHd2dKaVlnS0drdWJtVmxaSE5WY0dSaGRHVWdQU0FoTUNrN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJR0Z2S0hSb2FYTXVZbTl1WlhNc0lIUm9hWE11WW05dVpVbHVkbVZ5YzJWektUc0tJQ0FnSUgwS0lDQWdJR052YlhCMWRHVkNiMjVsVkdWNGRIVnlaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUUxaGRHZ3VjM0Z5ZENoMGFHbHpMbUp2Ym1WekxteGxibWQwYUNBcUlEUXBPd29nSUNBZ0lDQWdJR1VnUFNCWVl5aGxLU3dnWlNBOUlFMWhkR2d1YldGNEtHVXNJRFFwT3dvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2hsSUNvZ1pTQXFJRFFwT3dvZ0lDQWdJQ0FnSUhRdWMyVjBLSFJvYVhNdVltOXVaVTFoZEhKcFkyVnpLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRzVsZHlCeGJpaDBMQ0JsTENCbExDQmpkQ3dnYm00cE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdUxtNWxaV1J6VlhCa1lYUmxJRDBnSVRBc0lIUm9hWE11WW05dVpVMWhkSEpwWTJWeklEMGdkQ3dnZEdocGN5NWliMjVsVkdWNGRIVnlaU0E5SUc0c0lIUm9hWE11WW05dVpWUmxlSFIxY21WVGFYcGxJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRFSnZibVZDZVU1aGJXVW9aU2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZENBOUlEQXNJRzRnUFNCMGFHbHpMbUp2Ym1WekxteGxibWQwYURzZ2RDQThJRzQ3SUhRckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NWliMjVsYzF0MFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa3VibUZ0WlNBOVBUMGdaU2tnY21WMGRYSnVJR2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1KdmJtVlVaWGgwZFhKbElDRTlQU0J1ZFd4c0lDWW1JQ2gwYUdsekxtSnZibVZVWlhoMGRYSmxMbVJwYzNCdmMyVW9LU3dnZEdocGN5NWliMjVsVkdWNGRIVnlaU0E5SUc1MWJHd3BPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVcFRUMDRvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWRYVnBaQ0E5SUdVdWRYVnBaRHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnWlM1aWIyNWxjeTVzWlc1bmRHZzdJRzRnUENCcE95QnVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHVXVZbTl1WlhOYmJsMHNJRzhnUFNCMFczSmRPd29nSUNBZ0lDQWdJQ0FnSUNCdklEMDlQU0IyYjJsa0lEQWdKaVlnS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVUydGxiR1YwYjI0NklFNXZJR0p2Ym1VZ1ptOTFibVFnZDJsMGFDQlZWVWxFT2lJc0lISXBMQ0J2SUQwZ2JtVjNJRzl2S1N3Z2RHaHBjeTVpYjI1bGN5NXdkWE5vS0c4cExDQjBhR2x6TG1KdmJtVkpiblpsY25ObGN5NXdkWE5vS0c1bGR5QndaU2dwTG1aeWIyMUJjbkpoZVNobExtSnZibVZKYm5abGNuTmxjMXR1WFNrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYm1sMEtDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUcxbGRHRmtZWFJoT2lCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMlpYSnphVzl1T2lBMExqVXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBaVUydGxiR1YwYjI0aUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEc5eU9pQWlVMnRsYkdWMGIyNHVkRzlLVTA5T0lnb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQmliMjVsY3pvZ1cxMHNDaUFnSUNBZ0lDQWdJQ0FnSUdKdmJtVkpiblpsY25ObGN6b2dXMTBLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUdVdWRYVnBaQ0E5SUhSb2FYTXVkWFZwWkRzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZbTl1WlhNc0lHNGdQU0IwYUdsekxtSnZibVZKYm5abGNuTmxjenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR2tnUFNBd0xDQnlJRDBnZEM1c1pXNW5kR2c3SUdrZ1BDQnlPeUJwS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSFJiYVYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1V1WW05dVpYTXVjSFZ6YUNodkxuVjFhV1FwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlHNWJhVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVXVZbTl1WlVsdWRtVnljMlZ6TG5CMWMyZ29ZUzUwYjBGeWNtRjVLQ2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlRzS0lDQWdJSDBLZlN3Z1dHNGdQU0JqYkdGemN5QmxlSFJsYm1SeklGVmxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHNJR2tnUFNBeEtYc0tJQ0FnSUNBZ0lDQjBlWEJsYjJZZ2JpQTlQU0FpYm5WdFltVnlJaUFtSmlBb2FTQTlJRzRzSUc0Z1BTQWhNU3dnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVNXNXpkR0Z1WTJWa1FuVm1abVZ5UVhSMGNtbGlkWFJsT2lCVWFHVWdZMjl1YzNSeWRXTjBiM0lnYm05M0lHVjRjR1ZqZEhNZ2JtOXliV0ZzYVhwbFpDQmhjeUIwYUdVZ2RHaHBjbVFnWVhKbmRXMWxiblF1SWlrcE93b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXNJRzRwT3dvZ0lDQWdJQ0FnSUhSb2FYTXViV1Z6YUZCbGNrRjBkSEpwWW5WMFpTQTlJR2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1dFpYTm9VR1Z5UVhSMGNtbGlkWFJsSUQwZ1pTNXRaWE5vVUdWeVFYUjBjbWxpZFhSbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOUtVMDlPS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2MzVndaWEl1ZEc5S1UwOU9LQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1YldWemFGQmxja0YwZEhKcFluVjBaU0E5SUhSb2FYTXViV1Z6YUZCbGNrRjBkSEpwWW5WMFpTd2daUzVwYzBsdWMzUmhibU5sWkVKMVptWmxja0YwZEhKcFluVjBaU0E5SUNFd0xDQmxPd29nSUNBZ2ZRcDlPd3BZYmk1d2NtOTBiM1I1Y0dVdWFYTkpibk4wWVc1alpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVZ1BTQWhNRHNLZG1GeUlITmpJRDBnYm1WM0lIQmxMQ0J2WXlBOUlHNWxkeUJ3WlN3Z2NITWdQU0JiWFN3Z2RISWdQU0J1WlhjZ2MzUXNJSGhoSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJ6ZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1sdWMzUmhibU5sVFdGMGNtbDRJRDBnYm1WM0lGaHVLRzVsZHlCR2JHOWhkRE15UVhKeVlYa29iaUFxSURFMktTd2dNVFlwTENCMGFHbHpMbWx1YzNSaGJtTmxRMjlzYjNJZ1BTQnVkV3hzTENCMGFHbHpMbU52ZFc1MElEMGdiaXdnZEdocGN5NW1jblZ6ZEhWdFEzVnNiR1ZrSUQwZ0lURTdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTVwYm5OMFlXNWpaVTFoZEhKcGVDNWpiM0I1S0dVdWFXNXpkR0Z1WTJWTllYUnlhWGdwTENCbExtbHVjM1JoYm1ObFEyOXNiM0lnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11YVc1emRHRnVZMlZEYjJ4dmNpQTlJR1V1YVc1emRHRnVZMlZEYjJ4dmNpNWpiRzl1WlNncEtTd2dkR2hwY3k1amIzVnVkQ0E5SUdVdVkyOTFiblFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSRGIyeHZja0YwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwTG1aeWIyMUJjbkpoZVNoMGFHbHpMbWx1YzNSaGJtTmxRMjlzYjNJdVlYSnlZWGtzSUdVZ0tpQXpLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFMWhkSEpwZUVGMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMExtWnliMjFCY25KaGVTaDBhR2x6TG1sdWMzUmhibU5sVFdGMGNtbDRMbUZ5Y21GNUxDQmxJQ29nTVRZcE93b2dJQ0FnZlFvZ0lDQWdjbUY1WTJGemRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbTFoZEhKcGVGZHZjbXhrTENCcElEMGdkR2hwY3k1amIzVnVkRHNLSUNBZ0lDQWdJQ0JwWmlBb2RISXVaMlZ2YldWMGNua2dQU0IwYUdsekxtZGxiMjFsZEhKNUxDQjBjaTV0WVhSbGNtbGhiQ0E5SUhSb2FYTXViV0YwWlhKcFlXd3NJSFJ5TG0xaGRHVnlhV0ZzSUNFOVBTQjJiMmxrSURBcElHWnZjaWhzWlhRZ2NpQTlJREE3SUhJZ1BDQnBPeUJ5S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZGxkRTFoZEhKcGVFRjBLSElzSUhOaktTd2diMk11YlhWc2RHbHdiSGxOWVhSeWFXTmxjeWh1TENCell5a3NJSFJ5TG0xaGRISnBlRmR2Y214a0lEMGdiMk1zSUhSeUxuSmhlV05oYzNRb1pTd2djSE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHOGdQU0F3TENCaElEMGdjSE11YkdWdVozUm9PeUJ2SUR3Z1lUc2dieXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnY0hOYmIxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNMbWx1YzNSaGJtTmxTV1FnUFNCeUxDQnNMbTlpYW1WamRDQTlJSFJvYVhNc0lIUXVjSFZ6YUNoc0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQndjeTVzWlc1bmRHZ2dQU0F3T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lITmxkRU52Ykc5eVFYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YVc1emRHRnVZMlZEYjJ4dmNpQTlQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NXBibk4wWVc1alpVTnZiRzl5SUQwZ2JtVjNJRmh1S0c1bGR5QkdiRzloZERNeVFYSnlZWGtvZEdocGN5NXBibk4wWVc1alpVMWhkSEpwZUM1amIzVnVkQ0FxSURNcExDQXpLU2tzSUhRdWRHOUJjbkpoZVNoMGFHbHpMbWx1YzNSaGJtTmxRMjlzYjNJdVlYSnlZWGtzSUdVZ0tpQXpLVHNLSUNBZ0lIMEtJQ0FnSUhObGRFMWhkSEpwZUVGMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMExuUnZRWEp5WVhrb2RHaHBjeTVwYm5OMFlXNWpaVTFoZEhKcGVDNWhjbkpoZVN3Z1pTQXFJREUyS1RzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlUxdmNuQm9WR0Z5WjJWMGN5Z3BJSHQ5Q2lBZ0lDQmthWE53YjNObEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdVpHbHpjR0YwWTJoRmRtVnVkQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNKa2FYTndiM05sSWdvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnZlFwOU93cDRZUzV3Y205MGIzUjVjR1V1YVhOSmJuTjBZVzVqWldSTlpYTm9JRDBnSVRBN0NuWmhjaUJtZENBOUlHTnNZWE56SUdWNGRHVnVaSE1nWkhRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpVEdsdVpVSmhjMmxqVFdGMFpYSnBZV3dpTENCMGFHbHpMbU52Ykc5eUlEMGdibVYzSUdGbEtERTJOemMzTWpFMUtTd2dkR2hwY3k1c2FXNWxkMmxrZEdnZ1BTQXhMQ0IwYUdsekxteHBibVZqWVhBZ1BTQWljbTkxYm1RaUxDQjBhR2x6TG14cGJtVnFiMmx1SUQwZ0luSnZkVzVrSWl3Z2RHaHBjeTV6WlhSV1lXeDFaWE1vWlNrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NWpiMnh2Y2k1amIzQjVLR1V1WTI5c2IzSXBMQ0IwYUdsekxteHBibVYzYVdSMGFDQTlJR1V1YkdsdVpYZHBaSFJvTENCMGFHbHpMbXhwYm1WallYQWdQU0JsTG14cGJtVmpZWEFzSUhSb2FYTXViR2x1WldwdmFXNGdQU0JsTG14cGJtVnFiMmx1TENCMGFHbHpPd29nSUNBZ2ZRcDlPd3BtZEM1d2NtOTBiM1I1Y0dVdWFYTk1hVzVsUW1GemFXTk5ZWFJsY21saGJDQTlJQ0V3T3dwMllYSWdZV01nUFNCdVpYY2dUU3dnYkdNZ1BTQnVaWGNnVFN3Z1kyTWdQU0J1WlhjZ2NHVXNJRmh2SUQwZ2JtVjNJRU51TENCdGN5QTlJRzVsZHlCQmJpd2diMjRnUFNCamJHRnpjeUJsZUhSbGJtUnpJRTVsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnWDJVc0lIUWdQU0J1WlhjZ1puUXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSWt4cGJtVWlMQ0IwYUdsekxtZGxiMjFsZEhKNUlEMGdaU3dnZEdocGN5NXRZWFJsY21saGJDQTlJSFFzSUhSb2FYTXVkWEJrWVhSbFRXOXljR2hVWVhKblpYUnpLQ2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1dFlYUmxjbWxoYkNBOUlHVXViV0YwWlhKcFlXd3NJSFJvYVhNdVoyVnZiV1YwY25rZ1BTQmxMbWRsYjIxbGRISjVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZMjl0Y0hWMFpVeHBibVZFYVhOMFlXNWpaWE1vS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMbWRsYjIxbGRISjVPd29nSUNBZ0lDQWdJR2xtSUNobExtbHpRblZtWm1WeVIyVnZiV1YwY25rcElHbG1JQ2hsTG1sdVpHVjRJRDA5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1pTNWhkSFJ5YVdKMWRHVnpMbkJ2YzJsMGFXOXVMQ0J1SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Bb2dJQ0FnSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F4TENCeUlEMGdkQzVqYjNWdWREc2dhU0E4SUhJN0lHa3JLeWxoWXk1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtIUXNJR2tnTFNBeEtTd2diR011Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoMExDQnBLU3dnYmx0cFhTQTlJRzViYVNBdElERmRMQ0J1VzJsZElDczlJR0ZqTG1ScGMzUmhibU5sVkc4b2JHTXBPd29nSUNBZ0lDQWdJQ0FnSUNCbExuTmxkRUYwZEhKcFluVjBaU2dpYkdsdVpVUnBjM1JoYm1ObElpd2dibVYzSUdSbEtHNHNJREVwS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TWFXNWxMbU52YlhCMWRHVk1hVzVsUkdsemRHRnVZMlZ6S0NrNklFTnZiWEIxZEdGMGFXOXVJRzl1YkhrZ2NHOXpjMmxpYkdVZ2QybDBhQ0J1YjI0dGFXNWtaWGhsWkNCQ2RXWm1aWEpIWlc5dFpYUnllUzRpS1RzS0lDQWdJQ0FnSUNCbGJITmxJR1V1YVhOSFpXOXRaWFJ5ZVNBbUppQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVNYVc1bExtTnZiWEIxZEdWTWFXNWxSR2x6ZEdGdVkyVnpLQ2tnYm04Z2JHOXVaMlZ5SUhOMWNIQnZjblJ6SUZSSVVrVkZMa2RsYjIxbGRISjVMaUJWYzJVZ1ZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua2dhVzV6ZEdWaFpDNGlLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lISmhlV05oYzNRb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NW5aVzl0WlhSeWVTd2dhU0E5SUhSb2FYTXViV0YwY21sNFYyOXliR1FzSUhJZ1BTQmxMbkJoY21GdGN5NU1hVzVsTG5Sb2NtVnphRzlzWkN3Z2J5QTlJRzR1WkhKaGQxSmhibWRsT3dvZ0lDQWdJQ0FnSUdsbUlDaHVMbUp2ZFc1a2FXNW5VM0JvWlhKbElEMDlQU0J1ZFd4c0lDWW1JRzR1WTI5dGNIVjBaVUp2ZFc1a2FXNW5VM0JvWlhKbEtDa3NJRzF6TG1OdmNIa29iaTVpYjNWdVpHbHVaMU53YUdWeVpTa3NJRzF6TG1Gd2NHeDVUV0YwY21sNE5DaHBLU3dnYlhNdWNtRmthWFZ6SUNzOUlISXNJR1V1Y21GNUxtbHVkR1Z5YzJWamRITlRjR2hsY21Vb2JYTXBJRDA5UFNBaE1Ta2djbVYwZFhKdU93b2dJQ0FnSUNBZ0lHTmpMbU52Y0hrb2FTa3VhVzUyWlhKMEtDa3NJRmh2TG1OdmNIa29aUzV5WVhrcExtRndjR3g1VFdGMGNtbDROQ2hqWXlrN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCeUlDOGdLQ2gwYUdsekxuTmpZV3hsTG5nZ0t5QjBhR2x6TG5OallXeGxMbmtnS3lCMGFHbHpMbk5qWVd4bExub3BJQzhnTXlrc0lHd2dQU0JoSUNvZ1lTd2dZeUE5SUc1bGR5Qk5MQ0JvSUQwZ2JtVjNJRTBzSUhVZ1BTQnVaWGNnVFN3Z1pDQTlJRzVsZHlCTkxDQm1JRDBnZEdocGN5NXBjMHhwYm1WVFpXZHRaVzUwY3lBL0lESWdPaUF4T3dvZ0lDQWdJQ0FnSUdsbUlDaHVMbWx6UW5WbVptVnlSMlZ2YldWMGNua3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzBnUFNCdUxtbHVaR1Y0TENCMklEMGdiaTVoZEhSeWFXSjFkR1Z6TG5CdmMybDBhVzl1T3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYlNBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2NnUFNCTllYUm9MbTFoZUNnd0xDQnZMbk4wWVhKMEtTd2djQ0E5SUUxaGRHZ3ViV2x1S0cwdVkyOTFiblFzSUc4dWMzUmhjblFnS3lCdkxtTnZkVzUwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWHlBOUlHY3NJSGtnUFNCd0lDMGdNVHNnWHlBOElIazdJRjhnS3owZ1ppbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHSWdQU0J0TG1kbGRGZ29YeWtzSUVFZ1BTQnRMbWRsZEZnb1h5QXJJREVwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2Rpd2dZaWtzSUdndVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaDJMQ0JCS1N3Z1dHOHVaR2x6ZEdGdVkyVlRjVlJ2VTJWbmJXVnVkQ2hqTENCb0xDQmtMQ0IxS1NBK0lHd3BJR052Ym5ScGJuVmxPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdRdVlYQndiSGxOWVhSeWFYZzBLSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQkpJRDBnWlM1eVlYa3ViM0pwWjJsdUxtUnBjM1JoYm1ObFZHOG9aQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1NTQThJR1V1Ym1WaGNpQjhmQ0JKSUQ0Z1pTNW1ZWElnZkh3Z2RDNXdkWE5vS0hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemRHRnVZMlU2SUVrc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmFXNTBPaUIxTG1Oc2IyNWxLQ2t1WVhCd2JIbE5ZWFJ5YVhnMEtIUm9hWE11YldGMGNtbDRWMjl5YkdRcExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRG9nWHl3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GalpUb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1GalpVbHVaR1Y0T2lCdWRXeHNMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbXBsWTNRNklIUm9hWE1LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbklEMGdUV0YwYUM1dFlYZ29NQ3dnYnk1emRHRnlkQ2tzSUhBZ1BTQk5ZWFJvTG0xcGJpaDJMbU52ZFc1MExDQnZMbk4wWVhKMElDc2dieTVqYjNWdWRDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGOGdQU0JuTENCNUlEMGdjQ0F0SURFN0lGOGdQQ0I1T3lCZklDczlJR1lwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2Rpd2dYeWtzSUdndVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaDJMQ0JmSUNzZ01Ta3NJRmh2TG1ScGMzUmhibU5sVTNGVWIxTmxaMjFsYm5Rb1l5d2dhQ3dnWkN3Z2RTa2dQaUJzS1NCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtMbUZ3Y0d4NVRXRjBjbWw0TkNoMGFHbHpMbTFoZEhKcGVGZHZjbXhrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUVNBOUlHVXVjbUY1TG05eWFXZHBiaTVrYVhOMFlXNWpaVlJ2S0dRcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUVnUENCbExtNWxZWElnZkh3Z1FTQStJR1V1Wm1GeUlIeDhJSFF1Y0hWemFDaDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM1JoYm1ObE9pQkJMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiMmx1ZERvZ2RTNWpiRzl1WlNncExtRndjR3g1VFdGMGNtbDROQ2gwYUdsekxtMWhkSEpwZUZkdmNteGtLU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklGOHNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhZMlU2SUc1MWJHd3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhZMlZKYm1SbGVEb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBPaUIwYUdsekNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2JpNXBjMGRsYjIxbGRISjVJQ1ltSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxreHBibVV1Y21GNVkyRnpkQ2dwSUc1dklHeHZibWRsY2lCemRYQndiM0owY3lCVVNGSkZSUzVIWlc5dFpYUnllUzRnVlhObElGUklVa1ZGTGtKMVptWmxja2RsYjIxbGRISjVJR2x1YzNSbFlXUXVJaWs3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZOYjNKd2FGUmhjbWRsZEhNb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1kbGIyMWxkSEo1T3dvZ0lDQWdJQ0FnSUdsbUlDaGxMbWx6UW5WbVptVnlSMlZ2YldWMGNua3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbExtMXZjbkJvUVhSMGNtbGlkWFJsY3l3Z2JpQTlJRTlpYW1WamRDNXJaWGx6S0hRcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpNXNaVzVuZEdnZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJiYmxzd1hWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRiM0p3YUZSaGNtZGxkRWx1Wm14MVpXNWpaWE1nUFNCYlhTd2dkR2hwY3k1dGIzSndhRlJoY21kbGRFUnBZM1JwYjI1aGNua2dQU0I3ZlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElISWdQU0F3TENCdklEMGdhUzVzWlc1bmRHZzdJSElnUENCdk95QnlLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJR2xiY2wwdWJtRnRaU0I4ZkNCVGRISnBibWNvY2lrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJKYm1ac2RXVnVZMlZ6TG5CMWMyZ29NQ2tzSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJFYVdOMGFXOXVZWEo1VzJGZElEMGdjanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdWJXOXljR2hVWVhKblpYUnpPd29nSUNBZ0lDQWdJQ0FnSUNCMElDRTlQU0IyYjJsa0lEQWdKaVlnZEM1c1pXNW5kR2dnUGlBd0lDWW1JR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGt4cGJtVXVkWEJrWVhSbFRXOXljR2hVWVhKblpYUnpLQ2tnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0JVU0ZKRlJTNUhaVzl0WlhSeWVTNGdWWE5sSUZSSVVrVkZMa0oxWm1abGNrZGxiMjFsZEhKNUlHbHVjM1JsWVdRdUlpazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZRcDlPd3B2Ymk1d2NtOTBiM1I1Y0dVdWFYTk1hVzVsSUQwZ0lUQTdDblpoY2lCb1l5QTlJRzVsZHlCTkxDQjFZeUE5SUc1bGR5Qk5MQ0IzZENBOUlHTnNZWE56SUdWNGRHVnVaSE1nYjI0Z2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU3dnZENrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJa3hwYm1WVFpXZHRaVzUwY3lJN0NpQWdJQ0I5Q2lBZ0lDQmpiMjF3ZFhSbFRHbHVaVVJwYzNSaGJtTmxjeWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVaMlZ2YldWMGNuazdDaUFnSUNBZ0lDQWdhV1lnS0dVdWFYTkNkV1ptWlhKSFpXOXRaWFJ5ZVNrZ2FXWWdLR1V1YVc1a1pYZ2dQVDA5SUc1MWJHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCbExtRjBkSEpwWW5WMFpYTXVjRzl6YVhScGIyNHNJRzRnUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUhRdVkyOTFiblE3SUdrZ1BDQnlPeUJwSUNzOUlESXBhR011Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoMExDQnBLU3dnZFdNdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaDBMQ0JwSUNzZ01Ta3NJRzViYVYwZ1BTQnBJRDA5UFNBd0lEOGdNQ0E2SUc1YmFTQXRJREZkTENCdVcya2dLeUF4WFNBOUlHNWJhVjBnS3lCb1l5NWthWE4wWVc1alpWUnZLSFZqS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaUzV6WlhSQmRIUnlhV0oxZEdVb0lteHBibVZFYVhOMFlXNWpaU0lzSUc1bGR5QmtaU2h1TENBeEtTazdDaUFnSUNBZ0lDQWdmU0JsYkhObElHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVUR2x1WlZObFoyMWxiblJ6TG1OdmJYQjFkR1ZNYVc1bFJHbHpkR0Z1WTJWektDazZJRU52YlhCMWRHRjBhVzl1SUc5dWJIa2djRzl6YzJsaWJHVWdkMmwwYUNCdWIyNHRhVzVrWlhobFpDQkNkV1ptWlhKSFpXOXRaWFJ5ZVM0aUtUc0tJQ0FnSUNBZ0lDQmxiSE5sSUdVdWFYTkhaVzl0WlhSeWVTQW1KaUJqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1TWFXNWxVMlZuYldWdWRITXVZMjl0Y0hWMFpVeHBibVZFYVhOMFlXNWpaWE1vS1NCdWJ5QnNiMjVuWlhJZ2MzVndjRzl5ZEhNZ1ZFaFNSVVV1UjJWdmJXVjBjbmt1SUZWelpTQlVTRkpGUlM1Q2RXWm1aWEpIWlc5dFpYUnllU0JwYm5OMFpXRmtMaUlwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFwOU93cDNkQzV3Y205MGIzUjVjR1V1YVhOTWFXNWxVMlZuYldWdWRITWdQU0FoTURzS2RtRnlJSGxoSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJ2YmlCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlUR2x1WlV4dmIzQWlPd29nSUNBZ2ZRcDlPd3A1WVM1d2NtOTBiM1I1Y0dVdWFYTk1hVzVsVEc5dmNDQTlJQ0V3T3dwMllYSWdhbTRnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1IwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJbEJ2YVc1MGMwMWhkR1Z5YVdGc0lpd2dkR2hwY3k1amIyeHZjaUE5SUc1bGR5QmhaU2d4TmpjM056SXhOU2tzSUhSb2FYTXViV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJRzUxYkd3c0lIUm9hWE11YzJsNlpTQTlJREVzSUhSb2FYTXVjMmw2WlVGMGRHVnVkV0YwYVc5dUlEMGdJVEFzSUhSb2FYTXVjMlYwVm1Gc2RXVnpLR1VwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdVkyOXNiM0l1WTI5d2VTaGxMbU52Ykc5eUtTd2dkR2hwY3k1dFlYQWdQU0JsTG0xaGNDd2dkR2hwY3k1aGJIQm9ZVTFoY0NBOUlHVXVZV3h3YUdGTllYQXNJSFJvYVhNdWMybDZaU0E5SUdVdWMybDZaU3dnZEdocGN5NXphWHBsUVhSMFpXNTFZWFJwYjI0Z1BTQmxMbk5wZW1WQmRIUmxiblZoZEdsdmJpd2dkR2hwY3pzS0lDQWdJSDBLZlRzS2FtNHVjSEp2ZEc5MGVYQmxMbWx6VUc5cGJuUnpUV0YwWlhKcFlXd2dQU0FoTURzS2RtRnlJR1JqSUQwZ2JtVjNJSEJsTENCellTQTlJRzVsZHlCRGJpd2daM01nUFNCdVpYY2dRVzRzSUhoeklEMGdibVYzSUUwc0lIcHlJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5Qk9aU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JtVjNJRjlsTENCMElEMGdibVYzSUdwdUtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pRYjJsdWRITWlMQ0IwYUdsekxtZGxiMjFsZEhKNUlEMGdaU3dnZEdocGN5NXRZWFJsY21saGJDQTlJSFFzSUhSb2FYTXVkWEJrWVhSbFRXOXljR2hVWVhKblpYUnpLQ2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1dFlYUmxjbWxoYkNBOUlHVXViV0YwWlhKcFlXd3NJSFJvYVhNdVoyVnZiV1YwY25rZ1BTQmxMbWRsYjIxbGRISjVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjbUY1WTJGemRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbWRsYjIxbGRISjVMQ0JwSUQwZ2RHaHBjeTV0WVhSeWFYaFhiM0pzWkN3Z2NpQTlJR1V1Y0dGeVlXMXpMbEJ2YVc1MGN5NTBhSEpsYzJodmJHUXNJRzhnUFNCdUxtUnlZWGRTWVc1blpUc0tJQ0FnSUNBZ0lDQnBaaUFvYmk1aWIzVnVaR2x1WjFOd2FHVnlaU0E5UFQwZ2JuVnNiQ0FtSmlCdUxtTnZiWEIxZEdWQ2IzVnVaR2x1WjFOd2FHVnlaU2dwTENCbmN5NWpiM0I1S0c0dVltOTFibVJwYm1kVGNHaGxjbVVwTENCbmN5NWhjSEJzZVUxaGRISnBlRFFvYVNrc0lHZHpMbkpoWkdsMWN5QXJQU0J5TENCbExuSmhlUzVwYm5SbGNuTmxZM1J6VTNCb1pYSmxLR2R6S1NBOVBUMGdJVEVwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0JrWXk1amIzQjVLR2twTG1sdWRtVnlkQ2dwTENCellTNWpiM0I1S0dVdWNtRjVLUzVoY0hCc2VVMWhkSEpwZURRb1pHTXBPd29nSUNBZ0lDQWdJR3hsZENCaElEMGdjaUF2SUNnb2RHaHBjeTV6WTJGc1pTNTRJQ3NnZEdocGN5NXpZMkZzWlM1NUlDc2dkR2hwY3k1elkyRnNaUzU2S1NBdklETXBMQ0JzSUQwZ1lTQXFJR0U3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNHVhWE5DZFdabVpYSkhaVzl0WlhSeWVTa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc0dWFXNWtaWGdzSUhVZ1BTQnVMbUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqSUNFOVBTQnVkV3hzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUUxaGRHZ3ViV0Y0S0RBc0lHOHVjM1JoY25RcExDQm1JRDBnVFdGMGFDNXRhVzRvWXk1amIzVnVkQ3dnYnk1emRHRnlkQ0FySUc4dVkyOTFiblFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J0SUQwZ1pDd2dlQ0E5SUdZN0lHMGdQQ0I0T3lCdEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnWXk1blpYUllLRzBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaHpMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvZFN3Z2Rpa3NJR1pqS0hoekxDQjJMQ0JzTENCcExDQmxMQ0IwTENCMGFHbHpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnVFdGMGFDNXRZWGdvTUN3Z2J5NXpkR0Z5ZENrc0lHWWdQU0JOWVhSb0xtMXBiaWgxTG1OdmRXNTBMQ0J2TG5OMFlYSjBJQ3NnYnk1amIzVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzBnUFNCa0xDQjRJRDBnWmpzZ2JTQThJSGc3SUcwckt5bDRjeTVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0hVc0lHMHBMQ0JtWXloNGN5d2diU3dnYkN3Z2FTd2daU3dnZEN3Z2RHaHBjeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVRzlwYm5SekxuSmhlV05oYzNRb0tTQnVieUJzYjI1blpYSWdjM1Z3Y0c5eWRITWdWRWhTUlVVdVIyVnZiV1YwY25rdUlGVnpaU0JVU0ZKRlJTNUNkV1ptWlhKSFpXOXRaWFJ5ZVNCcGJuTjBaV0ZrTGlJcE93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFRXOXljR2hVWVhKblpYUnpLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NW5aVzl0WlhSeWVUc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1cGMwSjFabVpsY2tkbGIyMWxkSEo1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMElEMGdaUzV0YjNKd2FFRjBkSEpwWW5WMFpYTXNJRzRnUFNCUFltcGxZM1F1YTJWNWN5aDBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzR1YkdWdVozUm9JRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMFcyNWJNRjFkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5eWNHaFVZWEpuWlhSSmJtWnNkV1Z1WTJWeklEMGdXMTBzSUhSb2FYTXViVzl5Y0doVVlYSm5aWFJFYVdOMGFXOXVZWEo1SUQwZ2UzMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J5SUQwZ01Dd2dieUE5SUdrdWJHVnVaM1JvT3lCeUlEd2dienNnY2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCcFczSmRMbTVoYldVZ2ZId2dVM1J5YVc1bktISXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGN5NXdkWE5vS0RBcExDQjBhR2x6TG0xdmNuQm9WR0Z5WjJWMFJHbGpkR2x2Ym1GeWVWdGhYU0E5SUhJN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbTF2Y25Cb1ZHRnlaMlYwY3pzS0lDQWdJQ0FnSUNBZ0lDQWdkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlIUXViR1Z1WjNSb0lENGdNQ0FtSmlCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVFiMmx1ZEhNdWRYQmtZWFJsVFc5eWNHaFVZWEpuWlhSektDa2daRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQlVTRkpGUlM1SFpXOXRaWFJ5ZVM0Z1ZYTmxJRlJJVWtWRkxrSjFabVpsY2tkbGIyMWxkSEo1SUdsdWMzUmxZV1F1SWlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFwOU93cDZjaTV3Y205MGIzUjVjR1V1YVhOUWIybHVkSE1nUFNBaE1Ec0tablZ1WTNScGIyNGdabU1vY3l3Z1pTd2dkQ3dnYml3Z2FTd2djaXdnYnlrZ2V3b2dJQ0FnYkdWMElHRWdQU0J6WVM1a2FYTjBZVzVqWlZOeFZHOVFiMmx1ZENoektUc0tJQ0FnSUdsbUlDaGhJRHdnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ2JtVjNJRTA3Q2lBZ0lDQWdJQ0FnYzJFdVkyeHZjMlZ6ZEZCdmFXNTBWRzlRYjJsdWRDaHpMQ0JzS1N3Z2JDNWhjSEJzZVUxaGRISnBlRFFvYmlrN0NpQWdJQ0FnSUNBZ2JHVjBJR01nUFNCcExuSmhlUzV2Y21sbmFXNHVaR2x6ZEdGdVkyVlVieWhzS1RzS0lDQWdJQ0FnSUNCcFppQW9ZeUE4SUdrdWJtVmhjaUI4ZkNCaklENGdhUzVtWVhJcElISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCeUxuQjFjMmdvZXdvZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpUb2dZeXdLSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpkR0Z1WTJWVWIxSmhlVG9nVFdGMGFDNXpjWEowS0dFcExBb2dJQ0FnSUNBZ0lDQWdJQ0J3YjJsdWREb2diQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR1poWTJVNklHNTFiR3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lHOWlhbVZqZERvZ2J3b2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ2ZRcDlDblpoY2lCM2FDQTlJR05zWVhOeklHVjRkR1Z1WkhNZ2IzUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2Jpd2dhU3dnY2l3Z2J5d2dZU3dnYkN3Z1l5bDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTd2dkQ3dnYml3Z2FTd2djaXdnYnl3Z1lTd2diQ3dnWXlrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVtYjNKdFlYUWdQU0JoSUNFOVBTQjJiMmxrSURBZ1B5QmhJRG9nUjI0c0lIUm9hWE11YldsdVJtbHNkR1Z5SUQwZ2J5QWhQVDBnZG05cFpDQXdJRDhnYnlBNklIUjBMQ0IwYUdsekxtMWhaMFpwYkhSbGNpQTlJSElnSVQwOUlIWnZhV1FnTUNBL0lISWdPaUIwZEN3Z2RHaHBjeTVuWlc1bGNtRjBaVTFwY0cxaGNITWdQU0FoTVRzS0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUhSb2FYTTdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdkU2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhQzV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0JsTG5KbGNYVmxjM1JXYVdSbGIwWnlZVzFsUTJGc2JHSmhZMnNvZFNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDSnlaWEYxWlhOMFZtbGtaVzlHY21GdFpVTmhiR3hpWVdOcklpQnBiaUJsSUNZbUlHVXVjbVZ4ZFdWemRGWnBaR1Z2Um5KaGJXVkRZV3hzWW1GamF5aDFLVHNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2loMGFHbHpMbWx0WVdkbEtTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NXBiV0ZuWlRzS0lDQWdJQ0FnSUNBaWNtVnhkV1Z6ZEZacFpHVnZSbkpoYldWRFlXeHNZbUZqYXlJZ2FXNGdaU0E5UFQwZ0lURWdKaVlnWlM1eVpXRmtlVk4wWVhSbElENDlJR1V1U0VGV1JWOURWVkpTUlU1VVgwUkJWRUVnSmlZZ0tIUm9hWE11Ym1WbFpITlZjR1JoZEdVZ1BTQWhNQ2s3Q2lBZ0lDQjlDbjA3Q25kb0xuQnliM1J2ZEhsd1pTNXBjMVpwWkdWdlZHVjRkSFZ5WlNBOUlDRXdPd3AyWVhJZ1UyZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklHOTBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRc0lHNHBld29nSUNBZ0lDQWdJSE4xY0dWeUtIc0tJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR1VzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2RBb2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSFJvYVhNdVptOXliV0YwSUQwZ2Jpd2dkR2hwY3k1dFlXZEdhV3gwWlhJZ1BTQnlkQ3dnZEdocGN5NXRhVzVHYVd4MFpYSWdQU0J5ZEN3Z2RHaHBjeTVuWlc1bGNtRjBaVTFwY0cxaGNITWdQU0FoTVN3Z2RHaHBjeTV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ2ZRcDlPd3BUYUM1d2NtOTBiM1I1Y0dVdWFYTkdjbUZ0WldKMVptWmxjbFJsZUhSMWNtVWdQU0FoTURzS2RtRnlJSFpoSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJ2ZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcExDQnlMQ0J2TENCaExDQnNMQ0JqTENCb0xDQjFMQ0JrS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWh1ZFd4c0xDQnZMQ0JoTENCc0xDQmpMQ0JvTENCcExDQnlMQ0IxTENCa0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1sdFlXZGxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBPaUJ1Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV0YVhCdFlYQnpJRDBnWlN3Z2RHaHBjeTVtYkdsd1dTQTlJQ0V4TENCMGFHbHpMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJQ0V4T3dvZ0lDQWdmUXA5T3dwMllTNXdjbTkwYjNSNWNHVXVhWE5EYjIxd2NtVnpjMlZrVkdWNGRIVnlaU0E5SUNFd093cDJZWElnVkdnZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUc5MElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0c0lHa3NJSElzSUc4c0lHRXNJR3dzSUdNcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXNJRzRzSUdrc0lISXNJRzhzSUdFc0lHd3NJR01wT3dvZ0lDQWdJQ0FnSUhSb2FYTXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Ec0tJQ0FnSUgwS2ZUc0tWR2d1Y0hKdmRHOTBlWEJsTG1selEyRnVkbUZ6VkdWNGRIVnlaU0E5SUNFd093cDJZWElnWm5JZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUY5bElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TENCMElEMGdPQ3dnYmlBOUlEQXNJR2tnUFNCTllYUm9MbEJKSUNvZ01pbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpUTJseVkyeGxSMlZ2YldWMGNua2lMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmhaR2wxY3pvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnYzJWbmJXVnVkSE02SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJSFJvWlhSaFUzUmhjblE2SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJSFJvWlhSaFRHVnVaM1JvT2lCcENpQWdJQ0FnSUNBZ2ZTd2dkQ0E5SUUxaGRHZ3ViV0Y0S0RNc0lIUXBPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdXMTBzSUc4Z1BTQmJYU3dnWVNBOUlGdGRMQ0JzSUQwZ1cxMHNJR01nUFNCdVpYY2dUU3dnYUNBOUlHNWxkeUJZT3dvZ0lDQWdJQ0FnSUc4dWNIVnphQ2d3TENBd0xDQXdLU3dnWVM1d2RYTm9LREFzSURBc0lERXBMQ0JzTG5CMWMyZ29MalVzSUM0MUtUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIVWdQU0F3TENCa0lEMGdNenNnZFNBOFBTQjBPeUIxS3lzc0lHUWdLejBnTXlsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbUlEMGdiaUFySUhVZ0x5QjBJQ29nYVRzS0lDQWdJQ0FnSUNBZ0lDQWdZeTU0SUQwZ1pTQXFJRTFoZEdndVkyOXpLR1lwTENCakxua2dQU0JsSUNvZ1RXRjBhQzV6YVc0b1ppa3NJRzh1Y0hWemFDaGpMbmdzSUdNdWVTd2dZeTU2S1N3Z1lTNXdkWE5vS0RBc0lEQXNJREVwTENCb0xuZ2dQU0FvYjF0a1hTQXZJR1VnS3lBeEtTQXZJRElzSUdndWVTQTlJQ2h2VzJRZ0t5QXhYU0F2SUdVZ0t5QXhLU0F2SURJc0lHd3VjSFZ6YUNob0xuZ3NJR2d1ZVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RTQTlJREU3SUhVZ1BEMGdkRHNnZFNzcktYSXVjSFZ6YUNoMUxDQjFJQ3NnTVN3Z01DazdDaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkpibVJsZUNoeUtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaXdnYm1WM0lHUmxLRzhzSURNcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbTV2Y20xaGJDSXNJRzVsZHlCa1pTaGhMQ0F6S1Nrc0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbEtDSjFkaUlzSUc1bGR5QmtaU2hzTENBeUtTazdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1puSW9aUzV5WVdScGRYTXNJR1V1YzJWbmJXVnVkSE1zSUdVdWRHaGxkR0ZUZEdGeWRDd2daUzUwYUdWMFlVeGxibWQwYUNrN0NpQWdJQ0I5Q24wc0lFcHVJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmZaU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ01Td2dkQ0E5SURFc0lHNGdQU0F4TENCcElEMGdPQ3dnY2lBOUlERXNJRzhnUFNBaE1Td2dZU0E5SURBc0lHd2dQU0JOWVhSb0xsQkpJQ29nTWlsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlRM2xzYVc1a1pYSkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6Vkc5d09pQmxMQW9nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE5DYjNSMGIyMDZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2Jpd0tJQ0FnSUNBZ0lDQWdJQ0FnY21Ga2FXRnNVMlZuYldWdWRITTZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZEZObFoyMWxiblJ6T2lCeUxBb2dJQ0FnSUNBZ0lDQWdJQ0J2Y0dWdVJXNWtaV1E2SUc4c0NpQWdJQ0FnSUNBZ0lDQWdJSFJvWlhSaFUzUmhjblE2SUdFc0NpQWdJQ0FnSUNBZ0lDQWdJSFJvWlhSaFRHVnVaM1JvT2lCc0NpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlIUm9hWE03Q2lBZ0lDQWdJQ0FnYVNBOUlFMWhkR2d1Wm14dmIzSW9hU2tzSUhJZ1BTQk5ZWFJvTG1ac2IyOXlLSElwT3dvZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnVzEwc0lIVWdQU0JiWFN3Z1pDQTlJRnRkTENCbUlEMGdXMTBzSUcwZ1BTQXdMQ0I0SUQwZ1cxMHNJSFlnUFNCdUlDOGdNaXdnWnlBOUlEQTdDaUFnSUNBZ0lDQWdjQ2dwTENCdklEMDlQU0FoTVNBbUppQW9aU0ErSURBZ0ppWWdYeWdoTUNrc0lIUWdQaUF3SUNZbUlGOG9JVEVwS1N3Z2RHaHBjeTV6WlhSSmJtUmxlQ2hvS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUdSbEtIVXNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0ltNXZjbTFoYkNJc0lHNWxkeUJrWlNoa0xDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKMWRpSXNJRzVsZHlCa1pTaG1MQ0F5S1NrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NDZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGtnUFNCdVpYY2dUU3dnWWlBOUlHNWxkeUJOTENCQklEMGdNQ3dnVENBOUlDaDBJQzBnWlNrZ0x5QnVPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVrZ1BTQXdPeUJKSUR3OUlISTdJRWtyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdheUE5SUZ0ZExDQkNJRDBnU1NBdklISXNJRkFnUFNCQ0lDb2dLSFFnTFNCbEtTQXJJR1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGNnUFNBd095QjNJRHc5SUdrN0lIY3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRVVnUFNCM0lDOGdhU3dnUkNBOUlFVWdLaUJzSUNzZ1lTd2dWU0E5SUUxaGRHZ3VjMmx1S0VRcExDQkdJRDBnVFdGMGFDNWpiM01vUkNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZaTU0SUQwZ1VDQXFJRlVzSUdJdWVTQTlJQzFDSUNvZ2JpQXJJSFlzSUdJdWVpQTlJRkFnS2lCR0xDQjFMbkIxYzJnb1lpNTRMQ0JpTG5rc0lHSXVlaWtzSUhrdWMyVjBLRlVzSUV3c0lFWXBMbTV2Y20xaGJHbDZaU2dwTENCa0xuQjFjMmdvZVM1NExDQjVMbmtzSUhrdWVpa3NJR1l1Y0hWemFDaEZMQ0F4SUMwZ1Fpa3NJR3N1Y0hWemFDaHRLeXNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUM1d2RYTm9LR3NwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnU1NBOUlEQTdJRWtnUENCcE95QkpLeXNwWm05eUtHeGxkQ0JySUQwZ01Ec2dheUE4SUhJN0lHc3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1FpQTlJSGhiYTExYlNWMHNJRkFnUFNCNFcyc2dLeUF4WFZ0SlhTd2dkeUE5SUhoYmF5QXJJREZkVzBrZ0t5QXhYU3dnUlNBOUlIaGJhMTFiU1NBcklERmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhQzV3ZFhOb0tFSXNJRkFzSUVVcExDQm9MbkIxYzJnb1VDd2dkeXdnUlNrc0lFRWdLejBnTmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCakxtRmtaRWR5YjNWd0tHY3NJRUVzSURBcExDQm5JQ3M5SUVFN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGOG9lU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlHMHNJRUVnUFNCdVpYY2dXQ3dnVENBOUlHNWxkeUJOTENCSklEMGdNQ3dnYXlBOUlIa2dQVDA5SUNFd0lEOGdaU0E2SUhRc0lFSWdQU0I1SUQwOVBTQWhNQ0EvSURFZ09pQXRNVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCM0lEMGdNVHNnZHlBOFBTQnBPeUIzS3lzcGRTNXdkWE5vS0RBc0lIWWdLaUJDTENBd0tTd2daQzV3ZFhOb0tEQXNJRUlzSURBcExDQm1MbkIxYzJnb0xqVXNJQzQxS1N3Z2JTc3JPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdVQ0E5SUcwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdkeUE5SURBN0lIY2dQRDBnYVRzZ2R5c3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCRUlEMGdkeUF2SUdrZ0tpQnNJQ3NnWVN3Z1ZTQTlJRTFoZEdndVkyOXpLRVFwTENCR0lEMGdUV0YwYUM1emFXNG9SQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNTG5nZ1BTQnJJQ29nUml3Z1RDNTVJRDBnZGlBcUlFSXNJRXd1ZWlBOUlHc2dLaUJWTENCMUxuQjFjMmdvVEM1NExDQk1MbmtzSUV3dWVpa3NJR1F1Y0hWemFDZ3dMQ0JDTENBd0tTd2dRUzU0SUQwZ1ZTQXFJQzQxSUNzZ0xqVXNJRUV1ZVNBOUlFWWdLaUF1TlNBcUlFSWdLeUF1TlN3Z1ppNXdkWE5vS0VFdWVDd2dRUzU1S1N3Z2JTc3JPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdkeUE5SURBN0lIY2dQQ0JwT3lCM0t5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVVZ1BTQmlJQ3NnZHl3Z1JDQTlJRkFnS3lCM093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQTlQVDBnSVRBZ1B5Qm9MbkIxYzJnb1JDd2dSQ0FySURFc0lFVXBJRG9nYUM1d2RYTm9LRVFnS3lBeExDQkVMQ0JGS1N3Z1NTQXJQU0F6T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdNdVlXUmtSM0p2ZFhBb1p5d2dTU3dnZVNBOVBUMGdJVEFnUHlBeElEb2dNaWtzSUdjZ0t6MGdTVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTbTRvWlM1eVlXUnBkWE5VYjNBc0lHVXVjbUZrYVhWelFtOTBkRzl0TENCbExtaGxhV2RvZEN3Z1pTNXlZV1JwWVd4VFpXZHRaVzUwY3l3Z1pTNW9aV2xuYUhSVFpXZHRaVzUwY3l3Z1pTNXZjR1Z1Ulc1a1pXUXNJR1V1ZEdobGRHRlRkR0Z5ZEN3Z1pTNTBhR1YwWVV4bGJtZDBhQ2s3Q2lBZ0lDQjlDbjBzSUhCeUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCS2JpQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnTVN3Z2RDQTlJREVzSUc0Z1BTQTRMQ0JwSUQwZ01Td2djaUE5SUNFeExDQnZJRDBnTUN3Z1lTQTlJRTFoZEdndVVFa2dLaUF5S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWd3TENCbExDQjBMQ0J1TENCcExDQnlMQ0J2TENCaEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpUTI5dVpVZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE02SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthV0ZzVTJWbmJXVnVkSE02SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2RGTmxaMjFsYm5Sek9pQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCdmNHVnVSVzVrWldRNklISXNDaUFnSUNBZ0lDQWdJQ0FnSUhSb1pYUmhVM1JoY25RNklHOHNDaUFnSUNBZ0lDQWdJQ0FnSUhSb1pYUmhUR1Z1WjNSb09pQmhDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJtY205dFNsTlBUaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QndjaWhsTG5KaFpHbDFjeXdnWlM1b1pXbG5hSFFzSUdVdWNtRmthV0ZzVTJWbmJXVnVkSE1zSUdVdWFHVnBaMmgwVTJWbmJXVnVkSE1zSUdVdWIzQmxia1Z1WkdWa0xDQmxMblJvWlhSaFUzUmhjblFzSUdVdWRHaGxkR0ZNWlc1bmRHZ3BPd29nSUNBZ2ZRcDlMQ0JoYmlBOUlHTnNZWE56SUdWNGRHVnVaSE1nWDJVZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRnRkTENCMElEMGdXMTBzSUc0Z1BTQXhMQ0JwSUQwZ01DbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpVUc5c2VXaGxaSEp2YmtkbGIyMWxkSEo1SWl3Z2RHaHBjeTV3WVhKaGJXVjBaWEp6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWlhKMGFXTmxjem9nWlN3S0lDQWdJQ0FnSUNBZ0lDQWdhVzVrYVdObGN6b2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0JrWlhSaGFXdzZJR2tLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnVzEwc0lHOGdQU0JiWFRzS0lDQWdJQ0FnSUNCaEtHa3BMQ0JqS0c0cExDQm9LQ2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUJrWlNoeUxDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKdWIzSnRZV3dpTENCdVpYY2daR1VvY2k1emJHbGpaU2dwTENBektTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0oxZGlJc0lHNWxkeUJrWlNodkxDQXlLU2tzSUdrZ1BUMDlJREFnUHlCMGFHbHpMbU52YlhCMWRHVldaWEowWlhoT2IzSnRZV3h6S0NrZ09pQjBhR2x6TG01dmNtMWhiR2w2WlU1dmNtMWhiSE1vS1RzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCaEtIQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCdVpYY2dUU3dnZVNBOUlHNWxkeUJOTENCaUlEMGdibVYzSUUwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdRU0E5SURBN0lFRWdQQ0IwTG14bGJtZDBhRHNnUVNBclBTQXpLV1lvZEZ0QklDc2dNRjBzSUY4cExDQm1LSFJiUVNBcklERmRMQ0I1S1N3Z1ppaDBXMEVnS3lBeVhTd2dZaWtzSUd3b1h5d2dlU3dnWWl3Z2NDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR3dvY0N3Z1h5d2dlU3dnWWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1FTQTlJR0lnS3lBeExDQk1JRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdTU0E5SURBN0lFa2dQRDBnUVRzZ1NTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXhiU1YwZ1BTQmJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcklEMGdjQzVqYkc5dVpTZ3BMbXhsY25Bb2VTd2dTU0F2SUVFcExDQkNJRDBnWHk1amJHOXVaU2dwTG14bGNuQW9lU3dnU1NBdklFRXBMQ0JRSUQwZ1FTQXRJRWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGNnUFNBd095QjNJRHc5SUZBN0lIY3JLeWwzSUQwOVBTQXdJQ1ltSUVrZ1BUMDlJRUVnUHlCTVcwbGRXM2RkSUQwZ2F5QTZJRXhiU1YxYmQxMGdQU0JyTG1Oc2IyNWxLQ2t1YkdWeWNDaENMQ0IzSUM4Z1VDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkpJRDBnTURzZ1NTQThJRUU3SUVrckt5bG1iM0lvYkdWMElHc2dQU0F3T3lCcklEd2dNaUFxSUNoQklDMGdTU2tnTFNBeE95QnJLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFSWdQU0JOWVhSb0xtWnNiMjl5S0dzZ0x5QXlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3NnSlNBeUlEMDlQU0F3SUQ4Z0tHUW9URnRKWFZ0Q0lDc2dNVjBwTENCa0tFeGJTU0FySURGZFcwSmRLU3dnWkNoTVcwbGRXMEpkS1NrZ09pQW9aQ2hNVzBsZFcwSWdLeUF4WFNrc0lHUW9URnRKSUNzZ01WMWJRaUFySURGZEtTd2daQ2hNVzBrZ0t5QXhYVnRDWFNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdNb2NDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdYeUE5SUc1bGR5Qk5Pd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhrZ1BTQXdPeUI1SUR3Z2NpNXNaVzVuZEdnN0lIa2dLejBnTXlsZkxuZ2dQU0J5VzNrZ0t5QXdYU3dnWHk1NUlEMGdjbHQ1SUNzZ01WMHNJRjh1ZWlBOUlISmJlU0FySURKZExDQmZMbTV2Y20xaGJHbDZaU2dwTG0xMWJIUnBjR3g1VTJOaGJHRnlLSEFwTENCeVcza2dLeUF3WFNBOUlGOHVlQ3dnY2x0NUlDc2dNVjBnUFNCZkxua3NJSEpiZVNBcklESmRJRDBnWHk1Nk93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm9LQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlHNWxkeUJOT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGOGdQU0F3T3lCZklEd2djaTVzWlc1bmRHZzdJRjhnS3owZ015bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndMbmdnUFNCeVcxOGdLeUF3WFN3Z2NDNTVJRDBnY2x0ZklDc2dNVjBzSUhBdWVpQTlJSEpiWHlBcklESmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhrZ1BTQjJLSEFwSUM4Z01pQXZJRTFoZEdndVVFa2dLeUF1TlN3Z1lpQTlJR2NvY0NrZ0x5Qk5ZWFJvTGxCSklDc2dMalU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2TG5CMWMyZ29lU3dnTVNBdElHSXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJRzBvS1N3Z2RTZ3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUIxS0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEFnUFNBd095QndJRHdnYnk1c1pXNW5kR2c3SUhBZ0t6MGdOaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1h5QTlJRzliY0NBcklEQmRMQ0I1SUQwZ2IxdHdJQ3NnTWwwc0lHSWdQU0J2VzNBZ0t5QTBYU3dnUVNBOUlFMWhkR2d1YldGNEtGOHNJSGtzSUdJcExDQk1JRDBnVFdGMGFDNXRhVzRvWHl3Z2VTd2dZaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JCSUQ0Z0xqa2dKaVlnVENBOElDNHhJQ1ltSUNoZklEd2dMaklnSmlZZ0tHOWJjQ0FySURCZElDczlJREVwTENCNUlEd2dMaklnSmlZZ0tHOWJjQ0FySURKZElDczlJREVwTENCaUlEd2dMaklnSmlZZ0tHOWJjQ0FySURSZElDczlJREVwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJrS0hBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY2k1d2RYTm9LSEF1ZUN3Z2NDNTVMQ0J3TG5vcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm1LSEFzSUY4cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIa2dQU0J3SUNvZ016c0tJQ0FnSUNBZ0lDQWdJQ0FnWHk1NElEMGdaVnQ1SUNzZ01GMHNJRjh1ZVNBOUlHVmJlU0FySURGZExDQmZMbm9nUFNCbFcza2dLeUF5WFRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2JTZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEFnUFNCdVpYY2dUU3dnWHlBOUlHNWxkeUJOTENCNUlEMGdibVYzSUUwc0lHSWdQU0J1WlhjZ1RTd2dRU0E5SUc1bGR5QllMQ0JNSUQwZ2JtVjNJRmdzSUVrZ1BTQnVaWGNnV0RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnJJRDBnTUN3Z1FpQTlJREE3SUdzZ1BDQnlMbXhsYm1kMGFEc2dheUFyUFNBNUxDQkNJQ3M5SURZcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDNXpaWFFvY2x0cklDc2dNRjBzSUhKYmF5QXJJREZkTENCeVcyc2dLeUF5WFNrc0lGOHVjMlYwS0hKYmF5QXJJRE5kTENCeVcyc2dLeUEwWFN3Z2NsdHJJQ3NnTlYwcExDQjVMbk5sZENoeVcyc2dLeUEyWFN3Z2NsdHJJQ3NnTjEwc0lISmJheUFySURoZEtTd2dRUzV6WlhRb2IxdENJQ3NnTUYwc0lHOWJRaUFySURGZEtTd2dUQzV6WlhRb2IxdENJQ3NnTWwwc0lHOWJRaUFySUROZEtTd2dTUzV6WlhRb2IxdENJQ3NnTkYwc0lHOWJRaUFySURWZEtTd2dZaTVqYjNCNUtIQXBMbUZrWkNoZktTNWhaR1FvZVNrdVpHbDJhV1JsVTJOaGJHRnlLRE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGQWdQU0IyS0dJcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDaEJMQ0JDSUNzZ01Dd2djQ3dnVUNrc0lIZ29UQ3dnUWlBcklESXNJRjhzSUZBcExDQjRLRWtzSUVJZ0t5QTBMQ0I1TENCUUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCNEtIQXNJRjhzSUhrc0lHSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1lpQThJREFnSmlZZ2NDNTRJRDA5UFNBeElDWW1JQ2h2VzE5ZElEMGdjQzU0SUMwZ01Ta3NJSGt1ZUNBOVBUMGdNQ0FtSmlCNUxub2dQVDA5SURBZ0ppWWdLRzliWDEwZ1BTQmlJQzhnTWlBdklFMWhkR2d1VUVrZ0t5QXVOU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhZb2NDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNWhkR0Z1TWlod0xub3NJQzF3TG5ncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm5LSEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1WVhSaGJqSW9MWEF1ZVN3Z1RXRjBhQzV6Y1hKMEtIQXVlQ0FxSUhBdWVDQXJJSEF1ZWlBcUlIQXVlaWtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCbWNtOXRTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJoYmlobExuWmxjblJwWTJWekxDQmxMbWx1WkdsalpYTXNJR1V1Y21Ga2FYVnpMQ0JsTG1SbGRHRnBiSE1wT3dvZ0lDQWdmUXA5TENCdGNpQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1lXNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURFc0lIUWdQU0F3S1hzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUNneElDc2dUV0YwYUM1emNYSjBLRFVwS1NBdklESXNJR2tnUFNBeElDOGdiaXdnY2lBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTFdrc0NpQWdJQ0FnSUNBZ0lDQWdJQzF1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdGFTd0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FTd0tJQ0FnSUNBZ0lDQWdJQ0FnTFc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lHa3NDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJQzFwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXRiaXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTFdrc0NpQWdJQ0FnSUNBZ0lDQWdJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUdrc0NpQWdJQ0FnSUNBZ0lDQWdJQzF1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNCcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMV2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNHNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJQzFwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXRiaXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnYVN3S0lDQWdJQ0FnSUNBZ0lDQWdiaXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnYVFvZ0lDQWdJQ0FnSUYwc0lHOGdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lETXNDaUFnSUNBZ0lDQWdJQ0FnSURFeExBb2dJQ0FnSUNBZ0lDQWdJQ0EzTEFvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBM0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TlN3S0lDQWdJQ0FnSUNBZ0lDQWdNeXdLSUNBZ0lDQWdJQ0FnSUNBZ01UVXNDaUFnSUNBZ0lDQWdJQ0FnSURFekxBb2dJQ0FnSUNBZ0lDQWdJQ0EzTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhPU3dLSUNBZ0lDQWdJQ0FnSUNBZ01UY3NDaUFnSUNBZ0lDQWdJQ0FnSURjc0NpQWdJQ0FnSUNBZ0lDQWdJREUzTEFvZ0lDQWdJQ0FnSUNBZ0lDQTJMQW9nSUNBZ0lDQWdJQ0FnSUNBM0xBb2dJQ0FnSUNBZ0lDQWdJQ0EyTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhOU3dLSUNBZ0lDQWdJQ0FnSUNBZ01UY3NDaUFnSUNBZ0lDQWdJQ0FnSURRc0NpQWdJQ0FnSUNBZ0lDQWdJRGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTNMQW9nSUNBZ0lDQWdJQ0FnSUNBNExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TUN3S0lDQWdJQ0FnSUNBZ0lDQWdNVGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXdMQW9nSUNBZ0lDQWdJQ0FnSUNBMkxBb2dJQ0FnSUNBZ0lDQWdJQ0E0TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeE5pd0tJQ0FnSUNBZ0lDQWdJQ0FnT0N3S0lDQWdJQ0FnSUNBZ0lDQWdNVFlzQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURnc0NpQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TWl3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNVGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFNExBb2dJQ0FnSUNBZ0lDQWdJQ0F4Tml3S0lDQWdJQ0FnSUNBZ0lDQWdOaXdLSUNBZ0lDQWdJQ0FnSUNBZ01UQXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJRFlzQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURFekxBb2dJQ0FnSUNBZ0lDQWdJQ0EyTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNeXdLSUNBZ0lDQWdJQ0FnSUNBZ01UVXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJREUyTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhPQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01pd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRnc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJREV6TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhPQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnT1N3S0lDQWdJQ0FnSUNBZ0lDQWdNVGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lEa3NDaUFnSUNBZ0lDQWdJQ0FnSURFeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4T0N3S0lDQWdJQ0FnSUNBZ0lDQWdNVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lETXNDaUFnSUNBZ0lDQWdJQ0FnSURRc0NpQWdJQ0FnSUNBZ0lDQWdJREUwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNaXdLSUNBZ0lDQWdJQ0FnSUNBZ05Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRJc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEUXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXhMQW9nSUNBZ0lDQWdJQ0FnSUNBNUxBb2dJQ0FnSUNBZ0lDQWdJQ0ExTEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVRrc0NpQWdJQ0FnSUNBZ0lDQWdJREV4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhPU3dLSUNBZ0lDQWdJQ0FnSUNBZ055d0tJQ0FnSUNBZ0lDQWdJQ0FnTVRrc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTBMQW9nSUNBZ0lDQWdJQ0FnSUNBeE9Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVRRc0NpQWdJQ0FnSUNBZ0lDQWdJRFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERTVMQW9nSUNBZ0lDQWdJQ0FnSUNBMExBb2dJQ0FnSUNBZ0lDQWdJQ0F4Tnl3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01USXNDaUFnSUNBZ0lDQWdJQ0FnSURFMExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhOQ3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ09Rb2dJQ0FnSUNBZ0lGMDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2Npd2dieXdnWlN3Z2RDazdDaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSWtSdlpHVmpZV2hsWkhKdmJrZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE02SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsZEdGcGJEb2dkQW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2diWElvWlM1eVlXUnBkWE1zSUdVdVpHVjBZV2xzS1RzS0lDQWdJSDBLZlN3Z2VYTWdQU0J1WlhjZ1RTd2dkbk1nUFNCdVpYY2dUU3dnU204Z1BTQnVaWGNnVFN3Z1gzTWdQU0J1WlhjZ2JuUXNJRjloSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJmWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdiblZzYkN3Z2RDQTlJREVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEhsd1pTQTlJQ0pGWkdkbGMwZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCblpXOXRaWFJ5ZVRvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnZEdoeVpYTm9iMnhrUVc1bmJHVTZJSFFLSUNBZ0lDQWdJQ0I5TENCbElDRTlQU0J1ZFd4c0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnVFdGMGFDNXdiM2NvTVRBc0lEUXBMQ0J5SUQwZ1RXRjBhQzVqYjNNb1YyNGdLaUIwS1N3Z2J5QTlJR1V1WjJWMFNXNWtaWGdvS1N3Z1lTQTlJR1V1WjJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXBMQ0JzSUQwZ2J5QS9JRzh1WTI5MWJuUWdPaUJoTG1OdmRXNTBMQ0JqSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdDaUFnSUNBZ0lDQWdJQ0FnSUYwc0lHZ2dQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FpWVNJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaVlpSXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWlZeUlLSUNBZ0lDQWdJQ0FnSUNBZ1hTd2dkU0E5SUc1bGR5QkJjbkpoZVNnektTd2daQ0E5SUh0OUxDQm1JRDBnVzEwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0E5SURBN0lHMGdQQ0JzT3lCdElDczlJRE1wZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnlBL0lDaGpXekJkSUQwZ2J5NW5aWFJZS0cwcExDQmpXekZkSUQwZ2J5NW5aWFJZS0cwZ0t5QXhLU3dnWTFzeVhTQTlJRzh1WjJWMFdDaHRJQ3NnTWlrcElEb2dLR05iTUYwZ1BTQnRMQ0JqV3pGZElEMGdiU0FySURFc0lHTmJNbDBnUFNCdElDc2dNaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2V5QmhPaUI0SUN3Z1lqb2dkaUFzSUdNNklHY2dJSDBnUFNCZmN6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2g0TG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb1lTd2dZMXN3WFNrc0lIWXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2hoTENCald6RmRLU3dnWnk1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtHRXNJR05iTWwwcExDQmZjeTVuWlhST2IzSnRZV3dvU204cExDQjFXekJkSUQwZ1lDUjdUV0YwYUM1eWIzVnVaQ2g0TG5nZ0tpQnBLWDBzSkh0TllYUm9Mbkp2ZFc1a0tIZ3VlU0FxSUdrcGZTd2tlMDFoZEdndWNtOTFibVFvZUM1NklDb2dhU2w5WUN3Z2RWc3hYU0E5SUdBa2UwMWhkR2d1Y205MWJtUW9kaTU0SUNvZ2FTbDlMQ1I3VFdGMGFDNXliM1Z1WkNoMkxua2dLaUJwS1gwc0pIdE5ZWFJvTG5KdmRXNWtLSFl1ZWlBcUlHa3BmV0FzSUhWYk1sMGdQU0JnSkh0TllYUm9Mbkp2ZFc1a0tHY3VlQ0FxSUdrcGZTd2tlMDFoZEdndWNtOTFibVFvWnk1NUlDb2dhU2w5TENSN1RXRjBhQzV5YjNWdVpDaG5Mbm9nS2lCcEtYMWdMQ0FoS0hWYk1GMGdQVDA5SUhWYk1WMGdmSHdnZFZzeFhTQTlQVDBnZFZzeVhTQjhmQ0IxV3pKZElEMDlQU0IxV3pCZEtTa2dabTl5S0d4bGRDQndJRDBnTURzZ2NDQThJRE03SUhBckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOGdQU0FvY0NBcklERXBJQ1VnTXl3Z2VTQTlJSFZiY0Ywc0lHSWdQU0IxVzE5ZExDQkJJRDBnWDNOYmFGdHdYVjBzSUV3Z1BTQmZjMXRvVzE5ZFhTd2dTU0E5SUdBa2UzbDlYeVI3WW4xZ0xDQnJJRDBnWUNSN1luMWZKSHQ1ZldBN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUJwYmlCa0lDWW1JR1JiYTEwZ1B5QW9TbTh1Wkc5MEtHUmJhMTB1Ym05eWJXRnNLU0E4UFNCeUlDWW1JQ2htTG5CMWMyZ29RUzU0TENCQkxua3NJRUV1ZWlrc0lHWXVjSFZ6YUNoTUxuZ3NJRXd1ZVN3Z1RDNTZLU2tzSUdSYmExMGdQU0J1ZFd4c0tTQTZJRWtnYVc0Z1pDQjhmQ0FvWkZ0SlhTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnd09pQmpXM0JkTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVERTZJR05iWDEwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiRG9nU204dVkyeHZibVVvS1FvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiU0JwYmlCa0tXbG1JQ2hrVzIxZEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZXlCcGJtUmxlREE2SUhnZ0xDQnBibVJsZURFNklIWWdJSDBnUFNCa1cyMWRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlWE11Wm5KdmJVSjFabVpsY2tGMGRISnBZblYwWlNoaExDQjRLU3dnZG5NdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaGhMQ0IyS1N3Z1ppNXdkWE5vS0hsekxuZ3NJSGx6TG5rc0lIbHpMbm9wTENCbUxuQjFjMmdvZG5NdWVDd2dkbk11ZVN3Z2RuTXVlaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJR1JsS0dZc0lETXBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDbjBzSUVOMElEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpUTNWeWRtVWlMQ0IwYUdsekxtRnlZMHhsYm1kMGFFUnBkbWx6YVc5dWN5QTlJREl3TURzS0lDQWdJSDBLSUNBZ0lHZGxkRkJ2YVc1MEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMa04xY25abE9pQXVaMlYwVUc5cGJuUW9LU0J1YjNRZ2FXMXdiR1Z0Wlc1MFpXUXVJaWtzSUc1MWJHdzdDaUFnSUNCOUNpQWdJQ0JuWlhSUWIybHVkRUYwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVoyVjBWWFJ2VkcxaGNIQnBibWNvWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwVUc5cGJuUW9iaXdnZENrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRYjJsdWRITW9aU0E5SURVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiaUE5SURBN0lHNGdQRDBnWlRzZ2Jpc3JLWFF1Y0hWemFDaDBhR2x6TG1kbGRGQnZhVzUwS0c0Z0x5QmxLU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFE3Q2lBZ0lDQjlDaUFnSUNCblpYUlRjR0ZqWldSUWIybHVkSE1vWlNBOUlEVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRnRkT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQTdJRzRnUEQwZ1pUc2diaXNyS1hRdWNIVnphQ2gwYUdsekxtZGxkRkJ2YVc1MFFYUW9iaUF2SUdVcEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2REc0tJQ0FnSUgwS0lDQWdJR2RsZEV4bGJtZDBhQ2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVaMlYwVEdWdVozUm9jeWdwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsVzJVdWJHVnVaM1JvSUMwZ01WMDdDaUFnSUNCOUNpQWdJQ0JuWlhSTVpXNW5kR2h6S0dVZ1BTQjBhR2x6TG1GeVkweGxibWQwYUVScGRtbHphVzl1Y3lrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTmhZMmhsUVhKalRHVnVaM1JvY3lBbUppQjBhR2x6TG1OaFkyaGxRWEpqVEdWdVozUm9jeTVzWlc1bmRHZ2dQVDA5SUdVZ0t5QXhJQ1ltSUNGMGFHbHpMbTVsWldSelZYQmtZWFJsS1NCeVpYUjFjbTRnZEdocGN5NWpZV05vWlVGeVkweGxibWQwYUhNN0NpQWdJQ0FnSUNBZ2RHaHBjeTV1WldWa2MxVndaR0YwWlNBOUlDRXhPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdXMTBzSUc0c0lHa2dQU0IwYUdsekxtZGxkRkJ2YVc1MEtEQXBMQ0J5SUQwZ01Ec0tJQ0FnSUNBZ0lDQjBMbkIxYzJnb01DazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnZJRDBnTVRzZ2J5QThQU0JsT3lCdkt5c3BiaUE5SUhSb2FYTXVaMlYwVUc5cGJuUW9ieUF2SUdVcExDQnlJQ3M5SUc0dVpHbHpkR0Z1WTJWVWJ5aHBLU3dnZEM1d2RYTm9LSElwTENCcElEMGdianNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allXTm9aVUZ5WTB4bGJtZDBhSE1nUFNCMExDQjBPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxRWEpqVEdWdVozUm9jeWdwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTVsWldSelZYQmtZWFJsSUQwZ0lUQXNJSFJvYVhNdVoyVjBUR1Z1WjNSb2N5Z3BPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZYUnZWRzFoY0hCcGJtY29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVuWlhSTVpXNW5kR2h6S0Nrc0lHa2dQU0F3TENCeUlEMGdiaTVzWlc1bmRHZ3NJRzg3Q2lBZ0lDQWdJQ0FnZENBL0lHOGdQU0IwSURvZ2J5QTlJR1VnS2lCdVczSWdMU0F4WFRzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SURBc0lHd2dQU0J5SUMwZ01Td2dZenNLSUNBZ0lDQWdJQ0JtYjNJb095QmhJRHc5SUd3N0tXbG1JQ2hwSUQwZ1RXRjBhQzVtYkc5dmNpaGhJQ3NnS0d3Z0xTQmhLU0F2SURJcExDQmpJRDBnYmx0cFhTQXRJRzhzSUdNZ1BDQXdLU0JoSUQwZ2FTQXJJREU3Q2lBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWXlBK0lEQXBJR3dnUFNCcElDMGdNVHNLSUNBZ0lDQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkNBOUlHazdDaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb2FTQTlJR3dzSUc1YmFWMGdQVDA5SUc4cElISmxkSFZ5YmlCcElDOGdLSElnTFNBeEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlHNWJhVjBzSUdRZ1BTQnVXMmtnS3lBeFhTQXRJR2dzSUdZZ1BTQW9ieUF0SUdncElDOGdaRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLR2tnS3lCbUtTQXZJQ2h5SUMwZ01TazdDaUFnSUNCOUNpQWdJQ0JuWlhSVVlXNW5aVzUwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJR1VnTFNBeFpTMDBMQ0J5SUQwZ1pTQXJJREZsTFRRN0NpQWdJQ0FnSUNBZ2FTQThJREFnSmlZZ0tHa2dQU0F3S1N3Z2NpQStJREVnSmlZZ0tISWdQU0F4S1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUhSb2FYTXVaMlYwVUc5cGJuUW9hU2tzSUdFZ1BTQjBhR2x6TG1kbGRGQnZhVzUwS0hJcExDQnNJRDBnZENCOGZDQW9ieTVwYzFabFkzUnZjaklnUHlCdVpYY2dXQ0E2SUc1bGR5Qk5LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiQzVqYjNCNUtHRXBMbk4xWWlodktTNXViM0p0WVd4cGVtVW9LU3dnYkRzS0lDQWdJSDBLSUNBZ0lHZGxkRlJoYm1kbGJuUkJkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1kbGRGVjBiMVJ0WVhCd2FXNW5LR1VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRlJoYm1kbGJuUW9iaXdnZENrN0NpQWdJQ0I5Q2lBZ0lDQmpiMjF3ZFhSbFJuSmxibVYwUm5KaGJXVnpLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHNWxkeUJOTENCcElEMGdXMTBzSUhJZ1BTQmJYU3dnYnlBOUlGdGRMQ0JoSUQwZ2JtVjNJRTBzSUd3Z1BTQnVaWGNnY0dVN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbUlEMGdNRHNnWmlBOFBTQmxPeUJtS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JTQTlJR1lnTHlCbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwVzJaZElEMGdkR2hwY3k1blpYUlVZVzVuWlc1MFFYUW9iU3dnYm1WM0lFMHBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5V3pCZElEMGdibVYzSUUwc0lHOWJNRjBnUFNCdVpYY2dUVHNLSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJRTUxYldKbGNpNU5RVmhmVmtGTVZVVXNJR2dnUFNCTllYUm9MbUZpY3locFd6QmRMbmdwTENCMUlEMGdUV0YwYUM1aFluTW9hVnN3WFM1NUtTd2daQ0E5SUUxaGRHZ3VZV0p6S0dsYk1GMHVlaWs3Q2lBZ0lDQWdJQ0FnYUNBOFBTQmpJQ1ltSUNoaklEMGdhQ3dnYmk1elpYUW9NU3dnTUN3Z01Da3BMQ0IxSUR3OUlHTWdKaVlnS0dNZ1BTQjFMQ0J1TG5ObGRDZ3dMQ0F4TENBd0tTa3NJR1FnUEQwZ1l5QW1KaUJ1TG5ObGRDZ3dMQ0F3TENBeEtTd2dZUzVqY205emMxWmxZM1J2Y25Nb2FWc3dYU3dnYmlrdWJtOXliV0ZzYVhwbEtDa3NJSEpiTUYwdVkzSnZjM05XWldOMGIzSnpLR2xiTUYwc0lHRXBMQ0J2V3pCZExtTnliM056Vm1WamRHOXljeWhwV3pCZExDQnlXekJkS1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdZZ1BTQXhPeUJtSUR3OUlHVTdJR1lyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVcyWmRJRDBnY2x0bUlDMGdNVjB1WTJ4dmJtVW9LU3dnYjF0bVhTQTlJRzliWmlBdElERmRMbU5zYjI1bEtDa3NJR0V1WTNKdmMzTldaV04wYjNKektHbGJaaUF0SURGZExDQnBXMlpkS1N3Z1lTNXNaVzVuZEdnb0tTQStJRTUxYldKbGNpNUZVRk5KVEU5T0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhMbTV2Y20xaGJHbDZaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMGdQU0JOWVhSb0xtRmpiM01vYlhRb2FWdG1JQzBnTVYwdVpHOTBLR2xiWmwwcExDQXRNU3dnTVNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NsdG1YUzVoY0hCc2VVMWhkSEpwZURRb2JDNXRZV3RsVW05MFlYUnBiMjVCZUdsektHRXNJRzBwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCdlcyWmRMbU55YjNOelZtVmpkRzl5Y3locFcyWmRMQ0J5VzJaZEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0hRZ1BUMDlJQ0V3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbUlEMGdUV0YwYUM1aFkyOXpLRzEwS0hKYk1GMHVaRzkwS0hKYlpWMHBMQ0F0TVN3Z01Ta3BPd29nSUNBZ0lDQWdJQ0FnSUNCbUlDODlJR1VzSUdsYk1GMHVaRzkwS0dFdVkzSnZjM05XWldOMGIzSnpLSEpiTUYwc0lISmJaVjBwS1NBK0lEQWdKaVlnS0dZZ1BTQXRaaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJREU3SUcwZ1BEMGdaVHNnYlNzcktYSmJiVjB1WVhCd2JIbE5ZWFJ5YVhnMEtHd3ViV0ZyWlZKdmRHRjBhVzl1UVhocGN5aHBXMjFkTENCbUlDb2diU2twTENCdlcyMWRMbU55YjNOelZtVmpkRzl5Y3locFcyMWRMQ0J5VzIxZEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdGdVoyVnVkSE02SUdrc0NpQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJITTZJSElzQ2lBZ0lDQWdJQ0FnSUNBZ0lHSnBibTl5YldGc2N6b2did29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCamJHOXVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb0tTNWpiM0I1S0hSb2FYTXBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlYSmpUR1Z1WjNSb1JHbDJhWE5wYjI1eklEMGdaUzVoY21OTVpXNW5kR2hFYVhacGMybHZibk1zSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHMWxkR0ZrWVhSaE9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJaWEp6YVc5dU9pQTBMalVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlRM1Z5ZG1VaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEc5eU9pQWlRM1Z5ZG1VdWRHOUtVMDlPSWdvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzVoY21OTVpXNW5kR2hFYVhacGMybHZibk1nUFNCMGFHbHpMbUZ5WTB4bGJtZDBhRVJwZG1semFXOXVjeXdnWlM1MGVYQmxJRDBnZEdocGN5NTBlWEJsTENCbE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRnlZMHhsYm1kMGFFUnBkbWx6YVc5dWN5QTlJR1V1WVhKalRHVnVaM1JvUkdsMmFYTnBiMjV6TENCMGFHbHpPd29nSUNBZ2ZRcDlMQ0JWY2lBOUlHTnNZWE56SUdWNGRHVnVaSE1nUTNRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJREFzSUhRZ1BTQXdMQ0J1SUQwZ01Td2dhU0E5SURFc0lISWdQU0F3TENCdklEMGdUV0YwYUM1UVNTQXFJRElzSUdFZ1BTQWhNU3dnYkNBOUlEQXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSWtWc2JHbHdjMlZEZFhKMlpTSXNJSFJvYVhNdVlWZ2dQU0JsTENCMGFHbHpMbUZaSUQwZ2RDd2dkR2hwY3k1NFVtRmthWFZ6SUQwZ2Jpd2dkR2hwY3k1NVVtRmthWFZ6SUQwZ2FTd2dkR2hwY3k1aFUzUmhjblJCYm1kc1pTQTlJSElzSUhSb2FYTXVZVVZ1WkVGdVoyeGxJRDBnYnl3Z2RHaHBjeTVoUTJ4dlkydDNhWE5sSUQwZ1lTd2dkR2hwY3k1aFVtOTBZWFJwYjI0Z1BTQnNPd29nSUNBZ2ZRb2dJQ0FnWjJWMFVHOXBiblFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkQ0I4ZkNCdVpYY2dXQ3dnYVNBOUlFMWhkR2d1VUVrZ0tpQXlMQ0J5SUQwZ2RHaHBjeTVoUlc1a1FXNW5iR1VnTFNCMGFHbHpMbUZUZEdGeWRFRnVaMnhsTENCdklEMGdUV0YwYUM1aFluTW9jaWtnUENCT2RXMWlaWEl1UlZCVFNVeFBUanNLSUNBZ0lDQWdJQ0JtYjNJb095QnlJRHdnTURzcGNpQXJQU0JwT3dvZ0lDQWdJQ0FnSUdadmNpZzdJSElnUGlCcE95bHlJQzA5SUdrN0NpQWdJQ0FnSUNBZ2NpQThJRTUxYldKbGNpNUZVRk5KVEU5T0lDWW1JQ2h2SUQ4Z2NpQTlJREFnT2lCeUlEMGdhU2tzSUhSb2FYTXVZVU5zYjJOcmQybHpaU0E5UFQwZ0lUQWdKaVlnSVc4Z0ppWWdLSElnUFQwOUlHa2dQeUJ5SUQwZ0xXa2dPaUJ5SUQwZ2NpQXRJR2twT3dvZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZEdocGN5NWhVM1JoY25SQmJtZHNaU0FySUdVZ0tpQnlMQ0JzSUQwZ2RHaHBjeTVoV0NBcklIUm9hWE11ZUZKaFpHbDFjeUFxSUUxaGRHZ3VZMjl6S0dFcExDQmpJRDBnZEdocGN5NWhXU0FySUhSb2FYTXVlVkpoWkdsMWN5QXFJRTFoZEdndWMybHVLR0VwT3dvZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1GU2IzUmhkR2x2YmlBaFBUMGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlFMWhkR2d1WTI5ektIUm9hWE11WVZKdmRHRjBhVzl1S1N3Z2RTQTlJRTFoZEdndWMybHVLSFJvYVhNdVlWSnZkR0YwYVc5dUtTd2daQ0E5SUd3Z0xTQjBhR2x6TG1GWUxDQm1JRDBnWXlBdElIUm9hWE11WVZrN0NpQWdJQ0FnSUNBZ0lDQWdJR3dnUFNCa0lDb2dhQ0F0SUdZZ0tpQjFJQ3NnZEdocGN5NWhXQ3dnWXlBOUlHUWdLaUIxSUNzZ1ppQXFJR2dnS3lCMGFHbHpMbUZaT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmk1elpYUW9iQ3dnWXlrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NWhXQ0E5SUdVdVlWZ3NJSFJvYVhNdVlWa2dQU0JsTG1GWkxDQjBhR2x6TG5oU1lXUnBkWE1nUFNCbExuaFNZV1JwZFhNc0lIUm9hWE11ZVZKaFpHbDFjeUE5SUdVdWVWSmhaR2wxY3l3Z2RHaHBjeTVoVTNSaGNuUkJibWRzWlNBOUlHVXVZVk4wWVhKMFFXNW5iR1VzSUhSb2FYTXVZVVZ1WkVGdVoyeGxJRDBnWlM1aFJXNWtRVzVuYkdVc0lIUm9hWE11WVVOc2IyTnJkMmx6WlNBOUlHVXVZVU5zYjJOcmQybHpaU3dnZEdocGN5NWhVbTkwWVhScGIyNGdQU0JsTG1GU2IzUmhkR2x2Yml3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhOMWNHVnlMblJ2U2xOUFRpZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbUZZSUQwZ2RHaHBjeTVoV0N3Z1pTNWhXU0E5SUhSb2FYTXVZVmtzSUdVdWVGSmhaR2wxY3lBOUlIUm9hWE11ZUZKaFpHbDFjeXdnWlM1NVVtRmthWFZ6SUQwZ2RHaHBjeTU1VW1Ga2FYVnpMQ0JsTG1GVGRHRnlkRUZ1WjJ4bElEMGdkR2hwY3k1aFUzUmhjblJCYm1kc1pTd2daUzVoUlc1a1FXNW5iR1VnUFNCMGFHbHpMbUZGYm1SQmJtZHNaU3dnWlM1aFEyeHZZMnQzYVhObElEMGdkR2hwY3k1aFEyeHZZMnQzYVhObExDQmxMbUZTYjNSaGRHbHZiaUE5SUhSb2FYTXVZVkp2ZEdGMGFXOXVMQ0JsT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1bWNtOXRTbE5QVGlobEtTd2dkR2hwY3k1aFdDQTlJR1V1WVZnc0lIUm9hWE11WVZrZ1BTQmxMbUZaTENCMGFHbHpMbmhTWVdScGRYTWdQU0JsTG5oU1lXUnBkWE1zSUhSb2FYTXVlVkpoWkdsMWN5QTlJR1V1ZVZKaFpHbDFjeXdnZEdocGN5NWhVM1JoY25SQmJtZHNaU0E5SUdVdVlWTjBZWEowUVc1bmJHVXNJSFJvYVhNdVlVVnVaRUZ1WjJ4bElEMGdaUzVoUlc1a1FXNW5iR1VzSUhSb2FYTXVZVU5zYjJOcmQybHpaU0E5SUdVdVlVTnNiMk5yZDJselpTd2dkR2hwY3k1aFVtOTBZWFJwYjI0Z1BTQmxMbUZTYjNSaGRHbHZiaXdnZEdocGN6c0tJQ0FnSUgwS2ZUc0tWWEl1Y0hKdmRHOTBlWEJsTG1selJXeHNhWEJ6WlVOMWNuWmxJRDBnSVRBN0NuWmhjaUJOWVNBOUlHTnNZWE56SUdWNGRHVnVaSE1nVlhJZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYml3Z2FTd2djaXdnYnlsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlN3Z2RDd2diaXdnYml3Z2FTd2djaXdnYnlrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJa0Z5WTBOMWNuWmxJanNLSUNBZ0lIMEtmVHNLVFdFdWNISnZkRzkwZVhCbExtbHpRWEpqUTNWeWRtVWdQU0FoTURzS1puVnVZM1JwYjI0Z1ltRW9LU0I3Q2lBZ0lDQnNaWFFnY3lBOUlEQXNJR1VnUFNBd0xDQjBJRDBnTUN3Z2JpQTlJREE3Q2lBZ0lDQm1kVzVqZEdsdmJpQnBLSElzSUc4c0lHRXNJR3dwSUhzS0lDQWdJQ0FnSUNCeklEMGdjaXdnWlNBOUlHRXNJSFFnUFNBdE15QXFJSElnS3lBeklDb2dieUF0SURJZ0tpQmhJQzBnYkN3Z2JpQTlJRElnS2lCeUlDMGdNaUFxSUc4Z0t5QmhJQ3NnYkRzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCN0NpQWdJQ0FnSUNBZ2FXNXBkRU5oZEcxMWJHeFNiMjA2SUdaMWJtTjBhVzl1S0hJc0lHOHNJR0VzSUd3c0lHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FTaHZMQ0JoTENCaklDb2dLR0VnTFNCeUtTd2dZeUFxSUNoc0lDMGdieWtwT3dvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2FXNXBkRTV2Ym5WdWFXWnZjbTFEWVhSdGRXeHNVbTl0T2lCbWRXNWpkR2x2YmloeUxDQnZMQ0JoTENCc0xDQmpMQ0JvTENCMUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnS0c4Z0xTQnlLU0F2SUdNZ0xTQW9ZU0F0SUhJcElDOGdLR01nS3lCb0tTQXJJQ2hoSUMwZ2J5a2dMeUJvTENCbUlEMGdLR0VnTFNCdktTQXZJR2dnTFNBb2JDQXRJRzhwSUM4Z0tHZ2dLeUIxS1NBcklDaHNJQzBnWVNrZ0x5QjFPd29nSUNBZ0lDQWdJQ0FnSUNCa0lDbzlJR2dzSUdZZ0tqMGdhQ3dnYVNodkxDQmhMQ0JrTENCbUtUc0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJR05oYkdNNklHWjFibU4wYVc5dUtISXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCeUlDb2djaXdnWVNBOUlHOGdLaUJ5T3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2N5QXJJR1VnS2lCeUlDc2dkQ0FxSUc4Z0t5QnVJQ29nWVRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5T3dwOUNuWmhjaUJOY3lBOUlHNWxkeUJOTENCWmJ5QTlJRzVsZHlCaVlTd2dXbThnUFNCdVpYY2dZbUVzSUNSdklEMGdibVYzSUdKaExDQjNZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdRM1FnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlGdGRMQ0IwSUQwZ0lURXNJRzRnUFNBaVkyVnVkSEpwY0dWMFlXd2lMQ0JwSUQwZ0xqVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSWtOaGRHMTFiR3hTYjIxRGRYSjJaVE1pTENCMGFHbHpMbkJ2YVc1MGN5QTlJR1VzSUhSb2FYTXVZMnh2YzJWa0lEMGdkQ3dnZEdocGN5NWpkWEoyWlZSNWNHVWdQU0J1TENCMGFHbHpMblJsYm5OcGIyNGdQU0JwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVRzlwYm5Rb1pTd2dkQ0E5SUc1bGR5Qk5LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwTENCcElEMGdkR2hwY3k1d2IybHVkSE1zSUhJZ1BTQnBMbXhsYm1kMGFDd2dieUE5SUNoeUlDMGdLSFJvYVhNdVkyeHZjMlZrSUQ4Z01DQTZJREVwS1NBcUlHVXNJR0VnUFNCTllYUm9MbVpzYjI5eUtHOHBMQ0JzSUQwZ2J5QXRJR0U3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiRzl6WldRZ1B5QmhJQ3M5SUdFZ1BpQXdJRDhnTUNBNklDaE5ZWFJvTG1ac2IyOXlLRTFoZEdndVlXSnpLR0VwSUM4Z2Npa2dLeUF4S1NBcUlISWdPaUJzSUQwOVBTQXdJQ1ltSUdFZ1BUMDlJSElnTFNBeElDWW1JQ2hoSUQwZ2NpQXRJRElzSUd3Z1BTQXhLVHNLSUNBZ0lDQWdJQ0JzWlhRZ1l5d2dhRHNLSUNBZ0lDQWdJQ0IwYUdsekxtTnNiM05sWkNCOGZDQmhJRDRnTUNBL0lHTWdQU0JwV3loaElDMGdNU2tnSlNCeVhTQTZJQ2hOY3k1emRXSldaV04wYjNKektHbGJNRjBzSUdsYk1WMHBMbUZrWkNocFd6QmRLU3dnWXlBOUlFMXpLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJR2xiWVNBbElISmRMQ0JrSUQwZ2FWc29ZU0FySURFcElDVWdjbDA3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTJ4dmMyVmtJSHg4SUdFZ0t5QXlJRHdnY2lBL0lHZ2dQU0JwV3loaElDc2dNaWtnSlNCeVhTQTZJQ2hOY3k1emRXSldaV04wYjNKektHbGJjaUF0SURGZExDQnBXM0lnTFNBeVhTa3VZV1JrS0dsYmNpQXRJREZkS1N3Z2FDQTlJRTF6S1N3Z2RHaHBjeTVqZFhKMlpWUjVjR1VnUFQwOUlDSmpaVzUwY21sd1pYUmhiQ0lnZkh3Z2RHaHBjeTVqZFhKMlpWUjVjR1VnUFQwOUlDSmphRzl5WkdGc0lpa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUhSb2FYTXVZM1Z5ZG1WVWVYQmxJRDA5UFNBaVkyaHZjbVJoYkNJZ1B5QXVOU0E2SUM0eU5Td2diU0E5SUUxaGRHZ3VjRzkzS0dNdVpHbHpkR0Z1WTJWVWIxTnhkV0Z5WldRb2RTa3NJR1lwTENCNElEMGdUV0YwYUM1d2IzY29kUzVrYVhOMFlXNWpaVlJ2VTNGMVlYSmxaQ2hrS1N3Z1ppa3NJSFlnUFNCTllYUm9MbkJ2ZHloa0xtUnBjM1JoYm1ObFZHOVRjWFZoY21Wa0tHZ3BMQ0JtS1RzS0lDQWdJQ0FnSUNBZ0lDQWdlQ0E4SURGbExUUWdKaVlnS0hnZ1BTQXhLU3dnYlNBOElERmxMVFFnSmlZZ0tHMGdQU0I0S1N3Z2RpQThJREZsTFRRZ0ppWWdLSFlnUFNCNEtTd2dXVzh1YVc1cGRFNXZiblZ1YVdadmNtMURZWFJ0ZFd4c1VtOXRLR011ZUN3Z2RTNTRMQ0JrTG5nc0lHZ3VlQ3dnYlN3Z2VDd2dkaWtzSUZwdkxtbHVhWFJPYjI1MWJtbG1iM0p0UTJGMGJYVnNiRkp2YlNoakxua3NJSFV1ZVN3Z1pDNTVMQ0JvTG5rc0lHMHNJSGdzSUhZcExDQWtieTVwYm1sMFRtOXVkVzVwWm05eWJVTmhkRzExYkd4U2IyMG9ZeTU2TENCMUxub3NJR1F1ZWl3Z2FDNTZMQ0J0TENCNExDQjJLVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdkR2hwY3k1amRYSjJaVlI1Y0dVZ1BUMDlJQ0pqWVhSdGRXeHNjbTl0SWlBbUppQW9XVzh1YVc1cGRFTmhkRzExYkd4U2IyMG9ZeTU0TENCMUxuZ3NJR1F1ZUN3Z2FDNTRMQ0IwYUdsekxuUmxibk5wYjI0cExDQmFieTVwYm1sMFEyRjBiWFZzYkZKdmJTaGpMbmtzSUhVdWVTd2daQzU1TENCb0xua3NJSFJvYVhNdWRHVnVjMmx2Ymlrc0lDUnZMbWx1YVhSRFlYUnRkV3hzVW05dEtHTXVlaXdnZFM1NkxDQmtMbm9zSUdndWVpd2dkR2hwY3k1MFpXNXphVzl1S1NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dWMyVjBLRmx2TG1OaGJHTW9iQ2tzSUZwdkxtTmhiR01vYkNrc0lDUnZMbU5oYkdNb2JDa3BMQ0J1T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NXdiMmx1ZEhNZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnWlM1d2IybHVkSE11YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbkJ2YVc1MGMxdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YjJsdWRITXVjSFZ6YUNocExtTnNiMjVsS0NrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkc5elpXUWdQU0JsTG1Oc2IzTmxaQ3dnZEdocGN5NWpkWEoyWlZSNWNHVWdQU0JsTG1OMWNuWmxWSGx3WlN3Z2RHaHBjeTUwWlc1emFXOXVJRDBnWlM1MFpXNXphVzl1TENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnYzNWd1pYSXVkRzlLVTA5T0tDazdDaUFnSUNBZ0lDQWdaUzV3YjJsdWRITWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdMQ0J1SUQwZ2RHaHBjeTV3YjJsdWRITXViR1Z1WjNSb095QjBJRHdnYmpzZ2RDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbkJ2YVc1MGMxdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pTNXdiMmx1ZEhNdWNIVnphQ2hwTG5SdlFYSnlZWGtvS1NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtTnNiM05sWkNBOUlIUm9hWE11WTJ4dmMyVmtMQ0JsTG1OMWNuWmxWSGx3WlNBOUlIUm9hWE11WTNWeWRtVlVlWEJsTENCbExuUmxibk5wYjI0Z1BTQjBhR2x6TG5SbGJuTnBiMjRzSUdVN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnYzNWd1pYSXVabkp2YlVwVFQwNG9aU2tzSUhSb2FYTXVjRzlwYm5SeklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUdVdWNHOXBiblJ6TG14bGJtZDBhRHNnZENBOElHNDdJSFFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdaUzV3YjJsdWRITmJkRjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0c5cGJuUnpMbkIxYzJnb2JtVjNJRTBvS1M1bWNtOXRRWEp5WVhrb2FTa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHOXpaV1FnUFNCbExtTnNiM05sWkN3Z2RHaHBjeTVqZFhKMlpWUjVjR1VnUFNCbExtTjFjblpsVkhsd1pTd2dkR2hwY3k1MFpXNXphVzl1SUQwZ1pTNTBaVzV6YVc5dUxDQjBhR2x6T3dvZ0lDQWdmUXA5T3dwM1lTNXdjbTkwYjNSNWNHVXVhWE5EWVhSdGRXeHNVbTl0UTNWeWRtVXpJRDBnSVRBN0NtWjFibU4wYVc5dUlIQmpLSE1zSUdVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUd4bGRDQnlJRDBnS0c0Z0xTQmxLU0FxSUM0MUxDQnZJRDBnS0drZ0xTQjBLU0FxSUM0MUxDQmhJRDBnY3lBcUlITXNJR3dnUFNCeklDb2dZVHNLSUNBZ0lISmxkSFZ5YmlBb01pQXFJSFFnTFNBeUlDb2diaUFySUhJZ0t5QnZLU0FxSUd3Z0t5QW9MVE1nS2lCMElDc2dNeUFxSUc0Z0xTQXlJQ29nY2lBdElHOHBJQ29nWVNBcklISWdLaUJ6SUNzZ2REc0tmUXBtZFc1amRHbHZiaUJKZUNoekxDQmxLU0I3Q2lBZ0lDQnNaWFFnZENBOUlERWdMU0J6T3dvZ0lDQWdjbVYwZFhKdUlIUWdLaUIwSUNvZ1pUc0tmUXBtZFc1amRHbHZiaUJFZUNoekxDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z01pQXFJQ2d4SUMwZ2N5a2dLaUJ6SUNvZ1pUc0tmUXBtZFc1amRHbHZiaUJHZUNoekxDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z2N5QXFJSE1nS2lCbE93cDlDbVoxYm1OMGFXOXVJR0Z5S0hNc0lHVXNJSFFzSUc0cElIc0tJQ0FnSUhKbGRIVnliaUJKZUNoekxDQmxLU0FySUVSNEtITXNJSFFwSUNzZ1JuZ29jeXdnYmlrN0NuMEtablZ1WTNScGIyNGdUbmdvY3l3Z1pTa2dld29nSUNBZ2JHVjBJSFFnUFNBeElDMGdjenNLSUNBZ0lISmxkSFZ5YmlCMElDb2dkQ0FxSUhRZ0tpQmxPd3A5Q21aMWJtTjBhVzl1SUVKNEtITXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdNU0F0SUhNN0NpQWdJQ0J5WlhSMWNtNGdNeUFxSUhRZ0tpQjBJQ29nY3lBcUlHVTdDbjBLWm5WdVkzUnBiMjRnZW5nb2N5d2daU2tnZXdvZ0lDQWdjbVYwZFhKdUlETWdLaUFvTVNBdElITXBJQ29nY3lBcUlITWdLaUJsT3dwOUNtWjFibU4wYVc5dUlGVjRLSE1zSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ6SUNvZ2N5QXFJSE1nS2lCbE93cDlDbVoxYm1OMGFXOXVJR3h5S0hNc0lHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lISmxkSFZ5YmlCT2VDaHpMQ0JsS1NBcklFSjRLSE1zSUhRcElDc2dlbmdvY3l3Z2Jpa2dLeUJWZUNoekxDQnBLVHNLZlFwMllYSWdiRzhnUFNCamJHRnpjeUJsZUhSbGJtUnpJRU4wSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnV0N3Z2RDQTlJRzVsZHlCWUxDQnVJRDBnYm1WM0lGZ3NJR2tnUFNCdVpYY2dXQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVEzVmlhV05DWlhwcFpYSkRkWEoyWlNJc0lIUm9hWE11ZGpBZ1BTQmxMQ0IwYUdsekxuWXhJRDBnZEN3Z2RHaHBjeTUyTWlBOUlHNHNJSFJvYVhNdWRqTWdQU0JwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVRzlwYm5Rb1pTd2dkQ0E5SUc1bGR5QllLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwTENCcElEMGdkR2hwY3k1Mk1Dd2djaUE5SUhSb2FYTXVkakVzSUc4Z1BTQjBhR2x6TG5ZeUxDQmhJRDBnZEdocGN5NTJNenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTV6WlhRb2JISW9aU3dnYVM1NExDQnlMbmdzSUc4dWVDd2dZUzU0S1N3Z2JISW9aU3dnYVM1NUxDQnlMbmtzSUc4dWVTd2dZUzU1S1Nrc0lHNDdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTUyTUM1amIzQjVLR1V1ZGpBcExDQjBhR2x6TG5ZeExtTnZjSGtvWlM1Mk1Ta3NJSFJvYVhNdWRqSXVZMjl3ZVNobExuWXlLU3dnZEdocGN5NTJNeTVqYjNCNUtHVXVkak1wTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnYzNWd1pYSXVkRzlLVTA5T0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVkakFnUFNCMGFHbHpMbll3TG5SdlFYSnlZWGtvS1N3Z1pTNTJNU0E5SUhSb2FYTXVkakV1ZEc5QmNuSmhlU2dwTENCbExuWXlJRDBnZEdocGN5NTJNaTUwYjBGeWNtRjVLQ2tzSUdVdWRqTWdQU0IwYUdsekxuWXpMblJ2UVhKeVlYa29LU3dnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVpuSnZiVXBUVDA0b1pTa3NJSFJvYVhNdWRqQXVabkp2YlVGeWNtRjVLR1V1ZGpBcExDQjBhR2x6TG5ZeExtWnliMjFCY25KaGVTaGxMbll4S1N3Z2RHaHBjeTUyTWk1bWNtOXRRWEp5WVhrb1pTNTJNaWtzSUhSb2FYTXVkak11Wm5KdmJVRnljbUY1S0dVdWRqTXBMQ0IwYUdsek93b2dJQ0FnZlFwOU93cHNieTV3Y205MGIzUjVjR1V1YVhORGRXSnBZMEpsZW1sbGNrTjFjblpsSUQwZ0lUQTdDblpoY2lCVFlTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1EzUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5Qk5MQ0IwSUQwZ2JtVjNJRTBzSUc0Z1BTQnVaWGNnVFN3Z2FTQTlJRzVsZHlCTktYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pEZFdKcFkwSmxlbWxsY2tOMWNuWmxNeUlzSUhSb2FYTXVkakFnUFNCbExDQjBhR2x6TG5ZeElEMGdkQ3dnZEdocGN5NTJNaUE5SUc0c0lIUm9hWE11ZGpNZ1BTQnBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFVHOXBiblFvWlN3Z2RDQTlJRzVsZHlCTktTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBMQ0JwSUQwZ2RHaHBjeTUyTUN3Z2NpQTlJSFJvYVhNdWRqRXNJRzhnUFNCMGFHbHpMbll5TENCaElEMGdkR2hwY3k1Mk16c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JpNXpaWFFvYkhJb1pTd2dhUzU0TENCeUxuZ3NJRzh1ZUN3Z1lTNTRLU3dnYkhJb1pTd2dhUzU1TENCeUxua3NJRzh1ZVN3Z1lTNTVLU3dnYkhJb1pTd2dhUzU2TENCeUxub3NJRzh1ZWl3Z1lTNTZLU2tzSUc0N0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WTI5d2VTaGxLU3dnZEdocGN5NTJNQzVqYjNCNUtHVXVkakFwTENCMGFHbHpMbll4TG1OdmNIa29aUzUyTVNrc0lIUm9hWE11ZGpJdVkyOXdlU2hsTG5ZeUtTd2dkR2hwY3k1Mk15NWpiM0I1S0dVdWRqTXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdjM1Z3WlhJdWRHOUtVMDlPS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWRqQWdQU0IwYUdsekxuWXdMblJ2UVhKeVlYa29LU3dnWlM1Mk1TQTlJSFJvYVhNdWRqRXVkRzlCY25KaGVTZ3BMQ0JsTG5ZeUlEMGdkR2hwY3k1Mk1pNTBiMEZ5Y21GNUtDa3NJR1V1ZGpNZ1BTQjBhR2x6TG5ZekxuUnZRWEp5WVhrb0tTd2daVHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1Wm5KdmJVcFRUMDRvWlNrc0lIUm9hWE11ZGpBdVpuSnZiVUZ5Y21GNUtHVXVkakFwTENCMGFHbHpMbll4TG1aeWIyMUJjbkpoZVNobExuWXhLU3dnZEdocGN5NTJNaTVtY205dFFYSnlZWGtvWlM1Mk1pa3NJSFJvYVhNdWRqTXVabkp2YlVGeWNtRjVLR1V1ZGpNcExDQjBhR2x6T3dvZ0lDQWdmUXA5T3dwVFlTNXdjbTkwYjNSNWNHVXVhWE5EZFdKcFkwSmxlbWxsY2tOMWNuWmxNeUE5SUNFd093cDJZWElnVDNJZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVOMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1WlhjZ1dDd2dkQ0E5SUc1bGR5QllLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKTWFXNWxRM1Z5ZG1VaUxDQjBhR2x6TG5ZeElEMGdaU3dnZEdocGN5NTJNaUE5SUhRN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJRYjJsdWRDaGxMQ0IwSUQwZ2JtVjNJRmdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVZ1BUMDlJREVnUHlCdUxtTnZjSGtvZEdocGN5NTJNaWtnT2lBb2JpNWpiM0I1S0hSb2FYTXVkaklwTG5OMVlpaDBhR2x6TG5ZeEtTd2diaTV0ZFd4MGFYQnNlVk5qWVd4aGNpaGxLUzVoWkdRb2RHaHBjeTUyTVNrcExDQnVPd29nSUNBZ2ZRb2dJQ0FnWjJWMFVHOXBiblJCZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBVRzlwYm5Rb1pTd2dkQ2s3Q2lBZ0lDQjlDaUFnSUNCblpYUlVZVzVuWlc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRZ2ZId2dibVYzSUZnN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc0dVkyOXdlU2gwYUdsekxuWXlLUzV6ZFdJb2RHaHBjeTUyTVNrdWJtOXliV0ZzYVhwbEtDa3NJRzQ3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1Mk1TNWpiM0I1S0dVdWRqRXBMQ0IwYUdsekxuWXlMbU52Y0hrb1pTNTJNaWtzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b0tUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNTJNU0E5SUhSb2FYTXVkakV1ZEc5QmNuSmhlU2dwTENCbExuWXlJRDBnZEdocGN5NTJNaTUwYjBGeWNtRjVLQ2tzSUdVN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtWnliMjFLVTA5T0tHVXBMQ0IwYUdsekxuWXhMbVp5YjIxQmNuSmhlU2hsTG5ZeEtTd2dkR2hwY3k1Mk1pNW1jbTl0UVhKeVlYa29aUzUyTWlrc0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q2s5eUxuQnliM1J2ZEhsd1pTNXBjMHhwYm1WRGRYSjJaU0E5SUNFd093cDJZWElnUldnZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVOMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0J1WlhjZ1RTd2dkQ0E5SUc1bGR5Qk5LWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKTWFXNWxRM1Z5ZG1Veklpd2dkR2hwY3k1cGMweHBibVZEZFhKMlpUTWdQU0FoTUN3Z2RHaHBjeTUyTVNBOUlHVXNJSFJvYVhNdWRqSWdQU0IwT3dvZ0lDQWdmUW9nSUNBZ1oyVjBVRzlwYm5Rb1pTd2dkQ0E5SUc1bGR5Qk5LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUQwOVBTQXhJRDhnYmk1amIzQjVLSFJvYVhNdWRqSXBJRG9nS0c0dVkyOXdlU2gwYUdsekxuWXlLUzV6ZFdJb2RHaHBjeTUyTVNrc0lHNHViWFZzZEdsd2JIbFRZMkZzWVhJb1pTa3VZV1JrS0hSb2FYTXVkakVwS1N3Z2Jqc0tJQ0FnSUgwS0lDQWdJR2RsZEZCdmFXNTBRWFFvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGQnZhVzUwS0dVc0lIUXBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11ZGpFdVkyOXdlU2hsTG5ZeEtTd2dkR2hwY3k1Mk1pNWpiM0I1S0dVdWRqSXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdjM1Z3WlhJdWRHOUtVMDlPS0NrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdWRqRWdQU0IwYUdsekxuWXhMblJ2UVhKeVlYa29LU3dnWlM1Mk1pQTlJSFJvYVhNdWRqSXVkRzlCY25KaGVTZ3BMQ0JsT3dvZ0lDQWdmUW9nSUNBZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1bWNtOXRTbE5QVGlobEtTd2dkR2hwY3k1Mk1TNW1jbTl0UVhKeVlYa29aUzUyTVNrc0lIUm9hWE11ZGpJdVpuSnZiVUZ5Y21GNUtHVXVkaklwTENCMGFHbHpPd29nSUNBZ2ZRcDlMQ0JqYnlBOUlHTnNZWE56SUdWNGRHVnVaSE1nUTNRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJRzVsZHlCWUxDQjBJRDBnYm1WM0lGZ3NJRzRnUFNCdVpYY2dXQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVVYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVWlMQ0IwYUdsekxuWXdJRDBnWlN3Z2RHaHBjeTUyTVNBOUlIUXNJSFJvYVhNdWRqSWdQU0J1T3dvZ0lDQWdmUW9nSUNBZ1oyVjBVRzlwYm5Rb1pTd2dkQ0E5SUc1bGR5QllLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwTENCcElEMGdkR2hwY3k1Mk1Dd2djaUE5SUhSb2FYTXVkakVzSUc4Z1BTQjBhR2x6TG5ZeU93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdUxuTmxkQ2hoY2lobExDQnBMbmdzSUhJdWVDd2dieTU0S1N3Z1lYSW9aU3dnYVM1NUxDQnlMbmtzSUc4dWVTa3BMQ0J1T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWRqQXVZMjl3ZVNobExuWXdLU3dnZEdocGN5NTJNUzVqYjNCNUtHVXVkakVwTENCMGFHbHpMbll5TG1OdmNIa29aUzUyTWlrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCemRYQmxjaTUwYjBwVFQwNG9LVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzUyTUNBOUlIUm9hWE11ZGpBdWRHOUJjbkpoZVNncExDQmxMbll4SUQwZ2RHaHBjeTUyTVM1MGIwRnljbUY1S0Nrc0lHVXVkaklnUFNCMGFHbHpMbll5TG5SdlFYSnlZWGtvS1N3Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVabkp2YlVwVFQwNG9aU2tzSUhSb2FYTXVkakF1Wm5KdmJVRnljbUY1S0dVdWRqQXBMQ0IwYUdsekxuWXhMbVp5YjIxQmNuSmhlU2hsTG5ZeEtTd2dkR2hwY3k1Mk1pNW1jbTl0UVhKeVlYa29aUzUyTWlrc0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q21OdkxuQnliM1J2ZEhsd1pTNXBjMUYxWVdSeVlYUnBZMEpsZW1sbGNrTjFjblpsSUQwZ0lUQTdDblpoY2lCb2J5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1EzUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5Qk5MQ0IwSUQwZ2JtVjNJRTBzSUc0Z1BTQnVaWGNnVFNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlVWFZoWkhKaGRHbGpRbVY2YVdWeVEzVnlkbVV6SWl3Z2RHaHBjeTUyTUNBOUlHVXNJSFJvYVhNdWRqRWdQU0IwTENCMGFHbHpMbll5SUQwZ2Jqc0tJQ0FnSUgwS0lDQWdJR2RsZEZCdmFXNTBLR1VzSUhRZ1BTQnVaWGNnVFNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RDd2dhU0E5SUhSb2FYTXVkakFzSUhJZ1BTQjBhR2x6TG5ZeExDQnZJRDBnZEdocGN5NTJNanNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTV6WlhRb1lYSW9aU3dnYVM1NExDQnlMbmdzSUc4dWVDa3NJR0Z5S0dVc0lHa3VlU3dnY2k1NUxDQnZMbmtwTENCaGNpaGxMQ0JwTG5vc0lISXVlaXdnYnk1NktTa3NJRzQ3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1Mk1DNWpiM0I1S0dVdWRqQXBMQ0IwYUdsekxuWXhMbU52Y0hrb1pTNTJNU2tzSUhSb2FYTXVkakl1WTI5d2VTaGxMbll5S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhSdlNsTlBUaWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhOMWNHVnlMblJ2U2xOUFRpZ3BPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxMbll3SUQwZ2RHaHBjeTUyTUM1MGIwRnljbUY1S0Nrc0lHVXVkakVnUFNCMGFHbHpMbll4TG5SdlFYSnlZWGtvS1N3Z1pTNTJNaUE5SUhSb2FYTXVkakl1ZEc5QmNuSmhlU2dwTENCbE93b2dJQ0FnZlFvZ0lDQWdabkp2YlVwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNW1jbTl0U2xOUFRpaGxLU3dnZEdocGN5NTJNQzVtY205dFFYSnlZWGtvWlM1Mk1Da3NJSFJvYVhNdWRqRXVabkp2YlVGeWNtRjVLR1V1ZGpFcExDQjBhR2x6TG5ZeUxtWnliMjFCY25KaGVTaGxMbll5S1N3Z2RHaHBjenNLSUNBZ0lIMEtmVHNLYUc4dWNISnZkRzkwZVhCbExtbHpVWFZoWkhKaGRHbGpRbVY2YVdWeVEzVnlkbVV6SUQwZ0lUQTdDblpoY2lCMWJ5QTlJR05zWVhOeklHVjRkR1Z1WkhNZ1EzUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUZ0ZEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pUY0d4cGJtVkRkWEoyWlNJc0lIUm9hWE11Y0c5cGJuUnpJRDBnWlRzS0lDQWdJSDBLSUNBZ0lHZGxkRkJ2YVc1MEtHVXNJSFFnUFNCdVpYY2dXQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEN3Z2FTQTlJSFJvYVhNdWNHOXBiblJ6TENCeUlEMGdLR2t1YkdWdVozUm9JQzBnTVNrZ0tpQmxMQ0J2SUQwZ1RXRjBhQzVtYkc5dmNpaHlLU3dnWVNBOUlISWdMU0J2TENCc0lEMGdhVnR2SUQwOVBTQXdJRDhnYnlBNklHOGdMU0F4WFN3Z1l5QTlJR2xiYjEwc0lHZ2dQU0JwVzI4Z1BpQnBMbXhsYm1kMGFDQXRJRElnUHlCcExteGxibWQwYUNBdElERWdPaUJ2SUNzZ01WMHNJSFVnUFNCcFcyOGdQaUJwTG14bGJtZDBhQ0F0SURNZ1B5QnBMbXhsYm1kMGFDQXRJREVnT2lCdklDc2dNbDA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzR1YzJWMEtIQmpLR0VzSUd3dWVDd2dZeTU0TENCb0xuZ3NJSFV1ZUNrc0lIQmpLR0VzSUd3dWVTd2dZeTU1TENCb0xua3NJSFV1ZVNrcExDQnVPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1d2IybHVkSE1nUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdaUzV3YjJsdWRITXViR1Z1WjNSb095QjBJRHdnYmpzZ2RDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCbExuQnZhVzUwYzF0MFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdiMmx1ZEhNdWNIVnphQ2hwTG1Oc2IyNWxLQ2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFJ2U2xOUFRpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSE4xY0dWeUxuUnZTbE5QVGlncE93b2dJQ0FnSUNBZ0lHVXVjRzlwYm5SeklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Dd2diaUE5SUhSb2FYTXVjRzlwYm5SekxteGxibWQwYURzZ2RDQThJRzQ3SUhRckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NXdiMmx1ZEhOYmRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUdVdWNHOXBiblJ6TG5CMWMyZ29hUzUwYjBGeWNtRjVLQ2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlRzS0lDQWdJSDBLSUNBZ0lHWnliMjFLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpNW1jbTl0U2xOUFRpaGxLU3dnZEdocGN5NXdiMmx1ZEhNZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnWlM1d2IybHVkSE11YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbkJ2YVc1MGMxdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YjJsdWRITXVjSFZ6YUNodVpYY2dXQ2dwTG1aeWIyMUJjbkpoZVNocEtTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6T3dvZ0lDQWdmUXA5T3dwMWJ5NXdjbTkwYjNSNWNHVXVhWE5UY0d4cGJtVkRkWEoyWlNBOUlDRXdPd3AyWVhJZ1ZHRWdQU0JQWW1wbFkzUXVabkpsWlhwbEtIc0tJQ0FnSUY5ZmNISnZkRzlmWHpvZ2JuVnNiQ3dLSUNBZ0lFRnlZME4xY25abE9pQk5ZU3dLSUNBZ0lFTmhkRzExYkd4U2IyMURkWEoyWlRNNklIZGhMQW9nSUNBZ1EzVmlhV05DWlhwcFpYSkRkWEoyWlRvZ2JHOHNDaUFnSUNCRGRXSnBZMEpsZW1sbGNrTjFjblpsTXpvZ1UyRXNDaUFnSUNCRmJHeHBjSE5sUTNWeWRtVTZJRlZ5TEFvZ0lDQWdUR2x1WlVOMWNuWmxPaUJQY2l3S0lDQWdJRXhwYm1WRGRYSjJaVE02SUVWb0xBb2dJQ0FnVVhWaFpISmhkR2xqUW1WNmFXVnlRM1Z5ZG1VNklHTnZMQW9nSUNBZ1VYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVXpPaUJvYnl3S0lDQWdJRk53YkdsdVpVTjFjblpsT2lCMWJ3cDlLU3dnUVdnZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVOMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpUTNWeWRtVlFZWFJvSWl3Z2RHaHBjeTVqZFhKMlpYTWdQU0JiWFN3Z2RHaHBjeTVoZFhSdlEyeHZjMlVnUFNBaE1Uc0tJQ0FnSUgwS0lDQWdJR0ZrWkNobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1amRYSjJaWE11Y0hWemFDaGxLVHNLSUNBZ0lIMEtJQ0FnSUdOc2IzTmxVR0YwYUNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlIUm9hWE11WTNWeWRtVnpXekJkTG1kbGRGQnZhVzUwS0RBcExDQjBJRDBnZEdocGN5NWpkWEoyWlhOYmRHaHBjeTVqZFhKMlpYTXViR1Z1WjNSb0lDMGdNVjB1WjJWMFVHOXBiblFvTVNrN0NpQWdJQ0FnSUNBZ1pTNWxjWFZoYkhNb2RDa2dmSHdnZEdocGN5NWpkWEoyWlhNdWNIVnphQ2h1WlhjZ1QzSW9kQ3dnWlNrcE93b2dJQ0FnZlFvZ0lDQWdaMlYwVUc5cGJuUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1pTQXFJSFJvYVhNdVoyVjBUR1Z1WjNSb0tDa3NJR2tnUFNCMGFHbHpMbWRsZEVOMWNuWmxUR1Z1WjNSb2N5Z3BMQ0J5SUQwZ01Ec0tJQ0FnSUNBZ0lDQm1iM0lvT3lCeUlEd2dhUzVzWlc1bmRHZzdLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2xiY2wwZ1BqMGdiaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0JwVzNKZElDMGdiaXdnWVNBOUlIUm9hWE11WTNWeWRtVnpXM0pkTENCc0lEMGdZUzVuWlhSTVpXNW5kR2dvS1N3Z1l5QTlJR3dnUFQwOUlEQWdQeUF3SURvZ01TQXRJRzhnTHlCc093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFdVoyVjBVRzlwYm5SQmRDaGpMQ0IwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCeUt5czdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ1oyVjBUR1Z1WjNSb0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdkR2hwY3k1blpYUkRkWEoyWlV4bGJtZDBhSE1vS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlZ0bExteGxibWQwYUNBdElERmRPd29nSUNBZ2ZRb2dJQ0FnZFhCa1lYUmxRWEpqVEdWdVozUm9jeWdwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTVsWldSelZYQmtZWFJsSUQwZ0lUQXNJSFJvYVhNdVkyRmphR1ZNWlc1bmRHaHpJRDBnYm5Wc2JDd2dkR2hwY3k1blpYUkRkWEoyWlV4bGJtZDBhSE1vS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRU4xY25abFRHVnVaM1JvY3lncElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWpZV05vWlV4bGJtZDBhSE1nSmlZZ2RHaHBjeTVqWVdOb1pVeGxibWQwYUhNdWJHVnVaM1JvSUQwOVBTQjBhR2x6TG1OMWNuWmxjeTVzWlc1bmRHZ3BJSEpsZEhWeWJpQjBhR2x6TG1OaFkyaGxUR1Z1WjNSb2N6c0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlGdGRMQ0IwSUQwZ01Ec0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHNGdQU0F3TENCcElEMGdkR2hwY3k1amRYSjJaWE11YkdWdVozUm9PeUJ1SUR3Z2FUc2diaXNyS1hRZ0t6MGdkR2hwY3k1amRYSjJaWE5iYmwwdVoyVjBUR1Z1WjNSb0tDa3NJR1V1Y0hWemFDaDBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allXTm9aVXhsYm1kMGFITWdQU0JsTENCbE93b2dJQ0FnZlFvZ0lDQWdaMlYwVTNCaFkyVmtVRzlwYm5SektHVWdQU0EwTUNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnVJRDBnTURzZ2JpQThQU0JsT3lCdUt5c3BkQzV3ZFhOb0tIUm9hWE11WjJWMFVHOXBiblFvYmlBdklHVXBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGRYUnZRMnh2YzJVZ0ppWWdkQzV3ZFhOb0tIUmJNRjBwTENCME93b2dJQ0FnZlFvZ0lDQWdaMlYwVUc5cGJuUnpLR1VnUFNBeE1pa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdXMTBzSUc0N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNQ3dnY2lBOUlIUm9hWE11WTNWeWRtVnpPeUJwSUR3Z2NpNXNaVzVuZEdnN0lHa3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2NsdHBYU3dnWVNBOUlHOGdKaVlnYnk1cGMwVnNiR2x3YzJWRGRYSjJaU0EvSUdVZ0tpQXlJRG9nYnlBbUppQW9ieTVwYzB4cGJtVkRkWEoyWlNCOGZDQnZMbWx6VEdsdVpVTjFjblpsTXlrZ1B5QXhJRG9nYnlBbUppQnZMbWx6VTNCc2FXNWxRM1Z5ZG1VZ1B5QmxJQ29nYnk1d2IybHVkSE11YkdWdVozUm9JRG9nWlN3Z2JDQTlJRzh1WjJWMFVHOXBiblJ6S0dFcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR01nUFNBd095QmpJRHdnYkM1c1pXNW5kR2c3SUdNckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUNBOUlHeGJZMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1SUNZbUlHNHVaWEYxWVd4ektHZ3BJSHg4SUNoMExuQjFjMmdvYUNrc0lHNGdQU0JvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGRYUnZRMnh2YzJVZ0ppWWdkQzVzWlc1bmRHZ2dQaUF4SUNZbUlDRjBXM1F1YkdWdVozUm9JQzBnTVYwdVpYRjFZV3h6S0hSYk1GMHBJQ1ltSUhRdWNIVnphQ2gwV3pCZEtTd2dkRHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdVkzVnlkbVZ6SUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJR1V1WTNWeWRtVnpMbXhsYm1kMGFEc2dkQ0E4SUc0N0lIUXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1pTNWpkWEoyWlhOYmRGMDdDaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z5ZG1WekxuQjFjMmdvYVM1amJHOXVaU2dwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWFYwYjBOc2IzTmxJRDBnWlM1aGRYUnZRMnh2YzJVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCMGIwcFRUMDRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCemRYQmxjaTUwYjBwVFQwNG9LVHNLSUNBZ0lDQWdJQ0JsTG1GMWRHOURiRzl6WlNBOUlIUm9hWE11WVhWMGIwTnNiM05sTENCbExtTjFjblpsY3lBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0IwYUdsekxtTjFjblpsY3k1c1pXNW5kR2c3SUhRZ1BDQnVPeUIwS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVkzVnlkbVZ6VzNSZE93b2dJQ0FnSUNBZ0lDQWdJQ0JsTG1OMWNuWmxjeTV3ZFhOb0tHa3VkRzlLVTA5T0tDa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnpkWEJsY2k1bWNtOXRTbE5QVGlobEtTd2dkR2hwY3k1aGRYUnZRMnh2YzJVZ1BTQmxMbUYxZEc5RGJHOXpaU3dnZEdocGN5NWpkWEoyWlhNZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnWlM1amRYSjJaWE11YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbU4xY25abGMxdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqZFhKMlpYTXVjSFZ6YUNodVpYY2dWR0ZiYVM1MGVYQmxYU2dwTG1aeWIyMUtVMDlPS0drcEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03Q2lBZ0lDQjlDbjBzSUdkeUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCQmFDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKUVlYUm9JaXdnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblFnUFNCdVpYY2dXQ3dnWlNBbUppQjBhR2x6TG5ObGRFWnliMjFRYjJsdWRITW9aU2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0VUc5cGJuUnpLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbTF2ZG1WVWJ5aGxXekJkTG5nc0lHVmJNRjB1ZVNrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNU3dnYmlBOUlHVXViR1Z1WjNSb095QjBJRHdnYmpzZ2RDc3JLWFJvYVhNdWJHbHVaVlJ2S0dWYmRGMHVlQ3dnWlZ0MFhTNTVLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHMXZkbVZVYnlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzVnljbVZ1ZEZCdmFXNTBMbk5sZENobExDQjBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR3hwYm1WVWJ5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCdVpYY2dUM0lvZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1WTJ4dmJtVW9LU3dnYm1WM0lGZ29aU3dnZENrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25abGN5NXdkWE5vS0c0cExDQjBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNXpaWFFvWlN3Z2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnhkV0ZrY21GMGFXTkRkWEoyWlZSdktHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJRzVsZHlCamJ5aDBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNWpiRzl1WlNncExDQnVaWGNnV0NobExDQjBLU3dnYm1WM0lGZ29iaXdnYVNrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25abGN5NXdkWE5vS0hJcExDQjBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNXpaWFFvYml3Z2FTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmlaWHBwWlhKRGRYSjJaVlJ2S0dVc0lIUXNJRzRzSUdrc0lISXNJRzhwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUc1bGR5QnNieWgwYUdsekxtTjFjbkpsYm5SUWIybHVkQzVqYkc5dVpTZ3BMQ0J1WlhjZ1dDaGxMQ0IwS1N3Z2JtVjNJRmdvYml3Z2FTa3NJRzVsZHlCWUtISXNJRzhwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpkWEoyWlhNdWNIVnphQ2hoS1N3Z2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdWMyVjBLSElzSUc4cExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MzQnNhVzVsVkdoeWRTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRkJ2YVc1MExtTnNiMjVsS0NrS0lDQWdJQ0FnSUNCZExtTnZibU5oZENobEtTd2diaUE5SUc1bGR5QjFieWgwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpkWEoyWlhNdWNIVnphQ2h1S1N3Z2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdVkyOXdlU2hsVzJVdWJHVnVaM1JvSUMwZ01WMHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdZWEpqS0dVc0lIUXNJRzRzSUdrc0lISXNJRzhwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUhSb2FYTXVZM1Z5Y21WdWRGQnZhVzUwTG5nc0lHd2dQU0IwYUdsekxtTjFjbkpsYm5SUWIybHVkQzU1T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRmljMkZ5WXlobElDc2dZU3dnZENBcklHd3NJRzRzSUdrc0lISXNJRzhwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVdKellYSmpLR1VzSUhRc0lHNHNJR2tzSUhJc0lHOHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aFluTmxiR3hwY0hObEtHVXNJSFFzSUc0c0lHNHNJR2tzSUhJc0lHOHBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaV3hzYVhCelpTaGxMQ0IwTENCdUxDQnBMQ0J5TENCdkxDQmhMQ0JzS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR01nUFNCMGFHbHpMbU4xY25KbGJuUlFiMmx1ZEM1NExDQm9JRDBnZEdocGN5NWpkWEp5Wlc1MFVHOXBiblF1ZVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhZbk5sYkd4cGNITmxLR1VnS3lCakxDQjBJQ3NnYUN3Z2Jpd2dhU3dnY2l3Z2J5d2dZU3dnYkNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCaFluTmxiR3hwY0hObEtHVXNJSFFzSUc0c0lHa3NJSElzSUc4c0lHRXNJR3dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdZeUE5SUc1bGR5QlZjaWhsTENCMExDQnVMQ0JwTENCeUxDQnZMQ0JoTENCc0tUc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWpkWEoyWlhNdWJHVnVaM1JvSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUdNdVoyVjBVRzlwYm5Rb01DazdDaUFnSUNBZ0lDQWdJQ0FnSUhVdVpYRjFZV3h6S0hSb2FYTXVZM1Z5Y21WdWRGQnZhVzUwS1NCOGZDQjBhR2x6TG14cGJtVlVieWgxTG5nc0lIVXVlU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z5ZG1WekxuQjFjMmdvWXlrN0NpQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCakxtZGxkRkJ2YVc1MEtERXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OMWNuSmxiblJRYjJsdWRDNWpiM0I1S0dncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdVkzVnljbVZ1ZEZCdmFXNTBMbU52Y0hrb1pTNWpkWEp5Wlc1MFVHOXBiblFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5S1UwOU9LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnYzNWd1pYSXVkRzlLVTA5T0tDazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVXVZM1Z5Y21WdWRGQnZhVzUwSUQwZ2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdWRHOUJjbkpoZVNncExDQmxPd29nSUNBZ2ZRb2dJQ0FnWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVtY205dFNsTlBUaWhsS1N3Z2RHaHBjeTVqZFhKeVpXNTBVRzlwYm5RdVpuSnZiVUZ5Y21GNUtHVXVZM1Z5Y21WdWRGQnZhVzUwS1N3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnV0hRZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdkeUlIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXBPd29nSUNBZ0lDQWdJSFJvYVhNdWRYVnBaQ0E5SUVWMEtDa3NJSFJvYVhNdWRIbHdaU0E5SUNKVGFHRndaU0lzSUhSb2FYTXVhRzlzWlhNZ1BTQmJYVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnZhVzUwYzBodmJHVnpLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZ0ZE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQjBhR2x6TG1odmJHVnpMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWwwVzI1ZElEMGdkR2hwY3k1b2IyeGxjMXR1WFM1blpYUlFiMmx1ZEhNb1pTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUTdDaUFnSUNCOUNpQWdJQ0JsZUhSeVlXTjBVRzlwYm5SektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdld29nSUNBZ0lDQWdJQ0FnSUNCemFHRndaVG9nZEdocGN5NW5aWFJRYjJsdWRITW9aU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHaHZiR1Z6T2lCMGFHbHpMbWRsZEZCdmFXNTBjMGh2YkdWektHVXBDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdWFHOXNaWE1nUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIUWdQU0F3TENCdUlEMGdaUzVvYjJ4bGN5NXNaVzVuZEdnN0lIUWdQQ0J1T3lCMEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUdVdWFHOXNaWE5iZEYwN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHOXNaWE11Y0hWemFDaHBMbU5zYjI1bEtDa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlITjFjR1Z5TG5SdlNsTlBUaWdwT3dvZ0lDQWdJQ0FnSUdVdWRYVnBaQ0E5SUhSb2FYTXVkWFZwWkN3Z1pTNW9iMnhsY3lBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBc0lHNGdQU0IwYUdsekxtaHZiR1Z6TG14bGJtZDBhRHNnZENBOElHNDdJSFFyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwY3k1b2IyeGxjMXQwWFRzS0lDQWdJQ0FnSUNBZ0lDQWdaUzVvYjJ4bGN5NXdkWE5vS0drdWRHOUtVMDlPS0NrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1pUc0tJQ0FnSUgwS0lDQWdJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCemRYQmxjaTVtY205dFNsTlBUaWhsS1N3Z2RHaHBjeTUxZFdsa0lEMGdaUzUxZFdsa0xDQjBhR2x6TG1odmJHVnpJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNQ3dnYmlBOUlHVXVhRzlzWlhNdWJHVnVaM1JvT3lCMElEd2dianNnZENzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0JsTG1odmJHVnpXM1JkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1odmJHVnpMbkIxYzJnb2JtVjNJR2R5S0NrdVpuSnZiVXBUVDA0b2FTa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLZlN3Z1QzZ2dQU0I3Q2lBZ0lDQjBjbWxoYm1kMWJHRjBaVG9nWm5WdVkzUnBiMjRvY3l3Z1pTd2dkQ0E5SURJcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVWdKaVlnWlM1c1pXNW5kR2dzSUdrZ1BTQnVJRDhnWlZzd1hTQXFJSFFnT2lCekxteGxibWQwYUN3Z2NpQTlJRU5vS0hNc0lEQXNJR2tzSUhRc0lDRXdLU3dnYnlBOUlGdGRPd29nSUNBZ0lDQWdJR2xtSUNnaGNpQjhmQ0J5TG01bGVIUWdQVDA5SUhJdWNISmxkaWtnY21WMGRYSnVJRzg3Q2lBZ0lDQWdJQ0FnYkdWMElHRXNJR3dzSUdNc0lHZ3NJSFVzSUdRc0lHWTdDaUFnSUNBZ0lDQWdhV1lnS0c0Z0ppWWdLSElnUFNCWGVDaHpMQ0JsTENCeUxDQjBLU2tzSUhNdWJHVnVaM1JvSUQ0Z09EQWdLaUIwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR0VnUFNCaklEMGdjMXN3WFN3Z2JDQTlJR2dnUFNCeld6RmRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUcwZ1BTQjBPeUJ0SUR3Z2FUc2diU0FyUFNCMEtYVWdQU0J6VzIxZExDQmtJRDBnYzF0dElDc2dNVjBzSUhVZ1BDQmhJQ1ltSUNoaElEMGdkU2tzSUdRZ1BDQnNJQ1ltSUNoc0lEMGdaQ2tzSUhVZ1BpQmpJQ1ltSUNoaklEMGdkU2tzSUdRZ1BpQm9JQ1ltSUNob0lEMGdaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWWdQU0JOWVhSb0xtMWhlQ2hqSUMwZ1lTd2dhQ0F0SUd3cExDQm1JRDBnWmlBaFBUMGdNQ0EvSURFZ0x5Qm1JRG9nTURzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhoeUtISXNJRzhzSUhRc0lHRXNJR3dzSUdZcExDQnZPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJEYUNoekxDQmxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQnNaWFFnY2l3Z2J6c0tJQ0FnSUdsbUlDaHBJRDA5UFNCMGVTaHpMQ0JsTENCMExDQnVLU0ErSURBcElHWnZjaWh5SUQwZ1pUc2djaUE4SUhRN0lISWdLejBnYmlsdklEMGdiV01vY2l3Z2MxdHlYU3dnYzF0eUlDc2dNVjBzSUc4cE93b2dJQ0FnWld4elpTQm1iM0lvY2lBOUlIUWdMU0J1T3lCeUlENDlJR1U3SUhJZ0xUMGdiaWx2SUQwZ2JXTW9jaXdnYzF0eVhTd2djMXR5SUNzZ01WMHNJRzhwT3dvZ0lDQWdjbVYwZFhKdUlHOGdKaVlnWm04b2J5d2dieTV1WlhoMEtTQW1KaUFvZG5Jb2J5a3NJRzhnUFNCdkxtNWxlSFFwTENCdk93cDlDbVoxYm1OMGFXOXVJRlJ1S0hNc0lHVXBJSHNLSUNBZ0lHbG1JQ2doY3lrZ2NtVjBkWEp1SUhNN0NpQWdJQ0JsSUh4OElDaGxJRDBnY3lrN0NpQWdJQ0JzWlhRZ2RDQTlJSE1zSUc0N0NpQWdJQ0JrYnlCcFppQW9iaUE5SUNFeExDQWhkQzV6ZEdWcGJtVnlJQ1ltSUNobWJ5aDBMQ0IwTG01bGVIUXBJSHg4SUNSbEtIUXVjSEpsZGl3Z2RDd2dkQzV1WlhoMEtTQTlQVDBnTUNrcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZG5Jb2RDa3NJSFFnUFNCbElEMGdkQzV3Y21WMkxDQjBJRDA5UFNCMExtNWxlSFFwSUdKeVpXRnJPd29nSUNBZ0lDQWdJRzRnUFNBaE1Ec0tJQ0FnSUgwZ1pXeHpaU0IwSUQwZ2RDNXVaWGgwT3dvZ0lDQWdkMmhwYkdVZ0tHNGdmSHdnZENBaFBUMGdaU2tLSUNBZ0lISmxkSFZ5YmlCbE93cDlDbVoxYm1OMGFXOXVJSGh5S0hNc0lHVXNJSFFzSUc0c0lHa3NJSElzSUc4cElIc0tJQ0FnSUdsbUlDZ2hjeWtnY21WMGRYSnVPd29nSUNBZ0lXOGdKaVlnY2lBbUppQmFlQ2h6TENCdUxDQnBMQ0J5S1RzS0lDQWdJR3hsZENCaElEMGdjeXdnYkN3Z1l6c0tJQ0FnSUdadmNpZzdJSE11Y0hKbGRpQWhQVDBnY3k1dVpYaDBPeWw3Q2lBZ0lDQWdJQ0FnYVdZZ0tHd2dQU0J6TG5CeVpYWXNJR01nUFNCekxtNWxlSFFzSUhJZ1B5QnJlQ2h6TENCdUxDQnBMQ0J5S1NBNklFaDRLSE1wS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1V1Y0hWemFDaHNMbWtnTHlCMEtTd2daUzV3ZFhOb0tITXVhU0F2SUhRcExDQmxMbkIxYzJnb1l5NXBJQzhnZENrc0lIWnlLSE1wTENCeklEMGdZeTV1WlhoMExDQmhJRDBnWXk1dVpYaDBPd29nSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLSE1nUFNCakxDQnpJRDA5UFNCaEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUc4Z1B5QnZJRDA5UFNBeElEOGdLSE1nUFNCSGVDaFViaWh6S1N3Z1pTd2dkQ2tzSUhoeUtITXNJR1VzSUhRc0lHNHNJR2tzSUhJc0lESXBLU0E2SUc4Z1BUMDlJRElnSmlZZ1ZuZ29jeXdnWlN3Z2RDd2diaXdnYVN3Z2Npa2dPaUI0Y2loVWJpaHpLU3dnWlN3Z2RDd2diaXdnYVN3Z2Npd2dNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlFwbWRXNWpkR2x2YmlCSWVDaHpLU0I3Q2lBZ0lDQnNaWFFnWlNBOUlITXVjSEpsZGl3Z2RDQTlJSE1zSUc0Z1BTQnpMbTVsZUhRN0NpQWdJQ0JwWmlBb0pHVW9aU3dnZEN3Z2Jpa2dQajBnTUNrZ2NtVjBkWEp1SUNFeE93b2dJQ0FnYkdWMElHa2dQU0J6TG01bGVIUXVibVY0ZERzS0lDQWdJR1p2Y2lnN0lHa2dJVDA5SUhNdWNISmxkanNwZXdvZ0lDQWdJQ0FnSUdsbUlDaFRhU2hsTG5nc0lHVXVlU3dnZEM1NExDQjBMbmtzSUc0dWVDd2diaTU1TENCcExuZ3NJR2t1ZVNrZ0ppWWdKR1VvYVM1d2NtVjJMQ0JwTENCcExtNWxlSFFwSUQ0OUlEQXBJSEpsZEhWeWJpQWhNVHNLSUNBZ0lDQWdJQ0JwSUQwZ2FTNXVaWGgwT3dvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUNFd093cDlDbVoxYm1OMGFXOXVJR3Q0S0hNc0lHVXNJSFFzSUc0cElIc0tJQ0FnSUd4bGRDQnBJRDBnY3k1d2NtVjJMQ0J5SUQwZ2N5d2dieUE5SUhNdWJtVjRkRHNLSUNBZ0lHbG1JQ2drWlNocExDQnlMQ0J2S1NBK1BTQXdLU0J5WlhSMWNtNGdJVEU3Q2lBZ0lDQnNaWFFnWVNBOUlHa3VlQ0E4SUhJdWVDQS9JR2t1ZUNBOElHOHVlQ0EvSUdrdWVDQTZJRzh1ZUNBNklISXVlQ0E4SUc4dWVDQS9JSEl1ZUNBNklHOHVlQ3dnYkNBOUlHa3VlU0E4SUhJdWVTQS9JR2t1ZVNBOElHOHVlU0EvSUdrdWVTQTZJRzh1ZVNBNklISXVlU0E4SUc4dWVTQS9JSEl1ZVNBNklHOHVlU3dnWXlBOUlHa3VlQ0ErSUhJdWVDQS9JR2t1ZUNBK0lHOHVlQ0EvSUdrdWVDQTZJRzh1ZUNBNklISXVlQ0ErSUc4dWVDQS9JSEl1ZUNBNklHOHVlQ3dnYUNBOUlHa3VlU0ErSUhJdWVTQS9JR2t1ZVNBK0lHOHVlU0EvSUdrdWVTQTZJRzh1ZVNBNklISXVlU0ErSUc4dWVTQS9JSEl1ZVNBNklHOHVlU3dnZFNBOUlHOWhLR0VzSUd3c0lHVXNJSFFzSUc0cExDQmtJRDBnYjJFb1l5d2dhQ3dnWlN3Z2RDd2diaWtzSUdZZ1BTQnpMbkJ5WlhaYUxDQnRJRDBnY3k1dVpYaDBXanNLSUNBZ0lHWnZjaWc3SUdZZ0ppWWdaaTU2SUQ0OUlIVWdKaVlnYlNBbUppQnRMbm9nUEQwZ1pEc3Bld29nSUNBZ0lDQWdJR2xtSUNobUlDRTlQU0J6TG5CeVpYWWdKaVlnWmlBaFBUMGdjeTV1WlhoMElDWW1JRk5wS0drdWVDd2dhUzU1TENCeUxuZ3NJSEl1ZVN3Z2J5NTRMQ0J2TG5rc0lHWXVlQ3dnWmk1NUtTQW1KaUFrWlNobUxuQnlaWFlzSUdZc0lHWXVibVY0ZENrZ1BqMGdNQ0I4ZkNBb1ppQTlJR1l1Y0hKbGRsb3NJRzBnSVQwOUlITXVjSEpsZGlBbUppQnRJQ0U5UFNCekxtNWxlSFFnSmlZZ1Uya29hUzU0TENCcExua3NJSEl1ZUN3Z2NpNTVMQ0J2TG5nc0lHOHVlU3dnYlM1NExDQnRMbmtwSUNZbUlDUmxLRzB1Y0hKbGRpd2diU3dnYlM1dVpYaDBLU0ErUFNBd0tTa2djbVYwZFhKdUlDRXhPd29nSUNBZ0lDQWdJRzBnUFNCdExtNWxlSFJhT3dvZ0lDQWdmUW9nSUNBZ1ptOXlLRHNnWmlBbUppQm1Mbm9nUGowZ2RUc3Bld29nSUNBZ0lDQWdJR2xtSUNobUlDRTlQU0J6TG5CeVpYWWdKaVlnWmlBaFBUMGdjeTV1WlhoMElDWW1JRk5wS0drdWVDd2dhUzU1TENCeUxuZ3NJSEl1ZVN3Z2J5NTRMQ0J2TG5rc0lHWXVlQ3dnWmk1NUtTQW1KaUFrWlNobUxuQnlaWFlzSUdZc0lHWXVibVY0ZENrZ1BqMGdNQ2tnY21WMGRYSnVJQ0V4T3dvZ0lDQWdJQ0FnSUdZZ1BTQm1MbkJ5WlhaYU93b2dJQ0FnZlFvZ0lDQWdabTl5S0RzZ2JTQW1KaUJ0TG5vZ1BEMGdaRHNwZXdvZ0lDQWdJQ0FnSUdsbUlDaHRJQ0U5UFNCekxuQnlaWFlnSmlZZ2JTQWhQVDBnY3k1dVpYaDBJQ1ltSUZOcEtHa3VlQ3dnYVM1NUxDQnlMbmdzSUhJdWVTd2dieTU0TENCdkxua3NJRzB1ZUN3Z2JTNTVLU0FtSmlBa1pTaHRMbkJ5WlhZc0lHMHNJRzB1Ym1WNGRDa2dQajBnTUNrZ2NtVjBkWEp1SUNFeE93b2dJQ0FnSUNBZ0lHMGdQU0J0TG01bGVIUmFPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJQ0V3T3dwOUNtWjFibU4wYVc5dUlFZDRLSE1zSUdVc0lIUXBJSHNLSUNBZ0lHeGxkQ0J1SUQwZ2N6c0tJQ0FnSUdSdklIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHNHVjSEpsZGl3Z2NpQTlJRzR1Ym1WNGRDNXVaWGgwT3dvZ0lDQWdJQ0FnSUNGbWJ5aHBMQ0J5S1NBbUppQk1hQ2hwTENCdUxDQnVMbTVsZUhRc0lISXBJQ1ltSUhseUtHa3NJSElwSUNZbUlIbHlLSElzSUdrcElDWW1JQ2hsTG5CMWMyZ29hUzVwSUM4Z2RDa3NJR1V1Y0hWemFDaHVMbWtnTHlCMEtTd2daUzV3ZFhOb0tISXVhU0F2SUhRcExDQjJjaWh1S1N3Z2RuSW9iaTV1WlhoMEtTd2diaUE5SUhNZ1BTQnlLU3dnYmlBOUlHNHVibVY0ZERzS0lDQWdJSDEzYUdsc1pTQW9iaUFoUFQwZ2N5a0tJQ0FnSUhKbGRIVnliaUJVYmlodUtUc0tmUXBtZFc1amRHbHZiaUJXZUNoekxDQmxMQ0IwTENCdUxDQnBMQ0J5S1NCN0NpQWdJQ0JzWlhRZ2J5QTlJSE03Q2lBZ0lDQmtieUI3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0J2TG01bGVIUXVibVY0ZERzS0lDQWdJQ0FnSUNCbWIzSW9PeUJoSUNFOVBTQnZMbkJ5WlhZN0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOHVhU0FoUFQwZ1lTNXBJQ1ltSUZGNEtHOHNJR0VwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUZKb0tHOHNJR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlGUnVLRzhzSUc4dWJtVjRkQ2tzSUd3Z1BTQlViaWhzTENCc0xtNWxlSFFwTENCNGNpaHZMQ0JsTENCMExDQnVMQ0JwTENCeUtTd2dlSElvYkN3Z1pTd2dkQ3dnYml3Z2FTd2djaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUdFdWJtVjRkRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYnlBOUlHOHVibVY0ZERzS0lDQWdJSDEzYUdsc1pTQW9ieUFoUFQwZ2N5a0tmUXBtZFc1amRHbHZiaUJYZUNoekxDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUZ0ZExDQnlMQ0J2TENCaExDQnNMQ0JqT3dvZ0lDQWdabTl5S0hJZ1BTQXdMQ0J2SUQwZ1pTNXNaVzVuZEdnN0lISWdQQ0J2T3lCeUt5c3BZU0E5SUdWYmNsMGdLaUJ1TENCc0lEMGdjaUE4SUc4Z0xTQXhJRDhnWlZ0eUlDc2dNVjBnS2lCdUlEb2djeTVzWlc1bmRHZ3NJR01nUFNCRGFDaHpMQ0JoTENCc0xDQnVMQ0FoTVNrc0lHTWdQVDA5SUdNdWJtVjRkQ0FtSmlBb1l5NXpkR1ZwYm1WeUlEMGdJVEFwTENCcExuQjFjMmdvYW5nb1l5a3BPd29nSUNBZ1ptOXlLR2t1YzI5eWRDaHhlQ2tzSUhJZ1BTQXdPeUJ5SUR3Z2FTNXNaVzVuZEdnN0lISXJLeWxZZUNocFczSmRMQ0IwS1N3Z2RDQTlJRlJ1S0hRc0lIUXVibVY0ZENrN0NpQWdJQ0J5WlhSMWNtNGdkRHNLZlFwbWRXNWpkR2x2YmlCeGVDaHpMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdjeTU0SUMwZ1pTNTRPd3A5Q21aMWJtTjBhVzl1SUZoNEtITXNJR1VwSUhzS0lDQWdJR2xtSUNobElEMGdTbmdvY3l3Z1pTa3NJR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZKb0tHVXNJSE1wT3dvZ0lDQWdJQ0FnSUZSdUtHVXNJR1V1Ym1WNGRDa3NJRlJ1S0hRc0lIUXVibVY0ZENrN0NpQWdJQ0I5Q24wS1puVnVZM1JwYjI0Z1NuZ29jeXdnWlNrZ2V3b2dJQ0FnYkdWMElIUWdQU0JsTENCdUlEMGdjeTU0TENCcElEMGdjeTU1TENCeUlEMGdMVEVnTHlBd0xDQnZPd29nSUNBZ1pHOGdld29nSUNBZ0lDQWdJR2xtSUNocElEdzlJSFF1ZVNBbUppQnBJRDQ5SUhRdWJtVjRkQzU1SUNZbUlIUXVibVY0ZEM1NUlDRTlQU0IwTG5rcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0IwTG5nZ0t5QW9hU0F0SUhRdWVTa2dLaUFvZEM1dVpYaDBMbmdnTFNCMExuZ3BJQzhnS0hRdWJtVjRkQzU1SUMwZ2RDNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1FnUEQwZ2JpQW1KaUJrSUQ0Z2Npa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hJZ1BTQmtMQ0JrSUQwOVBTQnVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlIUXVlU2tnY21WMGRYSnVJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlIUXVibVY0ZEM1NUtTQnlaWFIxY200Z2RDNXVaWGgwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlIUXVlQ0E4SUhRdWJtVjRkQzU0SUQ4Z2RDQTZJSFF1Ym1WNGREc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMElEMGdkQzV1WlhoME93b2dJQ0FnZlhkb2FXeGxJQ2gwSUNFOVBTQmxLUW9nSUNBZ2FXWWdLQ0Z2S1NCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUdsbUlDaHVJRDA5UFNCeUtTQnlaWFIxY200Z2J6c0tJQ0FnSUd4bGRDQmhJRDBnYnl3Z2JDQTlJRzh1ZUN3Z1l5QTlJRzh1ZVN3Z2FDQTlJREVnTHlBd0xDQjFPd29nSUNBZ2RDQTlJRzg3Q2lBZ0lDQmtieUJ1SUQ0OUlIUXVlQ0FtSmlCMExuZ2dQajBnYkNBbUppQnVJQ0U5UFNCMExuZ2dKaVlnVTJrb2FTQThJR01nUHlCdUlEb2djaXdnYVN3Z2JDd2dZeXdnYVNBOElHTWdQeUJ5SURvZ2Jpd2dhU3dnZEM1NExDQjBMbmtwSUNZbUlDaDFJRDBnVFdGMGFDNWhZbk1vYVNBdElIUXVlU2tnTHlBb2JpQXRJSFF1ZUNrc0lIbHlLSFFzSUhNcElDWW1JQ2gxSUR3Z2FDQjhmQ0IxSUQwOVBTQm9JQ1ltSUNoMExuZ2dQaUJ2TG5nZ2ZId2dkQzU0SUQwOVBTQnZMbmdnSmlZZ1dYZ29ieXdnZENrcEtTQW1KaUFvYnlBOUlIUXNJR2dnUFNCMUtTa3NJSFFnUFNCMExtNWxlSFE3Q2lBZ0lDQjNhR2xzWlNBb2RDQWhQVDBnWVNrS0lDQWdJSEpsZEhWeWJpQnZPd3A5Q21aMWJtTjBhVzl1SUZsNEtITXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQWtaU2h6TG5CeVpYWXNJSE1zSUdVdWNISmxkaWtnUENBd0lDWW1JQ1JsS0dVdWJtVjRkQ3dnY3l3Z2N5NXVaWGgwS1NBOElEQTdDbjBLWm5WdVkzUnBiMjRnV25nb2N5d2daU3dnZEN3Z2Jpa2dld29nSUNBZ2JHVjBJR2tnUFNCek93b2dJQ0FnWkc4Z2FTNTZJRDA5UFNCdWRXeHNJQ1ltSUNocExub2dQU0J2WVNocExuZ3NJR2t1ZVN3Z1pTd2dkQ3dnYmlrcExDQnBMbkJ5WlhaYUlEMGdhUzV3Y21WMkxDQnBMbTVsZUhSYUlEMGdhUzV1WlhoMExDQnBJRDBnYVM1dVpYaDBPd29nSUNBZ2QyaHBiR1VnS0drZ0lUMDlJSE1wQ2lBZ0lDQnBMbkJ5WlhaYUxtNWxlSFJhSUQwZ2JuVnNiQ3dnYVM1d2NtVjJXaUE5SUc1MWJHd3NJQ1I0S0drcE93cDlDbVoxYm1OMGFXOXVJQ1I0S0hNcElIc0tJQ0FnSUd4bGRDQmxMQ0IwTENCdUxDQnBMQ0J5TENCdkxDQmhMQ0JzTENCaklEMGdNVHNLSUNBZ0lHUnZJSHNLSUNBZ0lDQWdJQ0JtYjNJb2RDQTlJSE1zSUhNZ1BTQnVkV3hzTENCeUlEMGdiblZzYkN3Z2J5QTlJREE3SUhRN0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHOHJLeXdnYmlBOUlIUXNJR0VnUFNBd0xDQmxJRDBnTURzZ1pTQThJR01nSmlZZ0tHRXJLeXdnYmlBOUlHNHVibVY0ZEZvc0lDRWhiaWs3SUdVckt5azdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNJRDBnWXpzZ1lTQStJREFnZkh3Z2JDQStJREFnSmlZZ2Jqc3BZU0FoUFQwZ01DQW1KaUFvYkNBOVBUMGdNQ0I4ZkNBaGJpQjhmQ0IwTG5vZ1BEMGdiaTU2S1NBL0lDaHBJRDBnZEN3Z2RDQTlJSFF1Ym1WNGRGb3NJR0V0TFNrZ09pQW9hU0E5SUc0c0lHNGdQU0J1TG01bGVIUmFMQ0JzTFMwcExDQnlJRDhnY2k1dVpYaDBXaUE5SUdrZ09pQnpJRDBnYVN3Z2FTNXdjbVYyV2lBOUlISXNJSElnUFNCcE93b2dJQ0FnSUNBZ0lDQWdJQ0IwSUQwZ2Jqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjaTV1WlhoMFdpQTlJRzUxYkd3c0lHTWdLajBnTWpzS0lDQWdJSDEzYUdsc1pTQW9ieUErSURFcENpQWdJQ0J5WlhSMWNtNGdjenNLZlFwbWRXNWpkR2x2YmlCdllTaHpMQ0JsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0J5WlhSMWNtNGdjeUE5SURNeU56WTNJQ29nS0hNZ0xTQjBLU0FxSUdrc0lHVWdQU0F6TWpjMk55QXFJQ2hsSUMwZ2Jpa2dLaUJwTENCeklEMGdLSE1nZkNCeklEdzhJRGdwSUNZZ01UWTNNVEU1TXpVc0lITWdQU0FvY3lCOElITWdQRHdnTkNrZ0ppQXlOVEkyTkRVeE16VXNJSE1nUFNBb2N5QjhJSE1nUER3Z01pa2dKaUE0TlRnNU9UTTBOVGtzSUhNZ1BTQW9jeUI4SUhNZ1BEd2dNU2tnSmlBeE5ETXhOalUxTnpZMUxDQmxJRDBnS0dVZ2ZDQmxJRHc4SURncElDWWdNVFkzTVRFNU16VXNJR1VnUFNBb1pTQjhJR1VnUER3Z05Da2dKaUF5TlRJMk5EVXhNelVzSUdVZ1BTQW9aU0I4SUdVZ1BEd2dNaWtnSmlBNE5UZzVPVE0wTlRrc0lHVWdQU0FvWlNCOElHVWdQRHdnTVNrZ0ppQXhORE14TmpVMU56WTFMQ0J6SUh3Z1pTQThQQ0F4T3dwOUNtWjFibU4wYVc5dUlHcDRLSE1wSUhzS0lDQWdJR3hsZENCbElEMGdjeXdnZENBOUlITTdDaUFnSUNCa2J5QW9aUzU0SUR3Z2RDNTRJSHg4SUdVdWVDQTlQVDBnZEM1NElDWW1JR1V1ZVNBOElIUXVlU2tnSmlZZ0tIUWdQU0JsS1N3Z1pTQTlJR1V1Ym1WNGREc0tJQ0FnSUhkb2FXeGxJQ2hsSUNFOVBTQnpLUW9nSUNBZ2NtVjBkWEp1SUhRN0NuMEtablZ1WTNScGIyNGdVMmtvY3l3Z1pTd2dkQ3dnYml3Z2FTd2djaXdnYnl3Z1lTa2dld29nSUNBZ2NtVjBkWEp1SUNocElDMGdieWtnS2lBb1pTQXRJR0VwSUMwZ0tITWdMU0J2S1NBcUlDaHlJQzBnWVNrZ1BqMGdNQ0FtSmlBb2N5QXRJRzhwSUNvZ0tHNGdMU0JoS1NBdElDaDBJQzBnYnlrZ0tpQW9aU0F0SUdFcElENDlJREFnSmlZZ0tIUWdMU0J2S1NBcUlDaHlJQzBnWVNrZ0xTQW9hU0F0SUc4cElDb2dLRzRnTFNCaEtTQStQU0F3T3dwOUNtWjFibU4wYVc5dUlGRjRLSE1zSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJ6TG01bGVIUXVhU0FoUFQwZ1pTNXBJQ1ltSUhNdWNISmxkaTVwSUNFOVBTQmxMbWtnSmlZZ0lVdDRLSE1zSUdVcElDWW1JQ2g1Y2loekxDQmxLU0FtSmlCNWNpaGxMQ0J6S1NBbUppQmxlU2h6TENCbEtTQW1KaUFvSkdVb2N5NXdjbVYyTENCekxDQmxMbkJ5WlhZcElIeDhJQ1JsS0hNc0lHVXVjSEpsZGl3Z1pTa3BJSHg4SUdadktITXNJR1VwSUNZbUlDUmxLSE11Y0hKbGRpd2djeXdnY3k1dVpYaDBLU0ErSURBZ0ppWWdKR1VvWlM1d2NtVjJMQ0JsTENCbExtNWxlSFFwSUQ0Z01DazdDbjBLWm5WdVkzUnBiMjRnSkdVb2N5d2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJQ2hsTG5rZ0xTQnpMbmtwSUNvZ0tIUXVlQ0F0SUdVdWVDa2dMU0FvWlM1NElDMGdjeTU0S1NBcUlDaDBMbmtnTFNCbExua3BPd3A5Q21aMWJtTjBhVzl1SUdadktITXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQnpMbmdnUFQwOUlHVXVlQ0FtSmlCekxua2dQVDA5SUdVdWVUc0tmUXBtZFc1amRHbHZiaUJNYUNoekxDQmxMQ0IwTENCdUtTQjdDaUFnSUNCc1pYUWdhU0E5SUhkektDUmxLSE1zSUdVc0lIUXBLU3dnY2lBOUlIZHpLQ1JsS0hNc0lHVXNJRzRwS1N3Z2J5QTlJSGR6S0NSbEtIUXNJRzRzSUhNcEtTd2dZU0E5SUhkektDUmxLSFFzSUc0c0lHVXBLVHNLSUNBZ0lISmxkSFZ5YmlBaElTaHBJQ0U5UFNCeUlDWW1JRzhnSVQwOUlHRWdmSHdnYVNBOVBUMGdNQ0FtSmlCaWN5aHpMQ0IwTENCbEtTQjhmQ0J5SUQwOVBTQXdJQ1ltSUdKektITXNJRzRzSUdVcElIeDhJRzhnUFQwOUlEQWdKaVlnWW5Nb2RDd2djeXdnYmlrZ2ZId2dZU0E5UFQwZ01DQW1KaUJpY3loMExDQmxMQ0J1S1NrN0NuMEtablZ1WTNScGIyNGdZbk1vY3l3Z1pTd2dkQ2tnZXdvZ0lDQWdjbVYwZFhKdUlHVXVlQ0E4UFNCTllYUm9MbTFoZUNoekxuZ3NJSFF1ZUNrZ0ppWWdaUzU0SUQ0OUlFMWhkR2d1YldsdUtITXVlQ3dnZEM1NEtTQW1KaUJsTG5rZ1BEMGdUV0YwYUM1dFlYZ29jeTU1TENCMExua3BJQ1ltSUdVdWVTQStQU0JOWVhSb0xtMXBiaWh6TG5rc0lIUXVlU2s3Q24wS1puVnVZM1JwYjI0Z2QzTW9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlITWdQaUF3SUQ4Z01TQTZJSE1nUENBd0lEOGdMVEVnT2lBd093cDlDbVoxYm1OMGFXOXVJRXQ0S0hNc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2N6c0tJQ0FnSUdSdklIc0tJQ0FnSUNBZ0lDQnBaaUFvZEM1cElDRTlQU0J6TG1rZ0ppWWdkQzV1WlhoMExta2dJVDA5SUhNdWFTQW1KaUIwTG1rZ0lUMDlJR1V1YVNBbUppQjBMbTVsZUhRdWFTQWhQVDBnWlM1cElDWW1JRXhvS0hRc0lIUXVibVY0ZEN3Z2N5d2daU2twSUhKbGRIVnliaUFoTURzS0lDQWdJQ0FnSUNCMElEMGdkQzV1WlhoME93b2dJQ0FnZlhkb2FXeGxJQ2gwSUNFOVBTQnpLUW9nSUNBZ2NtVjBkWEp1SUNFeE93cDlDbVoxYm1OMGFXOXVJSGx5S0hNc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlBa1pTaHpMbkJ5WlhZc0lITXNJSE11Ym1WNGRDa2dQQ0F3SUQ4Z0pHVW9jeXdnWlN3Z2N5NXVaWGgwS1NBK1BTQXdJQ1ltSUNSbEtITXNJSE11Y0hKbGRpd2daU2tnUGowZ01DQTZJQ1JsS0hNc0lHVXNJSE11Y0hKbGRpa2dQQ0F3SUh4OElDUmxLSE1zSUhNdWJtVjRkQ3dnWlNrZ1BDQXdPd3A5Q21aMWJtTjBhVzl1SUdWNUtITXNJR1VwSUhzS0lDQWdJR3hsZENCMElEMGdjeXdnYmlBOUlDRXhMQ0JwSUQwZ0tITXVlQ0FySUdVdWVDa2dMeUF5TENCeUlEMGdLSE11ZVNBcklHVXVlU2tnTHlBeU93b2dJQ0FnWkc4Z2RDNTVJRDRnY2lBaFBTQjBMbTVsZUhRdWVTQStJSElnSmlZZ2RDNXVaWGgwTG5rZ0lUMDlJSFF1ZVNBbUppQnBJRHdnS0hRdWJtVjRkQzU0SUMwZ2RDNTRLU0FxSUNoeUlDMGdkQzU1S1NBdklDaDBMbTVsZUhRdWVTQXRJSFF1ZVNrZ0t5QjBMbmdnSmlZZ0tHNGdQU0FoYmlrc0lIUWdQU0IwTG01bGVIUTdDaUFnSUNCM2FHbHNaU0FvZENBaFBUMGdjeWtLSUNBZ0lISmxkSFZ5YmlCdU93cDlDbVoxYm1OMGFXOXVJRkpvS0hNc0lHVXBJSHNLSUNBZ0lHeGxkQ0IwSUQwZ2JtVjNJR0ZoS0hNdWFTd2djeTU0TENCekxua3BMQ0J1SUQwZ2JtVjNJR0ZoS0dVdWFTd2daUzU0TENCbExua3BMQ0JwSUQwZ2N5NXVaWGgwTENCeUlEMGdaUzV3Y21WMk93b2dJQ0FnY21WMGRYSnVJSE11Ym1WNGRDQTlJR1VzSUdVdWNISmxkaUE5SUhNc0lIUXVibVY0ZENBOUlHa3NJR2t1Y0hKbGRpQTlJSFFzSUc0dWJtVjRkQ0E5SUhRc0lIUXVjSEpsZGlBOUlHNHNJSEl1Ym1WNGRDQTlJRzRzSUc0dWNISmxkaUE5SUhJc0lHNDdDbjBLWm5WdVkzUnBiMjRnYldNb2N5d2daU3dnZEN3Z2Jpa2dld29nSUNBZ2JHVjBJR2tnUFNCdVpYY2dZV0VvY3l3Z1pTd2dkQ2s3Q2lBZ0lDQnlaWFIxY200Z2JpQS9JQ2hwTG01bGVIUWdQU0J1TG01bGVIUXNJR2t1Y0hKbGRpQTlJRzRzSUc0dWJtVjRkQzV3Y21WMklEMGdhU3dnYmk1dVpYaDBJRDBnYVNrZ09pQW9hUzV3Y21WMklEMGdhU3dnYVM1dVpYaDBJRDBnYVNrc0lHazdDbjBLWm5WdVkzUnBiMjRnZG5Jb2N5a2dld29nSUNBZ2N5NXVaWGgwTG5CeVpYWWdQU0J6TG5CeVpYWXNJSE11Y0hKbGRpNXVaWGgwSUQwZ2N5NXVaWGgwTENCekxuQnlaWFphSUNZbUlDaHpMbkJ5WlhaYUxtNWxlSFJhSUQwZ2N5NXVaWGgwV2lrc0lITXVibVY0ZEZvZ0ppWWdLSE11Ym1WNGRGb3VjSEpsZGxvZ1BTQnpMbkJ5WlhaYUtUc0tmUXBtZFc1amRHbHZiaUJoWVNoekxDQmxMQ0IwS1NCN0NpQWdJQ0IwYUdsekxta2dQU0J6TENCMGFHbHpMbmdnUFNCbExDQjBhR2x6TG5rZ1BTQjBMQ0IwYUdsekxuQnlaWFlnUFNCdWRXeHNMQ0IwYUdsekxtNWxlSFFnUFNCdWRXeHNMQ0IwYUdsekxub2dQU0J1ZFd4c0xDQjBhR2x6TG5CeVpYWmFJRDBnYm5Wc2JDd2dkR2hwY3k1dVpYaDBXaUE5SUc1MWJHd3NJSFJvYVhNdWMzUmxhVzVsY2lBOUlDRXhPd3A5Q21aMWJtTjBhVzl1SUhSNUtITXNJR1VzSUhRc0lHNHBJSHNLSUNBZ0lHeGxkQ0JwSUQwZ01Ec0tJQ0FnSUdadmNpaHNaWFFnY2lBOUlHVXNJRzhnUFNCMElDMGdianNnY2lBOElIUTdJSElnS3owZ2JpbHBJQ3M5SUNoelcyOWRJQzBnYzF0eVhTa2dLaUFvYzF0eUlDc2dNVjBnS3lCelcyOGdLeUF4WFNrc0lHOGdQU0J5T3dvZ0lDQWdjbVYwZFhKdUlHazdDbjBLZG1GeUlFcDBJRDBnWTJ4aGMzTWdld29nSUNBZ2MzUmhkR2xqSUdGeVpXRW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnWlM1c1pXNW5kR2dzSUc0Z1BTQXdPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SUhRZ0xTQXhMQ0J5SUQwZ01Ec2djaUE4SUhRN0lHa2dQU0J5S3lzcGJpQXJQU0JsVzJsZExuZ2dLaUJsVzNKZExua2dMU0JsVzNKZExuZ2dLaUJsVzJsZExuazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNGdLaUF1TlRzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCcGMwTnNiMk5yVjJselpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRXAwTG1GeVpXRW9aU2tnUENBd093b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklIUnlhV0Z1WjNWc1lYUmxVMmhoY0dVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnVzEwc0lHa2dQU0JiWFN3Z2NpQTlJRnRkT3dvZ0lDQWdJQ0FnSUdkaktHVXBMQ0I0WXlodUxDQmxLVHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJR1V1YkdWdVozUm9Pd29nSUNBZ0lDQWdJSFF1Wm05eVJXRmphQ2huWXlrN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCc0lEMGdNRHNnYkNBOElIUXViR1Z1WjNSb095QnNLeXNwYVM1d2RYTm9LRzhwTENCdklDczlJSFJiYkYwdWJHVnVaM1JvTENCNFl5aHVMQ0IwVzJ4ZEtUc0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlFOTRMblJ5YVdGdVozVnNZWFJsS0c0c0lHa3BPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SURBN0lHd2dQQ0JoTG14bGJtZDBhRHNnYkNBclBTQXpLWEl1Y0hWemFDaGhMbk5zYVdObEtHd3NJR3dnS3lBektTazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISTdDaUFnSUNCOUNuMDdDbVoxYm1OMGFXOXVJR2RqS0hNcElIc0tJQ0FnSUd4bGRDQmxJRDBnY3k1c1pXNW5kR2c3Q2lBZ0lDQmxJRDRnTWlBbUppQnpXMlVnTFNBeFhTNWxjWFZoYkhNb2Mxc3dYU2tnSmlZZ2N5NXdiM0FvS1RzS2ZRcG1kVzVqZEdsdmJpQjRZeWh6TENCbEtTQjdDaUFnSUNCbWIzSW9iR1YwSUhRZ1BTQXdPeUIwSUR3Z1pTNXNaVzVuZEdnN0lIUXJLeWx6TG5CMWMyZ29aVnQwWFM1NEtTd2djeTV3ZFhOb0tHVmJkRjB1ZVNrN0NuMEtkbUZ5SUd4dUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCZlpTQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lGaDBLRnNLSUNBZ0lDQWdJQ0J1WlhjZ1dDZ3VOU3dnTGpVcExBb2dJQ0FnSUNBZ0lHNWxkeUJZS0MwdU5Td2dMalVwTEFvZ0lDQWdJQ0FnSUc1bGR5QllLQzB1TlN3Z0xTNDFLU3dLSUNBZ0lDQWdJQ0J1WlhjZ1dDZ3VOU3dnTFM0MUtRb2dJQ0FnWFNrc0lIUWdQU0I3ZlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlSWGgwY25Wa1pVZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCemFHRndaWE02SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJSFFLSUNBZ0lDQWdJQ0I5TENCbElEMGdRWEp5WVhrdWFYTkJjbkpoZVNobEtTQS9JR1VnT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJR1VLSUNBZ0lDQWdJQ0JkT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5d2dhU0E5SUZ0ZExDQnlJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaElEMGdNQ3dnYkNBOUlHVXViR1Z1WjNSb095QmhJRHdnYkRzZ1lTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCbFcyRmRPd29nSUNBZ0lDQWdJQ0FnSUNCdktHTXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2daR1VvYVN3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpZFhZaUxDQnVaWGNnWkdVb2Npd2dNaWtwTENCMGFHbHpMbU52YlhCMWRHVldaWEowWlhoT2IzSnRZV3h6S0NrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2J5aGhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1cxMHNJR01nUFNCMExtTjFjblpsVTJWbmJXVnVkSE1nSVQwOUlIWnZhV1FnTUNBL0lIUXVZM1Z5ZG1WVFpXZHRaVzUwY3lBNklERXlMQ0JvSUQwZ2RDNXpkR1Z3Y3lBaFBUMGdkbTlwWkNBd0lEOGdkQzV6ZEdWd2N5QTZJREVzSUhVZ1BTQjBMbVJsY0hSb0lDRTlQU0IyYjJsa0lEQWdQeUIwTG1SbGNIUm9JRG9nTVN3Z1pDQTlJSFF1WW1WMlpXeEZibUZpYkdWa0lDRTlQU0IyYjJsa0lEQWdQeUIwTG1KbGRtVnNSVzVoWW14bFpDQTZJQ0V3TENCbUlEMGdkQzVpWlhabGJGUm9hV05yYm1WemN5QWhQVDBnZG05cFpDQXdJRDhnZEM1aVpYWmxiRlJvYVdOcmJtVnpjeUE2SUM0eUxDQnRJRDBnZEM1aVpYWmxiRk5wZW1VZ0lUMDlJSFp2YVdRZ01DQS9JSFF1WW1WMlpXeFRhWHBsSURvZ1ppQXRJQzR4TENCNElEMGdkQzVpWlhabGJFOW1abk5sZENBaFBUMGdkbTlwWkNBd0lEOGdkQzVpWlhabGJFOW1abk5sZENBNklEQXNJSFlnUFNCMExtSmxkbVZzVTJWbmJXVnVkSE1nSVQwOUlIWnZhV1FnTUNBL0lIUXVZbVYyWld4VFpXZHRaVzUwY3lBNklETXNJR2NnUFNCMExtVjRkSEoxWkdWUVlYUm9MQ0J3SUQwZ2RDNVZWa2RsYm1WeVlYUnZjaUFoUFQwZ2RtOXBaQ0F3SUQ4Z2RDNVZWa2RsYm1WeVlYUnZjaUE2SUc1NU93b2dJQ0FnSUNBZ0lDQWdJQ0IwTG1GdGIzVnVkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaGpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMa1Y0ZEhKMVpHVkNkV1ptWlhKSFpXOXRaWFJ5ZVRvZ1lXMXZkVzUwSUdoaGN5QmlaV1Z1SUhKbGJtRnRaV1FnZEc4Z1pHVndkR2d1SWlrc0lIVWdQU0IwTG1GdGIzVnVkQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JmTENCNUlEMGdJVEVzSUdJc0lFRXNJRXdzSUVrN0NpQWdJQ0FnSUNBZ0lDQWdJR2NnSmlZZ0tGOGdQU0JuTG1kbGRGTndZV05sWkZCdmFXNTBjeWhvS1N3Z2VTQTlJQ0V3TENCa0lEMGdJVEVzSUdJZ1BTQm5MbU52YlhCMWRHVkdjbVZ1WlhSR2NtRnRaWE1vYUN3Z0lURXBMQ0JCSUQwZ2JtVjNJRTBzSUV3Z1BTQnVaWGNnVFN3Z1NTQTlJRzVsZHlCTktTd2daQ0I4ZkNBb2RpQTlJREFzSUdZZ1BTQXdMQ0J0SUQwZ01Dd2dlQ0E5SURBcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2F5QTlJR0V1WlhoMGNtRmpkRkJ2YVc1MGN5aGpLU3dnUWlBOUlHc3VjMmhoY0dVc0lGQWdQU0JyTG1odmJHVnpPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVXAwTG1selEyeHZZMnRYYVhObEtFSXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JDSUQwZ1FpNXlaWFpsY25ObEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElFY2dQU0F3TENCcUlEMGdVQzVzWlc1bmRHZzdJRWNnUENCcU95QkhLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JMSUQwZ1VGdEhYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCS2RDNXBjME5zYjJOclYybHpaU2hMS1NBbUppQW9VRnRIWFNBOUlFc3VjbVYyWlhKelpTZ3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1JTQTlJRXAwTG5SeWFXRnVaM1ZzWVhSbFUyaGhjR1VvUWl3Z1VDa3NJRVFnUFNCQ093b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRWNnUFNBd0xDQnFJRDBnVUM1c1pXNW5kR2c3SUVjZ1BDQnFPeUJIS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRXNnUFNCUVcwZGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRaUE5SUVJdVkyOXVZMkYwS0VzcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGVW9SeXdnYWl3Z1N5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHb2dmSHdnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVJYaDBjblZrWlVkbGIyMWxkSEo1T2lCMlpXTWdaRzlsY3lCdWIzUWdaWGhwYzNRaUtTd2dhaTVqYkc5dVpTZ3BMbTExYkhScGNHeDVVMk5oYkdGeUtFc3BMbUZrWkNoSEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUmlBOUlFSXViR1Z1WjNSb0xDQlBJRDBnUlM1c1pXNW5kR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHNWxLRWNzSUdvc0lFc3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMVpTd2djMlVzSUZObExDQlVaU0E5SUVjdWVDQXRJR291ZUN3Z1VHVWdQU0JITG5rZ0xTQnFMbmtzSUZsbElEMGdTeTU0SUMwZ1J5NTRMQ0JESUQwZ1N5NTVJQzBnUnk1NUxDQlVJRDBnVkdVZ0tpQlVaU0FySUZCbElDb2dVR1VzSUVvZ1BTQlVaU0FxSUVNZ0xTQlFaU0FxSUZsbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRTFoZEdndVlXSnpLRW9wSUQ0Z1RuVnRZbVZ5TGtWUVUwbE1UMDRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnSkNBOUlFMWhkR2d1YzNGeWRDaFVLU3dnY21VZ1BTQk5ZWFJvTG5OeGNuUW9XV1VnS2lCWlpTQXJJRU1nS2lCREtTd2dXaUE5SUdvdWVDQXRJRkJsSUM4Z0pDd2dUV1VnUFNCcUxua2dLeUJVWlNBdklDUXNJSFpsSUQwZ1N5NTRJQzBnUXlBdklISmxMQ0IwWlNBOUlFc3VlU0FySUZsbElDOGdjbVVzSUZJZ1BTQW9LSFpsSUMwZ1dpa2dLaUJESUMwZ0tIUmxJQzBnVFdVcElDb2dXV1VwSUM4Z0tGUmxJQ29nUXlBdElGQmxJQ29nV1dVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZsSUQwZ1dpQXJJRlJsSUNvZ1VpQXRJRWN1ZUN3Z2MyVWdQU0JOWlNBcklGQmxJQ29nVWlBdElFY3VlVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaV1VnUFNCMVpTQXFJSFZsSUNzZ2MyVWdLaUJ6WlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWldVZ1BEMGdNaWtnY21WMGRYSnVJRzVsZHlCWUtIVmxMQ0J6WlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVMlVnUFNCTllYUm9Mbk54Y25Rb1pXVWdMeUF5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJQ1FnUFNBaE1Uc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVWlNBK0lFNTFiV0psY2k1RlVGTkpURTlPSUQ4Z1dXVWdQaUJPZFcxaVpYSXVSVkJUU1V4UFRpQW1KaUFvSkNBOUlDRXdLU0E2SUZSbElEd2dMVTUxYldKbGNpNUZVRk5KVEU5T0lEOGdXV1VnUENBdFRuVnRZbVZ5TGtWUVUwbE1UMDRnSmlZZ0tDUWdQU0FoTUNrZ09pQk5ZWFJvTG5OcFoyNG9VR1VwSUQwOVBTQk5ZWFJvTG5OcFoyNG9ReWtnSmlZZ0tDUWdQU0FoTUNrc0lDUWdQeUFvZFdVZ1BTQXRVR1VzSUhObElEMGdWR1VzSUZObElEMGdUV0YwYUM1emNYSjBLRlFwS1NBNklDaDFaU0E5SUZSbExDQnpaU0E5SUZCbExDQlRaU0E5SUUxaGRHZ3VjM0Z5ZENoVUlDOGdNaWtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCWUtIVmxJQzhnVTJVc0lITmxJQzhnVTJVcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqWlNBOUlGdGRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVjZ1BTQXdMQ0JxSUQwZ1JDNXNaVzVuZEdnc0lFc2dQU0JxSUMwZ01Td2dkV1VnUFNCSElDc2dNVHNnUnlBOElHbzdJRWNyS3l3Z1N5c3JMQ0IxWlNzcktVc2dQVDA5SUdvZ0ppWWdLRXNnUFNBd0tTd2dkV1VnUFQwOUlHb2dKaVlnS0hWbElEMGdNQ2tzSUdObFcwZGRJRDBnYm1Vb1JGdEhYU3dnUkZ0TFhTd2dSRnQxWlYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ZpQTlJRnRkTENCWExDQm9aU0E5SUdObExtTnZibU5oZENncE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRWNnUFNBd0xDQnFJRDBnVUM1c1pXNW5kR2c3SUVjZ1BDQnFPeUJIS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRXNnUFNCUVcwZGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWeUE5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMVpTQTlJREFzSUhObElEMGdTeTVzWlc1bmRHZ3NJRk5sSUQwZ2MyVWdMU0F4TENCVVpTQTlJSFZsSUNzZ01Uc2dkV1VnUENCelpUc2dkV1VyS3l3Z1UyVXJLeXdnVkdVckt5bFRaU0E5UFQwZ2MyVWdKaVlnS0ZObElEMGdNQ2tzSUZSbElEMDlQU0J6WlNBbUppQW9WR1VnUFNBd0tTd2dWMXQxWlYwZ1BTQnVaU2hMVzNWbFhTd2dTMXRUWlYwc0lFdGJWR1ZkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZZdWNIVnphQ2hYS1N3Z2FHVWdQU0JvWlM1amIyNWpZWFFvVnlrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCSElEMGdNRHNnUnlBOElIWTdJRWNyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhaUE5SUVjZ0x5QjJMQ0JMSUQwZ1ppQXFJRTFoZEdndVkyOXpLR29nS2lCTllYUm9MbEJKSUM4Z01pa3NJSFZsSUQwZ2JTQXFJRTFoZEdndWMybHVLR29nS2lCTllYUm9MbEJKSUM4Z01pa2dLeUI0T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J6WlNBOUlEQXNJRk5sSUQwZ1JDNXNaVzVuZEdnN0lITmxJRHdnVTJVN0lITmxLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JVWlNBOUlGVW9SRnR6WlYwc0lHTmxXM05sWFN3Z2RXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVObEtGUmxMbmdzSUZSbExua3NJQzFMS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYzJVZ1BTQXdMQ0JUWlNBOUlGQXViR1Z1WjNSb095QnpaU0E4SUZObE95QnpaU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnVkdVZ1BTQlFXM05sWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlhJRDBnVmx0elpWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JRWlNBOUlEQXNJRmxsSUQwZ1ZHVXViR1Z1WjNSb095QlFaU0E4SUZsbE95QlFaU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFTWdQU0JWS0ZSbFcxQmxYU3dnVjF0UVpWMHNJSFZsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUTJVb1F5NTRMQ0JETG5rc0lDMUxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3hsSUQwZ2JTQXJJSGc3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1J5QTlJREE3SUVjZ1BDQkdPeUJIS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR29nUFNCa0lEOGdWU2hDVzBkZExDQm9aVnRIWFN3Z2JHVXBJRG9nUWx0SFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa2dQeUFvVEM1amIzQjVLR0l1Ym05eWJXRnNjMXN3WFNrdWJYVnNkR2x3YkhsVFkyRnNZWElvYWk1NEtTd2dRUzVqYjNCNUtHSXVZbWx1YjNKdFlXeHpXekJkS1M1dGRXeDBhWEJzZVZOallXeGhjaWhxTG5rcExDQkpMbU52Y0hrb1gxc3dYU2t1WVdSa0tFd3BMbUZrWkNoQktTd2dRMlVvU1M1NExDQkpMbmtzSUVrdWVpa3BJRG9nUTJVb2FpNTRMQ0JxTG5rc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdSeUE5SURFN0lFY2dQRDBnYURzZ1J5c3JLV1p2Y2loc1pYUWdhaUE5SURBN0lHb2dQQ0JHT3lCcUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVzZ1BTQmtJRDhnVlNoQ1cycGRMQ0JvWlZ0cVhTd2diR1VwSURvZ1FsdHFYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGtnUHlBb1RDNWpiM0I1S0dJdWJtOXliV0ZzYzF0SFhTa3ViWFZzZEdsd2JIbFRZMkZzWVhJb1N5NTRLU3dnUVM1amIzQjVLR0l1WW1sdWIzSnRZV3h6VzBkZEtTNXRkV3gwYVhCc2VWTmpZV3hoY2loTExua3BMQ0JKTG1OdmNIa29YMXRIWFNrdVlXUmtLRXdwTG1Ga1pDaEJLU3dnUTJVb1NTNTRMQ0JKTG5rc0lFa3VlaWtwSURvZ1EyVW9TeTU0TENCTExua3NJSFVnTHlCb0lDb2dSeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JISUQwZ2RpQXRJREU3SUVjZ1BqMGdNRHNnUnkwdEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JxSUQwZ1J5QXZJSFlzSUVzZ1BTQm1JQ29nVFdGMGFDNWpiM01vYWlBcUlFMWhkR2d1VUVrZ0x5QXlLU3dnZFdVZ1BTQnRJQ29nVFdGMGFDNXphVzRvYWlBcUlFMWhkR2d1VUVrZ0x5QXlLU0FySUhnN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhObElEMGdNQ3dnVTJVZ1BTQkVMbXhsYm1kMGFEc2djMlVnUENCVFpUc2djMlVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUZSbElEMGdWU2hFVzNObFhTd2dZMlZiYzJWZExDQjFaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1EyVW9WR1V1ZUN3Z1ZHVXVlU3dnZFNBcklFc3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQnpaU0E5SURBc0lGTmxJRDBnVUM1c1pXNW5kR2c3SUhObElEd2dVMlU3SUhObEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlVaU0E5SUZCYmMyVmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZjZ1BTQldXM05sWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElGQmxJRDBnTUN3Z1dXVWdQU0JVWlM1c1pXNW5kR2c3SUZCbElEd2dXV1U3SUZCbEt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUXlBOUlGVW9WR1ZiVUdWZExDQlhXMUJsWFN3Z2RXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVJRDhnUTJVb1F5NTRMQ0JETG5rZ0t5QmZXMmdnTFNBeFhTNTVMQ0JmVzJnZ0xTQXhYUzU0SUNzZ1N5a2dPaUJEWlNoRExuZ3NJRU11ZVN3Z2RTQXJJRXNwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1aU2dwTENCQ1pTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCbVpTZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSElEMGdhUzVzWlc1bmRHZ2dMeUF6T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhaUE5SURBc0lFc2dQU0JHSUNvZ2Fqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFZsSUQwZ01Ec2dkV1VnUENCUE95QjFaU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElITmxJRDBnUlZ0MVpWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIbGxLSE5sV3pKZElDc2dTeXdnYzJWYk1WMGdLeUJMTENCelpWc3dYU0FySUVzcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcUlEMGdhQ0FySUhZZ0tpQXlMQ0JMSUQwZ1JpQXFJR283Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMVpTQTlJREE3SUhWbElEd2dUenNnZFdVckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J6WlNBOUlFVmJkV1ZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1WlNoelpWc3dYU0FySUVzc0lITmxXekZkSUNzZ1N5d2djMlZiTWwwZ0t5QkxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2FpQTlJREE3SUdvZ1BDQlBPeUJxS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdTeUE5SUVWYmFsMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIbGxLRXRiTWwwc0lFdGJNVjBzSUV0Yk1GMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHb2dQU0F3T3lCcUlEd2dUenNnYWlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRXNnUFNCRlcycGRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVaU2hMV3pCZElDc2dSaUFxSUdnc0lFdGJNVjBnS3lCR0lDb2dhQ3dnUzFzeVhTQXJJRVlnS2lCb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1TG1Ga1pFZHliM1Z3S0Vjc0lHa3ViR1Z1WjNSb0lDOGdNeUF0SUVjc0lEQXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRUpsS0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRWNnUFNCcExteGxibWQwYUNBdklETXNJR29nUFNBd093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1dTaEVMQ0JxS1N3Z2FpQXJQU0JFTG14bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdTeUE5SURBc0lIVmxJRDBnVUM1c1pXNW5kR2c3SUVzZ1BDQjFaVHNnU3lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MyVWdQU0JRVzB0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRmtvYzJVc0lHb3BMQ0JxSUNzOUlITmxMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNHVZV1JrUjNKdmRYQW9SeXdnYVM1c1pXNW5kR2dnTHlBeklDMGdSeXdnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1dTaEhMQ0JxS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdTeUE5SUVjdWJHVnVaM1JvT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtEc2dMUzFMSUQ0OUlEQTdLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkV1VnUFNCTExDQnpaU0E5SUVzZ0xTQXhPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObElEd2dNQ0FtSmlBb2MyVWdQU0JITG14bGJtZDBhQ0F0SURFcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdVMlVnUFNBd0xDQlVaU0E5SUdnZ0t5QjJJQ29nTWpzZ1UyVWdQQ0JVWlRzZ1UyVXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCUVpTQTlJRVlnS2lCVFpTd2dXV1VnUFNCR0lDb2dLRk5sSUNzZ01Ta3NJRU1nUFNCcUlDc2dkV1VnS3lCUVpTd2dWQ0E5SUdvZ0t5QnpaU0FySUZCbExDQktJRDBnYWlBcklITmxJQ3NnV1dVc0lDUWdQU0JxSUNzZ2RXVWdLeUJaWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJVb1F5d2dWQ3dnU2l3Z0pDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUVObEtFY3NJR29zSUVzcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHd3VjSFZ6YUNoSEtTd2diQzV3ZFhOb0tHb3BMQ0JzTG5CMWMyZ29TeWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZVdVb1J5d2dhaXdnU3lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VHVW9SeWtzSUhobEtHb3BMQ0I0WlNoTEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IxWlNBOUlHa3ViR1Z1WjNSb0lDOGdNeXdnYzJVZ1BTQndMbWRsYm1WeVlYUmxWRzl3VlZZb2Jpd2dhU3dnZFdVZ0xTQXpMQ0IxWlNBdElESXNJSFZsSUMwZ01TazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlBaU2h6WlZzd1hTa3NJRTlsS0hObFd6RmRLU3dnVDJVb2MyVmJNbDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdkbEtFY3NJR29zSUVzc0lIVmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0WlNoSEtTd2dlR1VvYWlrc0lIaGxLSFZsS1N3Z2VHVW9haWtzSUhobEtFc3BMQ0I0WlNoMVpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzJVZ1BTQnBMbXhsYm1kMGFDQXZJRE1zSUZObElEMGdjQzVuWlc1bGNtRjBaVk5wWkdWWFlXeHNWVllvYml3Z2FTd2djMlVnTFNBMkxDQnpaU0F0SURNc0lITmxJQzBnTWl3Z2MyVWdMU0F4S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5bEtGTmxXekJkS1N3Z1QyVW9VMlZiTVYwcExDQlBaU2hUWlZzelhTa3NJRTlsS0ZObFd6RmRLU3dnVDJVb1UyVmJNbDBwTENCUFpTaFRaVnN6WFNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2VHVW9SeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVM1d2RYTm9LR3hiUnlBcUlETWdLeUF3WFNrc0lHa3VjSFZ6YUNoc1cwY2dLaUF6SUNzZ01WMHBMQ0JwTG5CMWMyZ29iRnRISUNvZ015QXJJREpkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCUFpTaEhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5TG5CMWMyZ29SeTU0S1N3Z2NpNXdkWE5vS0VjdWVTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQnpkWEJsY2k1MGIwcFRUMDRvS1N3Z2RDQTlJSFJvYVhNdWNHRnlZVzFsZEdWeWN5NXphR0Z3WlhNc0lHNGdQU0IwYUdsekxuQmhjbUZ0WlhSbGNuTXViM0IwYVc5dWN6c0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2FYa29kQ3dnYml3Z1pTazdDaUFnSUNCOUNpQWdJQ0J6ZEdGMGFXTWdabkp2YlVwVFQwNG9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1cxMDdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnlJRDBnTUN3Z2J5QTlJR1V1YzJoaGNHVnpMbXhsYm1kMGFEc2djaUE4SUc4N0lISXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2RGdGxMbk5vWVhCbGMxdHlYVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lHNHVjSFZ6YUNoaEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQmxMbTl3ZEdsdmJuTXVaWGgwY25Wa1pWQmhkR2c3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR2tnSVQwOUlIWnZhV1FnTUNBbUppQW9aUzV2Y0hScGIyNXpMbVY0ZEhKMVpHVlFZWFJvSUQwZ2JtVjNJRlJoVzJrdWRIbHdaVjBvS1M1bWNtOXRTbE5QVGlocEtTa3NJRzVsZHlCc2JpaHVMQ0JsTG05d2RHbHZibk1wT3dvZ0lDQWdmUXA5TENCdWVTQTlJSHNLSUNBZ0lHZGxibVZ5WVhSbFZHOXdWVlk2SUdaMWJtTjBhVzl1S0hNc0lHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR1ZiZENBcUlETmRMQ0J2SUQwZ1pWdDBJQ29nTXlBcklERmRMQ0JoSUQwZ1pWdHVJQ29nTTEwc0lHd2dQU0JsVzI0Z0tpQXpJQ3NnTVYwc0lHTWdQU0JsVzJrZ0tpQXpYU3dnYUNBOUlHVmJhU0FxSURNZ0t5QXhYVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXd29nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dXQ2h5TENCdktTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGZ29ZU3dnYkNrc0NpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCWUtHTXNJR2dwQ2lBZ0lDQWdJQ0FnWFRzS0lDQWdJSDBzQ2lBZ0lDQm5aVzVsY21GMFpWTnBaR1ZYWVd4c1ZWWTZJR1oxYm1OMGFXOXVLSE1zSUdVc0lIUXNJRzRzSUdrc0lISXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJR1ZiZENBcUlETmRMQ0JoSUQwZ1pWdDBJQ29nTXlBcklERmRMQ0JzSUQwZ1pWdDBJQ29nTXlBcklESmRMQ0JqSUQwZ1pWdHVJQ29nTTEwc0lHZ2dQU0JsVzI0Z0tpQXpJQ3NnTVYwc0lIVWdQU0JsVzI0Z0tpQXpJQ3NnTWwwc0lHUWdQU0JsVzJrZ0tpQXpYU3dnWmlBOUlHVmJhU0FxSURNZ0t5QXhYU3dnYlNBOUlHVmJhU0FxSURNZ0t5QXlYU3dnZUNBOUlHVmJjaUFxSUROZExDQjJJRDBnWlZ0eUlDb2dNeUFySURGZExDQm5JRDBnWlZ0eUlDb2dNeUFySURKZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbUZpY3loaElDMGdhQ2tnUENCTllYUm9MbUZpY3lodklDMGdZeWtnUHlCYkNpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCWUtHOHNJREVnTFNCc0tTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGZ29ZeXdnTVNBdElIVXBMQW9nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dXQ2hrTENBeElDMGdiU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJZS0hnc0lERWdMU0JuS1FvZ0lDQWdJQ0FnSUYwZ09pQmJDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QllLR0VzSURFZ0xTQnNLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRmdvYUN3Z01TQXRJSFVwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnV0NobUxDQXhJQzBnYlNrc0NpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCWUtIWXNJREVnTFNCbktRb2dJQ0FnSUNBZ0lGMDdDaUFnSUNCOUNuMDdDbVoxYm1OMGFXOXVJR2w1S0hNc0lHVXNJSFFwSUhzS0lDQWdJR2xtSUNoMExuTm9ZWEJsY3lBOUlGdGRMQ0JCY25KaGVTNXBjMEZ5Y21GNUtITXBLU0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnY3k1c1pXNW5kR2c3SUc0Z1BDQnBPeUJ1S3lzcGV3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2MxdHVYVHNLSUNBZ0lDQWdJQ0IwTG5Ob1lYQmxjeTV3ZFhOb0tISXVkWFZwWkNrN0NpQWdJQ0I5Q2lBZ0lDQmxiSE5sSUhRdWMyaGhjR1Z6TG5CMWMyZ29jeTUxZFdsa0tUc0tJQ0FnSUhKbGRIVnliaUJsTG1WNGRISjFaR1ZRWVhSb0lDRTlQU0IyYjJsa0lEQWdKaVlnS0hRdWIzQjBhVzl1Y3k1bGVIUnlkV1JsVUdGMGFDQTlJR1V1WlhoMGNuVmtaVkJoZEdndWRHOUtVMDlPS0NrcExDQjBPd3A5Q25aaGNpQmZjaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdZVzRnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlERXNJSFFnUFNBd0tYc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlDZ3hJQ3NnVFdGMGFDNXpjWEowS0RVcEtTQXZJRElzSUdrZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0J1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0J1TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUMxdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMxdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBdGJpd0tJQ0FnSUNBZ0lDQWdJQ0FnYml3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUc0c0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUMxdUxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xXNHNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVLSUNBZ0lDQWdJQ0JkTENCeUlEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TVN3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTlN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdOeXdLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTnl3S0lDQWdJQ0FnSUNBZ0lDQWdNVEFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ05Td0tJQ0FnSUNBZ0lDQWdJQ0FnT1N3S0lDQWdJQ0FnSUNBZ0lDQWdOU3dLSUNBZ0lDQWdJQ0FnSUNBZ01URXNDaUFnSUNBZ0lDQWdJQ0FnSURRc0NpQWdJQ0FnSUNBZ0lDQWdJREV4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01pd0tJQ0FnSUNBZ0lDQWdJQ0FnTVRBc0NpQWdJQ0FnSUNBZ0lDQWdJRGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lEWXNDaUFnSUNBZ0lDQWdJQ0FnSURjc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEZ3NDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJRGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lEUXNDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJRFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lEWXNDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJRFlzQ2lBZ0lDQWdJQ0FnSUNBZ0lEZ3NDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJRGdzQ2lBZ0lDQWdJQ0FnSUNBZ0lEa3NDaUFnSUNBZ0lDQWdJQ0FnSURRc0NpQWdJQ0FnSUNBZ0lDQWdJRGtzQ2lBZ0lDQWdJQ0FnSUNBZ0lEVXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJRFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXhMQW9nSUNBZ0lDQWdJQ0FnSUNBMkxBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ09Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTml3S0lDQWdJQ0FnSUNBZ0lDQWdOeXdLSUNBZ0lDQWdJQ0FnSUNBZ09Td0tJQ0FnSUNBZ0lDQWdJQ0FnT0N3S0lDQWdJQ0FnSUNBZ0lDQWdNUW9nSUNBZ0lDQWdJRjA3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9hU3dnY2l3Z1pTd2dkQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ0lrbGpiM05oYUdWa2NtOXVSMlZ2YldWMGNua2lMQ0IwYUdsekxuQmhjbUZ0WlhSbGNuTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmhaR2wxY3pvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnWkdWMFlXbHNPaUIwQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCbWNtOXRTbE5QVGlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJmY2lobExuSmhaR2wxY3l3Z1pTNWtaWFJoYVd3cE93b2dJQ0FnZlFwOUxDQk5jaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdYMlVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlGc0tJQ0FnSUNBZ0lDQnVaWGNnV0Nnd0xDQXVOU2tzQ2lBZ0lDQWdJQ0FnYm1WM0lGZ29MalVzSURBcExBb2dJQ0FnSUNBZ0lHNWxkeUJZS0RBc0lDMHVOU2tLSUNBZ0lGMHNJSFFnUFNBeE1pd2diaUE5SURBc0lHa2dQU0JOWVhSb0xsQkpJQ29nTWlsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlUR0YwYUdWSFpXOXRaWFJ5ZVNJc0lIUm9hWE11Y0dGeVlXMWxkR1Z5Y3lBOUlIc0tJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUnpPaUJsTEFvZ0lDQWdJQ0FnSUNBZ0lDQnpaV2R0Wlc1MGN6b2dkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NHaHBVM1JoY25RNklHNHNDaUFnSUNBZ0lDQWdJQ0FnSUhCb2FVeGxibWQwYURvZ2FRb2dJQ0FnSUNBZ0lIMHNJSFFnUFNCTllYUm9MbVpzYjI5eUtIUXBMQ0JwSUQwZ2JYUW9hU3dnTUN3Z1RXRjBhQzVRU1NBcUlESXBPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdXMTBzSUc4Z1BTQmJYU3dnWVNBOUlGdGRMQ0JzSUQwZ1cxMHNJR01nUFNCYlhTd2dhQ0E5SURFZ0x5QjBMQ0IxSUQwZ2JtVjNJRTBzSUdRZ1BTQnVaWGNnV0N3Z1ppQTlJRzVsZHlCTkxDQnRJRDBnYm1WM0lFMHNJSGdnUFNCdVpYY2dUU3dnZGlBOUlEQXNJR2NnUFNBd093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2NDQTlJREE3SUhBZ1BEMGdaUzVzWlc1bmRHZ2dMU0F4T3lCd0t5c3BjM2RwZEdOb0tIQXBld29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJREE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IySUQwZ1pWdHdJQ3NnTVYwdWVDQXRJR1ZiY0YwdWVDd2daeUE5SUdWYmNDQXJJREZkTG5rZ0xTQmxXM0JkTG5rc0lHWXVlQ0E5SUdjZ0tpQXhMQ0JtTG5rZ1BTQXRkaXdnWmk1NklEMGdaeUFxSURBc0lIZ3VZMjl3ZVNobUtTd2daaTV1YjNKdFlXeHBlbVVvS1N3Z2JDNXdkWE5vS0dZdWVDd2daaTU1TENCbUxub3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1pTNXNaVzVuZEdnZ0xTQXhPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiQzV3ZFhOb0tIZ3VlQ3dnZUM1NUxDQjRMbm9wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IySUQwZ1pWdHdJQ3NnTVYwdWVDQXRJR1ZiY0YwdWVDd2daeUE5SUdWYmNDQXJJREZkTG5rZ0xTQmxXM0JkTG5rc0lHWXVlQ0E5SUdjZ0tpQXhMQ0JtTG5rZ1BTQXRkaXdnWmk1NklEMGdaeUFxSURBc0lHMHVZMjl3ZVNobUtTd2daaTU0SUNzOUlIZ3VlQ3dnWmk1NUlDczlJSGd1ZVN3Z1ppNTZJQ3M5SUhndWVpd2daaTV1YjNKdFlXeHBlbVVvS1N3Z2JDNXdkWE5vS0dZdWVDd2daaTU1TENCbUxub3BMQ0I0TG1OdmNIa29iU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY0NBOUlEQTdJSEFnUEQwZ2REc2djQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUY4Z1BTQnVJQ3NnY0NBcUlHZ2dLaUJwTENCNUlEMGdUV0YwYUM1emFXNG9YeWtzSUdJZ1BTQk5ZWFJvTG1OdmN5aGZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCQklEMGdNRHNnUVNBOFBTQmxMbXhsYm1kMGFDQXRJREU3SUVFckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFMbmdnUFNCbFcwRmRMbmdnS2lCNUxDQjFMbmtnUFNCbFcwRmRMbmtzSUhVdWVpQTlJR1ZiUVYwdWVDQXFJR0lzSUc4dWNIVnphQ2gxTG5nc0lIVXVlU3dnZFM1NktTd2daQzU0SUQwZ2NDQXZJSFFzSUdRdWVTQTlJRUVnTHlBb1pTNXNaVzVuZEdnZ0xTQXhLU3dnWVM1d2RYTm9LR1F1ZUN3Z1pDNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCTUlEMGdiRnN6SUNvZ1FTQXJJREJkSUNvZ2VTd2dTU0E5SUd4Yk15QXFJRUVnS3lBeFhTd2dheUE5SUd4Yk15QXFJRUVnS3lBd1hTQXFJR0k3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqTG5CMWMyZ29UQ3dnU1N3Z2F5azdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCd0lEMGdNRHNnY0NBOElIUTdJSEFyS3lsbWIzSW9iR1YwSUY4Z1BTQXdPeUJmSUR3Z1pTNXNaVzVuZEdnZ0xTQXhPeUJmS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJRjhnS3lCd0lDb2daUzVzWlc1bmRHZ3NJR0lnUFNCNUxDQkJJRDBnZVNBcklHVXViR1Z1WjNSb0xDQk1JRDBnZVNBcklHVXViR1Z1WjNSb0lDc2dNU3dnU1NBOUlIa2dLeUF4T3dvZ0lDQWdJQ0FnSUNBZ0lDQnlMbkIxYzJnb1lpd2dRU3dnU1Nrc0lISXVjSFZ6YUNoQkxDQk1MQ0JKS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSSmJtUmxlQ2h5S1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUdSbEtHOHNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luVjJJaXdnYm1WM0lHUmxLR0VzSURJcEtTd2dkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9JbTV2Y20xaGJDSXNJRzVsZHlCa1pTaGpMQ0F6S1NrN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ1puSnZiVXBUVDA0b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFhJb1pTNXdiMmx1ZEhNc0lHVXVjMlZuYldWdWRITXNJR1V1Y0docFUzUmhjblFzSUdVdWNHaHBUR1Z1WjNSb0tUc0tJQ0FnSUgwS2ZTd2dTV2tnUFNCamJHRnpjeUJsZUhSbGJtUnpJR0Z1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ01DbDdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVLSUNBZ0lDQWdJQ0JkTENCcElEMGdXd29nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQTFMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0ExTEFvZ0lDQWdJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F5TEFvZ0lDQWdJQ0FnSUNBZ0lDQTFMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0ExTEFvZ0lDQWdJQ0FnSUNBZ0lDQXpMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F6TEFvZ0lDQWdJQ0FnSUNBZ0lDQTBMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0EwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXlDaUFnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHVMQ0JwTENCbExDQjBLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVQyTjBZV2hsWkhKdmJrZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE02SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsZEdGcGJEb2dkQW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTV2tvWlM1eVlXUnBkWE1zSUdVdVpHVjBZV2xzS1RzS0lDQWdJSDBLZlN3Z1luSWdQU0JqYkdGemN5QmxlSFJsYm1SeklGOWxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBdU5Td2dkQ0E5SURFc0lHNGdQU0E0TENCcElEMGdNU3dnY2lBOUlEQXNJRzhnUFNCTllYUm9MbEJKSUNvZ01pbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpVW1sdVowZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCcGJtNWxjbEpoWkdsMWN6b2daU3dLSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBaWEpTWVdScGRYTTZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUm9aWFJoVTJWbmJXVnVkSE02SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJSEJvYVZObFoyMWxiblJ6T2lCcExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdWMFlWTjBZWEowT2lCeUxBb2dJQ0FnSUNBZ0lDQWdJQ0IwYUdWMFlVeGxibWQwYURvZ2J3b2dJQ0FnSUNBZ0lIMHNJRzRnUFNCTllYUm9MbTFoZUNnekxDQnVLU3dnYVNBOUlFMWhkR2d1YldGNEtERXNJR2twT3dvZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnVzEwc0lHd2dQU0JiWFN3Z1l5QTlJRnRkTENCb0lEMGdXMTBzSUhVZ1BTQmxMQ0JrSUQwZ0tIUWdMU0JsS1NBdklHa3NJR1lnUFNCdVpYY2dUU3dnYlNBOUlHNWxkeUJZT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZUNBOUlEQTdJSGdnUEQwZ2FUc2dlQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjJJRDBnTURzZ2RpQThQU0J1T3lCMkt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdjZ1BTQnlJQ3NnZGlBdklHNGdLaUJ2T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmk1NElEMGdkU0FxSUUxaGRHZ3VZMjl6S0djcExDQm1MbmtnUFNCMUlDb2dUV0YwYUM1emFXNG9aeWtzSUd3dWNIVnphQ2htTG5nc0lHWXVlU3dnWmk1NktTd2dZeTV3ZFhOb0tEQXNJREFzSURFcExDQnRMbmdnUFNBb1ppNTRJQzhnZENBcklERXBJQzhnTWl3Z2JTNTVJRDBnS0dZdWVTQXZJSFFnS3lBeEtTQXZJRElzSUdndWNIVnphQ2h0TG5nc0lHMHVlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZFNBclBTQmtPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGdnUFNBd095QjRJRHdnYVRzZ2VDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFlnUFNCNElDb2dLRzRnS3lBeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JuSUQwZ01Ec2daeUE4SUc0N0lHY3JLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NDQTlJR2NnS3lCMkxDQmZJRDBnY0N3Z2VTQTlJSEFnS3lCdUlDc2dNU3dnWWlBOUlIQWdLeUJ1SUNzZ01pd2dRU0E5SUhBZ0t5QXhPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZUzV3ZFhOb0tGOHNJSGtzSUVFcExDQmhMbkIxYzJnb2VTd2dZaXdnUVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEdocGN5NXpaWFJKYm1SbGVDaGhLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJR1JsS0d3c0lETXBLU3dnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvSW01dmNtMWhiQ0lzSUc1bGR5QmtaU2hqTENBektTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0oxZGlJc0lHNWxkeUJrWlNob0xDQXlLU2s3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dZbklvWlM1cGJtNWxjbEpoWkdsMWN5d2daUzV2ZFhSbGNsSmhaR2wxY3l3Z1pTNTBhR1YwWVZObFoyMWxiblJ6TENCbExuQm9hVk5sWjIxbGJuUnpMQ0JsTG5Sb1pYUmhVM1JoY25Rc0lHVXVkR2hsZEdGTVpXNW5kR2dwT3dvZ0lDQWdmUXA5TENCRWFTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1gyVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SUc1bGR5QllkQ2hiQ2lBZ0lDQWdJQ0FnYm1WM0lGZ29NQ3dnTGpVcExBb2dJQ0FnSUNBZ0lHNWxkeUJZS0MwdU5Td2dMUzQxS1N3S0lDQWdJQ0FnSUNCdVpYY2dXQ2d1TlN3Z0xTNDFLUW9nSUNBZ1hTa3NJSFFnUFNBeE1pbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpVTJoaGNHVkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1Z6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0JqZFhKMlpWTmxaMjFsYm5Sek9pQjBDaUFnSUNBZ0lDQWdmVHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRnRkTENCcElEMGdXMTBzSUhJZ1BTQmJYU3dnYnlBOUlGdGRMQ0JoSUQwZ01Dd2diQ0E5SURBN0NpQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa2dQVDA5SUNFeEtTQmpLR1VwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdabTl5S0d4bGRDQm9JRDBnTURzZ2FDQThJR1V1YkdWdVozUm9PeUJvS3lzcFl5aGxXMmhkS1N3Z2RHaHBjeTVoWkdSSGNtOTFjQ2hoTENCc0xDQm9LU3dnWVNBclBTQnNMQ0JzSUQwZ01Ec0tJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFbHVaR1Y0S0c0cExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ1pHVW9hU3dnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2libTl5YldGc0lpd2dibVYzSUdSbEtISXNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luVjJJaXdnYm1WM0lHUmxLRzhzSURJcEtUc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmpLR2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhVZ1BTQnBMbXhsYm1kMGFDQXZJRE1zSUdRZ1BTQm9MbVY0ZEhKaFkzUlFiMmx1ZEhNb2RDa3NJR1lnUFNCa0xuTm9ZWEJsTENCdElEMGdaQzVvYjJ4bGN6c0tJQ0FnSUNBZ0lDQWdJQ0FnU25RdWFYTkRiRzlqYTFkcGMyVW9aaWtnUFQwOUlDRXhJQ1ltSUNobUlEMGdaaTV5WlhabGNuTmxLQ2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIWWdQU0F3TENCbklEMGdiUzVzWlc1bmRHZzdJSFlnUENCbk95QjJLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQWdQU0J0VzNaZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1NuUXVhWE5EYkc5amExZHBjMlVvY0NrZ1BUMDlJQ0V3SUNZbUlDaHRXM1pkSUQwZ2NDNXlaWFpsY25ObEtDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNElEMGdTblF1ZEhKcFlXNW5kV3hoZEdWVGFHRndaU2htTENCdEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IySUQwZ01Dd2daeUE5SUcwdWJHVnVaM1JvT3lCMklEd2daenNnZGlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J3SUQwZ2JWdDJYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1lnUFNCbUxtTnZibU5oZENod0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIWWdQU0F3TENCbklEMGdaaTVzWlc1bmRHZzdJSFlnUENCbk95QjJLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQWdQU0JtVzNaZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTNXdkWE5vS0hBdWVDd2djQzU1TENBd0tTd2djaTV3ZFhOb0tEQXNJREFzSURFcExDQnZMbkIxYzJnb2NDNTRMQ0J3TG5rcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RpQTlJREFzSUdjZ1BTQjRMbXhsYm1kMGFEc2dkaUE4SUdjN0lIWXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NDQTlJSGhiZGwwc0lGOGdQU0J3V3pCZElDc2dkU3dnZVNBOUlIQmJNVjBnS3lCMUxDQmlJRDBnY0ZzeVhTQXJJSFU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1TG5CMWMyZ29YeXdnZVN3Z1lpa3NJR3dnS3owZ016c0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlITjFjR1Z5TG5SdlNsTlBUaWdwTENCMElEMGdkR2hwY3k1d1lYSmhiV1YwWlhKekxuTm9ZWEJsY3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY25rb2RDd2daU2s3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Dd2djaUE5SUdVdWMyaGhjR1Z6TG14bGJtZDBhRHNnYVNBOElISTdJR2tyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdklEMGdkRnRsTG5Ob1lYQmxjMXRwWFYwN0NpQWdJQ0FnSUNBZ0lDQWdJRzR1Y0hWemFDaHZLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCRWFTaHVMQ0JsTG1OMWNuWmxVMlZuYldWdWRITXBPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJ5ZVNoekxDQmxLU0I3Q2lBZ0lDQnBaaUFvWlM1emFHRndaWE1nUFNCYlhTd2dRWEp5WVhrdWFYTkJjbkpoZVNoektTa2dabTl5S0d4bGRDQjBJRDBnTUN3Z2JpQTlJSE11YkdWdVozUm9PeUIwSUR3Z2Jqc2dkQ3NyS1hzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhOYmRGMDdDaUFnSUNBZ0lDQWdaUzV6YUdGd1pYTXVjSFZ6YUNocExuVjFhV1FwT3dvZ0lDQWdmUW9nSUNBZ1pXeHpaU0JsTG5Ob1lYQmxjeTV3ZFhOb0tITXVkWFZwWkNrN0NpQWdJQ0J5WlhSMWNtNGdaVHNLZlFwMllYSWdSbWtnUFNCamJHRnpjeUJsZUhSbGJtUnpJRjlsSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQXhMQ0IwSUQwZ016SXNJRzRnUFNBeE5pd2dhU0E5SURBc0lISWdQU0JOWVhSb0xsQkpJQ29nTWl3Z2J5QTlJREFzSUdFZ1BTQk5ZWFJvTGxCSktYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lncE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pUY0dobGNtVkhaVzl0WlhSeWVTSXNJSFJvYVhNdWNHRnlZVzFsZEdWeWN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthWFZ6T2lCbExBb2dJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFGTmxaMjFsYm5Sek9pQjBMQW9nSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFJUWldkdFpXNTBjem9nYml3S0lDQWdJQ0FnSUNBZ0lDQWdjR2hwVTNSaGNuUTZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQm9hVXhsYm1kMGFEb2djaXdLSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxkR0ZUZEdGeWREb2dieXdLSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxkR0ZNWlc1bmRHZzZJR0VLSUNBZ0lDQWdJQ0I5TENCMElEMGdUV0YwYUM1dFlYZ29NeXdnVFdGMGFDNW1iRzl2Y2loMEtTa3NJRzRnUFNCTllYUm9MbTFoZUNneUxDQk5ZWFJvTG1ac2IyOXlLRzRwS1RzS0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUUxaGRHZ3ViV2x1S0c4Z0t5QmhMQ0JOWVhSb0xsQkpLU3dnWXlBOUlEQXNJR2dnUFNCYlhTd2dkU0E5SUc1bGR5Qk5MQ0JrSUQwZ2JtVjNJRTBzSUdZZ1BTQmJYU3dnYlNBOUlGdGRMQ0I0SUQwZ1cxMHNJSFlnUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHY2dQU0F3T3lCbklEdzlJRzQ3SUdjckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQndJRDBnVzEwc0lGOGdQU0JuSUM4Z2Jpd2dlU0E5SURBN0NpQWdJQ0FnSUNBZ0lDQWdJR2NnUFQwZ01DQW1KaUJ2SUQwOUlEQWdQeUI1SUQwZ0xqVWdMeUIwSURvZ1p5QTlQU0J1SUNZbUlHd2dQVDBnVFdGMGFDNVFTU0FtSmlBb2VTQTlJQzB1TlNBdklIUXBPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdJZ1BTQXdPeUJpSUR3OUlIUTdJR0lyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdRU0E5SUdJZ0x5QjBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkUzU0SUQwZ0xXVWdLaUJOWVhSb0xtTnZjeWhwSUNzZ1FTQXFJSElwSUNvZ1RXRjBhQzV6YVc0b2J5QXJJRjhnS2lCaEtTd2dkUzU1SUQwZ1pTQXFJRTFoZEdndVkyOXpLRzhnS3lCZklDb2dZU2tzSUhVdWVpQTlJR1VnS2lCTllYUm9Mbk5wYmlocElDc2dRU0FxSUhJcElDb2dUV0YwYUM1emFXNG9ieUFySUY4Z0tpQmhLU3dnYlM1d2RYTm9LSFV1ZUN3Z2RTNTVMQ0IxTG5vcExDQmtMbU52Y0hrb2RTa3VibTl5YldGc2FYcGxLQ2tzSUhndWNIVnphQ2hrTG5nc0lHUXVlU3dnWkM1NktTd2dkaTV3ZFhOb0tFRWdLeUI1TENBeElDMGdYeWtzSUhBdWNIVnphQ2hqS3lzcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHZ3VjSFZ6YUNod0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQm5JRDBnTURzZ1p5QThJRzQ3SUdjckt5bG1iM0lvYkdWMElIQWdQU0F3T3lCd0lEd2dkRHNnY0NzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOGdQU0JvVzJkZFczQWdLeUF4WFN3Z2VTQTlJR2hiWjExYmNGMHNJR0lnUFNCb1cyY2dLeUF4WFZ0d1hTd2dRU0E5SUdoYlp5QXJJREZkVzNBZ0t5QXhYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0tHY2dJVDA5SURBZ2ZId2dieUErSURBcElDWW1JR1l1Y0hWemFDaGZMQ0I1TENCQktTd2dLR2NnSVQwOUlHNGdMU0F4SUh4OElHd2dQQ0JOWVhSb0xsQkpLU0FtSmlCbUxuQjFjMmdvZVN3Z1lpd2dRU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1c1a1pYZ29aaWtzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUJrWlNodExDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKdWIzSnRZV3dpTENCdVpYY2daR1VvZUN3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpZFhZaUxDQnVaWGNnWkdVb2Rpd2dNaWtwT3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdaeWIyMUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRVpwS0dVdWNtRmthWFZ6TENCbExuZHBaSFJvVTJWbmJXVnVkSE1zSUdVdWFHVnBaMmgwVTJWbmJXVnVkSE1zSUdVdWNHaHBVM1JoY25Rc0lHVXVjR2hwVEdWdVozUm9MQ0JsTG5Sb1pYUmhVM1JoY25Rc0lHVXVkR2hsZEdGTVpXNW5kR2dwT3dvZ0lDQWdmUXA5TENCM2NpQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1lXNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU0E5SURFc0lIUWdQU0F3S1hzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNUW9nSUNBZ0lDQWdJRjBzSUdrZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJSE4xY0dWeUtHNHNJR2tzSUdVc0lIUXBPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKVVpYUnlZV2hsWkhKdmJrZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE02SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsZEdGcGJEb2dkQW9nSUNBZ0lDQWdJSDA3Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dkM0lvWlM1eVlXUnBkWE1zSUdVdVpHVjBZV2xzS1RzS0lDQWdJSDBLZlN3Z1UzSWdQU0JqYkdGemN5QmxlSFJsYm1SeklGOWxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNBeExDQjBJRDBnTGpRc0lHNGdQU0E0TENCcElEMGdOaXdnY2lBOUlFMWhkR2d1VUVrZ0tpQXlLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKVWIzSjFjMGRsYjIxbGRISjVJaXdnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlZV1JwZFhNNklHVXNDaUFnSUNBZ0lDQWdJQ0FnSUhSMVltVTZJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lISmhaR2xoYkZObFoyMWxiblJ6T2lCdUxBb2dJQ0FnSUNBZ0lDQWdJQ0IwZFdKMWJHRnlVMlZuYldWdWRITTZJR2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHRnlZem9nY2dvZ0lDQWdJQ0FnSUgwc0lHNGdQU0JOWVhSb0xtWnNiMjl5S0c0cExDQnBJRDBnVFdGMGFDNW1iRzl2Y2locEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlGdGRMQ0JoSUQwZ1cxMHNJR3dnUFNCYlhTd2dZeUE5SUZ0ZExDQm9JRDBnYm1WM0lFMHNJSFVnUFNCdVpYY2dUU3dnWkNBOUlHNWxkeUJOT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWmlBOUlEQTdJR1lnUEQwZ2Jqc2daaXNyS1dadmNpaHNaWFFnYlNBOUlEQTdJRzBnUEQwZ2FUc2diU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhnZ1BTQnRJQzhnYVNBcUlISXNJSFlnUFNCbUlDOGdiaUFxSUUxaGRHZ3VVRWtnS2lBeU93b2dJQ0FnSUNBZ0lDQWdJQ0IxTG5nZ1BTQW9aU0FySUhRZ0tpQk5ZWFJvTG1OdmN5aDJLU2tnS2lCTllYUm9MbU52Y3loNEtTd2dkUzU1SUQwZ0tHVWdLeUIwSUNvZ1RXRjBhQzVqYjNNb2Rpa3BJQ29nVFdGMGFDNXphVzRvZUNrc0lIVXVlaUE5SUhRZ0tpQk5ZWFJvTG5OcGJpaDJLU3dnWVM1d2RYTm9LSFV1ZUN3Z2RTNTVMQ0IxTG5vcExDQm9MbmdnUFNCbElDb2dUV0YwYUM1amIzTW9lQ2tzSUdndWVTQTlJR1VnS2lCTllYUm9Mbk5wYmloNEtTd2daQzV6ZFdKV1pXTjBiM0p6S0hVc0lHZ3BMbTV2Y20xaGJHbDZaU2dwTENCc0xuQjFjMmdvWkM1NExDQmtMbmtzSUdRdWVpa3NJR011Y0hWemFDaHRJQzhnYVNrc0lHTXVjSFZ6YUNobUlDOGdiaWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWmlBOUlERTdJR1lnUEQwZ2Jqc2daaXNyS1dadmNpaHNaWFFnYlNBOUlERTdJRzBnUEQwZ2FUc2diU3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhnZ1BTQW9hU0FySURFcElDb2daaUFySUcwZ0xTQXhMQ0IySUQwZ0tHa2dLeUF4S1NBcUlDaG1JQzBnTVNrZ0t5QnRJQzBnTVN3Z1p5QTlJQ2hwSUNzZ01Ta2dLaUFvWmlBdElERXBJQ3NnYlN3Z2NDQTlJQ2hwSUNzZ01Ta2dLaUJtSUNzZ2JUc0tJQ0FnSUNBZ0lDQWdJQ0FnYnk1d2RYTm9LSGdzSUhZc0lIQXBMQ0J2TG5CMWMyZ29kaXdnWnl3Z2NDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvYVhNdWMyVjBTVzVrWlhnb2J5a3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QmtaU2hoTENBektTa3NJSFJvYVhNdWMyVjBRWFIwY21saWRYUmxLQ0p1YjNKdFlXd2lMQ0J1WlhjZ1pHVW9iQ3dnTXlrcExDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTZ2lkWFlpTENCdVpYY2daR1VvWXl3Z01pa3BPd29nSUNBZ2ZRb2dJQ0FnYzNSaGRHbGpJR1p5YjIxS1UwOU9LR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGTnlLR1V1Y21Ga2FYVnpMQ0JsTG5SMVltVXNJR1V1Y21Ga2FXRnNVMlZuYldWdWRITXNJR1V1ZEhWaWRXeGhjbE5sWjIxbGJuUnpMQ0JsTG1GeVl5azdDaUFnSUNCOUNuMHNJRlJ5SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJmWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdNU3dnZENBOUlDNDBMQ0J1SUQwZ05qUXNJR2tnUFNBNExDQnlJRDBnTWl3Z2J5QTlJRE1wZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ0lsUnZjblZ6UzI1dmRFZGxiMjFsZEhKNUlpd2dkR2hwY3k1d1lYSmhiV1YwWlhKeklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCeVlXUnBkWE02SUdVc0NpQWdJQ0FnSUNBZ0lDQWdJSFIxWW1VNklIUXNDaUFnSUNBZ0lDQWdJQ0FnSUhSMVluVnNZWEpUWldkdFpXNTBjem9nYml3S0lDQWdJQ0FnSUNBZ0lDQWdjbUZrYVdGc1UyVm5iV1Z1ZEhNNklHa3NDaUFnSUNBZ0lDQWdJQ0FnSUhBNklISXNDaUFnSUNBZ0lDQWdJQ0FnSUhFNklHOEtJQ0FnSUNBZ0lDQjlMQ0J1SUQwZ1RXRjBhQzVtYkc5dmNpaHVLU3dnYVNBOUlFMWhkR2d1Wm14dmIzSW9hU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0JiWFN3Z2JDQTlJRnRkTENCaklEMGdXMTBzSUdnZ1BTQmJYU3dnZFNBOUlHNWxkeUJOTENCa0lEMGdibVYzSUUwc0lHWWdQU0J1WlhjZ1RTd2diU0E5SUc1bGR5Qk5MQ0I0SUQwZ2JtVjNJRTBzSUhZZ1BTQnVaWGNnVFN3Z1p5QTlJRzVsZHlCTk93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1h5QTlJREE3SUY4Z1BEMGdianNnS3l0ZktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIa2dQU0JmSUM4Z2JpQXFJSElnS2lCTllYUm9MbEJKSUNvZ01qc0tJQ0FnSUNBZ0lDQWdJQ0FnY0NoNUxDQnlMQ0J2TENCbExDQm1LU3dnY0NoNUlDc2dMakF4TENCeUxDQnZMQ0JsTENCdEtTd2dkaTV6ZFdKV1pXTjBiM0p6S0cwc0lHWXBMQ0JuTG1Ga1pGWmxZM1J2Y25Nb2JTd2daaWtzSUhndVkzSnZjM05XWldOMGIzSnpLSFlzSUdjcExDQm5MbU55YjNOelZtVmpkRzl5Y3loNExDQjJLU3dnZUM1dWIzSnRZV3hwZW1Vb0tTd2daeTV1YjNKdFlXeHBlbVVvS1RzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmlJRDBnTURzZ1lpQThQU0JwT3lBcksySXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUVFZ1BTQmlJQzhnYVNBcUlFMWhkR2d1VUVrZ0tpQXlMQ0JNSUQwZ0xYUWdLaUJOWVhSb0xtTnZjeWhCS1N3Z1NTQTlJSFFnS2lCTllYUm9Mbk5wYmloQktUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVXVlQ0E5SUdZdWVDQXJJQ2hNSUNvZ1p5NTRJQ3NnU1NBcUlIZ3VlQ2tzSUhVdWVTQTlJR1l1ZVNBcklDaE1JQ29nWnk1NUlDc2dTU0FxSUhndWVTa3NJSFV1ZWlBOUlHWXVlaUFySUNoTUlDb2daeTU2SUNzZ1NTQXFJSGd1ZWlrc0lHd3VjSFZ6YUNoMUxuZ3NJSFV1ZVN3Z2RTNTZLU3dnWkM1emRXSldaV04wYjNKektIVXNJR1lwTG01dmNtMWhiR2w2WlNncExDQmpMbkIxYzJnb1pDNTRMQ0JrTG5rc0lHUXVlaWtzSUdndWNIVnphQ2hmSUM4Z2Jpa3NJR2d1Y0hWemFDaGlJQzhnYVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JmSUQwZ01Uc2dYeUE4UFNCdU95QmZLeXNwWm05eUtHeGxkQ0I1SUQwZ01Uc2dlU0E4UFNCcE95QjVLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWWlBOUlDaHBJQ3NnTVNrZ0tpQW9YeUF0SURFcElDc2dLSGtnTFNBeEtTd2dRU0E5SUNocElDc2dNU2tnS2lCZklDc2dLSGtnTFNBeEtTd2dUQ0E5SUNocElDc2dNU2tnS2lCZklDc2dlU3dnU1NBOUlDaHBJQ3NnTVNrZ0tpQW9YeUF0SURFcElDc2dlVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lTNXdkWE5vS0dJc0lFRXNJRWtwTENCaExuQjFjMmdvUVN3Z1RDd2dTU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwU1c1a1pYZ29ZU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUJrWlNoc0xDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKdWIzSnRZV3dpTENCdVpYY2daR1VvWXl3Z015a3BMQ0IwYUdsekxuTmxkRUYwZEhKcFluVjBaU2dpZFhZaUxDQnVaWGNnWkdVb2FDd2dNaWtwT3dvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhBb1h5d2dlU3dnWWl3Z1FTd2dUQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnU1NBOUlFMWhkR2d1WTI5ektGOHBMQ0JySUQwZ1RXRjBhQzV6YVc0b1h5a3NJRUlnUFNCaUlDOGdlU0FxSUY4c0lGQWdQU0JOWVhSb0xtTnZjeWhDS1RzS0lDQWdJQ0FnSUNBZ0lDQWdUQzU0SUQwZ1FTQXFJQ2d5SUNzZ1VDa2dLaUF1TlNBcUlFa3NJRXd1ZVNBOUlFRWdLaUFvTWlBcklGQXBJQ29nYXlBcUlDNDFMQ0JNTG5vZ1BTQkJJQ29nVFdGMGFDNXphVzRvUWlrZ0tpQXVOVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCemRHRjBhV01nWm5KdmJVcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWSElvWlM1eVlXUnBkWE1zSUdVdWRIVmlaU3dnWlM1MGRXSjFiR0Z5VTJWbmJXVnVkSE1zSUdVdWNtRmthV0ZzVTJWbmJXVnVkSE1zSUdVdWNDd2daUzV4S1RzS0lDQWdJSDBLZlN3Z1JYSWdQU0JqYkdGemN5QmxlSFJsYm1SeklGOWxJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VnUFNCdVpYY2dhRzhvYm1WM0lFMG9MVEVzSUMweExDQXdLU3dnYm1WM0lFMG9MVEVzSURFc0lEQXBMQ0J1WlhjZ1RTZ3hMQ0F4TENBd0tTa3NJSFFnUFNBMk5Dd2diaUE5SURFc0lHa2dQU0E0TENCeUlEMGdJVEVwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLQ2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ0lsUjFZbVZIWlc5dFpYUnllU0lzSUhSb2FYTXVjR0Z5WVcxbGRHVnljeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYURvZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnZEhWaWRXeGhjbE5sWjIxbGJuUnpPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnlZV1JwZFhNNklHNHNDaUFnSUNBZ0lDQWdJQ0FnSUhKaFpHbGhiRk5sWjIxbGJuUnpPaUJwTEFvZ0lDQWdJQ0FnSUNBZ0lDQmpiRzl6WldRNklISUtJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJR3hsZENCdklEMGdaUzVqYjIxd2RYUmxSbkpsYm1WMFJuSmhiV1Z6S0hRc0lISXBPd29nSUNBZ0lDQWdJSFJvYVhNdWRHRnVaMlZ1ZEhNZ1BTQnZMblJoYm1kbGJuUnpMQ0IwYUdsekxtNXZjbTFoYkhNZ1BTQnZMbTV2Y20xaGJITXNJSFJvYVhNdVltbHViM0p0WVd4eklEMGdieTVpYVc1dmNtMWhiSE03Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0J1WlhjZ1RTd2diQ0E5SUc1bGR5Qk5MQ0JqSUQwZ2JtVjNJRmdzSUdnZ1BTQnVaWGNnVFN3Z2RTQTlJRnRkTENCa0lEMGdXMTBzSUdZZ1BTQmJYU3dnYlNBOUlGdGRPd29nSUNBZ0lDQWdJSGdvS1N3Z2RHaHBjeTV6WlhSSmJtUmxlQ2h0S1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUdSbEtIVXNJRE1wS1N3Z2RHaHBjeTV6WlhSQmRIUnlhV0oxZEdVb0ltNXZjbTFoYkNJc0lHNWxkeUJrWlNoa0xDQXpLU2tzSUhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NKMWRpSXNJRzVsZHlCa1pTaG1MQ0F5S1NrN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2VDZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCZklEMGdNRHNnWHlBOElIUTdJRjhyS3lsMktGOHBPd29nSUNBZ0lDQWdJQ0FnSUNCMktISWdQVDA5SUNFeElEOGdkQ0E2SURBcExDQndLQ2tzSUdjb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdkaWhmS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR2dnUFNCbExtZGxkRkJ2YVc1MFFYUW9YeUF2SUhRc0lHZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlU0E5SUc4dWJtOXliV0ZzYzF0ZlhTd2dZaUE5SUc4dVltbHViM0p0WVd4elcxOWRPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVFZ1BTQXdPeUJCSUR3OUlHazdJRUVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdUQ0E5SUVFZ0x5QnBJQ29nVFdGMGFDNVFTU0FxSURJc0lFa2dQU0JOWVhSb0xuTnBiaWhNS1N3Z2F5QTlJQzFOWVhSb0xtTnZjeWhNS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd3dWVDQTlJR3NnS2lCNUxuZ2dLeUJKSUNvZ1lpNTRMQ0JzTG5rZ1BTQnJJQ29nZVM1NUlDc2dTU0FxSUdJdWVTd2diQzU2SUQwZ2F5QXFJSGt1ZWlBcklFa2dLaUJpTG5vc0lHd3VibTl5YldGc2FYcGxLQ2tzSUdRdWNIVnphQ2hzTG5nc0lHd3VlU3dnYkM1NktTd2dZUzU0SUQwZ2FDNTRJQ3NnYmlBcUlHd3VlQ3dnWVM1NUlEMGdhQzU1SUNzZ2JpQXFJR3d1ZVN3Z1lTNTZJRDBnYUM1NklDc2diaUFxSUd3dWVpd2dkUzV3ZFhOb0tHRXVlQ3dnWVM1NUxDQmhMbm9wT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2NvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdYeUE5SURFN0lGOGdQRDBnZERzZ1h5c3JLV1p2Y2loc1pYUWdlU0E5SURFN0lIa2dQRDBnYVRzZ2VTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaUlEMGdLR2tnS3lBeEtTQXFJQ2hmSUMwZ01Ta2dLeUFvZVNBdElERXBMQ0JCSUQwZ0tHa2dLeUF4S1NBcUlGOGdLeUFvZVNBdElERXBMQ0JNSUQwZ0tHa2dLeUF4S1NBcUlGOGdLeUI1TENCSklEMGdLR2tnS3lBeEtTQXFJQ2hmSUMwZ01Ta2dLeUI1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlM1d2RYTm9LR0lzSUVFc0lFa3BMQ0J0TG5CMWMyZ29RU3dnVEN3Z1NTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NDZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCZklEMGdNRHNnWHlBOFBTQjBPeUJmS3lzcFptOXlLR3hsZENCNUlEMGdNRHNnZVNBOFBTQnBPeUI1S3lzcFl5NTRJRDBnWHlBdklIUXNJR011ZVNBOUlIa2dMeUJwTENCbUxuQjFjMmdvWXk1NExDQmpMbmtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lIUnZTbE5QVGlncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlITjFjR1Z5TG5SdlNsTlBUaWdwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsTG5CaGRHZ2dQU0IwYUdsekxuQmhjbUZ0WlhSbGNuTXVjR0YwYUM1MGIwcFRUMDRvS1N3Z1pUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5Qm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCRmNpaHVaWGNnVkdGYlpTNXdZWFJvTG5SNWNHVmRLQ2t1Wm5KdmJVcFRUMDRvWlM1d1lYUm9LU3dnWlM1MGRXSjFiR0Z5VTJWbmJXVnVkSE1zSUdVdWNtRmthWFZ6TENCbExuSmhaR2xoYkZObFoyMWxiblJ6TENCbExtTnNiM05sWkNrN0NpQWdJQ0I5Q24wc0lFVmhJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmZaU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsSUQwZ2JuVnNiQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LVHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwZVhCbElEMGdJbGRwY21WbWNtRnRaVWRsYjIxbGRISjVJaXdnZEdocGN5NXdZWEpoYldWMFpYSnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm5aVzl0WlhSeWVUb2daUW9nSUNBZ0lDQWdJSDBzSUdVZ0lUMDlJRzUxYkd3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUWdQU0JiWFN3Z2JpQTlJRzVsZHlCVFpYUXNJR2tnUFNCdVpYY2dUU3dnY2lBOUlHNWxkeUJOT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlM1cGJtUmxlQ0FoUFQwZ2JuVnNiQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0JsTG1GMGRISnBZblYwWlhNdWNHOXphWFJwYjI0c0lHRWdQU0JsTG1sdVpHVjRMQ0JzSUQwZ1pTNW5jbTkxY0hNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc0xteGxibWQwYUNBOVBUMGdNQ0FtSmlBb2JDQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBPaUF3TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjNWdWREb2dZUzVqYjNWdWRDd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd4SmJtUmxlRG9nTUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQmpJRDBnTUN3Z2FDQTlJR3d1YkdWdVozUm9PeUJqSUR3Z2FEc2dLeXRqS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHeGJZMTBzSUdRZ1BTQjFMbk4wWVhKMExDQm1JRDBnZFM1amIzVnVkRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUcwZ1BTQmtMQ0I0SUQwZ1pDQXJJR1k3SUcwZ1BDQjRPeUJ0SUNzOUlETXBabTl5S0d4bGRDQjJJRDBnTURzZ2RpQThJRE03SUhZckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ1lTNW5aWFJZS0cwZ0t5QjJLU3dnY0NBOUlHRXVaMlYwV0NodElDc2dLSFlnS3lBeEtTQWxJRE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwTG1aeWIyMUNkV1ptWlhKQmRIUnlhV0oxZEdVb2J5d2daeWtzSUhJdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHZMQ0J3S1N3Z2VXTW9hU3dnY2l3Z2Jpa2dQVDA5SUNFd0lDWW1JQ2gwTG5CMWMyZ29hUzU0TENCcExua3NJR2t1ZWlrc0lIUXVjSFZ6YUNoeUxuZ3NJSEl1ZVN3Z2NpNTZLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4Z1BTQmxMbUYwZEhKcFluVjBaWE11Y0c5emFYUnBiMjQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR0VnUFNBd0xDQnNJRDBnYnk1amIzVnVkQ0F2SURNN0lHRWdQQ0JzT3lCaEt5c3BabTl5S0d4bGRDQmpJRDBnTURzZ1l5QThJRE03SUdNckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHZ2dQU0F6SUNvZ1lTQXJJR01zSUhVZ1BTQXpJQ29nWVNBcklDaGpJQ3NnTVNrZ0pTQXpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHZMQ0JvS1N3Z2NpNW1jbTl0UW5WbVptVnlRWFIwY21saWRYUmxLRzhzSUhVcExDQjVZeWhwTENCeUxDQnVLU0E5UFQwZ0lUQWdKaVlnS0hRdWNIVnphQ2hwTG5nc0lHa3VlU3dnYVM1NktTd2dkQzV3ZFhOb0tISXVlQ3dnY2k1NUxDQnlMbm9wS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnWkdVb2RDd2dNeWtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlRzS1puVnVZM1JwYjI0Z2VXTW9jeXdnWlN3Z2RDa2dld29nSUNBZ2JHVjBJRzRnUFNCZ0pIdHpMbmg5TENSN2N5NTVmU3drZTNNdWVuMHRKSHRsTG5oOUxDUjdaUzU1ZlN3a2UyVXVlbjFnTENCcElEMGdZQ1I3WlM1NGZTd2tlMlV1ZVgwc0pIdGxMbnA5TFNSN2N5NTRmU3drZTNNdWVYMHNKSHR6TG5wOVlEc0tJQ0FnSUhKbGRIVnliaUIwTG1oaGN5aHVLU0E5UFQwZ0lUQWdmSHdnZEM1b1lYTW9hU2tnUFQwOUlDRXdJRDhnSVRFZ09pQW9kQzVoWkdRb2Jpd2dhU2tzSUNFd0tUc0tmUXAyWVhJZ2RtTWdQU0JQWW1wbFkzUXVabkpsWlhwbEtIc0tJQ0FnSUY5ZmNISnZkRzlmWHpvZ2JuVnNiQ3dLSUNBZ0lFSnZlRWRsYjIxbGRISjVPaUIzYml3S0lDQWdJRUp2ZUVKMVptWmxja2RsYjIxbGRISjVPaUIzYml3S0lDQWdJRU5wY21Oc1pVZGxiMjFsZEhKNU9pQm1jaXdLSUNBZ0lFTnBjbU5zWlVKMVptWmxja2RsYjIxbGRISjVPaUJtY2l3S0lDQWdJRU52Ym1WSFpXOXRaWFJ5ZVRvZ2NISXNDaUFnSUNCRGIyNWxRblZtWm1WeVIyVnZiV1YwY25rNklIQnlMQW9nSUNBZ1EzbHNhVzVrWlhKSFpXOXRaWFJ5ZVRvZ1NtNHNDaUFnSUNCRGVXeHBibVJsY2tKMVptWmxja2RsYjIxbGRISjVPaUJLYml3S0lDQWdJRVJ2WkdWallXaGxaSEp2YmtkbGIyMWxkSEo1T2lCdGNpd0tJQ0FnSUVSdlpHVmpZV2hsWkhKdmJrSjFabVpsY2tkbGIyMWxkSEo1T2lCdGNpd0tJQ0FnSUVWa1oyVnpSMlZ2YldWMGNuazZJRjloTEFvZ0lDQWdSWGgwY25Wa1pVZGxiMjFsZEhKNU9pQnNiaXdLSUNBZ0lFVjRkSEoxWkdWQ2RXWm1aWEpIWlc5dFpYUnllVG9nYkc0c0NpQWdJQ0JKWTI5ellXaGxaSEp2YmtkbGIyMWxkSEo1T2lCZmNpd0tJQ0FnSUVsamIzTmhhR1ZrY205dVFuVm1abVZ5UjJWdmJXVjBjbms2SUY5eUxBb2dJQ0FnVEdGMGFHVkhaVzl0WlhSeWVUb2dUWElzQ2lBZ0lDQk1ZWFJvWlVKMVptWmxja2RsYjIxbGRISjVPaUJOY2l3S0lDQWdJRTlqZEdGb1pXUnliMjVIWlc5dFpYUnllVG9nU1drc0NpQWdJQ0JQWTNSaGFHVmtjbTl1UW5WbVptVnlSMlZ2YldWMGNuazZJRWxwTEFvZ0lDQWdVR3hoYm1WSFpXOXRaWFJ5ZVRvZ1VHa3NDaUFnSUNCUWJHRnVaVUoxWm1abGNrZGxiMjFsZEhKNU9pQlFhU3dLSUNBZ0lGQnZiSGxvWldSeWIyNUhaVzl0WlhSeWVUb2dZVzRzQ2lBZ0lDQlFiMng1YUdWa2NtOXVRblZtWm1WeVIyVnZiV1YwY25rNklHRnVMQW9nSUNBZ1VtbHVaMGRsYjIxbGRISjVPaUJpY2l3S0lDQWdJRkpwYm1kQ2RXWm1aWEpIWlc5dFpYUnllVG9nWW5Jc0NpQWdJQ0JUYUdGd1pVZGxiMjFsZEhKNU9pQkVhU3dLSUNBZ0lGTm9ZWEJsUW5WbVptVnlSMlZ2YldWMGNuazZJRVJwTEFvZ0lDQWdVM0JvWlhKbFIyVnZiV1YwY25rNklFWnBMQW9nSUNBZ1UzQm9aWEpsUW5WbVptVnlSMlZ2YldWMGNuazZJRVpwTEFvZ0lDQWdWR1YwY21Gb1pXUnliMjVIWlc5dFpYUnllVG9nZDNJc0NpQWdJQ0JVWlhSeVlXaGxaSEp2YmtKMVptWmxja2RsYjIxbGRISjVPaUIzY2l3S0lDQWdJRlJ2Y25WelIyVnZiV1YwY25rNklGTnlMQW9nSUNBZ1ZHOXlkWE5DZFdabVpYSkhaVzl0WlhSeWVUb2dVM0lzQ2lBZ0lDQlViM0oxYzB0dWIzUkhaVzl0WlhSeWVUb2dWSElzQ2lBZ0lDQlViM0oxYzB0dWIzUkNkV1ptWlhKSFpXOXRaWFJ5ZVRvZ1ZISXNDaUFnSUNCVWRXSmxSMlZ2YldWMGNuazZJRVZ5TEFvZ0lDQWdWSFZpWlVKMVptWmxja2RsYjIxbGRISjVPaUJGY2l3S0lDQWdJRmRwY21WbWNtRnRaVWRsYjIxbGRISjVPaUJGWVFwOUtTd2dRV0VnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1IwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJbE5vWVdSdmQwMWhkR1Z5YVdGc0lpd2dkR2hwY3k1amIyeHZjaUE5SUc1bGR5QmhaU2d3S1N3Z2RHaHBjeTUwY21GdWMzQmhjbVZ1ZENBOUlDRXdMQ0IwYUdsekxuTmxkRlpoYkhWbGN5aGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q2tGaExuQnliM1J2ZEhsd1pTNXBjMU5vWVdSdmQwMWhkR1Z5YVdGc0lEMGdJVEE3Q25aaGNpQndieUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdaSFFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbVJsWm1sdVpYTWdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lGTlVRVTVFUVZKRU9pQWlJZ29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVkSGx3WlNBOUlDSk5aWE5vVTNSaGJtUmhjbVJOWVhSbGNtbGhiQ0lzSUhSb2FYTXVZMjlzYjNJZ1BTQnVaWGNnWVdVb01UWTNOemN5TVRVcExDQjBhR2x6TG5KdmRXZG9ibVZ6Y3lBOUlERXNJSFJvYVhNdWJXVjBZV3h1WlhOeklEMGdNQ3dnZEdocGN5NXRZWEFnUFNCdWRXeHNMQ0IwYUdsekxteHBaMmgwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVzYVdkb2RFMWhjRWx1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11WVc5TllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1GdlRXRndTVzUwWlc1emFYUjVJRDBnTVN3Z2RHaHBjeTVsYldsemMybDJaU0E5SUc1bGR5QmhaU2d3S1N3Z2RHaHBjeTVsYldsemMybDJaVWx1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11WlcxcGMzTnBkbVZOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbUoxYlhCTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1KMWJYQlRZMkZzWlNBOUlERXNJSFJvYVhNdWJtOXliV0ZzVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTV1YjNKdFlXeE5ZWEJVZVhCbElEMGdTR2tzSUhSb2FYTXVibTl5YldGc1UyTmhiR1VnUFNCdVpYY2dXQ2d4TENBeEtTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRk5qWVd4bElEMGdNU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJDYVdGeklEMGdNQ3dnZEdocGN5NXliM1ZuYUc1bGMzTk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtMWxkR0ZzYm1WemMwMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVlXeHdhR0ZOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbVZ1ZGsxaGNDQTlJRzUxYkd3c0lIUm9hWE11Wlc1MlRXRndTVzUwWlc1emFYUjVJRDBnTVN3Z2RHaHBjeTV5WldaeVlXTjBhVzl1VW1GMGFXOGdQU0F1T1Rnc0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ0lURXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdNU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsWTJGd0lEMGdJbkp2ZFc1a0lpd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBOUlDSnliM1Z1WkNJc0lIUm9hWE11Wm14aGRGTm9ZV1JwYm1jZ1BTQWhNU3dnZEdocGN5NXpaWFJXWVd4MVpYTW9aU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1a1pXWnBibVZ6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JUVkVGT1JFRlNSRG9nSWlJS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE11Y205MVoyaHVaWE56SUQwZ1pTNXliM1ZuYUc1bGMzTXNJSFJvYVhNdWJXVjBZV3h1WlhOeklEMGdaUzV0WlhSaGJHNWxjM01zSUhSb2FYTXViV0Z3SUQwZ1pTNXRZWEFzSUhSb2FYTXViR2xuYUhSTllYQWdQU0JsTG14cFoyaDBUV0Z3TENCMGFHbHpMbXhwWjJoMFRXRndTVzUwWlc1emFYUjVJRDBnWlM1c2FXZG9kRTFoY0VsdWRHVnVjMmwwZVN3Z2RHaHBjeTVoYjAxaGNDQTlJR1V1WVc5TllYQXNJSFJvYVhNdVlXOU5ZWEJKYm5SbGJuTnBkSGtnUFNCbExtRnZUV0Z3U1c1MFpXNXphWFI1TENCMGFHbHpMbVZ0YVhOemFYWmxMbU52Y0hrb1pTNWxiV2x6YzJsMlpTa3NJSFJvYVhNdVpXMXBjM05wZG1WTllYQWdQU0JsTG1WdGFYTnphWFpsVFdGd0xDQjBhR2x6TG1WdGFYTnphWFpsU1c1MFpXNXphWFI1SUQwZ1pTNWxiV2x6YzJsMlpVbHVkR1Z1YzJsMGVTd2dkR2hwY3k1aWRXMXdUV0Z3SUQwZ1pTNWlkVzF3VFdGd0xDQjBhR2x6TG1KMWJYQlRZMkZzWlNBOUlHVXVZblZ0Y0ZOallXeGxMQ0IwYUdsekxtNXZjbTFoYkUxaGNDQTlJR1V1Ym05eWJXRnNUV0Z3TENCMGFHbHpMbTV2Y20xaGJFMWhjRlI1Y0dVZ1BTQmxMbTV2Y20xaGJFMWhjRlI1Y0dVc0lIUm9hWE11Ym05eWJXRnNVMk5oYkdVdVkyOXdlU2hsTG01dmNtMWhiRk5qWVd4bEtTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUk5ZWEFnUFNCbExtUnBjM0JzWVdObGJXVnVkRTFoY0N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SUdVdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SUdVdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3l3Z2RHaHBjeTV5YjNWbmFHNWxjM05OWVhBZ1BTQmxMbkp2ZFdkb2JtVnpjMDFoY0N3Z2RHaHBjeTV0WlhSaGJHNWxjM05OWVhBZ1BTQmxMbTFsZEdGc2JtVnpjMDFoY0N3Z2RHaHBjeTVoYkhCb1lVMWhjQ0E5SUdVdVlXeHdhR0ZOWVhBc0lIUm9hWE11Wlc1MlRXRndJRDBnWlM1bGJuWk5ZWEFzSUhSb2FYTXVaVzUyVFdGd1NXNTBaVzV6YVhSNUlEMGdaUzVsYm5aTllYQkpiblJsYm5OcGRIa3NJSFJvYVhNdWNtVm1jbUZqZEdsdmJsSmhkR2x2SUQwZ1pTNXlaV1p5WVdOMGFXOXVVbUYwYVc4c0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ1pTNTNhWEpsWm5KaGJXVXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdaUzUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WldOaGNDQTlJR1V1ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsYW05cGJpQTlJR1V1ZDJseVpXWnlZVzFsVEdsdVpXcHZhVzRzSUhSb2FYTXVabXhoZEZOb1lXUnBibWNnUFNCbExtWnNZWFJUYUdGa2FXNW5MQ0IwYUdsek93b2dJQ0FnZlFwOU93cHdieTV3Y205MGIzUjVjR1V1YVhOTlpYTm9VM1JoYm1SaGNtUk5ZWFJsY21saGJDQTlJQ0V3T3dwMllYSWdRMkVnUFNCamJHRnpjeUJsZUhSbGJtUnpJSEJ2SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVrWldacGJtVnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQlRWRUZPUkVGU1JEb2dJaUlzQ2lBZ0lDQWdJQ0FnSUNBZ0lGQklXVk5KUTBGTU9pQWlJZ29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVkSGx3WlNBOUlDSk5aWE5vVUdoNWMybGpZV3hOWVhSbGNtbGhiQ0lzSUhSb2FYTXVZMnhsWVhKamIyRjBUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWpiR1ZoY21OdllYUlNiM1ZuYUc1bGMzTWdQU0F3TENCMGFHbHpMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjMDFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZMnhsWVhKamIyRjBUbTl5YldGc1UyTmhiR1VnUFNCdVpYY2dXQ2d4TENBeEtTd2dkR2hwY3k1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbWx2Y2lBOUlERXVOU3dnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE1zSUNKeVpXWnNaV04wYVhacGRIa2lMQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlhRb01pNDFJQ29nS0hSb2FYTXVhVzl5SUMwZ01Ta2dMeUFvZEdocGN5NXBiM0lnS3lBeEtTd2dNQ3dnTVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvZENrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYjNJZ1BTQW9NU0FySUM0MElDb2dkQ2tnTHlBb01TQXRJQzQwSUNvZ2RDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUtTd2dkR2hwY3k1emFHVmxia052Ykc5eUlEMGdibVYzSUdGbEtEQXBMQ0IwYUdsekxuTm9aV1Z1UTI5c2IzSk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxuTm9aV1Z1VW05MVoyaHVaWE56SUQwZ01Td2dkR2hwY3k1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0NBOUlHNTFiR3dzSUhSb2FYTXVkSEpoYm5OdGFYTnphVzl1VFdGd0lEMGdiblZzYkN3Z2RHaHBjeTUwYUdsamEyNWxjM01nUFNBd0xDQjBhR2x6TG5Sb2FXTnJibVZ6YzAxaGNDQTlJRzUxYkd3c0lIUm9hWE11WVhSMFpXNTFZWFJwYjI1RWFYTjBZVzVqWlNBOUlEQXNJSFJvYVhNdVlYUjBaVzUxWVhScGIyNURiMnh2Y2lBOUlHNWxkeUJoWlNneExDQXhMQ0F4S1N3Z2RHaHBjeTV6Y0dWamRXeGhja2x1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbk53WldOMWJHRnlRMjlzYjNJZ1BTQnVaWGNnWVdVb01Td2dNU3dnTVNrc0lIUm9hWE11YzNCbFkzVnNZWEpEYjJ4dmNrMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVgzTm9aV1Z1SUQwZ01Dd2dkR2hwY3k1ZlkyeGxZWEpqYjJGMElEMGdNQ3dnZEdocGN5NWZkSEpoYm5OdGFYTnphVzl1SUQwZ01Dd2dkR2hwY3k1elpYUldZV3gxWlhNb1pTazdDaUFnSUNCOUNpQWdJQ0JuWlhRZ2MyaGxaVzRvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05vWldWdU93b2dJQ0FnZlFvZ0lDQWdjMlYwSUhOb1pXVnVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDl6YUdWbGJpQStJREFnSVQwZ1pTQStJREFnSmlZZ2RHaHBjeTUyWlhKemFXOXVLeXNzSUhSb2FYTXVYM05vWldWdUlEMGdaVHNLSUNBZ0lIMEtJQ0FnSUdkbGRDQmpiR1ZoY21OdllYUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTnNaV0Z5WTI5aGREc0tJQ0FnSUgwS0lDQWdJSE5sZENCamJHVmhjbU52WVhRb1pTa2dld29nSUNBZ0lDQWdJSFJvYVhNdVgyTnNaV0Z5WTI5aGRDQStJREFnSVQwZ1pTQStJREFnSmlZZ2RHaHBjeTUyWlhKemFXOXVLeXNzSUhSb2FYTXVYMk5zWldGeVkyOWhkQ0E5SUdVN0NpQWdJQ0I5Q2lBZ0lDQm5aWFFnZEhKaGJuTnRhWE56YVc5dUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MGNtRnVjMjFwYzNOcGIyNDdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2RISmhibk50YVhOemFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbDkwY21GdWMyMXBjM05wYjI0Z1BpQXdJQ0U5SUdVZ1BpQXdJQ1ltSUhSb2FYTXVkbVZ5YzJsdmJpc3JMQ0IwYUdsekxsOTBjbUZ1YzIxcGMzTnBiMjRnUFNCbE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVaR1ZtYVc1bGN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1UxUkJUa1JCVWtRNklDSWlMQW9nSUNBZ0lDQWdJQ0FnSUNCUVNGbFRTVU5CVERvZ0lpSUtJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtTnNaV0Z5WTI5aGRDQTlJR1V1WTJ4bFlYSmpiMkYwTENCMGFHbHpMbU5zWldGeVkyOWhkRTFoY0NBOUlHVXVZMnhsWVhKamIyRjBUV0Z3TENCMGFHbHpMbU5zWldGeVkyOWhkRkp2ZFdkb2JtVnpjeUE5SUdVdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOekxDQjBhR2x6TG1Oc1pXRnlZMjloZEZKdmRXZG9ibVZ6YzAxaGNDQTlJR1V1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0xDQjBhR2x6TG1Oc1pXRnlZMjloZEU1dmNtMWhiRTFoY0NBOUlHVXVZMnhsWVhKamIyRjBUbTl5YldGc1RXRndMQ0IwYUdsekxtTnNaV0Z5WTI5aGRFNXZjbTFoYkZOallXeGxMbU52Y0hrb1pTNWpiR1ZoY21OdllYUk9iM0p0WVd4VFkyRnNaU2tzSUhSb2FYTXVhVzl5SUQwZ1pTNXBiM0lzSUhSb2FYTXVjMmhsWlc0Z1BTQmxMbk5vWldWdUxDQjBhR2x6TG5Ob1pXVnVRMjlzYjNJdVkyOXdlU2hsTG5Ob1pXVnVRMjlzYjNJcExDQjBhR2x6TG5Ob1pXVnVRMjlzYjNKTllYQWdQU0JsTG5Ob1pXVnVRMjlzYjNKTllYQXNJSFJvYVhNdWMyaGxaVzVTYjNWbmFHNWxjM01nUFNCbExuTm9aV1Z1VW05MVoyaHVaWE56TENCMGFHbHpMbk5vWldWdVVtOTFaMmh1WlhOelRXRndJRDBnWlM1emFHVmxibEp2ZFdkb2JtVnpjMDFoY0N3Z2RHaHBjeTUwY21GdWMyMXBjM05wYjI0Z1BTQmxMblJ5WVc1emJXbHpjMmx2Yml3Z2RHaHBjeTUwY21GdWMyMXBjM05wYjI1TllYQWdQU0JsTG5SeVlXNXpiV2x6YzJsdmJrMWhjQ3dnZEdocGN5NTBhR2xqYTI1bGMzTWdQU0JsTG5Sb2FXTnJibVZ6Y3l3Z2RHaHBjeTUwYUdsamEyNWxjM05OWVhBZ1BTQmxMblJvYVdOcmJtVnpjMDFoY0N3Z2RHaHBjeTVoZEhSbGJuVmhkR2x2YmtScGMzUmhibU5sSUQwZ1pTNWhkSFJsYm5WaGRHbHZia1JwYzNSaGJtTmxMQ0IwYUdsekxtRjBkR1Z1ZFdGMGFXOXVRMjlzYjNJdVkyOXdlU2hsTG1GMGRHVnVkV0YwYVc5dVEyOXNiM0lwTENCMGFHbHpMbk53WldOMWJHRnlTVzUwWlc1emFYUjVJRDBnWlM1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVN3Z2RHaHBjeTV6Y0dWamRXeGhja2x1ZEdWdWMybDBlVTFoY0NBOUlHVXVjM0JsWTNWc1lYSkpiblJsYm5OcGRIbE5ZWEFzSUhSb2FYTXVjM0JsWTNWc1lYSkRiMnh2Y2k1amIzQjVLR1V1YzNCbFkzVnNZWEpEYjJ4dmNpa3NJSFJvYVhNdWMzQmxZM1ZzWVhKRGIyeHZjazFoY0NBOUlHVXVjM0JsWTNWc1lYSkRiMnh2Y2sxaGNDd2dkR2hwY3pzS0lDQWdJSDBLZlRzS1EyRXVjSEp2ZEc5MGVYQmxMbWx6VFdWemFGQm9lWE5wWTJGc1RXRjBaWEpwWVd3Z1BTQWhNRHNLZG1GeUlFeGhJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmtkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDSk5aWE5vVUdodmJtZE5ZWFJsY21saGJDSXNJSFJvYVhNdVkyOXNiM0lnUFNCdVpYY2dZV1VvTVRZM056Y3lNVFVwTENCMGFHbHpMbk53WldOMWJHRnlJRDBnYm1WM0lHRmxLREV4TVRnME9ERXBMQ0IwYUdsekxuTm9hVzVwYm1WemN5QTlJRE13TENCMGFHbHpMbTFoY0NBOUlHNTFiR3dzSUhSb2FYTXViR2xuYUhSTllYQWdQU0J1ZFd4c0xDQjBhR2x6TG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUQwZ01Td2dkR2hwY3k1aGIwMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVlXOU5ZWEJKYm5SbGJuTnBkSGtnUFNBeExDQjBhR2x6TG1WdGFYTnphWFpsSUQwZ2JtVjNJR0ZsS0RBcExDQjBhR2x6TG1WdGFYTnphWFpsU1c1MFpXNXphWFI1SUQwZ01Td2dkR2hwY3k1bGJXbHpjMmwyWlUxaGNDQTlJRzUxYkd3c0lIUm9hWE11WW5WdGNFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVluVnRjRk5qWVd4bElEMGdNU3dnZEdocGN5NXViM0p0WVd4TllYQWdQU0J1ZFd4c0xDQjBhR2x6TG01dmNtMWhiRTFoY0ZSNWNHVWdQU0JJYVN3Z2RHaHBjeTV1YjNKdFlXeFRZMkZzWlNBOUlHNWxkeUJZS0RFc0lERXBMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVWdQU0F4TENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTWdQU0F3TENCMGFHbHpMbk53WldOMWJHRnlUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJRzUxYkd3c0lIUm9hWE11Wlc1MlRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1amIyMWlhVzVsSUQwZ1ZuTXNJSFJvYVhNdWNtVm1iR1ZqZEdsMmFYUjVJRDBnTVN3Z2RHaHBjeTV5WldaeVlXTjBhVzl1VW1GMGFXOGdQU0F1T1Rnc0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ0lURXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdNU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsWTJGd0lEMGdJbkp2ZFc1a0lpd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBOUlDSnliM1Z1WkNJc0lIUm9hWE11Wm14aGRGTm9ZV1JwYm1jZ1BTQWhNU3dnZEdocGN5NXpaWFJXWVd4MVpYTW9aU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1amIyeHZjaTVqYjNCNUtHVXVZMjlzYjNJcExDQjBhR2x6TG5Od1pXTjFiR0Z5TG1OdmNIa29aUzV6Y0dWamRXeGhjaWtzSUhSb2FYTXVjMmhwYm1sdVpYTnpJRDBnWlM1emFHbHVhVzVsYzNNc0lIUm9hWE11YldGd0lEMGdaUzV0WVhBc0lIUm9hWE11YkdsbmFIUk5ZWEFnUFNCbExteHBaMmgwVFdGd0xDQjBhR2x6TG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1SUQwZ1pTNXNhV2RvZEUxaGNFbHVkR1Z1YzJsMGVTd2dkR2hwY3k1aGIwMWhjQ0E5SUdVdVlXOU5ZWEFzSUhSb2FYTXVZVzlOWVhCSmJuUmxibk5wZEhrZ1BTQmxMbUZ2VFdGd1NXNTBaVzV6YVhSNUxDQjBhR2x6TG1WdGFYTnphWFpsTG1OdmNIa29aUzVsYldsemMybDJaU2tzSUhSb2FYTXVaVzFwYzNOcGRtVk5ZWEFnUFNCbExtVnRhWE56YVhabFRXRndMQ0IwYUdsekxtVnRhWE56YVhabFNXNTBaVzV6YVhSNUlEMGdaUzVsYldsemMybDJaVWx1ZEdWdWMybDBlU3dnZEdocGN5NWlkVzF3VFdGd0lEMGdaUzVpZFcxd1RXRndMQ0IwYUdsekxtSjFiWEJUWTJGc1pTQTlJR1V1WW5WdGNGTmpZV3hsTENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUdVdWJtOXliV0ZzVFdGd0xDQjBhR2x6TG01dmNtMWhiRTFoY0ZSNWNHVWdQU0JsTG01dmNtMWhiRTFoY0ZSNWNHVXNJSFJvYVhNdWJtOXliV0ZzVTJOaGJHVXVZMjl3ZVNobExtNXZjbTFoYkZOallXeGxLU3dnZEdocGN5NWthWE53YkdGalpXMWxiblJOWVhBZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVTJOaGJHVXNJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBRbWxoY3lBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5d2dkR2hwY3k1emNHVmpkV3hoY2sxaGNDQTlJR1V1YzNCbFkzVnNZWEpOWVhBc0lIUm9hWE11WVd4d2FHRk5ZWEFnUFNCbExtRnNjR2hoVFdGd0xDQjBhR2x6TG1WdWRrMWhjQ0E5SUdVdVpXNTJUV0Z3TENCMGFHbHpMbU52YldKcGJtVWdQU0JsTG1OdmJXSnBibVVzSUhSb2FYTXVjbVZtYkdWamRHbDJhWFI1SUQwZ1pTNXlaV1pzWldOMGFYWnBkSGtzSUhSb2FYTXVjbVZtY21GamRHbHZibEpoZEdsdklEMGdaUzV5WldaeVlXTjBhVzl1VW1GMGFXOHNJSFJvYVhNdWQybHlaV1p5WVcxbElEMGdaUzUzYVhKbFpuSmhiV1VzSUhSb2FYTXVkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9JRDBnWlM1M2FYSmxabkpoYldWTWFXNWxkMmxrZEdnc0lIUm9hWE11ZDJseVpXWnlZVzFsVEdsdVpXTmhjQ0E5SUdVdWQybHlaV1p5WVcxbFRHbHVaV05oY0N3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGFtOXBiaUE5SUdVdWQybHlaV1p5WVcxbFRHbHVaV3B2YVc0c0lIUm9hWE11Wm14aGRGTm9ZV1JwYm1jZ1BTQmxMbVpzWVhSVGFHRmthVzVuTENCMGFHbHpPd29nSUNBZ2ZRcDlPd3BNWVM1d2NtOTBiM1I1Y0dVdWFYTk5aWE5vVUdodmJtZE5ZWFJsY21saGJDQTlJQ0V3T3dwMllYSWdVbUVnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1IwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVrWldacGJtVnpJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQlVUMDlPT2lBaUlnb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWRIbHdaU0E5SUNKTlpYTm9WRzl2YmsxaGRHVnlhV0ZzSWl3Z2RHaHBjeTVqYjJ4dmNpQTlJRzVsZHlCaFpTZ3hOamMzTnpJeE5Ta3NJSFJvYVhNdWJXRndJRDBnYm5Wc2JDd2dkR2hwY3k1bmNtRmthV1Z1ZEUxaGNDQTlJRzUxYkd3c0lIUm9hWE11YkdsbmFIUk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUlEMGdNU3dnZEdocGN5NWhiMDFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZVzlOWVhCSmJuUmxibk5wZEhrZ1BTQXhMQ0IwYUdsekxtVnRhWE56YVhabElEMGdibVYzSUdGbEtEQXBMQ0IwYUdsekxtVnRhWE56YVhabFNXNTBaVzV6YVhSNUlEMGdNU3dnZEdocGN5NWxiV2x6YzJsMlpVMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVluVnRjRTFoY0NBOUlHNTFiR3dzSUhSb2FYTXVZblZ0Y0ZOallXeGxJRDBnTVN3Z2RHaHBjeTV1YjNKdFlXeE5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtNXZjbTFoYkUxaGNGUjVjR1VnUFNCSWFTd2dkR2hwY3k1dWIzSnRZV3hUWTJGc1pTQTlJRzVsZHlCWUtERXNJREVwTENCMGFHbHpMbVJwYzNCc1lXTmxiV1Z1ZEUxaGNDQTlJRzUxYkd3c0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VnUFNBeExDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRFSnBZWE1nUFNBd0xDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0FoTVN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNBeExDQjBhR2x6TG5kcGNtVm1jbUZ0WlV4cGJtVmpZWEFnUFNBaWNtOTFibVFpTENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVJRDBnSW5KdmRXNWtJaXdnZEdocGN5NXpaWFJXWVd4MVpYTW9aU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1amIyeHZjaTVqYjNCNUtHVXVZMjlzYjNJcExDQjBhR2x6TG0xaGNDQTlJR1V1YldGd0xDQjBhR2x6TG1keVlXUnBaVzUwVFdGd0lEMGdaUzVuY21Ga2FXVnVkRTFoY0N3Z2RHaHBjeTVzYVdkb2RFMWhjQ0E5SUdVdWJHbG5hSFJOWVhBc0lIUm9hWE11YkdsbmFIUk5ZWEJKYm5SbGJuTnBkSGtnUFNCbExteHBaMmgwVFdGd1NXNTBaVzV6YVhSNUxDQjBhR2x6TG1GdlRXRndJRDBnWlM1aGIwMWhjQ3dnZEdocGN5NWhiMDFoY0VsdWRHVnVjMmwwZVNBOUlHVXVZVzlOWVhCSmJuUmxibk5wZEhrc0lIUm9hWE11WlcxcGMzTnBkbVV1WTI5d2VTaGxMbVZ0YVhOemFYWmxLU3dnZEdocGN5NWxiV2x6YzJsMlpVMWhjQ0E5SUdVdVpXMXBjM05wZG1WTllYQXNJSFJvYVhNdVpXMXBjM05wZG1WSmJuUmxibk5wZEhrZ1BTQmxMbVZ0YVhOemFYWmxTVzUwWlc1emFYUjVMQ0IwYUdsekxtSjFiWEJOWVhBZ1BTQmxMbUoxYlhCTllYQXNJSFJvYVhNdVluVnRjRk5qWVd4bElEMGdaUzVpZFcxd1UyTmhiR1VzSUhSb2FYTXVibTl5YldGc1RXRndJRDBnWlM1dWIzSnRZV3hOWVhBc0lIUm9hWE11Ym05eWJXRnNUV0Z3Vkhsd1pTQTlJR1V1Ym05eWJXRnNUV0Z3Vkhsd1pTd2dkR2hwY3k1dWIzSnRZV3hUWTJGc1pTNWpiM0I1S0dVdWJtOXliV0ZzVTJOaGJHVXBMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRTFoY0NBOUlHVXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0xDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRGTmpZV3hsSUQwZ1pTNWthWE53YkdGalpXMWxiblJUWTJGc1pTd2dkR2hwY3k1a2FYTndiR0ZqWlcxbGJuUkNhV0Z6SUQwZ1pTNWthWE53YkdGalpXMWxiblJDYVdGekxDQjBhR2x6TG1Gc2NHaGhUV0Z3SUQwZ1pTNWhiSEJvWVUxaGNDd2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQmxMbmRwY21WbWNtRnRaU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0JsTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bFkyRndJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxZMkZ3TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxhbTlwYml3Z2RHaHBjenNLSUNBZ0lIMEtmVHNLVW1FdWNISnZkRzkwZVhCbExtbHpUV1Z6YUZSdmIyNU5ZWFJsY21saGJDQTlJQ0V3T3dwMllYSWdVR0VnUFNCamJHRnpjeUJsZUhSbGJtUnpJR1IwSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJazFsYzJoT2IzSnRZV3hOWVhSbGNtbGhiQ0lzSUhSb2FYTXVZblZ0Y0UxaGNDQTlJRzUxYkd3c0lIUm9hWE11WW5WdGNGTmpZV3hsSUQwZ01Td2dkR2hwY3k1dWIzSnRZV3hOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbTV2Y20xaGJFMWhjRlI1Y0dVZ1BTQklhU3dnZEdocGN5NXViM0p0WVd4VFkyRnNaU0E5SUc1bGR5QllLREVzSURFcExDQjBhR2x6TG1ScGMzQnNZV05sYldWdWRFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdVpHbHpjR3hoWTJWdFpXNTBVMk5oYkdVZ1BTQXhMQ0IwYUdsekxtUnBjM0JzWVdObGJXVnVkRUpwWVhNZ1BTQXdMQ0IwYUdsekxuZHBjbVZtY21GdFpTQTlJQ0V4TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WM2FXUjBhQ0E5SURFc0lIUm9hWE11Wm05bklEMGdJVEVzSUhSb2FYTXVabXhoZEZOb1lXUnBibWNnUFNBaE1Td2dkR2hwY3k1elpYUldZV3gxWlhNb1pTazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTVpZFcxd1RXRndJRDBnWlM1aWRXMXdUV0Z3TENCMGFHbHpMbUoxYlhCVFkyRnNaU0E5SUdVdVluVnRjRk5qWVd4bExDQjBhR2x6TG01dmNtMWhiRTFoY0NBOUlHVXVibTl5YldGc1RXRndMQ0IwYUdsekxtNXZjbTFoYkUxaGNGUjVjR1VnUFNCbExtNXZjbTFoYkUxaGNGUjVjR1VzSUhSb2FYTXVibTl5YldGc1UyTmhiR1V1WTI5d2VTaGxMbTV2Y20xaGJGTmpZV3hsS1N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0JsTG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeXdnZEdocGN5NTNhWEpsWm5KaGJXVWdQU0JsTG5kcGNtVm1jbUZ0WlN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bGQybGtkR2dnUFNCbExuZHBjbVZtY21GdFpVeHBibVYzYVdSMGFDd2dkR2hwY3k1bWJHRjBVMmhoWkdsdVp5QTlJR1V1Wm14aGRGTm9ZV1JwYm1jc0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q2xCaExuQnliM1J2ZEhsd1pTNXBjMDFsYzJoT2IzSnRZV3hOWVhSbGNtbGhiQ0E5SUNFd093cDJZWElnU1dFZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdSMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSWsxbGMyaE1ZVzFpWlhKMFRXRjBaWEpwWVd3aUxDQjBhR2x6TG1OdmJHOXlJRDBnYm1WM0lHRmxLREUyTnpjM01qRTFLU3dnZEdocGN5NXRZWEFnUFNCdWRXeHNMQ0IwYUdsekxteHBaMmgwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVzYVdkb2RFMWhjRWx1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11WVc5TllYQWdQU0J1ZFd4c0xDQjBhR2x6TG1GdlRXRndTVzUwWlc1emFYUjVJRDBnTVN3Z2RHaHBjeTVsYldsemMybDJaU0E5SUc1bGR5QmhaU2d3S1N3Z2RHaHBjeTVsYldsemMybDJaVWx1ZEdWdWMybDBlU0E5SURFc0lIUm9hWE11WlcxcGMzTnBkbVZOWVhBZ1BTQnVkV3hzTENCMGFHbHpMbk53WldOMWJHRnlUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWhiSEJvWVUxaGNDQTlJRzUxYkd3c0lIUm9hWE11Wlc1MlRXRndJRDBnYm5Wc2JDd2dkR2hwY3k1amIyMWlhVzVsSUQwZ1ZuTXNJSFJvYVhNdWNtVm1iR1ZqZEdsMmFYUjVJRDBnTVN3Z2RHaHBjeTV5WldaeVlXTjBhVzl1VW1GMGFXOGdQU0F1T1Rnc0lIUm9hWE11ZDJseVpXWnlZVzFsSUQwZ0lURXNJSFJvYVhNdWQybHlaV1p5WVcxbFRHbHVaWGRwWkhSb0lEMGdNU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsWTJGd0lEMGdJbkp2ZFc1a0lpd2dkR2hwY3k1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBOUlDSnliM1Z1WkNJc0lIUm9hWE11YzJWMFZtRnNkV1Z6S0dVcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVZMjlzYjNJdVkyOXdlU2hsTG1OdmJHOXlLU3dnZEdocGN5NXRZWEFnUFNCbExtMWhjQ3dnZEdocGN5NXNhV2RvZEUxaGNDQTlJR1V1YkdsbmFIUk5ZWEFzSUhSb2FYTXViR2xuYUhSTllYQkpiblJsYm5OcGRIa2dQU0JsTG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1TENCMGFHbHpMbUZ2VFdGd0lEMGdaUzVoYjAxaGNDd2dkR2hwY3k1aGIwMWhjRWx1ZEdWdWMybDBlU0E5SUdVdVlXOU5ZWEJKYm5SbGJuTnBkSGtzSUhSb2FYTXVaVzFwYzNOcGRtVXVZMjl3ZVNobExtVnRhWE56YVhabEtTd2dkR2hwY3k1bGJXbHpjMmwyWlUxaGNDQTlJR1V1WlcxcGMzTnBkbVZOWVhBc0lIUm9hWE11WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtnUFNCbExtVnRhWE56YVhabFNXNTBaVzV6YVhSNUxDQjBhR2x6TG5Od1pXTjFiR0Z5VFdGd0lEMGdaUzV6Y0dWamRXeGhjazFoY0N3Z2RHaHBjeTVoYkhCb1lVMWhjQ0E5SUdVdVlXeHdhR0ZOWVhBc0lIUm9hWE11Wlc1MlRXRndJRDBnWlM1bGJuWk5ZWEFzSUhSb2FYTXVZMjl0WW1sdVpTQTlJR1V1WTI5dFltbHVaU3dnZEdocGN5NXlaV1pzWldOMGFYWnBkSGtnUFNCbExuSmxabXhsWTNScGRtbDBlU3dnZEdocGN5NXlaV1p5WVdOMGFXOXVVbUYwYVc4Z1BTQmxMbkpsWm5KaFkzUnBiMjVTWVhScGJ5d2dkR2hwY3k1M2FYSmxabkpoYldVZ1BTQmxMbmRwY21WbWNtRnRaU3dnZEdocGN5NTNhWEpsWm5KaGJXVk1hVzVsZDJsa2RHZ2dQU0JsTG5kcGNtVm1jbUZ0WlV4cGJtVjNhV1IwYUN3Z2RHaHBjeTUzYVhKbFpuSmhiV1ZNYVc1bFkyRndJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxZMkZ3TENCMGFHbHpMbmRwY21WbWNtRnRaVXhwYm1WcWIybHVJRDBnWlM1M2FYSmxabkpoYldWTWFXNWxhbTlwYml3Z2RHaHBjenNLSUNBZ0lIMEtmVHNLU1dFdWNISnZkRzkwZVhCbExtbHpUV1Z6YUV4aGJXSmxjblJOWVhSbGNtbGhiQ0E5SUNFd093cDJZWElnUkdFZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdSMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtDazdDaUFnSUNBZ0lDQWdkR2hwY3k1a1pXWnBibVZ6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JOUVZSRFFWQTZJQ0lpQ2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTUwZVhCbElEMGdJazFsYzJoTllYUmpZWEJOWVhSbGNtbGhiQ0lzSUhSb2FYTXVZMjlzYjNJZ1BTQnVaWGNnWVdVb01UWTNOemN5TVRVcExDQjBhR2x6TG0xaGRHTmhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJXRndJRDBnYm5Wc2JDd2dkR2hwY3k1aWRXMXdUV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NWlkVzF3VTJOaGJHVWdQU0F4TENCMGFHbHpMbTV2Y20xaGJFMWhjQ0E5SUc1MWJHd3NJSFJvYVhNdWJtOXliV0ZzVFdGd1ZIbHdaU0E5SUVocExDQjBhR2x6TG01dmNtMWhiRk5qWVd4bElEMGdibVYzSUZnb01Td2dNU2tzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwVFdGd0lEMGdiblZzYkN3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0E5SURFc0lIUm9hWE11WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeUE5SURBc0lIUm9hWE11WVd4d2FHRk5ZWEFnUFNCdWRXeHNMQ0IwYUdsekxtWnNZWFJUYUdGa2FXNW5JRDBnSVRFc0lIUm9hWE11YzJWMFZtRnNkV1Z6S0dVcE93b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVaR1ZtYVc1bGN5QTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1RVRlVRMEZRT2lBaUlnb2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdVkyOXNiM0l1WTI5d2VTaGxMbU52Ykc5eUtTd2dkR2hwY3k1dFlYUmpZWEFnUFNCbExtMWhkR05oY0N3Z2RHaHBjeTV0WVhBZ1BTQmxMbTFoY0N3Z2RHaHBjeTVpZFcxd1RXRndJRDBnWlM1aWRXMXdUV0Z3TENCMGFHbHpMbUoxYlhCVFkyRnNaU0E5SUdVdVluVnRjRk5qWVd4bExDQjBhR2x6TG01dmNtMWhiRTFoY0NBOUlHVXVibTl5YldGc1RXRndMQ0IwYUdsekxtNXZjbTFoYkUxaGNGUjVjR1VnUFNCbExtNXZjbTFoYkUxaGNGUjVjR1VzSUhSb2FYTXVibTl5YldGc1UyTmhiR1V1WTI5d2VTaGxMbTV2Y20xaGJGTmpZV3hsS1N3Z2RHaHBjeTVrYVhOd2JHRmpaVzFsYm5STllYQWdQU0JsTG1ScGMzQnNZV05sYldWdWRFMWhjQ3dnZEdocGN5NWthWE53YkdGalpXMWxiblJUWTJGc1pTQTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFUyTmhiR1VzSUhSb2FYTXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QTlJR1V1WkdsemNHeGhZMlZ0Wlc1MFFtbGhjeXdnZEdocGN5NWhiSEJvWVUxaGNDQTlJR1V1WVd4d2FHRk5ZWEFzSUhSb2FYTXVabXhoZEZOb1lXUnBibWNnUFNCbExtWnNZWFJUYUdGa2FXNW5MQ0IwYUdsek93b2dJQ0FnZlFwOU93cEVZUzV3Y205MGIzUjVjR1V1YVhOTlpYTm9UV0YwWTJGd1RXRjBaWEpwWVd3Z1BTQWhNRHNLZG1GeUlFWmhJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5Qm1kQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDSk1hVzVsUkdGemFHVmtUV0YwWlhKcFlXd2lMQ0IwYUdsekxuTmpZV3hsSUQwZ01Td2dkR2hwY3k1a1lYTm9VMmw2WlNBOUlETXNJSFJvYVhNdVoyRndVMmw2WlNBOUlERXNJSFJvYVhNdWMyVjBWbUZzZFdWektHVXBPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11YzJOaGJHVWdQU0JsTG5OallXeGxMQ0IwYUdsekxtUmhjMmhUYVhwbElEMGdaUzVrWVhOb1UybDZaU3dnZEdocGN5NW5ZWEJUYVhwbElEMGdaUzVuWVhCVGFYcGxMQ0IwYUdsek93b2dJQ0FnZlFwOU93cEdZUzV3Y205MGIzUjVjR1V1YVhOTWFXNWxSR0Z6YUdWa1RXRjBaWEpwWVd3Z1BTQWhNRHNLZG1GeUlITjVJRDBnVDJKcVpXTjBMbVp5WldWNlpTaDdDaUFnSUNCZlgzQnliM1J2WDE4NklHNTFiR3dzQ2lBZ0lDQlRhR0ZrYjNkTllYUmxjbWxoYkRvZ1FXRXNDaUFnSUNCVGNISnBkR1ZOWVhSbGNtbGhiRG9nYVc4c0NpQWdJQ0JTWVhkVGFHRmtaWEpOWVhSbGNtbGhiRG9nUjJrc0NpQWdJQ0JUYUdGa1pYSk5ZWFJsY21saGJEb2djMjRzQ2lBZ0lDQlFiMmx1ZEhOTllYUmxjbWxoYkRvZ2FtNHNDaUFnSUNCTlpYTm9VR2g1YzJsallXeE5ZWFJsY21saGJEb2dRMkVzQ2lBZ0lDQk5aWE5vVTNSaGJtUmhjbVJOWVhSbGNtbGhiRG9nY0c4c0NpQWdJQ0JOWlhOb1VHaHZibWROWVhSbGNtbGhiRG9nVEdFc0NpQWdJQ0JOWlhOb1ZHOXZiazFoZEdWeWFXRnNPaUJTWVN3S0lDQWdJRTFsYzJoT2IzSnRZV3hOWVhSbGNtbGhiRG9nVUdFc0NpQWdJQ0JOWlhOb1RHRnRZbVZ5ZEUxaGRHVnlhV0ZzT2lCSllTd0tJQ0FnSUUxbGMyaEVaWEIwYUUxaGRHVnlhV0ZzT2lCbGJ5d0tJQ0FnSUUxbGMyaEVhWE4wWVc1alpVMWhkR1Z5YVdGc09pQjBieXdLSUNBZ0lFMWxjMmhDWVhOcFkwMWhkR1Z5YVdGc09pQm9iaXdLSUNBZ0lFMWxjMmhOWVhSallYQk5ZWFJsY21saGJEb2dSR0VzQ2lBZ0lDQk1hVzVsUkdGemFHVmtUV0YwWlhKcFlXdzZJRVpoTEFvZ0lDQWdUR2x1WlVKaGMybGpUV0YwWlhKcFlXdzZJR1owTEFvZ0lDQWdUV0YwWlhKcFlXdzZJR1IwQ24wcExDQmFaU0E5SUhzS0lDQWdJR0Z5Y21GNVUyeHBZMlU2SUdaMWJtTjBhVzl1S0hNc0lHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnV21VdWFYTlVlWEJsWkVGeWNtRjVLSE1wSUQ4Z2JtVjNJSE11WTI5dWMzUnlkV04wYjNJb2N5NXpkV0poY25KaGVTaGxMQ0IwSUNFOVBTQjJiMmxrSURBZ1B5QjBJRG9nY3k1c1pXNW5kR2dwS1NBNklITXVjMnhwWTJVb1pTd2dkQ2s3Q2lBZ0lDQjlMQW9nSUNBZ1kyOXVkbVZ5ZEVGeWNtRjVPaUJtZFc1amRHbHZiaWh6TENCbExDQjBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJQ0Z6SUh4OElDRjBJQ1ltSUhNdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUdVZ1B5QnpJRG9nZEhsd1pXOW1JR1V1UWxsVVJWTmZVRVZTWDBWTVJVMUZUbFFnUFQwZ0ltNTFiV0psY2lJZ1B5QnVaWGNnWlNoektTQTZJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLSE1wT3dvZ0lDQWdmU3dLSUNBZ0lHbHpWSGx3WldSQmNuSmhlVG9nWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCQmNuSmhlVUoxWm1abGNpNXBjMVpwWlhjb2N5a2dKaVlnSVNoeklHbHVjM1JoYm1ObGIyWWdSR0YwWVZacFpYY3BPd29nSUNBZ2ZTd0tJQ0FnSUdkbGRFdGxlV1p5WVcxbFQzSmtaWEk2SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmxLR2tzSUhJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE5iYVYwZ0xTQnpXM0pkT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhNdWJHVnVaM1JvTENCdUlEMGdibVYzSUVGeWNtRjVLSFFwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQTdJR2tnSVQwOUlIUTdJQ3NyYVNsdVcybGRJRDBnYVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmk1emIzSjBLR1VwTENCdU93b2dJQ0FnZlN3S0lDQWdJSE52Y25SbFpFRnljbUY1T2lCbWRXNWpkR2x2YmloekxDQmxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCekxteGxibWQwYUN3Z2FTQTlJRzVsZHlCekxtTnZibk4wY25WamRHOXlLRzRwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQXNJRzhnUFNBd095QnZJQ0U5UFNCdU95QXJLM0lwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIUmJjbDBnS2lCbE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR3dnUFNBd095QnNJQ0U5UFNCbE95QXJLMndwYVZ0dkt5dGRJRDBnYzF0aElDc2diRjA3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJwT3dvZ0lDQWdmU3dLSUNBZ0lHWnNZWFIwWlc1S1UwOU9PaUJtZFc1amRHbHZiaWh6TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNBeExDQnlJRDBnYzFzd1hUc0tJQ0FnSUNBZ0lDQm1iM0lvT3lCeUlDRTlQU0IyYjJsa0lEQWdKaVlnY2x0dVhTQTlQVDBnZG05cFpDQXdPeWx5SUQwZ2MxdHBLeXRkT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJRDA5UFNCMmIybGtJREFwSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0JzWlhRZ2J5QTlJSEpiYmwwN0NpQWdJQ0FnSUNBZ2FXWWdLRzhnSVQwOUlIWnZhV1FnTUNrZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2J5a3BJR1J2SUc4Z1BTQnlXMjVkTENCdklDRTlQU0IyYjJsa0lEQWdKaVlnS0dVdWNIVnphQ2h5TG5ScGJXVXBMQ0IwTG5CMWMyZ3VZWEJ3Ykhrb2RDd2dieWtwTENCeUlEMGdjMXRwS3l0ZE93b2dJQ0FnSUNBZ0lIZG9hV3hsSUNoeUlDRTlQU0IyYjJsa0lEQXBDaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9ieTUwYjBGeWNtRjVJQ0U5UFNCMmIybGtJREFwSUdSdklHOGdQU0J5VzI1ZExDQnZJQ0U5UFNCMmIybGtJREFnSmlZZ0tHVXVjSFZ6YUNoeUxuUnBiV1VwTENCdkxuUnZRWEp5WVhrb2RDd2dkQzVzWlc1bmRHZ3BLU3dnY2lBOUlITmJhU3NyWFRzS0lDQWdJQ0FnSUNCM2FHbHNaU0FvY2lBaFBUMGdkbTlwWkNBd0tRb2dJQ0FnSUNBZ0lHVnNjMlVnWkc4Z2J5QTlJSEpiYmwwc0lHOGdJVDA5SUhadmFXUWdNQ0FtSmlBb1pTNXdkWE5vS0hJdWRHbHRaU2tzSUhRdWNIVnphQ2h2S1Nrc0lISWdQU0J6VzJrcksxMDdDaUFnSUNBZ0lDQWdkMmhwYkdVZ0tISWdJVDA5SUhadmFXUWdNQ2tLSUNBZ0lIMHNDaUFnSUNCemRXSmpiR2x3T2lCbWRXNWpkR2x2YmloekxDQmxMQ0IwTENCdUxDQnBJRDBnTXpBcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlITXVZMnh2Ym1Vb0tUc0tJQ0FnSUNBZ0lDQnlMbTVoYldVZ1BTQmxPd29nSUNBZ0lDQWdJR3hsZENCdklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JzSUQwZ01Ec2diQ0E4SUhJdWRISmhZMnR6TG14bGJtZDBhRHNnS3l0c0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTWdQU0J5TG5SeVlXTnJjMXRzWFN3Z2FDQTlJR011WjJWMFZtRnNkV1ZUYVhwbEtDa3NJSFVnUFNCYlhTd2daQ0E5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1lnUFNBd095Qm1JRHdnWXk1MGFXMWxjeTVzWlc1bmRHZzdJQ3NyWmlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiU0E5SUdNdWRHbHRaWE5iWmwwZ0tpQnBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFb2JTQThJSFFnZkh3Z2JTQStQU0J1S1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFV1Y0hWemFDaGpMblJwYldWelcyWmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhnZ1BTQXdPeUI0SUR3Z2FEc2dLeXQ0S1dRdWNIVnphQ2hqTG5aaGJIVmxjMXRtSUNvZ2FDQXJJSGhkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCMUxteGxibWQwYUNBaFBUMGdNQ0FtSmlBb1l5NTBhVzFsY3lBOUlGcGxMbU52Ym5abGNuUkJjbkpoZVNoMUxDQmpMblJwYldWekxtTnZibk4wY25WamRHOXlLU3dnWXk1MllXeDFaWE1nUFNCYVpTNWpiMjUyWlhKMFFYSnlZWGtvWkN3Z1l5NTJZV3gxWlhNdVkyOXVjM1J5ZFdOMGIzSXBMQ0J2TG5CMWMyZ29ZeWtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeUxuUnlZV05yY3lBOUlHODdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQXhJQzhnTURzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUd3Z1BTQXdPeUJzSUR3Z2NpNTBjbUZqYTNNdWJHVnVaM1JvT3lBcksyd3BZU0ErSUhJdWRISmhZMnR6VzJ4ZExuUnBiV1Z6V3pCZElDWW1JQ2hoSUQwZ2NpNTBjbUZqYTNOYmJGMHVkR2x0WlhOYk1GMHBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SURBN0lHd2dQQ0J5TG5SeVlXTnJjeTVzWlc1bmRHZzdJQ3NyYkNseUxuUnlZV05yYzF0c1hTNXphR2xtZENndE1TQXFJR0VwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5TG5KbGMyVjBSSFZ5WVhScGIyNG9LU3dnY2pzS0lDQWdJSDBzQ2lBZ0lDQnRZV3RsUTJ4cGNFRmtaR2wwYVhabE9pQm1kVzVqZEdsdmJpaHpMQ0JsSUQwZ01Dd2dkQ0E5SUhNc0lHNGdQU0F6TUNrZ2V3b2dJQ0FnSUNBZ0lHNGdQRDBnTUNBbUppQW9iaUE5SURNd0tUc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUXVkSEpoWTJ0ekxteGxibWQwYUN3Z2NpQTlJR1VnTHlCdU93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREE3SUc4Z1BDQnBPeUFySzI4cGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSFF1ZEhKaFkydHpXMjlkTENCc0lEMGdZUzVXWVd4MVpWUjVjR1ZPWVcxbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JDQTlQVDBnSW1KdmIyd2lJSHg4SUd3Z1BUMDlJQ0p6ZEhKcGJtY2lLU0JqYjI1MGFXNTFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCekxuUnlZV05yY3k1bWFXNWtLR1oxYm1OMGFXOXVLR2NwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJuTG01aGJXVWdQVDA5SUdFdWJtRnRaU0FtSmlCbkxsWmhiSFZsVkhsd1pVNWhiV1VnUFQwOUlHdzdDaUFnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1l5QTlQVDBnZG05cFpDQXdLU0JqYjI1MGFXNTFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNBd0xDQjFJRDBnWVM1blpYUldZV3gxWlZOcGVtVW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1lTNWpjbVZoZEdWSmJuUmxjbkJ2YkdGdWRDNXBjMGx1ZEdWeWNHOXNZVzUwUm1GamRHOXllVTFsZEdodlpFZE1WRVpEZFdKcFkxTndiR2x1WlNBbUppQW9hQ0E5SUhVZ0x5QXpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1FnUFNBd0xDQm1JRDBnWXk1blpYUldZV3gxWlZOcGVtVW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1l5NWpjbVZoZEdWSmJuUmxjbkJ2YkdGdWRDNXBjMGx1ZEdWeWNHOXNZVzUwUm1GamRHOXllVTFsZEdodlpFZE1WRVpEZFdKcFkxTndiR2x1WlNBbUppQW9aQ0E5SUdZZ0x5QXpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzBnUFNCaExuUnBiV1Z6TG14bGJtZDBhQ0F0SURFc0lIZzdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlJRHc5SUdFdWRHbHRaWE5iTUYwcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuSUQwZ2FDd2djQ0E5SUhVZ0xTQm9Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlQ0E5SUZwbExtRnljbUY1VTJ4cFkyVW9ZUzUyWVd4MVpYTXNJR2NzSUhBcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hJZ1BqMGdZUzUwYVcxbGMxdHRYU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHY2dQU0J0SUNvZ2RTQXJJR2dzSUhBZ1BTQm5JQ3NnZFNBdElHZzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRJRDBnV21VdVlYSnlZWGxUYkdsalpTaGhMblpoYkhWbGN5d2daeXdnY0NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWnlBOUlHRXVZM0psWVhSbFNXNTBaWEp3YjJ4aGJuUW9LU3dnY0NBOUlHZ3NJRjhnUFNCMUlDMGdhRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2N1WlhaaGJIVmhkR1VvY2lrc0lIZ2dQU0JhWlM1aGNuSmhlVk5zYVdObEtHY3VjbVZ6ZFd4MFFuVm1abVZ5TENCd0xDQmZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JzSUQwOVBTQWljWFZoZEdWeWJtbHZiaUlnSmlZZ2JtVjNJR2QwS0NrdVpuSnZiVUZ5Y21GNUtIZ3BMbTV2Y20xaGJHbDZaU2dwTG1OdmJtcDFaMkYwWlNncExuUnZRWEp5WVhrb2VDazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJJRDBnWXk1MGFXMWxjeTVzWlc1bmRHZzdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWnlBOUlEQTdJR2NnUENCMk95QXJLMmNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQWdQU0JuSUNvZ1ppQXJJR1E3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JDQTlQVDBnSW5GMVlYUmxjbTVwYjI0aUtTQm5kQzV0ZFd4MGFYQnNlVkYxWVhSbGNtNXBiMjV6Um14aGRDaGpMblpoYkhWbGN5d2djQ3dnZUN3Z01Dd2dZeTUyWVd4MVpYTXNJSEFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElGOGdQU0JtSUMwZ1pDQXFJREk3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCNUlEMGdNRHNnZVNBOElGODdJQ3NyZVNsakxuWmhiSFZsYzF0d0lDc2dlVjBnTFQwZ2VGdDVYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2N5NWliR1Z1WkUxdlpHVWdQU0J4WXl3Z2N6c0tJQ0FnSUgwS2ZTd2dZMjRnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVMQ0JwS1hzS0lDQWdJQ0FnSUNCMGFHbHpMbkJoY21GdFpYUmxjbEJ2YzJsMGFXOXVjeUE5SUdVc0lIUm9hWE11WDJOaFkyaGxaRWx1WkdWNElEMGdNQ3dnZEdocGN5NXlaWE4xYkhSQ2RXWm1aWElnUFNCcElDRTlQU0IyYjJsa0lEQWdQeUJwSURvZ2JtVjNJSFF1WTI5dWMzUnlkV04wYjNJb2Jpa3NJSFJvYVhNdWMyRnRjR3hsVm1Gc2RXVnpJRDBnZEN3Z2RHaHBjeTUyWVd4MVpWTnBlbVVnUFNCdUxDQjBhR2x6TG5ObGRIUnBibWR6SUQwZ2JuVnNiQ3dnZEdocGN5NUVaV1poZFd4MFUyVjBkR2x1WjNOZklEMGdlMzA3Q2lBZ0lDQjlDaUFnSUNCbGRtRnNkV0YwWlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5CaGNtRnRaWFJsY2xCdmMybDBhVzl1Y3l3Z2JpQTlJSFJvYVhNdVgyTmhZMmhsWkVsdVpHVjRMQ0JwSUQwZ2RGdHVYU3dnY2lBOUlIUmJiaUF0SURGZE93b2dJQ0FnSUNBZ0lHVTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2REb2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc4N0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdU9pQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVRvZ2FXWWdLQ0VvWlNBOElHa3BLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SUc0Z0t5QXlPenNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxJRHdnY2lrZ1luSmxZV3NnYVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaUE5SUhRdWJHVnVaM1JvTENCMGFHbHpMbDlqWVdOb1pXUkpibVJsZUNBOUlHNHNJSFJvYVhNdVlXWjBaWEpGYm1SZktHNGdMU0F4TENCbExDQnlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1SUQwOVBTQmhLU0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMGdhU3dnYVNBOUlIUmJLeXR1WFN3Z1pTQThJR2twSUdKeVpXRnJJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieUE5SUhRdWJHVnVaM1JvT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF5QnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVNobElENDlJSElwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZEZzeFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTQThJR0VnSmlZZ0tHNGdQU0F5TENCeUlEMGdZU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SUc0Z0xTQXlPenNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSElnUFQwOUlIWnZhV1FnTUNrZ2NtVjBkWEp1SUhSb2FYTXVYMk5oWTJobFpFbHVaR1Y0SUQwZ01Dd2dkR2hwY3k1aVpXWnZjbVZUZEdGeWRGOG9NQ3dnWlN3Z2FTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpQTlQVDBnYkNrZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0E5SUhJc0lISWdQU0IwV3kwdGJpQXRJREZkTENCbElENDlJSElwSUdKeVpXRnJJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieUE5SUc0c0lHNGdQU0F3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF5QnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXlCbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLRHNnYmlBOElHODdLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZU0E5SUc0Z0t5QnZJRDQrUGlBeE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1VnUENCMFcyRmRJRDhnYnlBOUlHRWdPaUJ1SUQwZ1lTQXJJREU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQTlJSFJiYmwwc0lISWdQU0IwVzI0Z0xTQXhYU3dnY2lBOVBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2RHaHBjeTVmWTJGamFHVmtTVzVrWlhnZ1BTQXdMQ0IwYUdsekxtSmxabTl5WlZOMFlYSjBYeWd3TENCbExDQnBLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElEMDlQU0IyYjJsa0lEQXBJSEpsZEhWeWJpQnVJRDBnZEM1c1pXNW5kR2dzSUhSb2FYTXVYMk5oWTJobFpFbHVaR1Y0SUQwZ2Jpd2dkR2hwY3k1aFpuUmxja1Z1WkY4b2JpQXRJREVzSUhJc0lHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTmhZMmhsWkVsdVpHVjRJRDBnYml3Z2RHaHBjeTVwYm5SbGNuWmhiRU5vWVc1blpXUmZLRzRzSUhJc0lHa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGJuUmxjbkJ2YkdGMFpWOG9iaXdnY2l3Z1pTd2dhU2s3Q2lBZ0lDQjlDaUFnSUNCblpYUlRaWFIwYVc1bmMxOG9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBkR2x1WjNNZ2ZId2dkR2hwY3k1RVpXWmhkV3gwVTJWMGRHbHVaM05mT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlVk5oYlhCc1pWWmhiSFZsWHlobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG5KbGMzVnNkRUoxWm1abGNpd2diaUE5SUhSb2FYTXVjMkZ0Y0d4bFZtRnNkV1Z6TENCcElEMGdkR2hwY3k1MllXeDFaVk5wZW1Vc0lISWdQU0JsSUNvZ2FUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHOGdQU0F3T3lCdklDRTlQU0JwT3lBcksyOHBkRnR2WFNBOUlHNWJjaUFySUc5ZE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCME93b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKd2IyeGhkR1ZmS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaVkyRnNiQ0IwYnlCaFluTjBjbUZqZENCdFpYUm9iMlFpS1RzS0lDQWdJSDBLSUNBZ0lHbHVkR1Z5ZG1Gc1EyaGhibWRsWkY4b0tTQjdmUXA5T3dwamJpNXdjbTkwYjNSNWNHVXVZbVZtYjNKbFUzUmhjblJmSUQwZ1kyNHVjSEp2ZEc5MGVYQmxMbU52Y0hsVFlXMXdiR1ZXWVd4MVpWODdDbU51TG5CeWIzUnZkSGx3WlM1aFpuUmxja1Z1WkY4Z1BTQmpiaTV3Y205MGIzUjVjR1V1WTI5d2VWTmhiWEJzWlZaaGJIVmxYenNLZG1GeUlGQm9JRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmpiaUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVMQ0JwS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMExDQnVMQ0JwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbDkzWldsbmFIUlFjbVYySUQwZ0xUQXNJSFJvYVhNdVgyOW1abk5sZEZCeVpYWWdQU0F0TUN3Z2RHaHBjeTVmZDJWcFoyaDBUbVY0ZENBOUlDMHdMQ0IwYUdsekxsOXZabVp6WlhST1pYaDBJRDBnTFRBc0lIUm9hWE11UkdWbVlYVnNkRk5sZEhScGJtZHpYeUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdaVzVrYVc1blUzUmhjblE2SUUxcExBb2dJQ0FnSUNBZ0lDQWdJQ0JsYm1ScGJtZEZibVE2SUUxcENpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWRtRnNRMmhoYm1kbFpGOG9aU3dnZEN3Z2Jpa2dld29nSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwY3k1d1lYSmhiV1YwWlhKUWIzTnBkR2x2Ym5Nc0lISWdQU0JsSUMwZ01pd2dieUE5SUdVZ0t5QXhMQ0JoSUQwZ2FWdHlYU3dnYkNBOUlHbGJiMTA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHRWdQVDA5SUhadmFXUWdNQ2tnYzNkcGRHTm9LSFJvYVhNdVoyVjBVMlYwZEdsdVozTmZLQ2t1Wlc1a2FXNW5VM1JoY25RcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElHSnBPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjaUE5SUdVc0lHRWdQU0F5SUNvZ2RDQXRJRzQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlBjem9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSElnUFNCcExteGxibWQwYUNBdElESXNJR0VnUFNCMElDc2dhVnR5WFNBdElHbGJjaUFySURGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUlEMGdaU3dnWVNBOUlHNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoc0lEMDlQU0IyYjJsa0lEQXBJSE4zYVhSamFDaDBhR2x6TG1kbGRGTmxkSFJwYm1kelh5Z3BMbVZ1WkdsdVowVnVaQ2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWW1rNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdklEMGdaU3dnYkNBOUlESWdLaUJ1SUMwZ2REc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUU5ek9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJREVzSUd3Z1BTQnVJQ3NnYVZzeFhTQXRJR2xiTUYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4Z1BTQmxJQzBnTVN3Z2JDQTlJSFE3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnS0c0Z0xTQjBLU0FxSUM0MUxDQm9JRDBnZEdocGN5NTJZV3gxWlZOcGVtVTdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVnBaMmgwVUhKbGRpQTlJR01nTHlBb2RDQXRJR0VwTENCMGFHbHpMbDkzWldsbmFIUk9aWGgwSUQwZ1l5QXZJQ2hzSUMwZ2Jpa3NJSFJvYVhNdVgyOW1abk5sZEZCeVpYWWdQU0J5SUNvZ2FDd2dkR2hwY3k1ZmIyWm1jMlYwVG1WNGRDQTlJRzhnS2lCb093b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKd2IyeGhkR1ZmS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE11Y21WemRXeDBRblZtWm1WeUxDQnZJRDBnZEdocGN5NXpZVzF3YkdWV1lXeDFaWE1zSUdFZ1BTQjBhR2x6TG5aaGJIVmxVMmw2WlN3Z2JDQTlJR1VnS2lCaExDQmpJRDBnYkNBdElHRXNJR2dnUFNCMGFHbHpMbDl2Wm1aelpYUlFjbVYyTENCMUlEMGdkR2hwY3k1ZmIyWm1jMlYwVG1WNGRDd2daQ0E5SUhSb2FYTXVYM2RsYVdkb2RGQnlaWFlzSUdZZ1BTQjBhR2x6TGw5M1pXbG5hSFJPWlhoMExDQnRJRDBnS0c0Z0xTQjBLU0F2SUNocElDMGdkQ2tzSUhnZ1BTQnRJQ29nYlN3Z2RpQTlJSGdnS2lCdExDQm5JRDBnTFdRZ0tpQjJJQ3NnTWlBcUlHUWdLaUI0SUMwZ1pDQXFJRzBzSUhBZ1BTQW9NU0FySUdRcElDb2dkaUFySUNndE1TNDFJQzBnTWlBcUlHUXBJQ29nZUNBcklDZ3RMalVnS3lCa0tTQXFJRzBnS3lBeExDQmZJRDBnS0MweElDMGdaaWtnS2lCMklDc2dLREV1TlNBcklHWXBJQ29nZUNBcklDNDFJQ29nYlN3Z2VTQTlJR1lnS2lCMklDMGdaaUFxSUhnN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaUlEMGdNRHNnWWlBaFBUMGdZVHNnS3l0aUtYSmJZbDBnUFNCbklDb2diMXRvSUNzZ1lsMGdLeUJ3SUNvZ2IxdGpJQ3NnWWwwZ0t5QmZJQ29nYjF0c0lDc2dZbDBnS3lCNUlDb2diMXQxSUNzZ1lsMDdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISTdDaUFnSUNCOUNuMHNJRTVoSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJqYmlCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBMQ0J1TENCcEtUc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWNHOXNZWFJsWHlobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBhR2x6TG5KbGMzVnNkRUoxWm1abGNpd2dieUE5SUhSb2FYTXVjMkZ0Y0d4bFZtRnNkV1Z6TENCaElEMGdkR2hwY3k1MllXeDFaVk5wZW1Vc0lHd2dQU0JsSUNvZ1lTd2dZeUE5SUd3Z0xTQmhMQ0JvSUQwZ0tHNGdMU0IwS1NBdklDaHBJQzBnZENrc0lIVWdQU0F4SUMwZ2FEc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHUWdQU0F3T3lCa0lDRTlQU0JoT3lBcksyUXBjbHRrWFNBOUlHOWJZeUFySUdSZElDb2dkU0FySUc5YmJDQXJJR1JkSUNvZ2FEc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2Nqc0tJQ0FnSUgwS2ZTd2dTV2dnUFNCamJHRnpjeUJsZUhSbGJtUnpJR051SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRzSUdrcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXNJRzRzSUdrcE93b2dJQ0FnZlFvZ0lDQWdhVzUwWlhKd2IyeGhkR1ZmS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYjNCNVUyRnRjR3hsVm1Gc2RXVmZLR1VnTFNBeEtUc0tJQ0FnSUgwS2ZTd2dlblFnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVMQ0JwS1hzS0lDQWdJQ0FnSUNCcFppQW9aU0E5UFQwZ2RtOXBaQ0F3S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSWxSSVVrVkZMa3RsZVdaeVlXMWxWSEpoWTJzNklIUnlZV05ySUc1aGJXVWdhWE1nZFc1a1pXWnBibVZrSWlrN0NpQWdJQ0FnSUNBZ2FXWWdLSFFnUFQwOUlIWnZhV1FnTUNCOGZDQjBMbXhsYm1kMGFDQTlQVDBnTUNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NKVVNGSkZSUzVMWlhsbWNtRnRaVlJ5WVdOck9pQnVieUJyWlhsbWNtRnRaWE1nYVc0Z2RISmhZMnNnYm1GdFpXUWdJaUFySUdVcE93b2dJQ0FnSUNBZ0lIUm9hWE11Ym1GdFpTQTlJR1VzSUhSb2FYTXVkR2x0WlhNZ1BTQmFaUzVqYjI1MlpYSjBRWEp5WVhrb2RDd2dkR2hwY3k1VWFXMWxRblZtWm1WeVZIbHdaU2tzSUhSb2FYTXVkbUZzZFdWeklEMGdXbVV1WTI5dWRtVnlkRUZ5Y21GNUtHNHNJSFJvYVhNdVZtRnNkV1ZDZFdabVpYSlVlWEJsS1N3Z2RHaHBjeTV6WlhSSmJuUmxjbkJ2YkdGMGFXOXVLR2tnZkh3Z2RHaHBjeTVFWldaaGRXeDBTVzUwWlhKd2IyeGhkR2x2YmlrN0NpQWdJQ0I5Q2lBZ0lDQnpkR0YwYVdNZ2RHOUtVMDlPS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXVZMjl1YzNSeWRXTjBiM0lzSUc0N0NpQWdJQ0FnSUNBZ2FXWWdLSFF1ZEc5S1UwOU9JQ0U5UFNCMGFHbHpMblJ2U2xOUFRpa2diaUE5SUhRdWRHOUtVMDlPS0dVcE93b2dJQ0FnSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnVJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2daUzV1WVcxbExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaWE02SUZwbExtTnZiblpsY25SQmNuSmhlU2hsTG5ScGJXVnpMQ0JCY25KaGVTa3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlhNNklGcGxMbU52Ym5abGNuUkJjbkpoZVNobExuWmhiSFZsY3l3Z1FYSnlZWGtwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnWlM1blpYUkpiblJsY25CdmJHRjBhVzl1S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJR2tnSVQwOUlHVXVSR1ZtWVhWc2RFbHVkR1Z5Y0c5c1lYUnBiMjRnSmlZZ0tHNHVhVzUwWlhKd2IyeGhkR2x2YmlBOUlHa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTUwZVhCbElEMGdaUzVXWVd4MVpWUjVjR1ZPWVcxbExDQnVPd29nSUNBZ2ZRb2dJQ0FnU1c1MFpYSndiMnhoYm5SR1lXTjBiM0o1VFdWMGFHOWtSR2x6WTNKbGRHVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NXZ29kR2hwY3k1MGFXMWxjeXdnZEdocGN5NTJZV3gxWlhNc0lIUm9hWE11WjJWMFZtRnNkV1ZUYVhwbEtDa3NJR1VwT3dvZ0lDQWdmUW9nSUNBZ1NXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVEdsdVpXRnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFNWhLSFJvYVhNdWRHbHRaWE1zSUhSb2FYTXVkbUZzZFdWekxDQjBhR2x6TG1kbGRGWmhiSFZsVTJsNlpTZ3BMQ0JsS1RzS0lDQWdJSDBLSUNBZ0lFbHVkR1Z5Y0c5c1lXNTBSbUZqZEc5eWVVMWxkR2h2WkZOdGIyOTBhQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFhQ2gwYUdsekxuUnBiV1Z6TENCMGFHbHpMblpoYkhWbGN5d2dkR2hwY3k1blpYUldZV3gxWlZOcGVtVW9LU3dnWlNrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJKYm5SbGNuQnZiR0YwYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2REc0tJQ0FnSUNBZ0lDQnpkMmwwWTJnb1pTbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdlbk02Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwSUQwZ2RHaHBjeTVKYm5SbGNuQnZiR0Z1ZEVaaFkzUnZjbmxOWlhSb2IyUkVhWE5qY21WMFpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZWek9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSFJvYVhNdVNXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVEdsdVpXRnlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2VXODZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnZEdocGN5NUpiblJsY25CdmJHRnVkRVpoWTNSdmNubE5aWFJvYjJSVGJXOXZkR2c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0hRZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUNKMWJuTjFjSEJ2Y25SbFpDQnBiblJsY25CdmJHRjBhVzl1SUdadmNpQWlJQ3NnZEdocGN5NVdZV3gxWlZSNWNHVk9ZVzFsSUNzZ0lpQnJaWGxtY21GdFpTQjBjbUZqYXlCdVlXMWxaQ0FpSUNzZ2RHaHBjeTV1WVcxbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqY21WaGRHVkpiblJsY25CdmJHRnVkQ0E5UFQwZ2RtOXBaQ0F3S1NCcFppQW9aU0FoUFQwZ2RHaHBjeTVFWldaaGRXeDBTVzUwWlhKd2IyeGhkR2x2YmlrZ2RHaHBjeTV6WlhSSmJuUmxjbkJ2YkdGMGFXOXVLSFJvYVhNdVJHVm1ZWFZzZEVsdWRHVnljRzlzWVhScGIyNHBPd29nSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSFJvY205M0lHNWxkeUJGY25KdmNpaHVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9pTENCdUtTd2dkR2hwY3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFNXNTBaWEp3YjJ4aGJuUWdQU0IwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFNXNTBaWEp3YjJ4aGRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNCemQybDBZMmdvZEdocGN5NWpjbVZoZEdWSmJuUmxjbkJ2YkdGdWRDbDdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdkR2hwY3k1SmJuUmxjbkJ2YkdGdWRFWmhZM1J2Y25sTlpYUm9iMlJFYVhOamNtVjBaVG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjZjenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0IwYUdsekxrbHVkR1Z5Y0c5c1lXNTBSbUZqZEc5eWVVMWxkR2h2WkV4cGJtVmhjam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZjenNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0IwYUdsekxrbHVkR1Z5Y0c5c1lXNTBSbUZqZEc5eWVVMWxkR2h2WkZOdGIyOTBhRG9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjVienNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDaUFnSUNCblpYUldZV3gxWlZOcGVtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRtRnNkV1Z6TG14bGJtZDBhQ0F2SUhSb2FYTXVkR2x0WlhNdWJHVnVaM1JvT3dvZ0lDQWdmUW9nSUNBZ2MyaHBablFvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTUwYVcxbGN6c0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Dd2dhU0E5SUhRdWJHVnVaM1JvT3lCdUlDRTlQU0JwT3lBcksyNHBkRnR1WFNBclBTQmxPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmpZV3hsS0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBaFBUMGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE11ZEdsdFpYTTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQWhQVDBnYVRzZ0t5dHVLWFJiYmwwZ0tqMGdaVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBjbWx0S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdWRHbHRaWE1zSUdrZ1BTQnVMbXhsYm1kMGFDd2djaUE5SURBc0lHOGdQU0JwSUMwZ01Uc0tJQ0FnSUNBZ0lDQm1iM0lvT3lCeUlDRTlQU0JwSUNZbUlHNWJjbDBnUENCbE95a3JLM0k3Q2lBZ0lDQWdJQ0FnWm05eUtEc2dieUFoUFQwZ0xURWdKaVlnYmx0dlhTQStJSFE3S1MwdGJ6c0tJQ0FnSUNBZ0lDQnBaaUFvS3l0dkxDQnlJQ0U5UFNBd0lIeDhJRzhnSVQwOUlHa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NpQStQU0J2SUNZbUlDaHZJRDBnVFdGMGFDNXRZWGdvYnl3Z01Ta3NJSElnUFNCdklDMGdNU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoSUQwZ2RHaHBjeTVuWlhSV1lXeDFaVk5wZW1Vb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsY3lBOUlGcGxMbUZ5Y21GNVUyeHBZMlVvYml3Z2Npd2dieWtzSUhSb2FYTXVkbUZzZFdWeklEMGdXbVV1WVhKeVlYbFRiR2xqWlNoMGFHbHpMblpoYkhWbGN5d2djaUFxSUdFc0lHOGdLaUJoS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0IyWVd4cFpHRjBaU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUNFd0xDQjBJRDBnZEdocGN5NW5aWFJXWVd4MVpWTnBlbVVvS1RzS0lDQWdJQ0FnSUNCMElDMGdUV0YwYUM1bWJHOXZjaWgwS1NBaFBUMGdNQ0FtSmlBb1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVTMlY1Wm5KaGJXVlVjbUZqYXpvZ1NXNTJZV3hwWkNCMllXeDFaU0J6YVhwbElHbHVJSFJ5WVdOckxpSXNJSFJvYVhNcExDQmxJRDBnSVRFcE93b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTUwYVcxbGN5d2dhU0E5SUhSb2FYTXVkbUZzZFdWekxDQnlJRDBnYmk1c1pXNW5kR2c3Q2lBZ0lDQWdJQ0FnY2lBOVBUMGdNQ0FtSmlBb1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVTMlY1Wm5KaGJXVlVjbUZqYXpvZ1ZISmhZMnNnYVhNZ1pXMXdkSGt1SWl3Z2RHaHBjeWtzSUdVZ1BTQWhNU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0J1ZFd4c093b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREE3SUdFZ0lUMDlJSEk3SUdFckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnYmx0aFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCc0lEMDlJQ0p1ZFcxaVpYSWlJQ1ltSUdselRtRk9LR3dwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNUxaWGxtY21GdFpWUnlZV05yT2lCVWFXMWxJR2x6SUc1dmRDQmhJSFpoYkdsa0lHNTFiV0psY2k0aUxDQjBhR2x6TENCaExDQnNLU3dnWlNBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzhnSVQwOUlHNTFiR3dnSmlZZ2J5QStJR3dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxrdGxlV1p5WVcxbFZISmhZMnM2SUU5MWRDQnZaaUJ2Y21SbGNpQnJaWGx6TGlJc0lIUm9hWE1zSUdFc0lHd3NJRzhwTENCbElEMGdJVEU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYkRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLR2tnSVQwOUlIWnZhV1FnTUNBbUppQmFaUzVwYzFSNWNHVmtRWEp5WVhrb2FTa3BJR1p2Y2loc1pYUWdZU0E5SURBc0lHd2dQU0JwTG14bGJtZDBhRHNnWVNBaFBUMGdiRHNnS3l0aEtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTWdQU0JwVzJGZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTk9ZVTRvWXlrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMa3RsZVdaeVlXMWxWSEpoWTJzNklGWmhiSFZsSUdseklHNXZkQ0JoSUhaaGJHbGtJRzUxYldKbGNpNGlMQ0IwYUdsekxDQmhMQ0JqS1N3Z1pTQTlJQ0V4T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVN0NpQWdJQ0I5Q2lBZ0lDQnZjSFJwYldsNlpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJRnBsTG1GeWNtRjVVMnhwWTJVb2RHaHBjeTUwYVcxbGN5a3NJSFFnUFNCYVpTNWhjbkpoZVZOc2FXTmxLSFJvYVhNdWRtRnNkV1Z6S1N3Z2JpQTlJSFJvYVhNdVoyVjBWbUZzZFdWVGFYcGxLQ2tzSUdrZ1BTQjBhR2x6TG1kbGRFbHVkR1Z5Y0c5c1lYUnBiMjRvS1NBOVBUMGdlVzhzSUhJZ1BTQmxMbXhsYm1kMGFDQXRJREVzSUc4Z1BTQXhPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0E5SURFN0lHRWdQQ0J5T3lBcksyRXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUNFeExDQmpJRDBnWlZ0aFhTd2dhQ0E5SUdWYllTQXJJREZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWXlBaFBUMGdhQ0FtSmlBb1lTQWhQVDBnTVNCOGZDQmpJQ0U5UFNCbFd6QmRLU2tnYVdZZ0tHa3BJR3dnUFNBaE1Ec0tJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHRWdLaUJ1TENCa0lEMGdkU0F0SUc0c0lHWWdQU0IxSUNzZ2Jqc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2JTQTlJREE3SUcwZ0lUMDlJRzQ3SUNzcmJTbDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIZ2dQU0IwVzNVZ0t5QnRYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9lQ0FoUFQwZ2RGdGtJQ3NnYlYwZ2ZId2dlQ0FoUFQwZ2RGdG1JQ3NnYlYwcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDQTlJQ0V3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaElDRTlQU0J2S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVnR2WFNBOUlHVmJZVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCaElDb2diaXdnWkNBOUlHOGdLaUJ1T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ppQTlJREE3SUdZZ0lUMDlJRzQ3SUNzclppbDBXMlFnS3lCbVhTQTlJSFJiZFNBcklHWmRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeXR2T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR2xtSUNoeUlENGdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmxXMjlkSUQwZ1pWdHlYVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCaElEMGdjaUFxSUc0c0lHd2dQU0J2SUNvZ2Jpd2dZeUE5SURBN0lHTWdJVDA5SUc0N0lDc3JZeWwwVzJ3Z0t5QmpYU0E5SUhSYllTQXJJR05kT3dvZ0lDQWdJQ0FnSUNBZ0lDQXJLMjg3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2SUNFOVBTQmxMbXhsYm1kMGFDQS9JQ2gwYUdsekxuUnBiV1Z6SUQwZ1dtVXVZWEp5WVhsVGJHbGpaU2hsTENBd0xDQnZLU3dnZEdocGN5NTJZV3gxWlhNZ1BTQmFaUzVoY25KaGVWTnNhV05sS0hRc0lEQXNJRzhnS2lCdUtTa2dPaUFvZEdocGN5NTBhVzFsY3lBOUlHVXNJSFJvYVhNdWRtRnNkV1Z6SUQwZ2RDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnNaWFFnWlNBOUlGcGxMbUZ5Y21GNVUyeHBZMlVvZEdocGN5NTBhVzFsY3l3Z01Da3NJSFFnUFNCYVpTNWhjbkpoZVZOc2FXTmxLSFJvYVhNdWRtRnNkV1Z6TENBd0tTd2diaUE5SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lzSUdrZ1BTQnVaWGNnYmloMGFHbHpMbTVoYldVc0lHVXNJSFFwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJwTG1OeVpXRjBaVWx1ZEdWeWNHOXNZVzUwSUQwZ2RHaHBjeTVqY21WaGRHVkpiblJsY25CdmJHRnVkQ3dnYVRzS0lDQWdJSDBLZlRzS2VuUXVjSEp2ZEc5MGVYQmxMbFJwYldWQ2RXWm1aWEpVZVhCbElEMGdSbXh2WVhRek1rRnljbUY1T3dwNmRDNXdjbTkwYjNSNWNHVXVWbUZzZFdWQ2RXWm1aWEpVZVhCbElEMGdSbXh2WVhRek1rRnljbUY1T3dwNmRDNXdjbTkwYjNSNWNHVXVSR1ZtWVhWc2RFbHVkR1Z5Y0c5c1lYUnBiMjRnUFNCVmN6c0tkbUZ5SUZGdUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCNmRDQjdDbjA3Q2xGdUxuQnliM1J2ZEhsd1pTNVdZV3gxWlZSNWNHVk9ZVzFsSUQwZ0ltSnZiMndpT3dwUmJpNXdjbTkwYjNSNWNHVXVWbUZzZFdWQ2RXWm1aWEpVZVhCbElEMGdRWEp5WVhrN0NsRnVMbkJ5YjNSdmRIbHdaUzVFWldaaGRXeDBTVzUwWlhKd2IyeGhkR2x2YmlBOUlIcHpPd3BSYmk1d2NtOTBiM1I1Y0dVdVNXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVEdsdVpXRnlJRDBnZG05cFpDQXdPd3BSYmk1d2NtOTBiM1I1Y0dVdVNXNTBaWEp3YjJ4aGJuUkdZV04wYjNKNVRXVjBhRzlrVTIxdmIzUm9JRDBnZG05cFpDQXdPd3AyWVhJZ1FtRWdQU0JqYkdGemN5QmxlSFJsYm1SeklIcDBJSHNLZlRzS1FtRXVjSEp2ZEc5MGVYQmxMbFpoYkhWbFZIbHdaVTVoYldVZ1BTQWlZMjlzYjNJaU93cDJZWElnUVhJZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUhwMElIc0tmVHNLUVhJdWNISnZkRzkwZVhCbExsWmhiSFZsVkhsd1pVNWhiV1VnUFNBaWJuVnRZbVZ5SWpzS2RtRnlJRVJvSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJqYmlCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1TENCcEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBMQ0J1TENCcEtUc0tJQ0FnSUgwS0lDQWdJR2x1ZEdWeWNHOXNZWFJsWHlobExDQjBMQ0J1TENCcEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQjBhR2x6TG5KbGMzVnNkRUoxWm1abGNpd2dieUE5SUhSb2FYTXVjMkZ0Y0d4bFZtRnNkV1Z6TENCaElEMGdkR2hwY3k1MllXeDFaVk5wZW1Vc0lHd2dQU0FvYmlBdElIUXBJQzhnS0drZ0xTQjBLU3dnWXlBOUlHVWdLaUJoT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYUNBOUlHTWdLeUJoT3lCaklDRTlQU0JvT3lCaklDczlJRFFwWjNRdWMyeGxjbkJHYkdGMEtISXNJREFzSUc4c0lHTWdMU0JoTENCdkxDQmpMQ0JzS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnY2pzS0lDQWdJSDBLZlN3Z1Yya2dQU0JqYkdGemN5QmxlSFJsYm1SeklIcDBJSHNLSUNBZ0lFbHVkR1Z5Y0c5c1lXNTBSbUZqZEc5eWVVMWxkR2h2WkV4cGJtVmhjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkVhQ2gwYUdsekxuUnBiV1Z6TENCMGFHbHpMblpoYkhWbGN5d2dkR2hwY3k1blpYUldZV3gxWlZOcGVtVW9LU3dnWlNrN0NpQWdJQ0I5Q24wN0NsZHBMbkJ5YjNSdmRIbHdaUzVXWVd4MVpWUjVjR1ZPWVcxbElEMGdJbkYxWVhSbGNtNXBiMjRpT3dwWGFTNXdjbTkwYjNSNWNHVXVSR1ZtWVhWc2RFbHVkR1Z5Y0c5c1lYUnBiMjRnUFNCVmN6c0tWMmt1Y0hKdmRHOTBlWEJsTGtsdWRHVnljRzlzWVc1MFJtRmpkRzl5ZVUxbGRHaHZaRk50YjI5MGFDQTlJSFp2YVdRZ01Ec0tkbUZ5SUV0dUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCNmRDQjdDbjA3Q2t0dUxuQnliM1J2ZEhsd1pTNVdZV3gxWlZSNWNHVk9ZVzFsSUQwZ0luTjBjbWx1WnlJN0NrdHVMbkJ5YjNSdmRIbHdaUzVXWVd4MVpVSjFabVpsY2xSNWNHVWdQU0JCY25KaGVUc0tTMjR1Y0hKdmRHOTBlWEJsTGtSbFptRjFiSFJKYm5SbGNuQnZiR0YwYVc5dUlEMGdlbk03Q2t0dUxuQnliM1J2ZEhsd1pTNUpiblJsY25CdmJHRnVkRVpoWTNSdmNubE5aWFJvYjJSTWFXNWxZWElnUFNCMmIybGtJREE3Q2t0dUxuQnliM1J2ZEhsd1pTNUpiblJsY25CdmJHRnVkRVpoWTNSdmNubE5aWFJvYjJSVGJXOXZkR2dnUFNCMmIybGtJREE3Q25aaGNpQkRjaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdlblFnZXdwOU93cERjaTV3Y205MGIzUjVjR1V1Vm1Gc2RXVlVlWEJsVG1GdFpTQTlJQ0oyWldOMGIzSWlPd3AyWVhJZ1RISWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwSUQwZ0xURXNJRzRzSUdrZ1BTQjFZU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsSUQwZ1pTd2dkR2hwY3k1MGNtRmphM01nUFNCdUxDQjBhR2x6TG1SMWNtRjBhVzl1SUQwZ2RDd2dkR2hwY3k1aWJHVnVaRTF2WkdVZ1BTQnBMQ0IwYUdsekxuVjFhV1FnUFNCRmRDZ3BMQ0IwYUdsekxtUjFjbUYwYVc5dUlEd2dNQ0FtSmlCMGFHbHpMbkpsYzJWMFJIVnlZWFJwYjI0b0tUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5QndZWEp6WlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmJYU3dnYmlBOUlHVXVkSEpoWTJ0ekxDQnBJRDBnTVNBdklDaGxMbVp3Y3lCOGZDQXhLVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzhnUFNBd0xDQmhJRDBnYmk1c1pXNW5kR2c3SUc4Z0lUMDlJR0U3SUNzcmJ5bDBMbkIxYzJnb1lYa29ibHR2WFNrdWMyTmhiR1VvYVNrcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2JtVjNJSFJvYVhNb1pTNXVZVzFsTENCbExtUjFjbUYwYVc5dUxDQjBMQ0JsTG1Kc1pXNWtUVzlrWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhJdWRYVnBaQ0E5SUdVdWRYVnBaQ3dnY2pzS0lDQWdJSDBLSUNBZ0lITjBZWFJwWXlCMGIwcFRUMDRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1cxMHNJRzRnUFNCbExuUnlZV05yY3l3Z2FTQTlJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nWlM1dVlXMWxMQW9nSUNBZ0lDQWdJQ0FnSUNCa2RYSmhkR2x2YmpvZ1pTNWtkWEpoZEdsdmJpd0tJQ0FnSUNBZ0lDQWdJQ0FnZEhKaFkydHpPaUIwTEFvZ0lDQWdJQ0FnSUNBZ0lDQjFkV2xrT2lCbExuVjFhV1FzQ2lBZ0lDQWdJQ0FnSUNBZ0lHSnNaVzVrVFc5a1pUb2daUzVpYkdWdVpFMXZaR1VLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnY2lBOUlEQXNJRzhnUFNCdUxteGxibWQwYURzZ2NpQWhQVDBnYnpzZ0t5dHlLWFF1Y0hWemFDaDZkQzUwYjBwVFQwNG9ibHR5WFNrcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcE93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklFTnlaV0YwWlVaeWIyMU5iM0p3YUZSaGNtZGxkRk5sY1hWbGJtTmxLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUhRdWJHVnVaM1JvTENCdklEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JoSUQwZ01Ec2dZU0E4SUhJN0lHRXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1cxMHNJR01nUFNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnYkM1d2RYTm9LQ2hoSUNzZ2NpQXRJREVwSUNVZ2Npd2dZU3dnS0dFZ0t5QXhLU0FsSUhJcExDQmpMbkIxYzJnb01Dd2dNU3dnTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb0lEMGdXbVV1WjJWMFMyVjVabkpoYldWUGNtUmxjaWhzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiQ0E5SUZwbExuTnZjblJsWkVGeWNtRjVLR3dzSURFc0lHZ3BMQ0JqSUQwZ1dtVXVjMjl5ZEdWa1FYSnlZWGtvWXl3Z01Td2dhQ2tzSUNGcElDWW1JR3hiTUYwZ1BUMDlJREFnSmlZZ0tHd3VjSFZ6YUNoeUtTd2dZeTV3ZFhOb0tHTmJNRjBwS1N3Z2J5NXdkWE5vS0c1bGR5QkJjaWdpTG0xdmNuQm9WR0Z5WjJWMFNXNW1iSFZsYm1ObGMxc2lJQ3NnZEZ0aFhTNXVZVzFsSUNzZ0lsMGlMQ0JzTENCaktTNXpZMkZzWlNneElDOGdiaWtwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE1vWlN3Z0xURXNJRzhwT3dvZ0lDQWdmUW9nSUNBZ2MzUmhkR2xqSUdacGJtUkNlVTVoYldVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlRzS0lDQWdJQ0FnSUNCcFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb1pTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCbE93b2dJQ0FnSUNBZ0lDQWdJQ0J1SUQwZ2FTNW5aVzl0WlhSeWVTQW1KaUJwTG1kbGIyMWxkSEo1TG1GdWFXMWhkR2x2Ym5NZ2ZId2dhUzVoYm1sdFlYUnBiMjV6T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JpNXNaVzVuZEdnN0lHa3JLeWxwWmlBb2JsdHBYUzV1WVcxbElEMDlQU0IwS1NCeVpYUjFjbTRnYmx0cFhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJEY21WaGRHVkRiR2x3YzBaeWIyMU5iM0p3YUZSaGNtZGxkRk5sY1hWbGJtTmxjeWhsTENCMExDQnVLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHa2dQU0I3ZlN3Z2NpQTlJQzllS0Z0Y2R5MWRLajhwS0Z0Y1pGMHJLU1F2T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWVNBOUlEQXNJR3dnUFNCbExteGxibWQwYURzZ1lTQThJR3c3SUdFckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnWlZ0aFhTd2dhQ0E5SUdNdWJtRnRaUzV0WVhSamFDaHlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2dnSmlZZ2FDNXNaVzVuZEdnZ1BpQXhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RTQTlJR2hiTVYwc0lHUWdQU0JwVzNWZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pDQjhmQ0FvYVZ0MVhTQTlJR1FnUFNCYlhTa3NJR1F1Y0hWemFDaGpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlGdGRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdZU0JwYmlCcEtXOHVjSFZ6YUNoMGFHbHpMa055WldGMFpVWnliMjFOYjNKd2FGUmhjbWRsZEZObGNYVmxibU5sS0dFc0lHbGJZVjBzSUhRc0lHNHBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdienNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJ3WVhKelpVRnVhVzFoZEdsdmJpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLQ0ZsS1NCeVpYUjFjbTRnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVFXNXBiV0YwYVc5dVEyeHBjRG9nVG04Z1lXNXBiV0YwYVc5dUlHbHVJRXBUVDA1TWIyRmtaWElnWkdGMFlTNGlLU3dnYm5Wc2JEc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHWjFibU4wYVc5dUtIVXNJR1FzSUdZc0lHMHNJSGdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dZdWJHVnVaM1JvSUNFOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJRnRkTENCbklEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JhWlM1bWJHRjBkR1Z1U2xOUFRpaG1MQ0IyTENCbkxDQnRLU3dnZGk1c1pXNW5kR2dnSVQwOUlEQWdKaVlnZUM1d2RYTm9LRzVsZHlCMUtHUXNJSFlzSUdjcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwc0lHa2dQU0JiWFN3Z2NpQTlJR1V1Ym1GdFpTQjhmQ0FpWkdWbVlYVnNkQ0lzSUc4Z1BTQmxMbVp3Y3lCOGZDQXpNQ3dnWVNBOUlHVXVZbXhsYm1STmIyUmxMQ0JzSUQwZ1pTNXNaVzVuZEdnZ2ZId2dMVEVzSUdNZ1BTQmxMbWhwWlhKaGNtTm9lU0I4ZkNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElIVWdQU0F3T3lCMUlEd2dZeTVzWlc1bmRHZzdJSFVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdZMXQxWFM1clpYbHpPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9JU2doWkNCOGZDQmtMbXhsYm1kMGFDQTlQVDBnTUNrcElHbG1JQ2hrV3pCZExtMXZjbkJvVkdGeVoyVjBjeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0I3ZlN3Z2JUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWh0SUQwZ01Ec2diU0E4SUdRdWJHVnVaM1JvT3lCdEt5c3BhV1lnS0dSYmJWMHViVzl5Y0doVVlYSm5aWFJ6S1NCbWIzSW9iR1YwSUhnZ1BTQXdPeUI0SUR3Z1pGdHRYUzV0YjNKd2FGUmhjbWRsZEhNdWJHVnVaM1JvT3lCNEt5c3BabHRrVzIxZExtMXZjbkJvVkdGeVoyVjBjMXQ0WFYwZ1BTQXRNVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0JwYmlCbUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJRnRkTENCbklEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCd0lEMGdNRHNnY0NBaFBUMGdaRnR0WFM1dGIzSndhRlJoY21kbGRITXViR1Z1WjNSb095QXJLM0FwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1h5QTlJR1JiYlYwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZdWNIVnphQ2hmTG5ScGJXVXBMQ0JuTG5CMWMyZ29YeTV0YjNKd2FGUmhjbWRsZENBOVBUMGdlQ0EvSURFZ09pQXdLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhUzV3ZFhOb0tHNWxkeUJCY2lnaUxtMXZjbkJvVkdGeVoyVjBTVzVtYkhWbGJtTmxXeUlnS3lCNElDc2dJbDBpTENCMkxDQm5LU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzSUQwZ1ppNXNaVzVuZEdnZ0tpQW9ieUI4ZkNBeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbUlEMGdJaTVpYjI1bGMxc2lJQ3NnZEZ0MVhTNXVZVzFsSUNzZ0lsMGlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiaWhEY2l3Z1ppQXJJQ0l1Y0c5emFYUnBiMjRpTENCa0xDQWljRzl6SWl3Z2FTa3NJRzRvVjJrc0lHWWdLeUFpTG5GMVlYUmxjbTVwYjI0aUxDQmtMQ0FpY205MElpd2dhU2tzSUc0b1EzSXNJR1lnS3lBaUxuTmpZV3hsSWl3Z1pDd2dJbk5qYkNJc0lHa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCcExteGxibWQwYUNBOVBUMGdNQ0EvSUc1MWJHd2dPaUJ1WlhjZ2RHaHBjeWh5TENCc0xDQnBMQ0JoS1RzS0lDQWdJSDBLSUNBZ0lISmxjMlYwUkhWeVlYUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR1VnUFNCMGFHbHpMblJ5WVdOcmN5d2dkQ0E5SURBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlHVXViR1Z1WjNSb095QnVJQ0U5UFNCcE95QXJLMjRwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE11ZEhKaFkydHpXMjVkT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBJRDBnVFdGMGFDNXRZWGdvZEN3Z2NpNTBhVzFsYzF0eUxuUnBiV1Z6TG14bGJtZDBhQ0F0SURGZEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkhWeVlYUnBiMjRnUFNCMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RISnBiU2dwSUhzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdVZ1BTQXdPeUJsSUR3Z2RHaHBjeTUwY21GamEzTXViR1Z1WjNSb095QmxLeXNwZEdocGN5NTBjbUZqYTNOYlpWMHVkSEpwYlNnd0xDQjBhR2x6TG1SMWNtRjBhVzl1S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSFpoYkdsa1lYUmxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnSVRBN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNRHNnZENBOElIUm9hWE11ZEhKaFkydHpMbXhsYm1kMGFEc2dkQ3NyS1dVZ1BTQmxJQ1ltSUhSb2FYTXVkSEpoWTJ0elczUmRMblpoYkdsa1lYUmxLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1U3Q2lBZ0lDQjlDaUFnSUNCdmNIUnBiV2w2WlNncElIc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHVWdQU0F3T3lCbElEd2dkR2hwY3k1MGNtRmphM011YkdWdVozUm9PeUJsS3lzcGRHaHBjeTUwY21GamEzTmJaVjB1YjNCMGFXMXBlbVVvS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdXMTA3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Ec2dkQ0E4SUhSb2FYTXVkSEpoWTJ0ekxteGxibWQwYURzZ2RDc3JLV1V1Y0hWemFDaDBhR2x6TG5SeVlXTnJjMXQwWFM1amJHOXVaU2dwS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lIUm9hWE11WTI5dWMzUnlkV04wYjNJb2RHaHBjeTV1WVcxbExDQjBhR2x6TG1SMWNtRjBhVzl1TENCbExDQjBhR2x6TG1Kc1pXNWtUVzlrWlNrN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdWRHOUtVMDlPS0hSb2FYTXBPd29nSUNBZ2ZRcDlPd3BtZFc1amRHbHZiaUJ2ZVNoektTQjdDaUFnSUNCemQybDBZMmdvY3k1MGIweHZkMlZ5UTJGelpTZ3BLWHNLSUNBZ0lDQWdJQ0JqWVhObElDSnpZMkZzWVhJaU9nb2dJQ0FnSUNBZ0lHTmhjMlVnSW1SdmRXSnNaU0k2Q2lBZ0lDQWdJQ0FnWTJGelpTQWlabXh2WVhRaU9nb2dJQ0FnSUNBZ0lHTmhjMlVnSW01MWJXSmxjaUk2Q2lBZ0lDQWdJQ0FnWTJGelpTQWlhVzUwWldkbGNpSTZDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJCY2pzS0lDQWdJQ0FnSUNCallYTmxJQ0oyWldOMGIzSWlPZ29nSUNBZ0lDQWdJR05oYzJVZ0luWmxZM1J2Y2pJaU9nb2dJQ0FnSUNBZ0lHTmhjMlVnSW5abFkzUnZjak1pT2dvZ0lDQWdJQ0FnSUdOaGMyVWdJblpsWTNSdmNqUWlPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUTNJN0NpQWdJQ0FnSUNBZ1kyRnpaU0FpWTI5c2IzSWlPZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUW1FN0NpQWdJQ0FnSUNBZ1kyRnpaU0FpY1hWaGRHVnlibWx2YmlJNkNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlhhVHNLSUNBZ0lDQWdJQ0JqWVhObElDSmliMjlzSWpvS0lDQWdJQ0FnSUNCallYTmxJQ0ppYjI5c1pXRnVJam9LSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZGdU93b2dJQ0FnSUNBZ0lHTmhjMlVnSW5OMGNtbHVaeUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCTGJqc0tJQ0FnSUgwS0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVMyVjVabkpoYldWVWNtRmphem9nVlc1emRYQndiM0owWldRZ2RIbHdaVTVoYldVNklDSWdLeUJ6S1RzS2ZRcG1kVzVqZEdsdmJpQmhlU2h6S1NCN0NpQWdJQ0JwWmlBb2N5NTBlWEJsSUQwOVBTQjJiMmxrSURBcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnaVZFaFNSVVV1UzJWNVpuSmhiV1ZVY21GamF6b2dkSEpoWTJzZ2RIbHdaU0IxYm1SbFptbHVaV1FzSUdOaGJpQnViM1FnY0dGeWMyVWlLVHNLSUNBZ0lHeGxkQ0JsSUQwZ2Iza29jeTUwZVhCbEtUc0tJQ0FnSUdsbUlDaHpMblJwYldWeklEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRnRkTENCdUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnV21VdVpteGhkSFJsYmtwVFQwNG9jeTVyWlhsekxDQjBMQ0J1TENBaWRtRnNkV1VpS1N3Z2N5NTBhVzFsY3lBOUlIUXNJSE11ZG1Gc2RXVnpJRDBnYmpzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCbExuQmhjbk5sSUNFOVBTQjJiMmxrSURBZ1B5QmxMbkJoY25ObEtITXBJRG9nYm1WM0lHVW9jeTV1WVcxbExDQnpMblJwYldWekxDQnpMblpoYkhWbGN5d2djeTVwYm5SbGNuQnZiR0YwYVc5dUtUc0tmUXAyWVhJZ1Rta2dQU0I3Q2lBZ0lDQmxibUZpYkdWa09pQWhNU3dLSUNBZ0lHWnBiR1Z6T2lCN2ZTd0tJQ0FnSUdGa1pEb2dablZ1WTNScGIyNG9jeXdnWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11Wlc1aFlteGxaQ0FoUFQwZ0lURWdKaVlnS0hSb2FYTXVabWxzWlhOYmMxMGdQU0JsS1RzS0lDQWdJSDBzQ2lBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWxibUZpYkdWa0lDRTlQU0FoTVNrZ2NtVjBkWEp1SUhSb2FYTXVabWxzWlhOYmMxMDdDaUFnSUNCOUxBb2dJQ0FnY21WdGIzWmxPaUJtZFc1amRHbHZiaWh6S1NCN0NpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVabWxzWlhOYmMxMDdDaUFnSUNCOUxBb2dJQ0FnWTJ4bFlYSTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVabWxzWlhNZ1BTQjdmVHNLSUNBZ0lIMEtmU3dnZW1FZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBMQ0J1S1hzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXNJSElnUFNBaE1Td2dieUE5SURBc0lHRWdQU0F3TENCc0xDQmpJRDBnVzEwN0NpQWdJQ0FnSUNBZ2RHaHBjeTV2YmxOMFlYSjBJRDBnZG05cFpDQXdMQ0IwYUdsekxtOXVURzloWkNBOUlHVXNJSFJvYVhNdWIyNVFjbTluY21WemN5QTlJSFFzSUhSb2FYTXViMjVGY25KdmNpQTlJRzRzSUhSb2FYTXVhWFJsYlZOMFlYSjBJRDBnWm5WdVkzUnBiMjRvYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JoS3lzc0lISWdQVDA5SUNFeElDWW1JR2t1YjI1VGRHRnlkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlHa3ViMjVUZEdGeWRDaG9MQ0J2TENCaEtTd2djaUE5SUNFd093b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWFYUmxiVVZ1WkNBOUlHWjFibU4wYVc5dUtHZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2J5c3JMQ0JwTG05dVVISnZaM0psYzNNZ0lUMDlJSFp2YVdRZ01DQW1KaUJwTG05dVVISnZaM0psYzNNb2FDd2dieXdnWVNrc0lHOGdQVDA5SUdFZ0ppWWdLSElnUFNBaE1Td2dhUzV2Ymt4dllXUWdJVDA5SUhadmFXUWdNQ0FtSmlCcExtOXVURzloWkNncEtUc0tJQ0FnSUNBZ0lDQjlMQ0IwYUdsekxtbDBaVzFGY25KdmNpQTlJR1oxYm1OMGFXOXVLR2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhUzV2YmtWeWNtOXlJQ0U5UFNCMmIybGtJREFnSmlZZ2FTNXZia1Z5Y205eUtHZ3BPd29nSUNBZ0lDQWdJSDBzSUhSb2FYTXVjbVZ6YjJ4MlpWVlNUQ0E5SUdaMWJtTjBhVzl1S0dncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR3dnUHlCc0tHZ3BJRG9nYURzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG5ObGRGVlNURTF2WkdsbWFXVnlJRDBnWm5WdVkzUnBiMjRvYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiQ0E5SUdnc0lIUm9hWE03Q2lBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVoWkdSSVlXNWtiR1Z5SUQwZ1puVnVZM1JwYjI0b2FDd2dkU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1l5NXdkWE5vS0dnc0lIVXBMQ0IwYUdsek93b2dJQ0FnSUNBZ0lIMHNJSFJvYVhNdWNtVnRiM1psU0dGdVpHeGxjaUE5SUdaMWJtTjBhVzl1S0dncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0JqTG1sdVpHVjRUMllvYUNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFJQ0U5UFNBdE1TQW1KaUJqTG5Od2JHbGpaU2gxTENBeUtTd2dkR2hwY3pzS0lDQWdJQ0FnSUNCOUxDQjBhR2x6TG1kbGRFaGhibVJzWlhJZ1BTQm1kVzVqZEdsdmJpaG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RTQTlJREFzSUdRZ1BTQmpMbXhsYm1kMGFEc2dkU0E4SUdRN0lIVWdLejBnTWlsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaaUE5SUdOYmRWMHNJRzBnUFNCalczVWdLeUF4WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1MbWRzYjJKaGJDQW1KaUFvWmk1c1lYTjBTVzVrWlhnZ1BTQXdLU3dnWmk1MFpYTjBLR2dwS1NCeVpYUjFjbTRnYlRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUNBZ0lDQjlPd29nSUNBZ2ZRcDlMQ0JzZVNBOUlHNWxkeUI2WVN3Z1luUWdQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWhibUZuWlhJZ1BTQmxJQ0U5UFNCMmIybGtJREFnUHlCbElEb2diSGtzSUhSb2FYTXVZM0p2YzNOUGNtbG5hVzRnUFNBaVlXNXZibmx0YjNWeklpd2dkR2hwY3k1M2FYUm9RM0psWkdWdWRHbGhiSE1nUFNBaE1Td2dkR2hwY3k1d1lYUm9JRDBnSWlJc0lIUm9hWE11Y21WemIzVnlZMlZRWVhSb0lEMGdJaUlzSUhSb2FYTXVjbVZ4ZFdWemRFaGxZV1JsY2lBOUlIdDlPd29nSUNBZ2ZRb2dJQ0FnYkc5aFpDZ3BJSHQ5Q2lBZ0lDQnNiMkZrUVhONWJtTW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjenNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvYVN3Z2Npa2dld29nSUNBZ0lDQWdJQ0FnSUNCdUxteHZZV1FvWlN3Z2FTd2dkQ3dnY2lrN0NpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNCOUNpQWdJQ0J3WVhKelpTZ3BJSHQ5Q2lBZ0lDQnpaWFJEY205emMwOXlhV2RwYmlobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKdmMzTlBjbWxuYVc0Z1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVjJsMGFFTnlaV1JsYm5ScFlXeHpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTNhWFJvUTNKbFpHVnVkR2xoYkhNZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVUdGMGFDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHRjBhQ0E5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUlNaWE52ZFhKalpWQmhkR2dvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYzI5MWNtTmxVR0YwYUNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYRjFaWE4wU0dWaFpHVnlJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnZEc0Z1BTQjdmU3dnV1hRZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUdKMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXBld29nSUNBZ0lDQWdJSE4xY0dWeUtHVXBPd29nSUNBZ2ZRb2dJQ0FnYkc5aFpDaGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnWlNBOVBUMGdkbTlwWkNBd0lDWW1JQ2hsSUQwZ0lpSXBMQ0IwYUdsekxuQmhkR2dnSVQwOUlIWnZhV1FnTUNBbUppQW9aU0E5SUhSb2FYTXVjR0YwYUNBcklHVXBMQ0JsSUQwZ2RHaHBjeTV0WVc1aFoyVnlMbkpsYzI5c2RtVlZVa3dvWlNrN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCT2FTNW5aWFFvWlNrN0NpQWdJQ0FnSUNBZ2FXWWdLSElnSVQwOUlIWnZhV1FnTUNrZ2NtVjBkWEp1SUhSb2FYTXViV0Z1WVdkbGNpNXBkR1Z0VTNSaGNuUW9aU2tzSUhObGRGUnBiV1Z2ZFhRb0tDazlQbnNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQW1KaUIwS0hJcExDQjBhR2x6TG0xaGJtRm5aWEl1YVhSbGJVVnVaQ2hsS1RzS0lDQWdJQ0FnSUNCOUxDQXdLU3dnY2pzS0lDQWdJQ0FnSUNCcFppQW9kRzViWlYwZ0lUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCMGJsdGxYUzV3ZFhOb0tIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVURzloWkRvZ2RDd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVVSEp2WjNKbGMzTTZJRzRzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2YmtWeWNtOXlPaUJwQ2lBZ0lDQWdJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhSdVcyVmRJRDBnVzEwc0lIUnVXMlZkTG5CMWMyZ29ld29nSUNBZ0lDQWdJQ0FnSUNCdmJreHZZV1E2SUhRc0NpQWdJQ0FnSUNBZ0lDQWdJRzl1VUhKdlozSmxjM002SUc0c0NpQWdJQ0FnSUNBZ0lDQWdJRzl1UlhKeWIzSTZJR2tLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNCc1pYUWdieUE5SUc1bGR5QlNaWEYxWlhOMEtHVXNJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FHVmhaR1Z5Y3pvZ2JtVjNJRWhsWVdSbGNuTW9kR2hwY3k1eVpYRjFaWE4wU0dWaFpHVnlLU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kzSmxaR1Z1ZEdsaGJITTZJSFJvYVhNdWQybDBhRU55WldSbGJuUnBZV3h6SUQ4Z0ltbHVZMngxWkdVaUlEb2dJbk5oYldVdGIzSnBaMmx1SWdvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHWmxkR05vS0c4cExuUm9aVzRvS0dFcFBUNTdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhMbk4wWVhSMWN5QTlQVDBnTWpBd0lIeDhJR0V1YzNSaGRIVnpJRDA5UFNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVM1emRHRjBkWE1nUFQwOUlEQWdKaVlnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1R2FXeGxURzloWkdWeU9pQklWRlJRSUZOMFlYUjFjeUF3SUhKbFkyVnBkbVZrTGlJcExDQjBlWEJsYjJZZ1VtVmhaR0ZpYkdWVGRISmxZVzBnUGlBaWRTSWdmSHdnWVM1aWIyUjVMbWRsZEZKbFlXUmxjaUE5UFQwZ2RtOXBaQ0F3S1NCeVpYUjFjbTRnWVRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnNJRDBnZEc1YlpWMHNJR01nUFNCaExtSnZaSGt1WjJWMFVtVmhaR1Z5S0Nrc0lHZ2dQU0JoTG1obFlXUmxjbk11WjJWMEtDSkRiMjUwWlc1MExVeGxibWQwYUNJcExDQjFJRDBnYUNBL0lIQmhjbk5sU1c1MEtHZ3BJRG9nTUN3Z1pDQTlJSFVnSVQwOUlEQXNJR1lnUFNBd0xDQnRJRDBnYm1WM0lGSmxZV1JoWW14bFUzUnlaV0Z0S0hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZENBb2VDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFlvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpMbkpsWVdRb0tTNTBhR1Z1S0NoN0lHUnZibVU2SUdjZ0xDQjJZV3gxWlRvZ2NDQWdmU2s5UG5zS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1p5a2dlQzVqYkc5elpTZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbUlDczlJSEF1WW5sMFpVeGxibWQwYURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRjhnUFNCdVpYY2dVSEp2WjNKbGMzTkZkbVZ1ZENnaWNISnZaM0psYzNNaUxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXNW5kR2hEYjIxd2RYUmhZbXhsT2lCa0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5aFpHVmtPaUJtTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzkwWVd3NklIVUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZVNBOUlEQXNJR0lnUFNCc0xteGxibWQwYURzZ2VTQThJR0k3SUhrckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdRU0E5SUd4YmVWMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCQkxtOXVVSEp2WjNKbGMzTWdKaVlnUVM1dmJsQnliMmR5WlhOektGOHBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhndVpXNXhkV1YxWlNod0tTd2dkaWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZKbGMzQnZibk5sS0cwcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdkR2h5YjNjZ1JYSnliM0lvWUdabGRHTm9JR1p2Y2lBaUpIdGhMblZ5YkgwaUlISmxjM0J2Ym1SbFpDQjNhWFJvSUNSN1lTNXpkR0YwZFhOOU9pQWtlMkV1YzNSaGRIVnpWR1Y0ZEgxZ0tUc0tJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtDaGhLVDArZXdvZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnb2RHaHBjeTV5WlhOd2IyNXpaVlI1Y0dVcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpWVhKeVlYbGlkV1ptWlhJaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhMbUZ5Y21GNVFuVm1abVZ5S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0ppYkc5aUlqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZUzVpYkc5aUtDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKa2IyTjFiV1Z1ZENJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRXVkR1Y0ZENncExuUm9aVzRvS0d3cFBUNXVaWGNnUkU5TlVHRnljMlZ5S0NrdWNHRnljMlZHY205dFUzUnlhVzVuS0d3c0lIUm9hWE11YldsdFpWUjVjR1VwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbXB6YjI0aU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhMbXB6YjI0b0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRXVkR1Y0ZENncE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZlNrdWRHaGxiaWdvWVNrOVBuc0tJQ0FnSUNBZ0lDQWdJQ0FnVG1rdVlXUmtLR1VzSUdFcE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJSFJ1VzJWZE93b2dJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkRzViWlYwN0NpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdZeUE5SURBc0lHZ2dQU0JzTG14bGJtZDBhRHNnWXlBOElHZzdJR01yS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkU0E5SUd4YlkxMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFMbTl1VEc5aFpDQW1KaUIxTG05dVRHOWhaQ2hoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBwTG1OaGRHTm9LQ2hoS1QwK2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJSFJ1VzJWZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JDQTlQVDBnZG05cFpDQXdLU0IwYUhKdmR5QjBhR2x6TG0xaGJtRm5aWEl1YVhSbGJVVnljbTl5S0dVcExDQmhPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnZEc1YlpWMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnWXlBOUlEQXNJR2dnUFNCc0xteGxibWQwYURzZ1l5QThJR2c3SUdNckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlHeGJZMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxTG05dVJYSnliM0lnSmlZZ2RTNXZia1Z5Y205eUtHRXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRnVZV2RsY2k1cGRHVnRSWEp5YjNJb1pTazdDaUFnSUNBZ0lDQWdmU2t1Wm1sdVlXeHNlU2dvS1QwK2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMWhibUZuWlhJdWFYUmxiVVZ1WkNobEtUc0tJQ0FnSUNBZ0lDQjlLU3dnZEdocGN5NXRZVzVoWjJWeUxtbDBaVzFUZEdGeWRDaGxLVHNLSUNBZ0lIMEtJQ0FnSUhObGRGSmxjM0J2Ym5ObFZIbHdaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ6Y0c5dWMyVlVlWEJsSUQwZ1pTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRTFwYldWVWVYQmxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzFsVkhsd1pTQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNuMHNJR041SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJpZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobEtUc0tJQ0FnSUgwS0lDQWdJR3h2WVdRb1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ0lDQWdJR3hsZENCeUlEMGdkR2hwY3l3Z2J5QTlJRzVsZHlCWmRDaDBhR2x6TG0xaGJtRm5aWElwT3dvZ0lDQWdJQ0FnSUc4dWMyVjBVR0YwYUNoMGFHbHpMbkJoZEdncExDQnZMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9kR2hwY3k1eVpYRjFaWE4wU0dWaFpHVnlLU3dnYnk1elpYUlhhWFJvUTNKbFpHVnVkR2xoYkhNb2RHaHBjeTUzYVhSb1EzSmxaR1Z1ZEdsaGJITXBMQ0J2TG14dllXUW9aU3dnWm5WdVkzUnBiMjRvWVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDaHlMbkJoY25ObEtFcFRUMDR1Y0dGeWMyVW9ZU2twS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9iQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNBL0lHa29iQ2tnT2lCamIyNXpiMnhsTG1WeWNtOXlLR3dwTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ5Y205eUtHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd2diaXdnYVNrN0NpQWdJQ0I5Q2lBZ0lDQndZWEp6WlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmJYVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd095QnVJRHdnWlM1c1pXNW5kR2c3SUc0ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnVEhJdWNHRnljMlVvWlZ0dVhTazdDaUFnSUNBZ0lDQWdJQ0FnSUhRdWNIVnphQ2hwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRN0NpQWdJQ0I5Q24wc0lHaDVJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsS1RzS0lDQWdJSDBLSUNBZ0lHeHZZV1FvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeXdnYnlBOUlGdGRMQ0JoSUQwZ2JtVjNJSFpoTENCc0lEMGdibVYzSUZsMEtIUm9hWE11YldGdVlXZGxjaWs3Q2lBZ0lDQWdJQ0FnYkM1elpYUlFZWFJvS0hSb2FYTXVjR0YwYUNrc0lHd3VjMlYwVW1WemNHOXVjMlZVZVhCbEtDSmhjbkpoZVdKMVptWmxjaUlwTENCc0xuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb2RHaHBjeTV5WlhGMVpYTjBTR1ZoWkdWeUtTd2diQzV6WlhSWGFYUm9RM0psWkdWdWRHbGhiSE1vY2k1M2FYUm9RM0psWkdWdWRHbGhiSE1wT3dvZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnTURzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCb0tIVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JDNXNiMkZrS0dWYmRWMHNJR1oxYm1OMGFXOXVLR1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnY2k1d1lYSnpaU2hrTENBaE1DazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZXM1ZkSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQm1MbmRwWkhSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2daaTVvWldsbmFIUXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJXRjBPaUJtTG1admNtMWhkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGFYQnRZWEJ6T2lCbUxtMXBjRzFoY0hNS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lHTWdLejBnTVN3Z1l5QTlQVDBnTmlBbUppQW9aaTV0YVhCdFlYQkRiM1Z1ZENBOVBUMGdNU0FtSmlBb1lTNXRhVzVHYVd4MFpYSWdQU0IwZENrc0lHRXVhVzFoWjJVZ1BTQnZMQ0JoTG1admNtMWhkQ0E5SUdZdVptOXliV0YwTENCaExtNWxaV1J6VlhCa1lYUmxJRDBnSVRBc0lIUWdKaVlnZENoaEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwc0lHNHNJR2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNobEtTa2dabTl5S0d4bGRDQjFJRDBnTUN3Z1pDQTlJR1V1YkdWdVozUm9PeUIxSUR3Z1pEc2dLeXQxS1dnb2RTazdDaUFnSUNBZ0lDQWdaV3h6WlNCc0xteHZZV1FvWlN3Z1puVnVZM1JwYjI0b2RTa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaQ0E5SUhJdWNHRnljMlVvZFN3Z0lUQXBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9aQzVwYzBOMVltVnRZWEFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnWkM1dGFYQnRZWEJ6TG14bGJtZDBhQ0F2SUdRdWJXbHdiV0Z3UTI5MWJuUTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHMGdQU0F3T3lCdElEd2daanNnYlNzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2VzIxZElEMGdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhWEJ0WVhCek9pQmJYUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjRJRDBnTURzZ2VDQThJR1F1Yldsd2JXRndRMjkxYm5RN0lIZ3JLeWx2VzIxZExtMXBjRzFoY0hNdWNIVnphQ2hrTG0xcGNHMWhjSE5iYlNBcUlHUXViV2x3YldGd1EyOTFiblFnS3lCNFhTa3NJRzliYlYwdVptOXliV0YwSUQwZ1pDNW1iM0p0WVhRc0lHOWJiVjB1ZDJsa2RHZ2dQU0JrTG5kcFpIUm9MQ0J2VzIxZExtaGxhV2RvZENBOUlHUXVhR1ZwWjJoME93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTNXBiV0ZuWlNBOUlHODdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JoTG1sdFlXZGxMbmRwWkhSb0lEMGdaQzUzYVdSMGFDd2dZUzVwYldGblpTNW9aV2xuYUhRZ1BTQmtMbWhsYVdkb2RDd2dZUzV0YVhCdFlYQnpJRDBnWkM1dGFYQnRZWEJ6T3dvZ0lDQWdJQ0FnSUNBZ0lDQmtMbTFwY0cxaGNFTnZkVzUwSUQwOVBTQXhJQ1ltSUNoaExtMXBia1pwYkhSbGNpQTlJSFIwS1N3Z1lTNW1iM0p0WVhRZ1BTQmtMbVp2Y20xaGRDd2dZUzV1WldWa2MxVndaR0YwWlNBOUlDRXdMQ0IwSUNZbUlIUW9ZU2s3Q2lBZ0lDQWdJQ0FnZlN3Z2Jpd2dhU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR0U3Q2lBZ0lDQjlDbjBzSUZKeUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCaWRDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxLVHNLSUNBZ0lIMEtJQ0FnSUd4dllXUW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hsSUQwZ2RHaHBjeTV3WVhSb0lDc2daU2tzSUdVZ1BTQjBhR2x6TG0xaGJtRm5aWEl1Y21WemIyeDJaVlZTVENobEtUc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE1zSUc4Z1BTQk9hUzVuWlhRb1pTazdDaUFnSUNBZ0lDQWdhV1lnS0c4Z0lUMDlJSFp2YVdRZ01Da2djbVYwZFhKdUlISXViV0Z1WVdkbGNpNXBkR1Z0VTNSaGNuUW9aU2tzSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhRZ0ppWWdkQ2h2S1N3Z2NpNXRZVzVoWjJWeUxtbDBaVzFGYm1Rb1pTazdDaUFnSUNBZ0lDQWdmU3dnTUNrc0lHODdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQnhjeWdpYVcxbklpazdDaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdiQ2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhQ2dwTENCT2FTNWhaR1FvWlN3Z2RHaHBjeWtzSUhRZ0ppWWdkQ2gwYUdsektTd2djaTV0WVc1aFoyVnlMbWwwWlcxRmJtUW9aU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdNb2RTa2dld29nSUNBZ0lDQWdJQ0FnSUNCb0tDa3NJR2tnSmlZZ2FTaDFLU3dnY2k1dFlXNWhaMlZ5TG1sMFpXMUZjbkp2Y2lobEtTd2djaTV0WVc1aFoyVnlMbWwwWlcxRmJtUW9aU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdnb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdFdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2liRzloWkNJc0lHd3NJQ0V4S1N3Z1lTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ0psY25KdmNpSXNJR01zSUNFeEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2liRzloWkNJc0lHd3NJQ0V4S1N3Z1lTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSmxjbkp2Y2lJc0lHTXNJQ0V4S1N3Z1pTNXpkV0p6ZEhJb01Dd2dOU2tnSVQwOUlDSmtZWFJoT2lJZ0ppWWdkR2hwY3k1amNtOXpjMDl5YVdkcGJpQWhQVDBnZG05cFpDQXdJQ1ltSUNoaExtTnliM056VDNKcFoybHVJRDBnZEdocGN5NWpjbTl6YzA5eWFXZHBiaWtzSUhJdWJXRnVZV2RsY2k1cGRHVnRVM1JoY25Rb1pTa3NJR0V1YzNKaklEMGdaU3dnWVRzS0lDQWdJSDBLZlN3Z1JtZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklHSjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VwT3dvZ0lDQWdmUW9nSUNBZ2JHOWhaQ2hsTENCMExDQnVMQ0JwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCdVpYY2dhMmtzSUc4Z1BTQnVaWGNnVW5Jb2RHaHBjeTV0WVc1aFoyVnlLVHNLSUNBZ0lDQWdJQ0J2TG5ObGRFTnliM056VDNKcFoybHVLSFJvYVhNdVkzSnZjM05QY21sbmFXNHBMQ0J2TG5ObGRGQmhkR2dvZEdocGN5NXdZWFJvS1RzS0lDQWdJQ0FnSUNCc1pYUWdZU0E5SURBN0NpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2JDaGpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHOHViRzloWkNobFcyTmRMQ0JtZFc1amRHbHZiaWhvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUxtbHRZV2RsYzF0alhTQTlJR2dzSUdFckt5d2dZU0E5UFQwZ05pQW1KaUFvY2k1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMElDWW1JSFFvY2lrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5TENCMmIybGtJREFzSUdrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHTWdQU0F3T3lCaklEd2daUzVzWlc1bmRHZzdJQ3NyWXlsc0tHTXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnlPd29nSUNBZ2ZRcDlMQ0JPYUNBOUlHTnNZWE56SUdWNGRHVnVaSE1nWW5RZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb1pTazdDaUFnSUNCOUNpQWdJQ0JzYjJGa0tHVXNJSFFzSUc0c0lHa3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJvYVhNc0lHOGdQU0J1WlhjZ2NXNHNJR0VnUFNCdVpYY2dXWFFvZEdocGN5NXRZVzVoWjJWeUtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1lTNXpaWFJTWlhOd2IyNXpaVlI1Y0dVb0ltRnljbUY1WW5WbVptVnlJaWtzSUdFdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loMGFHbHpMbkpsY1hWbGMzUklaV0ZrWlhJcExDQmhMbk5sZEZCaGRHZ29kR2hwY3k1d1lYUm9LU3dnWVM1elpYUlhhWFJvUTNKbFpHVnVkR2xoYkhNb2NpNTNhWFJvUTNKbFpHVnVkR2xoYkhNcExDQmhMbXh2WVdRb1pTd2dablZ1WTNScGIyNG9iQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlISXVjR0Z5YzJVb2JDazdDaUFnSUNBZ0lDQWdJQ0FnSUNGaklIeDhJQ2hqTG1sdFlXZGxJQ0U5UFNCMmIybGtJREFnUHlCdkxtbHRZV2RsSUQwZ1l5NXBiV0ZuWlNBNklHTXVaR0YwWVNBaFBUMGdkbTlwWkNBd0lDWW1JQ2h2TG1sdFlXZGxMbmRwWkhSb0lEMGdZeTUzYVdSMGFDd2dieTVwYldGblpTNW9aV2xuYUhRZ1BTQmpMbWhsYVdkb2RDd2dieTVwYldGblpTNWtZWFJoSUQwZ1l5NWtZWFJoS1N3Z2J5NTNjbUZ3VXlBOUlHTXVkM0poY0ZNZ0lUMDlJSFp2YVdRZ01DQS9JR011ZDNKaGNGTWdPaUIyZEN3Z2J5NTNjbUZ3VkNBOUlHTXVkM0poY0ZRZ0lUMDlJSFp2YVdRZ01DQS9JR011ZDNKaGNGUWdPaUIyZEN3Z2J5NXRZV2RHYVd4MFpYSWdQU0JqTG0xaFowWnBiSFJsY2lBaFBUMGdkbTlwWkNBd0lEOGdZeTV0WVdkR2FXeDBaWElnT2lCMGRDd2dieTV0YVc1R2FXeDBaWElnUFNCakxtMXBia1pwYkhSbGNpQWhQVDBnZG05cFpDQXdJRDhnWXk1dGFXNUdhV3gwWlhJZ09pQjBkQ3dnYnk1aGJtbHpiM1J5YjNCNUlEMGdZeTVoYm1semIzUnliM0I1SUNFOVBTQjJiMmxrSURBZ1B5QmpMbUZ1YVhOdmRISnZjSGtnT2lBeExDQmpMbVZ1WTI5a2FXNW5JQ0U5UFNCMmIybGtJREFnSmlZZ0tHOHVaVzVqYjJScGJtY2dQU0JqTG1WdVkyOWthVzVuS1N3Z1l5NW1iR2x3V1NBaFBUMGdkbTlwWkNBd0lDWW1JQ2h2TG1ac2FYQlpJRDBnWXk1bWJHbHdXU2tzSUdNdVptOXliV0YwSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1Wm05eWJXRjBJRDBnWXk1bWIzSnRZWFFwTENCakxuUjVjR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9ieTUwZVhCbElEMGdZeTUwZVhCbEtTd2dZeTV0YVhCdFlYQnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHOHViV2x3YldGd2N5QTlJR011Yldsd2JXRndjeXdnYnk1dGFXNUdhV3gwWlhJZ1BTQlZhU2tzSUdNdWJXbHdiV0Z3UTI5MWJuUWdQVDA5SURFZ0ppWWdLRzh1YldsdVJtbHNkR1Z5SUQwZ2RIUXBMQ0JqTG1kbGJtVnlZWFJsVFdsd2JXRndjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHZMbWRsYm1WeVlYUmxUV2x3YldGd2N5QTlJR011WjJWdVpYSmhkR1ZOYVhCdFlYQnpLU3dnYnk1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3TENCMElDWW1JSFFvYnl3Z1l5a3BPd29nSUNBZ0lDQWdJSDBzSUc0c0lHa3BMQ0J2T3dvZ0lDQWdmUXA5TENCQ2FDQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1luUWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU2s3Q2lBZ0lDQjlDaUFnSUNCc2IyRmtLR1VzSUhRc0lHNHNJR2twSUhzS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUc1bGR5QnZkQ3dnYnlBOUlHNWxkeUJTY2loMGFHbHpMbTFoYm1GblpYSXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnZMbk5sZEVOeWIzTnpUM0pwWjJsdUtIUm9hWE11WTNKdmMzTlBjbWxuYVc0cExDQnZMbk5sZEZCaGRHZ29kR2hwY3k1d1lYUm9LU3dnYnk1c2IyRmtLR1VzSUdaMWJtTjBhVzl1S0dFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY2k1cGJXRm5aU0E5SUdFc0lISXVibVZsWkhOVmNHUmhkR1VnUFNBaE1Dd2dkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlIUW9jaWs3Q2lBZ0lDQWdJQ0FnZlN3Z2Jpd2dhU2tzSUhJN0NpQWdJQ0I5Q24wc0lFSjBJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5Qk9aU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMElEMGdNU2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9LVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVRHbG5hSFFpTENCMGFHbHpMbU52Ykc5eUlEMGdibVYzSUdGbEtHVXBMQ0IwYUdsekxtbHVkR1Z1YzJsMGVTQTlJSFE3Q2lBZ0lDQjlDaUFnSUNCa2FYTndiM05sS0NrZ2UzMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG1OdmJHOXlMbU52Y0hrb1pTNWpiMnh2Y2lrc0lIUm9hWE11YVc1MFpXNXphWFI1SUQwZ1pTNXBiblJsYm5OcGRIa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdjM1Z3WlhJdWRHOUtVMDlPS0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtOWlhbVZqZEM1amIyeHZjaUE5SUhSb2FYTXVZMjlzYjNJdVoyVjBTR1Y0S0Nrc0lIUXViMkpxWldOMExtbHVkR1Z1YzJsMGVTQTlJSFJvYVhNdWFXNTBaVzV6YVhSNUxDQjBhR2x6TG1keWIzVnVaRU52Ykc5eUlDRTlQU0IyYjJsa0lEQWdKaVlnS0hRdWIySnFaV04wTG1keWIzVnVaRU52Ykc5eUlEMGdkR2hwY3k1bmNtOTFibVJEYjJ4dmNpNW5aWFJJWlhnb0tTa3NJSFJvYVhNdVpHbHpkR0Z1WTJVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvZEM1dlltcGxZM1F1WkdsemRHRnVZMlVnUFNCMGFHbHpMbVJwYzNSaGJtTmxLU3dnZEdocGN5NWhibWRzWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2gwTG05aWFtVmpkQzVoYm1kc1pTQTlJSFJvYVhNdVlXNW5iR1VwTENCMGFHbHpMbVJsWTJGNUlDRTlQU0IyYjJsa0lEQWdKaVlnS0hRdWIySnFaV04wTG1SbFkyRjVJRDBnZEdocGN5NWtaV05oZVNrc0lIUm9hWE11Y0dWdWRXMWljbUVnSVQwOUlIWnZhV1FnTUNBbUppQW9kQzV2WW1wbFkzUXVjR1Z1ZFcxaWNtRWdQU0IwYUdsekxuQmxiblZ0WW5KaEtTd2dkR2hwY3k1emFHRmtiM2NnSVQwOUlIWnZhV1FnTUNBbUppQW9kQzV2WW1wbFkzUXVjMmhoWkc5M0lEMGdkR2hwY3k1emFHRmtiM2N1ZEc5S1UwOU9LQ2twTENCME93b2dJQ0FnZlFwOU93cENkQzV3Y205MGIzUjVjR1V1YVhOTWFXZG9kQ0E5SUNFd093cDJZWElnVldFZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUVKMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lHNHBPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKSVpXMXBjM0JvWlhKbFRHbG5hSFFpTENCMGFHbHpMbkJ2YzJsMGFXOXVMbU52Y0hrb1RtVXVSR1ZtWVhWc2RGVndLU3dnZEdocGN5NTFjR1JoZEdWTllYUnlhWGdvS1N3Z2RHaHBjeTVuY205MWJtUkRiMnh2Y2lBOUlHNWxkeUJoWlNoMEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQkNkQzV3Y205MGIzUjVjR1V1WTI5d2VTNWpZV3hzS0hSb2FYTXNJR1VwTENCMGFHbHpMbWR5YjNWdVpFTnZiRzl5TG1OdmNIa29aUzVuY205MWJtUkRiMnh2Y2lrc0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q2xWaExuQnliM1J2ZEhsd1pTNXBjMGhsYldsemNHaGxjbVZNYVdkb2RDQTlJQ0V3T3dwMllYSWdYMk1nUFNCdVpYY2djR1VzSUUxaklEMGdibVYzSUUwc0lHSmpJRDBnYm1WM0lFMHNJRzF2SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqWVcxbGNtRWdQU0JsTENCMGFHbHpMbUpwWVhNZ1BTQXdMQ0IwYUdsekxtNXZjbTFoYkVKcFlYTWdQU0F3TENCMGFHbHpMbkpoWkdsMWN5QTlJREVzSUhSb2FYTXVZbXgxY2xOaGJYQnNaWE1nUFNBNExDQjBhR2x6TG0xaGNGTnBlbVVnUFNCdVpYY2dXQ2cxTVRJc0lEVXhNaWtzSUhSb2FYTXViV0Z3SUQwZ2JuVnNiQ3dnZEdocGN5NXRZWEJRWVhOeklEMGdiblZzYkN3Z2RHaHBjeTV0WVhSeWFYZ2dQU0J1WlhjZ2NHVXNJSFJvYVhNdVlYVjBiMVZ3WkdGMFpTQTlJQ0V3TENCMGFHbHpMbTVsWldSelZYQmtZWFJsSUQwZ0lURXNJSFJvYVhNdVgyWnlkWE4wZFcwZ1BTQnVaWGNnUkhJc0lIUm9hWE11WDJaeVlXMWxSWGgwWlc1MGN5QTlJRzVsZHlCWUtERXNJREVwTENCMGFHbHpMbDkyYVdWM2NHOXlkRU52ZFc1MElEMGdNU3dnZEdocGN5NWZkbWxsZDNCdmNuUnpJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVm1Vb01Dd2dNQ3dnTVN3Z01Ta0tJQ0FnSUNBZ0lDQmRPd29nSUNBZ2ZRb2dJQ0FnWjJWMFZtbGxkM0J2Y25SRGIzVnVkQ2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkbWxsZDNCdmNuUkRiM1Z1ZERzS0lDQWdJSDBLSUNBZ0lHZGxkRVp5ZFhOMGRXMG9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyWnlkWE4wZFcwN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdWTllYUnlhV05sY3lobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1OaGJXVnlZU3dnYmlBOUlIUm9hWE11YldGMGNtbDRPd29nSUNBZ0lDQWdJRTFqTG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaGxMbTFoZEhKcGVGZHZjbXhrS1N3Z2RDNXdiM05wZEdsdmJpNWpiM0I1S0UxaktTd2dZbU11YzJWMFJuSnZiVTFoZEhKcGVGQnZjMmwwYVc5dUtHVXVkR0Z5WjJWMExtMWhkSEpwZUZkdmNteGtLU3dnZEM1c2IyOXJRWFFvWW1NcExDQjBMblZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLQ2tzSUY5akxtMTFiSFJwY0d4NVRXRjBjbWxqWlhNb2RDNXdjbTlxWldOMGFXOXVUV0YwY21sNExDQjBMbTFoZEhKcGVGZHZjbXhrU1c1MlpYSnpaU2tzSUhSb2FYTXVYMlp5ZFhOMGRXMHVjMlYwUm5KdmJWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb1gyTXBMQ0J1TG5ObGRDZ3VOU3dnTUN3Z01Dd2dMalVzSURBc0lDNDFMQ0F3TENBdU5Td2dNQ3dnTUN3Z0xqVXNJQzQxTENBd0xDQXdMQ0F3TENBeEtTd2diaTV0ZFd4MGFYQnNlU2gwTG5CeWIycGxZM1JwYjI1TllYUnlhWGdwTENCdUxtMTFiSFJwY0d4NUtIUXViV0YwY21sNFYyOXliR1JKYm5abGNuTmxLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGWnBaWGR3YjNKMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRtbGxkM0J2Y25SelcyVmRPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJuSmhiV1ZGZUhSbGJuUnpLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW1jbUZ0WlVWNGRHVnVkSE03Q2lBZ0lDQjlDaUFnSUNCa2FYTndiM05sS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YldGd0lDWW1JSFJvYVhNdWJXRndMbVJwYzNCdmMyVW9LU3dnZEdocGN5NXRZWEJRWVhOeklDWW1JSFJvYVhNdWJXRndVR0Z6Y3k1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqWVcxbGNtRWdQU0JsTG1OaGJXVnlZUzVqYkc5dVpTZ3BMQ0IwYUdsekxtSnBZWE1nUFNCbExtSnBZWE1zSUhSb2FYTXVjbUZrYVhWeklEMGdaUzV5WVdScGRYTXNJSFJvYVhNdWJXRndVMmw2WlM1amIzQjVLR1V1YldGd1UybDZaU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JqYkc5dVpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvS1M1amIzQjVLSFJvYVhNcE93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tDa2dld29nSUNBZ0lDQWdJR3hsZENCbElEMGdlMzA3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVltbGhjeUFoUFQwZ01DQW1KaUFvWlM1aWFXRnpJRDBnZEdocGN5NWlhV0Z6S1N3Z2RHaHBjeTV1YjNKdFlXeENhV0Z6SUNFOVBTQXdJQ1ltSUNobExtNXZjbTFoYkVKcFlYTWdQU0IwYUdsekxtNXZjbTFoYkVKcFlYTXBMQ0IwYUdsekxuSmhaR2wxY3lBaFBUMGdNU0FtSmlBb1pTNXlZV1JwZFhNZ1BTQjBhR2x6TG5KaFpHbDFjeWtzSUNoMGFHbHpMbTFoY0ZOcGVtVXVlQ0FoUFQwZ05URXlJSHg4SUhSb2FYTXViV0Z3VTJsNlpTNTVJQ0U5UFNBMU1USXBJQ1ltSUNobExtMWhjRk5wZW1VZ1BTQjBhR2x6TG0xaGNGTnBlbVV1ZEc5QmNuSmhlU2dwS1N3Z1pTNWpZVzFsY21FZ1BTQjBhR2x6TG1OaGJXVnlZUzUwYjBwVFQwNG9JVEVwTG05aWFtVmpkQ3dnWkdWc1pYUmxJR1V1WTJGdFpYSmhMbTFoZEhKcGVDd2daVHNLSUNBZ0lIMEtmU3dnVDJFZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUcxdklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2JtVjNJSFYwS0RVd0xDQXhMQ0F1TlN3Z05UQXdLU2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NW1iMk4xY3lBOUlERTdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVk5ZWFJ5YVdObGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxtTmhiV1Z5WVN3Z2JpQTlJR1J5SUNvZ01pQXFJR1V1WVc1bmJHVWdLaUIwYUdsekxtWnZZM1Z6TENCcElEMGdkR2hwY3k1dFlYQlRhWHBsTG5kcFpIUm9JQzhnZEdocGN5NXRZWEJUYVhwbExtaGxhV2RvZEN3Z2NpQTlJR1V1WkdsemRHRnVZMlVnZkh3Z2RDNW1ZWEk3Q2lBZ0lDQWdJQ0FnS0c0Z0lUMDlJSFF1Wm05MklIeDhJR2tnSVQwOUlIUXVZWE53WldOMElIeDhJSElnSVQwOUlIUXVabUZ5S1NBbUppQW9kQzVtYjNZZ1BTQnVMQ0IwTG1GemNHVmpkQ0E5SUdrc0lIUXVabUZ5SUQwZ2Npd2dkQzUxY0dSaGRHVlFjbTlxWldOMGFXOXVUV0YwY21sNEtDa3BMQ0J6ZFhCbGNpNTFjR1JoZEdWTllYUnlhV05sY3lobEtUc0tJQ0FnSUgwS0lDQWdJR052Y0hrb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnpkWEJsY2k1amIzQjVLR1VwTENCMGFHbHpMbVp2WTNWeklEMGdaUzVtYjJOMWN5d2dkR2hwY3pzS0lDQWdJSDBLZlRzS1QyRXVjSEp2ZEc5MGVYQmxMbWx6VTNCdmRFeHBaMmgwVTJoaFpHOTNJRDBnSVRBN0NuWmhjaUJJWVNBOUlHTnNZWE56SUdWNGRHVnVaSE1nUW5RZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlBOUlEQXNJR2tnUFNCTllYUm9MbEJKSUM4Z015d2djaUE5SURBc0lHOGdQU0F4S1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsTENCMEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpVTNCdmRFeHBaMmgwSWl3Z2RHaHBjeTV3YjNOcGRHbHZiaTVqYjNCNUtFNWxMa1JsWm1GMWJIUlZjQ2tzSUhSb2FYTXVkWEJrWVhSbFRXRjBjbWw0S0Nrc0lIUm9hWE11ZEdGeVoyVjBJRDBnYm1WM0lFNWxMQ0IwYUdsekxtUnBjM1JoYm1ObElEMGdiaXdnZEdocGN5NWhibWRzWlNBOUlHa3NJSFJvYVhNdWNHVnVkVzFpY21FZ1BTQnlMQ0IwYUdsekxtUmxZMkY1SUQwZ2J5d2dkR2hwY3k1emFHRmtiM2NnUFNCdVpYY2dUMkU3Q2lBZ0lDQjlDaUFnSUNCblpYUWdjRzkzWlhJb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVc1MFpXNXphWFI1SUNvZ1RXRjBhQzVRU1RzS0lDQWdJSDBLSUNBZ0lITmxkQ0J3YjNkbGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXBiblJsYm5OcGRIa2dQU0JsSUM4Z1RXRjBhQzVRU1RzS0lDQWdJSDBLSUNBZ0lHUnBjM0J2YzJVb0tTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1emFHRmtiM2N1WkdsemNHOXpaU2dwT3dvZ0lDQWdmUW9nSUNBZ1kyOXdlU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbU52Y0hrb1pTa3NJSFJvYVhNdVpHbHpkR0Z1WTJVZ1BTQmxMbVJwYzNSaGJtTmxMQ0IwYUdsekxtRnVaMnhsSUQwZ1pTNWhibWRzWlN3Z2RHaHBjeTV3Wlc1MWJXSnlZU0E5SUdVdWNHVnVkVzFpY21Fc0lIUm9hWE11WkdWallYa2dQU0JsTG1SbFkyRjVMQ0IwYUdsekxuUmhjbWRsZENBOUlHVXVkR0Z5WjJWMExtTnNiMjVsS0Nrc0lIUm9hWE11YzJoaFpHOTNJRDBnWlM1emFHRmtiM2N1WTJ4dmJtVW9LU3dnZEdocGN6c0tJQ0FnSUgwS2ZUc0tTR0V1Y0hKdmRHOTBlWEJsTG1selUzQnZkRXhwWjJoMElEMGdJVEE3Q25aaGNpQjNZeUE5SUc1bGR5QndaU3dnYm5JZ1BTQnVaWGNnVFN3Z2FtOGdQU0J1WlhjZ1RTd2dhMkVnUFNCamJHRnpjeUJsZUhSbGJtUnpJRzF2SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2MzVndaWElvYm1WM0lIVjBLRGt3TENBeExDQXVOU3dnTlRBd0tTazdDaUFnSUNBZ0lDQWdkR2hwY3k1ZlpuSmhiV1ZGZUhSbGJuUnpJRDBnYm1WM0lGZ29OQ3dnTWlrc0lIUm9hWE11WDNacFpYZHdiM0owUTI5MWJuUWdQU0EyTENCMGFHbHpMbDkyYVdWM2NHOXlkSE1nUFNCYkNpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCV1pTZ3lMQ0F4TENBeExDQXhLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRlpsS0RBc0lERXNJREVzSURFcExBb2dJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1ZtVW9NeXdnTVN3Z01Td2dNU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJXWlNneExDQXhMQ0F4TENBeEtTd0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGWmxLRE1zSURBc0lERXNJREVwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVm1Vb01Td2dNQ3dnTVN3Z01Ta0tJQ0FnSUNBZ0lDQmRMQ0IwYUdsekxsOWpkV0psUkdseVpXTjBhVzl1Y3lBOUlGc0tJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFMG9NU3dnTUN3Z01Da3NDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5Qk5LQzB4TENBd0xDQXdLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRTBvTUN3Z01Dd2dNU2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJOS0RBc0lEQXNJQzB4S1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUUwb01Dd2dNU3dnTUNrc0NpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCTktEQXNJQzB4TENBd0tRb2dJQ0FnSUNBZ0lGMHNJSFJvYVhNdVgyTjFZbVZWY0hNZ1BTQmJDaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5Qk5LREFzSURFc0lEQXBMQW9nSUNBZ0lDQWdJQ0FnSUNCdVpYY2dUU2d3TENBeExDQXdLU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRTBvTUN3Z01Td2dNQ2tzQ2lBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJOS0RBc0lERXNJREFwTEFvZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVFNnd0xDQXdMQ0F4S1N3S0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUUwb01Dd2dNQ3dnTFRFcENpQWdJQ0FnSUNBZ1hUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVMWhkSEpwWTJWektHVXNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1OaGJXVnlZU3dnYVNBOUlIUm9hWE11YldGMGNtbDRMQ0J5SUQwZ1pTNWthWE4wWVc1alpTQjhmQ0J1TG1aaGNqc0tJQ0FnSUNBZ0lDQnlJQ0U5UFNCdUxtWmhjaUFtSmlBb2JpNW1ZWElnUFNCeUxDQnVMblZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tTa3NJRzV5TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaGxMbTFoZEhKcGVGZHZjbXhrS1N3Z2JpNXdiM05wZEdsdmJpNWpiM0I1S0c1eUtTd2dhbTh1WTI5d2VTaHVMbkJ2YzJsMGFXOXVLU3dnYW04dVlXUmtLSFJvYVhNdVgyTjFZbVZFYVhKbFkzUnBiMjV6VzNSZEtTd2diaTUxY0M1amIzQjVLSFJvYVhNdVgyTjFZbVZWY0hOYmRGMHBMQ0J1TG14dmIydEJkQ2hxYnlrc0lHNHVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9LU3dnYVM1dFlXdGxWSEpoYm5Oc1lYUnBiMjRvTFc1eUxuZ3NJQzF1Y2k1NUxDQXRibkl1ZWlrc0lIZGpMbTExYkhScGNHeDVUV0YwY21salpYTW9iaTV3Y205cVpXTjBhVzl1VFdGMGNtbDRMQ0J1TG0xaGRISnBlRmR2Y214a1NXNTJaWEp6WlNrc0lIUm9hWE11WDJaeWRYTjBkVzB1YzJWMFJuSnZiVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29kMk1wT3dvZ0lDQWdmUXA5T3dwcllTNXdjbTkwYjNSNWNHVXVhWE5RYjJsdWRFeHBaMmgwVTJoaFpHOTNJRDBnSVRBN0NuWmhjaUJIWVNBOUlHTnNZWE56SUdWNGRHVnVaSE1nUW5RZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlBOUlEQXNJR2tnUFNBeEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVVHOXBiblJNYVdkb2RDSXNJSFJvYVhNdVpHbHpkR0Z1WTJVZ1BTQnVMQ0IwYUdsekxtUmxZMkY1SUQwZ2FTd2dkR2hwY3k1emFHRmtiM2NnUFNCdVpYY2dhMkU3Q2lBZ0lDQjlDaUFnSUNCblpYUWdjRzkzWlhJb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVc1MFpXNXphWFI1SUNvZ05DQXFJRTFoZEdndVVFazdDaUFnSUNCOUNpQWdJQ0J6WlhRZ2NHOTNaWElvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YVc1MFpXNXphWFI1SUQwZ1pTQXZJQ2cwSUNvZ1RXRjBhQzVRU1NrN0NpQWdJQ0I5Q2lBZ0lDQmthWE53YjNObEtDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWMyaGhaRzkzTG1ScGMzQnZjMlVvS1RzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVqYjNCNUtHVXBMQ0IwYUdsekxtUnBjM1JoYm1ObElEMGdaUzVrYVhOMFlXNWpaU3dnZEdocGN5NWtaV05oZVNBOUlHVXVaR1ZqWVhrc0lIUm9hWE11YzJoaFpHOTNJRDBnWlM1emFHRmtiM2N1WTJ4dmJtVW9LU3dnZEdocGN6c0tJQ0FnSUgwS2ZUc0tSMkV1Y0hKdmRHOTBlWEJsTG1selVHOXBiblJNYVdkb2RDQTlJQ0V3T3dwMllYSWdWbUVnUFNCamJHRnpjeUJsZUhSbGJtUnpJRzF2SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0NsN0NpQWdJQ0FnSUNBZ2MzVndaWElvYm1WM0lFWnlLQzAxTENBMUxDQTFMQ0F0TlN3Z0xqVXNJRFV3TUNrcE93b2dJQ0FnZlFwOU93cFdZUzV3Y205MGIzUjVjR1V1YVhORWFYSmxZM1JwYjI1aGJFeHBaMmgwVTJoaFpHOTNJRDBnSVRBN0NuWmhjaUJYWVNBOUlHTnNZWE56SUdWNGRHVnVaSE1nUW5RZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ2w3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9aU3dnZENrN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdJa1JwY21WamRHbHZibUZzVEdsbmFIUWlMQ0IwYUdsekxuQnZjMmwwYVc5dUxtTnZjSGtvVG1VdVJHVm1ZWFZzZEZWd0tTd2dkR2hwY3k1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnZEdocGN5NTBZWEpuWlhRZ1BTQnVaWGNnVG1Vc0lIUm9hWE11YzJoaFpHOTNJRDBnYm1WM0lGWmhPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbk5vWVdSdmR5NWthWE53YjNObEtDazdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVkyOXdlU2hsS1N3Z2RHaHBjeTUwWVhKblpYUWdQU0JsTG5SaGNtZGxkQzVqYkc5dVpTZ3BMQ0IwYUdsekxuTm9ZV1J2ZHlBOUlHVXVjMmhoWkc5M0xtTnNiMjVsS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDbjA3Q2xkaExuQnliM1J2ZEhsd1pTNXBjMFJwY21WamRHbHZibUZzVEdsbmFIUWdQU0FoTURzS2RtRnlJSEZoSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJDZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaGxMQ0IwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlRVzFpYVdWdWRFeHBaMmgwSWpzS0lDQWdJSDBLZlRzS2NXRXVjSEp2ZEc5MGVYQmxMbWx6UVcxaWFXVnVkRXhwWjJoMElEMGdJVEE3Q25aaGNpQllZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdRblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDd2diaUE5SURFd0xDQnBJRDBnTVRBcGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0dVc0lIUXBPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKU1pXTjBRWEpsWVV4cFoyaDBJaXdnZEdocGN5NTNhV1IwYUNBOUlHNHNJSFJvYVhNdWFHVnBaMmgwSUQwZ2FUc0tJQ0FnSUgwS0lDQWdJR2RsZENCd2IzZGxjaWdwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBiblJsYm5OcGRIa2dLaUIwYUdsekxuZHBaSFJvSUNvZ2RHaHBjeTVvWldsbmFIUWdLaUJOWVhSb0xsQkpPd29nSUNBZ2ZRb2dJQ0FnYzJWMElIQnZkMlZ5S0dVcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1sdWRHVnVjMmwwZVNBOUlHVWdMeUFvZEdocGN5NTNhV1IwYUNBcUlIUm9hWE11YUdWcFoyaDBJQ29nVFdGMGFDNVFTU2s3Q2lBZ0lDQjlDaUFnSUNCamIzQjVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMjl3ZVNobEtTd2dkR2hwY3k1M2FXUjBhQ0E5SUdVdWQybGtkR2dzSUhSb2FYTXVhR1ZwWjJoMElEMGdaUzVvWldsbmFIUXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjBiMHBUVDA0b1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdjM1Z3WlhJdWRHOUtVMDlPS0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtOWlhbVZqZEM1M2FXUjBhQ0E5SUhSb2FYTXVkMmxrZEdnc0lIUXViMkpxWldOMExtaGxhV2RvZENBOUlIUm9hWE11YUdWcFoyaDBMQ0IwT3dvZ0lDQWdmUXA5T3dwWVlTNXdjbTkwYjNSNWNHVXVhWE5TWldOMFFYSmxZVXhwWjJoMElEMGdJVEE3Q25aaGNpQktZU0E5SUdOc1lYTnpJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiMlZtWm1samFXVnVkSE1nUFNCYlhUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHVWdQU0F3T3lCbElEd2dPVHNnWlNzcktYUm9hWE11WTI5bFptWnBZMmxsYm5SekxuQjFjMmdvYm1WM0lFMHBPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXBJSHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd095QjBJRHdnT1RzZ2RDc3JLWFJvYVhNdVkyOWxabVpwWTJsbGJuUnpXM1JkTG1OdmNIa29aVnQwWFNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0I2WlhKdktDa2dld29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdaU0E5SURBN0lHVWdQQ0E1T3lCbEt5c3BkR2hwY3k1amIyVm1abWxqYVdWdWRITmJaVjB1YzJWMEtEQXNJREFzSURBcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWjJWMFFYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1pTNTRMQ0JwSUQwZ1pTNTVMQ0J5SUQwZ1pTNTZMQ0J2SUQwZ2RHaHBjeTVqYjJWbVptbGphV1Z1ZEhNN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRdVkyOXdlU2h2V3pCZEtTNXRkV3gwYVhCc2VWTmpZV3hoY2lndU1qZ3lNRGsxS1N3Z2RDNWhaR1JUWTJGc1pXUldaV04wYjNJb2Ixc3hYU3dnTGpRNE9EWXdNeUFxSUdrcExDQjBMbUZrWkZOallXeGxaRlpsWTNSdmNpaHZXekpkTENBdU5EZzROakF6SUNvZ2Npa3NJSFF1WVdSa1UyTmhiR1ZrVm1WamRHOXlLRzliTTEwc0lDNDBPRGcyTURNZ0tpQnVLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvYjFzMFhTd2dNUzR3T1RJMU5EZ2dLaUFvYmlBcUlHa3BLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvYjFzMVhTd2dNUzR3T1RJMU5EZ2dLaUFvYVNBcUlISXBLU3dnZEM1aFpHUlRZMkZzWldSV1pXTjBiM0lvYjFzMlhTd2dMak14TlRNNU1pQXFJQ2d6SUNvZ2NpQXFJSElnTFNBeEtTa3NJSFF1WVdSa1UyTmhiR1ZrVm1WamRHOXlLRzliTjEwc0lERXVNRGt5TlRRNElDb2dLRzRnS2lCeUtTa3NJSFF1WVdSa1UyTmhiR1ZrVm1WamRHOXlLRzliT0Ywc0lDNDFORFl5TnpRZ0tpQW9iaUFxSUc0Z0xTQnBJQ29nYVNrcExDQjBPd29nSUNBZ2ZRb2dJQ0FnWjJWMFNYSnlZV1JwWVc1alpVRjBLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlHVXVlQ3dnYVNBOUlHVXVlU3dnY2lBOUlHVXVlaXdnYnlBOUlIUm9hWE11WTI5bFptWnBZMmxsYm5Sek93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtTnZjSGtvYjFzd1hTa3ViWFZzZEdsd2JIbFRZMkZzWVhJb0xqZzROakl5Tnlrc0lIUXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtHOWJNVjBzSURJZ0tpQXVOVEV4TmpZMElDb2dhU2tzSUhRdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0c5Yk1sMHNJRElnS2lBdU5URXhOalkwSUNvZ2Npa3NJSFF1WVdSa1UyTmhiR1ZrVm1WamRHOXlLRzliTTEwc0lESWdLaUF1TlRFeE5qWTBJQ29nYmlrc0lIUXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtHOWJORjBzSURJZ0tpQXVOREk1TURReklDb2diaUFxSUdrcExDQjBMbUZrWkZOallXeGxaRlpsWTNSdmNpaHZXelZkTENBeUlDb2dMalF5T1RBME15QXFJR2tnS2lCeUtTd2dkQzVoWkdSVFkyRnNaV1JXWldOMGIzSW9iMXMyWFN3Z0xqYzBNekV5TlNBcUlISWdLaUJ5SUMwZ0xqSTBOemN3T0Nrc0lIUXVZV1JrVTJOaGJHVmtWbVZqZEc5eUtHOWJOMTBzSURJZ0tpQXVOREk1TURReklDb2diaUFxSUhJcExDQjBMbUZrWkZOallXeGxaRlpsWTNSdmNpaHZXemhkTENBdU5ESTVNRFF6SUNvZ0tHNGdLaUJ1SUMwZ2FTQXFJR2twS1N3Z2REc0tJQ0FnSUgwS0lDQWdJR0ZrWkNobEtTQjdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQjBJRDBnTURzZ2RDQThJRGs3SUhRckt5bDBhR2x6TG1OdlpXWm1hV05wWlc1MGMxdDBYUzVoWkdRb1pTNWpiMlZtWm1samFXVnVkSE5iZEYwcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWVdSa1UyTmhiR1ZrVTBnb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQTdJRzRnUENBNU95QnVLeXNwZEdocGN5NWpiMlZtWm1samFXVnVkSE5iYmwwdVlXUmtVMk5oYkdWa1ZtVmpkRzl5S0dVdVkyOWxabVpwWTJsbGJuUnpXMjVkTENCMEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhOallXeGxLR1VwSUhzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQXdPeUIwSUR3Z09Uc2dkQ3NyS1hSb2FYTXVZMjlsWm1acFkybGxiblJ6VzNSZExtMTFiSFJwY0d4NVUyTmhiR0Z5S0dVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYkdWeWNDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNRHNnYmlBOElEazdJRzRyS3lsMGFHbHpMbU52WldabWFXTnBaVzUwYzF0dVhTNXNaWEp3S0dVdVkyOWxabVpwWTJsbGJuUnpXMjVkTENCMEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdWeGRXRnNjeWhsS1NCN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMElEMGdNRHNnZENBOElEazdJSFFyS3lscFppQW9JWFJvYVhNdVkyOWxabVpwWTJsbGJuUnpXM1JkTG1WeGRXRnNjeWhsTG1OdlpXWm1hV05wWlc1MGMxdDBYU2twSUhKbGRIVnliaUFoTVRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnSVRBN0NpQWdJQ0I5Q2lBZ0lDQmpiM0I1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhRb1pTNWpiMlZtWm1samFXVnVkSE1wT3dvZ0lDQWdmUW9nSUNBZ1kyeHZibVVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBhR2x6TG1OdmJuTjBjblZqZEc5eUtDa3VZMjl3ZVNoMGFHbHpLVHNLSUNBZ0lIMEtJQ0FnSUdaeWIyMUJjbkpoZVNobExDQjBJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTVqYjJWbVptbGphV1Z1ZEhNN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCcElEMGdNRHNnYVNBOElEazdJR2tyS3lsdVcybGRMbVp5YjIxQmNuSmhlU2hsTENCMElDc2dhU0FxSURNcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnZEc5QmNuSmhlU2hsSUQwZ1cxMHNJSFFnUFNBd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUc0Z1BTQjBhR2x6TG1OdlpXWm1hV05wWlc1MGN6c0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHa2dQU0F3T3lCcElEd2dPVHNnYVNzcktXNWJhVjB1ZEc5QmNuSmhlU2hsTENCMElDc2dhU0FxSURNcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbE93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHZGxkRUpoYzJselFYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ1pTNTRMQ0JwSUQwZ1pTNTVMQ0J5SUQwZ1pTNTZPd29nSUNBZ0lDQWdJSFJiTUYwZ1BTQXVNamd5TURrMUxDQjBXekZkSUQwZ0xqUTRPRFl3TXlBcUlHa3NJSFJiTWwwZ1BTQXVORGc0TmpBeklDb2djaXdnZEZzelhTQTlJQzQwT0RnMk1ETWdLaUJ1TENCMFd6UmRJRDBnTVM0d09USTFORGdnS2lCdUlDb2dhU3dnZEZzMVhTQTlJREV1TURreU5UUTRJQ29nYVNBcUlISXNJSFJiTmwwZ1BTQXVNekUxTXpreUlDb2dLRE1nS2lCeUlDb2djaUF0SURFcExDQjBXemRkSUQwZ01TNHdPVEkxTkRnZ0tpQnVJQ29nY2l3Z2RGczRYU0E5SUM0MU5EWXlOelFnS2lBb2JpQXFJRzRnTFNCcElDb2dhU2s3Q2lBZ0lDQjlDbjA3Q2twaExuQnliM1J2ZEhsd1pTNXBjMU53YUdWeWFXTmhiRWhoY20xdmJtbGpjek1nUFNBaE1Ec0tkbUZ5SUVoeUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCQ2RDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnYm1WM0lFcGhMQ0IwSUQwZ01TbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb2RtOXBaQ0F3TENCMEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5Ob0lEMGdaVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVcExDQjBhR2x6TG5Ob0xtTnZjSGtvWlM1emFDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm1jbTl0U2xOUFRpaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXNTBaVzV6YVhSNUlEMGdaUzVwYm5SbGJuTnBkSGtzSUhSb2FYTXVjMmd1Wm5KdmJVRnljbUY1S0dVdWMyZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkRzlLVTA5T0tHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSE4xY0dWeUxuUnZTbE5QVGlobEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDNXZZbXBsWTNRdWMyZ2dQU0IwYUdsekxuTm9MblJ2UVhKeVlYa29LU3dnZERzS0lDQWdJSDBLZlRzS1NISXVjSEp2ZEc5MGVYQmxMbWx6VEdsbmFIUlFjbTlpWlNBOUlDRXdPd3AyWVhJZ2VtZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklHSjBJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VwZXdvZ0lDQWdJQ0FnSUhOMWNHVnlLR1VwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkR1Y0ZEhWeVpYTWdQU0I3ZlRzS0lDQWdJSDBLSUNBZ0lHeHZZV1FvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeXdnYnlBOUlHNWxkeUJaZENoeUxtMWhibUZuWlhJcE93b2dJQ0FnSUNBZ0lHOHVjMlYwVUdGMGFDaHlMbkJoZEdncExDQnZMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9jaTV5WlhGMVpYTjBTR1ZoWkdWeUtTd2dieTV6WlhSWGFYUm9RM0psWkdWdWRHbGhiSE1vY2k1M2FYUm9RM0psWkdWdWRHbGhiSE1wTENCdkxteHZZV1FvWlN3Z1puVnVZM1JwYjI0b1lTa2dld29nSUNBZ0lDQWdJQ0FnSUNCMGNua2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkQ2h5TG5CaGNuTmxLRXBUVDA0dWNHRnljMlVvWVNrcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQS9JR2tvYkNrZ09pQmpiMjV6YjJ4bExtVnljbTl5S0d3cExDQnlMbTFoYm1GblpYSXVhWFJsYlVWeWNtOXlLR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmU3dnYml3Z2FTazdDaUFnSUNCOUNpQWdJQ0J3WVhKelpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuUmxlSFIxY21Wek93b2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHNG9jaWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RGdHlYU0E5UFQwZ2RtOXBaQ0F3SUNZbUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVUV0YwWlhKcFlXeE1iMkZrWlhJNklGVnVaR1ZtYVc1bFpDQjBaWGgwZFhKbElpd2djaWtzSUhSYmNsMDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCcElEMGdibVYzSUhONVcyVXVkSGx3WlYwN0NpQWdJQ0FnSUNBZ2FXWWdLR1V1ZFhWcFpDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuVjFhV1FnUFNCbExuVjFhV1FwTENCbExtNWhiV1VnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV1WVcxbElEMGdaUzV1WVcxbEtTd2daUzVqYjJ4dmNpQWhQVDBnZG05cFpDQXdJQ1ltSUdrdVkyOXNiM0lnSVQwOUlIWnZhV1FnTUNBbUppQnBMbU52Ykc5eUxuTmxkRWhsZUNobExtTnZiRzl5S1N3Z1pTNXliM1ZuYUc1bGMzTWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXliM1ZuYUc1bGMzTWdQU0JsTG5KdmRXZG9ibVZ6Y3lrc0lHVXViV1YwWVd4dVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3ViV1YwWVd4dVpYTnpJRDBnWlM1dFpYUmhiRzVsYzNNcExDQmxMbk5vWldWdUlDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWMyaGxaVzRnUFNCbExuTm9aV1Z1S1N3Z1pTNXphR1ZsYmtOdmJHOXlJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VjMmhsWlc1RGIyeHZjaUE5SUc1bGR5QmhaU2dwTG5ObGRFaGxlQ2hsTG5Ob1pXVnVRMjlzYjNJcEtTd2daUzV6YUdWbGJsSnZkV2RvYm1WemN5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExuTm9aV1Z1VW05MVoyaHVaWE56SUQwZ1pTNXphR1ZsYmxKdmRXZG9ibVZ6Y3lrc0lHVXVaVzFwYzNOcGRtVWdJVDA5SUhadmFXUWdNQ0FtSmlCcExtVnRhWE56YVhabElDRTlQU0IyYjJsa0lEQWdKaVlnYVM1bGJXbHpjMmwyWlM1elpYUklaWGdvWlM1bGJXbHpjMmwyWlNrc0lHVXVjM0JsWTNWc1lYSWdJVDA5SUhadmFXUWdNQ0FtSmlCcExuTndaV04xYkdGeUlDRTlQU0IyYjJsa0lEQWdKaVlnYVM1emNHVmpkV3hoY2k1elpYUklaWGdvWlM1emNHVmpkV3hoY2lrc0lHVXVjM0JsWTNWc1lYSkpiblJsYm5OcGRIa2dJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXpjR1ZqZFd4aGNrbHVkR1Z1YzJsMGVTQTlJR1V1YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGtwTENCbExuTndaV04xYkdGeVEyOXNiM0lnSVQwOUlIWnZhV1FnTUNBbUppQnBMbk53WldOMWJHRnlRMjlzYjNJZ0lUMDlJSFp2YVdRZ01DQW1KaUJwTG5Od1pXTjFiR0Z5UTI5c2IzSXVjMlYwU0dWNEtHVXVjM0JsWTNWc1lYSkRiMnh2Y2lrc0lHVXVjMmhwYm1sdVpYTnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VjMmhwYm1sdVpYTnpJRDBnWlM1emFHbHVhVzVsYzNNcExDQmxMbU5zWldGeVkyOWhkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbU5zWldGeVkyOWhkQ0E5SUdVdVkyeGxZWEpqYjJGMEtTd2daUzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVqYkdWaGNtTnZZWFJTYjNWbmFHNWxjM01nUFNCbExtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemN5a3NJR1V1ZEhKaGJuTnRhWE56YVc5dUlDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWRISmhibk50YVhOemFXOXVJRDBnWlM1MGNtRnVjMjFwYzNOcGIyNHBMQ0JsTG5Sb2FXTnJibVZ6Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5Sb2FXTnJibVZ6Y3lBOUlHVXVkR2hwWTJ0dVpYTnpLU3dnWlM1aGRIUmxiblZoZEdsdmJrUnBjM1JoYm1ObElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVlYUjBaVzUxWVhScGIyNUVhWE4wWVc1alpTQTlJR1V1WVhSMFpXNTFZWFJwYjI1RWFYTjBZVzVqWlNrc0lHVXVZWFIwWlc1MVlYUnBiMjVEYjJ4dmNpQWhQVDBnZG05cFpDQXdJQ1ltSUdrdVlYUjBaVzUxWVhScGIyNURiMnh2Y2lBaFBUMGdkbTlwWkNBd0lDWW1JR2t1WVhSMFpXNTFZWFJwYjI1RGIyeHZjaTV6WlhSSVpYZ29aUzVoZEhSbGJuVmhkR2x2YmtOdmJHOXlLU3dnWlM1bWIyY2dJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNW1iMmNnUFNCbExtWnZaeWtzSUdVdVpteGhkRk5vWVdScGJtY2dJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNW1iR0YwVTJoaFpHbHVaeUE5SUdVdVpteGhkRk5vWVdScGJtY3BMQ0JsTG1Kc1pXNWthVzVuSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WW14bGJtUnBibWNnUFNCbExtSnNaVzVrYVc1bktTd2daUzVqYjIxaWFXNWxJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VZMjl0WW1sdVpTQTlJR1V1WTI5dFltbHVaU2tzSUdVdWMybGtaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbk5wWkdVZ1BTQmxMbk5wWkdVcExDQmxMbk5vWVdSdmQxTnBaR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV6YUdGa2IzZFRhV1JsSUQwZ1pTNXphR0ZrYjNkVGFXUmxLU3dnWlM1dmNHRmphWFI1SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YjNCaFkybDBlU0E5SUdVdWIzQmhZMmwwZVNrc0lHVXVabTl5YldGMElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVptOXliV0YwSUQwZ1pTNW1iM0p0WVhRcExDQmxMblJ5WVc1emNHRnlaVzUwSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1ZEhKaGJuTndZWEpsYm5RZ1BTQmxMblJ5WVc1emNHRnlaVzUwS1N3Z1pTNWhiSEJvWVZSbGMzUWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNWhiSEJvWVZSbGMzUWdQU0JsTG1Gc2NHaGhWR1Z6ZENrc0lHVXVaR1Z3ZEdoVVpYTjBJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VaR1Z3ZEdoVVpYTjBJRDBnWlM1a1pYQjBhRlJsYzNRcExDQmxMbVJsY0hSb1YzSnBkR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVrWlhCMGFGZHlhWFJsSUQwZ1pTNWtaWEIwYUZkeWFYUmxLU3dnWlM1amIyeHZjbGR5YVhSbElDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVkyOXNiM0pYY21sMFpTQTlJR1V1WTI5c2IzSlhjbWwwWlNrc0lHVXVjM1JsYm1OcGJGZHlhWFJsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YzNSbGJtTnBiRmR5YVhSbElEMGdaUzV6ZEdWdVkybHNWM0pwZEdVcExDQmxMbk4wWlc1amFXeFhjbWwwWlUxaGMyc2dJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXpkR1Z1WTJsc1YzSnBkR1ZOWVhOcklEMGdaUzV6ZEdWdVkybHNWM0pwZEdWTllYTnJLU3dnWlM1emRHVnVZMmxzUm5WdVl5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExuTjBaVzVqYVd4R2RXNWpJRDBnWlM1emRHVnVZMmxzUm5WdVl5a3NJR1V1YzNSbGJtTnBiRkpsWmlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5OMFpXNWphV3hTWldZZ1BTQmxMbk4wWlc1amFXeFNaV1lwTENCbExuTjBaVzVqYVd4R2RXNWpUV0Z6YXlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5OMFpXNWphV3hHZFc1alRXRnpheUE5SUdVdWMzUmxibU5wYkVaMWJtTk5ZWE5yS1N3Z1pTNXpkR1Z1WTJsc1JtRnBiQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbk4wWlc1amFXeEdZV2xzSUQwZ1pTNXpkR1Z1WTJsc1JtRnBiQ2tzSUdVdWMzUmxibU5wYkZwR1lXbHNJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VjM1JsYm1OcGJGcEdZV2xzSUQwZ1pTNXpkR1Z1WTJsc1drWmhhV3dwTENCbExuTjBaVzVqYVd4YVVHRnpjeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbk4wWlc1amFXeGFVR0Z6Y3lBOUlHVXVjM1JsYm1OcGJGcFFZWE56S1N3Z1pTNTNhWEpsWm5KaGJXVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNTNhWEpsWm5KaGJXVWdQU0JsTG5kcGNtVm1jbUZ0WlNrc0lHVXVkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9JQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VkMmx5WldaeVlXMWxUR2x1WlhkcFpIUm9JRDBnWlM1M2FYSmxabkpoYldWTWFXNWxkMmxrZEdncExDQmxMbmRwY21WbWNtRnRaVXhwYm1WallYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNTNhWEpsWm5KaGJXVk1hVzVsWTJGd0lEMGdaUzUzYVhKbFpuSmhiV1ZNYVc1bFkyRndLU3dnWlM1M2FYSmxabkpoYldWTWFXNWxhbTlwYmlBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5kcGNtVm1jbUZ0WlV4cGJtVnFiMmx1SUQwZ1pTNTNhWEpsWm5KaGJXVk1hVzVsYW05cGJpa3NJR1V1Y205MFlYUnBiMjRnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV5YjNSaGRHbHZiaUE5SUdVdWNtOTBZWFJwYjI0cExDQmxMbXhwYm1WM2FXUjBhQ0FoUFQwZ01TQW1KaUFvYVM1c2FXNWxkMmxrZEdnZ1BTQmxMbXhwYm1WM2FXUjBhQ2tzSUdVdVpHRnphRk5wZW1VZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1a1lYTm9VMmw2WlNBOUlHVXVaR0Z6YUZOcGVtVXBMQ0JsTG1kaGNGTnBlbVVnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVuWVhCVGFYcGxJRDBnWlM1bllYQlRhWHBsS1N3Z1pTNXpZMkZzWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5OallXeGxJRDBnWlM1elkyRnNaU2tzSUdVdWNHOXNlV2R2Yms5bVpuTmxkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbkJ2YkhsbmIyNVBabVp6WlhRZ1BTQmxMbkJ2YkhsbmIyNVBabVp6WlhRcExDQmxMbkJ2YkhsbmIyNVBabVp6WlhSR1lXTjBiM0lnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV3YjJ4NVoyOXVUMlptYzJWMFJtRmpkRzl5SUQwZ1pTNXdiMng1WjI5dVQyWm1jMlYwUm1GamRHOXlLU3dnWlM1d2IyeDVaMjl1VDJabWMyVjBWVzVwZEhNZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1d2IyeDVaMjl1VDJabWMyVjBWVzVwZEhNZ1BTQmxMbkJ2YkhsbmIyNVBabVp6WlhSVmJtbDBjeWtzSUdVdVpHbDBhR1Z5YVc1bklDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVpHbDBhR1Z5YVc1bklEMGdaUzVrYVhSb1pYSnBibWNwTENCbExtRnNjR2hoVkc5RGIzWmxjbUZuWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1Gc2NHaGhWRzlEYjNabGNtRm5aU0E5SUdVdVlXeHdhR0ZVYjBOdmRtVnlZV2RsS1N3Z1pTNXdjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXdjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWdQU0JsTG5CeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVNrc0lHVXVkbWx6YVdKc1pTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuWnBjMmxpYkdVZ1BTQmxMblpwYzJsaWJHVXBMQ0JsTG5SdmJtVk5ZWEJ3WldRZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1MGIyNWxUV0Z3Y0dWa0lEMGdaUzUwYjI1bFRXRndjR1ZrS1N3Z1pTNTFjMlZ5UkdGMFlTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuVnpaWEpFWVhSaElEMGdaUzUxYzJWeVJHRjBZU2tzSUdVdWRtVnlkR1Y0UTI5c2IzSnpJQ0U5UFNCMmIybGtJREFnSmlZZ0tIUjVjR1Z2WmlCbExuWmxjblJsZUVOdmJHOXljeUE5UFNBaWJuVnRZbVZ5SWlBL0lHa3VkbVZ5ZEdWNFEyOXNiM0p6SUQwZ1pTNTJaWEowWlhoRGIyeHZjbk1nUGlBd0lEb2dhUzUyWlhKMFpYaERiMnh2Y25NZ1BTQmxMblpsY25SbGVFTnZiRzl5Y3lrc0lHVXVkVzVwWm05eWJYTWdJVDA5SUhadmFXUWdNQ2tnWm05eUtHeGxkQ0J5SUdsdUlHVXVkVzVwWm05eWJYTXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdieUE5SUdVdWRXNXBabTl5YlhOYmNsMDdDaUFnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ2hwTG5WdWFXWnZjbTF6VzNKZElEMGdlMzBzSUc4dWRIbHdaU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSjBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExuVnVhV1p2Y20xelczSmRMblpoYkhWbElEMGdiaWh2TG5aaGJIVmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ltTWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrdWRXNXBabTl5YlhOYmNsMHVkbUZzZFdVZ1BTQnVaWGNnWVdVb0tTNXpaWFJJWlhnb2J5NTJZV3gxWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0oyTWlJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhUzUxYm1sbWIzSnRjMXR5WFM1MllXeDFaU0E5SUc1bGR5QllLQ2t1Wm5KdmJVRnljbUY1S0c4dWRtRnNkV1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlkak1pT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa3VkVzVwWm05eWJYTmJjbDB1ZG1Gc2RXVWdQU0J1WlhjZ1RTZ3BMbVp5YjIxQmNuSmhlU2h2TG5aaGJIVmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0luWTBJam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExuVnVhV1p2Y20xelczSmRMblpoYkhWbElEMGdibVYzSUZabEtDa3Vabkp2YlVGeWNtRjVLRzh1ZG1Gc2RXVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaWJUTWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrdWRXNXBabTl5YlhOYmNsMHVkbUZzZFdVZ1BTQnVaWGNnYkhRb0tTNW1jbTl0UVhKeVlYa29ieTUyWVd4MVpTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKdE5DSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVM1MWJtbG1iM0p0YzF0eVhTNTJZV3gxWlNBOUlHNWxkeUJ3WlNncExtWnliMjFCY25KaGVTaHZMblpoYkhWbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhUzUxYm1sbWIzSnRjMXR5WFM1MllXeDFaU0E5SUc4dWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0dVdVpHVm1hVzVsY3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1SbFptbHVaWE1nUFNCbExtUmxabWx1WlhNcExDQmxMblpsY25SbGVGTm9ZV1JsY2lBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5abGNuUmxlRk5vWVdSbGNpQTlJR1V1ZG1WeWRHVjRVMmhoWkdWeUtTd2daUzVtY21GbmJXVnVkRk5vWVdSbGNpQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtWnlZV2R0Wlc1MFUyaGhaR1Z5SUQwZ1pTNW1jbUZuYldWdWRGTm9ZV1JsY2lrc0lHVXVaWGgwWlc1emFXOXVjeUFoUFQwZ2RtOXBaQ0F3S1NCbWIzSW9iR1YwSUhJZ2FXNGdaUzVsZUhSbGJuTnBiMjV6S1drdVpYaDBaVzV6YVc5dWMxdHlYU0E5SUdVdVpYaDBaVzV6YVc5dWMxdHlYVHNLSUNBZ0lDQWdJQ0JwWmlBb1pTNXphR0ZrYVc1bklDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVpteGhkRk5vWVdScGJtY2dQU0JsTG5Ob1lXUnBibWNnUFQwOUlERXBMQ0JsTG5OcGVtVWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXphWHBsSUQwZ1pTNXphWHBsS1N3Z1pTNXphWHBsUVhSMFpXNTFZWFJwYjI0Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emFYcGxRWFIwWlc1MVlYUnBiMjRnUFNCbExuTnBlbVZCZEhSbGJuVmhkR2x2Ymlrc0lHVXViV0Z3SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1YldGd0lEMGdiaWhsTG0xaGNDa3BMQ0JsTG0xaGRHTmhjQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbTFoZEdOaGNDQTlJRzRvWlM1dFlYUmpZWEFwS1N3Z1pTNWhiSEJvWVUxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtRnNjR2hoVFdGd0lEMGdiaWhsTG1Gc2NHaGhUV0Z3S1Nrc0lHVXVZblZ0Y0UxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtSjFiWEJOWVhBZ1BTQnVLR1V1WW5WdGNFMWhjQ2twTENCbExtSjFiWEJUWTJGc1pTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtSjFiWEJUWTJGc1pTQTlJR1V1WW5WdGNGTmpZV3hsS1N3Z1pTNXViM0p0WVd4TllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXViM0p0WVd4TllYQWdQU0J1S0dVdWJtOXliV0ZzVFdGd0tTa3NJR1V1Ym05eWJXRnNUV0Z3Vkhsd1pTQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtNXZjbTFoYkUxaGNGUjVjR1VnUFNCbExtNXZjbTFoYkUxaGNGUjVjR1VwTENCbExtNXZjbTFoYkZOallXeGxJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhJZ1BTQmxMbTV2Y20xaGJGTmpZV3hsT3dvZ0lDQWdJQ0FnSUNBZ0lDQkJjbkpoZVM1cGMwRnljbUY1S0hJcElEMDlQU0FoTVNBbUppQW9jaUE5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUNpQWdJQ0FnSUNBZ0lDQWdJRjBwTENCcExtNXZjbTFoYkZOallXeGxJRDBnYm1WM0lGZ29LUzVtY205dFFYSnlZWGtvY2lrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtUnBjM0JzWVdObGJXVnVkRTFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1ScGMzQnNZV05sYldWdWRFMWhjQ0E5SUc0b1pTNWthWE53YkdGalpXMWxiblJOWVhBcEtTd2daUzVrYVhOd2JHRmpaVzFsYm5SVFkyRnNaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbVJwYzNCc1lXTmxiV1Z1ZEZOallXeGxJRDBnWlM1a2FYTndiR0ZqWlcxbGJuUlRZMkZzWlNrc0lHVXVaR2x6Y0d4aFkyVnRaVzUwUW1saGN5QWhQVDBnZG05cFpDQXdJQ1ltSUNocExtUnBjM0JzWVdObGJXVnVkRUpwWVhNZ1BTQmxMbVJwYzNCc1lXTmxiV1Z1ZEVKcFlYTXBMQ0JsTG5KdmRXZG9ibVZ6YzAxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuSnZkV2RvYm1WemMwMWhjQ0E5SUc0b1pTNXliM1ZuYUc1bGMzTk5ZWEFwS1N3Z1pTNXRaWFJoYkc1bGMzTk5ZWEFnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV0WlhSaGJHNWxjM05OWVhBZ1BTQnVLR1V1YldWMFlXeHVaWE56VFdGd0tTa3NJR1V1WlcxcGMzTnBkbVZOWVhBZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1bGJXbHpjMmwyWlUxaGNDQTlJRzRvWlM1bGJXbHpjMmwyWlUxaGNDa3BMQ0JsTG1WdGFYTnphWFpsU1c1MFpXNXphWFI1SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1WlcxcGMzTnBkbVZKYm5SbGJuTnBkSGtnUFNCbExtVnRhWE56YVhabFNXNTBaVzV6YVhSNUtTd2daUzV6Y0dWamRXeGhjazFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5Od1pXTjFiR0Z5VFdGd0lEMGdiaWhsTG5Od1pXTjFiR0Z5VFdGd0tTa3NJR1V1YzNCbFkzVnNZWEpKYm5SbGJuTnBkSGxOWVhBZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNDQTlJRzRvWlM1emNHVmpkV3hoY2tsdWRHVnVjMmwwZVUxaGNDa3BMQ0JsTG5Od1pXTjFiR0Z5UTI5c2IzSk5ZWEFnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzV6Y0dWamRXeGhja052Ykc5eVRXRndJRDBnYmlobExuTndaV04xYkdGeVEyOXNiM0pOWVhBcEtTd2daUzVsYm5aTllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNWxiblpOWVhBZ1BTQnVLR1V1Wlc1MlRXRndLU2tzSUdVdVpXNTJUV0Z3U1c1MFpXNXphWFI1SUNFOVBTQjJiMmxrSURBZ0ppWWdLR2t1Wlc1MlRXRndTVzUwWlc1emFYUjVJRDBnWlM1bGJuWk5ZWEJKYm5SbGJuTnBkSGtwTENCbExuSmxabXhsWTNScGRtbDBlU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHBMbkpsWm14bFkzUnBkbWwwZVNBOUlHVXVjbVZtYkdWamRHbDJhWFI1S1N3Z1pTNXlaV1p5WVdOMGFXOXVVbUYwYVc4Z0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1eVpXWnlZV04wYVc5dVVtRjBhVzhnUFNCbExuSmxabkpoWTNScGIyNVNZWFJwYnlrc0lHVXViR2xuYUhSTllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNXNhV2RvZEUxaGNDQTlJRzRvWlM1c2FXZG9kRTFoY0NrcExDQmxMbXhwWjJoMFRXRndTVzUwWlc1emFYUjVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3ViR2xuYUhSTllYQkpiblJsYm5OcGRIa2dQU0JsTG14cFoyaDBUV0Z3U1c1MFpXNXphWFI1S1N3Z1pTNWhiMDFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1GdlRXRndJRDBnYmlobExtRnZUV0Z3S1Nrc0lHVXVZVzlOWVhCSmJuUmxibk5wZEhrZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYVM1aGIwMWhjRWx1ZEdWdWMybDBlU0E5SUdVdVlXOU5ZWEJKYm5SbGJuTnBkSGtwTENCbExtZHlZV1JwWlc1MFRXRndJQ0U5UFNCMmIybGtJREFnSmlZZ0tHa3VaM0poWkdsbGJuUk5ZWEFnUFNCdUtHVXVaM0poWkdsbGJuUk5ZWEFwS1N3Z1pTNWpiR1ZoY21OdllYUk5ZWEFnSVQwOUlIWnZhV1FnTUNBbUppQW9hUzVqYkdWaGNtTnZZWFJOWVhBZ1BTQnVLR1V1WTJ4bFlYSmpiMkYwVFdGd0tTa3NJR1V1WTJ4bFlYSmpiMkYwVW05MVoyaHVaWE56VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdVkyeGxZWEpqYjJGMFVtOTFaMmh1WlhOelRXRndJRDBnYmlobExtTnNaV0Z5WTI5aGRGSnZkV2RvYm1WemMwMWhjQ2twTENCbExtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExtTnNaV0Z5WTI5aGRFNXZjbTFoYkUxaGNDQTlJRzRvWlM1amJHVmhjbU52WVhST2IzSnRZV3hOWVhBcEtTd2daUzVqYkdWaGNtTnZZWFJPYjNKdFlXeFRZMkZzWlNBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG1Oc1pXRnlZMjloZEU1dmNtMWhiRk5qWVd4bElEMGdibVYzSUZnb0tTNW1jbTl0UVhKeVlYa29aUzVqYkdWaGNtTnZZWFJPYjNKdFlXeFRZMkZzWlNrcExDQmxMblJ5WVc1emJXbHpjMmx2YmsxaGNDQWhQVDBnZG05cFpDQXdJQ1ltSUNocExuUnlZVzV6YldsemMybHZiazFoY0NBOUlHNG9aUzUwY21GdWMyMXBjM05wYjI1TllYQXBLU3dnWlM1MGFHbGphMjVsYzNOTllYQWdJVDA5SUhadmFXUWdNQ0FtSmlBb2FTNTBhR2xqYTI1bGMzTk5ZWEFnUFNCdUtHVXVkR2hwWTJ0dVpYTnpUV0Z3S1Nrc0lHVXVjMmhsWlc1RGIyeHZjazFoY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hwTG5Ob1pXVnVRMjlzYjNKTllYQWdQU0J1S0dVdWMyaGxaVzVEYjJ4dmNrMWhjQ2twTENCbExuTm9aV1Z1VW05MVoyaHVaWE56VFdGd0lDRTlQU0IyYjJsa0lEQWdKaVlnS0drdWMyaGxaVzVTYjNWbmFHNWxjM05OWVhBZ1BTQnVLR1V1YzJobFpXNVNiM1ZuYUc1bGMzTk5ZWEFwS1N3Z2FUc0tJQ0FnSUgwS0lDQWdJSE5sZEZSbGVIUjFjbVZ6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwWlhoMGRYSmxjeUE5SUdVc0lIUm9hWE03Q2lBZ0lDQjlDbjBzSUVkeklEMGdZMnhoYzNNZ2V3b2dJQ0FnYzNSaGRHbGpJR1JsWTI5a1pWUmxlSFFvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdWR1Y0ZEVSbFkyOWtaWElnUENBaWRTSXBJSEpsZEhWeWJpQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0tTNWtaV052WkdVb1pTazdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQWlJanNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnWlM1c1pXNW5kR2c3SUc0Z1BDQnBPeUJ1S3lzcGRDQXJQU0JUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0dWYmJsMHBPd29nSUNBZ0lDQWdJSFJ5ZVNCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV052WkdWVlVrbERiMjF3YjI1bGJuUW9aWE5qWVhCbEtIUXBLVHNLSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCME93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSE4wWVhScFl5QmxlSFJ5WVdOMFZYSnNRbUZ6WlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbXhoYzNSSmJtUmxlRTltS0NJdklpazdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUWdQVDA5SUMweElEOGdJaTR2SWlBNklHVXVjM1ZpYzNSeUtEQXNJSFFnS3lBeEtUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5QnlaWE52YkhabFZWSk1LR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RIbHdaVzltSUdVZ0lUMGdJbk4wY21sdVp5SWdmSHdnWlNBOVBUMGdJaUlnUHlBaUlpQTZJQ2d2WG1oMGRIQnpQenBjTDF3dkwya3VkR1Z6ZENoMEtTQW1KaUF2WGx3dkx5NTBaWE4wS0dVcElDWW1JQ2gwSUQwZ2RDNXlaWEJzWVdObEtDOG9YbWgwZEhCelB6cGNMMXd2VzE1Y0wxMHJLUzRxTDJrc0lDSWtNU0lwS1N3Z0wxNG9hSFIwY0hNL09pay9YQzljTHk5cExuUmxjM1FvWlNrZ2ZId2dMMTVrWVhSaE9pNHFMQzRxSkM5cExuUmxjM1FvWlNrZ2ZId2dMMTVpYkc5aU9pNHFKQzlwTG5SbGMzUW9aU2tnUHlCbElEb2dkQ0FySUdVcE93b2dJQ0FnZlFwOUxDQlpZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdYMlVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDSkpibk4wWVc1alpXUkNkV1ptWlhKSFpXOXRaWFJ5ZVNJc0lIUm9hWE11YVc1emRHRnVZMlZEYjNWdWRDQTlJREVnTHlBd093b2dJQ0FnZlFvZ0lDQWdZMjl3ZVNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1OdmNIa29aU2tzSUhSb2FYTXVhVzV6ZEdGdVkyVkRiM1Z1ZENBOUlHVXVhVzV6ZEdGdVkyVkRiM1Z1ZEN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0J6ZFhCbGNpNTBiMHBUVDA0b2RHaHBjeWs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1YVc1emRHRnVZMlZEYjNWdWRDQTlJSFJvYVhNdWFXNXpkR0Z1WTJWRGIzVnVkQ3dnWlM1cGMwbHVjM1JoYm1ObFpFSjFabVpsY2tkbGIyMWxkSEo1SUQwZ0lUQXNJR1U3Q2lBZ0lDQjlDbjA3Q2xsaExuQnliM1J2ZEhsd1pTNXBjMGx1YzNSaGJtTmxaRUoxWm1abGNrZGxiMjFsZEhKNUlEMGdJVEE3Q25aaGNpQlZhQ0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdZblFnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvWlNrN0NpQWdJQ0I5Q2lBZ0lDQnNiMkZrS0dVc0lIUXNJRzRzSUdrcElIc0tJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlIUm9hWE1zSUc4Z1BTQnVaWGNnV1hRb2NpNXRZVzVoWjJWeUtUc0tJQ0FnSUNBZ0lDQnZMbk5sZEZCaGRHZ29jaTV3WVhSb0tTd2dieTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLSEl1Y21WeGRXVnpkRWhsWVdSbGNpa3NJRzh1YzJWMFYybDBhRU55WldSbGJuUnBZV3h6S0hJdWQybDBhRU55WldSbGJuUnBZV3h6S1N3Z2J5NXNiMkZrS0dVc0lHWjFibU4wYVc5dUtHRXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFFvY2k1d1lYSnpaU2hLVTA5T0xuQmhjbk5sS0dFcEtTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0d3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQeUJwS0d3cElEb2dZMjl1YzI5c1pTNWxjbkp2Y2loc0tTd2djaTV0WVc1aFoyVnlMbWwwWlcxRmNuSnZjaWhsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBzSUc0c0lHa3BPd29nSUNBZ2ZRb2dJQ0FnY0dGeWMyVW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZTMwc0lHNGdQU0I3ZlRzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCcEtHWXNJRzBwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSYmJWMGdJVDA5SUhadmFXUWdNQ2tnY21WMGRYSnVJSFJiYlYwN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMklEMGdaaTVwYm5SbGNteGxZWFpsWkVKMVptWmxjbk5iYlYwc0lHY2dQU0J5S0dZc0lIWXVZblZtWm1WeUtTd2djQ0E5SUhkcEtIWXVkSGx3WlN3Z1p5a3NJRjhnUFNCdVpYY2dKRzRvY0N3Z2RpNXpkSEpwWkdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYeTUxZFdsa0lEMGdkaTUxZFdsa0xDQjBXMjFkSUQwZ1h5d2dYenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnY2lobUxDQnRLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1VzIxZElDRTlQU0IyYjJsa0lEQXBJSEpsZEhWeWJpQnVXMjFkT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZGlBOUlHWXVZWEp5WVhsQ2RXWm1aWEp6VzIxZExDQm5JRDBnYm1WM0lGVnBiblF6TWtGeWNtRjVLSFlwTG1KMVptWmxjanNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1YmJWMGdQU0JuTENCbk93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYnlBOUlHVXVhWE5KYm5OMFlXNWpaV1JDZFdabVpYSkhaVzl0WlhSeWVTQS9JRzVsZHlCWllTQTZJRzVsZHlCZlpTd2dZU0E5SUdVdVpHRjBZUzVwYm1SbGVEc0tJQ0FnSUNBZ0lDQnBaaUFvWVNBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnZDJrb1lTNTBlWEJsTENCaExtRnljbUY1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdieTV6WlhSSmJtUmxlQ2h1WlhjZ1ZXVW9aaXdnTVNrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlHVXVaR0YwWVM1aGRIUnlhV0oxZEdWek93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1ppQnBiaUJzS1hzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcwZ1BTQnNXMlpkTENCNE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JTNXBjMGx1ZEdWeWJHVmhkbVZrUW5WbVptVnlRWFIwY21saWRYUmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RpQTlJR2tvWlM1a1lYUmhMQ0J0TG1SaGRHRXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlQ0E5SUc1bGR5QlRiaWgyTENCdExtbDBaVzFUYVhwbExDQnRMbTltWm5ObGRDd2diUzV1YjNKdFlXeHBlbVZrS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2Qya29iUzUwZVhCbExDQnRMbUZ5Y21GNUtTd2daeUE5SUcwdWFYTkpibk4wWVc1alpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVZ1B5QlliaUE2SUZWbE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDQTlJRzVsZHlCbktIWXNJRzB1YVhSbGJWTnBlbVVzSUcwdWJtOXliV0ZzYVhwbFpDazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiUzV1WVcxbElDRTlQU0IyYjJsa0lEQWdKaVlnS0hndWJtRnRaU0E5SUcwdWJtRnRaU2tzSUcwdWRYTmhaMlVnSVQwOUlIWnZhV1FnTUNBbUppQjRMbk5sZEZWellXZGxLRzB1ZFhOaFoyVXBMQ0J0TG5Wd1pHRjBaVkpoYm1kbElDRTlQU0IyYjJsa0lEQWdKaVlnS0hndWRYQmtZWFJsVW1GdVoyVXViMlptYzJWMElEMGdiUzUxY0dSaGRHVlNZVzVuWlM1dlptWnpaWFFzSUhndWRYQmtZWFJsVW1GdVoyVXVZMjkxYm5RZ1BTQnRMblZ3WkdGMFpWSmhibWRsTG1OdmRXNTBLU3dnYnk1elpYUkJkSFJ5YVdKMWRHVW9aaXdnZUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ1pTNWtZWFJoTG0xdmNuQm9RWFIwY21saWRYUmxjenNLSUNBZ0lDQWdJQ0JwWmlBb1l5a2dabTl5S0d4bGRDQm1JR2x1SUdNcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JTQTlJR05iWmwwc0lIZ2dQU0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQjJJRDBnTUN3Z1p5QTlJRzB1YkdWdVozUm9PeUIySUR3Z1p6c2dkaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQndJRDBnYlZ0MlhTd2dYenNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod0xtbHpTVzUwWlhKc1pXRjJaV1JDZFdabVpYSkJkSFJ5YVdKMWRHVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlU0E5SUdrb1pTNWtZWFJoTENCd0xtUmhkR0VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOGdQU0J1WlhjZ1UyNG9lU3dnY0M1cGRHVnRVMmw2WlN3Z2NDNXZabVp6WlhRc0lIQXVibTl5YldGc2FYcGxaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjVJRDBnZDJrb2NDNTBlWEJsTENCd0xtRnljbUY1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZJRDBnYm1WM0lGVmxLSGtzSUhBdWFYUmxiVk5wZW1Vc0lIQXVibTl5YldGc2FYcGxaQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3TG01aGJXVWdJVDA5SUhadmFXUWdNQ0FtSmlBb1h5NXVZVzFsSUQwZ2NDNXVZVzFsS1N3Z2VDNXdkWE5vS0Y4cE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHOHViVzl5Y0doQmRIUnlhV0oxZEdWelcyWmRJRDBnZURzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1pTNWtZWFJoTG0xdmNuQm9WR0Z5WjJWMGMxSmxiR0YwYVhabElDWW1JQ2h2TG0xdmNuQm9WR0Z5WjJWMGMxSmxiR0YwYVhabElEMGdJVEFwT3dvZ0lDQWdJQ0FnSUd4bGRDQjFJRDBnWlM1a1lYUmhMbWR5YjNWd2N5QjhmQ0JsTG1SaGRHRXVaSEpoZDJOaGJHeHpJSHg4SUdVdVpHRjBZUzV2Wm1aelpYUnpPd29nSUNBZ0lDQWdJR2xtSUNoMUlDRTlQU0IyYjJsa0lEQXBJR1p2Y2loc1pYUWdaaUE5SURBc0lHMGdQU0IxTG14bGJtZDBhRHNnWmlBaFBUMGdiVHNnS3l0bUtYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIZ2dQU0IxVzJaZE93b2dJQ0FnSUNBZ0lDQWdJQ0J2TG1Ga1pFZHliM1Z3S0hndWMzUmhjblFzSUhndVkyOTFiblFzSUhndWJXRjBaWEpwWVd4SmJtUmxlQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnWlM1a1lYUmhMbUp2ZFc1a2FXNW5VM0JvWlhKbE93b2dJQ0FnSUNBZ0lHbG1JQ2hrSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWWdQU0J1WlhjZ1RUc0tJQ0FnSUNBZ0lDQWdJQ0FnWkM1alpXNTBaWElnSVQwOUlIWnZhV1FnTUNBbUppQm1MbVp5YjIxQmNuSmhlU2hrTG1ObGJuUmxjaWtzSUc4dVltOTFibVJwYm1kVGNHaGxjbVVnUFNCdVpYY2dRVzRvWml3Z1pDNXlZV1JwZFhNcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXVZVzFsSUNZbUlDaHZMbTVoYldVZ1BTQmxMbTVoYldVcExDQmxMblZ6WlhKRVlYUmhJQ1ltSUNodkxuVnpaWEpFWVhSaElEMGdaUzUxYzJWeVJHRjBZU2tzSUc4N0NpQWdJQ0I5Q24wc0lIVjVJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsS1RzS0lDQWdJSDBLSUNBZ0lHeHZZV1FvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeXdnYnlBOUlIUm9hWE11Y0dGMGFDQTlQVDBnSWlJZ1B5QkhjeTVsZUhSeVlXTjBWWEpzUW1GelpTaGxLU0E2SUhSb2FYTXVjR0YwYURzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzI5MWNtTmxVR0YwYUNBOUlIUm9hWE11Y21WemIzVnlZMlZRWVhSb0lIeDhJRzg3Q2lBZ0lDQWdJQ0FnYkdWMElHRWdQU0J1WlhjZ1dYUW9kR2hwY3k1dFlXNWhaMlZ5S1RzS0lDQWdJQ0FnSUNCaExuTmxkRkJoZEdnb2RHaHBjeTV3WVhSb0tTd2dZUzV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLSFJvYVhNdWNtVnhkV1Z6ZEVobFlXUmxjaWtzSUdFdWMyVjBWMmwwYUVOeVpXUmxiblJwWVd4ektIUm9hWE11ZDJsMGFFTnlaV1JsYm5ScFlXeHpLU3dnWVM1c2IyRmtLR1VzSUdaMWJtTjBhVzl1S0d3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTWdQU0J1ZFd4c093b2dJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5QTlJRXBUVDA0dWNHRnljMlVvYkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLSFVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ0lUMDlJSFp2YVdRZ01DQW1KaUJwS0hVcExDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSVHBQWW1wbFkzUk1iMkZrWlhJNklFTmhiaWQwSUhCaGNuTmxJQ0lnS3lCbElDc2dJaTRpTENCMUxtMWxjM05oWjJVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9JRDBnWXk1dFpYUmhaR0YwWVRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dnZ1BUMDlJSFp2YVdRZ01DQjhmQ0JvTG5SNWNHVWdQVDA5SUhadmFXUWdNQ0I4ZkNCb0xuUjVjR1V1ZEc5TWIzZGxja05oYzJVb0tTQTlQVDBnSW1kbGIyMWxkSEo1SWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVUMkpxWldOMFRHOWhaR1Z5T2lCRFlXNG5kQ0JzYjJGa0lDSWdLeUJsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0J5TG5CaGNuTmxLR01zSUhRcE93b2dJQ0FnSUNBZ0lIMHNJRzRzSUdrcE93b2dJQ0FnZlFvZ0lDQWdZWE41Ym1NZ2JHOWhaRUZ6ZVc1aktHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXNJR2tnUFNCMGFHbHpMbkJoZEdnZ1BUMDlJQ0lpSUQ4Z1IzTXVaWGgwY21GamRGVnliRUpoYzJVb1pTa2dPaUIwYUdsekxuQmhkR2c3Q2lBZ0lDQWdJQ0FnZEdocGN5NXlaWE52ZFhKalpWQmhkR2dnUFNCMGFHbHpMbkpsYzI5MWNtTmxVR0YwYUNCOGZDQnBPd29nSUNBZ0lDQWdJR3hsZENCeUlEMGdibVYzSUZsMEtIUm9hWE11YldGdVlXZGxjaWs3Q2lBZ0lDQWdJQ0FnY2k1elpYUlFZWFJvS0hSb2FYTXVjR0YwYUNrc0lISXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaDBhR2x6TG5KbGNYVmxjM1JJWldGa1pYSXBMQ0J5TG5ObGRGZHBkR2hEY21Wa1pXNTBhV0ZzY3loMGFHbHpMbmRwZEdoRGNtVmtaVzUwYVdGc2N5azdDaUFnSUNBZ0lDQWdiR1YwSUc4Z1BTQmhkMkZwZENCeUxteHZZV1JCYzNsdVl5aGxMQ0IwS1N3Z1lTQTlJRXBUVDA0dWNHRnljMlVvYnlrc0lHd2dQU0JoTG0xbGRHRmtZWFJoT3dvZ0lDQWdJQ0FnSUdsbUlDaHNJRDA5UFNCMmIybGtJREFnZkh3Z2JDNTBlWEJsSUQwOVBTQjJiMmxrSURBZ2ZId2diQzUwZVhCbExuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlDSm5aVzl0WlhSeWVTSXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ2lWRWhTUlVVdVQySnFaV04wVEc5aFpHVnlPaUJEWVc0bmRDQnNiMkZrSUNJZ0t5QmxLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWGRoYVhRZ2JpNXdZWEp6WlVGemVXNWpLR0VwT3dvZ0lDQWdmUW9nSUNBZ2NHRnljMlVvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdkR2hwY3k1d1lYSnpaVUZ1YVcxaGRHbHZibk1vWlM1aGJtbHRZWFJwYjI1ektTd2dhU0E5SUhSb2FYTXVjR0Z5YzJWVGFHRndaWE1vWlM1emFHRndaWE1wTENCeUlEMGdkR2hwY3k1d1lYSnpaVWRsYjIxbGRISnBaWE1vWlM1blpXOXRaWFJ5YVdWekxDQnBLU3dnYnlBOUlIUm9hWE11Y0dGeWMyVkpiV0ZuWlhNb1pTNXBiV0ZuWlhNc0lHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCMElDRTlQU0IyYjJsa0lEQWdKaVlnZENoaktUc0tJQ0FnSUNBZ0lDQjlLU3dnWVNBOUlIUm9hWE11Y0dGeWMyVlVaWGgwZFhKbGN5aGxMblJsZUhSMWNtVnpMQ0J2S1N3Z2JDQTlJSFJvYVhNdWNHRnljMlZOWVhSbGNtbGhiSE1vWlM1dFlYUmxjbWxoYkhNc0lHRXBMQ0JqSUQwZ2RHaHBjeTV3WVhKelpVOWlhbVZqZENobExtOWlhbVZqZEN3Z2Npd2diQ3dnWVN3Z2Jpa3NJR2dnUFNCMGFHbHpMbkJoY25ObFUydGxiR1YwYjI1ektHVXVjMnRsYkdWMGIyNXpMQ0JqS1RzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1aWFXNWtVMnRsYkdWMGIyNXpLR01zSUdncExDQjBJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhVZ1BTQWhNVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCa0lHbHVJRzhwYVdZZ0tHOWJaRjBnYVc1emRHRnVZMlZ2WmlCSVZFMU1TVzFoWjJWRmJHVnRaVzUwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMUlEMGdJVEE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjFJRDA5UFNBaE1TQW1KaUIwS0dNcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z1l6c0tJQ0FnSUgwS0lDQWdJR0Z6ZVc1aklIQmhjbk5sUVhONWJtTW9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnZEdocGN5NXdZWEp6WlVGdWFXMWhkR2x2Ym5Nb1pTNWhibWx0WVhScGIyNXpLU3dnYmlBOUlIUm9hWE11Y0dGeWMyVlRhR0Z3WlhNb1pTNXphR0Z3WlhNcExDQnBJRDBnZEdocGN5NXdZWEp6WlVkbGIyMWxkSEpwWlhNb1pTNW5aVzl0WlhSeWFXVnpMQ0J1S1N3Z2NpQTlJR0YzWVdsMElIUm9hWE11Y0dGeWMyVkpiV0ZuWlhOQmMzbHVZeWhsTG1sdFlXZGxjeWtzSUc4Z1BTQjBhR2x6TG5CaGNuTmxWR1Y0ZEhWeVpYTW9aUzUwWlhoMGRYSmxjeXdnY2lrc0lHRWdQU0IwYUdsekxuQmhjbk5sVFdGMFpYSnBZV3h6S0dVdWJXRjBaWEpwWVd4ekxDQnZLU3dnYkNBOUlIUm9hWE11Y0dGeWMyVlBZbXBsWTNRb1pTNXZZbXBsWTNRc0lHa3NJR0VzSUc4c0lIUXBMQ0JqSUQwZ2RHaHBjeTV3WVhKelpWTnJaV3hsZEc5dWN5aGxMbk5yWld4bGRHOXVjeXdnYkNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZbWx1WkZOclpXeGxkRzl1Y3loc0xDQmpLU3dnYkRzS0lDQWdJSDBLSUNBZ0lIQmhjbk5sVTJoaGNHVnpLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUh0OU93b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQjJiMmxrSURBcElHWnZjaWhzWlhRZ2JpQTlJREFzSUdrZ1BTQmxMbXhsYm1kMGFEc2diaUE4SUdrN0lHNHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2JtVjNJRmgwS0NrdVpuSnZiVXBUVDA0b1pWdHVYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUmJjaTUxZFdsa1hTQTlJSEk3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwT3dvZ0lDQWdmUW9nSUNBZ2NHRnljMlZUYTJWc1pYUnZibk1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdlMzBzSUdrZ1BTQjdmVHNLSUNBZ0lDQWdJQ0JwWmlBb2RDNTBjbUYyWlhKelpTaG1kVzVqZEdsdmJpaHlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISXVhWE5DYjI1bElDWW1JQ2hwVzNJdWRYVnBaRjBnUFNCeUtUc0tJQ0FnSUNBZ0lDQjlLU3dnWlNBaFBUMGdkbTlwWkNBd0tTQm1iM0lvYkdWMElISWdQU0F3TENCdklEMGdaUzVzWlc1bmRHZzdJSElnUENCdk95QnlLeXNwZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlHNWxkeUJoYnlncExtWnliMjFLVTA5T0tHVmJjbDBzSUdrcE93b2dJQ0FnSUNBZ0lDQWdJQ0J1VzJFdWRYVnBaRjBnUFNCaE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2Jqc0tJQ0FnSUgwS0lDQWdJSEJoY25ObFIyVnZiV1YwY21sbGN5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCN2ZUc0tJQ0FnSUNBZ0lDQnBaaUFvWlNBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnYm1WM0lGVm9Pd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhJZ1BTQXdMQ0J2SUQwZ1pTNXNaVzVuZEdnN0lISWdQQ0J2T3lCeUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdFc0lHd2dQU0JsVzNKZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0d3dWRIbHdaU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpUW5WbVptVnlSMlZ2YldWMGNua2lPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJa2x1YzNSaGJtTmxaRUoxWm1abGNrZGxiMjFsZEhKNUlqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJR2t1Y0dGeWMyVW9iQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lrZGxiMjFsZEhKNUlqb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVUMkpxWldOMFRHOWhaR1Z5T2lCVWFHVWdiR1ZuWVdONUlFZGxiMjFsZEhKNUlIUjVjR1VnYVhNZ2JtOGdiRzl1WjJWeUlITjFjSEJ2Y25SbFpDNGlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDNTBlWEJsSUdsdUlIWmpJRDhnWVNBOUlIWmpXMnd1ZEhsd1pWMHVabkp2YlVwVFQwNG9iQ3dnZENrZ09pQmpiMjV6YjJ4bExuZGhjbTRvWUZSSVVrVkZMazlpYW1WamRFeHZZV1JsY2pvZ1ZXNXpkWEJ3YjNKMFpXUWdaMlZ2YldWMGNua2dkSGx3WlNBaUpIdHNMblI1Y0dWOUltQXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZUzUxZFdsa0lEMGdiQzUxZFdsa0xDQnNMbTVoYldVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvWVM1dVlXMWxJRDBnYkM1dVlXMWxLU3dnWVM1cGMwSjFabVpsY2tkbGIyMWxkSEo1SUQwOVBTQWhNQ0FtSmlCc0xuVnpaWEpFWVhSaElDRTlQU0IyYjJsa0lEQWdKaVlnS0dFdWRYTmxja1JoZEdFZ1BTQnNMblZ6WlhKRVlYUmhLU3dnYmx0c0xuVjFhV1JkSUQwZ1lUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmpzS0lDQWdJSDBLSUNBZ0lIQmhjbk5sVFdGMFpYSnBZV3h6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSHQ5TENCcElEMGdlMzA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdJVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHNWxkeUI2YURzS0lDQWdJQ0FnSUNBZ0lDQWdjaTV6WlhSVVpYaDBkWEpsY3loMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J2SUQwZ01Dd2dZU0E5SUdVdWJHVnVaM1JvT3lCdklEd2dZVHNnYnlzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1pWdHZYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc0xuUjVjR1VnUFQwOUlDSk5kV3gwYVUxaGRHVnlhV0ZzSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCb0lEMGdNRHNnYUNBOElHd3ViV0YwWlhKcFlXeHpMbXhsYm1kMGFEc2dhQ3NyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVWdQU0JzTG0xaGRHVnlhV0ZzYzF0b1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JsdDFMblYxYVdSZElEMDlQU0IyYjJsa0lEQWdKaVlnS0c1YmRTNTFkV2xrWFNBOUlISXVjR0Z5YzJVb2RTa3BMQ0JqTG5CMWMyZ29ibHQxTG5WMWFXUmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVnRzTG5WMWFXUmRJRDBnWXpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J1VzJ3dWRYVnBaRjBnUFQwOUlIWnZhV1FnTUNBbUppQW9ibHRzTG5WMWFXUmRJRDBnY2k1d1lYSnpaU2hzS1Nrc0lHbGJiQzUxZFdsa1hTQTlJRzViYkM1MWRXbGtYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2FUc0tJQ0FnSUgwS0lDQWdJSEJoY25ObFFXNXBiV0YwYVc5dWN5aGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0I3ZlRzS0lDQWdJQ0FnSUNCcFppQW9aU0FoUFQwZ2RtOXBaQ0F3S1NCbWIzSW9iR1YwSUc0Z1BTQXdPeUJ1SUR3Z1pTNXNaVzVuZEdnN0lHNHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwSUQwZ1pWdHVYU3dnY2lBOUlFeHlMbkJoY25ObEtHa3BPd29nSUNBZ0lDQWdJQ0FnSUNCMFczSXVkWFZwWkYwZ1BTQnlPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkRHNLSUNBZ0lIMEtJQ0FnSUhCaGNuTmxTVzFoWjJWektHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXNJR2tnUFNCN2ZTd2djanNLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ2S0d3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzR1YldGdVlXZGxjaTVwZEdWdFUzUmhjblFvYkNrc0lISXViRzloWkNoc0xDQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzR1YldGdVlXZGxjaTVwZEdWdFJXNWtLR3dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0IyYjJsa0lEQXNJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYmk1dFlXNWhaMlZ5TG1sMFpXMUZjbkp2Y2loc0tTd2diaTV0WVc1aFoyVnlMbWwwWlcxRmJtUW9iQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJoS0d3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCc0lEMDlJQ0p6ZEhKcGJtY2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJR3dzSUdnZ1BTQXZYaWhjTDF3dktYd29XMkV0ZWwwck9paGNMMXd2S1Q4cEwya3VkR1Z6ZENoaktTQS9JR01nT2lCdUxuSmxjMjkxY21ObFVHRjBhQ0FySUdNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYnlob0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSEpsZEhWeWJpQnNMbVJoZEdFZ1B5QjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCM2FTaHNMblI1Y0dVc0lHd3VaR0YwWVNrc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nYkM1M2FXUjBhQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2diQzVvWldsbmFIUUtJQ0FnSUNBZ0lDQWdJQ0FnZlNBNklHNTFiR3c3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaGxJQ0U5UFNCMmIybGtJREFnSmlZZ1pTNXNaVzVuZEdnZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ2JtVjNJSHBoS0hRcE93b2dJQ0FnSUNBZ0lDQWdJQ0J5SUQwZ2JtVjNJRkp5S0d3cExDQnlMbk5sZEVOeWIzTnpUM0pwWjJsdUtIUm9hWE11WTNKdmMzTlBjbWxuYVc0cE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR01nUFNBd0xDQm9JRDBnWlM1c1pXNW5kR2c3SUdNZ1BDQm9PeUJqS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCbFcyTmRMQ0JrSUQwZ2RTNTFjbXc3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hrS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xiZFM1MWRXbGtYU0E5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaaUE5SURBc0lHMGdQU0JrTG14bGJtZDBhRHNnWmlBOElHMDdJR1lyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjRJRDBnWkZ0bVhTd2dkaUE5SUdFb2VDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWWdJVDA5SUc1MWJHd2dKaVlnS0hZZ2FXNXpkR0Z1WTJWdlppQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MElEOGdhVnQxTG5WMWFXUmRMbkIxYzJnb2Rpa2dPaUJwVzNVdWRYVnBaRjB1Y0hWemFDaHVaWGNnY1c0b2RpNWtZWFJoTENCMkxuZHBaSFJvTENCMkxtaGxhV2RvZENrcEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1JRDBnWVNoMUxuVnliQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ppQWhQVDBnYm5Wc2JDQW1KaUFvYVZ0MUxuVjFhV1JkSUQwZ1ppazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdrN0NpQWdJQ0I5Q2lBZ0lDQmhjM2x1WXlCd1lYSnpaVWx0WVdkbGMwRnplVzVqS0dVcElIc0tJQ0FnSUNBZ0lDQnNaWFFnZENBOUlIUm9hWE1zSUc0Z1BTQjdmU3dnYVRzS0lDQWdJQ0FnSUNCaGMzbHVZeUJtZFc1amRHbHZiaUJ5S0c4cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdklEMDlJQ0p6ZEhKcGJtY2lLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJRzhzSUd3Z1BTQXZYaWhjTDF3dktYd29XMkV0ZWwwck9paGNMMXd2S1Q4cEwya3VkR1Z6ZENoaEtTQS9JR0VnT2lCMExuSmxjMjkxY21ObFVHRjBhQ0FySUdFN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhkaGFYUWdhUzVzYjJGa1FYTjVibU1vYkNrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnlaWFIxY200Z2J5NWtZWFJoSUQ4Z2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nZDJrb2J5NTBlWEJsTENCdkxtUmhkR0VwTEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJRzh1ZDJsa2RHZ3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHOHVhR1ZwWjJoMENpQWdJQ0FnSUNBZ0lDQWdJSDBnT2lCdWRXeHNPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb1pTQWhQVDBnZG05cFpDQXdJQ1ltSUdVdWJHVnVaM1JvSUQ0Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNCcElEMGdibVYzSUZKeUtIUm9hWE11YldGdVlXZGxjaWtzSUdrdWMyVjBRM0p2YzNOUGNtbG5hVzRvZEdocGN5NWpjbTl6YzA5eWFXZHBiaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREFzSUdFZ1BTQmxMbXhsYm1kMGFEc2dieUE4SUdFN0lHOHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJR1ZiYjEwc0lHTWdQU0JzTG5WeWJEc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHTXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JsdHNMblYxYVdSZElEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCb0lEMGdNQ3dnZFNBOUlHTXViR1Z1WjNSb095Qm9JRHdnZFRzZ2FDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQmpXMmhkTENCbUlEMGdZWGRoYVhRZ2NpaGtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaUFoUFQwZ2JuVnNiQ0FtSmlBb1ppQnBibk4wWVc1alpXOW1JRWhVVFV4SmJXRm5aVVZzWlcxbGJuUWdQeUJ1VzJ3dWRYVnBaRjB1Y0hWemFDaG1LU0E2SUc1YmJDNTFkV2xrWFM1d2RYTm9LRzVsZHlCeGJpaG1MbVJoZEdFc0lHWXVkMmxrZEdnc0lHWXVhR1ZwWjJoMEtTa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2dnUFNCaGQyRnBkQ0J5S0d3dWRYSnNLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb0lDRTlQU0J1ZFd4c0lDWW1JQ2h1VzJ3dWRYVnBaRjBnUFNCb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmpzS0lDQWdJSDBLSUNBZ0lIQmhjbk5sVkdWNGRIVnlaWE1vWlN3Z2RDa2dld29nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRzRvY2l3Z2J5a2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JSElnUFQwZ0ltNTFiV0psY2lJZ1B5QnlJRG9nS0dOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVQySnFaV04wVEc5aFpHVnlMbkJoY25ObFZHVjRkSFZ5WlRvZ1EyOXVjM1JoYm5RZ2MyaHZkV3hrSUdKbElHbHVJRzUxYldWeWFXTWdabTl5YlM0aUxDQnlLU3dnYjF0eVhTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCcElEMGdlMzA3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVWdJVDA5SUhadmFXUWdNQ2tnWm05eUtHeGxkQ0J5SUQwZ01Dd2dieUE5SUdVdWJHVnVaM1JvT3lCeUlEd2dienNnY2lzcktYc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0JsVzNKZE93b2dJQ0FnSUNBZ0lDQWdJQ0JoTG1sdFlXZGxJRDA5UFNCMmIybGtJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ2RVU0ZKRlJTNVBZbXBsWTNSTWIyRmtaWEk2SUU1dklDSnBiV0ZuWlNJZ2MzQmxZMmxtYVdWa0lHWnZjaWNzSUdFdWRYVnBaQ2tzSUhSYllTNXBiV0ZuWlYwZ1BUMDlJSFp2YVdRZ01DQW1KaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGs5aWFtVmpkRXh2WVdSbGNqb2dWVzVrWldacGJtVmtJR2x0WVdkbElpd2dZUzVwYldGblpTazdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnNMQ0JqSUQwZ2RGdGhMbWx0WVdkbFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnUVhKeVlYa3VhWE5CY25KaGVTaGpLU0EvSUNoc0lEMGdibVYzSUd0cEtHTXBMQ0JqTG14bGJtZDBhQ0E5UFQwZ05pQW1KaUFvYkM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3S1NrZ09pQW9ZeUFtSmlCakxtUmhkR0VnUHlCc0lEMGdibVYzSUhGdUtHTXVaR0YwWVN3Z1l5NTNhV1IwYUN3Z1l5NW9aV2xuYUhRcElEb2diQ0E5SUc1bGR5QnZkQ2hqS1N3Z1l5QW1KaUFvYkM1dVpXVmtjMVZ3WkdGMFpTQTlJQ0V3S1Nrc0lHd3VkWFZwWkNBOUlHRXVkWFZwWkN3Z1lTNXVZVzFsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR3d1Ym1GdFpTQTlJR0V1Ym1GdFpTa3NJR0V1YldGd2NHbHVaeUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHNMbTFoY0hCcGJtY2dQU0J1S0dFdWJXRndjR2x1Wnl3Z1pIa3BLU3dnWVM1dlptWnpaWFFnSVQwOUlIWnZhV1FnTUNBbUppQnNMbTltWm5ObGRDNW1jbTl0UVhKeVlYa29ZUzV2Wm1aelpYUXBMQ0JoTG5KbGNHVmhkQ0FoUFQwZ2RtOXBaQ0F3SUNZbUlHd3VjbVZ3WldGMExtWnliMjFCY25KaGVTaGhMbkpsY0dWaGRDa3NJR0V1WTJWdWRHVnlJQ0U5UFNCMmIybGtJREFnSmlZZ2JDNWpaVzUwWlhJdVpuSnZiVUZ5Y21GNUtHRXVZMlZ1ZEdWeUtTd2dZUzV5YjNSaGRHbHZiaUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHNMbkp2ZEdGMGFXOXVJRDBnWVM1eWIzUmhkR2x2Ymlrc0lHRXVkM0poY0NBaFBUMGdkbTlwWkNBd0lDWW1JQ2hzTG5keVlYQlRJRDBnYmloaExuZHlZWEJiTUYwc0lGTmpLU3dnYkM1M2NtRndWQ0E5SUc0b1lTNTNjbUZ3V3pGZExDQlRZeWtwTENCaExtWnZjbTFoZENBaFBUMGdkbTlwWkNBd0lDWW1JQ2hzTG1admNtMWhkQ0E5SUdFdVptOXliV0YwS1N3Z1lTNTBlWEJsSUNFOVBTQjJiMmxrSURBZ0ppWWdLR3d1ZEhsd1pTQTlJR0V1ZEhsd1pTa3NJR0V1Wlc1amIyUnBibWNnSVQwOUlIWnZhV1FnTUNBbUppQW9iQzVsYm1OdlpHbHVaeUE5SUdFdVpXNWpiMlJwYm1jcExDQmhMbTFwYmtacGJIUmxjaUFoUFQwZ2RtOXBaQ0F3SUNZbUlDaHNMbTFwYmtacGJIUmxjaUE5SUc0b1lTNXRhVzVHYVd4MFpYSXNJRlJqS1Nrc0lHRXViV0ZuUm1sc2RHVnlJQ0U5UFNCMmIybGtJREFnSmlZZ0tHd3ViV0ZuUm1sc2RHVnlJRDBnYmloaExtMWhaMFpwYkhSbGNpd2dWR01wS1N3Z1lTNWhibWx6YjNSeWIzQjVJQ0U5UFNCMmIybGtJREFnSmlZZ0tHd3VZVzVwYzI5MGNtOXdlU0E5SUdFdVlXNXBjMjkwY205d2VTa3NJR0V1Wm14cGNGa2dJVDA5SUhadmFXUWdNQ0FtSmlBb2JDNW1iR2x3V1NBOUlHRXVabXhwY0ZrcExDQmhMbkJ5WlcxMWJIUnBjR3g1UVd4d2FHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb2JDNXdjbVZ0ZFd4MGFYQnNlVUZzY0doaElEMGdZUzV3Y21WdGRXeDBhWEJzZVVGc2NHaGhLU3dnWVM1MWJuQmhZMnRCYkdsbmJtMWxiblFnSVQwOUlIWnZhV1FnTUNBbUppQW9iQzUxYm5CaFkydEJiR2xuYm0xbGJuUWdQU0JoTG5WdWNHRmphMEZzYVdkdWJXVnVkQ2tzSUdFdWRYTmxja1JoZEdFZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYkM1MWMyVnlSR0YwWVNBOUlHRXVkWE5sY2tSaGRHRXBMQ0JwVzJFdWRYVnBaRjBnUFNCc093b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2FUc0tJQ0FnSUgwS0lDQWdJSEJoY25ObFQySnFaV04wS0dVc0lIUXNJRzRzSUdrc0lISXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2J6c0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmhLR1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUmJaRjBnUFQwOUlIWnZhV1FnTUNBbUppQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMazlpYW1WamRFeHZZV1JsY2pvZ1ZXNWtaV1pwYm1Wa0lHZGxiMjFsZEhKNUlpd2daQ2tzSUhSYlpGMDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR3dvWkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pDQWhQVDBnZG05cFpDQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hrS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbUlEMGdXMTA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdElEMGdNQ3dnZUNBOUlHUXViR1Z1WjNSb095QnRJRHdnZURzZ2JTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhZZ1BTQmtXMjFkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1VzNaZElEMDlQU0IyYjJsa0lEQWdKaVlnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1UFltcGxZM1JNYjJGa1pYSTZJRlZ1WkdWbWFXNWxaQ0J0WVhSbGNtbGhiQ0lzSUhZcExDQm1MbkIxYzJnb2JsdDJYU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWJaRjBnUFQwOUlIWnZhV1FnTUNBbUppQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMazlpYW1WamRFeHZZV1JsY2pvZ1ZXNWtaV1pwYm1Wa0lHMWhkR1Z5YVdGc0lpd2daQ2tzSUc1YlpGMDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1l5aGtLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcFcyUmRJRDA5UFNCMmIybGtJREFnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVBZbXBsWTNSTWIyRmtaWEk2SUZWdVpHVm1hVzVsWkNCMFpYaDBkWEpsSWl3Z1pDa3NJR2xiWkYwN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JvTENCMU93b2dJQ0FnSUNBZ0lITjNhWFJqYUNobExuUjVjR1VwZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKVFkyVnVaU0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2SUQwZ2JtVjNJRzV2TENCbExtSmhZMnRuY205MWJtUWdJVDA5SUhadmFXUWdNQ0FtSmlBb1RuVnRZbVZ5TG1selNXNTBaV2RsY2lobExtSmhZMnRuY205MWJtUXBJRDhnYnk1aVlXTnJaM0p2ZFc1a0lEMGdibVYzSUdGbEtHVXVZbUZqYTJkeWIzVnVaQ2tnT2lCdkxtSmhZMnRuY205MWJtUWdQU0JqS0dVdVltRmphMmR5YjNWdVpDa3BMQ0JsTG1WdWRtbHliMjV0Wlc1MElDRTlQU0IyYjJsa0lEQWdKaVlnS0c4dVpXNTJhWEp2Ym0xbGJuUWdQU0JqS0dVdVpXNTJhWEp2Ym0xbGJuUXBLU3dnWlM1bWIyY2dJVDA5SUhadmFXUWdNQ0FtSmlBb1pTNW1iMmN1ZEhsd1pTQTlQVDBnSWtadlp5SWdQeUJ2TG1adlp5QTlJRzVsZHlCQ2NpaGxMbVp2Wnk1amIyeHZjaXdnWlM1bWIyY3VibVZoY2l3Z1pTNW1iMmN1Wm1GeUtTQTZJR1V1Wm05bkxuUjVjR1VnUFQwOUlDSkdiMmRGZUhBeUlpQW1KaUFvYnk1bWIyY2dQU0J1WlhjZ1RuSW9aUzVtYjJjdVkyOXNiM0lzSUdVdVptOW5MbVJsYm5OcGRIa3BLU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlVR1Z5YzNCbFkzUnBkbVZEWVcxbGNtRWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieUE5SUc1bGR5QjFkQ2hsTG1admRpd2daUzVoYzNCbFkzUXNJR1V1Ym1WaGNpd2daUzVtWVhJcExDQmxMbVp2WTNWeklDRTlQU0IyYjJsa0lEQWdKaVlnS0c4dVptOWpkWE1nUFNCbExtWnZZM1Z6S1N3Z1pTNTZiMjl0SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1ZW05dmJTQTlJR1V1ZW05dmJTa3NJR1V1Wm1sc2JVZGhkV2RsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1Wm1sc2JVZGhkV2RsSUQwZ1pTNW1hV3h0UjJGMVoyVXBMQ0JsTG1acGJHMVBabVp6WlhRZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYnk1bWFXeHRUMlptYzJWMElEMGdaUzVtYVd4dFQyWm1jMlYwS1N3Z1pTNTJhV1YzSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1ZG1sbGR5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR1V1ZG1sbGR5a3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lrOXlkR2h2WjNKaGNHaHBZME5oYldWeVlTSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYm1WM0lFWnlLR1V1YkdWbWRDd2daUzV5YVdkb2RDd2daUzUwYjNBc0lHVXVZbTkwZEc5dExDQmxMbTVsWVhJc0lHVXVabUZ5S1N3Z1pTNTZiMjl0SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1ZW05dmJTQTlJR1V1ZW05dmJTa3NJR1V1ZG1sbGR5QWhQVDBnZG05cFpDQXdJQ1ltSUNodkxuWnBaWGNnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbExuWnBaWGNwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pCYldKcFpXNTBUR2xuYUhRaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJRzVsZHlCeFlTaGxMbU52Ykc5eUxDQmxMbWx1ZEdWdWMybDBlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlSR2x5WldOMGFXOXVZV3hNYVdkb2RDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYm1WM0lGZGhLR1V1WTI5c2IzSXNJR1V1YVc1MFpXNXphWFI1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pRYjJsdWRFeHBaMmgwSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc4Z1BTQnVaWGNnUjJFb1pTNWpiMnh2Y2l3Z1pTNXBiblJsYm5OcGRIa3NJR1V1WkdsemRHRnVZMlVzSUdVdVpHVmpZWGtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbEpsWTNSQmNtVmhUR2xuYUhRaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJRzVsZHlCWVlTaGxMbU52Ykc5eUxDQmxMbWx1ZEdWdWMybDBlU3dnWlM1M2FXUjBhQ3dnWlM1b1pXbG5hSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdDaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdJbE53YjNSTWFXZG9kQ0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2SUQwZ2JtVjNJRWhoS0dVdVkyOXNiM0lzSUdVdWFXNTBaVzV6YVhSNUxDQmxMbVJwYzNSaGJtTmxMQ0JsTG1GdVoyeGxMQ0JsTG5CbGJuVnRZbkpoTENCbExtUmxZMkY1S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pJWlcxcGMzQm9aWEpsVEdsbmFIUWlPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdieUE5SUc1bGR5QlZZU2hsTG1OdmJHOXlMQ0JsTG1keWIzVnVaRU52Ykc5eUxDQmxMbWx1ZEdWdWMybDBlU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlUR2xuYUhSUWNtOWlaU0k2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2SUQwZ2JtVjNJRWh5S0NrdVpuSnZiVXBUVDA0b1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBaVUydHBibTVsWkUxbGMyZ2lPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhQ0E5SUdFb1pTNW5aVzl0WlhSeWVTa3NJSFVnUFNCc0tHVXViV0YwWlhKcFlXd3BMQ0J2SUQwZ2JtVjNJSE52S0dnc0lIVXBMQ0JsTG1KcGJtUk5iMlJsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1WW1sdVpFMXZaR1VnUFNCbExtSnBibVJOYjJSbEtTd2daUzVpYVc1a1RXRjBjbWw0SUNFOVBTQjJiMmxrSURBZ0ppWWdieTVpYVc1a1RXRjBjbWw0TG1aeWIyMUJjbkpoZVNobExtSnBibVJOWVhSeWFYZ3BMQ0JsTG5OclpXeGxkRzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1YzJ0bGJHVjBiMjRnUFNCbExuTnJaV3hsZEc5dUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKTlpYTm9Jam9LSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2dnUFNCaEtHVXVaMlZ2YldWMGNua3BMQ0IxSUQwZ2JDaGxMbTFoZEdWeWFXRnNLU3dnYnlBOUlHNWxkeUJ6ZENob0xDQjFLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSkpibk4wWVc1alpXUk5aWE5vSWpvS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdnZ1BTQmhLR1V1WjJWdmJXVjBjbmtwTENCMUlEMGdiQ2hsTG0xaGRHVnlhV0ZzS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnWlM1amIzVnVkQ3dnWmlBOUlHVXVhVzV6ZEdGdVkyVk5ZWFJ5YVhnc0lHMGdQU0JsTG1sdWMzUmhibU5sUTI5c2IzSTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYm1WM0lIaGhLR2dzSUhVc0lHUXBMQ0J2TG1sdWMzUmhibU5sVFdGMGNtbDRJRDBnYm1WM0lGaHVLRzVsZHlCR2JHOWhkRE15UVhKeVlYa29aaTVoY25KaGVTa3NJREUyS1N3Z2JTQWhQVDBnZG05cFpDQXdJQ1ltSUNodkxtbHVjM1JoYm1ObFEyOXNiM0lnUFNCdVpYY2dXRzRvYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2h0TG1GeWNtRjVLU3dnYlM1cGRHVnRVMmw2WlNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWt4UFJDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYm1WM0lHSm9Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lreHBibVVpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlHNWxkeUJ2YmloaEtHVXVaMlZ2YldWMGNua3BMQ0JzS0dVdWJXRjBaWEpwWVd3cEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNKTWFXNWxURzl2Y0NJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdklEMGdibVYzSUhsaEtHRW9aUzVuWlc5dFpYUnllU2tzSUd3b1pTNXRZWFJsY21saGJDa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lreHBibVZUWldkdFpXNTBjeUk2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2SUQwZ2JtVjNJSGQwS0dFb1pTNW5aVzl0WlhSeWVTa3NJR3dvWlM1dFlYUmxjbWxoYkNrcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSWxCdmFXNTBRMnh2ZFdRaU9nb2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlFiMmx1ZEhNaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJRzVsZHlCNmNpaGhLR1V1WjJWdmJXVjBjbmtwTENCc0tHVXViV0YwWlhKcFlXd3BLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck93b2dJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDSlRjSEpwZEdVaU9nb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJRzVsZHlCeWJ5aHNLR1V1YldGMFpYSnBZV3dwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0pIY205MWNDSTZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZJRDBnYm1WM0lFaHVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lrSnZibVVpT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlHNWxkeUJ2YnpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnlBOUlHNWxkeUJPWlRzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2FXWWdLRzh1ZFhWcFpDQTlJR1V1ZFhWcFpDd2daUzV1WVcxbElDRTlQU0IyYjJsa0lEQWdKaVlnS0c4dWJtRnRaU0E5SUdVdWJtRnRaU2tzSUdVdWJXRjBjbWw0SUNFOVBTQjJiMmxrSURBZ1B5QW9ieTV0WVhSeWFYZ3Vabkp2YlVGeWNtRjVLR1V1YldGMGNtbDRLU3dnWlM1dFlYUnlhWGhCZFhSdlZYQmtZWFJsSUNFOVBTQjJiMmxrSURBZ0ppWWdLRzh1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUdVdWJXRjBjbWw0UVhWMGIxVndaR0YwWlNrc0lHOHViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQW1KaUJ2TG0xaGRISnBlQzVrWldOdmJYQnZjMlVvYnk1d2IzTnBkR2x2Yml3Z2J5NXhkV0YwWlhKdWFXOXVMQ0J2TG5OallXeGxLU2tnT2lBb1pTNXdiM05wZEdsdmJpQWhQVDBnZG05cFpDQXdJQ1ltSUc4dWNHOXphWFJwYjI0dVpuSnZiVUZ5Y21GNUtHVXVjRzl6YVhScGIyNHBMQ0JsTG5KdmRHRjBhVzl1SUNFOVBTQjJiMmxrSURBZ0ppWWdieTV5YjNSaGRHbHZiaTVtY205dFFYSnlZWGtvWlM1eWIzUmhkR2x2Ymlrc0lHVXVjWFZoZEdWeWJtbHZiaUFoUFQwZ2RtOXBaQ0F3SUNZbUlHOHVjWFZoZEdWeWJtbHZiaTVtY205dFFYSnlZWGtvWlM1eGRXRjBaWEp1YVc5dUtTd2daUzV6WTJGc1pTQWhQVDBnZG05cFpDQXdJQ1ltSUc4dWMyTmhiR1V1Wm5KdmJVRnljbUY1S0dVdWMyTmhiR1VwS1N3Z1pTNWpZWE4wVTJoaFpHOTNJQ0U5UFNCMmIybGtJREFnSmlZZ0tHOHVZMkZ6ZEZOb1lXUnZkeUE5SUdVdVkyRnpkRk5vWVdSdmR5a3NJR1V1Y21WalpXbDJaVk5vWVdSdmR5QWhQVDBnZG05cFpDQXdJQ1ltSUNodkxuSmxZMlZwZG1WVGFHRmtiM2NnUFNCbExuSmxZMlZwZG1WVGFHRmtiM2NwTENCbExuTm9ZV1J2ZHlBbUppQW9aUzV6YUdGa2IzY3VZbWxoY3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h2TG5Ob1lXUnZkeTVpYVdGeklEMGdaUzV6YUdGa2IzY3VZbWxoY3lrc0lHVXVjMmhoWkc5M0xtNXZjbTFoYkVKcFlYTWdJVDA5SUhadmFXUWdNQ0FtSmlBb2J5NXphR0ZrYjNjdWJtOXliV0ZzUW1saGN5QTlJR1V1YzJoaFpHOTNMbTV2Y20xaGJFSnBZWE1wTENCbExuTm9ZV1J2ZHk1eVlXUnBkWE1nSVQwOUlIWnZhV1FnTUNBbUppQW9ieTV6YUdGa2IzY3VjbUZrYVhWeklEMGdaUzV6YUdGa2IzY3VjbUZrYVhWektTd2daUzV6YUdGa2IzY3ViV0Z3VTJsNlpTQWhQVDBnZG05cFpDQXdJQ1ltSUc4dWMyaGhaRzkzTG0xaGNGTnBlbVV1Wm5KdmJVRnljbUY1S0dVdWMyaGhaRzkzTG0xaGNGTnBlbVVwTENCbExuTm9ZV1J2ZHk1allXMWxjbUVnSVQwOUlIWnZhV1FnTUNBbUppQW9ieTV6YUdGa2IzY3VZMkZ0WlhKaElEMGdkR2hwY3k1d1lYSnpaVTlpYW1WamRDaGxMbk5vWVdSdmR5NWpZVzFsY21FcEtTa3NJR1V1ZG1semFXSnNaU0FoUFQwZ2RtOXBaQ0F3SUNZbUlDaHZMblpwYzJsaWJHVWdQU0JsTG5acGMybGliR1VwTENCbExtWnlkWE4wZFcxRGRXeHNaV1FnSVQwOUlIWnZhV1FnTUNBbUppQW9ieTVtY25WemRIVnRRM1ZzYkdWa0lEMGdaUzVtY25WemRIVnRRM1ZzYkdWa0tTd2daUzV5Wlc1a1pYSlBjbVJsY2lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h2TG5KbGJtUmxjazl5WkdWeUlEMGdaUzV5Wlc1a1pYSlBjbVJsY2lrc0lHVXVkWE5sY2tSaGRHRWdJVDA5SUhadmFXUWdNQ0FtSmlBb2J5NTFjMlZ5UkdGMFlTQTlJR1V1ZFhObGNrUmhkR0VwTENCbExteGhlV1Z5Y3lBaFBUMGdkbTlwWkNBd0lDWW1JQ2h2TG14aGVXVnljeTV0WVhOcklEMGdaUzVzWVhsbGNuTXBMQ0JsTG1Ob2FXeGtjbVZ1SUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUWdQU0JsTG1Ob2FXeGtjbVZ1T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHWWdQU0F3T3lCbUlEd2daQzVzWlc1bmRHZzdJR1lyS3lsdkxtRmtaQ2gwYUdsekxuQmhjbk5sVDJKcVpXTjBLR1JiWmwwc0lIUXNJRzRzSUdrc0lISXBLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYVdZZ0tHVXVZVzVwYldGMGFXOXVjeUFoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdaUzVoYm1sdFlYUnBiMjV6T3dvZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHWWdQU0F3T3lCbUlEd2daQzVzWlc1bmRHZzdJR1lyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiU0E5SUdSYlpsMDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbUZ1YVcxaGRHbHZibk11Y0hWemFDaHlXMjFkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb1pTNTBlWEJsSUQwOVBTQWlURTlFSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JsTG1GMWRHOVZjR1JoZEdVZ0lUMDlJSFp2YVdRZ01DQW1KaUFvYnk1aGRYUnZWWEJrWVhSbElEMGdaUzVoZFhSdlZYQmtZWFJsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQmxMbXhsZG1Wc2N6c0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JtSUQwZ01Ec2daaUE4SUdRdWJHVnVaM1JvT3lCbUt5c3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcwZ1BTQmtXMlpkTENCNElEMGdieTVuWlhSUFltcGxZM1JDZVZCeWIzQmxjblI1S0NKMWRXbGtJaXdnYlM1dlltcGxZM1FwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUNBaFBUMGdkbTlwWkNBd0lDWW1JRzh1WVdSa1RHVjJaV3dvZUN3Z2JTNWthWE4wWVc1alpTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc4N0NpQWdJQ0I5Q2lBZ0lDQmlhVzVrVTJ0bGJHVjBiMjV6S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loMEtTNXNaVzVuZEdnZ0lUMDlJREFnSmlZZ1pTNTBjbUYyWlhKelpTaG1kVzVqZEdsdmJpaHVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1TG1selUydHBibTVsWkUxbGMyZ2dQVDA5SUNFd0lDWW1JRzR1YzJ0bGJHVjBiMjRnSVQwOUlIWnZhV1FnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMFcyNHVjMnRsYkdWMGIyNWRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0E5UFQwZ2RtOXBaQ0F3SUQ4Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVBZbXBsWTNSTWIyRmtaWEk2SUU1dklITnJaV3hsZEc5dUlHWnZkVzVrSUhkcGRHZ2dWVlZKUkRvaUxDQnVMbk5yWld4bGRHOXVLU0E2SUc0dVltbHVaQ2hwTENCdUxtSnBibVJOWVhSeWFYZ3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNCOUNpQWdJQ0J6WlhSVVpYaDBkWEpsVUdGMGFDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VDJKcVpXTjBURzloWkdWeU9pQXVjMlYwVkdWNGRIVnlaVkJoZEdnb0tTQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lIUnZJQzV6WlhSU1pYTnZkWEpqWlZCaGRHZ29LUzRpS1N3Z2RHaHBjeTV6WlhSU1pYTnZkWEpqWlZCaGRHZ29aU2s3Q2lBZ0lDQjlDbjBzSUdSNUlEMGdld29nSUNBZ1ZWWk5ZWEJ3YVc1bk9pQm9ZU3dLSUNBZ0lFTjFZbVZTWldac1pXTjBhVzl1VFdGd2NHbHVaem9nUW1rc0NpQWdJQ0JEZFdKbFVtVm1jbUZqZEdsdmJrMWhjSEJwYm1jNklIcHBMQW9nSUNBZ1JYRjFhWEpsWTNSaGJtZDFiR0Z5VW1WbWJHVmpkR2x2YmsxaGNIQnBibWM2SUVSekxBb2dJQ0FnUlhGMWFYSmxZM1JoYm1kMWJHRnlVbVZtY21GamRHbHZiazFoY0hCcGJtYzZJRVp6TEFvZ0lDQWdRM1ZpWlZWV1VtVm1iR1ZqZEdsdmJrMWhjSEJwYm1jNklGQnlMQW9nSUNBZ1EzVmlaVlZXVW1WbWNtRmpkR2x2YmsxaGNIQnBibWM2SUZkekNuMHNJRk5qSUQwZ2V3b2dJQ0FnVW1Wd1pXRjBWM0poY0hCcGJtYzZJRTV6TEFvZ0lDQWdRMnhoYlhCVWIwVmtaMlZYY21Gd2NHbHVaem9nZG5Rc0NpQWdJQ0JOYVhKeWIzSmxaRkpsY0dWaGRGZHlZWEJ3YVc1bk9pQkNjd3A5TENCVVl5QTlJSHNLSUNBZ0lFNWxZWEpsYzNSR2FXeDBaWEk2SUhKMExBb2dJQ0FnVG1WaGNtVnpkRTFwY0cxaGNFNWxZWEpsYzNSR2FXeDBaWEk2SUhSaExBb2dJQ0FnVG1WaGNtVnpkRTFwY0cxaGNFeHBibVZoY2tacGJIUmxjam9nYm1Fc0NpQWdJQ0JNYVc1bFlYSkdhV3gwWlhJNklIUjBMQW9nSUNBZ1RHbHVaV0Z5VFdsd2JXRndUbVZoY21WemRFWnBiSFJsY2pvZ1YyTXNDaUFnSUNCTWFXNWxZWEpOYVhCdFlYQk1hVzVsWVhKR2FXeDBaWEk2SUZWcENuMHNJRTlvSUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJpZENCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobEtUc0tJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1kzSmxZWFJsU1cxaFoyVkNhWFJ0WVhBZ1BpQWlkU0lnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUpiV0ZuWlVKcGRHMWhjRXh2WVdSbGNqb2dZM0psWVhSbFNXMWhaMlZDYVhSdFlYQW9LU0J1YjNRZ2MzVndjRzl5ZEdWa0xpSXBMQ0IwZVhCbGIyWWdabVYwWTJnZ1BpQWlkU0lnSmlZZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUpiV0ZuWlVKcGRHMWhjRXh2WVdSbGNqb2dabVYwWTJnb0tTQnViM1FnYzNWd2NHOXlkR1ZrTGlJcExDQjBhR2x6TG05d2RHbHZibk1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJSEJ5WlcxMWJIUnBjR3g1UVd4d2FHRTZJQ0p1YjI1bElnb2dJQ0FnSUNBZ0lIMDdDaUFnSUNCOUNpQWdJQ0J6WlhSUGNIUnBiMjV6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y0hScGIyNXpJRDBnWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUd4dllXUW9aU3dnZEN3Z2Jpd2dhU2tnZXdvZ0lDQWdJQ0FnSUdVZ1BUMDlJSFp2YVdRZ01DQW1KaUFvWlNBOUlDSWlLU3dnZEdocGN5NXdZWFJvSUNFOVBTQjJiMmxrSURBZ0ppWWdLR1VnUFNCMGFHbHpMbkJoZEdnZ0t5QmxLU3dnWlNBOUlIUm9hWE11YldGdVlXZGxjaTV5WlhOdmJIWmxWVkpNS0dVcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeXdnYnlBOUlFNXBMbWRsZENobEtUc0tJQ0FnSUNBZ0lDQnBaaUFvYnlBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2NpNXRZVzVoWjJWeUxtbDBaVzFUZEdGeWRDaGxLU3dnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZENBbUppQjBLRzhwTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ1WkNobEtUc0tJQ0FnSUNBZ0lDQjlMQ0F3S1N3Z2J6c0tJQ0FnSUNBZ0lDQnNaWFFnWVNBOUlIdDlPd29nSUNBZ0lDQWdJR0V1WTNKbFpHVnVkR2xoYkhNZ1BTQjBhR2x6TG1OeWIzTnpUM0pwWjJsdUlEMDlQU0FpWVc1dmJubHRiM1Z6SWlBL0lDSnpZVzFsTFc5eWFXZHBiaUlnT2lBaWFXNWpiSFZrWlNJc0lHRXVhR1ZoWkdWeWN5QTlJSFJvYVhNdWNtVnhkV1Z6ZEVobFlXUmxjaXdnWm1WMFkyZ29aU3dnWVNrdWRHaGxiaWhtZFc1amRHbHZiaWhzS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnNMbUpzYjJJb0tUc0tJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtHd3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVWx0WVdkbFFtbDBiV0Z3S0d3c0lFOWlhbVZqZEM1aGMzTnBaMjRvY2k1dmNIUnBiMjV6TENCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjbE53WVdObFEyOXVkbVZ5YzJsdmJqb2dJbTV2Ym1VaUNpQWdJQ0FnSUNBZ0lDQWdJSDBwS1RzS0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1S0d3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnVG1rdVlXUmtLR1VzSUd3cExDQjBJQ1ltSUhRb2JDa3NJSEl1YldGdVlXZGxjaTVwZEdWdFJXNWtLR1VwT3dvZ0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0d3cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVNBbUppQnBLR3dwTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ5Y205eUtHVXBMQ0J5TG0xaGJtRm5aWEl1YVhSbGJVVnVaQ2hsS1RzS0lDQWdJQ0FnSUNCOUtTd2djaTV0WVc1aFoyVnlMbWwwWlcxVGRHRnlkQ2hsS1RzS0lDQWdJSDBLZlRzS1QyZ3VjSEp2ZEc5MGVYQmxMbWx6U1cxaFoyVkNhWFJ0WVhCTWIyRmtaWElnUFNBaE1Ec0tkbUZ5SUZOekxDQklhQ0E5SUhzS0lDQWdJR2RsZEVOdmJuUmxlSFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCVGN5QTlQVDBnZG05cFpDQXdJQ1ltSUNoVGN5QTlJRzVsZHlBb2QybHVaRzkzTGtGMVpHbHZRMjl1ZEdWNGRDQjhmQ0IzYVc1a2IzY3VkMlZpYTJsMFFYVmthVzlEYjI1MFpYaDBLU2tzSUZOek93b2dJQ0FnZlN3S0lDQWdJSE5sZEVOdmJuUmxlSFE2SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUNBZ0lDQlRjeUE5SUhNN0NpQWdJQ0I5Q24wc0lHdG9JRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmlkQ0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsS1RzS0lDQWdJSDBLSUNBZ0lHeHZZV1FvWlN3Z2RDd2diaXdnYVNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeXdnYnlBOUlHNWxkeUJaZENoMGFHbHpMbTFoYm1GblpYSXBPd29nSUNBZ0lDQWdJRzh1YzJWMFVtVnpjRzl1YzJWVWVYQmxLQ0poY25KaGVXSjFabVpsY2lJcExDQnZMbk5sZEZCaGRHZ29kR2hwY3k1d1lYUm9LU3dnYnk1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0hSb2FYTXVjbVZ4ZFdWemRFaGxZV1JsY2lrc0lHOHVjMlYwVjJsMGFFTnlaV1JsYm5ScFlXeHpLSFJvYVhNdWQybDBhRU55WldSbGJuUnBZV3h6S1N3Z2J5NXNiMkZrS0dVc0lHWjFibU4wYVc5dUtHRXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCc0lEMGdZUzV6YkdsalpTZ3dLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWhvTG1kbGRFTnZiblJsZUhRb0tTNWtaV052WkdWQmRXUnBiMFJoZEdFb2JDd2dablZ1WTNScGIyNG9hQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUW9hQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9iQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNBL0lHa29iQ2tnT2lCamIyNXpiMnhsTG1WeWNtOXlLR3dwTENCeUxtMWhibUZuWlhJdWFYUmxiVVZ5Y205eUtHVXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZTd2diaXdnYVNrN0NpQWdJQ0I5Q24wc0lFZG9JRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QkljaUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVJRDBnTVNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvZG05cFpDQXdMQ0J1S1RzS0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUc1bGR5QmhaU2dwTG5ObGRDaGxLU3dnY2lBOUlHNWxkeUJoWlNncExuTmxkQ2gwS1N3Z2J5QTlJRzVsZHlCTktHa3VjaXdnYVM1bkxDQnBMbUlwTENCaElEMGdibVYzSUUwb2NpNXlMQ0J5TG1jc0lISXVZaWtzSUd3Z1BTQk5ZWFJvTG5OeGNuUW9UV0YwYUM1UVNTa3NJR01nUFNCc0lDb2dUV0YwYUM1emNYSjBLQzQzTlNrN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6YUM1amIyVm1abWxqYVdWdWRITmJNRjB1WTI5d2VTaHZLUzVoWkdRb1lTa3ViWFZzZEdsd2JIbFRZMkZzWVhJb2JDa3NJSFJvYVhNdWMyZ3VZMjlsWm1acFkybGxiblJ6V3pGZExtTnZjSGtvYnlrdWMzVmlLR0VwTG0xMWJIUnBjR3g1VTJOaGJHRnlLR01wT3dvZ0lDQWdmUXA5T3dwSGFDNXdjbTkwYjNSNWNHVXVhWE5JWlcxcGMzQm9aWEpsVEdsbmFIUlFjbTlpWlNBOUlDRXdPd3AyWVhJZ1ZtZ2dQU0JqYkdGemN5QmxlSFJsYm1SeklFaHlJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLR1VzSUhRZ1BTQXhLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaDJiMmxrSURBc0lIUXBPd29nSUNBZ0lDQWdJR3hsZENCdUlEMGdibVYzSUdGbEtDa3VjMlYwS0dVcE93b2dJQ0FnSUNBZ0lIUm9hWE11YzJndVkyOWxabVpwWTJsbGJuUnpXekJkTG5ObGRDaHVMbklzSUc0dVp5d2diaTVpS1M1dGRXeDBhWEJzZVZOallXeGhjaWd5SUNvZ1RXRjBhQzV6Y1hKMEtFMWhkR2d1VUVrcEtUc0tJQ0FnSUgwS2ZUc0tWbWd1Y0hKdmRHOTBlWEJsTG1selFXMWlhV1Z1ZEV4cFoyaDBVSEp2WW1VZ1BTQWhNRHNLZG1GeUlFVmpJRDBnYm1WM0lIQmxMQ0JCWXlBOUlHNWxkeUJ3WlN3Z1JtNGdQU0J1WlhjZ2NHVXNJR1o1SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlVM1JsY21WdlEyRnRaWEpoSWl3Z2RHaHBjeTVoYzNCbFkzUWdQU0F4TENCMGFHbHpMbVY1WlZObGNDQTlJQzR3TmpRc0lIUm9hWE11WTJGdFpYSmhUQ0E5SUc1bGR5QjFkQ3dnZEdocGN5NWpZVzFsY21GTUxteGhlV1Z5Y3k1bGJtRmliR1VvTVNrc0lIUm9hWE11WTJGdFpYSmhUQzV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11WTJGdFpYSmhVaUE5SUc1bGR5QjFkQ3dnZEdocGN5NWpZVzFsY21GU0xteGhlV1Z5Y3k1bGJtRmliR1VvTWlrc0lIUm9hWE11WTJGdFpYSmhVaTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11WDJOaFkyaGxJRDBnZXdvZ0lDQWdJQ0FnSUNBZ0lDQm1iMk4xY3pvZ2JuVnNiQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1ptOTJPaUJ1ZFd4c0xBb2dJQ0FnSUNBZ0lDQWdJQ0JoYzNCbFkzUTZJRzUxYkd3c0NpQWdJQ0FnSUNBZ0lDQWdJRzVsWVhJNklHNTFiR3dzQ2lBZ0lDQWdJQ0FnSUNBZ0lHWmhjam9nYm5Wc2JDd0tJQ0FnSUNBZ0lDQWdJQ0FnZW05dmJUb2diblZzYkN3S0lDQWdJQ0FnSUNBZ0lDQWdaWGxsVTJWd09pQnVkV3hzQ2lBZ0lDQWdJQ0FnZlRzS0lDQWdJSDBLSUNBZ0lIVndaR0YwWlNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TGw5allXTm9aVHNLSUNBZ0lDQWdJQ0JwWmlBb2RDNW1iMk4xY3lBaFBUMGdaUzVtYjJOMWN5QjhmQ0IwTG1admRpQWhQVDBnWlM1bWIzWWdmSHdnZEM1aGMzQmxZM1FnSVQwOUlHVXVZWE53WldOMElDb2dkR2hwY3k1aGMzQmxZM1FnZkh3Z2RDNXVaV0Z5SUNFOVBTQmxMbTVsWVhJZ2ZId2dkQzVtWVhJZ0lUMDlJR1V1Wm1GeUlIeDhJSFF1ZW05dmJTQWhQVDBnWlM1NmIyOXRJSHg4SUhRdVpYbGxVMlZ3SUNFOVBTQjBhR2x6TG1WNVpWTmxjQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBMbVp2WTNWeklEMGdaUzVtYjJOMWN5d2dkQzVtYjNZZ1BTQmxMbVp2ZGl3Z2RDNWhjM0JsWTNRZ1BTQmxMbUZ6Y0dWamRDQXFJSFJvYVhNdVlYTndaV04wTENCMExtNWxZWElnUFNCbExtNWxZWElzSUhRdVptRnlJRDBnWlM1bVlYSXNJSFF1ZW05dmJTQTlJR1V1ZW05dmJTd2dkQzVsZVdWVFpYQWdQU0IwYUdsekxtVjVaVk5sY0N3Z1JtNHVZMjl3ZVNobExuQnliMnBsWTNScGIyNU5ZWFJ5YVhncE93b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFF1WlhsbFUyVndJQzhnTWl3Z2NpQTlJR2tnS2lCMExtNWxZWElnTHlCMExtWnZZM1Z6TENCdklEMGdkQzV1WldGeUlDb2dUV0YwYUM1MFlXNG9WMjRnS2lCMExtWnZkaUFxSUM0MUtTQXZJSFF1ZW05dmJTd2dZU3dnYkRzS0lDQWdJQ0FnSUNBZ0lDQWdRV011Wld4bGJXVnVkSE5iTVRKZElEMGdMV2tzSUVWakxtVnNaVzFsYm5Seld6RXlYU0E5SUdrc0lHRWdQU0F0YnlBcUlIUXVZWE53WldOMElDc2djaXdnYkNBOUlHOGdLaUIwTG1GemNHVmpkQ0FySUhJc0lFWnVMbVZzWlcxbGJuUnpXekJkSUQwZ01pQXFJSFF1Ym1WaGNpQXZJQ2hzSUMwZ1lTa3NJRVp1TG1Wc1pXMWxiblJ6V3poZElEMGdLR3dnS3lCaEtTQXZJQ2hzSUMwZ1lTa3NJSFJvYVhNdVkyRnRaWEpoVEM1d2NtOXFaV04wYVc5dVRXRjBjbWw0TG1OdmNIa29SbTRwTENCaElEMGdMVzhnS2lCMExtRnpjR1ZqZENBdElISXNJR3dnUFNCdklDb2dkQzVoYzNCbFkzUWdMU0J5TENCR2JpNWxiR1Z0Wlc1MGMxc3dYU0E5SURJZ0tpQjBMbTVsWVhJZ0x5QW9iQ0F0SUdFcExDQkdiaTVsYkdWdFpXNTBjMXM0WFNBOUlDaHNJQ3NnWVNrZ0x5QW9iQ0F0SUdFcExDQjBhR2x6TG1OaGJXVnlZVkl1Y0hKdmFtVmpkR2x2YmsxaGRISnBlQzVqYjNCNUtFWnVLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEdocGN5NWpZVzFsY21GTUxtMWhkSEpwZUZkdmNteGtMbU52Y0hrb1pTNXRZWFJ5YVhoWGIzSnNaQ2t1YlhWc2RHbHdiSGtvUVdNcExDQjBhR2x6TG1OaGJXVnlZVkl1YldGMGNtbDRWMjl5YkdRdVkyOXdlU2hsTG0xaGRISnBlRmR2Y214a0tTNXRkV3gwYVhCc2VTaEZZeWs3Q2lBZ0lDQjlDbjBzSUZkb0lEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTQTlJQ0V3S1hzS0lDQWdJQ0FnSUNCMGFHbHpMbUYxZEc5VGRHRnlkQ0E5SUdVc0lIUm9hWE11YzNSaGNuUlVhVzFsSUQwZ01Dd2dkR2hwY3k1dmJHUlVhVzFsSUQwZ01Dd2dkR2hwY3k1bGJHRndjMlZrVkdsdFpTQTlJREFzSUhSb2FYTXVjblZ1Ym1sdVp5QTlJQ0V4T3dvZ0lDQWdmUW9nSUNBZ2MzUmhjblFvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGeWRGUnBiV1VnUFNCRFl5Z3BMQ0IwYUdsekxtOXNaRlJwYldVZ1BTQjBhR2x6TG5OMFlYSjBWR2x0WlN3Z2RHaHBjeTVsYkdGd2MyVmtWR2x0WlNBOUlEQXNJSFJvYVhNdWNuVnVibWx1WnlBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnYzNSdmNDZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtZGxkRVZzWVhCelpXUlVhVzFsS0Nrc0lIUm9hWE11Y25WdWJtbHVaeUE5SUNFeExDQjBhR2x6TG1GMWRHOVRkR0Z5ZENBOUlDRXhPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJXeGhjSE5sWkZScGJXVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBSR1ZzZEdFb0tTd2dkR2hwY3k1bGJHRndjMlZrVkdsdFpUc0tJQ0FnSUgwS0lDQWdJR2RsZEVSbGJIUmhLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnTURzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1aGRYUnZVM1JoY25RZ0ppWWdJWFJvYVhNdWNuVnVibWx1WnlrZ2NtVjBkWEp1SUhSb2FYTXVjM1JoY25Rb0tTd2dNRHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5ZFc1dWFXNW5LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1EyTW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pTQTlJQ2gwSUMwZ2RHaHBjeTV2YkdSVWFXMWxLU0F2SURGbE15d2dkR2hwY3k1dmJHUlVhVzFsSUQwZ2RDd2dkR2hwY3k1bGJHRndjMlZrVkdsdFpTQXJQU0JsT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlRzS0lDQWdJSDBLZlRzS1puVnVZM1JwYjI0Z1EyTW9LU0I3Q2lBZ0lDQnlaWFIxY200Z0tIUjVjR1Z2WmlCd1pYSm1iM0p0WVc1alpTQStJQ0oxSWlBL0lFUmhkR1VnT2lCd1pYSm1iM0p0WVc1alpTa3VibTkzS0NrN0NuMEtkbUZ5SUU1dUlEMGdibVYzSUUwc0lFeGpJRDBnYm1WM0lHZDBMQ0J3ZVNBOUlHNWxkeUJOTENCQ2JpQTlJRzVsZHlCTkxDQnRlU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdUbVVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDSkJkV1JwYjB4cGMzUmxibVZ5SWl3Z2RHaHBjeTVqYjI1MFpYaDBJRDBnU0dndVoyVjBRMjl1ZEdWNGRDZ3BMQ0IwYUdsekxtZGhhVzRnUFNCMGFHbHpMbU52Ym5SbGVIUXVZM0psWVhSbFIyRnBiaWdwTENCMGFHbHpMbWRoYVc0dVkyOXVibVZqZENoMGFHbHpMbU52Ym5SbGVIUXVaR1Z6ZEdsdVlYUnBiMjRwTENCMGFHbHpMbVpwYkhSbGNpQTlJRzUxYkd3c0lIUm9hWE11ZEdsdFpVUmxiSFJoSUQwZ01Dd2dkR2hwY3k1ZlkyeHZZMnNnUFNCdVpYY2dWMmc3Q2lBZ0lDQjlDaUFnSUNCblpYUkpibkIxZENncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWVdsdU93b2dJQ0FnZlFvZ0lDQWdjbVZ0YjNabFJtbHNkR1Z5S0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpwYkhSbGNpQWhQVDBnYm5Wc2JDQW1KaUFvZEdocGN5NW5ZV2x1TG1ScGMyTnZibTVsWTNRb2RHaHBjeTVtYVd4MFpYSXBMQ0IwYUdsekxtWnBiSFJsY2k1a2FYTmpiMjV1WldOMEtIUm9hWE11WTI5dWRHVjRkQzVrWlhOMGFXNWhkR2x2Ymlrc0lIUm9hWE11WjJGcGJpNWpiMjV1WldOMEtIUm9hWE11WTI5dWRHVjRkQzVrWlhOMGFXNWhkR2x2Ymlrc0lIUm9hWE11Wm1sc2RHVnlJRDBnYm5Wc2JDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJHYVd4MFpYSW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVptbHNkR1Z5T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbWxzZEdWeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bWFXeDBaWElnSVQwOUlHNTFiR3dnUHlBb2RHaHBjeTVuWVdsdUxtUnBjMk52Ym01bFkzUW9kR2hwY3k1bWFXeDBaWElwTENCMGFHbHpMbVpwYkhSbGNpNWthWE5qYjI1dVpXTjBLSFJvYVhNdVkyOXVkR1Y0ZEM1a1pYTjBhVzVoZEdsdmJpa3BJRG9nZEdocGN5NW5ZV2x1TG1ScGMyTnZibTVsWTNRb2RHaHBjeTVqYjI1MFpYaDBMbVJsYzNScGJtRjBhVzl1S1N3Z2RHaHBjeTVtYVd4MFpYSWdQU0JsTENCMGFHbHpMbWRoYVc0dVkyOXVibVZqZENoMGFHbHpMbVpwYkhSbGNpa3NJSFJvYVhNdVptbHNkR1Z5TG1OdmJtNWxZM1FvZEdocGN5NWpiMjUwWlhoMExtUmxjM1JwYm1GMGFXOXVLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEUxaGMzUmxjbFp2YkhWdFpTZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bllXbHVMbWRoYVc0dWRtRnNkV1U3Q2lBZ0lDQjlDaUFnSUNCelpYUk5ZWE4wWlhKV2IyeDFiV1VvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRoYVc0dVoyRnBiaTV6WlhSVVlYSm5aWFJCZEZScGJXVW9aU3dnZEdocGN5NWpiMjUwWlhoMExtTjFjbkpsYm5SVWFXMWxMQ0F1TURFcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb1pTa2dld29nSUNBZ0lDQWdJSE4xY0dWeUxuVndaR0YwWlUxaGRISnBlRmR2Y214a0tHVXBPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1amIyNTBaWGgwTG14cGMzUmxibVZ5TENCdUlEMGdkR2hwY3k1MWNEc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTBhVzFsUkdWc2RHRWdQU0IwYUdsekxsOWpiRzlqYXk1blpYUkVaV3gwWVNncExDQjBhR2x6TG0xaGRISnBlRmR2Y214a0xtUmxZMjl0Y0c5elpTaE9iaXdnVEdNc0lIQjVLU3dnUW00dWMyVjBLREFzSURBc0lDMHhLUzVoY0hCc2VWRjFZWFJsY201cGIyNG9UR01wTENCMExuQnZjMmwwYVc5dVdDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhU0E5SUhSb2FYTXVZMjl1ZEdWNGRDNWpkWEp5Wlc1MFZHbHRaU0FySUhSb2FYTXVkR2x0WlVSbGJIUmhPd29nSUNBZ0lDQWdJQ0FnSUNCMExuQnZjMmwwYVc5dVdDNXNhVzVsWVhKU1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNoT2JpNTRMQ0JwS1N3Z2RDNXdiM05wZEdsdmJsa3ViR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVb1RtNHVlU3dnYVNrc0lIUXVjRzl6YVhScGIyNWFMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtFNXVMbm9zSUdrcExDQjBMbVp2Y25kaGNtUllMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtFSnVMbmdzSUdrcExDQjBMbVp2Y25kaGNtUlpMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtFSnVMbmtzSUdrcExDQjBMbVp2Y25kaGNtUmFMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtFSnVMbm9zSUdrcExDQjBMblZ3V0M1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2h1TG5nc0lHa3BMQ0IwTG5Wd1dTNXNhVzVsWVhKU1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNodUxua3NJR2twTENCMExuVndXaTVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaHVMbm9zSUdrcE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCMExuTmxkRkJ2YzJsMGFXOXVLRTV1TG5nc0lFNXVMbmtzSUU1dUxub3BMQ0IwTG5ObGRFOXlhV1Z1ZEdGMGFXOXVLRUp1TG5nc0lFSnVMbmtzSUVKdUxub3NJRzR1ZUN3Z2JpNTVMQ0J1TG5vcE93b2dJQ0FnZlFwOUxDQmFZU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdUbVVnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNsN0NpQWdJQ0FnSUNBZ2MzVndaWElvS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlRWFZrYVc4aUxDQjBhR2x6TG14cGMzUmxibVZ5SUQwZ1pTd2dkR2hwY3k1amIyNTBaWGgwSUQwZ1pTNWpiMjUwWlhoMExDQjBhR2x6TG1kaGFXNGdQU0IwYUdsekxtTnZiblJsZUhRdVkzSmxZWFJsUjJGcGJpZ3BMQ0IwYUdsekxtZGhhVzR1WTI5dWJtVmpkQ2hsTG1kbGRFbHVjSFYwS0NrcExDQjBhR2x6TG1GMWRHOXdiR0Y1SUQwZ0lURXNJSFJvYVhNdVluVm1abVZ5SUQwZ2JuVnNiQ3dnZEdocGN5NWtaWFIxYm1VZ1BTQXdMQ0IwYUdsekxteHZiM0FnUFNBaE1Td2dkR2hwY3k1c2IyOXdVM1JoY25RZ1BTQXdMQ0IwYUdsekxteHZiM0JGYm1RZ1BTQXdMQ0IwYUdsekxtOW1abk5sZENBOUlEQXNJSFJvYVhNdVpIVnlZWFJwYjI0Z1BTQjJiMmxrSURBc0lIUm9hWE11Y0d4aGVXSmhZMnRTWVhSbElEMGdNU3dnZEdocGN5NXBjMUJzWVhscGJtY2dQU0FoTVN3Z2RHaHBjeTVvWVhOUWJHRjVZbUZqYTBOdmJuUnliMndnUFNBaE1Dd2dkR2hwY3k1emIzVnlZMlVnUFNCdWRXeHNMQ0IwYUdsekxuTnZkWEpqWlZSNWNHVWdQU0FpWlcxd2RIa2lMQ0IwYUdsekxsOXpkR0Z5ZEdWa1FYUWdQU0F3TENCMGFHbHpMbDl3Y205bmNtVnpjeUE5SURBc0lIUm9hWE11WDJOdmJtNWxZM1JsWkNBOUlDRXhMQ0IwYUdsekxtWnBiSFJsY25NZ1BTQmJYVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFOTFkSEIxZENncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWVdsdU93b2dJQ0FnZlFvZ0lDQWdjMlYwVG05a1pWTnZkWEpqWlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YUdGelVHeGhlV0poWTJ0RGIyNTBjbTlzSUQwZ0lURXNJSFJvYVhNdWMyOTFjbU5sVkhsd1pTQTlJQ0poZFdScGIwNXZaR1VpTENCMGFHbHpMbk52ZFhKalpTQTlJR1VzSUhSb2FYTXVZMjl1Ym1WamRDZ3BMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVFdWa2FXRkZiR1Z0Wlc1MFUyOTFjbU5sS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVvWVhOUWJHRjVZbUZqYTBOdmJuUnliMndnUFNBaE1Td2dkR2hwY3k1emIzVnlZMlZVZVhCbElEMGdJbTFsWkdsaFRtOWtaU0lzSUhSb2FYTXVjMjkxY21ObElEMGdkR2hwY3k1amIyNTBaWGgwTG1OeVpXRjBaVTFsWkdsaFJXeGxiV1Z1ZEZOdmRYSmpaU2hsS1N3Z2RHaHBjeTVqYjI1dVpXTjBLQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSTlpXUnBZVk4wY21WaGJWTnZkWEpqWlNobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YUdGelVHeGhlV0poWTJ0RGIyNTBjbTlzSUQwZ0lURXNJSFJvYVhNdWMyOTFjbU5sVkhsd1pTQTlJQ0p0WldScFlWTjBjbVZoYlU1dlpHVWlMQ0IwYUdsekxuTnZkWEpqWlNBOUlIUm9hWE11WTI5dWRHVjRkQzVqY21WaGRHVk5aV1JwWVZOMGNtVmhiVk52ZFhKalpTaGxLU3dnZEdocGN5NWpiMjV1WldOMEtDa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJDZFdabVpYSW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtSjFabVpsY2lBOUlHVXNJSFJvYVhNdWMyOTFjbU5sVkhsd1pTQTlJQ0ppZFdabVpYSWlMQ0IwYUdsekxtRjFkRzl3YkdGNUlDWW1JSFJvYVhNdWNHeGhlU2dwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnY0d4aGVTaGxJRDBnTUNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtbHpVR3hoZVdsdVp5QTlQVDBnSVRBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1QmRXUnBiem9nUVhWa2FXOGdhWE1nWVd4eVpXRmtlU0J3YkdGNWFXNW5MaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtaGhjMUJzWVhsaVlXTnJRMjl1ZEhKdmJDQTlQVDBnSVRFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1QmRXUnBiem9nZEdocGN5QkJkV1JwYnlCb1lYTWdibThnY0d4aGVXSmhZMnNnWTI5dWRISnZiQzRpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRnlkR1ZrUVhRZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WTNWeWNtVnVkRlJwYldVZ0t5QmxPd29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1amIyNTBaWGgwTG1OeVpXRjBaVUoxWm1abGNsTnZkWEpqWlNncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMExtSjFabVpsY2lBOUlIUm9hWE11WW5WbVptVnlMQ0IwTG14dmIzQWdQU0IwYUdsekxteHZiM0FzSUhRdWJHOXZjRk4wWVhKMElEMGdkR2hwY3k1c2IyOXdVM1JoY25Rc0lIUXViRzl2Y0VWdVpDQTlJSFJvYVhNdWJHOXZjRVZ1WkN3Z2RDNXZibVZ1WkdWa0lEMGdkR2hwY3k1dmJrVnVaR1ZrTG1KcGJtUW9kR2hwY3lrc0lIUXVjM1JoY25Rb2RHaHBjeTVmYzNSaGNuUmxaRUYwTENCMGFHbHpMbDl3Y205bmNtVnpjeUFySUhSb2FYTXViMlptYzJWMExDQjBhR2x6TG1SMWNtRjBhVzl1S1N3Z2RHaHBjeTVwYzFCc1lYbHBibWNnUFNBaE1Dd2dkR2hwY3k1emIzVnlZMlVnUFNCMExDQjBhR2x6TG5ObGRFUmxkSFZ1WlNoMGFHbHpMbVJsZEhWdVpTa3NJSFJvYVhNdWMyVjBVR3hoZVdKaFkydFNZWFJsS0hSb2FYTXVjR3hoZVdKaFkydFNZWFJsS1N3Z2RHaHBjeTVqYjI1dVpXTjBLQ2s3Q2lBZ0lDQjlDaUFnSUNCd1lYVnpaU2dwSUhzS0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lYTlFiR0Y1WW1GamEwTnZiblJ5YjJ3Z1BUMDlJQ0V4S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UVhWa2FXODZJSFJvYVhNZ1FYVmthVzhnYUdGeklHNXZJSEJzWVhsaVlXTnJJR052Ym5SeWIyd3VJaWs3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhWE5RYkdGNWFXNW5JRDA5UFNBaE1DQW1KaUFvZEdocGN5NWZjSEp2WjNKbGMzTWdLejBnVFdGMGFDNXRZWGdvZEdocGN5NWpiMjUwWlhoMExtTjFjbkpsYm5SVWFXMWxJQzBnZEdocGN5NWZjM1JoY25SbFpFRjBMQ0F3S1NBcUlIUm9hWE11Y0d4aGVXSmhZMnRTWVhSbExDQjBhR2x6TG14dmIzQWdQVDA5SUNFd0lDWW1JQ2gwYUdsekxsOXdjbTluY21WemN5QTlJSFJvYVhNdVgzQnliMmR5WlhOeklDVWdLSFJvYVhNdVpIVnlZWFJwYjI0Z2ZId2dkR2hwY3k1aWRXWm1aWEl1WkhWeVlYUnBiMjRwS1N3Z2RHaHBjeTV6YjNWeVkyVXVjM1J2Y0NncExDQjBhR2x6TG5OdmRYSmpaUzV2Ym1WdVpHVmtJRDBnYm5Wc2JDd2dkR2hwY3k1cGMxQnNZWGxwYm1jZ1BTQWhNU2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6ZEc5d0tDa2dld29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWhoYzFCc1lYbGlZV05yUTI5dWRISnZiQ0E5UFQwZ0lURXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUJkV1JwYnpvZ2RHaHBjeUJCZFdScGJ5Qm9ZWE1nYm04Z2NHeGhlV0poWTJzZ1kyOXVkSEp2YkM0aUtUc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNISnZaM0psYzNNZ1BTQXdMQ0IwYUdsekxuTnZkWEpqWlM1emRHOXdLQ2tzSUhSb2FYTXVjMjkxY21ObExtOXVaVzVrWldRZ1BTQnVkV3hzTENCMGFHbHpMbWx6VUd4aGVXbHVaeUE5SUNFeExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1kyOXVibVZqZENncElIc0tJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1hV3gwWlhKekxteGxibWQwYUNBK0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6YjNWeVkyVXVZMjl1Ym1WamRDaDBhR2x6TG1acGJIUmxjbk5iTUYwcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1VnUFNBeExDQjBJRDBnZEdocGN5NW1hV3gwWlhKekxteGxibWQwYURzZ1pTQThJSFE3SUdVckt5bDBhR2x6TG1acGJIUmxjbk5iWlNBdElERmRMbU52Ym01bFkzUW9kR2hwY3k1bWFXeDBaWEp6VzJWZEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1hV3gwWlhKelczUm9hWE11Wm1sc2RHVnljeTVzWlc1bmRHZ2dMU0F4WFM1amIyNXVaV04wS0hSb2FYTXVaMlYwVDNWMGNIVjBLQ2twT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0IwYUdsekxuTnZkWEpqWlM1amIyNXVaV04wS0hSb2FYTXVaMlYwVDNWMGNIVjBLQ2twT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpiMjV1WldOMFpXUWdQU0FoTUN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdScGMyTnZibTVsWTNRb0tTQjdDaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVabWxzZEdWeWN5NXNaVzVuZEdnZ1BpQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzI5MWNtTmxMbVJwYzJOdmJtNWxZM1FvZEdocGN5NW1hV3gwWlhKeld6QmRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR3hsZENCbElEMGdNU3dnZENBOUlIUm9hWE11Wm1sc2RHVnljeTVzWlc1bmRHZzdJR1VnUENCME95QmxLeXNwZEdocGN5NW1hV3gwWlhKelcyVWdMU0F4WFM1a2FYTmpiMjV1WldOMEtIUm9hWE11Wm1sc2RHVnljMXRsWFNrN0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVptbHNkR1Z5YzF0MGFHbHpMbVpwYkhSbGNuTXViR1Z1WjNSb0lDMGdNVjB1WkdselkyOXVibVZqZENoMGFHbHpMbWRsZEU5MWRIQjFkQ2dwS1RzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZEdocGN5NXpiM1Z5WTJVdVpHbHpZMjl1Ym1WamRDaDBhR2x6TG1kbGRFOTFkSEIxZENncEtUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTI5dWJtVmpkR1ZrSUQwZ0lURXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJHYVd4MFpYSnpLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBiSFJsY25NN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHYVd4MFpYSnpLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlNCOGZDQW9aU0E5SUZ0ZEtTd2dkR2hwY3k1ZlkyOXVibVZqZEdWa0lEMDlQU0FoTUNBL0lDaDBhR2x6TG1ScGMyTnZibTVsWTNRb0tTd2dkR2hwY3k1bWFXeDBaWEp6SUQwZ1pTNXpiR2xqWlNncExDQjBhR2x6TG1OdmJtNWxZM1FvS1NrZ09pQjBhR2x6TG1acGJIUmxjbk1nUFNCbExuTnNhV05sS0Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCelpYUkVaWFIxYm1Vb1pTa2dld29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVJsZEhWdVpTQTlJR1VzSUhSb2FYTXVjMjkxY21ObExtUmxkSFZ1WlNBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2RHaHBjeTVwYzFCc1lYbHBibWNnUFQwOUlDRXdJQ1ltSUhSb2FYTXVjMjkxY21ObExtUmxkSFZ1WlM1elpYUlVZWEpuWlhSQmRGUnBiV1VvZEdocGN5NWtaWFIxYm1Vc0lIUm9hWE11WTI5dWRHVjRkQzVqZFhKeVpXNTBWR2x0WlN3Z0xqQXhLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEVSbGRIVnVaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWtaWFIxYm1VN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJHYVd4MFpYSW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBSbWxzZEdWeWN5Z3BXekJkT3dvZ0lDQWdmUW9nSUNBZ2MyVjBSbWxzZEdWeUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUkdhV3gwWlhKektHVWdQeUJiQ2lBZ0lDQWdJQ0FnSUNBZ0lHVUtJQ0FnSUNBZ0lDQmRJRG9nVzEwcE93b2dJQ0FnZlFvZ0lDQWdjMlYwVUd4aGVXSmhZMnRTWVhSbEtHVXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVhOUWJHRjVZbUZqYTBOdmJuUnliMndnUFQwOUlDRXhLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRWFZrYVc4NklIUm9hWE1nUVhWa2FXOGdhR0Z6SUc1dklIQnNZWGxpWVdOcklHTnZiblJ5YjJ3dUlpazdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHeGhlV0poWTJ0U1lYUmxJRDBnWlN3Z2RHaHBjeTVwYzFCc1lYbHBibWNnUFQwOUlDRXdJQ1ltSUhSb2FYTXVjMjkxY21ObExuQnNZWGxpWVdOclVtRjBaUzV6WlhSVVlYSm5aWFJCZEZScGJXVW9kR2hwY3k1d2JHRjVZbUZqYTFKaGRHVXNJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTd2dMakF4S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdkbGRGQnNZWGxpWVdOclVtRjBaU2dwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXdiR0Y1WW1GamExSmhkR1U3Q2lBZ0lDQjlDaUFnSUNCdmJrVnVaR1ZrS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11YVhOUWJHRjVhVzVuSUQwZ0lURTdDaUFnSUNCOUNpQWdJQ0JuWlhSTWIyOXdLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtaGhjMUJzWVhsaVlXTnJRMjl1ZEhKdmJDQTlQVDBnSVRFZ1B5QW9ZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVCZFdScGJ6b2dkR2hwY3lCQmRXUnBieUJvWVhNZ2JtOGdjR3hoZVdKaFkyc2dZMjl1ZEhKdmJDNGlLU3dnSVRFcElEb2dkR2hwY3k1c2IyOXdPd29nSUNBZ2ZRb2dJQ0FnYzJWMFRHOXZjQ2hsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFHRnpVR3hoZVdKaFkydERiMjUwY205c0lEMDlQU0FoTVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGtGMVpHbHZPaUIwYUdseklFRjFaR2x2SUdoaGN5QnVieUJ3YkdGNVltRmpheUJqYjI1MGNtOXNMaUlwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbXh2YjNBZ1BTQmxMQ0IwYUdsekxtbHpVR3hoZVdsdVp5QTlQVDBnSVRBZ0ppWWdLSFJvYVhNdWMyOTFjbU5sTG14dmIzQWdQU0IwYUdsekxteHZiM0FwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFRHOXZjRk4wWVhKMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1c2IyOXdVM1JoY25RZ1BTQmxMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwVEc5dmNFVnVaQ2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViRzl2Y0VWdVpDQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSV2IyeDFiV1VvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMkZwYmk1bllXbHVMblpoYkhWbE93b2dJQ0FnZlFvZ0lDQWdjMlYwVm05c2RXMWxLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5ZV2x1TG1kaGFXNHVjMlYwVkdGeVoyVjBRWFJVYVcxbEtHVXNJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTd2dMakF4S1N3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnZW00Z1BTQnVaWGNnVFN3Z1VtTWdQU0J1WlhjZ1ozUXNJR2Q1SUQwZ2JtVjNJRTBzSUZWdUlEMGdibVYzSUUwc0lIaDVJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QmFZU0I3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWhsS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJoYm01bGNpQTlJSFJvYVhNdVkyOXVkR1Y0ZEM1amNtVmhkR1ZRWVc1dVpYSW9LU3dnZEdocGN5NXdZVzV1WlhJdWNHRnVibWx1WjAxdlpHVnNJRDBnSWtoU1ZFWWlMQ0IwYUdsekxuQmhibTVsY2k1amIyNXVaV04wS0hSb2FYTXVaMkZwYmlrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJQZFhSd2RYUW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHRnVibVZ5T3dvZ0lDQWdmUW9nSUNBZ1oyVjBVbVZtUkdsemRHRnVZMlVvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z1Ym1WeUxuSmxaa1JwYzNSaGJtTmxPd29nSUNBZ2ZRb2dJQ0FnYzJWMFVtVm1SR2x6ZEdGdVkyVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhibTVsY2k1eVpXWkVhWE4wWVc1alpTQTlJR1VzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSU2IyeHNiMlptUm1GamRHOXlLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhibTVsY2k1eWIyeHNiMlptUm1GamRHOXlPd29nSUNBZ2ZRb2dJQ0FnYzJWMFVtOXNiRzltWmtaaFkzUnZjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0Z1Ym1WeUxuSnZiR3h2Wm1aR1lXTjBiM0lnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1oyVjBSR2x6ZEdGdVkyVk5iMlJsYkNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVc1dVpYSXVaR2x6ZEdGdVkyVk5iMlJsYkRzS0lDQWdJSDBLSUNBZ0lITmxkRVJwYzNSaGJtTmxUVzlrWld3b1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGJtNWxjaTVrYVhOMFlXNWpaVTF2WkdWc0lEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2RsZEUxaGVFUnBjM1JoYm1ObEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CaGJtNWxjaTV0WVhoRWFYTjBZVzVqWlRzS0lDQWdJSDBLSUNBZ0lITmxkRTFoZUVScGMzUmhibU5sS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVc1dVpYSXViV0Y0UkdsemRHRnVZMlVnUFNCbExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBSR2x5WldOMGFXOXVZV3hEYjI1bEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVc1dVpYSXVZMjl1WlVsdWJtVnlRVzVuYkdVZ1BTQmxMQ0IwYUdsekxuQmhibTVsY2k1amIyNWxUM1YwWlhKQmJtZHNaU0E5SUhRc0lIUm9hWE11Y0dGdWJtVnlMbU52Ym1WUGRYUmxja2RoYVc0Z1BTQnVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9aU2tnZXdvZ0lDQWdJQ0FnSUdsbUlDaHpkWEJsY2k1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtTd2dkR2hwY3k1b1lYTlFiR0Y1WW1GamEwTnZiblJ5YjJ3Z1BUMDlJQ0V3SUNZbUlIUm9hWE11YVhOUWJHRjVhVzVuSUQwOVBTQWhNU2tnY21WMGRYSnVPd29nSUNBZ0lDQWdJSFJvYVhNdWJXRjBjbWw0VjI5eWJHUXVaR1ZqYjIxd2IzTmxLSHB1TENCU1l5d2daM2twTENCVmJpNXpaWFFvTUN3Z01Dd2dNU2t1WVhCd2JIbFJkV0YwWlhKdWFXOXVLRkpqS1RzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVjR0Z1Ym1WeU93b2dJQ0FnSUNBZ0lHbG1JQ2gwTG5CdmMybDBhVzl1V0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdVkyOXVkR1Y0ZEM1amRYSnlaVzUwVkdsdFpTQXJJSFJvYVhNdWJHbHpkR1Z1WlhJdWRHbHRaVVJsYkhSaE93b2dJQ0FnSUNBZ0lDQWdJQ0IwTG5CdmMybDBhVzl1V0M1c2FXNWxZWEpTWVcxd1ZHOVdZV3gxWlVGMFZHbHRaU2g2Ymk1NExDQnVLU3dnZEM1d2IzTnBkR2x2YmxrdWJHbHVaV0Z5VW1GdGNGUnZWbUZzZFdWQmRGUnBiV1VvZW00dWVTd2diaWtzSUhRdWNHOXphWFJwYjI1YUxteHBibVZoY2xKaGJYQlViMVpoYkhWbFFYUlVhVzFsS0hwdUxub3NJRzRwTENCMExtOXlhV1Z1ZEdGMGFXOXVXQzVzYVc1bFlYSlNZVzF3Vkc5V1lXeDFaVUYwVkdsdFpTaFZiaTU0TENCdUtTd2dkQzV2Y21sbGJuUmhkR2x2YmxrdWJHbHVaV0Z5VW1GdGNGUnZWbUZzZFdWQmRGUnBiV1VvVlc0dWVTd2diaWtzSUhRdWIzSnBaVzUwWVhScGIyNWFMbXhwYm1WaGNsSmhiWEJVYjFaaGJIVmxRWFJVYVcxbEtGVnVMbm9zSUc0cE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCMExuTmxkRkJ2YzJsMGFXOXVLSHB1TG5nc0lIcHVMbmtzSUhwdUxub3BMQ0IwTG5ObGRFOXlhV1Z1ZEdGMGFXOXVLRlZ1TG5nc0lGVnVMbmtzSUZWdUxub3BPd29nSUNBZ2ZRcDlMQ0J4YUNBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUWdQU0F5TURRNEtYc0tJQ0FnSUNBZ0lDQjBhR2x6TG1GdVlXeDVjMlZ5SUQwZ1pTNWpiMjUwWlhoMExtTnlaV0YwWlVGdVlXeDVjMlZ5S0Nrc0lIUm9hWE11WVc1aGJIbHpaWEl1Wm1aMFUybDZaU0E5SUhRc0lIUm9hWE11WkdGMFlTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtIUm9hWE11WVc1aGJIbHpaWEl1Wm5KbGNYVmxibU41UW1sdVEyOTFiblFwTENCbExtZGxkRTkxZEhCMWRDZ3BMbU52Ym01bFkzUW9kR2hwY3k1aGJtRnNlWE5sY2lrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJHY21WeGRXVnVZM2xFWVhSaEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GdVlXeDVjMlZ5TG1kbGRFSjVkR1ZHY21WeGRXVnVZM2xFWVhSaEtIUm9hWE11WkdGMFlTa3NJSFJvYVhNdVpHRjBZVHNLSUNBZ0lIMEtJQ0FnSUdkbGRFRjJaWEpoWjJWR2NtVnhkV1Z1WTNrb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQXdMQ0IwSUQwZ2RHaHBjeTVuWlhSR2NtVnhkV1Z1WTNsRVlYUmhLQ2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J1SUQwZ01Ec2diaUE4SUhRdWJHVnVaM1JvT3lCdUt5c3BaU0FyUFNCMFcyNWRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmxJQzhnZEM1c1pXNW5kR2c3Q2lBZ0lDQjlDbjBzSUZob0lEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlsN0NpQWdJQ0FnSUNBZ2RHaHBjeTVpYVc1a2FXNW5JRDBnWlN3Z2RHaHBjeTUyWVd4MVpWTnBlbVVnUFNCdU93b2dJQ0FnSUNBZ0lHeGxkQ0JwTENCeUxDQnZPd29nSUNBZ0lDQWdJSE4zYVhSamFDaDBLWHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FpY1hWaGRHVnlibWx2YmlJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElEMGdkR2hwY3k1ZmMyeGxjbkFzSUhJZ1BTQjBhR2x6TGw5emJHVnljRUZrWkdsMGFYWmxMQ0J2SUQwZ2RHaHBjeTVmYzJWMFFXUmthWFJwZG1WSlpHVnVkR2wwZVZGMVlYUmxjbTVwYjI0c0lIUm9hWE11WW5WbVptVnlJRDBnYm1WM0lFWnNiMkYwTmpSQmNuSmhlU2h1SUNvZ05pa3NJSFJvYVhNdVgzZHZjbXRKYm1SbGVDQTlJRFU3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWljM1J5YVc1bklqb0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQWlZbTl2YkNJNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcElEMGdkR2hwY3k1ZmMyVnNaV04wTENCeUlEMGdkR2hwY3k1ZmMyVnNaV04wTENCdklEMGdkR2hwY3k1ZmMyVjBRV1JrYVhScGRtVkpaR1Z1ZEdsMGVVOTBhR1Z5TENCMGFHbHpMbUoxWm1abGNpQTlJRzVsZHlCQmNuSmhlU2h1SUNvZ05TazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0IwYUdsekxsOXNaWEp3TENCeUlEMGdkR2hwY3k1ZmJHVnljRUZrWkdsMGFYWmxMQ0J2SUQwZ2RHaHBjeTVmYzJWMFFXUmthWFJwZG1WSlpHVnVkR2wwZVU1MWJXVnlhV01zSUhSb2FYTXVZblZtWm1WeUlEMGdibVYzSUVac2IyRjBOalJCY25KaGVTaHVJQ29nTlNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIUm9hWE11WDIxcGVFSjFabVpsY2xKbFoybHZiaUE5SUdrc0lIUm9hWE11WDIxcGVFSjFabVpsY2xKbFoybHZia0ZrWkdsMGFYWmxJRDBnY2l3Z2RHaHBjeTVmYzJWMFNXUmxiblJwZEhrZ1BTQnZMQ0IwYUdsekxsOXZjbWxuU1c1a1pYZ2dQU0F6TENCMGFHbHpMbDloWkdSSmJtUmxlQ0E5SURRc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kQ0E5SURBc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kRUZrWkdsMGFYWmxJRDBnTUN3Z2RHaHBjeTUxYzJWRGIzVnVkQ0E5SURBc0lIUm9hWE11Y21WbVpYSmxibU5sUTI5MWJuUWdQU0F3T3dvZ0lDQWdmUW9nSUNBZ1lXTmpkVzExYkdGMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbUoxWm1abGNpd2dhU0E5SUhSb2FYTXVkbUZzZFdWVGFYcGxMQ0J5SUQwZ1pTQXFJR2tnS3lCcExDQnZJRDBnZEdocGN5NWpkVzExYkdGMGFYWmxWMlZwWjJoME93b2dJQ0FnSUNBZ0lHbG1JQ2h2SUQwOVBTQXdLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1lTQTlJREE3SUdFZ0lUMDlJR2s3SUNzcllTbHVXM0lnS3lCaFhTQTlJRzViWVYwN0NpQWdJQ0FnSUNBZ0lDQWdJRzhnUFNCME93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJRzhnS3owZ2REc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0IwSUM4Z2J6c0tJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiV2w0UW5WbVptVnlVbVZuYVc5dUtHNHNJSElzSURBc0lHRXNJR2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCMGFHbHpMbU4xYlhWc1lYUnBkbVZYWldsbmFIUWdQU0J2T3dvZ0lDQWdmUW9nSUNBZ1lXTmpkVzExYkdGMFpVRmtaR2wwYVhabEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVluVm1abVZ5TENCdUlEMGdkR2hwY3k1MllXeDFaVk5wZW1Vc0lHa2dQU0J1SUNvZ2RHaHBjeTVmWVdSa1NXNWtaWGc3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpkVzExYkdGMGFYWmxWMlZwWjJoMFFXUmthWFJwZG1VZ1BUMDlJREFnSmlZZ2RHaHBjeTVmYzJWMFNXUmxiblJwZEhrb0tTd2dkR2hwY3k1ZmJXbDRRblZtWm1WeVVtVm5hVzl1UVdSa2FYUnBkbVVvZEN3Z2FTd2dNQ3dnWlN3Z2Jpa3NJSFJvYVhNdVkzVnRkV3hoZEdsMlpWZGxhV2RvZEVGa1pHbDBhWFpsSUNzOUlHVTdDaUFnSUNCOUNpQWdJQ0JoY0hCc2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxuWmhiSFZsVTJsNlpTd2diaUE5SUhSb2FYTXVZblZtWm1WeUxDQnBJRDBnWlNBcUlIUWdLeUIwTENCeUlEMGdkR2hwY3k1amRXMTFiR0YwYVhabFYyVnBaMmgwTENCdklEMGdkR2hwY3k1amRXMTFiR0YwYVhabFYyVnBaMmgwUVdSa2FYUnBkbVVzSUdFZ1BTQjBhR2x6TG1KcGJtUnBibWM3Q2lBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kQ0E5SURBc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kRUZrWkdsMGFYWmxJRDBnTUN3Z2NpQThJREVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd3Z1BTQjBJQ29nZEdocGN5NWZiM0pwWjBsdVpHVjRPd29nSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0YVhoQ2RXWm1aWEpTWldkcGIyNG9iaXdnYVN3Z2JDd2dNU0F0SUhJc0lIUXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J2SUQ0Z01DQW1KaUIwYUdsekxsOXRhWGhDZFdabVpYSlNaV2RwYjI1QlpHUnBkR2wyWlNodUxDQnBMQ0IwYUdsekxsOWhaR1JKYm1SbGVDQXFJSFFzSURFc0lIUXBPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdiQ0E5SUhRc0lHTWdQU0IwSUNzZ2REc2diQ0FoUFQwZ1l6c2dLeXRzS1dsbUlDaHVXMnhkSUNFOVBTQnVXMndnS3lCMFhTa2dld29nSUNBZ0lDQWdJQ0FnSUNCaExuTmxkRlpoYkhWbEtHNHNJR2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXpzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQnpZWFpsVDNKcFoybHVZV3hUZEdGMFpTZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVltbHVaR2x1Wnl3Z2RDQTlJSFJvYVhNdVluVm1abVZ5TENCdUlEMGdkR2hwY3k1MllXeDFaVk5wZW1Vc0lHa2dQU0J1SUNvZ2RHaHBjeTVmYjNKcFowbHVaR1Y0T3dvZ0lDQWdJQ0FnSUdVdVoyVjBWbUZzZFdVb2RDd2dhU2s3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0J5SUQwZ2Jpd2dieUE5SUdrN0lISWdJVDA5SUc4N0lDc3JjaWwwVzNKZElEMGdkRnRwSUNzZ2NpQWxJRzVkT3dvZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEVsa1pXNTBhWFI1S0Nrc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kQ0E5SURBc0lIUm9hWE11WTNWdGRXeGhkR2wyWlZkbGFXZG9kRUZrWkdsMGFYWmxJRDBnTURzS0lDQWdJSDBLSUNBZ0lISmxjM1J2Y21WUGNtbG5hVzVoYkZOMFlYUmxLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NTJZV3gxWlZOcGVtVWdLaUF6T3dvZ0lDQWdJQ0FnSUhSb2FYTXVZbWx1WkdsdVp5NXpaWFJXWVd4MVpTaDBhR2x6TG1KMVptWmxjaXdnWlNrN0NpQWdJQ0I5Q2lBZ0lDQmZjMlYwUVdSa2FYUnBkbVZKWkdWdWRHbDBlVTUxYldWeWFXTW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxsOWhaR1JKYm1SbGVDQXFJSFJvYVhNdWRtRnNkV1ZUYVhwbExDQjBJRDBnWlNBcklIUm9hWE11ZG1Gc2RXVlRhWHBsT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlHVTdJRzRnUENCME95QnVLeXNwZEdocGN5NWlkV1ptWlhKYmJsMGdQU0F3T3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRUZrWkdsMGFYWmxTV1JsYm5ScGRIbFJkV0YwWlhKdWFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEVGa1pHbDBhWFpsU1dSbGJuUnBkSGxPZFcxbGNtbGpLQ2tzSUhSb2FYTXVZblZtWm1WeVczUm9hWE11WDJGa1pFbHVaR1Y0SUNvZ2RHaHBjeTUyWVd4MVpWTnBlbVVnS3lBelhTQTlJREU3Q2lBZ0lDQjlDaUFnSUNCZmMyVjBRV1JrYVhScGRtVkpaR1Z1ZEdsMGVVOTBhR1Z5S0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVmYjNKcFowbHVaR1Y0SUNvZ2RHaHBjeTUyWVd4MVpWTnBlbVVzSUhRZ1BTQjBhR2x6TGw5aFpHUkpibVJsZUNBcUlIUm9hWE11ZG1Gc2RXVlRhWHBsT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQTdJRzRnUENCMGFHbHpMblpoYkhWbFUybDZaVHNnYmlzcktYUm9hWE11WW5WbVptVnlXM1FnS3lCdVhTQTlJSFJvYVhNdVluVm1abVZ5VzJVZ0t5QnVYVHNLSUNBZ0lIMEtJQ0FnSUY5elpXeGxZM1FvWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ0lDQWdJR2xtSUNocElENDlJQzQxS1NCbWIzSW9iR1YwSUc4Z1BTQXdPeUJ2SUNFOVBTQnlPeUFySzI4cFpWdDBJQ3NnYjEwZ1BTQmxXMjRnS3lCdlhUc0tJQ0FnSUgwS0lDQWdJRjl6YkdWeWNDaGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnWjNRdWMyeGxjbkJHYkdGMEtHVXNJSFFzSUdVc0lIUXNJR1VzSUc0c0lHa3BPd29nSUNBZ2ZRb2dJQ0FnWDNOc1pYSndRV1JrYVhScGRtVW9aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J2SUQwZ2RHaHBjeTVmZDI5eWEwbHVaR1Y0SUNvZ2Nqc0tJQ0FnSUNBZ0lDQm5kQzV0ZFd4MGFYQnNlVkYxWVhSbGNtNXBiMjV6Um14aGRDaGxMQ0J2TENCbExDQjBMQ0JsTENCdUtTd2daM1F1YzJ4bGNuQkdiR0YwS0dVc0lIUXNJR1VzSUhRc0lHVXNJRzhzSUdrcE93b2dJQ0FnZlFvZ0lDQWdYMnhsY25Bb1pTd2dkQ3dnYml3Z2FTd2djaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnZJRDBnTVNBdElHazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmhJRDBnTURzZ1lTQWhQVDBnY2pzZ0t5dGhLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR3dnUFNCMElDc2dZVHNLSUNBZ0lDQWdJQ0FnSUNBZ1pWdHNYU0E5SUdWYmJGMGdLaUJ2SUNzZ1pWdHVJQ3NnWVYwZ0tpQnBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUY5c1pYSndRV1JrYVhScGRtVW9aU3dnZEN3Z2Jpd2dhU3dnY2lrZ2V3b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2J5QTlJREE3SUc4Z0lUMDlJSEk3SUNzcmJ5bDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnZENBcklHODdDaUFnSUNBZ0lDQWdJQ0FnSUdWYllWMGdQU0JsVzJGZElDc2daVnR1SUNzZ2IxMGdLaUJwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlN3Z0pHRWdQU0FpWEZ4YlhGeGRYRnd1T2x4Y0x5SXNJSGw1SUQwZ2JtVjNJRkpsWjBWNGNDZ2lXeUlnS3lBa1lTQXJJQ0pkSWl3Z0ltY2lLU3dnYW1FZ1BTQWlXMTRpSUNzZ0pHRWdLeUFpWFNJc0lIWjVJRDBnSWx0ZUlpQXJJQ1JoTG5KbGNHeGhZMlVvSWx4Y0xpSXNJQ0lpS1NBcklDSmRJaXdnWDNrZ1BTQXZLQ2cvT2xkREsxdGNMenBkS1NvcEx5NXpiM1Z5WTJVdWNtVndiR0ZqWlNnaVYwTWlMQ0JxWVNrc0lFMTVJRDBnTHloWFEwOUVLeWsvTHk1emIzVnlZMlV1Y21Wd2JHRmpaU2dpVjBOUFJDSXNJSFo1S1N3Z1lua2dQU0F2S0Q4NlhDNG9WME1yS1NnL09seGJLQzRyS1Z4ZEtUOHBQeTh1YzI5MWNtTmxMbkpsY0d4aFkyVW9JbGRESWl3Z2FtRXBMQ0IzZVNBOUlDOWNMaWhYUXlzcEtEODZYRnNvTGlzcFhGMHBQeTh1YzI5MWNtTmxMbkpsY0d4aFkyVW9JbGRESWl3Z2FtRXBMQ0JUZVNBOUlHNWxkeUJTWldkRmVIQW9JbDRpSUNzZ1gza2dLeUJOZVNBcklHSjVJQ3NnZDNrZ0t5QWlKQ0lwTENCVWVTQTlJRnNLSUNBZ0lDSnRZWFJsY21saGJDSXNDaUFnSUNBaWJXRjBaWEpwWVd4eklpd0tJQ0FnSUNKaWIyNWxjeUlLWFN3Z1NtZ2dQU0JqYkdGemN5QjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxMQ0IwTENCdUtYc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlHNGdmSHdnYTJVdWNHRnljMlZVY21GamEwNWhiV1VvZENrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdGeVoyVjBSM0p2ZFhBZ1BTQmxMQ0IwYUdsekxsOWlhVzVrYVc1bmN5QTlJR1V1YzNWaWMyTnlhV0psWHloMExDQnBLVHNLSUNBZ0lIMEtJQ0FnSUdkbGRGWmhiSFZsS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtSnBibVFvS1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhSb2FYTXVYM1JoY21kbGRFZHliM1Z3TG01RFlXTm9aV1JQWW1wbFkzUnpYeXdnYVNBOUlIUm9hWE11WDJKcGJtUnBibWR6VzI1ZE93b2dJQ0FnSUNBZ0lHa2dJVDA5SUhadmFXUWdNQ0FtSmlCcExtZGxkRlpoYkhWbEtHVXNJSFFwT3dvZ0lDQWdmUW9nSUNBZ2MyVjBWbUZzZFdVb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnZEdocGN5NWZZbWx1WkdsdVozTTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnZEdocGN5NWZkR0Z5WjJWMFIzSnZkWEF1YmtOaFkyaGxaRTlpYW1WamRITmZMQ0J5SUQwZ2JpNXNaVzVuZEdnN0lHa2dJVDA5SUhJN0lDc3JhU2x1VzJsZExuTmxkRlpoYkhWbEtHVXNJSFFwT3dvZ0lDQWdmUW9nSUNBZ1ltbHVaQ2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVYMkpwYm1ScGJtZHpPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdkQ0E5SUhSb2FYTXVYM1JoY21kbGRFZHliM1Z3TG01RFlXTm9aV1JQWW1wbFkzUnpYeXdnYmlBOUlHVXViR1Z1WjNSb095QjBJQ0U5UFNCdU95QXJLM1FwWlZ0MFhTNWlhVzVrS0NrN0NpQWdJQ0I5Q2lBZ0lDQjFibUpwYm1Rb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TGw5aWFXNWthVzVuY3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhRZ1BTQjBhR2x6TGw5MFlYSm5aWFJIY205MWNDNXVRMkZqYUdWa1QySnFaV04wYzE4c0lHNGdQU0JsTG14bGJtZDBhRHNnZENBaFBUMGdianNnS3l0MEtXVmJkRjB1ZFc1aWFXNWtLQ2s3Q2lBZ0lDQjlDbjBzSUd0bElEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlsN0NpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0lEMGdkQ3dnZEdocGN5NXdZWEp6WldSUVlYUm9JRDBnYmlCOGZDQnJaUzV3WVhKelpWUnlZV05yVG1GdFpTaDBLU3dnZEdocGN5NXViMlJsSUQwZ2EyVXVabWx1WkU1dlpHVW9aU3dnZEdocGN5NXdZWEp6WldSUVlYUm9MbTV2WkdWT1lXMWxLU0I4ZkNCbExDQjBhR2x6TG5KdmIzUk9iMlJsSUQwZ1pTd2dkR2hwY3k1blpYUldZV3gxWlNBOUlIUm9hWE11WDJkbGRGWmhiSFZsWDNWdVltOTFibVFzSUhSb2FYTXVjMlYwVm1Gc2RXVWdQU0IwYUdsekxsOXpaWFJXWVd4MVpWOTFibUp2ZFc1a093b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHTnlaV0YwWlNobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVZ0ppWWdaUzVwYzBGdWFXMWhkR2x2Yms5aWFtVmpkRWR5YjNWd0lEOGdibVYzSUd0bExrTnZiWEJ2YzJsMFpTaGxMQ0IwTENCdUtTQTZJRzVsZHlCclpTaGxMQ0IwTENCdUtUc0tJQ0FnSUgwS0lDQWdJSE4wWVhScFl5QnpZVzVwZEdsNlpVNXZaR1ZPWVcxbEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV5WlhCc1lXTmxLQzljY3k5bkxDQWlYeUlwTG5KbGNHeGhZMlVvZVhrc0lDSWlLVHNLSUNBZ0lIMEtJQ0FnSUhOMFlYUnBZeUJ3WVhKelpWUnlZV05yVG1GdFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JUZVM1bGVHVmpLR1VwT3dvZ0lDQWdJQ0FnSUdsbUlDZ2hkQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0pRY205d1pYSjBlVUpwYm1ScGJtYzZJRU5oYm01dmRDQndZWEp6WlNCMGNtRmphMDVoYldVNklDSWdLeUJsS1RzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlU1aGJXVTZJSFJiTWwwc0NpQWdJQ0FnSUNBZ0lDQWdJRzlpYW1WamRFNWhiV1U2SUhSYk0xMHNDaUFnSUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRWx1WkdWNE9pQjBXelJkTEFvZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGVVNWhiV1U2SUhSYk5WMHNDaUFnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblI1U1c1a1pYZzZJSFJiTmwwS0lDQWdJQ0FnSUNCOUxDQnBJRDBnYmk1dWIyUmxUbUZ0WlNBbUppQnVMbTV2WkdWT1lXMWxMbXhoYzNSSmJtUmxlRTltS0NJdUlpazdDaUFnSUNBZ0lDQWdhV1lnS0drZ0lUMDlJSFp2YVdRZ01DQW1KaUJwSUNFOVBTQXRNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY2lBOUlHNHVibTlrWlU1aGJXVXVjM1ZpYzNSeWFXNW5LR2tnS3lBeEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnVkhrdWFXNWtaWGhQWmloeUtTQWhQVDBnTFRFZ0ppWWdLRzR1Ym05a1pVNWhiV1VnUFNCdUxtNXZaR1ZPWVcxbExuTjFZbk4wY21sdVp5Z3dMQ0JwS1N3Z2JpNXZZbXBsWTNST1lXMWxJRDBnY2lrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHbG1JQ2h1TG5CeWIzQmxjblI1VG1GdFpTQTlQVDBnYm5Wc2JDQjhmQ0J1TG5CeWIzQmxjblI1VG1GdFpTNXNaVzVuZEdnZ1BUMDlJREFwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWdpVUhKdmNHVnlkSGxDYVc1a2FXNW5PaUJqWVc0Z2JtOTBJSEJoY25ObElIQnliM0JsY25SNVRtRnRaU0JtY205dElIUnlZV05yVG1GdFpUb2dJaUFySUdVcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCdU93b2dJQ0FnZlFvZ0lDQWdjM1JoZEdsaklHWnBibVJPYjJSbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCcFppQW9JWFFnZkh3Z2RDQTlQVDBnSWlJZ2ZId2dkQ0E5UFQwZ0lpNGlJSHg4SUhRZ1BUMDlJQzB4SUh4OElIUWdQVDA5SUdVdWJtRnRaU0I4ZkNCMElEMDlQU0JsTG5WMWFXUXBJSEpsZEhWeWJpQmxPd29nSUNBZ0lDQWdJR2xtSUNobExuTnJaV3hsZEc5dUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnWlM1emEyVnNaWFJ2Ymk1blpYUkNiMjVsUW5sT1lXMWxLSFFwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYmlBaFBUMGdkbTlwWkNBd0tTQnlaWFIxY200Z2Jqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0dVdVkyaHBiR1J5Wlc0cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNGdQU0JtZFc1amRHbHZiaWh5S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc4Z1BTQXdPeUJ2SUR3Z2NpNXNaVzVuZEdnN0lHOHJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCeVcyOWRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhMbTVoYldVZ1BUMDlJSFFnZkh3Z1lTNTFkV2xrSUQwOVBTQjBLU0J5WlhSMWNtNGdZVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUc0b1lTNWphR2xzWkhKbGJpazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHd3BJSEpsZEhWeWJpQnNPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNJR2tnUFNCdUtHVXVZMmhwYkdSeVpXNHBPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU2tnY21WMGRYSnVJR2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c093b2dJQ0FnZlFvZ0lDQWdYMmRsZEZaaGJIVmxYM1Z1WVhaaGFXeGhZbXhsS0NrZ2UzMEtJQ0FnSUY5elpYUldZV3gxWlY5MWJtRjJZV2xzWVdKc1pTZ3BJSHQ5Q2lBZ0lDQmZaMlYwVm1Gc2RXVmZaR2x5WldOMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCbFczUmRJRDBnZEdocGN5NTBZWEpuWlhSUFltcGxZM1JiZEdocGN5NXdjbTl3WlhKMGVVNWhiV1ZkT3dvZ0lDQWdmUW9nSUNBZ1gyZGxkRlpoYkhWbFgyRnljbUY1S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJSFJvYVhNdWNtVnpiMngyWldSUWNtOXdaWEowZVRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdrZ1BTQXdMQ0J5SUQwZ2JpNXNaVzVuZEdnN0lHa2dJVDA5SUhJN0lDc3JhU2xsVzNRcksxMGdQU0J1VzJsZE93b2dJQ0FnZlFvZ0lDQWdYMmRsZEZaaGJIVmxYMkZ5Y21GNVJXeGxiV1Z1ZENobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnWlZ0MFhTQTlJSFJvYVhNdWNtVnpiMngyWldSUWNtOXdaWEowZVZ0MGFHbHpMbkJ5YjNCbGNuUjVTVzVrWlhoZE93b2dJQ0FnZlFvZ0lDQWdYMmRsZEZaaGJIVmxYM1J2UVhKeVlYa29aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11Y21WemIyeDJaV1JRY205d1pYSjBlUzUwYjBGeWNtRjVLR1VzSUhRcE93b2dJQ0FnZlFvZ0lDQWdYM05sZEZaaGJIVmxYMlJwY21WamRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUlBZbXBsWTNSYmRHaHBjeTV3Y205d1pYSjBlVTVoYldWZElEMGdaVnQwWFRzS0lDQWdJSDBLSUNBZ0lGOXpaWFJXWVd4MVpWOWthWEpsWTNSZmMyVjBUbVZsWkhOVmNHUmhkR1VvWlN3Z2RDa2dld29nSUNBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBXM1JvYVhNdWNISnZjR1Z5ZEhsT1lXMWxYU0E5SUdWYmRGMHNJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBMbTVsWldSelZYQmtZWFJsSUQwZ0lUQTdDaUFnSUNCOUNpQWdJQ0JmYzJWMFZtRnNkV1ZmWkdseVpXTjBYM05sZEUxaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZEdGeVoyVjBUMkpxWldOMFczUm9hWE11Y0hKdmNHVnlkSGxPWVcxbFhTQTlJR1ZiZEYwc0lIUm9hWE11ZEdGeVoyVjBUMkpxWldOMExtMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VnUFNBaE1Ec0tJQ0FnSUgwS0lDQWdJRjl6WlhSV1lXeDFaVjloY25KaGVTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJRzR1YkdWdVozUm9PeUJwSUNFOVBTQnlPeUFySzJrcGJsdHBYU0E5SUdWYmRDc3JYVHNLSUNBZ0lIMEtJQ0FnSUY5elpYUldZV3gxWlY5aGNuSmhlVjl6WlhST1pXVmtjMVZ3WkdGMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIazdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnBJRDBnTUN3Z2NpQTlJRzR1YkdWdVozUm9PeUJwSUNFOVBTQnlPeUFySzJrcGJsdHBYU0E5SUdWYmRDc3JYVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQzV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWDNObGRGWmhiSFZsWDJGeWNtRjVYM05sZEUxaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0J1SUQwZ2RHaHBjeTV5WlhOdmJIWmxaRkJ5YjNCbGNuUjVPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdhU0E5SURBc0lISWdQU0J1TG14bGJtZDBhRHNnYVNBaFBUMGdjanNnS3l0cEtXNWJhVjBnUFNCbFczUXJLMTA3Q2lBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhSUFltcGxZM1F1YldGMGNtbDRWMjl5YkdST1pXVmtjMVZ3WkdGMFpTQTlJQ0V3T3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRlpoYkhWbFgyRnljbUY1Uld4bGJXVnVkQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTnZiSFpsWkZCeWIzQmxjblI1VzNSb2FYTXVjSEp2Y0dWeWRIbEpibVJsZUYwZ1BTQmxXM1JkT3dvZ0lDQWdmUW9nSUNBZ1gzTmxkRlpoYkhWbFgyRnljbUY1Uld4bGJXVnVkRjl6WlhST1pXVmtjMVZ3WkdGMFpTaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOdmJIWmxaRkJ5YjNCbGNuUjVXM1JvYVhNdWNISnZjR1Z5ZEhsSmJtUmxlRjBnUFNCbFczUmRMQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQzV1WldWa2MxVndaR0YwWlNBOUlDRXdPd29nSUNBZ2ZRb2dJQ0FnWDNObGRGWmhiSFZsWDJGeWNtRjVSV3hsYldWdWRGOXpaWFJOWVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIbGJkR2hwY3k1d2NtOXdaWEowZVVsdVpHVjRYU0E5SUdWYmRGMHNJSFJvYVhNdWRHRnlaMlYwVDJKcVpXTjBMbTFoZEhKcGVGZHZjbXhrVG1WbFpITlZjR1JoZEdVZ1BTQWhNRHNLSUNBZ0lIMEtJQ0FnSUY5elpYUldZV3gxWlY5bWNtOXRRWEp5WVhrb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6YjJ4MlpXUlFjbTl3WlhKMGVTNW1jbTl0UVhKeVlYa29aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQmZjMlYwVm1Gc2RXVmZabkp2YlVGeWNtRjVYM05sZEU1bFpXUnpWWEJrWVhSbEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzI5c2RtVmtVSEp2Y0dWeWRIa3Vabkp2YlVGeWNtRjVLR1VzSUhRcExDQjBhR2x6TG5SaGNtZGxkRTlpYW1WamRDNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnZlFvZ0lDQWdYM05sZEZaaGJIVmxYMlp5YjIxQmNuSmhlVjl6WlhSTllYUnlhWGhYYjNKc1pFNWxaV1J6VlhCa1lYUmxLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGt1Wm5KdmJVRnljbUY1S0dVc0lIUXBMQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQzV0WVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbElEMGdJVEE3Q2lBZ0lDQjlDaUFnSUNCZloyVjBWbUZzZFdWZmRXNWliM1Z1WkNobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWlhVzVrS0Nrc0lIUm9hWE11WjJWMFZtRnNkV1VvWlN3Z2RDazdDaUFnSUNCOUNpQWdJQ0JmYzJWMFZtRnNkV1ZmZFc1aWIzVnVaQ2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1aWFXNWtLQ2tzSUhSb2FYTXVjMlYwVm1Gc2RXVW9aU3dnZENrN0NpQWdJQ0I5Q2lBZ0lDQmlhVzVrS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTV1YjJSbExDQjBJRDBnZEdocGN5NXdZWEp6WldSUVlYUm9MQ0J1SUQwZ2RDNXZZbXBsWTNST1lXMWxMQ0JwSUQwZ2RDNXdjbTl3WlhKMGVVNWhiV1VzSUhJZ1BTQjBMbkJ5YjNCbGNuUjVTVzVrWlhnN0NpQWdJQ0FnSUNBZ2FXWWdLR1VnZkh3Z0tHVWdQU0JyWlM1bWFXNWtUbTlrWlNoMGFHbHpMbkp2YjNST2IyUmxMQ0IwTG01dlpHVk9ZVzFsS1NCOGZDQjBhR2x6TG5KdmIzUk9iMlJsTENCMGFHbHpMbTV2WkdVZ1BTQmxLU3dnZEdocGN5NW5aWFJXWVd4MVpTQTlJSFJvYVhNdVgyZGxkRlpoYkhWbFgzVnVZWFpoYVd4aFlteGxMQ0IwYUdsekxuTmxkRlpoYkhWbElEMGdkR2hwY3k1ZmMyVjBWbUZzZFdWZmRXNWhkbUZwYkdGaWJHVXNJQ0ZsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nVkhKNWFXNW5JSFJ2SUhWd1pHRjBaU0J1YjJSbElHWnZjaUIwY21GamF6b2dJaUFySUhSb2FYTXVjR0YwYUNBcklDSWdZblYwSUdsMElIZGhjMjRuZENCbWIzVnVaQzRpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvYmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJSFF1YjJKcVpXTjBTVzVrWlhnN0NpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDaHVLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ltMWhkR1Z5YVdGc2N5STZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxMbTFoZEdWeWFXRnNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nUTJGdUlHNXZkQ0JpYVc1a0lIUnZJRzFoZEdWeWFXRnNJR0Z6SUc1dlpHVWdaRzlsY3lCdWIzUWdhR0YyWlNCaElHMWhkR1Z5YVdGc0xpSXNJSFJvYVhNcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpTNXRZWFJsY21saGJDNXRZWFJsY21saGJITXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VUhKdmNHVnlkSGxDYVc1a2FXNW5PaUJEWVc0Z2JtOTBJR0pwYm1RZ2RHOGdiV0YwWlhKcFlXd3ViV0YwWlhKcFlXeHpJR0Z6SUc1dlpHVXViV0YwWlhKcFlXd2daRzlsY3lCdWIzUWdhR0YyWlNCaElHMWhkR1Z5YVdGc2N5QmhjbkpoZVM0aUxDQjBhR2x6S1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxJRDBnWlM1dFlYUmxjbWxoYkM1dFlYUmxjbWxoYkhNN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0ppYjI1bGN5STZDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxMbk5yWld4bGRHOXVLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGxCeWIzQmxjblI1UW1sdVpHbHVaem9nUTJGdUlHNXZkQ0JpYVc1a0lIUnZJR0p2Ym1WeklHRnpJRzV2WkdVZ1pHOWxjeUJ1YjNRZ2FHRjJaU0JoSUhOclpXeGxkRzl1TGlJc0lIUm9hWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVWdQU0JsTG5OclpXeGxkRzl1TG1KdmJtVnpPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYUNBOUlEQTdJR2dnUENCbExteGxibWQwYURzZ2FDc3JLV2xtSUNobFcyaGRMbTVoYldVZ1BUMDlJR01wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWXlBOUlHZzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWYmJsMGdQVDA5SUhadmFXUWdNQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1UWNtOXdaWEowZVVKcGJtUnBibWM2SUVOaGJpQnViM1FnWW1sdVpDQjBieUJ2WW1wbFkzUk9ZVzFsSUc5bUlHNXZaR1VnZFc1a1pXWnBibVZrTGlJc0lIUm9hWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVWdQU0JsVzI1ZE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqSUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsVzJOZElEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVFjbTl3WlhKMGVVSnBibVJwYm1jNklGUnllV2x1WnlCMGJ5QmlhVzVrSUhSdklHOWlhbVZqZEVsdVpHVjRJRzltSUc5aWFtVmpkRTVoYldVc0lHSjFkQ0JwY3lCMWJtUmxabWx1WldRdUlpd2dkR2hwY3l3Z1pTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaU0E5SUdWYlkxMDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2JHVjBJRzhnUFNCbFcybGRPd29nSUNBZ0lDQWdJR2xtSUNodklEMDlQU0IyYjJsa0lEQXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCMExtNXZaR1ZPWVcxbE93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1UWNtOXdaWEowZVVKcGJtUnBibWM2SUZSeWVXbHVaeUIwYnlCMWNHUmhkR1VnY0hKdmNHVnlkSGtnWm05eUlIUnlZV05yT2lBaUlDc2dZeUFySUNJdUlpQXJJR2tnS3lBaUlHSjFkQ0JwZENCM1lYTnVKM1FnWm05MWJtUXVJaXdnWlNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQjBhR2x6TGxabGNuTnBiMjVwYm1jdVRtOXVaVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZEU5aWFtVmpkQ0E5SUdVc0lHVXVibVZsWkhOVmNHUmhkR1VnSVQwOUlIWnZhV1FnTUNBL0lHRWdQU0IwYUdsekxsWmxjbk5wYjI1cGJtY3VUbVZsWkhOVmNHUmhkR1VnT2lCbExtMWhkSEpwZUZkdmNteGtUbVZsWkhOVmNHUmhkR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9ZU0E5SUhSb2FYTXVWbVZ5YzJsdmJtbHVaeTVOWVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbEtUc0tJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlIUm9hWE11UW1sdVpHbHVaMVI1Y0dVdVJHbHlaV04wT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJQ0U5UFNCMmIybGtJREFwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0drZ1BUMDlJQ0p0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhNaUtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdVdVoyVnZiV1YwY25rcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1UWNtOXdaWEowZVVKcGJtUnBibWM2SUVOaGJpQnViM1FnWW1sdVpDQjBieUJ0YjNKd2FGUmhjbWRsZEVsdVpteDFaVzVqWlhNZ1ltVmpZWFZ6WlNCdWIyUmxJR1J2WlhNZ2JtOTBJR2hoZG1VZ1lTQm5aVzl0WlhSeWVTNGlMQ0IwYUdsektUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlM1blpXOXRaWFJ5ZVM1cGMwSjFabVpsY2tkbGIyMWxkSEo1S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbExtZGxiMjFsZEhKNUxtMXZjbkJvUVhSMGNtbGlkWFJsY3lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVFjbTl3WlhKMGVVSnBibVJwYm1jNklFTmhiaUJ1YjNRZ1ltbHVaQ0IwYnlCdGIzSndhRlJoY21kbGRFbHVabXgxWlc1alpYTWdZbVZqWVhWelpTQnViMlJsSUdSdlpYTWdibTkwSUdoaGRtVWdZU0JuWlc5dFpYUnllUzV0YjNKd2FFRjBkSEpwWW5WMFpYTXVJaXdnZEdocGN5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1dGIzSndhRlJoY21kbGRFUnBZM1JwYjI1aGNubGJjbDBnSVQwOUlIWnZhV1FnTUNBbUppQW9jaUE5SUdVdWJXOXljR2hVWVhKblpYUkVhV04wYVc5dVlYSjVXM0pkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVVSEp2Y0dWeWRIbENhVzVrYVc1bk9pQkRZVzRnYm05MElHSnBibVFnZEc4Z2JXOXljR2hVWVhKblpYUkpibVpzZFdWdVkyVnpJRzl1SUZSSVVrVkZMa2RsYjIxbGRISjVMaUJWYzJVZ1ZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua2dhVzV6ZEdWaFpDNGlMQ0IwYUdsektUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiQ0E5SUhSb2FYTXVRbWx1WkdsdVoxUjVjR1V1UVhKeVlYbEZiR1Z0Wlc1MExDQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGtnUFNCdkxDQjBhR2x6TG5CeWIzQmxjblI1U1c1a1pYZ2dQU0J5T3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J2TG1aeWIyMUJjbkpoZVNBaFBUMGdkbTlwWkNBd0lDWW1JRzh1ZEc5QmNuSmhlU0FoUFQwZ2RtOXBaQ0F3SUQ4Z0tHd2dQU0IwYUdsekxrSnBibVJwYm1kVWVYQmxMa2hoYzBaeWIyMVViMEZ5Y21GNUxDQjBhR2x6TG5KbGMyOXNkbVZrVUhKdmNHVnlkSGtnUFNCdktTQTZJRUZ5Y21GNUxtbHpRWEp5WVhrb2J5a2dQeUFvYkNBOUlIUm9hWE11UW1sdVpHbHVaMVI1Y0dVdVJXNTBhWEpsUVhKeVlYa3NJSFJvYVhNdWNtVnpiMngyWldSUWNtOXdaWEowZVNBOUlHOHBJRG9nZEdocGN5NXdjbTl3WlhKMGVVNWhiV1VnUFNCcE93b2dJQ0FnSUNBZ0lIUm9hWE11WjJWMFZtRnNkV1VnUFNCMGFHbHpMa2RsZEhSbGNrSjVRbWx1WkdsdVoxUjVjR1ZiYkYwc0lIUm9hWE11YzJWMFZtRnNkV1VnUFNCMGFHbHpMbE5sZEhSbGNrSjVRbWx1WkdsdVoxUjVjR1ZCYm1SV1pYSnphVzl1YVc1blcyeGRXMkZkT3dvZ0lDQWdmUW9nSUNBZ2RXNWlhVzVrS0NrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTQTlJRzUxYkd3c0lIUm9hWE11WjJWMFZtRnNkV1VnUFNCMGFHbHpMbDluWlhSV1lXeDFaVjkxYm1KdmRXNWtMQ0IwYUdsekxuTmxkRlpoYkhWbElEMGdkR2hwY3k1ZmMyVjBWbUZzZFdWZmRXNWliM1Z1WkRzS0lDQWdJSDBLZlRzS2EyVXVRMjl0Y0c5emFYUmxJRDBnU21nN0NtdGxMbkJ5YjNSdmRIbHdaUzVDYVc1a2FXNW5WSGx3WlNBOUlIc0tJQ0FnSUVScGNtVmpkRG9nTUN3S0lDQWdJRVZ1ZEdseVpVRnljbUY1T2lBeExBb2dJQ0FnUVhKeVlYbEZiR1Z0Wlc1ME9pQXlMQW9nSUNBZ1NHRnpSbkp2YlZSdlFYSnlZWGs2SURNS2ZUc0thMlV1Y0hKdmRHOTBlWEJsTGxabGNuTnBiMjVwYm1jZ1BTQjdDaUFnSUNCT2IyNWxPaUF3TEFvZ0lDQWdUbVZsWkhOVmNHUmhkR1U2SURFc0NpQWdJQ0JOWVhSeWFYaFhiM0pzWkU1bFpXUnpWWEJrWVhSbE9pQXlDbjA3Q210bExuQnliM1J2ZEhsd1pTNUhaWFIwWlhKQ2VVSnBibVJwYm1kVWVYQmxJRDBnV3dvZ0lDQWdhMlV1Y0hKdmRHOTBlWEJsTGw5blpYUldZV3gxWlY5a2FYSmxZM1FzQ2lBZ0lDQnJaUzV3Y205MGIzUjVjR1V1WDJkbGRGWmhiSFZsWDJGeWNtRjVMQW9nSUNBZ2EyVXVjSEp2ZEc5MGVYQmxMbDluWlhSV1lXeDFaVjloY25KaGVVVnNaVzFsYm5Rc0NpQWdJQ0JyWlM1d2NtOTBiM1I1Y0dVdVgyZGxkRlpoYkhWbFgzUnZRWEp5WVhrS1hUc0thMlV1Y0hKdmRHOTBlWEJsTGxObGRIUmxja0o1UW1sdVpHbHVaMVI1Y0dWQmJtUldaWEp6YVc5dWFXNW5JRDBnV3dvZ0lDQWdXd29nSUNBZ0lDQWdJR3RsTG5CeWIzUnZkSGx3WlM1ZmMyVjBWbUZzZFdWZlpHbHlaV04wTEFvZ0lDQWdJQ0FnSUd0bExuQnliM1J2ZEhsd1pTNWZjMlYwVm1Gc2RXVmZaR2x5WldOMFgzTmxkRTVsWldSelZYQmtZWFJsTEFvZ0lDQWdJQ0FnSUd0bExuQnliM1J2ZEhsd1pTNWZjMlYwVm1Gc2RXVmZaR2x5WldOMFgzTmxkRTFoZEhKcGVGZHZjbXhrVG1WbFpITlZjR1JoZEdVS0lDQWdJRjBzQ2lBZ0lDQmJDaUFnSUNBZ0lDQWdhMlV1Y0hKdmRHOTBlWEJsTGw5elpYUldZV3gxWlY5aGNuSmhlU3dLSUNBZ0lDQWdJQ0JyWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyRnljbUY1WDNObGRFNWxaV1J6VlhCa1lYUmxMQW9nSUNBZ0lDQWdJR3RsTG5CeWIzUnZkSGx3WlM1ZmMyVjBWbUZzZFdWZllYSnlZWGxmYzJWMFRXRjBjbWw0VjI5eWJHUk9aV1ZrYzFWd1pHRjBaUW9nSUNBZ1hTd0tJQ0FnSUZzS0lDQWdJQ0FnSUNCclpTNXdjbTkwYjNSNWNHVXVYM05sZEZaaGJIVmxYMkZ5Y21GNVJXeGxiV1Z1ZEN3S0lDQWdJQ0FnSUNCclpTNXdjbTkwYjNSNWNHVXVYM05sZEZaaGJIVmxYMkZ5Y21GNVJXeGxiV1Z1ZEY5elpYUk9aV1ZrYzFWd1pHRjBaU3dLSUNBZ0lDQWdJQ0JyWlM1d2NtOTBiM1I1Y0dVdVgzTmxkRlpoYkhWbFgyRnljbUY1Uld4bGJXVnVkRjl6WlhSTllYUnlhWGhYYjNKc1pFNWxaV1J6VlhCa1lYUmxDaUFnSUNCZExBb2dJQ0FnV3dvZ0lDQWdJQ0FnSUd0bExuQnliM1J2ZEhsd1pTNWZjMlYwVm1Gc2RXVmZabkp2YlVGeWNtRjVMQW9nSUNBZ0lDQWdJR3RsTG5CeWIzUnZkSGx3WlM1ZmMyVjBWbUZzZFdWZlpuSnZiVUZ5Y21GNVgzTmxkRTVsWldSelZYQmtZWFJsTEFvZ0lDQWdJQ0FnSUd0bExuQnliM1J2ZEhsd1pTNWZjMlYwVm1Gc2RXVmZabkp2YlVGeWNtRjVYM05sZEUxaGRISnBlRmR2Y214a1RtVmxaSE5WY0dSaGRHVUtJQ0FnSUYwS1hUc0tkbUZ5SUZsb0lEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb0tYc0tJQ0FnSUNBZ0lDQjBhR2x6TG5WMWFXUWdQU0JGZENncExDQjBhR2x6TGw5dlltcGxZM1J6SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektTd2dkR2hwY3k1dVEyRmphR1ZrVDJKcVpXTjBjMThnUFNBd093b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2UzMDdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNWthV05sYzBKNVZWVkpSQ0E5SUdVN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdUlEMGdNQ3dnYVNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHNGdJVDA5SUdrN0lDc3JiaWxsVzJGeVozVnRaVzUwYzF0dVhTNTFkV2xrWFNBOUlHNDdDaUFnSUNBZ0lDQWdkR2hwY3k1ZmNHRjBhSE1nUFNCYlhTd2dkR2hwY3k1ZmNHRnljMlZrVUdGMGFITWdQU0JiWFN3Z2RHaHBjeTVmWW1sdVpHbHVaM01nUFNCYlhTd2dkR2hwY3k1ZlltbHVaR2x1WjNOSmJtUnBZMlZ6UW5sUVlYUm9JRDBnZTMwN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpPd29nSUNBZ0lDQWdJSFJvYVhNdWMzUmhkSE1nUFNCN0NpQWdJQ0FnSUNBZ0lDQWdJRzlpYW1WamRITTZJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsZENCMGIzUmhiQ0FvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUXVYMjlpYW1WamRITXViR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxkQ0JwYmxWelpTQW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkRzkwWVd3Z0xTQjBMbTVEWVdOb1pXUlBZbXBsWTNSelh6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNBZ0lDQWdaMlYwSUdKcGJtUnBibWR6VUdWeVQySnFaV04wSUNncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMExsOWlhVzVrYVc1bmN5NXNaVzVuZEdnN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdmUW9nSUNBZ1lXUmtLQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWZiMkpxWldOMGN5d2dkQ0E5SUhSb2FYTXVYMmx1WkdsalpYTkNlVlZWU1VRc0lHNGdQU0IwYUdsekxsOXdZWFJvY3l3Z2FTQTlJSFJvYVhNdVgzQmhjbk5sWkZCaGRHaHpMQ0J5SUQwZ2RHaHBjeTVmWW1sdVpHbHVaM01zSUc4Z1BTQnlMbXhsYm1kMGFDd2dZU3dnYkNBOUlHVXViR1Z1WjNSb0xDQmpJRDBnZEdocGN5NXVRMkZqYUdWa1QySnFaV04wYzE4N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCb0lEMGdNQ3dnZFNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHZ2dJVDA5SUhVN0lDc3JhQ2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ1lYSm5kVzFsYm5SelcyaGRMQ0JtSUQwZ1pDNTFkV2xrTENCdElEMGdkRnRtWFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cwZ1BUMDlJSFp2YVdRZ01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiU0E5SUd3ckt5d2dkRnRtWFNBOUlHMHNJR1V1Y0hWemFDaGtLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdlQ0E5SURBc0lIWWdQU0J2T3lCNElDRTlQU0IyT3lBckszZ3BjbHQ0WFM1d2RYTm9LRzVsZHlCclpTaGtMQ0J1VzNoZExDQnBXM2hkS1NrN0NpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYlNBOElHTXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0VnUFNCbFcyMWRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhnZ1BTQXRMV01zSUhZZ1BTQmxXM2hkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEZ0MkxuVjFhV1JkSUQwZ2JTd2daVnR0WFNBOUlIWXNJSFJiWmwwZ1BTQjRMQ0JsVzNoZElEMGdaRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loc1pYUWdaeUE5SURBc0lIQWdQU0J2T3lCbklDRTlQU0J3T3lBcksyY3Bld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmZJRDBnY2x0blhTd2dlU0E5SUY5YmVGMHNJR0lnUFNCZlcyMWRPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5YmJWMGdQU0I1TENCaUlEMDlQU0IyYjJsa0lEQWdKaVlnS0dJZ1BTQnVaWGNnYTJVb1pDd2dibHRuWFN3Z2FWdG5YU2twTENCZlczaGRJRDBnWWpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHVmJiVjBnSVQwOUlHRWdKaVlnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVFXNXBiV0YwYVc5dVQySnFaV04wUjNKdmRYQTZJRVJwWm1abGNtVnVkQ0J2WW1wbFkzUnpJSGRwZEdnZ2RHaGxJSE5oYldVZ1ZWVkpSQ0JrWlhSbFkzUmxaQzRnUTJ4bFlXNGdkR2hsSUdOaFkyaGxjeUJ2Y2lCeVpXTnlaV0YwWlNCNWIzVnlJR2x1Wm5KaGMzUnlkV04wZFhKbElIZG9aVzRnY21Wc2IyRmthVzVuSUhOalpXNWxjeTRpS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTV1UTJGamFHVmtUMkpxWldOMGMxOGdQU0JqT3dvZ0lDQWdmUW9nSUNBZ2NtVnRiM1psS0NrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0JsSUQwZ2RHaHBjeTVmYjJKcVpXTjBjeXdnZENBOUlIUm9hWE11WDJsdVpHbGpaWE5DZVZWVlNVUXNJRzRnUFNCMGFHbHpMbDlpYVc1a2FXNW5jeXdnYVNBOUlHNHViR1Z1WjNSb0xDQnlJRDBnZEdocGN5NXVRMkZqYUdWa1QySnFaV04wYzE4N0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCdklEMGdNQ3dnWVNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHOGdJVDA5SUdFN0lDc3JieWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ1lYSm5kVzFsYm5SelcyOWRMQ0JqSUQwZ2JDNTFkV2xrTENCb0lEMGdkRnRqWFRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dnZ0lUMDlJSFp2YVdRZ01DQW1KaUJvSUQ0OUlISXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMUlEMGdjaXNyTENCa0lEMGdaVnQxWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSYlpDNTFkV2xrWFNBOUlHZ3NJR1ZiYUYwZ1BTQmtMQ0IwVzJOZElEMGdkU3dnWlZ0MVhTQTlJR3c3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR1lnUFNBd0xDQnRJRDBnYVRzZ1ppQWhQVDBnYlRzZ0t5dG1LWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdlQ0E5SUc1YlpsMHNJSFlnUFNCNFczVmRMQ0JuSUQwZ2VGdG9YVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNFcyaGRJRDBnZGl3Z2VGdDFYU0E5SUdjN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnZEdocGN5NXVRMkZqYUdWa1QySnFaV04wYzE4Z1BTQnlPd29nSUNBZ2ZRb2dJQ0FnZFc1allXTm9aU2dwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVYMjlpYW1WamRITXNJSFFnUFNCMGFHbHpMbDlwYm1ScFkyVnpRbmxWVlVsRUxDQnVJRDBnZEdocGN5NWZZbWx1WkdsdVozTXNJR2tnUFNCdUxteGxibWQwYUN3Z2NpQTlJSFJvYVhNdWJrTmhZMmhsWkU5aWFtVmpkSE5mTENCdklEMGdaUzVzWlc1bmRHZzdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQmhJRDBnTUN3Z2JDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR0VnSVQwOUlHdzdJQ3NyWVNsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaklEMGdZWEpuZFcxbGJuUnpXMkZkTENCb0lEMGdZeTUxZFdsa0xDQjFJRDBnZEZ0b1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVWdJVDA5SUhadmFXUWdNQ2tnYVdZZ0tHUmxiR1YwWlNCMFcyaGRMQ0IxSUR3Z2Npa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdRZ1BTQXRMWElzSUdZZ1BTQmxXMlJkTENCdElEMGdMUzF2TENCNElEMGdaVnR0WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSYlppNTFkV2xrWFNBOUlIVXNJR1ZiZFYwZ1BTQm1MQ0IwVzNndWRYVnBaRjBnUFNCa0xDQmxXMlJkSUQwZ2VDd2daUzV3YjNBb0tUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhzWlhRZ2RpQTlJREFzSUdjZ1BTQnBPeUIySUNFOVBTQm5PeUFySzNZcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd0lEMGdibHQyWFN3Z1h5QTlJSEJiWkYwc0lIa2dQU0J3VzIxZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJiZFYwZ1BTQmZMQ0J3VzJSZElEMGdlU3dnY0M1d2IzQW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtJRDBnTFMxdkxDQm1JRDBnWlZ0a1hUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUWdQaUF3SUNZbUlDaDBXMll1ZFhWcFpGMGdQU0IxS1N3Z1pWdDFYU0E5SUdZc0lHVXVjRzl3S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUcwZ1BTQXdMQ0I0SUQwZ2FUc2diU0FoUFQwZ2VEc2dLeXR0S1hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZGlBOUlHNWJiVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RsdDFYU0E5SUhaYlpGMHNJSFl1Y0c5d0tDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2RHaHBjeTV1UTJGamFHVmtUMkpxWldOMGMxOGdQU0J5T3dvZ0lDQWdmUW9nSUNBZ2MzVmljMk55YVdKbFh5aGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCMGFHbHpMbDlpYVc1a2FXNW5jMGx1WkdsalpYTkNlVkJoZEdnc0lHa2dQU0J1VzJWZExDQnlJRDBnZEdocGN5NWZZbWx1WkdsdVozTTdDaUFnSUNBZ0lDQWdhV1lnS0drZ0lUMDlJSFp2YVdRZ01Da2djbVYwZFhKdUlISmJhVjA3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0IwYUdsekxsOXdZWFJvY3l3Z1lTQTlJSFJvYVhNdVgzQmhjbk5sWkZCaGRHaHpMQ0JzSUQwZ2RHaHBjeTVmYjJKcVpXTjBjeXdnWXlBOUlHd3ViR1Z1WjNSb0xDQm9JRDBnZEdocGN5NXVRMkZqYUdWa1QySnFaV04wYzE4c0lIVWdQU0J1WlhjZ1FYSnlZWGtvWXlrN0NpQWdJQ0FnSUNBZ2FTQTlJSEl1YkdWdVozUm9MQ0J1VzJWZElEMGdhU3dnYnk1d2RYTm9LR1VwTENCaExuQjFjMmdvZENrc0lISXVjSFZ6YUNoMUtUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHUWdQU0JvTENCbUlEMGdiQzVzWlc1bmRHZzdJR1FnSVQwOUlHWTdJQ3NyWkNsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdElEMGdiRnRrWFRzS0lDQWdJQ0FnSUNBZ0lDQWdkVnRrWFNBOUlHNWxkeUJyWlNodExDQmxMQ0IwS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhVN0NpQWdJQ0I5Q2lBZ0lDQjFibk4xWW5OamNtbGlaVjhvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVmWW1sdVpHbHVaM05KYm1ScFkyVnpRbmxRWVhSb0xDQnVJRDBnZEZ0bFhUc0tJQ0FnSUNBZ0lDQnBaaUFvYmlBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NWZjR0YwYUhNc0lISWdQU0IwYUdsekxsOXdZWEp6WldSUVlYUm9jeXdnYnlBOUlIUm9hWE11WDJKcGJtUnBibWR6TENCaElEMGdieTVzWlc1bmRHZ2dMU0F4TENCc0lEMGdiMXRoWFN3Z1l5QTlJR1ZiWVYwN0NpQWdJQ0FnSUNBZ0lDQWdJSFJiWTEwZ1BTQnVMQ0J2VzI1ZElEMGdiQ3dnYnk1d2IzQW9LU3dnY2x0dVhTQTlJSEpiWVYwc0lISXVjRzl3S0Nrc0lHbGJibDBnUFNCcFcyRmRMQ0JwTG5CdmNDZ3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtmVHNLV1dndWNISnZkRzkwZVhCbExtbHpRVzVwYldGMGFXOXVUMkpxWldOMFIzSnZkWEFnUFNBaE1Ec0tkbUZ5SUZwb0lEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ3dnYmlBOUlHNTFiR3dzSUdrZ1BTQjBMbUpzWlc1a1RXOWtaU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NWZiV2w0WlhJZ1BTQmxMQ0IwYUdsekxsOWpiR2x3SUQwZ2RDd2dkR2hwY3k1ZmJHOWpZV3hTYjI5MElEMGdiaXdnZEdocGN5NWliR1Z1WkUxdlpHVWdQU0JwT3dvZ0lDQWdJQ0FnSUd4bGRDQnlJRDBnZEM1MGNtRmphM01zSUc4Z1BTQnlMbXhsYm1kMGFDd2dZU0E5SUc1bGR5QkJjbkpoZVNodktTd2diQ0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdaVzVrYVc1blUzUmhjblE2SUUxcExBb2dJQ0FnSUNBZ0lDQWdJQ0JsYm1ScGJtZEZibVE2SUUxcENpQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHTWdQU0F3T3lCaklDRTlQU0J2T3lBcksyTXBld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhQ0E5SUhKYlkxMHVZM0psWVhSbFNXNTBaWEp3YjJ4aGJuUW9iblZzYkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR0ZiWTEwZ1BTQm9MQ0JvTG5ObGRIUnBibWR6SUQwZ2JEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNTBaWEp3YjJ4aGJuUlRaWFIwYVc1bmN5QTlJR3dzSUhSb2FYTXVYMmx1ZEdWeWNHOXNZVzUwY3lBOUlHRXNJSFJvYVhNdVgzQnliM0JsY25SNVFtbHVaR2x1WjNNZ1BTQnVaWGNnUVhKeVlYa29ieWtzSUhSb2FYTXVYMk5oWTJobFNXNWtaWGdnUFNCdWRXeHNMQ0IwYUdsekxsOWllVU5zYVhCRFlXTm9aVWx1WkdWNElEMGdiblZzYkN3Z2RHaHBjeTVmZEdsdFpWTmpZV3hsU1c1MFpYSndiMnhoYm5RZ1BTQnVkV3hzTENCMGFHbHpMbDkzWldsbmFIUkpiblJsY25CdmJHRnVkQ0E5SUc1MWJHd3NJSFJvYVhNdWJHOXZjQ0E5SUVsa0xDQjBhR2x6TGw5c2IyOXdRMjkxYm5RZ1BTQXRNU3dnZEdocGN5NWZjM1JoY25SVWFXMWxJRDBnYm5Wc2JDd2dkR2hwY3k1MGFXMWxJRDBnTUN3Z2RHaHBjeTUwYVcxbFUyTmhiR1VnUFNBeExDQjBhR2x6TGw5bFptWmxZM1JwZG1WVWFXMWxVMk5oYkdVZ1BTQXhMQ0IwYUdsekxuZGxhV2RvZENBOUlERXNJSFJvYVhNdVgyVm1abVZqZEdsMlpWZGxhV2RvZENBOUlERXNJSFJvYVhNdWNtVndaWFJwZEdsdmJuTWdQU0F4SUM4Z01Dd2dkR2hwY3k1d1lYVnpaV1FnUFNBaE1Td2dkR2hwY3k1bGJtRmliR1ZrSUQwZ0lUQXNJSFJvYVhNdVkyeGhiWEJYYUdWdVJtbHVhWE5vWldRZ1BTQWhNU3dnZEdocGN5NTZaWEp2VTJ4dmNHVkJkRk4wWVhKMElEMGdJVEFzSUhSb2FYTXVlbVZ5YjFOc2IzQmxRWFJGYm1RZ1BTQWhNRHNLSUNBZ0lIMEtJQ0FnSUhCc1lYa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMXBlR1Z5TGw5aFkzUnBkbUYwWlVGamRHbHZiaWgwYUdsektTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITjBiM0FvS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjFwZUdWeUxsOWtaV0ZqZEdsMllYUmxRV04wYVc5dUtIUm9hWE1wTENCMGFHbHpMbkpsYzJWMEtDazdDaUFnSUNCOUNpQWdJQ0J5WlhObGRDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d1lYVnpaV1FnUFNBaE1Td2dkR2hwY3k1bGJtRmliR1ZrSUQwZ0lUQXNJSFJvYVhNdWRHbHRaU0E5SURBc0lIUm9hWE11WDJ4dmIzQkRiM1Z1ZENBOUlDMHhMQ0IwYUdsekxsOXpkR0Z5ZEZScGJXVWdQU0J1ZFd4c0xDQjBhR2x6TG5OMGIzQkdZV1JwYm1jb0tTNXpkRzl3VjJGeWNHbHVaeWdwT3dvZ0lDQWdmUW9nSUNBZ2FYTlNkVzV1YVc1bktDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1WdVlXSnNaV1FnSmlZZ0lYUm9hWE11Y0dGMWMyVmtJQ1ltSUhSb2FYTXVkR2x0WlZOallXeGxJQ0U5UFNBd0lDWW1JSFJvYVhNdVgzTjBZWEowVkdsdFpTQTlQVDBnYm5Wc2JDQW1KaUIwYUdsekxsOXRhWGhsY2k1ZmFYTkJZM1JwZG1WQlkzUnBiMjRvZEdocGN5azdDaUFnSUNCOUNpQWdJQ0JwYzFOamFHVmtkV3hsWkNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYldsNFpYSXVYMmx6UVdOMGFYWmxRV04wYVc5dUtIUm9hWE1wT3dvZ0lDQWdmUW9nSUNBZ2MzUmhjblJCZENobEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNOMFlYSjBWR2x0WlNBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJNYjI5d0tHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNiMjl3SUQwZ1pTd2dkR2hwY3k1eVpYQmxkR2wwYVc5dWN5QTlJSFFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0J6WlhSRlptWmxZM1JwZG1WWFpXbG5hSFFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmRsYVdkb2RDQTlJR1VzSUhSb2FYTXVYMlZtWm1WamRHbDJaVmRsYVdkb2RDQTlJSFJvYVhNdVpXNWhZbXhsWkNBL0lHVWdPaUF3TENCMGFHbHpMbk4wYjNCR1lXUnBibWNvS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRVZtWm1WamRHbDJaVmRsYVdkb2RDZ3BJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpXWm1aV04wYVhabFYyVnBaMmgwT3dvZ0lDQWdmUW9nSUNBZ1ptRmtaVWx1S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJOb1pXUjFiR1ZHWVdScGJtY29aU3dnTUN3Z01TazdDaUFnSUNCOUNpQWdJQ0JtWVdSbFQzVjBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMk5vWldSMWJHVkdZV1JwYm1jb1pTd2dNU3dnTUNrN0NpQWdJQ0I5Q2lBZ0lDQmpjbTl6YzBaaFpHVkdjbTl0S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCcFppQW9aUzVtWVdSbFQzVjBLSFFwTENCMGFHbHpMbVpoWkdWSmJpaDBLU3dnYmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVgyTnNhWEF1WkhWeVlYUnBiMjRzSUhJZ1BTQmxMbDlqYkdsd0xtUjFjbUYwYVc5dUxDQnZJRDBnY2lBdklHa3NJR0VnUFNCcElDOGdjanNLSUNBZ0lDQWdJQ0FnSUNBZ1pTNTNZWEp3S0RFc0lHOHNJSFFwTENCMGFHbHpMbmRoY25Bb1lTd2dNU3dnZENrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTNKdmMzTkdZV1JsVkc4b1pTd2dkQ3dnYmlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtTnliM056Um1Ga1pVWnliMjBvZEdocGN5d2dkQ3dnYmlrN0NpQWdJQ0I5Q2lBZ0lDQnpkRzl3Um1Ga2FXNW5LQ2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQmxJRDBnZEdocGN5NWZkMlZwWjJoMFNXNTBaWEp3YjJ4aGJuUTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVWdJVDA5SUc1MWJHd2dKaVlnS0hSb2FYTXVYM2RsYVdkb2RFbHVkR1Z5Y0c5c1lXNTBJRDBnYm5Wc2JDd2dkR2hwY3k1ZmJXbDRaWEl1WDNSaGEyVkNZV05yUTI5dWRISnZiRWx1ZEdWeWNHOXNZVzUwS0dVcEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lITmxkRVZtWm1WamRHbDJaVlJwYldWVFkyRnNaU2hsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR2x0WlZOallXeGxJRDBnWlN3Z2RHaHBjeTVmWldabVpXTjBhWFpsVkdsdFpWTmpZV3hsSUQwZ2RHaHBjeTV3WVhWelpXUWdQeUF3SURvZ1pTd2dkR2hwY3k1emRHOXdWMkZ5Y0dsdVp5Z3BPd29nSUNBZ2ZRb2dJQ0FnWjJWMFJXWm1aV04wYVhabFZHbHRaVk5qWVd4bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bFptWmxZM1JwZG1WVWFXMWxVMk5oYkdVN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJFZFhKaGRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR2x0WlZOallXeGxJRDBnZEdocGN5NWZZMnhwY0M1a2RYSmhkR2x2YmlBdklHVXNJSFJvYVhNdWMzUnZjRmRoY25CcGJtY29LVHNLSUNBZ0lIMEtJQ0FnSUhONWJtTlhhWFJvS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYVcxbElEMGdaUzUwYVcxbExDQjBhR2x6TG5ScGJXVlRZMkZzWlNBOUlHVXVkR2x0WlZOallXeGxMQ0IwYUdsekxuTjBiM0JYWVhKd2FXNW5LQ2s3Q2lBZ0lDQjlDaUFnSUNCb1lXeDBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTNZWEp3S0hSb2FYTXVYMlZtWm1WamRHbDJaVlJwYldWVFkyRnNaU3dnTUN3Z1pTazdDaUFnSUNCOUNpQWdJQ0IzWVhKd0tHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11WDIxcGVHVnlMQ0J5SUQwZ2FTNTBhVzFsTENCdklEMGdkR2hwY3k1MGFXMWxVMk5oYkdVc0lHRWdQU0IwYUdsekxsOTBhVzFsVTJOaGJHVkpiblJsY25CdmJHRnVkRHNLSUNBZ0lDQWdJQ0JoSUQwOVBTQnVkV3hzSUNZbUlDaGhJRDBnYVM1ZmJHVnVaRU52Ym5SeWIyeEpiblJsY25CdmJHRnVkQ2dwTENCMGFHbHpMbDkwYVcxbFUyTmhiR1ZKYm5SbGNuQnZiR0Z1ZENBOUlHRXBPd29nSUNBZ0lDQWdJR3hsZENCc0lEMGdZUzV3WVhKaGJXVjBaWEpRYjNOcGRHbHZibk1zSUdNZ1BTQmhMbk5oYlhCc1pWWmhiSFZsY3pzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYkZzd1hTQTlJSElzSUd4Yk1WMGdQU0J5SUNzZ2Jpd2dZMXN3WFNBOUlHVWdMeUJ2TENCald6RmRJRDBnZENBdklHOHNJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpkRzl3VjJGeWNHbHVaeWdwSUhzS0lDQWdJQ0FnSUNCc1pYUWdaU0E5SUhSb2FYTXVYM1JwYldWVFkyRnNaVWx1ZEdWeWNHOXNZVzUwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJsSUNFOVBTQnVkV3hzSUNZbUlDaDBhR2x6TGw5MGFXMWxVMk5oYkdWSmJuUmxjbkJ2YkdGdWRDQTlJRzUxYkd3c0lIUm9hWE11WDIxcGVHVnlMbDkwWVd0bFFtRmphME52Ym5SeWIyeEpiblJsY25CdmJHRnVkQ2hsS1Nrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCblpYUk5hWGhsY2lncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYldsNFpYSTdDaUFnSUNCOUNpQWdJQ0JuWlhSRGJHbHdLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpiR2x3T3dvZ0lDQWdmUW9nSUNBZ1oyVjBVbTl2ZENncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkc5allXeFNiMjkwSUh4OElIUm9hWE11WDIxcGVHVnlMbDl5YjI5ME93b2dJQ0FnZlFvZ0lDQWdYM1Z3WkdGMFpTaGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1WdVlXSnNaV1FwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsVjJWcFoyaDBLR1VwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHaHBjeTVmYzNSaGNuUlVhVzFsT3dvZ0lDQWdJQ0FnSUdsbUlDaHlJQ0U5UFNCdWRXeHNLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzSUQwZ0tHVWdMU0J5S1NBcUlHNDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNJRHdnTUNCOGZDQnVJRDA5UFNBd0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWEowVkdsdFpTQTlJRzUxYkd3c0lIUWdQU0J1SUNvZ2JEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkQ0FxUFNCMGFHbHpMbDkxY0dSaGRHVlVhVzFsVTJOaGJHVW9aU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHOGdQU0IwYUdsekxsOTFjR1JoZEdWVWFXMWxLSFFwTENCaElEMGdkR2hwY3k1ZmRYQmtZWFJsVjJWcFoyaDBLR1VwT3dvZ0lDQWdJQ0FnSUdsbUlDaGhJRDRnTUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JDQTlJSFJvYVhNdVgybHVkR1Z5Y0c5c1lXNTBjeXdnWXlBOUlIUm9hWE11WDNCeWIzQmxjblI1UW1sdVpHbHVaM003Q2lBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNoMGFHbHpMbUpzWlc1a1RXOWtaU2w3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElIRmpPZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYUNBOUlEQXNJSFVnUFNCc0xteGxibWQwYURzZ2FDQWhQVDBnZFRzZ0t5dG9LV3hiYUYwdVpYWmhiSFZoZEdVb2J5a3NJR05iYUYwdVlXTmpkVzExYkdGMFpVRmtaR2wwYVhabEtHRXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCMVlUb0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQm9JRDBnTUN3Z2RTQTlJR3d1YkdWdVozUm9PeUJvSUNFOVBTQjFPeUFySzJncGJGdG9YUzVsZG1Gc2RXRjBaU2h2S1N3Z1kxdG9YUzVoWTJOMWJYVnNZWFJsS0drc0lHRXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdYM1Z3WkdGMFpWZGxhV2RvZENobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQXdPd29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZ1WVdKc1pXUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJSFJvYVhNdWQyVnBaMmgwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WDNkbGFXZG9kRWx1ZEdWeWNHOXNZVzUwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYmlBaFBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdUxtVjJZV3gxWVhSbEtHVXBXekJkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZENBcVBTQnBMQ0JsSUQ0Z2JpNXdZWEpoYldWMFpYSlFiM05wZEdsdmJuTmJNVjBnSmlZZ0tIUm9hWE11YzNSdmNFWmhaR2x1WnlncExDQnBJRDA5UFNBd0lDWW1JQ2gwYUdsekxtVnVZV0pzWldRZ1BTQWhNU2twT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bFptWmxZM1JwZG1WWFpXbG5hSFFnUFNCMExDQjBPd29nSUNBZ2ZRb2dJQ0FnWDNWd1pHRjBaVlJwYldWVFkyRnNaU2hsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNBd093b2dJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXdZWFZ6WldRcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlIUm9hWE11ZEdsdFpWTmpZV3hsT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYmlBOUlIUm9hWE11WDNScGJXVlRZMkZzWlVsdWRHVnljRzlzWVc1ME93b2dJQ0FnSUNBZ0lDQWdJQ0J1SUNFOVBTQnVkV3hzSUNZbUlDaDBJQ285SUc0dVpYWmhiSFZoZEdVb1pTbGJNRjBzSUdVZ1BpQnVMbkJoY21GdFpYUmxjbEJ2YzJsMGFXOXVjMXN4WFNBbUppQW9kR2hwY3k1emRHOXdWMkZ5Y0dsdVp5Z3BMQ0IwSUQwOVBTQXdJRDhnZEdocGN5NXdZWFZ6WldRZ1BTQWhNQ0E2SUhSb2FYTXVkR2x0WlZOallXeGxJRDBnZENrcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWldabVpXTjBhWFpsVkdsdFpWTmpZV3hsSUQwZ2RDd2dkRHNLSUNBZ0lIMEtJQ0FnSUY5MWNHUmhkR1ZVYVcxbEtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVgyTnNhWEF1WkhWeVlYUnBiMjRzSUc0Z1BTQjBhR2x6TG14dmIzQXNJR2tnUFNCMGFHbHpMblJwYldVZ0t5QmxMQ0J5SUQwZ2RHaHBjeTVmYkc5dmNFTnZkVzUwTENCdklEMGdiaUE5UFQwZ1JHUTdDaUFnSUNBZ0lDQWdhV1lnS0dVZ1BUMDlJREFwSUhKbGRIVnliaUJ5SUQwOVBTQXRNU0EvSUdrZ09pQnZJQ1ltSUNoeUlDWWdNU2tnUFQwOUlERWdQeUIwSUMwZ2FTQTZJR2s3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNGdQVDA5SUZCa0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhJZ1BUMDlJQzB4SUNZbUlDaDBhR2x6TGw5c2IyOXdRMjkxYm5RZ1BTQXdMQ0IwYUdsekxsOXpaWFJGYm1ScGJtZHpLQ0V3TENBaE1Dd2dJVEVwS1RzS0lDQWdJQ0FnSUNBZ0lDQWdaVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dQajBnZENrZ2FTQTlJSFE3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hwSUR3Z01Da2dhU0E5SURBN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJwYldVZ1BTQnBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJJR1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnNZVzF3VjJobGJrWnBibWx6YUdWa0lEOGdkR2hwY3k1d1lYVnpaV1FnUFNBaE1DQTZJSFJvYVhNdVpXNWhZbXhsWkNBOUlDRXhMQ0IwYUdsekxuUnBiV1VnUFNCcExDQjBhR2x6TGw5dGFYaGxjaTVrYVhOd1lYUmphRVYyWlc1MEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQWlabWx1YVhOb1pXUWlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGamRHbHZiam9nZEdocGN5d0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjQ2SUdVZ1BDQXdJRDhnTFRFZ09pQXhDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlEMDlQU0F0TVNBbUppQW9aU0ErUFNBd0lEOGdLSElnUFNBd0xDQjBhR2x6TGw5elpYUkZibVJwYm1kektDRXdMQ0IwYUdsekxuSmxjR1YwYVhScGIyNXpJRDA5UFNBd0xDQnZLU2tnT2lCMGFHbHpMbDl6WlhSRmJtUnBibWR6S0hSb2FYTXVjbVZ3WlhScGRHbHZibk1nUFQwOUlEQXNJQ0V3TENCdktTa3NJR2tnUGowZ2RDQjhmQ0JwSUR3Z01Da2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdFZ1BTQk5ZWFJvTG1ac2IyOXlLR2tnTHlCMEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dMVDBnZENBcUlHRXNJSElnS3owZ1RXRjBhQzVoWW5Nb1lTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkNBOUlIUm9hWE11Y21Wd1pYUnBkR2x2Ym5NZ0xTQnlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d3Z1BEMGdNQ2tnZEdocGN5NWpiR0Z0Y0Zkb1pXNUdhVzVwYzJobFpDQS9JSFJvYVhNdWNHRjFjMlZrSUQwZ0lUQWdPaUIwYUdsekxtVnVZV0pzWldRZ1BTQWhNU3dnYVNBOUlHVWdQaUF3SUQ4Z2RDQTZJREFzSUhSb2FYTXVkR2x0WlNBOUlHa3NJSFJvYVhNdVgyMXBlR1Z5TG1ScGMzQmhkR05vUlhabGJuUW9ld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ0ptYVc1cGMyaGxaQ0lzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1T2lCMGFHbHpMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGNtVmpkR2x2YmpvZ1pTQStJREFnUHlBeElEb2dMVEVLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHd2dQVDA5SURFcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCbElEd2dNRHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVjBSVzVrYVc1bmN5aGpMQ0FoWXl3Z2J5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSFJvYVhNdVgzTmxkRVZ1WkdsdVozTW9JVEVzSUNFeExDQnZLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjI5d1EyOTFiblFnUFNCeUxDQjBhR2x6TG5ScGJXVWdQU0JwTENCMGFHbHpMbDl0YVhobGNpNWthWE53WVhSamFFVjJaVzUwS0hzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dJbXh2YjNBaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjQ2SUhSb2FYTXNDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZiM0JFWld4MFlUb2dZUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdkR2hwY3k1MGFXMWxJRDBnYVRzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c4Z0ppWWdLSElnSmlBeEtTQTlQVDBnTVNrZ2NtVjBkWEp1SUhRZ0xTQnBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVHNLSUNBZ0lIMEtJQ0FnSUY5elpYUkZibVJwYm1kektHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11WDJsdWRHVnljRzlzWVc1MFUyVjBkR2x1WjNNN0NpQWdJQ0FnSUNBZ2JpQS9JQ2hwTG1WdVpHbHVaMU4wWVhKMElEMGdZbWtzSUdrdVpXNWthVzVuUlc1a0lEMGdZbWtwSURvZ0tHVWdQeUJwTG1WdVpHbHVaMU4wWVhKMElEMGdkR2hwY3k1NlpYSnZVMnh2Y0dWQmRGTjBZWEowSUQ4Z1lta2dPaUJOYVNBNklHa3VaVzVrYVc1blUzUmhjblFnUFNCUGN5d2dkQ0EvSUdrdVpXNWthVzVuUlc1a0lEMGdkR2hwY3k1NlpYSnZVMnh2Y0dWQmRFVnVaQ0EvSUdKcElEb2dUV2tnT2lCcExtVnVaR2x1WjBWdVpDQTlJRTl6S1RzS0lDQWdJSDBLSUNBZ0lGOXpZMmhsWkhWc1pVWmhaR2x1WnlobExDQjBMQ0J1S1NCN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbDl0YVhobGNpd2djaUE5SUdrdWRHbHRaU3dnYnlBOUlIUm9hWE11WDNkbGFXZG9kRWx1ZEdWeWNHOXNZVzUwT3dvZ0lDQWdJQ0FnSUc4Z1BUMDlJRzUxYkd3Z0ppWWdLRzhnUFNCcExsOXNaVzVrUTI5dWRISnZiRWx1ZEdWeWNHOXNZVzUwS0Nrc0lIUm9hWE11WDNkbGFXZG9kRWx1ZEdWeWNHOXNZVzUwSUQwZ2J5azdDaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQnZMbkJoY21GdFpYUmxjbEJ2YzJsMGFXOXVjeXdnYkNBOUlHOHVjMkZ0Y0d4bFZtRnNkV1Z6T3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUJoV3pCZElEMGdjaXdnYkZzd1hTQTlJSFFzSUdGYk1WMGdQU0J5SUNzZ1pTd2diRnN4WFNBOUlHNHNJSFJvYVhNN0NpQWdJQ0I5Q24wc0lDUm9JRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QkZiaUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsS1hzS0lDQWdJQ0FnSUNCemRYQmxjaWdwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVYM0p2YjNRZ1BTQmxMQ0IwYUdsekxsOXBibWwwVFdWdGIzSjVUV0Z1WVdkbGNpZ3BMQ0IwYUdsekxsOWhZMk4xU1c1a1pYZ2dQU0F3TENCMGFHbHpMblJwYldVZ1BTQXdMQ0IwYUdsekxuUnBiV1ZUWTJGc1pTQTlJREU3Q2lBZ0lDQjlDaUFnSUNCZlltbHVaRUZqZEdsdmJpaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJRzRnUFNCbExsOXNiMk5oYkZKdmIzUWdmSHdnZEdocGN5NWZjbTl2ZEN3Z2FTQTlJR1V1WDJOc2FYQXVkSEpoWTJ0ekxDQnlJRDBnYVM1c1pXNW5kR2dzSUc4Z1BTQmxMbDl3Y205d1pYSjBlVUpwYm1ScGJtZHpMQ0JoSUQwZ1pTNWZhVzUwWlhKd2IyeGhiblJ6TENCc0lEMGdiaTUxZFdsa0xDQmpJRDBnZEdocGN5NWZZbWx1WkdsdVozTkNlVkp2YjNSQmJtUk9ZVzFsTENCb0lEMGdZMXRzWFRzS0lDQWdJQ0FnSUNCb0lEMDlQU0IyYjJsa0lEQWdKaVlnS0dnZ1BTQjdmU3dnWTF0c1hTQTlJR2dwT3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZFNBOUlEQTdJSFVnSVQwOUlISTdJQ3NyZFNsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdhVnQxWFN3Z1ppQTlJR1F1Ym1GdFpTd2diU0E5SUdoYlpsMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRJQ0U5UFNCMmIybGtJREFwSUc5YmRWMGdQU0J0T3dvZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRJRDBnYjF0MVhTd2diU0FoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiUzVmWTJGamFHVkpibVJsZUNBOVBUMGdiblZzYkNBbUppQW9LeXR0TG5KbFptVnlaVzVqWlVOdmRXNTBMQ0IwYUdsekxsOWhaR1JKYm1GamRHbDJaVUpwYm1ScGJtY29iU3dnYkN3Z1ppa3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIZ2dQU0IwSUNZbUlIUXVYM0J5YjNCbGNuUjVRbWx1WkdsdVozTmJkVjB1WW1sdVpHbHVaeTV3WVhKelpXUlFZWFJvT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlNBOUlHNWxkeUJZYUNoclpTNWpjbVZoZEdVb2Jpd2daaXdnZUNrc0lHUXVWbUZzZFdWVWVYQmxUbUZ0WlN3Z1pDNW5aWFJXWVd4MVpWTnBlbVVvS1Nrc0lDc3JiUzV5WldabGNtVnVZMlZEYjNWdWRDd2dkR2hwY3k1ZllXUmtTVzVoWTNScGRtVkNhVzVrYVc1bktHMHNJR3dzSUdZcExDQnZXM1ZkSUQwZ2JUc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQmhXM1ZkTG5KbGMzVnNkRUoxWm1abGNpQTlJRzB1WW5WbVptVnlPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUY5aFkzUnBkbUYwWlVGamRHbHZiaWhsS1NCN0NpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXBjMEZqZEdsMlpVRmpkR2x2YmlobEtTa2dld29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzVmWTJGamFHVkpibVJsZUNBOVBUMGdiblZzYkNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzRnUFNBb1pTNWZiRzlqWVd4U2IyOTBJSHg4SUhSb2FYTXVYM0p2YjNRcExuVjFhV1FzSUdrZ1BTQmxMbDlqYkdsd0xuVjFhV1FzSUhJZ1BTQjBhR2x6TGw5aFkzUnBiMjV6UW5sRGJHbHdXMmxkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZbWx1WkVGamRHbHZiaWhsTENCeUlDWW1JSEl1YTI1dmQyNUJZM1JwYjI1eld6QmRLU3dnZEdocGN5NWZZV1JrU1c1aFkzUnBkbVZCWTNScGIyNG9aU3dnYVN3Z2JpazdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhRZ1BTQmxMbDl3Y205d1pYSjBlVUpwYm1ScGJtZHpPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQXdMQ0JwSUQwZ2RDNXNaVzVuZEdnN0lHNGdJVDA5SUdrN0lDc3JiaWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJSFJiYmwwN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeUxuVnpaVU52ZFc1MEt5c2dQVDA5SURBZ0ppWWdLSFJvYVhNdVgyeGxibVJDYVc1a2FXNW5LSElwTENCeUxuTmhkbVZQY21sbmFXNWhiRk4wWVhSbEtDa3BPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeGxibVJCWTNScGIyNG9aU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ1gyUmxZV04wYVhaaGRHVkJZM1JwYjI0b1pTa2dld29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlwYzBGamRHbDJaVUZqZEdsdmJpaGxLU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZENBOUlHVXVYM0J5YjNCbGNuUjVRbWx1WkdsdVozTTdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQWhQVDBnYVRzZ0t5dHVLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeUlEMGdkRnR1WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUMwdGNpNTFjMlZEYjNWdWRDQTlQVDBnTUNBbUppQW9jaTV5WlhOMGIzSmxUM0pwWjJsdVlXeFRkR0YwWlNncExDQjBhR2x6TGw5MFlXdGxRbUZqYTBKcGJtUnBibWNvY2lrcE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNSaGEyVkNZV05yUVdOMGFXOXVLR1VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lGOXBibWwwVFdWdGIzSjVUV0Z1WVdkbGNpZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxsOWhZM1JwYjI1eklEMGdXMTBzSUhSb2FYTXVYMjVCWTNScGRtVkJZM1JwYjI1eklEMGdNQ3dnZEdocGN5NWZZV04wYVc5dWMwSjVRMnhwY0NBOUlIdDlMQ0IwYUdsekxsOWlhVzVrYVc1bmN5QTlJRnRkTENCMGFHbHpMbDl1UVdOMGFYWmxRbWx1WkdsdVozTWdQU0F3TENCMGFHbHpMbDlpYVc1a2FXNW5jMEo1VW05dmRFRnVaRTVoYldVZ1BTQjdmU3dnZEdocGN5NWZZMjl1ZEhKdmJFbHVkR1Z5Y0c5c1lXNTBjeUE5SUZ0ZExDQjBhR2x6TGw5dVFXTjBhWFpsUTI5dWRISnZiRWx1ZEdWeWNHOXNZVzUwY3lBOUlEQTdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6T3dvZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEhNZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdGamRHbHZibk02SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGRDQjBiM1JoYkNBb0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1V1WDJGamRHbHZibk11YkdWdVozUm9Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RsZENCcGJsVnpaU0FvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVXVYMjVCWTNScGRtVkJZM1JwYjI1ek93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUNBZ0lDQmlhVzVrYVc1bmN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlYwSUhSdmRHRnNJQ2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNWZZbWx1WkdsdVozTXViR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxkQ0JwYmxWelpTQW9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdVdVgyNUJZM1JwZG1WQ2FXNWthVzVuY3pzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkSEp2YkVsdWRHVnljRzlzWVc1MGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlYwSUhSdmRHRnNJQ2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNWZZMjl1ZEhKdmJFbHVkR1Z5Y0c5c1lXNTBjeTVzWlc1bmRHZzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlYwSUdsdVZYTmxJQ2dwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNWZia0ZqZEdsMlpVTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdYMmx6UVdOMGFYWmxRV04wYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1V1WDJOaFkyaGxTVzVrWlhnN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0lUMDlJRzUxYkd3Z0ppWWdkQ0E4SUhSb2FYTXVYMjVCWTNScGRtVkJZM1JwYjI1ek93b2dJQ0FnZlFvZ0lDQWdYMkZrWkVsdVlXTjBhWFpsUVdOMGFXOXVLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdVgyRmpkR2x2Ym5Nc0lISWdQU0IwYUdsekxsOWhZM1JwYjI1elFubERiR2x3TENCdklEMGdjbHQwWFRzS0lDQWdJQ0FnSUNCcFppQW9ieUE5UFQwZ2RtOXBaQ0F3S1NCdklEMGdld29nSUNBZ0lDQWdJQ0FnSUNCcmJtOTNia0ZqZEdsdmJuTTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1VLSUNBZ0lDQWdJQ0FnSUNBZ1hTd0tJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVRbmxTYjI5ME9pQjdmUW9nSUNBZ0lDQWdJSDBzSUdVdVgySjVRMnhwY0VOaFkyaGxTVzVrWlhnZ1BTQXdMQ0J5VzNSZElEMGdienNLSUNBZ0lDQWdJQ0JsYkhObElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHRWdQU0J2TG10dWIzZHVRV04wYVc5dWN6c0tJQ0FnSUNBZ0lDQWdJQ0FnWlM1ZllubERiR2x3UTJGamFHVkpibVJsZUNBOUlHRXViR1Z1WjNSb0xDQmhMbkIxYzJnb1pTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR1V1WDJOaFkyaGxTVzVrWlhnZ1BTQnBMbXhsYm1kMGFDd2dhUzV3ZFhOb0tHVXBMQ0J2TG1GamRHbHZia0o1VW05dmRGdHVYU0E5SUdVN0NpQWdJQ0I5Q2lBZ0lDQmZjbVZ0YjNabFNXNWhZM1JwZG1WQlkzUnBiMjRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVmWVdOMGFXOXVjeXdnYmlBOUlIUmJkQzVzWlc1bmRHZ2dMU0F4WFN3Z2FTQTlJR1V1WDJOaFkyaGxTVzVrWlhnN0NpQWdJQ0FnSUNBZ2JpNWZZMkZqYUdWSmJtUmxlQ0E5SUdrc0lIUmJhVjBnUFNCdUxDQjBMbkJ2Y0NncExDQmxMbDlqWVdOb1pVbHVaR1Y0SUQwZ2JuVnNiRHNLSUNBZ0lDQWdJQ0JzWlhRZ2NpQTlJR1V1WDJOc2FYQXVkWFZwWkN3Z2J5QTlJSFJvYVhNdVgyRmpkR2x2Ym5OQ2VVTnNhWEFzSUdFZ1BTQnZXM0pkTENCc0lEMGdZUzVyYm05M2JrRmpkR2x2Ym5Nc0lHTWdQU0JzVzJ3dWJHVnVaM1JvSUMwZ01WMHNJR2dnUFNCbExsOWllVU5zYVhCRFlXTm9aVWx1WkdWNE93b2dJQ0FnSUNBZ0lHTXVYMko1UTJ4cGNFTmhZMmhsU1c1a1pYZ2dQU0JvTENCc1cyaGRJRDBnWXl3Z2JDNXdiM0FvS1N3Z1pTNWZZbmxEYkdsd1EyRmphR1ZKYm1SbGVDQTlJRzUxYkd3N0NpQWdJQ0FnSUNBZ2JHVjBJSFVnUFNCaExtRmpkR2x2YmtKNVVtOXZkQ3dnWkNBOUlDaGxMbDlzYjJOaGJGSnZiM1FnZkh3Z2RHaHBjeTVmY205dmRDa3VkWFZwWkRzS0lDQWdJQ0FnSUNCa1pXeGxkR1VnZFZ0a1hTd2diQzVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdaR1ZzWlhSbElHOWJjbDBzSUhSb2FYTXVYM0psYlc5MlpVbHVZV04wYVhabFFtbHVaR2x1WjNOR2IzSkJZM1JwYjI0b1pTazdDaUFnSUNCOUNpQWdJQ0JmY21WdGIzWmxTVzVoWTNScGRtVkNhVzVrYVc1bmMwWnZja0ZqZEdsdmJpaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JsTGw5d2NtOXdaWEowZVVKcGJtUnBibWR6T3dvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYmlBOUlEQXNJR2tnUFNCMExteGxibWQwYURzZ2JpQWhQVDBnYVRzZ0t5dHVLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSElnUFNCMFcyNWRPd29nSUNBZ0lDQWdJQ0FnSUNBdExYSXVjbVZtWlhKbGJtTmxRMjkxYm5RZ1BUMDlJREFnSmlZZ2RHaHBjeTVmY21WdGIzWmxTVzVoWTNScGRtVkNhVzVrYVc1bktISXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUY5c1pXNWtRV04wYVc5dUtHVXBJSHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFJvYVhNdVgyRmpkR2x2Ym5Nc0lHNGdQU0JsTGw5allXTm9aVWx1WkdWNExDQnBJRDBnZEdocGN5NWZia0ZqZEdsMlpVRmpkR2x2Ym5Nckt5d2djaUE5SUhSYmFWMDdDaUFnSUNBZ0lDQWdaUzVmWTJGamFHVkpibVJsZUNBOUlHa3NJSFJiYVYwZ1BTQmxMQ0J5TGw5allXTm9aVWx1WkdWNElEMGdiaXdnZEZ0dVhTQTlJSEk3Q2lBZ0lDQjlDaUFnSUNCZmRHRnJaVUpoWTJ0QlkzUnBiMjRvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVmWVdOMGFXOXVjeXdnYmlBOUlHVXVYMk5oWTJobFNXNWtaWGdzSUdrZ1BTQXRMWFJvYVhNdVgyNUJZM1JwZG1WQlkzUnBiMjV6TENCeUlEMGdkRnRwWFRzS0lDQWdJQ0FnSUNCbExsOWpZV05vWlVsdVpHVjRJRDBnYVN3Z2RGdHBYU0E5SUdVc0lISXVYMk5oWTJobFNXNWtaWGdnUFNCdUxDQjBXMjVkSUQwZ2Nqc0tJQ0FnSUgwS0lDQWdJRjloWkdSSmJtRmpkR2wyWlVKcGJtUnBibWNvWlN3Z2RDd2diaWtnZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnZEdocGN5NWZZbWx1WkdsdVozTkNlVkp2YjNSQmJtUk9ZVzFsTENCeUlEMGdkR2hwY3k1ZlltbHVaR2x1WjNNc0lHOGdQU0JwVzNSZE93b2dJQ0FnSUNBZ0lHOGdQVDA5SUhadmFXUWdNQ0FtSmlBb2J5QTlJSHQ5TENCcFczUmRJRDBnYnlrc0lHOWJibDBnUFNCbExDQmxMbDlqWVdOb1pVbHVaR1Y0SUQwZ2NpNXNaVzVuZEdnc0lISXVjSFZ6YUNobEtUc0tJQ0FnSUgwS0lDQWdJRjl5WlcxdmRtVkpibUZqZEdsMlpVSnBibVJwYm1jb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1ZlltbHVaR2x1WjNNc0lHNGdQU0JsTG1KcGJtUnBibWNzSUdrZ1BTQnVMbkp2YjNST2IyUmxMblYxYVdRc0lISWdQU0J1TG5CaGRHZ3NJRzhnUFNCMGFHbHpMbDlpYVc1a2FXNW5jMEo1VW05dmRFRnVaRTVoYldVc0lHRWdQU0J2VzJsZExDQnNJRDBnZEZ0MExteGxibWQwYUNBdElERmRMQ0JqSUQwZ1pTNWZZMkZqYUdWSmJtUmxlRHNLSUNBZ0lDQWdJQ0JzTGw5allXTm9aVWx1WkdWNElEMGdZeXdnZEZ0alhTQTlJR3dzSUhRdWNHOXdLQ2tzSUdSbGJHVjBaU0JoVzNKZExDQlBZbXBsWTNRdWEyVjVjeWhoS1M1c1pXNW5kR2dnUFQwOUlEQWdKaVlnWkdWc1pYUmxJRzliYVYwN0NpQWdJQ0I5Q2lBZ0lDQmZiR1Z1WkVKcGJtUnBibWNvWlNrZ2V3b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ2RHaHBjeTVmWW1sdVpHbHVaM01zSUc0Z1BTQmxMbDlqWVdOb1pVbHVaR1Y0TENCcElEMGdkR2hwY3k1ZmJrRmpkR2wyWlVKcGJtUnBibWR6S3lzc0lISWdQU0IwVzJsZE93b2dJQ0FnSUNBZ0lHVXVYMk5oWTJobFNXNWtaWGdnUFNCcExDQjBXMmxkSUQwZ1pTd2djaTVmWTJGamFHVkpibVJsZUNBOUlHNHNJSFJiYmwwZ1BTQnlPd29nSUNBZ2ZRb2dJQ0FnWDNSaGEyVkNZV05yUW1sdVpHbHVaeWhsS1NCN0NpQWdJQ0FnSUNBZ2JHVjBJSFFnUFNCMGFHbHpMbDlpYVc1a2FXNW5jeXdnYmlBOUlHVXVYMk5oWTJobFNXNWtaWGdzSUdrZ1BTQXRMWFJvYVhNdVgyNUJZM1JwZG1WQ2FXNWthVzVuY3l3Z2NpQTlJSFJiYVYwN0NpQWdJQ0FnSUNBZ1pTNWZZMkZqYUdWSmJtUmxlQ0E5SUdrc0lIUmJhVjBnUFNCbExDQnlMbDlqWVdOb1pVbHVaR1Y0SUQwZ2Jpd2dkRnR1WFNBOUlISTdDaUFnSUNCOUNpQWdJQ0JmYkdWdVpFTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRDZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVgyTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRITXNJSFFnUFNCMGFHbHpMbDl1UVdOMGFYWmxRMjl1ZEhKdmJFbHVkR1Z5Y0c5c1lXNTBjeXNyTENCdUlEMGdaVnQwWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmlBOVBUMGdkbTlwWkNBd0lDWW1JQ2h1SUQwZ2JtVjNJRTVoS0c1bGR5QkdiRzloZERNeVFYSnlZWGtvTWlrc0lHNWxkeUJHYkc5aGRETXlRWEp5WVhrb01pa3NJREVzSUhSb2FYTXVYMk52Ym5SeWIyeEpiblJsY25CdmJHRnVkSE5TWlhOMWJIUkNkV1ptWlhJcExDQnVMbDlmWTJGamFHVkpibVJsZUNBOUlIUXNJR1ZiZEYwZ1BTQnVLU3dnYmpzS0lDQWdJSDBLSUNBZ0lGOTBZV3RsUW1GamEwTnZiblJ5YjJ4SmJuUmxjbkJ2YkdGdWRDaGxLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOWpiMjUwY205c1NXNTBaWEp3YjJ4aGJuUnpMQ0J1SUQwZ1pTNWZYMk5oWTJobFNXNWtaWGdzSUdrZ1BTQXRMWFJvYVhNdVgyNUJZM1JwZG1WRGIyNTBjbTlzU1c1MFpYSndiMnhoYm5SekxDQnlJRDBnZEZ0cFhUc0tJQ0FnSUNBZ0lDQmxMbDlmWTJGamFHVkpibVJsZUNBOUlHa3NJSFJiYVYwZ1BTQmxMQ0J5TGw5ZlkyRmphR1ZKYm1SbGVDQTlJRzRzSUhSYmJsMGdQU0J5T3dvZ0lDQWdmUW9nSUNBZ1kyeHBjRUZqZEdsdmJpaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQjBJSHg4SUhSb2FYTXVYM0p2YjNRc0lISWdQU0JwTG5WMWFXUXNJRzhnUFNCMGVYQmxiMllnWlNBOVBTQWljM1J5YVc1bklpQS9JRXh5TG1acGJtUkNlVTVoYldVb2FTd2daU2tnT2lCbExDQmhJRDBnYnlBaFBUMGdiblZzYkNBL0lHOHVkWFZwWkNBNklHVXNJR3dnUFNCMGFHbHpMbDloWTNScGIyNXpRbmxEYkdsd1cyRmRMQ0JqSUQwZ2JuVnNiRHNLSUNBZ0lDQWdJQ0JwWmlBb2JpQTlQVDBnZG05cFpDQXdJQ1ltSUNodklDRTlQU0J1ZFd4c0lEOGdiaUE5SUc4dVlteGxibVJOYjJSbElEb2diaUE5SUhWaEtTd2diQ0FoUFQwZ2RtOXBaQ0F3S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMUlEMGdiQzVoWTNScGIyNUNlVkp2YjNSYmNsMDdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFJQ0U5UFNCMmIybGtJREFnSmlZZ2RTNWliR1Z1WkUxdlpHVWdQVDA5SUc0cElISmxkSFZ5YmlCMU93b2dJQ0FnSUNBZ0lDQWdJQ0JqSUQwZ2JDNXJibTkzYmtGamRHbHZibk5iTUYwc0lHOGdQVDA5SUc1MWJHd2dKaVlnS0c4Z1BTQmpMbDlqYkdsd0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0c4Z1BUMDlJRzUxYkd3cElISmxkSFZ5YmlCdWRXeHNPd29nSUNBZ0lDQWdJR3hsZENCb0lEMGdibVYzSUZwb0tIUm9hWE1zSUc4c0lIUXNJRzRwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWlhVzVrUVdOMGFXOXVLR2dzSUdNcExDQjBhR2x6TGw5aFpHUkpibUZqZEdsMlpVRmpkR2x2Ymlob0xDQmhMQ0J5S1N3Z2FEc0tJQ0FnSUgwS0lDQWdJR1Y0YVhOMGFXNW5RV04wYVc5dUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUhRZ2ZId2dkR2hwY3k1ZmNtOXZkQ3dnYVNBOUlHNHVkWFZwWkN3Z2NpQTlJSFI1Y0dWdlppQmxJRDA5SUNKemRISnBibWNpSUQ4Z1RISXVabWx1WkVKNVRtRnRaU2h1TENCbEtTQTZJR1VzSUc4Z1BTQnlJRDhnY2k1MWRXbGtJRG9nWlN3Z1lTQTlJSFJvYVhNdVgyRmpkR2x2Ym5OQ2VVTnNhWEJiYjEwN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFZ0lUMDlJSFp2YVdRZ01DQW1KaUJoTG1GamRHbHZia0o1VW05dmRGdHBYU0I4ZkNCdWRXeHNPd29nSUNBZ2ZRb2dJQ0FnYzNSdmNFRnNiRUZqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0JzWlhRZ1pTQTlJSFJvYVhNdVgyRmpkR2x2Ym5Nc0lIUWdQU0IwYUdsekxsOXVRV04wYVhabFFXTjBhVzl1Y3pzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUc0Z1BTQjBJQzBnTVRzZ2JpQStQU0F3T3lBdExXNHBaVnR1WFM1emRHOXdLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdVb1pTa2dld29nSUNBZ0lDQWdJR1VnS2owZ2RHaHBjeTUwYVcxbFUyTmhiR1U3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0IwYUdsekxsOWhZM1JwYjI1ekxDQnVJRDBnZEdocGN5NWZia0ZqZEdsMlpVRmpkR2x2Ym5Nc0lHa2dQU0IwYUdsekxuUnBiV1VnS3owZ1pTd2djaUE5SUUxaGRHZ3VjMmxuYmlobEtTd2dieUE5SUhSb2FYTXVYMkZqWTNWSmJtUmxlQ0JlUFNBeE93b2dJQ0FnSUNBZ0lHWnZjaWhzWlhRZ1l5QTlJREE3SUdNZ0lUMDlJRzQ3SUNzcll5bDBXMk5kTGw5MWNHUmhkR1VvYVN3Z1pTd2djaXdnYnlrN0NpQWdJQ0FnSUNBZ2JHVjBJR0VnUFNCMGFHbHpMbDlpYVc1a2FXNW5jeXdnYkNBOUlIUm9hWE11WDI1QlkzUnBkbVZDYVc1a2FXNW5jenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJR01nUFNBd095QmpJQ0U5UFNCc095QXJLMk1wWVZ0alhTNWhjSEJzZVNodktUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRGUnBiV1VvWlNrZ2V3b2dJQ0FnSUNBZ0lIUm9hWE11ZEdsdFpTQTlJREE3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0IwSUQwZ01Ec2dkQ0E4SUhSb2FYTXVYMkZqZEdsdmJuTXViR1Z1WjNSb095QjBLeXNwZEdocGN5NWZZV04wYVc5dWMxdDBYUzUwYVcxbElEMGdNRHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MWNHUmhkR1VvWlNrN0NpQWdJQ0I5Q2lBZ0lDQm5aWFJTYjI5MEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eWIyOTBPd29nSUNBZ2ZRb2dJQ0FnZFc1allXTm9aVU5zYVhBb1pTa2dld29nSUNBZ0lDQWdJR3hsZENCMElEMGdkR2hwY3k1ZllXTjBhVzl1Y3l3Z2JpQTlJR1V1ZFhWcFpDd2dhU0E5SUhSb2FYTXVYMkZqZEdsdmJuTkNlVU5zYVhBc0lISWdQU0JwVzI1ZE93b2dJQ0FnSUNBZ0lHbG1JQ2h5SUNFOVBTQjJiMmxrSURBcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOGdQU0J5TG10dWIzZHVRV04wYVc5dWN6c0tJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JoSUQwZ01Dd2diQ0E5SUc4dWJHVnVaM1JvT3lCaElDRTlQU0JzT3lBcksyRXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdNZ1BTQnZXMkZkT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1ZoWTNScGRtRjBaVUZqZEdsdmJpaGpLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb0lEMGdZeTVmWTJGamFHVkpibVJsZUN3Z2RTQTlJSFJiZEM1c1pXNW5kR2dnTFNBeFhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTXVYMk5oWTJobFNXNWtaWGdnUFNCdWRXeHNMQ0JqTGw5aWVVTnNhWEJEWVdOb1pVbHVaR1Y0SUQwZ2JuVnNiQ3dnZFM1ZlkyRmphR1ZKYm1SbGVDQTlJR2dzSUhSYmFGMGdQU0IxTENCMExuQnZjQ2dwTENCMGFHbHpMbDl5WlcxdmRtVkpibUZqZEdsMlpVSnBibVJwYm1kelJtOXlRV04wYVc5dUtHTXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnBXMjVkT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLSUNBZ0lIVnVZMkZqYUdWU2IyOTBLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUdVdWRYVnBaQ3dnYmlBOUlIUm9hWE11WDJGamRHbHZibk5DZVVOc2FYQTdDaUFnSUNBZ0lDQWdabTl5S0d4bGRDQnZJR2x1SUc0cGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJRzViYjEwdVlXTjBhVzl1UW5sU2IyOTBMQ0JzSUQwZ1lWdDBYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JDQWhQVDBnZG05cFpDQXdJQ1ltSUNoMGFHbHpMbDlrWldGamRHbDJZWFJsUVdOMGFXOXVLR3dwTENCMGFHbHpMbDl5WlcxdmRtVkpibUZqZEdsMlpVRmpkR2x2Ymloc0tTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR3hsZENCcElEMGdkR2hwY3k1ZlltbHVaR2x1WjNOQ2VWSnZiM1JCYm1ST1lXMWxMQ0J5SUQwZ2FWdDBYVHNLSUNBZ0lDQWdJQ0JwWmlBb2NpQWhQVDBnZG05cFpDQXdLU0JtYjNJb2JHVjBJRzhnYVc0Z2NpbDdDaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnY2x0dlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnWVM1eVpYTjBiM0psVDNKcFoybHVZV3hUZEdGMFpTZ3BMQ0IwYUdsekxsOXlaVzF2ZG1WSmJtRmpkR2wyWlVKcGJtUnBibWNvWVNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdkVzVqWVdOb1pVRmpkR2x2YmlobExDQjBLU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0IwYUdsekxtVjRhWE4wYVc1blFXTjBhVzl1S0dVc0lIUXBPd29nSUNBZ0lDQWdJRzRnSVQwOUlHNTFiR3dnSmlZZ0tIUm9hWE11WDJSbFlXTjBhWFpoZEdWQlkzUnBiMjRvYmlrc0lIUm9hWE11WDNKbGJXOTJaVWx1WVdOMGFYWmxRV04wYVc5dUtHNHBLVHNLSUNBZ0lIMEtmVHNLSkdndWNISnZkRzkwZVhCbExsOWpiMjUwY205c1NXNTBaWEp3YjJ4aGJuUnpVbVZ6ZFd4MFFuVm1abVZ5SUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNneEtUc0tkbUZ5SUdkdklEMGdZMnhoYzNNZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTbDdDaUFnSUNBZ0lDQWdkSGx3Wlc5bUlHVWdQVDBnSW5OMGNtbHVaeUlnSmlZZ0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWVzVwWm05eWJUb2dWSGx3WlNCd1lYSmhiV1YwWlhJZ2FYTWdibThnYkc5dVoyVnlJRzVsWldSbFpDNGlLU3dnWlNBOUlHRnlaM1Z0Wlc1MGMxc3hYU2tzSUhSb2FYTXVkbUZzZFdVZ1BTQmxPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCbmJ5aDBhR2x6TG5aaGJIVmxMbU5zYjI1bElEMDlQU0IyYjJsa0lEQWdQeUIwYUdsekxuWmhiSFZsSURvZ2RHaHBjeTUyWVd4MVpTNWpiRzl1WlNncEtUc0tJQ0FnSUgwS2ZTd2dhbWdnUFNCamJHRnpjeUJsZUhSbGJtUnpJQ1J1SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRnUFNBeEtYc0tJQ0FnSUNBZ0lDQnpkWEJsY2lobExDQjBLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtMWxjMmhRWlhKQmRIUnlhV0oxZEdVZ1BTQnVPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnZjSGtvWlNrc0lIUm9hWE11YldWemFGQmxja0YwZEhKcFluVjBaU0E5SUdVdWJXVnphRkJsY2tGMGRISnBZblYwWlN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhOMWNHVnlMbU5zYjI1bEtHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbTFsYzJoUVpYSkJkSFJ5YVdKMWRHVWdQU0IwYUdsekxtMWxjMmhRWlhKQmRIUnlhV0oxZEdVc0lIUTdDaUFnSUNCOUNpQWdJQ0IwYjBwVFQwNG9aU2tnZXdvZ0lDQWdJQ0FnSUd4bGRDQjBJRDBnYzNWd1pYSXVkRzlLVTA5T0tHVXBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBMbWx6U1c1emRHRnVZMlZrU1c1MFpYSnNaV0YyWldSQ2RXWm1aWElnUFNBaE1Dd2dkQzV0WlhOb1VHVnlRWFIwY21saWRYUmxJRDBnZEdocGN5NXRaWE5vVUdWeVFYUjBjbWxpZFhSbExDQjBPd29nSUNBZ2ZRcDlPd3BxYUM1d2NtOTBiM1I1Y0dVdWFYTkpibk4wWVc1alpXUkpiblJsY214bFlYWmxaRUoxWm1abGNpQTlJQ0V3T3dwMllYSWdVV2dnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsTENCMExDQnVMQ0JwTENCeUtYc0tJQ0FnSUNBZ0lDQjBhR2x6TG1KMVptWmxjaUE5SUdVc0lIUm9hWE11ZEhsd1pTQTlJSFFzSUhSb2FYTXVhWFJsYlZOcGVtVWdQU0J1TENCMGFHbHpMbVZzWlcxbGJuUlRhWHBsSUQwZ2FTd2dkR2hwY3k1amIzVnVkQ0E5SUhJc0lIUm9hWE11ZG1WeWMybHZiaUE5SURBN0NpQWdJQ0I5Q2lBZ0lDQnpaWFFnYm1WbFpITlZjR1JoZEdVb1pTa2dld29nSUNBZ0lDQWdJR1VnUFQwOUlDRXdJQ1ltSUhSb2FYTXVkbVZ5YzJsdmJpc3JPd29nSUNBZ2ZRb2dJQ0FnYzJWMFFuVm1abVZ5S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVpZFdabVpYSWdQU0JsTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFZIbHdaU2hsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEhsd1pTQTlJR1VzSUhSb2FYTXVaV3hsYldWdWRGTnBlbVVnUFNCMExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBTWFJsYlZOcGVtVW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtbDBaVzFUYVhwbElEMGdaU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJSE5sZEVOdmRXNTBLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpiM1Z1ZENBOUlHVXNJSFJvYVhNN0NpQWdJQ0I5Q24wN0NsRm9MbkJ5YjNSdmRIbHdaUzVwYzBkTVFuVm1abVZ5UVhSMGNtbGlkWFJsSUQwZ0lUQTdDblpoY2lCRmVTQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0Z1BTQXdMQ0JwSUQwZ01TQXZJREFwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVjbUY1SUQwZ2JtVjNJRU51S0dVc0lIUXBMQ0IwYUdsekxtNWxZWElnUFNCdUxDQjBhR2x6TG1aaGNpQTlJR2tzSUhSb2FYTXVZMkZ0WlhKaElEMGdiblZzYkN3Z2RHaHBjeTVzWVhsbGNuTWdQU0J1WlhjZ1NuTXNJSFJvYVhNdWNHRnlZVzF6SUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JOWlhOb09pQjdmU3dLSUNBZ0lDQWdJQ0FnSUNBZ1RHbHVaVG9nZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeVpYTm9iMnhrT2lBeENpQWdJQ0FnSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lFeFBSRG9nZTMwc0NpQWdJQ0FnSUNBZ0lDQWdJRkJ2YVc1MGN6b2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5WlhOb2IyeGtPaUF4Q2lBZ0lDQWdJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdJQ0FnSUZOd2NtbDBaVG9nZTMwS0lDQWdJQ0FnSUNCOU93b2dJQ0FnZlFvZ0lDQWdjMlYwS0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmhlUzV6WlhRb1pTd2dkQ2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkdjbTl0UTJGdFpYSmhLR1VzSUhRcElIc0tJQ0FnSUNBZ0lDQjBJQ1ltSUhRdWFYTlFaWEp6Y0dWamRHbDJaVU5oYldWeVlTQS9JQ2gwYUdsekxuSmhlUzV2Y21sbmFXNHVjMlYwUm5KdmJVMWhkSEpwZUZCdmMybDBhVzl1S0hRdWJXRjBjbWw0VjI5eWJHUXBMQ0IwYUdsekxuSmhlUzVrYVhKbFkzUnBiMjR1YzJWMEtHVXVlQ3dnWlM1NUxDQXVOU2t1ZFc1d2NtOXFaV04wS0hRcExuTjFZaWgwYUdsekxuSmhlUzV2Y21sbmFXNHBMbTV2Y20xaGJHbDZaU2dwTENCMGFHbHpMbU5oYldWeVlTQTlJSFFwSURvZ2RDQW1KaUIwTG1selQzSjBhRzluY21Gd2FHbGpRMkZ0WlhKaElEOGdLSFJvYVhNdWNtRjVMbTl5YVdkcGJpNXpaWFFvWlM1NExDQmxMbmtzSUNoMExtNWxZWElnS3lCMExtWmhjaWtnTHlBb2RDNXVaV0Z5SUMwZ2RDNW1ZWElwS1M1MWJuQnliMnBsWTNRb2RDa3NJSFJvYVhNdWNtRjVMbVJwY21WamRHbHZiaTV6WlhRb01Dd2dNQ3dnTFRFcExuUnlZVzV6Wm05eWJVUnBjbVZqZEdsdmJpaDBMbTFoZEhKcGVGZHZjbXhrS1N3Z2RHaHBjeTVqWVcxbGNtRWdQU0IwS1NBNklHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMbEpoZVdOaGMzUmxjam9nVlc1emRYQndiM0owWldRZ1kyRnRaWEpoSUhSNWNHVTZJQ0lnS3lCMExuUjVjR1VwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMFQySnFaV04wS0dVc0lIUWdQU0FoTUN3Z2JpQTlJRnRkS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4aEtHVXNJSFJvYVhNc0lHNHNJSFFwTENCdUxuTnZjblFvVUdNcExDQnVPd29nSUNBZ2ZRb2dJQ0FnYVc1MFpYSnpaV04wVDJKcVpXTjBjeWhsTENCMElEMGdJVEFzSUc0Z1BTQmJYU2tnZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQXNJSElnUFNCbExteGxibWQwYURzZ2FTQThJSEk3SUdrckt5bHNZU2hsVzJsZExDQjBhR2x6TENCdUxDQjBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiaTV6YjNKMEtGQmpLU3dnYmpzS0lDQWdJSDBLZlRzS1puVnVZM1JwYjI0Z1VHTW9jeXdnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJSE11WkdsemRHRnVZMlVnTFNCbExtUnBjM1JoYm1ObE93cDlDbVoxYm1OMGFXOXVJR3hoS0hNc0lHVXNJSFFzSUc0cElIc0tJQ0FnSUdsbUlDaHpMbXhoZVdWeWN5NTBaWE4wS0dVdWJHRjVaWEp6S1NBbUppQnpMbkpoZVdOaGMzUW9aU3dnZENrc0lHNGdQVDA5SUNFd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQnpMbU5vYVd4a2NtVnVPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdjaUE5SURBc0lHOGdQU0JwTG14bGJtZDBhRHNnY2lBOElHODdJSElyS3lsc1lTaHBXM0pkTENCbExDQjBMQ0FoTUNrN0NpQWdJQ0I5Q24wS2RtRnlJRUY1SUQwZ1kyeGhjM01nZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlNBOUlERXNJSFFnUFNBd0xDQnVJRDBnTUNsN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbUZrYVhWeklEMGdaU3dnZEdocGN5NXdhR2tnUFNCMExDQjBhR2x6TG5Sb1pYUmhJRDBnYml3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhObGRDaGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Ga2FYVnpJRDBnWlN3Z2RHaHBjeTV3YUdrZ1BTQjBMQ0IwYUdsekxuUm9aWFJoSUQwZ2Jpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpoWkdsMWN5QTlJR1V1Y21Ga2FYVnpMQ0IwYUdsekxuQm9hU0E5SUdVdWNHaHBMQ0IwYUdsekxuUm9aWFJoSUQwZ1pTNTBhR1YwWVN3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUcxaGEyVlRZV1psS0NrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJvYVNBOUlFMWhkR2d1YldGNEtERmxMVFlzSUUxaGRHZ3ViV2x1S0UxaGRHZ3VVRWtnTFNBeFpTMDJMQ0IwYUdsekxuQm9hU2twTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVlpsWTNSdmNqTW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkRVp5YjIxRFlYSjBaWE5wWVc1RGIyOXlaSE1vWlM1NExDQmxMbmtzSUdVdWVpazdDaUFnSUNCOUNpQWdJQ0J6WlhSR2NtOXRRMkZ5ZEdWemFXRnVRMjl2Y21SektHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WVdScGRYTWdQU0JOWVhSb0xuTnhjblFvWlNBcUlHVWdLeUIwSUNvZ2RDQXJJRzRnS2lCdUtTd2dkR2hwY3k1eVlXUnBkWE1nUFQwOUlEQWdQeUFvZEdocGN5NTBhR1YwWVNBOUlEQXNJSFJvYVhNdWNHaHBJRDBnTUNrZ09pQW9kR2hwY3k1MGFHVjBZU0E5SUUxaGRHZ3VZWFJoYmpJb1pTd2diaWtzSUhSb2FYTXVjR2hwSUQwZ1RXRjBhQzVoWTI5ektHMTBLSFFnTHlCMGFHbHpMbkpoWkdsMWN5d2dMVEVzSURFcEtTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiRzl1WlNncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9LUzVqYjNCNUtIUm9hWE1wT3dvZ0lDQWdmUXA5TENCRGVTQTlJR05zWVhOeklIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4TENCMElEMGdNQ3dnYmlBOUlEQXBld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KaFpHbDFjeUE5SUdVc0lIUm9hWE11ZEdobGRHRWdQU0IwTENCMGFHbHpMbmtnUFNCdUxDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2MyVjBLR1VzSUhRc0lHNHBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVlXUnBkWE1nUFNCbExDQjBhR2x6TG5Sb1pYUmhJRDBnZEN3Z2RHaHBjeTU1SUQwZ2Jpd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lHTnZjSGtvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpoWkdsMWN5QTlJR1V1Y21Ga2FYVnpMQ0IwYUdsekxuUm9aWFJoSUQwZ1pTNTBhR1YwWVN3Z2RHaHBjeTU1SUQwZ1pTNTVMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJWWmxZM1J2Y2pNb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRFWnliMjFEWVhKMFpYTnBZVzVEYjI5eVpITW9aUzU0TENCbExua3NJR1V1ZWlrN0NpQWdJQ0I5Q2lBZ0lDQnpaWFJHY205dFEyRnlkR1Z6YVdGdVEyOXZjbVJ6S0dVc0lIUXNJRzRwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlZV1JwZFhNZ1BTQk5ZWFJvTG5OeGNuUW9aU0FxSUdVZ0t5QnVJQ29nYmlrc0lIUm9hWE11ZEdobGRHRWdQU0JOWVhSb0xtRjBZVzR5S0dVc0lHNHBMQ0IwYUdsekxua2dQU0IwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTJ4dmJtVW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NrdVkyOXdlU2gwYUdsektUc0tJQ0FnSUgwS2ZTd2dTV01nUFNCdVpYY2dXQ3dnY1drZ1BTQmpiR0Z6Y3lCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdibVYzSUZnb01TQXZJREFzSURFZ0x5QXdLU3dnZENBOUlHNWxkeUJZS0MweElDOGdNQ3dnTFRFZ0x5QXdLU2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRhVzRnUFNCbExDQjBhR2x6TG0xaGVDQTlJSFE3Q2lBZ0lDQjlDaUFnSUNCelpYUW9aU3dnZENrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTFwYmk1amIzQjVLR1VwTENCMGFHbHpMbTFoZUM1amIzQjVLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVkJ2YVc1MGN5aGxLU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXRZV3RsUlcxd2RIa29LVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSFFnUFNBd0xDQnVJRDBnWlM1c1pXNW5kR2c3SUhRZ1BDQnVPeUIwS3lzcGRHaHBjeTVsZUhCaGJtUkNlVkJ2YVc1MEtHVmJkRjBwT3dvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek93b2dJQ0FnZlFvZ0lDQWdjMlYwUm5KdmJVTmxiblJsY2tGdVpGTnBlbVVvWlN3Z2RDa2dld29nSUNBZ0lDQWdJR3hsZENCdUlEMGdTV011WTI5d2VTaDBLUzV0ZFd4MGFYQnNlVk5qWVd4aGNpZ3VOU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbU52Y0hrb1pTa3VjM1ZpS0c0cExDQjBhR2x6TG0xaGVDNWpiM0I1S0dVcExtRmtaQ2h1S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOc2IyNWxLQ2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lncExtTnZjSGtvZEdocGN5azdDaUFnSUNCOUNpQWdJQ0JqYjNCNUtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHVZMjl3ZVNobExtMXBiaWtzSUhSb2FYTXViV0Y0TG1OdmNIa29aUzV0WVhncExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2JXRnJaVVZ0Y0hSNUtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNTRJRDBnZEdocGN5NXRhVzR1ZVNBOUlERWdMeUF3TENCMGFHbHpMbTFoZUM1NElEMGdkR2hwY3k1dFlYZ3VlU0E5SUMweElDOGdNQ3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR2x6Ulcxd2RIa29LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXRjRMbmdnUENCMGFHbHpMbTFwYmk1NElIeDhJSFJvYVhNdWJXRjRMbmtnUENCMGFHbHpMbTFwYmk1NU93b2dJQ0FnZlFvZ0lDQWdaMlYwUTJWdWRHVnlLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBjMFZ0Y0hSNUtDa2dQeUJsTG5ObGRDZ3dMQ0F3S1NBNklHVXVZV1JrVm1WamRHOXljeWgwYUdsekxtMXBiaXdnZEdocGN5NXRZWGdwTG0xMWJIUnBjR3g1VTJOaGJHRnlLQzQxS1RzS0lDQWdJSDBLSUNBZ0lHZGxkRk5wZW1Vb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1selJXMXdkSGtvS1NBL0lHVXVjMlYwS0RBc0lEQXBJRG9nWlM1emRXSldaV04wYjNKektIUm9hWE11YldGNExDQjBhR2x6TG0xcGJpazdDaUFnSUNCOUNpQWdJQ0JsZUhCaGJtUkNlVkJ2YVc1MEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHViV2x1S0dVcExDQjBhR2x6TG0xaGVDNXRZWGdvWlNrc0lIUm9hWE03Q2lBZ0lDQjlDaUFnSUNCbGVIQmhibVJDZVZabFkzUnZjaWhsS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV2x1TG5OMVlpaGxLU3dnZEdocGN5NXRZWGd1WVdSa0tHVXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWGh3WVc1a1FubFRZMkZzWVhJb1pTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xcGJpNWhaR1JUWTJGc1lYSW9MV1VwTENCMGFHbHpMbTFoZUM1aFpHUlRZMkZzWVhJb1pTa3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQmpiMjUwWVdsdWMxQnZhVzUwS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTaGxMbmdnUENCMGFHbHpMbTFwYmk1NElIeDhJR1V1ZUNBK0lIUm9hWE11YldGNExuZ2dmSHdnWlM1NUlEd2dkR2hwY3k1dGFXNHVlU0I4ZkNCbExua2dQaUIwYUdsekxtMWhlQzU1S1RzS0lDQWdJSDBLSUNBZ0lHTnZiblJoYVc1elFtOTRLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1ZUNBOFBTQmxMbTFwYmk1NElDWW1JR1V1YldGNExuZ2dQRDBnZEdocGN5NXRZWGd1ZUNBbUppQjBhR2x6TG0xcGJpNTVJRHc5SUdVdWJXbHVMbmtnSmlZZ1pTNXRZWGd1ZVNBOFBTQjBhR2x6TG0xaGVDNTVPd29nSUNBZ2ZRb2dJQ0FnWjJWMFVHRnlZVzFsZEdWeUtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1elpYUW9LR1V1ZUNBdElIUm9hWE11YldsdUxuZ3BJQzhnS0hSb2FYTXViV0Y0TG5nZ0xTQjBhR2x6TG0xcGJpNTRLU3dnS0dVdWVTQXRJSFJvYVhNdWJXbHVMbmtwSUM4Z0tIUm9hWE11YldGNExua2dMU0IwYUdsekxtMXBiaTU1S1NrN0NpQWdJQ0I5Q2lBZ0lDQnBiblJsY25ObFkzUnpRbTk0S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTaGxMbTFoZUM1NElEd2dkR2hwY3k1dGFXNHVlQ0I4ZkNCbExtMXBiaTU0SUQ0Z2RHaHBjeTV0WVhndWVDQjhmQ0JsTG0xaGVDNTVJRHdnZEdocGN5NXRhVzR1ZVNCOGZDQmxMbTFwYmk1NUlENGdkR2hwY3k1dFlYZ3VlU2s3Q2lBZ0lDQjlDaUFnSUNCamJHRnRjRkJ2YVc1MEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEM1amIzQjVLR1VwTG1Oc1lXMXdLSFJvYVhNdWJXbHVMQ0IwYUdsekxtMWhlQ2s3Q2lBZ0lDQjlDaUFnSUNCa2FYTjBZVzVqWlZSdlVHOXBiblFvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCSll5NWpiM0I1S0dVcExtTnNZVzF3S0hSb2FYTXViV2x1TENCMGFHbHpMbTFoZUNrdWMzVmlLR1VwTG14bGJtZDBhQ2dwT3dvZ0lDQWdmUW9nSUNBZ2FXNTBaWEp6WldOMEtHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dGFXNHViV0Y0S0dVdWJXbHVLU3dnZEdocGN5NXRZWGd1YldsdUtHVXViV0Y0S1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUhWdWFXOXVLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRhVzR1YldsdUtHVXViV2x1S1N3Z2RHaHBjeTV0WVhndWJXRjRLR1V1YldGNEtTd2dkR2hwY3pzS0lDQWdJSDBLSUNBZ0lIUnlZVzV6YkdGMFpTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXbHVMbUZrWkNobEtTd2dkR2hwY3k1dFlYZ3VZV1JrS0dVcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ1pYRjFZV3h6S0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXRhVzR1WlhGMVlXeHpLSFJvYVhNdWJXbHVLU0FtSmlCbExtMWhlQzVsY1hWaGJITW9kR2hwY3k1dFlYZ3BPd29nSUNBZ2ZRcDlPd3B4YVM1d2NtOTBiM1I1Y0dVdWFYTkNiM2d5SUQwZ0lUQTdDblpoY2lCRVl5QTlJRzVsZHlCTkxDQlVjeUE5SUc1bGR5Qk5MQ0JMYUNBOUlHTnNZWE56SUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVZ1BTQnVaWGNnVFN3Z2RDQTlJRzVsZHlCTktYc0tJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBJRDBnWlN3Z2RHaHBjeTVsYm1RZ1BTQjBPd29nSUNBZ2ZRb2dJQ0FnYzJWMEtHVXNJSFFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpkR0Z5ZEM1amIzQjVLR1VwTENCMGFHbHpMbVZ1WkM1amIzQjVLSFFwTENCMGFHbHpPd29nSUNBZ2ZRb2dJQ0FnWTI5d2VTaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUmhjblF1WTI5d2VTaGxMbk4wWVhKMEtTd2dkR2hwY3k1bGJtUXVZMjl3ZVNobExtVnVaQ2tzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JuWlhSRFpXNTBaWElvWlNrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbExtRmtaRlpsWTNSdmNuTW9kR2hwY3k1emRHRnlkQ3dnZEdocGN5NWxibVFwTG0xMWJIUnBjR3g1VTJOaGJHRnlLQzQxS1RzS0lDQWdJSDBLSUNBZ0lHUmxiSFJoS0dVcElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z1pTNXpkV0pXWldOMGIzSnpLSFJvYVhNdVpXNWtMQ0IwYUdsekxuTjBZWEowS1RzS0lDQWdJSDBLSUNBZ0lHUnBjM1JoYm1ObFUzRW9LU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUmhjblF1WkdsemRHRnVZMlZVYjFOeGRXRnlaV1FvZEdocGN5NWxibVFwT3dvZ0lDQWdmUW9nSUNBZ1pHbHpkR0Z1WTJVb0tTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSaGNuUXVaR2x6ZEdGdVkyVlVieWgwYUdsekxtVnVaQ2s3Q2lBZ0lDQjlDaUFnSUNCaGRDaGxMQ0IwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR1ZzZEdFb2RDa3ViWFZzZEdsd2JIbFRZMkZzWVhJb1pTa3VZV1JrS0hSb2FYTXVjM1JoY25RcE93b2dJQ0FnZlFvZ0lDQWdZMnh2YzJWemRGQnZhVzUwVkc5UWIybHVkRkJoY21GdFpYUmxjaWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdSR011YzNWaVZtVmpkRzl5Y3lobExDQjBhR2x6TG5OMFlYSjBLU3dnVkhNdWMzVmlWbVZqZEc5eWN5aDBhR2x6TG1WdVpDd2dkR2hwY3k1emRHRnlkQ2s3Q2lBZ0lDQWdJQ0FnYkdWMElHNGdQU0JVY3k1a2IzUW9WSE1wTENCeUlEMGdWSE11Wkc5MEtFUmpLU0F2SUc0N0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhRZ0ppWWdLSElnUFNCdGRDaHlMQ0F3TENBeEtTa3NJSEk3Q2lBZ0lDQjlDaUFnSUNCamJHOXpaWE4wVUc5cGJuUlViMUJ2YVc1MEtHVXNJSFFzSUc0cElIc0tJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlIUm9hWE11WTJ4dmMyVnpkRkJ2YVc1MFZHOVFiMmx1ZEZCaGNtRnRaWFJsY2lobExDQjBLVHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a1pXeDBZU2h1S1M1dGRXeDBhWEJzZVZOallXeGhjaWhwS1M1aFpHUW9kR2hwY3k1emRHRnlkQ2s3Q2lBZ0lDQjlDaUFnSUNCaGNIQnNlVTFoZEhKcGVEUW9aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBZWEowTG1Gd2NHeDVUV0YwY21sNE5DaGxLU3dnZEdocGN5NWxibVF1WVhCd2JIbE5ZWFJ5YVhnMEtHVXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdaWEYxWVd4ektHVXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaUzV6ZEdGeWRDNWxjWFZoYkhNb2RHaHBjeTV6ZEdGeWRDa2dKaVlnWlM1bGJtUXVaWEYxWVd4ektIUm9hWE11Wlc1a0tUc0tJQ0FnSUgwS0lDQWdJR05zYjI1bEtDa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTG1OdmNIa29kR2hwY3lrN0NpQWdJQ0I5Q24wc0lFWmpJRDBnYm1WM0lFMHNJRXg1SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJPWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobExDQjBLWHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWJHbG5hSFFnUFNCbExDQjBhR2x6TG14cFoyaDBMblZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLQ2tzSUhSb2FYTXViV0YwY21sNElEMGdaUzV0WVhSeWFYaFhiM0pzWkN3Z2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11WTI5c2IzSWdQU0IwT3dvZ0lDQWdJQ0FnSUd4bGRDQnVJRDBnYm1WM0lGOWxMQ0JwSUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJR1p2Y2loc1pYUWdieUE5SURBc0lHRWdQU0F4TENCc0lEMGdNekk3SUc4Z1BDQnNPeUJ2S3lzc0lHRXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2J5QXZJR3dnS2lCTllYUm9MbEJKSUNvZ01pd2dhQ0E5SUdFZ0x5QnNJQ29nVFdGMGFDNVFTU0FxSURJN0NpQWdJQ0FnSUNBZ0lDQWdJR2t1Y0hWemFDaE5ZWFJvTG1OdmN5aGpLU3dnVFdGMGFDNXphVzRvWXlrc0lERXNJRTFoZEdndVkyOXpLR2dwTENCTllYUm9Mbk5wYmlob0tTd2dNU2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUc0dWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QmtaU2hwTENBektTazdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQnVaWGNnWm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0JtYjJjNklDRXhMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1WlNBOUlHNWxkeUIzZENodUxDQnlLU3dnZEdocGN5NWhaR1FvZEdocGN5NWpiMjVsS1N3Z2RHaHBjeTUxY0dSaGRHVW9LVHNLSUNBZ0lIMEtJQ0FnSUdScGMzQnZjMlVvS1NCN0NpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bExtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1amIyNWxMbTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbXhwWjJoMExuVndaR0YwWlUxaGRISnBlRmR2Y214a0tDazdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG14cFoyaDBMbVJwYzNSaGJtTmxJRDhnZEdocGN5NXNhV2RvZEM1a2FYTjBZVzVqWlNBNklERmxNeXdnZENBOUlHVWdLaUJOWVhSb0xuUmhiaWgwYUdsekxteHBaMmgwTG1GdVoyeGxLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtTnZibVV1YzJOaGJHVXVjMlYwS0hRc0lIUXNJR1VwTENCR1l5NXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NXNhV2RvZEM1MFlYSm5aWFF1YldGMGNtbDRWMjl5YkdRcExDQjBhR2x6TG1OdmJtVXViRzl2YTBGMEtFWmpLU3dnZEdocGN5NWpiMnh2Y2lBaFBUMGdkbTlwWkNBd0lEOGdkR2hwY3k1amIyNWxMbTFoZEdWeWFXRnNMbU52Ykc5eUxuTmxkQ2gwYUdsekxtTnZiRzl5S1NBNklIUm9hWE11WTI5dVpTNXRZWFJsY21saGJDNWpiMnh2Y2k1amIzQjVLSFJvYVhNdWJHbG5hSFF1WTI5c2IzSXBPd29nSUNBZ2ZRcDlMQ0I1YmlBOUlHNWxkeUJOTENCRmN5QTlJRzVsZHlCd1pTd2dVVzhnUFNCdVpYY2djR1VzSUdWMUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCM2RDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJSFIxS0dVcExDQnVJRDBnYm1WM0lGOWxMQ0JwSUQwZ1cxMHNJSElnUFNCYlhTd2dieUE5SUc1bGR5QmhaU2d3TENBd0xDQXhLU3dnWVNBOUlHNWxkeUJoWlNnd0xDQXhMQ0F3S1RzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdNZ1BTQXdPeUJqSUR3Z2RDNXNaVzVuZEdnN0lHTXJLeWw3Q2lBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvSUQwZ2RGdGpYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FDNXdZWEpsYm5RZ0ppWWdhQzV3WVhKbGJuUXVhWE5DYjI1bElDWW1JQ2hwTG5CMWMyZ29NQ3dnTUN3Z01Da3NJR2t1Y0hWemFDZ3dMQ0F3TENBd0tTd2djaTV3ZFhOb0tHOHVjaXdnYnk1bkxDQnZMbUlwTENCeUxuQjFjMmdvWVM1eUxDQmhMbWNzSUdFdVlpa3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0J1TG5ObGRFRjBkSEpwWW5WMFpTZ2ljRzl6YVhScGIyNGlMQ0J1WlhjZ1pHVW9hU3dnTXlrcExDQnVMbk5sZEVGMGRISnBZblYwWlNnaVkyOXNiM0lpTENCdVpYY2daR1VvY2l3Z015a3BPd29nSUNBZ0lDQWdJR3hsZENCc0lEMGdibVYzSUdaMEtIc0tJQ0FnSUNBZ0lDQWdJQ0FnZG1WeWRHVjRRMjlzYjNKek9pQWhNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hVWlhOME9pQWhNU3dLSUNBZ0lDQWdJQ0FnSUNBZ1pHVndkR2hYY21sMFpUb2dJVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUnZibVZOWVhCd1pXUTZJQ0V4TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzNCaGNtVnVkRG9nSVRBS0lDQWdJQ0FnSUNCOUtUc0tJQ0FnSUNBZ0lDQnpkWEJsY2lodUxDQnNLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVUydGxiR1YwYjI1SVpXeHdaWElpTENCMGFHbHpMbWx6VTJ0bGJHVjBiMjVJWld4d1pYSWdQU0FoTUN3Z2RHaHBjeTV5YjI5MElEMGdaU3dnZEdocGN5NWliMjVsY3lBOUlIUXNJSFJvYVhNdWJXRjBjbWw0SUQwZ1pTNXRZWFJ5YVhoWGIzSnNaQ3dnZEdocGN5NXRZWFJ5YVhoQmRYUnZWWEJrWVhSbElEMGdJVEU3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQjBhR2x6TG1KdmJtVnpMQ0J1SUQwZ2RHaHBjeTVuWlc5dFpYUnllU3dnYVNBOUlHNHVaMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJcE93b2dJQ0FnSUNBZ0lGRnZMbU52Y0hrb2RHaHBjeTV5YjI5MExtMWhkSEpwZUZkdmNteGtLUzVwYm5abGNuUW9LVHNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSElnUFNBd0xDQnZJRDBnTURzZ2NpQThJSFF1YkdWdVozUm9PeUJ5S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJSFJiY2wwN0NpQWdJQ0FnSUNBZ0lDQWdJR0V1Y0dGeVpXNTBJQ1ltSUdFdWNHRnlaVzUwTG1selFtOXVaU0FtSmlBb1JYTXViWFZzZEdsd2JIbE5ZWFJ5YVdObGN5aFJieXdnWVM1dFlYUnlhWGhYYjNKc1pDa3NJSGx1TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaEZjeWtzSUdrdWMyVjBXRmxhS0c4c0lIbHVMbmdzSUhsdUxua3NJSGx1TG5vcExDQkZjeTV0ZFd4MGFYQnNlVTFoZEhKcFkyVnpLRkZ2TENCaExuQmhjbVZ1ZEM1dFlYUnlhWGhYYjNKc1pDa3NJSGx1TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaEZjeWtzSUdrdWMyVjBXRmxhS0c4Z0t5QXhMQ0I1Ymk1NExDQjViaTU1TENCNWJpNTZLU3dnYnlBclBTQXlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnYmk1blpYUkJkSFJ5YVdKMWRHVW9JbkJ2YzJsMGFXOXVJaWt1Ym1WbFpITlZjR1JoZEdVZ1BTQWhNQ3dnYzNWd1pYSXVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9aU2s3Q2lBZ0lDQjlDbjA3Q21aMWJtTjBhVzl1SUhSMUtITXBJSHNLSUNBZ0lHeGxkQ0JsSUQwZ1cxMDdDaUFnSUNCeklDWW1JSE11YVhOQ2IyNWxJQ1ltSUdVdWNIVnphQ2h6S1RzS0lDQWdJR1p2Y2loc1pYUWdkQ0E5SURBN0lIUWdQQ0J6TG1Ob2FXeGtjbVZ1TG14bGJtZDBhRHNnZENzcktXVXVjSFZ6YUM1aGNIQnNlU2hsTENCMGRTaHpMbU5vYVd4a2NtVnVXM1JkS1NrN0NpQWdJQ0J5WlhSMWNtNGdaVHNLZlFwMllYSWdVbmtnUFNCamJHRnpjeUJsZUhSbGJtUnpJSE4wSUhzS0lDQWdJR052Ym5OMGNuVmpkRzl5S0dVc0lIUXNJRzRwZXdvZ0lDQWdJQ0FnSUd4bGRDQnBJRDBnYm1WM0lFWnBLSFFzSURRc0lESXBMQ0J5SUQwZ2JtVjNJR2h1S0hzS0lDQWdJQ0FnSUNBZ0lDQWdkMmx5WldaeVlXMWxPaUFoTUN3S0lDQWdJQ0FnSUNBZ0lDQWdabTluT2lBaE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnZEc5dVpVMWhjSEJsWkRvZ0lURUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHBMQ0J5S1RzS0lDQWdJQ0FnSUNCMGFHbHpMbXhwWjJoMElEMGdaU3dnZEdocGN5NXNhV2RvZEM1MWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNncExDQjBhR2x6TG1OdmJHOXlJRDBnYml3Z2RHaHBjeTUwZVhCbElEMGdJbEJ2YVc1MFRHbG5hSFJJWld4d1pYSWlMQ0IwYUdsekxtMWhkSEpwZUNBOUlIUm9hWE11YkdsbmFIUXViV0YwY21sNFYyOXliR1FzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJQ0V4TENCMGFHbHpMblZ3WkdGMFpTZ3BPd29nSUNBZ2ZRb2dJQ0FnWkdsemNHOXpaU2dwSUhzS0lDQWdJQ0FnSUNCMGFHbHpMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnZEdocGN5NXRZWFJsY21saGJDNWthWE53YjNObEtDazdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NWpiMnh2Y2lBaFBUMGdkbTlwWkNBd0lEOGdkR2hwY3k1dFlYUmxjbWxoYkM1amIyeHZjaTV6WlhRb2RHaHBjeTVqYjJ4dmNpa2dPaUIwYUdsekxtMWhkR1Z5YVdGc0xtTnZiRzl5TG1OdmNIa29kR2hwY3k1c2FXZG9kQzVqYjJ4dmNpazdDaUFnSUNCOUNuMHNJRkI1SUQwZ2JtVjNJRTBzSUU1aklEMGdibVYzSUdGbExDQkNZeUE5SUc1bGR5QmhaU3dnU1hrZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUU1bElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVXNJSFFzSUc0cGV3b2dJQ0FnSUNBZ0lITjFjR1Z5S0NrN0NpQWdJQ0FnSUNBZ2RHaHBjeTVzYVdkb2RDQTlJR1VzSUhSb2FYTXViR2xuYUhRdWRYQmtZWFJsVFdGMGNtbDRWMjl5YkdRb0tTd2dkR2hwY3k1dFlYUnlhWGdnUFNCbExtMWhkSEpwZUZkdmNteGtMQ0IwYUdsekxtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNU3dnZEdocGN5NWpiMnh2Y2lBOUlHNDdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVaWGNnU1drb2RDazdDaUFnSUNBZ0lDQWdhUzV5YjNSaGRHVlpLRTFoZEdndVVFa2dLaUF1TlNrc0lIUm9hWE11YldGMFpYSnBZV3dnUFNCdVpYY2dhRzRvZXdvZ0lDQWdJQ0FnSUNBZ0lDQjNhWEpsWm5KaGJXVTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQm1iMmM2SUNFeExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBMQ0IwYUdsekxtTnZiRzl5SUQwOVBTQjJiMmxrSURBZ0ppWWdLSFJvYVhNdWJXRjBaWEpwWVd3dWRtVnlkR1Y0UTI5c2IzSnpJRDBnSVRBcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2FTNW5aWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWlrc0lHOGdQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLSEl1WTI5MWJuUWdLaUF6S1RzS0lDQWdJQ0FnSUNCcExuTmxkRUYwZEhKcFluVjBaU2dpWTI5c2IzSWlMQ0J1WlhjZ1ZXVW9ieXdnTXlrcExDQjBhR2x6TG1Ga1pDaHVaWGNnYzNRb2FTd2dkR2hwY3k1dFlYUmxjbWxoYkNrcExDQjBhR2x6TG5Wd1pHRjBaU2dwT3dvZ0lDQWdmUW9nSUNBZ1pHbHpjRzl6WlNncElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG1Ob2FXeGtjbVZ1V3pCZExtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1amFHbHNaSEpsYmxzd1hTNXRZWFJsY21saGJDNWthWE53YjNObEtDazdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVW9LU0I3Q2lBZ0lDQWdJQ0FnYkdWMElHVWdQU0IwYUdsekxtTm9hV3hrY21WdVd6QmRPd29nSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbU52Ykc5eUlDRTlQU0IyYjJsa0lEQXBJSFJvYVhNdWJXRjBaWEpwWVd3dVkyOXNiM0l1YzJWMEtIUm9hWE11WTI5c2IzSXBPd29nSUNBZ0lDQWdJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJR1V1WjJWdmJXVjBjbmt1WjJWMFFYUjBjbWxpZFhSbEtDSmpiMnh2Y2lJcE93b2dJQ0FnSUNBZ0lDQWdJQ0JPWXk1amIzQjVLSFJvYVhNdWJHbG5hSFF1WTI5c2IzSXBMQ0JDWXk1amIzQjVLSFJvYVhNdWJHbG5hSFF1WjNKdmRXNWtRMjlzYjNJcE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzRnUFNBd0xDQnBJRDBnZEM1amIzVnVkRHNnYmlBOElHazdJRzRyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUc0Z1BDQnBJQzhnTWlBL0lFNWpJRG9nUW1NN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMExuTmxkRmhaV2lodUxDQnlMbklzSUhJdVp5d2djaTVpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCMExtNWxaV1J6VlhCa1lYUmxJRDBnSVRBN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHVXViRzl2YTBGMEtGQjVMbk5sZEVaeWIyMU5ZWFJ5YVhoUWIzTnBkR2x2YmloMGFHbHpMbXhwWjJoMExtMWhkSEpwZUZkdmNteGtLUzV1WldkaGRHVW9LU2s3Q2lBZ0lDQjlDbjBzSUc1MUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCM2RDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnTVRBc0lIUWdQU0F4TUN3Z2JpQTlJRFEwTnpNNU1qUXNJR2tnUFNBNE9UUTNPRFE0S1hzS0lDQWdJQ0FnSUNCdUlEMGdibVYzSUdGbEtHNHBMQ0JwSUQwZ2JtVjNJR0ZsS0drcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RDQXZJRElzSUc4Z1BTQmxJQzhnZEN3Z1lTQTlJR1VnTHlBeUxDQnNJRDBnVzEwc0lHTWdQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUdRZ1BTQXdMQ0JtSUQwZ01Dd2diU0E5SUMxaE95QmtJRHc5SUhRN0lHUXJLeXdnYlNBclBTQnZLWHNLSUNBZ0lDQWdJQ0FnSUNBZ2JDNXdkWE5vS0MxaExDQXdMQ0J0TENCaExDQXdMQ0J0S1N3Z2JDNXdkWE5vS0cwc0lEQXNJQzFoTENCdExDQXdMQ0JoS1RzS0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhnZ1BTQmtJRDA5UFNCeUlEOGdiaUE2SUdrN0NpQWdJQ0FnSUNBZ0lDQWdJSGd1ZEc5QmNuSmhlU2hqTENCbUtTd2daaUFyUFNBekxDQjRMblJ2UVhKeVlYa29ZeXdnWmlrc0lHWWdLejBnTXl3Z2VDNTBiMEZ5Y21GNUtHTXNJR1lwTENCbUlDczlJRE1zSUhndWRHOUJjbkpoZVNoakxDQm1LU3dnWmlBclBTQXpPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JzWlhRZ2FDQTlJRzVsZHlCZlpUc0tJQ0FnSUNBZ0lDQm9Mbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnWkdVb2JDd2dNeWtwTENCb0xuTmxkRUYwZEhKcFluVjBaU2dpWTI5c2IzSWlMQ0J1WlhjZ1pHVW9ZeXdnTXlrcE93b2dJQ0FnSUNBZ0lHeGxkQ0IxSUQwZ2JtVjNJR1owS0hzS0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdWNFEyOXNiM0p6T2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnZEc5dVpVMWhjSEJsWkRvZ0lURUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaG9MQ0IxS1RzS0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQWlSM0pwWkVobGJIQmxjaUk3Q2lBZ0lDQjlDbjBzSUVSNUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCM2RDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxJRDBnTVRBc0lIUWdQU0F4Tml3Z2JpQTlJRGdzSUdrZ1BTQTJOQ3dnY2lBOUlEUTBOek01TWpRc0lHOGdQU0E0T1RRM09EUTRLWHNLSUNBZ0lDQWdJQ0J5SUQwZ2JtVjNJR0ZsS0hJcExDQnZJRDBnYm1WM0lHRmxLRzhwT3dvZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnVzEwc0lHd2dQU0JiWFRzS0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUhVZ1BTQXdPeUIxSUR3OUlIUTdJSFVyS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa0lEMGdkU0F2SUhRZ0tpQW9UV0YwYUM1UVNTQXFJRElwTENCbUlEMGdUV0YwYUM1emFXNG9aQ2tnS2lCbExDQnRJRDBnVFdGMGFDNWpiM01vWkNrZ0tpQmxPd29nSUNBZ0lDQWdJQ0FnSUNCaExuQjFjMmdvTUN3Z01Dd2dNQ2tzSUdFdWNIVnphQ2htTENBd0xDQnRLVHNLSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSGdnUFNCMUlDWWdNU0EvSUhJZ09pQnZPd29nSUNBZ0lDQWdJQ0FnSUNCc0xuQjFjMmdvZUM1eUxDQjRMbWNzSUhndVlpa3NJR3d1Y0hWemFDaDRMbklzSUhndVp5d2dlQzVpS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCMUlEMGdNRHNnZFNBOFBTQnVPeUIxS3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pDQTlJSFVnSmlBeElEOGdjaUE2SUc4c0lHWWdQU0JsSUMwZ1pTQXZJRzRnS2lCMU93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRzBnUFNBd095QnRJRHdnYVRzZ2JTc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCNElEMGdiU0F2SUdrZ0tpQW9UV0YwYUM1UVNTQXFJRElwTENCMklEMGdUV0YwYUM1emFXNG9lQ2tnS2lCbUxDQm5JRDBnVFdGMGFDNWpiM01vZUNrZ0tpQm1Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZUzV3ZFhOb0tIWXNJREFzSUdjcExDQnNMbkIxYzJnb1pDNXlMQ0JrTG1jc0lHUXVZaWtzSUhnZ1BTQW9iU0FySURFcElDOGdhU0FxSUNoTllYUm9MbEJKSUNvZ01pa3NJSFlnUFNCTllYUm9Mbk5wYmloNEtTQXFJR1lzSUdjZ1BTQk5ZWFJvTG1OdmN5aDRLU0FxSUdZc0lHRXVjSFZ6YUNoMkxDQXdMQ0JuS1N3Z2JDNXdkWE5vS0dRdWNpd2daQzVuTENCa0xtSXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHeGxkQ0JqSUQwZ2JtVjNJRjlsT3dvZ0lDQWdJQ0FnSUdNdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QmtaU2hoTENBektTa3NJR011YzJWMFFYUjBjbWxpZFhSbEtDSmpiMnh2Y2lJc0lHNWxkeUJrWlNoc0xDQXpLU2s3Q2lBZ0lDQWdJQ0FnYkdWMElHZ2dQU0J1WlhjZ1puUW9ld29nSUNBZ0lDQWdJQ0FnSUNCMlpYSjBaWGhEYjJ4dmNuTTZJQ0V3TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBiMjVsVFdGd2NHVmtPaUFoTVFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lITjFjR1Z5S0dNc0lHZ3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKUWIyeGhja2R5YVdSSVpXeHdaWElpT3dvZ0lDQWdmUXA5TENCNll5QTlJRzVsZHlCTkxDQkJjeUE5SUc1bGR5Qk5MQ0JWWXlBOUlHNWxkeUJOTENCR2VTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ1RtVWdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZEN3Z2JpbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG14cFoyaDBJRDBnWlN3Z2RHaHBjeTVzYVdkb2RDNTFjR1JoZEdWTllYUnlhWGhYYjNKc1pDZ3BMQ0IwYUdsekxtMWhkSEpwZUNBOUlHVXViV0YwY21sNFYyOXliR1FzSUhSb2FYTXViV0YwY21sNFFYVjBiMVZ3WkdGMFpTQTlJQ0V4TENCMGFHbHpMbU52Ykc5eUlEMGdiaXdnZENBOVBUMGdkbTlwWkNBd0lDWW1JQ2gwSUQwZ01TazdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVaWGNnWDJVN0NpQWdJQ0FnSUNBZ2FTNXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJR1JsS0ZzS0lDQWdJQ0FnSUNBZ0lDQWdMWFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIUXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMTBMQW9nSUNBZ0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDQWdJQ0F0ZEN3S0lDQWdJQ0FnSUNBZ0lDQWdMWFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSUMxMExBb2dJQ0FnSUNBZ0lDQWdJQ0IwTEFvZ0lDQWdJQ0FnSUNBZ0lDQXdDaUFnSUNBZ0lDQWdYU3dnTXlrcE93b2dJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2JtVjNJR1owS0hzS0lDQWdJQ0FnSUNBZ0lDQWdabTluT2lBaE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnZEc5dVpVMWhjSEJsWkRvZ0lURUtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0IwYUdsekxteHBaMmgwVUd4aGJtVWdQU0J1WlhjZ2IyNG9hU3dnY2lrc0lIUm9hWE11WVdSa0tIUm9hWE11YkdsbmFIUlFiR0Z1WlNrc0lHa2dQU0J1WlhjZ1gyVXNJR2t1YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCa1pTaGJDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERUtJQ0FnSUNBZ0lDQmRMQ0F6S1Nrc0lIUm9hWE11ZEdGeVoyVjBUR2x1WlNBOUlHNWxkeUJ2YmlocExDQnlLU3dnZEdocGN5NWhaR1FvZEdocGN5NTBZWEpuWlhSTWFXNWxLU3dnZEdocGN5NTFjR1JoZEdVb0tUc0tJQ0FnSUgwS0lDQWdJR1JwYzNCdmMyVW9LU0I3Q2lBZ0lDQWdJQ0FnZEdocGN5NXNhV2RvZEZCc1lXNWxMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnZEdocGN5NXNhV2RvZEZCc1lXNWxMbTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LU3dnZEdocGN5NTBZWEpuWlhSTWFXNWxMbWRsYjIxbGRISjVMbVJwYzNCdmMyVW9LU3dnZEdocGN5NTBZWEpuWlhSTWFXNWxMbTFoZEdWeWFXRnNMbVJwYzNCdmMyVW9LVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaU2dwSUhzS0lDQWdJQ0FnSUNCNll5NXpaWFJHY205dFRXRjBjbWw0VUc5emFYUnBiMjRvZEdocGN5NXNhV2RvZEM1dFlYUnlhWGhYYjNKc1pDa3NJRUZ6TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaDBhR2x6TG14cFoyaDBMblJoY21kbGRDNXRZWFJ5YVhoWGIzSnNaQ2tzSUZWakxuTjFZbFpsWTNSdmNuTW9RWE1zSUhwaktTd2dkR2hwY3k1c2FXZG9kRkJzWVc1bExteHZiMnRCZENoQmN5a3NJSFJvYVhNdVkyOXNiM0lnSVQwOUlIWnZhV1FnTUNBL0lDaDBhR2x6TG14cFoyaDBVR3hoYm1VdWJXRjBaWEpwWVd3dVkyOXNiM0l1YzJWMEtIUm9hWE11WTI5c2IzSXBMQ0IwYUdsekxuUmhjbWRsZEV4cGJtVXViV0YwWlhKcFlXd3VZMjlzYjNJdWMyVjBLSFJvYVhNdVkyOXNiM0lwS1NBNklDaDBhR2x6TG14cFoyaDBVR3hoYm1VdWJXRjBaWEpwWVd3dVkyOXNiM0l1WTI5d2VTaDBhR2x6TG14cFoyaDBMbU52Ykc5eUtTd2dkR2hwY3k1MFlYSm5aWFJNYVc1bExtMWhkR1Z5YVdGc0xtTnZiRzl5TG1OdmNIa29kR2hwY3k1c2FXZG9kQzVqYjJ4dmNpa3BMQ0IwYUdsekxuUmhjbWRsZEV4cGJtVXViRzl2YTBGMEtFRnpLU3dnZEdocGN5NTBZWEpuWlhSTWFXNWxMbk5qWVd4bExub2dQU0JWWXk1c1pXNW5kR2dvS1RzS0lDQWdJSDBLZlN3Z1EzTWdQU0J1WlhjZ1RTd2dVV1VnUFNCdVpYY2dTWElzSUU1NUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCM2RDQjdDaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2RDQTlJRzVsZHlCZlpTd2diaUE5SUc1bGR5Qm1kQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lBeE5qYzNOekl4TlN3S0lDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdWNFEyOXNiM0p6T2lBaE1Dd0tJQ0FnSUNBZ0lDQWdJQ0FnZEc5dVpVMWhjSEJsWkRvZ0lURUtJQ0FnSUNBZ0lDQjlLU3dnYVNBOUlGdGRMQ0J5SUQwZ1cxMHNJRzhnUFNCN2ZTd2dZU0E5SUc1bGR5QmhaU2d4TmpjMU5USXdNQ2tzSUd3Z1BTQnVaWGNnWVdVb01UWTNNVEUyT0RBcExDQmpJRDBnYm1WM0lHRmxLRFF6TnpjMUtTd2dhQ0E5SUc1bGR5QmhaU2d4TmpjM056SXhOU2tzSUhVZ1BTQnVaWGNnWVdVb016TTFOVFEwTXlrN0NpQWdJQ0FnSUNBZ1pDZ2liakVpTENBaWJqSWlMQ0JoS1N3Z1pDZ2liaklpTENBaWJqUWlMQ0JoS1N3Z1pDZ2lialFpTENBaWJqTWlMQ0JoS1N3Z1pDZ2liak1pTENBaWJqRWlMQ0JoS1N3Z1pDZ2laakVpTENBaVpqSWlMQ0JoS1N3Z1pDZ2laaklpTENBaVpqUWlMQ0JoS1N3Z1pDZ2laalFpTENBaVpqTWlMQ0JoS1N3Z1pDZ2laak1pTENBaVpqRWlMQ0JoS1N3Z1pDZ2liakVpTENBaVpqRWlMQ0JoS1N3Z1pDZ2liaklpTENBaVpqSWlMQ0JoS1N3Z1pDZ2liak1pTENBaVpqTWlMQ0JoS1N3Z1pDZ2lialFpTENBaVpqUWlMQ0JoS1N3Z1pDZ2ljQ0lzSUNKdU1TSXNJR3dwTENCa0tDSndJaXdnSW00eUlpd2diQ2tzSUdRb0luQWlMQ0FpYmpNaUxDQnNLU3dnWkNnaWNDSXNJQ0p1TkNJc0lHd3BMQ0JrS0NKMU1TSXNJQ0oxTWlJc0lHTXBMQ0JrS0NKMU1pSXNJQ0oxTXlJc0lHTXBMQ0JrS0NKMU15SXNJQ0oxTVNJc0lHTXBMQ0JrS0NKaklpd2dJblFpTENCb0tTd2daQ2dpY0NJc0lDSmpJaXdnZFNrc0lHUW9JbU51TVNJc0lDSmpiaklpTENCMUtTd2daQ2dpWTI0eklpd2dJbU51TkNJc0lIVXBMQ0JrS0NKalpqRWlMQ0FpWTJZeUlpd2dkU2tzSUdRb0ltTm1NeUlzSUNKalpqUWlMQ0IxS1RzS0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCa0tHMHNJSGdzSUhZcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWmlodExDQjJLU3dnWmloNExDQjJLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWmlodExDQjRLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHa3VjSFZ6YUNnd0xDQXdMQ0F3S1N3Z2NpNXdkWE5vS0hndWNpd2dlQzVuTENCNExtSXBMQ0J2VzIxZElEMDlQU0IyYjJsa0lEQWdKaVlnS0c5YmJWMGdQU0JiWFNrc0lHOWJiVjB1Y0hWemFDaHBMbXhsYm1kMGFDQXZJRE1nTFNBeEtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkQzV6WlhSQmRIUnlhV0oxZEdVb0luQnZjMmwwYVc5dUlpd2dibVYzSUdSbEtHa3NJRE1wS1N3Z2RDNXpaWFJCZEhSeWFXSjFkR1VvSW1OdmJHOXlJaXdnYm1WM0lHUmxLSElzSURNcEtUc0tJQ0FnSUNBZ0lDQnpkWEJsY2loMExDQnVLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNBaVEyRnRaWEpoU0dWc2NHVnlJaXdnZEdocGN5NWpZVzFsY21FZ1BTQmxMQ0IwYUdsekxtTmhiV1Z5WVM1MWNHUmhkR1ZRY205cVpXTjBhVzl1VFdGMGNtbDRJQ1ltSUhSb2FYTXVZMkZ0WlhKaExuVndaR0YwWlZCeWIycGxZM1JwYjI1TllYUnlhWGdvS1N3Z2RHaHBjeTV0WVhSeWFYZ2dQU0JsTG0xaGRISnBlRmR2Y214a0xDQjBhR2x6TG0xaGRISnBlRUYxZEc5VmNHUmhkR1VnUFNBaE1Td2dkR2hwY3k1d2IybHVkRTFoY0NBOUlHOHNJSFJvYVhNdWRYQmtZWFJsS0NrN0NpQWdJQ0I5Q2lBZ0lDQjFjR1JoZEdVb0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6TG1kbGIyMWxkSEo1TENCMElEMGdkR2hwY3k1d2IybHVkRTFoY0N3Z2JpQTlJREVzSUdrZ1BTQXhPd29nSUNBZ0lDQWdJRkZsTG5CeWIycGxZM1JwYjI1TllYUnlhWGhKYm5abGNuTmxMbU52Y0hrb2RHaHBjeTVqWVcxbGNtRXVjSEp2YW1WamRHbHZiazFoZEhKcGVFbHVkbVZ5YzJVcExDQmxkQ2dpWXlJc0lIUXNJR1VzSUZGbExDQXdMQ0F3TENBdE1Ta3NJR1YwS0NKMElpd2dkQ3dnWlN3Z1VXVXNJREFzSURBc0lERXBMQ0JsZENnaWJqRWlMQ0IwTENCbExDQlJaU3dnTFc0c0lDMXBMQ0F0TVNrc0lHVjBLQ0p1TWlJc0lIUXNJR1VzSUZGbExDQnVMQ0F0YVN3Z0xURXBMQ0JsZENnaWJqTWlMQ0IwTENCbExDQlJaU3dnTFc0c0lHa3NJQzB4S1N3Z1pYUW9JbTQwSWl3Z2RDd2daU3dnVVdVc0lHNHNJR2tzSUMweEtTd2daWFFvSW1ZeElpd2dkQ3dnWlN3Z1VXVXNJQzF1TENBdGFTd2dNU2tzSUdWMEtDSm1NaUlzSUhRc0lHVXNJRkZsTENCdUxDQXRhU3dnTVNrc0lHVjBLQ0ptTXlJc0lIUXNJR1VzSUZGbExDQXRiaXdnYVN3Z01Ta3NJR1YwS0NKbU5DSXNJSFFzSUdVc0lGRmxMQ0J1TENCcExDQXhLU3dnWlhRb0luVXhJaXdnZEN3Z1pTd2dVV1VzSUc0Z0tpQXVOeXdnYVNBcUlERXVNU3dnTFRFcExDQmxkQ2dpZFRJaUxDQjBMQ0JsTENCUlpTd2dMVzRnS2lBdU55d2dhU0FxSURFdU1Td2dMVEVwTENCbGRDZ2lkVE1pTENCMExDQmxMQ0JSWlN3Z01Dd2dhU0FxSURJc0lDMHhLU3dnWlhRb0ltTm1NU0lzSUhRc0lHVXNJRkZsTENBdGJpd2dNQ3dnTVNrc0lHVjBLQ0pqWmpJaUxDQjBMQ0JsTENCUlpTd2diaXdnTUN3Z01Ta3NJR1YwS0NKalpqTWlMQ0IwTENCbExDQlJaU3dnTUN3Z0xXa3NJREVwTENCbGRDZ2lZMlkwSWl3Z2RDd2daU3dnVVdVc0lEQXNJR2tzSURFcExDQmxkQ2dpWTI0eElpd2dkQ3dnWlN3Z1VXVXNJQzF1TENBd0xDQXRNU2tzSUdWMEtDSmpiaklpTENCMExDQmxMQ0JSWlN3Z2Jpd2dNQ3dnTFRFcExDQmxkQ2dpWTI0eklpd2dkQ3dnWlN3Z1VXVXNJREFzSUMxcExDQXRNU2tzSUdWMEtDSmpialFpTENCMExDQmxMQ0JSWlN3Z01Dd2dhU3dnTFRFcExDQmxMbWRsZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUtTNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd093b2dJQ0FnZlFvZ0lDQWdaR2x6Y0c5elpTZ3BJSHNLSUNBZ0lDQWdJQ0IwYUdsekxtZGxiMjFsZEhKNUxtUnBjM0J2YzJVb0tTd2dkR2hwY3k1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NpQWdJQ0I5Q24wN0NtWjFibU4wYVc5dUlHVjBLSE1zSUdVc0lIUXNJRzRzSUdrc0lISXNJRzhwSUhzS0lDQWdJRU56TG5ObGRDaHBMQ0J5TENCdktTNTFibkJ5YjJwbFkzUW9iaWs3Q2lBZ0lDQnNaWFFnWVNBOUlHVmJjMTA3Q2lBZ0lDQnBaaUFvWVNBaFBUMGdkbTlwWkNBd0tTQjdDaUFnSUNBZ0lDQWdiR1YwSUd3Z1BTQjBMbWRsZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUtUc0tJQ0FnSUNBZ0lDQm1iM0lvYkdWMElHTWdQU0F3TENCb0lEMGdZUzVzWlc1bmRHZzdJR01nUENCb095QmpLeXNwYkM1elpYUllXVm9vWVZ0alhTd2dRM011ZUN3Z1EzTXVlU3dnUTNNdWVpazdDaUFnSUNCOUNuMEtkbUZ5SUV4eklEMGdibVYzSUV4MExDQnBkU0E5SUdOc1lYTnpJR1Y0ZEdWdVpITWdkM1FnZXdvZ0lDQWdZMjl1YzNSeWRXTjBiM0lvWlN3Z2RDQTlJREUyTnpjMk9UWXdLWHNLSUNBZ0lDQWdJQ0JzWlhRZ2JpQTlJRzVsZHlCVmFXNTBNVFpCY25KaGVTaGJDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lETXNDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEUXNDaUFnSUNBZ0lDQWdJQ0FnSURVc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEWXNDaUFnSUNBZ0lDQWdJQ0FnSURZc0NpQWdJQ0FnSUNBZ0lDQWdJRGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lEY3NDaUFnSUNBZ0lDQWdJQ0FnSURRc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEUXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJRFVzQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURZc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lEY0tJQ0FnSUNBZ0lDQmRLU3dnYVNBOUlHNWxkeUJHYkc5aGRETXlRWEp5WVhrb09DQXFJRE1wTENCeUlEMGdibVYzSUY5bE93b2dJQ0FnSUNBZ0lISXVjMlYwU1c1a1pYZ29ibVYzSUZWbEtHNHNJREVwS1N3Z2NpNXpaWFJCZEhSeWFXSjFkR1VvSW5CdmMybDBhVzl1SWl3Z2JtVjNJRlZsS0drc0lETXBLVHNLSUNBZ0lDQWdJQ0J6ZFhCbGNpaHlMQ0J1WlhjZ1puUW9ld29nSUNBZ0lDQWdJQ0FnSUNCamIyeHZjam9nZEN3S0lDQWdJQ0FnSUNBZ0lDQWdkRzl1WlUxaGNIQmxaRG9nSVRFS0lDQWdJQ0FnSUNCOUtTazdDaUFnSUNBZ0lDQWdkR2hwY3k1dlltcGxZM1FnUFNCbExDQjBhR2x6TG5SNWNHVWdQU0FpUW05NFNHVnNjR1Z5SWl3Z2RHaHBjeTV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnSVRFc0lIUm9hWE11ZFhCa1lYUmxLQ2s3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1VvWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2hsSUNFOVBTQjJiMmxrSURBZ0ppWWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVDYjNoSVpXeHdaWEk2SUM1MWNHUmhkR1VvS1NCb1lYTWdibThnYkc5dVoyVnlJR0Z5WjNWdFpXNTBjeTRpS1N3Z2RHaHBjeTV2WW1wbFkzUWdJVDA5SUhadmFXUWdNQ0FtSmlCTWN5NXpaWFJHY205dFQySnFaV04wS0hSb2FYTXViMkpxWldOMEtTd2dUSE11YVhORmJYQjBlU2dwS1NCeVpYUjFjbTQ3Q2lBZ0lDQWdJQ0FnYkdWMElIUWdQU0JNY3k1dGFXNHNJRzRnUFNCTWN5NXRZWGdzSUdrZ1BTQjBhR2x6TG1kbGIyMWxkSEo1TG1GMGRISnBZblYwWlhNdWNHOXphWFJwYjI0c0lISWdQU0JwTG1GeWNtRjVPd29nSUNBZ0lDQWdJSEpiTUYwZ1BTQnVMbmdzSUhKYk1WMGdQU0J1TG5rc0lISmJNbDBnUFNCdUxub3NJSEpiTTEwZ1BTQjBMbmdzSUhKYk5GMGdQU0J1TG5rc0lISmJOVjBnUFNCdUxub3NJSEpiTmwwZ1BTQjBMbmdzSUhKYk4xMGdQU0IwTG5rc0lISmJPRjBnUFNCdUxub3NJSEpiT1YwZ1BTQnVMbmdzSUhKYk1UQmRJRDBnZEM1NUxDQnlXekV4WFNBOUlHNHVlaXdnY2xzeE1sMGdQU0J1TG5nc0lISmJNVE5kSUQwZ2JpNTVMQ0J5V3pFMFhTQTlJSFF1ZWl3Z2Nsc3hOVjBnUFNCMExuZ3NJSEpiTVRaZElEMGdiaTU1TENCeVd6RTNYU0E5SUhRdWVpd2djbHN4T0YwZ1BTQjBMbmdzSUhKYk1UbGRJRDBnZEM1NUxDQnlXekl3WFNBOUlIUXVlaXdnY2xzeU1WMGdQU0J1TG5nc0lISmJNakpkSUQwZ2RDNTVMQ0J5V3pJelhTQTlJSFF1ZWl3Z2FTNXVaV1ZrYzFWd1pHRjBaU0E5SUNFd0xDQjBhR2x6TG1kbGIyMWxkSEo1TG1OdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BPd29nSUNBZ2ZRb2dJQ0FnYzJWMFJuSnZiVTlpYW1WamRDaGxLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIySnFaV04wSUQwZ1pTd2dkR2hwY3k1MWNHUmhkR1VvS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIzZEM1d2NtOTBiM1I1Y0dVdVkyOXdlUzVqWVd4c0tIUm9hWE1zSUdVcExDQjBhR2x6TG05aWFtVmpkQ0E5SUdVdWIySnFaV04wTENCMGFHbHpPd29nSUNBZ2ZRcDlMQ0JDZVNBOUlHTnNZWE56SUdWNGRHVnVaSE1nZDNRZ2V3b2dJQ0FnWTI5dWMzUnlkV04wYjNJb1pTd2dkQ0E5SURFMk56YzJPVFl3S1hzS0lDQWdJQ0FnSUNCc1pYUWdiaUE5SUc1bGR5QlZhVzUwTVRaQmNuSmhlU2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lESXNDaUFnSUNBZ0lDQWdJQ0FnSURJc0NpQWdJQ0FnSUNBZ0lDQWdJRE1zQ2lBZ0lDQWdJQ0FnSUNBZ0lETXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEVXNDaUFnSUNBZ0lDQWdJQ0FnSURVc0NpQWdJQ0FnSUNBZ0lDQWdJRFlzQ2lBZ0lDQWdJQ0FnSUNBZ0lEWXNDaUFnSUNBZ0lDQWdJQ0FnSURjc0NpQWdJQ0FnSUNBZ0lDQWdJRGNzQ2lBZ0lDQWdJQ0FnSUNBZ0lEUXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJRFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURVc0NpQWdJQ0FnSUNBZ0lDQWdJRElzQ2lBZ0lDQWdJQ0FnSUNBZ0lEWXNDaUFnSUNBZ0lDQWdJQ0FnSURNc0NpQWdJQ0FnSUNBZ0lDQWdJRGNLSUNBZ0lDQWdJQ0JkS1N3Z2FTQTlJRnNLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ0xURXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVFvZ0lDQWdJQ0FnSUYwc0lISWdQU0J1WlhjZ1gyVTdDaUFnSUNBZ0lDQWdjaTV6WlhSSmJtUmxlQ2h1WlhjZ1ZXVW9iaXdnTVNrcExDQnlMbk5sZEVGMGRISnBZblYwWlNnaWNHOXphWFJwYjI0aUxDQnVaWGNnWkdVb2FTd2dNeWtwT3dvZ0lDQWdJQ0FnSUhOMWNHVnlLSElzSUc1bGR5Qm1kQ2g3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lCMExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBLVHNLSUNBZ0lDQWdJQ0IwYUdsekxtSnZlQ0E5SUdVc0lIUm9hWE11ZEhsd1pTQTlJQ0pDYjNnelNHVnNjR1Z5SWl3Z2RHaHBjeTVuWlc5dFpYUnllUzVqYjIxd2RYUmxRbTkxYm1ScGJtZFRjR2hsY21Vb0tUc0tJQ0FnSUgwS0lDQWdJSFZ3WkdGMFpVMWhkSEpwZUZkdmNteGtLR1VwSUhzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSb2FYTXVZbTk0T3dvZ0lDQWdJQ0FnSUhRdWFYTkZiWEIwZVNncElIeDhJQ2gwTG1kbGRFTmxiblJsY2loMGFHbHpMbkJ2YzJsMGFXOXVLU3dnZEM1blpYUlRhWHBsS0hSb2FYTXVjMk5oYkdVcExDQjBhR2x6TG5OallXeGxMbTExYkhScGNHeDVVMk5oYkdGeUtDNDFLU3dnYzNWd1pYSXVkWEJrWVhSbFRXRjBjbWw0VjI5eWJHUW9aU2twT3dvZ0lDQWdmUXA5TENCNmVTQTlJR05zWVhOeklHVjRkR1Z1WkhNZ2IyNGdld29nSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aU3dnZENBOUlERXNJRzRnUFNBeE5qYzNOamsyTUNsN0NpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCdUxDQnlJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUMweExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTFRFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFLSUNBZ0lDQWdJQ0JkTENCdklEMGdibVYzSUY5bE93b2dJQ0FnSUNBZ0lHOHVjMlYwUVhSMGNtbGlkWFJsS0NKd2IzTnBkR2x2YmlJc0lHNWxkeUJrWlNoeUxDQXpLU2tzSUc4dVkyOXRjSFYwWlVKdmRXNWthVzVuVTNCb1pYSmxLQ2s3Q2lBZ0lDQWdJQ0FnYzNWd1pYSW9ieXdnYm1WM0lHWjBLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUdrc0NpQWdJQ0FnSUNBZ0lDQWdJSFJ2Ym1WTllYQndaV1E2SUNFeENpQWdJQ0FnSUNBZ2ZTa3BPd29nSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUNKUWJHRnVaVWhsYkhCbGNpSXNJSFJvYVhNdWNHeGhibVVnUFNCbExDQjBhR2x6TG5OcGVtVWdQU0IwT3dvZ0lDQWdJQ0FnSUd4bGRDQmhJRDBnV3dvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lDMHhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F0TVN3S0lDQWdJQ0FnSUNBZ0lDQWdMVEVzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJQzB4TEFvZ0lDQWdJQ0FnSUNBZ0lDQXhDaUFnSUNBZ0lDQWdYU3dnYkNBOUlHNWxkeUJmWlRzS0lDQWdJQ0FnSUNCc0xuTmxkRUYwZEhKcFluVjBaU2dpY0c5emFYUnBiMjRpTENCdVpYY2daR1VvWVN3Z015a3BMQ0JzTG1OdmJYQjFkR1ZDYjNWdVpHbHVaMU53YUdWeVpTZ3BMQ0IwYUdsekxtRmtaQ2h1WlhjZ2MzUW9iQ3dnYm1WM0lHaHVLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUdrc0NpQWdJQ0FnSUNBZ0lDQWdJRzl3WVdOcGRIazZJQzR5TEFvZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzNCaGNtVnVkRG9nSVRBc0NpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb1YzSnBkR1U2SUNFeExBb2dJQ0FnSUNBZ0lDQWdJQ0IwYjI1bFRXRndjR1ZrT2lBaE1Rb2dJQ0FnSUNBZ0lIMHBLU2s3Q2lBZ0lDQjlDaUFnSUNCMWNHUmhkR1ZOWVhSeWFYaFhiM0pzWkNobEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhRZ1BTQXRkR2hwY3k1d2JHRnVaUzVqYjI1emRHRnVkRHNLSUNBZ0lDQWdJQ0JOWVhSb0xtRmljeWgwS1NBOElERmxMVGdnSmlZZ0tIUWdQU0F4WlMwNEtTd2dkR2hwY3k1elkyRnNaUzV6WlhRb0xqVWdLaUIwYUdsekxuTnBlbVVzSUM0MUlDb2dkR2hwY3k1emFYcGxMQ0IwS1N3Z2RHaHBjeTVqYUdsc1pISmxibHN3WFM1dFlYUmxjbWxoYkM1emFXUmxJRDBnZENBOElEQWdQeUJwZENBNklFRnBMQ0IwYUdsekxteHZiMnRCZENoMGFHbHpMbkJzWVc1bExtNXZjbTFoYkNrc0lITjFjR1Z5TG5Wd1pHRjBaVTFoZEhKcGVGZHZjbXhrS0dVcE93b2dJQ0FnZlFwOUxDQlBZeUE5SUc1bGR5Qk5MQ0JTY3l3Z1MyOHNJRlY1SUQwZ1kyeGhjM01nWlhoMFpXNWtjeUJPWlNCN0NpQWdJQ0JqYjI1emRISjFZM1J2Y2lobElEMGdibVYzSUUwb01Dd2dNQ3dnTVNrc0lIUWdQU0J1WlhjZ1RTZ3dMQ0F3TENBd0tTd2diaUE5SURFc0lHa2dQU0F4TmpjM05qazJNQ3dnY2lBOUlHNGdLaUF1TWl3Z2J5QTlJSElnS2lBdU1pbDdDaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUc0tJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0FpUVhKeWIzZElaV3h3WlhJaUxDQlNjeUE5UFQwZ2RtOXBaQ0F3SUNZbUlDaFNjeUE5SUc1bGR5QmZaU3dnVW5NdWMyVjBRWFIwY21saWRYUmxLQ0p3YjNOcGRHbHZiaUlzSUc1bGR5QmtaU2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdJQ0FnSURFc0NpQWdJQ0FnSUNBZ0lDQWdJREFLSUNBZ0lDQWdJQ0JkTENBektTa3NJRXR2SUQwZ2JtVjNJRXB1S0RBc0lDNDFMQ0F4TENBMUxDQXhLU3dnUzI4dWRISmhibk5zWVhSbEtEQXNJQzB1TlN3Z01Da3BMQ0IwYUdsekxuQnZjMmwwYVc5dUxtTnZjSGtvZENrc0lIUm9hWE11YkdsdVpTQTlJRzVsZHlCdmJpaFNjeXdnYm1WM0lHWjBLSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUdrc0NpQWdJQ0FnSUNBZ0lDQWdJSFJ2Ym1WTllYQndaV1E2SUNFeENpQWdJQ0FnSUNBZ2ZTa3BMQ0IwYUdsekxteHBibVV1YldGMGNtbDRRWFYwYjFWd1pHRjBaU0E5SUNFeExDQjBhR2x6TG1Ga1pDaDBhR2x6TG14cGJtVXBMQ0IwYUdsekxtTnZibVVnUFNCdVpYY2djM1FvUzI4c0lHNWxkeUJvYmloN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQnBMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwS1N3Z2RHaHBjeTVqYjI1bExtMWhkSEpwZUVGMWRHOVZjR1JoZEdVZ1BTQWhNU3dnZEdocGN5NWhaR1FvZEdocGN5NWpiMjVsS1N3Z2RHaHBjeTV6WlhSRWFYSmxZM1JwYjI0b1pTa3NJSFJvYVhNdWMyVjBUR1Z1WjNSb0tHNHNJSElzSUc4cE93b2dJQ0FnZlFvZ0lDQWdjMlYwUkdseVpXTjBhVzl1S0dVcElIc0tJQ0FnSUNBZ0lDQnBaaUFvWlM1NUlENGdMams1T1RrNUtTQjBhR2x6TG5GMVlYUmxjbTVwYjI0dWMyVjBLREFzSURBc0lEQXNJREVwT3dvZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dVdWVTQThJQzB1T1RrNU9Ua3BJSFJvYVhNdWNYVmhkR1Z5Ym1sdmJpNXpaWFFvTVN3Z01Dd2dNQ3dnTUNrN0NpQWdJQ0FnSUNBZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lFOWpMbk5sZENobExub3NJREFzSUMxbExuZ3BMbTV2Y20xaGJHbDZaU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZENBOUlFMWhkR2d1WVdOdmN5aGxMbmtwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5GMVlYUmxjbTVwYjI0dWMyVjBSbkp2YlVGNGFYTkJibWRzWlNoUFl5d2dkQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2MyVjBUR1Z1WjNSb0tHVXNJSFFnUFNCbElDb2dMaklzSUc0Z1BTQjBJQ29nTGpJcElIc0tJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtVXVjMk5oYkdVdWMyVjBLREVzSUUxaGRHZ3ViV0Y0S0RGbExUUXNJR1VnTFNCMEtTd2dNU2tzSUhSb2FYTXViR2x1WlM1MWNHUmhkR1ZOWVhSeWFYZ29LU3dnZEdocGN5NWpiMjVsTG5OallXeGxMbk5sZENodUxDQjBMQ0J1S1N3Z2RHaHBjeTVqYjI1bExuQnZjMmwwYVc5dUxua2dQU0JsTENCMGFHbHpMbU52Ym1VdWRYQmtZWFJsVFdGMGNtbDRLQ2s3Q2lBZ0lDQjlDaUFnSUNCelpYUkRiMnh2Y2lobEtTQjdDaUFnSUNBZ0lDQWdkR2hwY3k1c2FXNWxMbTFoZEdWeWFXRnNMbU52Ykc5eUxuTmxkQ2hsS1N3Z2RHaHBjeTVqYjI1bExtMWhkR1Z5YVdGc0xtTnZiRzl5TG5ObGRDaGxLVHNLSUNBZ0lIMEtJQ0FnSUdOdmNIa29aU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpiM0I1S0dVc0lDRXhLU3dnZEdocGN5NXNhVzVsTG1OdmNIa29aUzVzYVc1bEtTd2dkR2hwY3k1amIyNWxMbU52Y0hrb1pTNWpiMjVsS1N3Z2RHaHBjenNLSUNBZ0lIMEtmU3dnY25VZ1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUhkMElIc0tJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVWdQU0F4S1hzS0lDQWdJQ0FnSUNCc1pYUWdkQ0E5SUZzS0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdaU3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ1pTd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnWlFvZ0lDQWdJQ0FnSUYwc0lHNGdQU0JiQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnSUNBZ0lERXNDaUFnSUNBZ0lDQWdJQ0FnSUM0MkxBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJQ0FnSUNBeExBb2dJQ0FnSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSUNBZ0lDQXVOaXdLSUNBZ0lDQWdJQ0FnSUNBZ01Td0tJQ0FnSUNBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQWdJQ0FnTVN3S0lDQWdJQ0FnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0xqWXNDaUFnSUNBZ0lDQWdJQ0FnSURFS0lDQWdJQ0FnSUNCZExDQnBJRDBnYm1WM0lGOWxPd29nSUNBZ0lDQWdJR2t1YzJWMFFYUjBjbWxpZFhSbEtDSndiM05wZEdsdmJpSXNJRzVsZHlCa1pTaDBMQ0F6S1Nrc0lHa3VjMlYwUVhSMGNtbGlkWFJsS0NKamIyeHZjaUlzSUc1bGR5QmtaU2h1TENBektTazdDaUFnSUNBZ0lDQWdiR1YwSUhJZ1BTQnVaWGNnWm5Rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0IyWlhKMFpYaERiMnh2Y25NNklDRXdMQW9nSUNBZ0lDQWdJQ0FnSUNCMGIyNWxUV0Z3Y0dWa09pQWhNUW9nSUNBZ0lDQWdJSDBwT3dvZ0lDQWdJQ0FnSUhOMWNHVnlLR2tzSUhJcE93b2dJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ0pCZUdWelNHVnNjR1Z5SWpzS0lDQWdJSDBLSUNBZ0lITmxkRU52Ykc5eWN5aGxMQ0IwTENCdUtTQjdDaUFnSUNBZ0lDQWdiR1YwSUdrZ1BTQnVaWGNnWVdVc0lISWdQU0IwYUdsekxtZGxiMjFsZEhKNUxtRjBkSEpwWW5WMFpYTXVZMjlzYjNJdVlYSnlZWGs3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR2t1YzJWMEtHVXBMQ0JwTG5SdlFYSnlZWGtvY2l3Z01Da3NJR2t1ZEc5QmNuSmhlU2h5TENBektTd2dhUzV6WlhRb2RDa3NJR2t1ZEc5QmNuSmhlU2h5TENBMktTd2dhUzUwYjBGeWNtRjVLSElzSURrcExDQnBMbk5sZENodUtTd2dhUzUwYjBGeWNtRjVLSElzSURFeUtTd2dhUzUwYjBGeWNtRjVLSElzSURFMUtTd2dkR2hwY3k1blpXOXRaWFJ5ZVM1aGRIUnlhV0oxZEdWekxtTnZiRzl5TG01bFpXUnpWWEJrWVhSbElEMGdJVEFzSUhSb2FYTTdDaUFnSUNCOUNpQWdJQ0JrYVhOd2IzTmxLQ2tnZXdvZ0lDQWdJQ0FnSUhSb2FYTXVaMlZ2YldWMGNua3VaR2x6Y0c5elpTZ3BMQ0IwYUdsekxtMWhkR1Z5YVdGc0xtUnBjM0J2YzJVb0tUc0tJQ0FnSUgwS2ZTd2dUM2tnUFNCamJHRnpjeUI3Q2lBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZXdvZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDSlRhR0Z3WlZCaGRHZ2lMQ0IwYUdsekxtTnZiRzl5SUQwZ2JtVjNJR0ZsTENCMGFHbHpMbk4xWWxCaGRHaHpJRDBnVzEwc0lIUm9hWE11WTNWeWNtVnVkRkJoZEdnZ1BTQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ2JXOTJaVlJ2S0dVc0lIUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amRYSnlaVzUwVUdGMGFDQTlJRzVsZHlCbmNpd2dkR2hwY3k1emRXSlFZWFJvY3k1d2RYTm9LSFJvYVhNdVkzVnljbVZ1ZEZCaGRHZ3BMQ0IwYUdsekxtTjFjbkpsYm5SUVlYUm9MbTF2ZG1WVWJ5aGxMQ0IwS1N3Z2RHaHBjenNLSUNBZ0lIMEtJQ0FnSUd4cGJtVlVieWhsTENCMEtTQjdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNWeWNtVnVkRkJoZEdndWJHbHVaVlJ2S0dVc0lIUXBMQ0IwYUdsek93b2dJQ0FnZlFvZ0lDQWdjWFZoWkhKaGRHbGpRM1Z5ZG1WVWJ5aGxMQ0IwTENCdUxDQnBLU0I3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzVnljbVZ1ZEZCaGRHZ3VjWFZoWkhKaGRHbGpRM1Z5ZG1WVWJ5aGxMQ0IwTENCdUxDQnBLU3dnZEdocGN6c0tJQ0FnSUgwS0lDQWdJR0psZW1sbGNrTjFjblpsVkc4b1pTd2dkQ3dnYml3Z2FTd2djaXdnYnlrZ2V3b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU4xY25KbGJuUlFZWFJvTG1KbGVtbGxja04xY25abFZHOG9aU3dnZEN3Z2Jpd2dhU3dnY2l3Z2J5a3NJSFJvYVhNN0NpQWdJQ0I5Q2lBZ0lDQnpjR3hwYm1WVWFISjFLR1VwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpkWEp5Wlc1MFVHRjBhQzV6Y0d4cGJtVlVhSEoxS0dVcExDQjBhR2x6T3dvZ0lDQWdmUW9nSUNBZ2RHOVRhR0Z3WlhNb1pTd2dkQ2tnZXdvZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUc0b2NDa2dld29nSUNBZ0lDQWdJQ0FnSUNCc1pYUWdYeUE5SUZ0ZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGtnUFNBd0xDQmlJRDBnY0M1c1pXNW5kR2c3SUhrZ1BDQmlPeUI1S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRUVnUFNCd1czbGRMQ0JNSUQwZ2JtVjNJRmgwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEM1amRYSjJaWE1nUFNCQkxtTjFjblpsY3l3Z1h5NXdkWE5vS0V3cE93b2dJQ0FnSUNBZ0lDQWdJQ0I5Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZk93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnBLSEFzSUY4cElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIa2dQU0JmTG14bGJtZDBhQ3dnWWlBOUlDRXhPd29nSUNBZ0lDQWdJQ0FnSUNCbWIzSW9iR1YwSUVFZ1BTQjVJQzBnTVN3Z1RDQTlJREE3SUV3Z1BDQjVPeUJCSUQwZ1RDc3JLWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCSklEMGdYMXRCWFN3Z2F5QTlJRjliVEYwc0lFSWdQU0JyTG5nZ0xTQkpMbmdzSUZBZ1BTQnJMbmtnTFNCSkxuazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVFdGMGFDNWhZbk1vVUNrZ1BpQk9kVzFpWlhJdVJWQlRTVXhQVGlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUUlEd2dNQ0FtSmlBb1NTQTlJRjliVEYwc0lFSWdQU0F0UWl3Z2F5QTlJRjliUVYwc0lGQWdQU0F0VUNrc0lIQXVlU0E4SUVrdWVTQjhmQ0J3TG5rZ1BpQnJMbmtwSUdOdmJuUnBiblZsT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3TG5rZ1BUMDlJRWt1ZVNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jQzU0SUQwOVBTQkpMbmdwSUhKbGRIVnliaUFoTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkeUE5SUZBZ0tpQW9jQzU0SUMwZ1NTNTRLU0F0SUVJZ0tpQW9jQzU1SUMwZ1NTNTVLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hjZ1BUMDlJREFwSUhKbGRIVnliaUFoTURzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIY2dQQ0F3S1NCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWWlBOUlDRmlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEF1ZVNBaFBUMGdTUzU1S1NCamIyNTBhVzUxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYXk1NElEdzlJSEF1ZUNBbUppQndMbmdnUEQwZ1NTNTRJSHg4SUVrdWVDQThQU0J3TG5nZ0ppWWdjQzU0SUR3OUlHc3VlQ2tnY21WMGRYSnVJQ0V3T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJpT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdjaUE5SUVwMExtbHpRMnh2WTJ0WGFYTmxMQ0J2SUQwZ2RHaHBjeTV6ZFdKUVlYUm9jenNLSUNBZ0lDQWdJQ0JwWmlBb2J5NXNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnliaUJiWFRzS0lDQWdJQ0FnSUNCcFppQW9kQ0E5UFQwZ0lUQXBJSEpsZEhWeWJpQnVLRzhwT3dvZ0lDQWdJQ0FnSUd4bGRDQmhMQ0JzTENCakxDQm9JRDBnVzEwN0NpQWdJQ0FnSUNBZ2FXWWdLRzh1YkdWdVozUm9JRDA5UFNBeEtTQnlaWFIxY200Z2JDQTlJRzliTUYwc0lHTWdQU0J1WlhjZ1dIUXNJR011WTNWeWRtVnpJRDBnYkM1amRYSjJaWE1zSUdndWNIVnphQ2hqS1N3Z2FEc0tJQ0FnSUNBZ0lDQnNaWFFnZFNBOUlDRnlLRzliTUYwdVoyVjBVRzlwYm5SektDa3BPd29nSUNBZ0lDQWdJSFVnUFNCbElEOGdJWFVnT2lCMU93b2dJQ0FnSUNBZ0lHeGxkQ0JrSUQwZ1cxMHNJR1lnUFNCYlhTd2diU0E5SUZ0ZExDQjRJRDBnTUN3Z2Rqc0tJQ0FnSUNBZ0lDQm1XM2hkSUQwZ2RtOXBaQ0F3TENCdFczaGRJRDBnVzEwN0NpQWdJQ0FnSUNBZ1ptOXlLR3hsZENCd0lEMGdNQ3dnWHlBOUlHOHViR1Z1WjNSb095QndJRHdnWHpzZ2NDc3JLV3dnUFNCdlczQmRMQ0IySUQwZ2JDNW5aWFJRYjJsdWRITW9LU3dnWVNBOUlISW9kaWtzSUdFZ1BTQmxJRDhnSVdFZ09pQmhMQ0JoSUQ4Z0tDRjFJQ1ltSUdaYmVGMGdKaVlnZUNzckxDQm1XM2hkSUQwZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J6T2lCdVpYY2dXSFFzQ2lBZ0lDQWdJQ0FnSUNBZ0lIQTZJSFlLSUNBZ0lDQWdJQ0I5TENCbVczaGRMbk11WTNWeWRtVnpJRDBnYkM1amRYSjJaWE1zSUhVZ0ppWWdlQ3NyTENCdFczaGRJRDBnVzEwcElEb2diVnQ0WFM1d2RYTm9LSHNLSUNBZ0lDQWdJQ0FnSUNBZ2FEb2diQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2NEb2dkbHN3WFFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHbG1JQ2doWmxzd1hTa2djbVYwZFhKdUlHNG9ieWs3Q2lBZ0lDQWdJQ0FnYVdZZ0tHWXViR1Z1WjNSb0lENGdNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0NBOUlDRXhMQ0JmSUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZVNBOUlEQXNJR0lnUFNCbUxteGxibWQwYURzZ2VTQThJR0k3SUhrckt5bGtXM2xkSUQwZ1cxMDdDaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaHNaWFFnZVNBOUlEQXNJR0lnUFNCbUxteGxibWQwYURzZ2VTQThJR0k3SUhrckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnUVNBOUlHMWJlVjA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJRXdnUFNBd095Qk1JRHdnUVM1c1pXNW5kR2c3SUV3ckt5bDdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElFa2dQU0JCVzB4ZExDQnJJRDBnSVRBN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0d4bGRDQkNJRDBnTURzZ1FpQThJR1l1YkdWdVozUm9PeUJDS3lzcGFTaEpMbkFzSUdaYlFsMHVjQ2tnSmlZZ0tIa2dJVDA5SUVJZ0ppWWdYeTV3ZFhOb0tIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiWE02SUhrc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmN6b2dRaXdLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhRzlzWlRvZ1RBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTENCcklEOGdLR3NnUFNBaE1Td2daRnRDWFM1d2RYTm9LRWtwS1NBNklIQWdQU0FoTUNrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUFtSmlCa1czbGRMbkIxYzJnb1NTazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdYeTVzWlc1bmRHZ2dQaUF3SUNZbUlDaHdJSHg4SUNodElEMGdaQ2twT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCc1pYUWdaenNLSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSEFnUFNBd0xDQmZJRDBnWmk1c1pXNW5kR2c3SUhBZ1BDQmZPeUJ3S3lzcGV3b2dJQ0FnSUNBZ0lDQWdJQ0JqSUQwZ1psdHdYUzV6TENCb0xuQjFjMmdvWXlrc0lHY2dQU0J0VzNCZE93b2dJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2JHVjBJSGtnUFNBd0xDQmlJRDBnWnk1c1pXNW5kR2c3SUhrZ1BDQmlPeUI1S3lzcFl5NW9iMnhsY3k1d2RYTm9LR2RiZVYwdWFDazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsZEhWeWJpQm9Pd29nSUNBZ2ZRcDlMQ0J6ZFNBOUlHNWxkeUJHYkc5aGRETXlRWEp5WVhrb01Ta3NJRWg1SUQwZ2JtVjNJRWx1ZERNeVFYSnlZWGtvYzNVdVluVm1abVZ5S1N3Z2Eza2dQU0JqYkdGemN5QjdDaUFnSUNCemRHRjBhV01nZEc5SVlXeG1SbXh2WVhRb1pTa2dld29nSUNBZ0lDQWdJR1VnUGlBMk5UVXdOQ0FtSmlBb1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUVZWFJoVlhScGJITXVkRzlJWVd4bVJteHZZWFFvS1RvZ2RtRnNkV1VnWlhoalpXVmtjeUEyTlRVd05DNGlLU3dnWlNBOUlEWTFOVEEwS1N3Z2MzVmJNRjBnUFNCbE93b2dJQ0FnSUNBZ0lHeGxkQ0IwSUQwZ1NIbGJNRjBzSUc0Z1BTQjBJRDQrSURFMklDWWdNekkzTmpnc0lHa2dQU0IwSUQ0K0lERXlJQ1lnTWpBME55d2djaUE5SUhRZ1BqNGdNak1nSmlBeU5UVTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlISWdQQ0F4TURNZ1B5QnVJRG9nY2lBK0lERTBNaUEvSUNodUlIdzlJRE14TnpRMExDQnVJSHc5SUNoeUlEMDlJREkxTlNBL0lEQWdPaUF4S1NBbUppQjBJQ1lnT0RNNE9EWXdOeXdnYmlrZ09pQnlJRHdnTVRFeklEOGdLR2tnZkQwZ01qQTBPQ3dnYmlCOFBTQW9hU0ErUGlBeE1UUWdMU0J5S1NBcklDaHBJRDQrSURFeE15QXRJSElnSmlBeEtTd2diaWtnT2lBb2JpQjhQU0J5SUMwZ01URXlJRHc4SURFd0lId2dhU0ErUGlBeExDQnVJQ3M5SUdrZ0ppQXhMQ0J1S1RzS0lDQWdJSDBLZlN3Z1lqQWdQU0F3TENCM01DQTlJREVzSUZNd0lEMGdNQ3dnVkRBZ1BTQXhMQ0JGTUNBOUlESTdDbVoxYm1OMGFXOXVJRUV3S0hNcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGsxbGMyaEdZV05sVFdGMFpYSnBZV3dnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVlhObElHRnVJRUZ5Y21GNUlHbHVjM1JsWVdRdUlpa3NJSE03Q24wS1puVnVZM1JwYjI0Z1F6QW9jeUE5SUZ0ZEtTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TmRXeDBhVTFoZEdWeWFXRnNJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNCaGJpQkJjbkpoZVNCcGJuTjBaV0ZrTGlJcExDQnpMbWx6VFhWc2RHbE5ZWFJsY21saGJDQTlJQ0V3TENCekxtMWhkR1Z5YVdGc2N5QTlJSE1zSUhNdVkyeHZibVVnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2N5NXpiR2xqWlNncE93b2dJQ0FnZlN3Z2N6c0tmUXBtZFc1amRHbHZiaUJNTUNoekxDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVFiMmx1ZEVOc2IzVmtJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnVkVoU1JVVXVVRzlwYm5SekxpSXBMQ0J1WlhjZ2VuSW9jeXdnWlNrN0NuMEtablZ1WTNScGIyNGdVakFvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VUdGeWRHbGpiR1VnYUdGeklHSmxaVzRnY21WdVlXMWxaQ0IwYnlCVVNGSkZSUzVUY0hKcGRHVXVJaWtzSUc1bGR5QnlieWh6S1RzS2ZRcG1kVzVqZEdsdmJpQlFNQ2h6TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1UVlYSjBhV05zWlZONWMzUmxiU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUZSSVVrVkZMbEJ2YVc1MGN5NGlLU3dnYm1WM0lIcHlLSE1zSUdVcE93cDlDbVoxYm1OMGFXOXVJRWt3S0hNcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxCdmFXNTBRMnh2ZFdSTllYUmxjbWxoYkNCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklGUklVa1ZGTGxCdmFXNTBjMDFoZEdWeWFXRnNMaUlwTENCdVpYY2dhbTRvY3lrN0NuMEtablZ1WTNScGIyNGdSREFvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VUdGeWRHbGpiR1ZDWVhOcFkwMWhkR1Z5YVdGc0lHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdWRWhTUlVVdVVHOXBiblJ6VFdGMFpYSnBZV3d1SWlrc0lHNWxkeUJxYmloektUc0tmUXBtZFc1amRHbHZiaUJHTUNoektTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1UVlYSjBhV05zWlZONWMzUmxiVTFoZEdWeWFXRnNJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnVkVoU1JVVXVVRzlwYm5SelRXRjBaWEpwWVd3dUlpa3NJRzVsZHlCcWJpaHpLVHNLZlFwbWRXNWpkR2x2YmlCT01DaHpMQ0JsTENCMEtTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1V1pYSjBaWGdnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVlhObElGUklVa1ZGTGxabFkzUnZjak1nYVc1emRHVmhaQzRpS1N3Z2JtVjNJRTBvY3l3Z1pTd2dkQ2s3Q24wS1puVnVZM1JwYjI0Z1FqQW9jeXdnWlNrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UkhsdVlXMXBZMEoxWm1abGNrRjBkSEpwWW5WMFpTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlZjMlVnYm1WM0lGUklVa1ZGTGtKMVptWmxja0YwZEhKcFluVjBaU2dwTG5ObGRGVnpZV2RsS0NCVVNGSkZSUzVFZVc1aGJXbGpSSEpoZDFWellXZGxJQ2tnYVc1emRHVmhaQzRpS1N3Z2JtVjNJRlZsS0hNc0lHVXBMbk5sZEZWellXZGxLSFZ5S1RzS2ZRcG1kVzVqZEdsdmJpQjZNQ2h6TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1SmJuUTRRWFIwY21saWRYUmxJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNCdVpYY2dWRWhTUlVVdVNXNTBPRUoxWm1abGNrRjBkSEpwWW5WMFpTZ3BJR2x1YzNSbFlXUXVJaWtzSUc1bGR5QnFZeWh6TENCbEtUc0tmUXBtZFc1amRHbHZiaUJWTUNoekxDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVZhVzUwT0VGMGRISnBZblYwWlNCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdibVYzSUZSSVVrVkZMbFZwYm5RNFFuVm1abVZ5UVhSMGNtbGlkWFJsS0NrZ2FXNXpkR1ZoWkM0aUtTd2dibVYzSUZGaktITXNJR1VwT3dwOUNtWjFibU4wYVc5dUlFOHdLSE1zSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxWcGJuUTRRMnhoYlhCbFpFRjBkSEpwWW5WMFpTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlZjMlVnYm1WM0lGUklVa1ZGTGxWcGJuUTRRMnhoYlhCbFpFSjFabVpsY2tGMGRISnBZblYwWlNncElHbHVjM1JsWVdRdUlpa3NJRzVsZHlCTFl5aHpMQ0JsS1RzS2ZRcG1kVzVqZEdsdmJpQklNQ2h6TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1SmJuUXhOa0YwZEhKcFluVjBaU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUJWYzJVZ2JtVjNJRlJJVWtWRkxrbHVkREUyUW5WbVptVnlRWFIwY21saWRYUmxLQ2tnYVc1emRHVmhaQzRpS1N3Z2JtVjNJR1ZvS0hNc0lHVXBPd3A5Q21aMWJtTjBhVzl1SUdzd0tITXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbFZwYm5ReE5rRjBkSEpwWW5WMFpTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlZjMlVnYm1WM0lGUklVa1ZGTGxWcGJuUXhOa0oxWm1abGNrRjBkSEpwWW5WMFpTZ3BJR2x1YzNSbFlXUXVJaWtzSUc1bGR5QlpjeWh6TENCbEtUc0tmUXBtZFc1amRHbHZiaUJITUNoekxDQmxLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUpiblF6TWtGMGRISnBZblYwWlNCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdibVYzSUZSSVVrVkZMa2x1ZERNeVFuVm1abVZ5UVhSMGNtbGlkWFJsS0NrZ2FXNXpkR1ZoWkM0aUtTd2dibVYzSUhSb0tITXNJR1VwT3dwOUNtWjFibU4wYVc5dUlGWXdLSE1zSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxWcGJuUXpNa0YwZEhKcFluVjBaU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUJWYzJVZ2JtVjNJRlJJVWtWRkxsVnBiblF6TWtKMVptWmxja0YwZEhKcFluVjBaU2dwSUdsdWMzUmxZV1F1SWlrc0lHNWxkeUJhY3loekxDQmxLVHNLZlFwbWRXNWpkR2x2YmlCWE1DaHpMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVHYkc5aGRETXlRWFIwY21saWRYUmxJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNCdVpYY2dWRWhTUlVVdVJteHZZWFF6TWtKMVptWmxja0YwZEhKcFluVjBaU2dwSUdsdWMzUmxZV1F1SWlrc0lHNWxkeUJrWlNoekxDQmxLVHNLZlFwbWRXNWpkR2x2YmlCeE1DaHpMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVHYkc5aGREWTBRWFIwY21saWRYUmxJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNCdVpYY2dWRWhTUlVVdVJteHZZWFEyTkVKMVptWmxja0YwZEhKcFluVjBaU2dwSUdsdWMzUmxZV1F1SWlrc0lHNWxkeUJwYUNoekxDQmxLVHNLZlFwRGRDNWpjbVZoZEdVZ1BTQm1kVzVqZEdsdmJpaHpMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNXNiMmNvSWxSSVVrVkZMa04xY25abExtTnlaV0YwWlNncElHaGhjeUJpWldWdUlHUmxjSEpsWTJGMFpXUWlLU3dnY3k1d2NtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0VOMExuQnliM1J2ZEhsd1pTa3NJSE11Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdjeXdnY3k1d2NtOTBiM1I1Y0dVdVoyVjBVRzlwYm5RZ1BTQmxMQ0J6T3dwOU93cG5jaTV3Y205MGIzUjVjR1V1Wm5KdmJWQnZhVzUwY3lBOUlHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsQmhkR2c2SUM1bWNtOXRVRzlwYm5SektDa2dhR0Z6SUdKbFpXNGdjbVZ1WVcxbFpDQjBieUF1YzJWMFJuSnZiVkJ2YVc1MGN5Z3BMaUlwTENCMGFHbHpMbk5sZEVaeWIyMVFiMmx1ZEhNb2N5azdDbjA3Q21aMWJtTjBhVzl1SUZnd0tITXBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrRjRhWE5JWld4d1pYSWdhR0Z6SUdKbFpXNGdjbVZ1WVcxbFpDQjBieUJVU0ZKRlJTNUJlR1Z6U0dWc2NHVnlMaUlwTENCdVpYY2djblVvY3lrN0NuMEtablZ1WTNScGIyNGdTakFvY3l3Z1pTa2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFtOTFibVJwYm1kQ2IzaElaV3h3WlhJZ2FHRnpJR0psWlc0Z1pHVndjbVZqWVhSbFpDNGdRM0psWVhScGJtY2dZU0JVU0ZKRlJTNUNiM2hJWld4d1pYSWdhVzV6ZEdWaFpDNGlLU3dnYm1WM0lHbDFLSE1zSUdVcE93cDlDbVoxYm1OMGFXOXVJRmt3S0hNc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrVmtaMlZ6U0dWc2NHVnlJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNCVVNGSkZSUzVGWkdkbGMwZGxiMjFsZEhKNUlHbHVjM1JsWVdRdUlpa3NJRzVsZHlCM2RDaHVaWGNnWDJFb2N5NW5aVzl0WlhSeWVTa3NJRzVsZHlCbWRDaDdDaUFnSUNBZ0lDQWdZMjlzYjNJNklHVWdJVDA5SUhadmFXUWdNQ0EvSUdVZ09pQXhOamMzTnpJeE5Rb2dJQ0FnZlNrcE93cDlDbTUxTG5CeWIzUnZkSGx3WlM1elpYUkRiMnh2Y25NZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMa2R5YVdSSVpXeHdaWEk2SUhObGRFTnZiRzl5Y3lncElHaGhjeUJpWldWdUlHUmxjSEpsWTJGMFpXUXNJSEJoYzNNZ2RHaGxiU0JwYmlCMGFHVWdZMjl1YzNSeWRXTjBiM0lnYVc1emRHVmhaQzRpS1RzS2ZUc0taWFV1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVUydGxiR1YwYjI1SVpXeHdaWEk2SUhWd1pHRjBaU2dwSUc1dklHeHZibWRsY2lCdVpXVmtjeUIwYnlCaVpTQmpZV3hzWldRdUlpazdDbjA3Q21aMWJtTjBhVzl1SUZvd0tITXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRwY21WbWNtRnRaVWhsYkhCbGNpQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlZjMlVnVkVoU1JVVXVWMmx5WldaeVlXMWxSMlZ2YldWMGNua2dhVzV6ZEdWaFpDNGlLU3dnYm1WM0lIZDBLRzVsZHlCRllTaHpMbWRsYjIxbGRISjVLU3dnYm1WM0lHWjBLSHNLSUNBZ0lDQWdJQ0JqYjJ4dmNqb2daU0FoUFQwZ2RtOXBaQ0F3SUQ4Z1pTQTZJREUyTnpjM01qRTFDaUFnSUNCOUtTazdDbjBLWW5RdWNISnZkRzkwZVhCbExtVjRkSEpoWTNSVmNteENZWE5sSUQwZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVRHOWhaR1Z5T2lBdVpYaDBjbUZqZEZWeWJFSmhjMlVvS1NCb1lYTWdZbVZsYmlCa1pYQnlaV05oZEdWa0xpQlZjMlVnVkVoU1JVVXVURzloWkdWeVZYUnBiSE11WlhoMGNtRmpkRlZ5YkVKaGMyVW9LU0JwYm5OMFpXRmtMaUlwTENCSGN5NWxlSFJ5WVdOMFZYSnNRbUZ6WlNoektUc0tmVHNLWW5RdVNHRnVaR3hsY25NZ1BTQjdDaUFnSUNCaFpHUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxreHZZV1JsY2pvZ1NHRnVaR3hsY25NdVlXUmtLQ2tnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVlhObElFeHZZV1JwYm1kTllXNWhaMlZ5TG1Ga1pFaGhibVJzWlhJb0tTQnBibk4wWldGa0xpSXBPd29nSUNBZ2ZTd0tJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVRHOWhaR1Z5T2lCSVlXNWtiR1Z5Y3k1blpYUW9LU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUJWYzJVZ1RHOWhaR2x1WjAxaGJtRm5aWEl1WjJWMFNHRnVaR3hsY2lncElHbHVjM1JsWVdRdUlpazdDaUFnSUNCOUNuMDdDbVoxYm1OMGFXOXVJQ1F3S0hNcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxoSVVreHZZV1JsY2lCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklGUklVa1ZGTGtacGJHVk1iMkZrWlhJdUlpa3NJRzVsZHlCWmRDaHpLVHNLZlFwbWRXNWpkR2x2YmlCcU1DaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUNhVzVoY25sVVpYaDBkWEpsVEc5aFpHVnlJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnVkVoU1JVVXVSR0YwWVZSbGVIUjFjbVZNYjJGa1pYSXVJaWtzSUc1bGR5Qk9hQ2h6S1RzS2ZRcHhhUzV3Y205MGIzUjVjR1V1WTJWdWRHVnlJRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UW05NE1qb2dMbU5sYm5SbGNpZ3BJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnTG1kbGRFTmxiblJsY2lncExpSXBMQ0IwYUdsekxtZGxkRU5sYm5SbGNpaHpLVHNLZlRzS2NXa3VjSEp2ZEc5MGVYQmxMbVZ0Y0hSNUlEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUNiM2d5T2lBdVpXMXdkSGtvS1NCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklDNXBjMFZ0Y0hSNUtDa3VJaWtzSUhSb2FYTXVhWE5GYlhCMGVTZ3BPd3A5T3dweGFTNXdjbTkwYjNSNWNHVXVhWE5KYm5SbGNuTmxZM1JwYjI1Q2IzZ2dQU0JtZFc1amRHbHZiaWh6S1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVDYjNneU9pQXVhWE5KYm5SbGNuTmxZM1JwYjI1Q2IzZ29LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUM1cGJuUmxjbk5sWTNSelFtOTRLQ2t1SWlrc0lIUm9hWE11YVc1MFpYSnpaV04wYzBKdmVDaHpLVHNLZlRzS2NXa3VjSEp2ZEc5MGVYQmxMbk5wZW1VZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUNiM2d5T2lBdWMybDZaU2dwSUdoaGN5QmlaV1Z1SUhKbGJtRnRaV1FnZEc4Z0xtZGxkRk5wZW1Vb0tTNGlLU3dnZEdocGN5NW5aWFJUYVhwbEtITXBPd3A5T3dwTWRDNXdjbTkwYjNSNWNHVXVZMlZ1ZEdWeUlEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRbTk0TXpvZ0xtTmxiblJsY2lncElHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbWRsZEVObGJuUmxjaWdwTGlJcExDQjBhR2x6TG1kbGRFTmxiblJsY2loektUc0tmVHNLVEhRdWNISnZkRzkwZVhCbExtVnRjSFI1SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1Q2IzZ3pPaUF1Wlcxd2RIa29LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUM1cGMwVnRjSFI1S0NrdUlpa3NJSFJvYVhNdWFYTkZiWEIwZVNncE93cDlPd3BNZEM1d2NtOTBiM1I1Y0dVdWFYTkpiblJsY25ObFkzUnBiMjVDYjNnZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUNiM2d6T2lBdWFYTkpiblJsY25ObFkzUnBiMjVDYjNnb0tTQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lIUnZJQzVwYm5SbGNuTmxZM1J6UW05NEtDa3VJaWtzSUhSb2FYTXVhVzUwWlhKelpXTjBjMEp2ZUNoektUc0tmVHNLVEhRdWNISnZkRzkwZVhCbExtbHpTVzUwWlhKelpXTjBhVzl1VTNCb1pYSmxJRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UW05NE16b2dMbWx6U1c1MFpYSnpaV04wYVc5dVUzQm9aWEpsS0NrZ2FHRnpJR0psWlc0Z2NtVnVZVzFsWkNCMGJ5QXVhVzUwWlhKelpXTjBjMU53YUdWeVpTZ3BMaUlwTENCMGFHbHpMbWx1ZEdWeWMyVmpkSE5UY0dobGNtVW9jeWs3Q24wN0NreDBMbkJ5YjNSdmRIbHdaUzV6YVhwbElEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRbTk0TXpvZ0xuTnBlbVVvS1NCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklDNW5aWFJUYVhwbEtDa3VJaWtzSUhSb2FYTXVaMlYwVTJsNlpTaHpLVHNLZlRzS1FXNHVjSEp2ZEc5MGVYQmxMbVZ0Y0hSNUlEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVRjR2hsY21VNklDNWxiWEIwZVNncElHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbWx6Ulcxd2RIa29LUzRpS1N3Z2RHaHBjeTVwYzBWdGNIUjVLQ2s3Q24wN0NrUnlMbkJ5YjNSdmRIbHdaUzV6WlhSR2NtOXRUV0YwY21sNElEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVSbkoxYzNSMWJUb2dMbk5sZEVaeWIyMU5ZWFJ5YVhnb0tTQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lIUnZJQzV6WlhSR2NtOXRVSEp2YW1WamRHbHZiazFoZEhKcGVDZ3BMaUlwTENCMGFHbHpMbk5sZEVaeWIyMVFjbTlxWldOMGFXOXVUV0YwY21sNEtITXBPd3A5T3dwTGFDNXdjbTkwYjNSNWNHVXVZMlZ1ZEdWeUlEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVUR2x1WlRNNklDNWpaVzUwWlhJb0tTQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lIUnZJQzVuWlhSRFpXNTBaWElvS1M0aUtTd2dkR2hwY3k1blpYUkRaVzUwWlhJb2N5azdDbjA3Q214MExuQnliM1J2ZEhsd1pTNW1iR0YwZEdWdVZHOUJjbkpoZVU5bVpuTmxkQ0E5SUdaMWJtTjBhVzl1S0hNc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrMWhkSEpwZURNNklDNW1iR0YwZEdWdVZHOUJjbkpoZVU5bVpuTmxkQ2dwSUdoaGN5QmlaV1Z1SUdSbGNISmxZMkYwWldRdUlGVnpaU0F1ZEc5QmNuSmhlU2dwSUdsdWMzUmxZV1F1SWlrc0lIUm9hWE11ZEc5QmNuSmhlU2h6TENCbEtUc0tmVHNLYkhRdWNISnZkRzkwZVhCbExtMTFiSFJwY0d4NVZtVmpkRzl5TXlBOUlHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrMWhkSEpwZURNNklDNXRkV3gwYVhCc2VWWmxZM1J2Y2pNb0tTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlZjMlVnZG1WamRHOXlMbUZ3Y0d4NVRXRjBjbWw0TXlnZ2JXRjBjbWw0SUNrZ2FXNXpkR1ZoWkM0aUtTd2djeTVoY0hCc2VVMWhkSEpwZURNb2RHaHBjeWs3Q24wN0NteDBMbkJ5YjNSdmRIbHdaUzV0ZFd4MGFYQnNlVlpsWTNSdmNqTkJjbkpoZVNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVUV0YwY21sNE16b2dMbTExYkhScGNHeDVWbVZqZEc5eU0wRnljbUY1S0NrZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0aUtUc0tmVHNLYkhRdWNISnZkRzkwZVhCbExtRndjR3g1Vkc5Q2RXWm1aWEpCZEhSeWFXSjFkR1VnUFNCbWRXNWpkR2x2YmloektTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TllYUnlhWGd6T2lBdVlYQndiSGxVYjBKMVptWmxja0YwZEhKcFluVjBaU2dwSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SUZWelpTQmhkSFJ5YVdKMWRHVXVZWEJ3YkhsTllYUnlhWGd6S0NCdFlYUnlhWGdnS1NCcGJuTjBaV0ZrTGlJcExDQnpMbUZ3Y0d4NVRXRjBjbWw0TXloMGFHbHpLVHNLZlRzS2JIUXVjSEp2ZEc5MGVYQmxMbUZ3Y0d4NVZHOVdaV04wYjNJelFYSnlZWGtnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxrMWhkSEpwZURNNklDNWhjSEJzZVZSdlZtVmpkRzl5TTBGeWNtRjVLQ2tnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRpS1RzS2ZUc0tiSFF1Y0hKdmRHOTBlWEJsTG1kbGRFbHVkbVZ5YzJVZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNU5ZWFJ5YVhnek9pQXVaMlYwU1c1MlpYSnpaU2dwSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SUZWelpTQnRZWFJ5YVhoSmJuWXVZMjl3ZVNnZ2JXRjBjbWw0SUNrdWFXNTJaWEowS0NrN0lHbHVjM1JsWVdRdUlpa3NJSFJvYVhNdVkyOXdlU2h6S1M1cGJuWmxjblFvS1RzS2ZUc0tjR1V1Y0hKdmRHOTBlWEJsTG1WNGRISmhZM1JRYjNOcGRHbHZiaUE5SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGsxaGRISnBlRFE2SUM1bGVIUnlZV04wVUc5emFYUnBiMjRvS1NCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklDNWpiM0I1VUc5emFYUnBiMjRvS1M0aUtTd2dkR2hwY3k1amIzQjVVRzl6YVhScGIyNG9jeWs3Q24wN0NuQmxMbkJ5YjNSdmRIbHdaUzVtYkdGMGRHVnVWRzlCY25KaGVVOW1abk5sZENBOUlHWjFibU4wYVc5dUtITXNJR1VwSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMazFoZEhKcGVEUTZJQzVtYkdGMGRHVnVWRzlCY25KaGVVOW1abk5sZENncElHaGhjeUJpWldWdUlHUmxjSEpsWTJGMFpXUXVJRlZ6WlNBdWRHOUJjbkpoZVNncElHbHVjM1JsWVdRdUlpa3NJSFJvYVhNdWRHOUJjbkpoZVNoekxDQmxLVHNLZlRzS2NHVXVjSEp2ZEc5MGVYQmxMbWRsZEZCdmMybDBhVzl1SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TllYUnlhWGcwT2lBdVoyVjBVRzl6YVhScGIyNG9LU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUJWYzJVZ1ZtVmpkRzl5TXk1elpYUkdjbTl0VFdGMGNtbDRVRzl6YVhScGIyNG9JRzFoZEhKcGVDQXBJR2x1YzNSbFlXUXVJaWtzSUc1bGR5Qk5LQ2t1YzJWMFJuSnZiVTFoZEhKcGVFTnZiSFZ0YmloMGFHbHpMQ0F6S1RzS2ZUc0tjR1V1Y0hKdmRHOTBlWEJsTG5ObGRGSnZkR0YwYVc5dVJuSnZiVkYxWVhSbGNtNXBiMjRnUFNCbWRXNWpkR2x2YmloektTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TllYUnlhWGcwT2lBdWMyVjBVbTkwWVhScGIyNUdjbTl0VVhWaGRHVnlibWx2YmlncElHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbTFoYTJWU2IzUmhkR2x2YmtaeWIyMVJkV0YwWlhKdWFXOXVLQ2t1SWlrc0lIUm9hWE11YldGclpWSnZkR0YwYVc5dVJuSnZiVkYxWVhSbGNtNXBiMjRvY3lrN0NuMDdDbkJsTG5CeWIzUnZkSGx3WlM1dGRXeDBhWEJzZVZSdlFYSnlZWGtnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVRXRjBjbWw0TkRvZ0xtMTFiSFJwY0d4NVZHOUJjbkpoZVNncElHaGhjeUJpWldWdUlISmxiVzkyWldRdUlpazdDbjA3Q25CbExuQnliM1J2ZEhsd1pTNXRkV3gwYVhCc2VWWmxZM1J2Y2pNZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNU5ZWFJ5YVhnME9pQXViWFZzZEdsd2JIbFdaV04wYjNJektDa2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWWE5sSUhabFkzUnZjaTVoY0hCc2VVMWhkSEpwZURRb0lHMWhkSEpwZUNBcElHbHVjM1JsWVdRdUlpa3NJSE11WVhCd2JIbE5ZWFJ5YVhnMEtIUm9hWE1wT3dwOU93cHdaUzV3Y205MGIzUjVjR1V1YlhWc2RHbHdiSGxXWldOMGIzSTBJRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VFdGMGNtbDRORG9nTG0xMWJIUnBjR3g1Vm1WamRHOXlOQ2dwSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SUZWelpTQjJaV04wYjNJdVlYQndiSGxOWVhSeWFYZzBLQ0J0WVhSeWFYZ2dLU0JwYm5OMFpXRmtMaUlwTENCekxtRndjR3g1VFdGMGNtbDROQ2gwYUdsektUc0tmVHNLY0dVdWNISnZkRzkwZVhCbExtMTFiSFJwY0d4NVZtVmpkRzl5TTBGeWNtRjVJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1TllYUnlhWGcwT2lBdWJYVnNkR2x3YkhsV1pXTjBiM0l6UVhKeVlYa29LU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUlwT3dwOU93cHdaUzV3Y205MGIzUjVjR1V1Y205MFlYUmxRWGhwY3lBOUlHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVUV0YwY21sNE5Eb2dMbkp2ZEdGMFpVRjRhWE1vS1NCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdWbVZqZEc5eU15NTBjbUZ1YzJadmNtMUVhWEpsWTNScGIyNG9JRzFoZEhKcGVDQXBJR2x1YzNSbFlXUXVJaWtzSUhNdWRISmhibk5tYjNKdFJHbHlaV04wYVc5dUtIUm9hWE1wT3dwOU93cHdaUzV3Y205MGIzUjVjR1V1WTNKdmMzTldaV04wYjNJZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNU5ZWFJ5YVhnME9pQXVZM0p2YzNOV1pXTjBiM0lvS1NCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdkbVZqZEc5eUxtRndjR3g1VFdGMGNtbDROQ2dnYldGMGNtbDRJQ2tnYVc1emRHVmhaQzRpS1N3Z2N5NWhjSEJzZVUxaGRISnBlRFFvZEdocGN5azdDbjA3Q25CbExuQnliM1J2ZEhsd1pTNTBjbUZ1YzJ4aGRHVWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGsxaGRISnBlRFE2SUM1MGNtRnVjMnhoZEdVb0tTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpSXBPd3A5T3dwd1pTNXdjbTkwYjNSNWNHVXVjbTkwWVhSbFdDQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VFdGMGNtbDRORG9nTG5KdmRHRjBaVmdvS1NCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlJcE93cDlPd3B3WlM1d2NtOTBiM1I1Y0dVdWNtOTBZWFJsV1NBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVUV0YwY21sNE5Eb2dMbkp2ZEdGMFpWa29LU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUlwT3dwOU93cHdaUzV3Y205MGIzUjVjR1V1Y205MFlYUmxXaUE5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVRXRjBjbWw0TkRvZ0xuSnZkR0YwWlZvb0tTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpSXBPd3A5T3dwd1pTNXdjbTkwYjNSNWNHVXVjbTkwWVhSbFFubEJlR2x6SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNU5ZWFJ5YVhnME9pQXVjbTkwWVhSbFFubEJlR2x6S0NrZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0aUtUc0tmVHNLY0dVdWNISnZkRzkwZVhCbExtRndjR3g1Vkc5Q2RXWm1aWEpCZEhSeWFXSjFkR1VnUFNCbWRXNWpkR2x2YmloektTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TllYUnlhWGcwT2lBdVlYQndiSGxVYjBKMVptWmxja0YwZEhKcFluVjBaU2dwSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SUZWelpTQmhkSFJ5YVdKMWRHVXVZWEJ3YkhsTllYUnlhWGcwS0NCdFlYUnlhWGdnS1NCcGJuTjBaV0ZrTGlJcExDQnpMbUZ3Y0d4NVRXRjBjbWw0TkNoMGFHbHpLVHNLZlRzS2NHVXVjSEp2ZEc5MGVYQmxMbUZ3Y0d4NVZHOVdaV04wYjNJelFYSnlZWGtnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxrMWhkSEpwZURRNklDNWhjSEJzZVZSdlZtVmpkRzl5TTBGeWNtRjVLQ2tnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRpS1RzS2ZUc0tjR1V1Y0hKdmRHOTBlWEJsTG0xaGEyVkdjblZ6ZEhWdElEMGdablZ1WTNScGIyNG9jeXdnWlN3Z2RDd2diaXdnYVN3Z2Npa2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVRXRjBjbWw0TkRvZ0xtMWhhMlZHY25WemRIVnRLQ2tnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVlhObElDNXRZV3RsVUdWeWMzQmxZM1JwZG1Vb0lHeGxablFzSUhKcFoyaDBMQ0IwYjNBc0lHSnZkSFJ2YlN3Z2JtVmhjaXdnWm1GeUlDa2dhVzV6ZEdWaFpDNGlLU3dnZEdocGN5NXRZV3RsVUdWeWMzQmxZM1JwZG1Vb2N5d2daU3dnYml3Z2RDd2dhU3dnY2lrN0NuMDdDbkJsTG5CeWIzUnZkSGx3WlM1blpYUkpiblpsY25ObElEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVUV0YwY21sNE5Eb2dMbWRsZEVsdWRtVnljMlVvS1NCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdiV0YwY21sNFNXNTJMbU52Y0hrb0lHMWhkSEpwZUNBcExtbHVkbVZ5ZENncE95QnBibk4wWldGa0xpSXBMQ0IwYUdsekxtTnZjSGtvY3lrdWFXNTJaWEowS0NrN0NuMDdDbGQwTG5CeWIzUnZkSGx3WlM1cGMwbHVkR1Z5YzJWamRHbHZia3hwYm1VZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVFiR0Z1WlRvZ0xtbHpTVzUwWlhKelpXTjBhVzl1VEdsdVpTZ3BJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnTG1sdWRHVnljMlZqZEhOTWFXNWxLQ2t1SWlrc0lIUm9hWE11YVc1MFpYSnpaV04wYzB4cGJtVW9jeWs3Q24wN0NtZDBMbkJ5YjNSdmRIbHdaUzV0ZFd4MGFYQnNlVlpsWTNSdmNqTWdQU0JtZFc1amRHbHZiaWh6S1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVSZFdGMFpYSnVhVzl1T2lBdWJYVnNkR2x3YkhsV1pXTjBiM0l6S0NrZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1ZYTmxJR2x6SUc1dmR5QjJaV04wYjNJdVlYQndiSGxSZFdGMFpYSnVhVzl1S0NCeGRXRjBaWEp1YVc5dUlDa2dhVzV6ZEdWaFpDNGlLU3dnY3k1aGNIQnNlVkYxWVhSbGNtNXBiMjRvZEdocGN5azdDbjA3Q21kMExuQnliM1J2ZEhsd1pTNXBiblpsY25ObElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVJkV0YwWlhKdWFXOXVPaUF1YVc1MlpYSnpaU2dwSUdoaGN5QmlaV1Z1SUhKbGJtRnRaV1FnZEc4Z2FXNTJaWEowS0NrdUlpa3NJSFJvYVhNdWFXNTJaWEowS0NrN0NuMDdDa051TG5CeWIzUnZkSGx3WlM1cGMwbHVkR1Z5YzJWamRHbHZia0p2ZUNBOUlHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsSmhlVG9nTG1selNXNTBaWEp6WldOMGFXOXVRbTk0S0NrZ2FHRnpJR0psWlc0Z2NtVnVZVzFsWkNCMGJ5QXVhVzUwWlhKelpXTjBjMEp2ZUNncExpSXBMQ0IwYUdsekxtbHVkR1Z5YzJWamRITkNiM2dvY3lrN0NuMDdDa051TG5CeWIzUnZkSGx3WlM1cGMwbHVkR1Z5YzJWamRHbHZibEJzWVc1bElEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVVbUY1T2lBdWFYTkpiblJsY25ObFkzUnBiMjVRYkdGdVpTZ3BJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnTG1sdWRHVnljMlZqZEhOUWJHRnVaU2dwTGlJcExDQjBhR2x6TG1sdWRHVnljMlZqZEhOUWJHRnVaU2h6S1RzS2ZUc0tRMjR1Y0hKdmRHOTBlWEJsTG1selNXNTBaWEp6WldOMGFXOXVVM0JvWlhKbElEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVVbUY1T2lBdWFYTkpiblJsY25ObFkzUnBiMjVUY0dobGNtVW9LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUM1cGJuUmxjbk5sWTNSelUzQm9aWEpsS0NrdUlpa3NJSFJvYVhNdWFXNTBaWEp6WldOMGMxTndhR1Z5WlNoektUc0tmVHNLYm5RdWNISnZkRzkwZVhCbExtRnlaV0VnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxSeWFXRnVaMnhsT2lBdVlYSmxZU2dwSUdoaGN5QmlaV1Z1SUhKbGJtRnRaV1FnZEc4Z0xtZGxkRUZ5WldFb0tTNGlLU3dnZEdocGN5NW5aWFJCY21WaEtDazdDbjA3Q201MExuQnliM1J2ZEhsd1pTNWlZWEo1WTI5dmNtUkdjbTl0VUc5cGJuUWdQU0JtZFc1amRHbHZiaWh6TENCbEtTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1VWNtbGhibWRzWlRvZ0xtSmhjbmxqYjI5eVpFWnliMjFRYjJsdWRDZ3BJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnTG1kbGRFSmhjbmxqYjI5eVpDZ3BMaUlwTENCMGFHbHpMbWRsZEVKaGNubGpiMjl5WkNoekxDQmxLVHNLZlRzS2JuUXVjSEp2ZEc5MGVYQmxMbTFwWkhCdmFXNTBJRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VkhKcFlXNW5iR1U2SUM1dGFXUndiMmx1ZENncElHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbWRsZEUxcFpIQnZhVzUwS0NrdUlpa3NJSFJvYVhNdVoyVjBUV2xrY0c5cGJuUW9jeWs3Q24wN0NtNTBMbkJ5YjNSdmRIbHdaVzV2Y20xaGJDQTlJR1oxYm1OMGFXOXVLSE1wSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbFJ5YVdGdVoyeGxPaUF1Ym05eWJXRnNLQ2tnYUdGeklHSmxaVzRnY21WdVlXMWxaQ0IwYnlBdVoyVjBUbTl5YldGc0tDa3VJaWtzSUhSb2FYTXVaMlYwVG05eWJXRnNLSE1wT3dwOU93cHVkQzV3Y205MGIzUjVjR1V1Y0d4aGJtVWdQU0JtZFc1amRHbHZiaWh6S1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVVY21saGJtZHNaVG9nTG5Cc1lXNWxLQ2tnYUdGeklHSmxaVzRnY21WdVlXMWxaQ0IwYnlBdVoyVjBVR3hoYm1Vb0tTNGlLU3dnZEdocGN5NW5aWFJRYkdGdVpTaHpLVHNLZlRzS2JuUXVZbUZ5ZVdOdmIzSmtSbkp2YlZCdmFXNTBJRDBnWm5WdVkzUnBiMjRvY3l3Z1pTd2dkQ3dnYml3Z2FTa2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVZISnBZVzVuYkdVNklDNWlZWEo1WTI5dmNtUkdjbTl0VUc5cGJuUW9LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUM1blpYUkNZWEo1WTI5dmNtUW9LUzRpS1N3Z2JuUXVaMlYwUW1GeWVXTnZiM0prS0hNc0lHVXNJSFFzSUc0c0lHa3BPd3A5T3dwdWRDNXViM0p0WVd3Z1BTQm1kVzVqZEdsdmJpaHpMQ0JsTENCMExDQnVLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVVjbWxoYm1kc1pUb2dMbTV2Y20xaGJDZ3BJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnTG1kbGRFNXZjbTFoYkNncExpSXBMQ0J1ZEM1blpYUk9iM0p0WVd3b2N5d2daU3dnZEN3Z2JpazdDbjA3Q2xoMExuQnliM1J2ZEhsd1pTNWxlSFJ5WVdOMFFXeHNVRzlwYm5SeklEMGdablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVVMmhoY0dVNklDNWxlSFJ5WVdOMFFXeHNVRzlwYm5SektDa2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWWE5sSUM1bGVIUnlZV04wVUc5cGJuUnpLQ2tnYVc1emRHVmhaQzRpS1N3Z2RHaHBjeTVsZUhSeVlXTjBVRzlwYm5SektITXBPd3A5T3dwWWRDNXdjbTkwYjNSNWNHVXVaWGgwY25Wa1pTQTlJR1oxYm1OMGFXOXVLSE1wSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbE5vWVhCbE9pQXVaWGgwY25Wa1pTZ3BJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNCRmVIUnlkV1JsUjJWdmJXVjBjbmtvS1NCcGJuTjBaV0ZrTGlJcExDQnVaWGNnYkc0b2RHaHBjeXdnY3lrN0NuMDdDbGgwTG5CeWIzUnZkSGx3WlM1dFlXdGxSMlZ2YldWMGNua2dQU0JtZFc1amRHbHZiaWh6S1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVUYUdGd1pUb2dMbTFoYTJWSFpXOXRaWFJ5ZVNncElHaGhjeUJpWldWdUlISmxiVzkyWldRdUlGVnpaU0JUYUdGd1pVZGxiMjFsZEhKNUtDa2dhVzV6ZEdWaFpDNGlLU3dnYm1WM0lFUnBLSFJvYVhNc0lITXBPd3A5T3dwWUxuQnliM1J2ZEhsd1pTNW1jbTl0UVhSMGNtbGlkWFJsSUQwZ1puVnVZM1JwYjI0b2N5d2daU3dnZENrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1Vm1WamRHOXlNam9nTG1aeWIyMUJkSFJ5YVdKMWRHVW9LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUM1bWNtOXRRblZtWm1WeVFYUjBjbWxpZFhSbEtDa3VJaWtzSUhSb2FYTXVabkp2YlVKMVptWmxja0YwZEhKcFluVjBaU2h6TENCbExDQjBLVHNLZlRzS1dDNXdjbTkwYjNSNWNHVXVaR2x6ZEdGdVkyVlViMDFoYm1oaGRIUmhiaUE5SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxabFkzUnZjakk2SUM1a2FYTjBZVzVqWlZSdlRXRnVhR0YwZEdGdUtDa2dhR0Z6SUdKbFpXNGdjbVZ1WVcxbFpDQjBieUF1YldGdWFHRjBkR0Z1UkdsemRHRnVZMlZVYnlncExpSXBMQ0IwYUdsekxtMWhibWhoZEhSaGJrUnBjM1JoYm1ObFZHOG9jeWs3Q24wN0NsZ3VjSEp2ZEc5MGVYQmxMbXhsYm1kMGFFMWhibWhoZEhSaGJpQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWbVZqZEc5eU1qb2dMbXhsYm1kMGFFMWhibWhoZEhSaGJpZ3BJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnTG0xaGJtaGhkSFJoYmt4bGJtZDBhQ2dwTGlJcExDQjBhR2x6TG0xaGJtaGhkSFJoYmt4bGJtZDBhQ2dwT3dwOU93cE5MbkJ5YjNSdmRIbHdaUzV6WlhSRmRXeGxja1p5YjIxU2IzUmhkR2x2YmsxaGRISnBlQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVZtVmpkRzl5TXpvZ0xuTmxkRVYxYkdWeVJuSnZiVkp2ZEdGMGFXOXVUV0YwY21sNEtDa2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWWE5sSUVWMWJHVnlMbk5sZEVaeWIyMVNiM1JoZEdsdmJrMWhkSEpwZUNncElHbHVjM1JsWVdRdUlpazdDbjA3Q2swdWNISnZkRzkwZVhCbExuTmxkRVYxYkdWeVJuSnZiVkYxWVhSbGNtNXBiMjRnUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsWmxZM1J2Y2pNNklDNXpaWFJGZFd4bGNrWnliMjFSZFdGMFpYSnVhVzl1S0NrZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1ZYTmxJRVYxYkdWeUxuTmxkRVp5YjIxUmRXRjBaWEp1YVc5dUtDa2dhVzV6ZEdWaFpDNGlLVHNLZlRzS1RTNXdjbTkwYjNSNWNHVXVaMlYwVUc5emFYUnBiMjVHY205dFRXRjBjbWw0SUQwZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVZtVmpkRzl5TXpvZ0xtZGxkRkJ2YzJsMGFXOXVSbkp2YlUxaGRISnBlQ2dwSUdoaGN5QmlaV1Z1SUhKbGJtRnRaV1FnZEc4Z0xuTmxkRVp5YjIxTllYUnlhWGhRYjNOcGRHbHZiaWdwTGlJcExDQjBhR2x6TG5ObGRFWnliMjFOWVhSeWFYaFFiM05wZEdsdmJpaHpLVHNLZlRzS1RTNXdjbTkwYjNSNWNHVXVaMlYwVTJOaGJHVkdjbTl0VFdGMGNtbDRJRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1Vm1WamRHOXlNem9nTG1kbGRGTmpZV3hsUm5KdmJVMWhkSEpwZUNncElHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbk5sZEVaeWIyMU5ZWFJ5YVhoVFkyRnNaU2dwTGlJcExDQjBhR2x6TG5ObGRFWnliMjFOWVhSeWFYaFRZMkZzWlNoektUc0tmVHNLVFM1d2NtOTBiM1I1Y0dVdVoyVjBRMjlzZFcxdVJuSnZiVTFoZEhKcGVDQTlJR1oxYm1OMGFXOXVLSE1zSUdVcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxabFkzUnZjak02SUM1blpYUkRiMngxYlc1R2NtOXRUV0YwY21sNEtDa2dhR0Z6SUdKbFpXNGdjbVZ1WVcxbFpDQjBieUF1YzJWMFJuSnZiVTFoZEhKcGVFTnZiSFZ0YmlncExpSXBMQ0IwYUdsekxuTmxkRVp5YjIxTllYUnlhWGhEYjJ4MWJXNG9aU3dnY3lrN0NuMDdDazB1Y0hKdmRHOTBlWEJsTG1Gd2NHeDVVSEp2YW1WamRHbHZiaUE5SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxabFkzUnZjak02SUM1aGNIQnNlVkJ5YjJwbFkzUnBiMjRvS1NCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdMbUZ3Y0d4NVRXRjBjbWw0TkNnZ2JTQXBJR2x1YzNSbFlXUXVJaWtzSUhSb2FYTXVZWEJ3YkhsTllYUnlhWGcwS0hNcE93cDlPd3BOTG5CeWIzUnZkSGx3WlM1bWNtOXRRWFIwY21saWRYUmxJRDBnWm5WdVkzUnBiMjRvY3l3Z1pTd2dkQ2tnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWbVZqZEc5eU16b2dMbVp5YjIxQmRIUnlhV0oxZEdVb0tTQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lIUnZJQzVtY205dFFuVm1abVZ5UVhSMGNtbGlkWFJsS0NrdUlpa3NJSFJvYVhNdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTaHpMQ0JsTENCMEtUc0tmVHNLVFM1d2NtOTBiM1I1Y0dVdVpHbHpkR0Z1WTJWVWIwMWhibWhoZEhSaGJpQTlJR1oxYm1OMGFXOXVLSE1wSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbFpsWTNSdmNqTTZJQzVrYVhOMFlXNWpaVlJ2VFdGdWFHRjBkR0Z1S0NrZ2FHRnpJR0psWlc0Z2NtVnVZVzFsWkNCMGJ5QXViV0Z1YUdGMGRHRnVSR2x6ZEdGdVkyVlVieWdwTGlJcExDQjBhR2x6TG0xaGJtaGhkSFJoYmtScGMzUmhibU5sVkc4b2N5azdDbjA3Q2swdWNISnZkRzkwZVhCbExteGxibWQwYUUxaGJtaGhkSFJoYmlBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVZtVmpkRzl5TXpvZ0xteGxibWQwYUUxaGJtaGhkSFJoYmlncElHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbTFoYm1oaGRIUmhia3hsYm1kMGFDZ3BMaUlwTENCMGFHbHpMbTFoYm1oaGRIUmhia3hsYm1kMGFDZ3BPd3A5T3dwV1pTNXdjbTkwYjNSNWNHVXVabkp2YlVGMGRISnBZblYwWlNBOUlHWjFibU4wYVc5dUtITXNJR1VzSUhRcElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxabFkzUnZjalE2SUM1bWNtOXRRWFIwY21saWRYUmxLQ2tnYUdGeklHSmxaVzRnY21WdVlXMWxaQ0IwYnlBdVpuSnZiVUoxWm1abGNrRjBkSEpwWW5WMFpTZ3BMaUlwTENCMGFHbHpMbVp5YjIxQ2RXWm1aWEpCZEhSeWFXSjFkR1VvY3l3Z1pTd2dkQ2s3Q24wN0NsWmxMbkJ5YjNSdmRIbHdaUzVzWlc1bmRHaE5ZVzVvWVhSMFlXNGdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbFpsWTNSdmNqUTZJQzVzWlc1bmRHaE5ZVzVvWVhSMFlXNG9LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUM1dFlXNW9ZWFIwWVc1TVpXNW5kR2dvS1M0aUtTd2dkR2hwY3k1dFlXNW9ZWFIwWVc1TVpXNW5kR2dvS1RzS2ZUc0tUbVV1Y0hKdmRHOTBlWEJsTG1kbGRFTm9hV3hrUW5sT1lXMWxJRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VDJKcVpXTjBNMFE2SUM1blpYUkRhR2xzWkVKNVRtRnRaU2dwSUdoaGN5QmlaV1Z1SUhKbGJtRnRaV1FnZEc4Z0xtZGxkRTlpYW1WamRFSjVUbUZ0WlNncExpSXBMQ0IwYUdsekxtZGxkRTlpYW1WamRFSjVUbUZ0WlNoektUc0tmVHNLVG1VdWNISnZkRzkwZVhCbExuSmxibVJsY2tSbGNIUm9JRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGs5aWFtVmpkRE5FT2lBdWNtVnVaR1Z5UkdWd2RHZ2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWWE5sSUM1eVpXNWtaWEpQY21SbGNpd2dhVzV6ZEdWaFpDNGlLVHNLZlRzS1RtVXVjSEp2ZEc5MGVYQmxMblJ5WVc1emJHRjBaU0E5SUdaMWJtTjBhVzl1S0hNc0lHVXBJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrOWlhbVZqZERORU9pQXVkSEpoYm5Oc1lYUmxLQ2tnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVlhObElDNTBjbUZ1YzJ4aGRHVlBia0Y0YVhNb0lHRjRhWE1zSUdScGMzUmhibU5sSUNrZ2FXNXpkR1ZoWkM0aUtTd2dkR2hwY3k1MGNtRnVjMnhoZEdWUGJrRjRhWE1vWlN3Z2N5azdDbjA3Q2s1bExuQnliM1J2ZEhsd1pTNW5aWFJYYjNKc1pGSnZkR0YwYVc5dUlEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVQWW1wbFkzUXpSRG9nTG1kbGRGZHZjbXhrVW05MFlYUnBiMjRvS1NCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdWRWhTUlVVdVQySnFaV04wTTBRdVoyVjBWMjl5YkdSUmRXRjBaWEp1YVc5dUtDQjBZWEpuWlhRZ0tTQnBibk4wWldGa0xpSXBPd3A5T3dwT1pTNXdjbTkwYjNSNWNHVXVZWEJ3YkhsTllYUnlhWGdnUFNCbWRXNWpkR2x2YmloektTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1UFltcGxZM1F6UkRvZ0xtRndjR3g1VFdGMGNtbDRLQ2tnYUdGeklHSmxaVzRnY21WdVlXMWxaQ0IwYnlBdVlYQndiSGxOWVhSeWFYZzBLQ2t1SWlrc0lIUm9hWE11WVhCd2JIbE5ZWFJ5YVhnMEtITXBPd3A5T3dwUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhPWlM1d2NtOTBiM1I1Y0dVc0lIc0tJQ0FnSUdWMWJHVnlUM0prWlhJNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVQWW1wbFkzUXpSRG9nTG1WMWJHVnlUM0prWlhJZ2FYTWdibTkzSUM1eWIzUmhkR2x2Ymk1dmNtUmxjaTRpS1N3Z2RHaHBjeTV5YjNSaGRHbHZiaTV2Y21SbGNqc0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrOWlhbVZqZERORU9pQXVaWFZzWlhKUGNtUmxjaUJwY3lCdWIzY2dMbkp2ZEdGMGFXOXVMbTl5WkdWeUxpSXBMQ0IwYUdsekxuSnZkR0YwYVc5dUxtOXlaR1Z5SUQwZ2N6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnZFhObFVYVmhkR1Z5Ym1sdmJqb2dld29nSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVQySnFaV04wTTBRNklDNTFjMlZSZFdGMFpYSnVhVzl1SUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SUZSb1pTQnNhV0p5WVhKNUlHNXZkeUIxYzJWeklIRjFZWFJsY201cGIyNXpJR0o1SUdSbFptRjFiSFF1SWlrN0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGs5aWFtVmpkRE5FT2lBdWRYTmxVWFZoZEdWeWJtbHZiaUJvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUJVYUdVZ2JHbGljbUZ5ZVNCdWIzY2dkWE5sY3lCeGRXRjBaWEp1YVc5dWN5QmllU0JrWldaaGRXeDBMaUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlNrN0NuTjBMbkJ5YjNSdmRIbHdaUzV6WlhSRWNtRjNUVzlrWlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVUV1Z6YURvZ0xuTmxkRVJ5WVhkTmIyUmxLQ2tnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVkdobElISmxibVJsY21WeUlHNXZkeUJoYkhkaGVYTWdZWE56ZFcxbGN5QlVTRkpGUlM1VWNtbGhibWRzWlhORWNtRjNUVzlrWlM0Z1ZISmhibk5tYjNKdElIbHZkWElnWjJWdmJXVjBjbmtnZG1saElFSjFabVpsY2tkbGIyMWxkSEo1VlhScGJITXVkRzlVY21saGJtZHNaWE5FY21GM1RXOWtaU2dwSUdsbUlHNWxZMlZ6YzJGeWVTNGlLVHNLZlRzS1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUnBaWE1vYzNRdWNISnZkRzkwZVhCbExDQjdDaUFnSUNCa2NtRjNUVzlrWlRvZ2V3b2dJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVOWlhOb09pQXVaSEpoZDAxdlpHVWdhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWR2hsSUhKbGJtUmxjbVZ5SUc1dmR5QmhiSGRoZVhNZ1lYTnpkVzFsY3lCVVNGSkZSUzVVY21saGJtZHNaWE5FY21GM1RXOWtaUzRpS1N3Z1JtUTdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNU5aWE5vT2lBdVpISmhkMDF2WkdVZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1ZHaGxJSEpsYm1SbGNtVnlJRzV2ZHlCaGJIZGhlWE1nWVhOemRXMWxjeUJVU0ZKRlJTNVVjbWxoYm1kc1pYTkVjbUYzVFc5a1pTNGdWSEpoYm5ObWIzSnRJSGx2ZFhJZ1oyVnZiV1YwY25rZ2RtbGhJRUoxWm1abGNrZGxiMjFsZEhKNVZYUnBiSE11ZEc5VWNtbGhibWRzWlhORWNtRjNUVzlrWlNncElHbG1JRzVsWTJWemMyRnllUzRpS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q24wcE93cHpieTV3Y205MGIzUjVjR1V1YVc1cGRFSnZibVZ6SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNVRhMmx1Ym1Wa1RXVnphRG9nYVc1cGRFSnZibVZ6S0NrZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0aUtUc0tmVHNLZFhRdWNISnZkRzkwZVhCbExuTmxkRXhsYm5NZ1BTQm1kVzVqZEdsdmJpaHpMQ0JsS1NCN0NpQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxCbGNuTndaV04wYVhabFEyRnRaWEpoTG5ObGRFeGxibk1nYVhNZ1pHVndjbVZqWVhSbFpDNGdWWE5sSUM1elpYUkdiMk5oYkV4bGJtZDBhQ0JoYm1RZ0xtWnBiRzFIWVhWblpTQm1iM0lnWVNCd2FHOTBiMmR5WVhCb2FXTWdjMlYwZFhBdUlpa3NJR1VnSVQwOUlIWnZhV1FnTUNBbUppQW9kR2hwY3k1bWFXeHRSMkYxWjJVZ1BTQmxLU3dnZEdocGN5NXpaWFJHYjJOaGJFeGxibWQwYUNoektUc0tmVHNLVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9RblF1Y0hKdmRHOTBlWEJsTENCN0NpQWdJQ0J2Ym14NVUyaGhaRzkzT2lCN0NpQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVNYVdkb2REb2dMbTl1YkhsVGFHRmtiM2NnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRpS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdjMmhoWkc5M1EyRnRaWEpoUm05Mk9pQjdDaUFnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmloektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVRHbG5hSFE2SUM1emFHRmtiM2REWVcxbGNtRkdiM1lnYVhNZ2JtOTNJQzV6YUdGa2IzY3VZMkZ0WlhKaExtWnZkaTRpS1N3Z2RHaHBjeTV6YUdGa2IzY3VZMkZ0WlhKaExtWnZkaUE5SUhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJSE5vWVdSdmQwTmhiV1Z5WVV4bFpuUTZJSHNLSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNU1hV2RvZERvZ0xuTm9ZV1J2ZDBOaGJXVnlZVXhsWm5RZ2FYTWdibTkzSUM1emFHRmtiM2N1WTJGdFpYSmhMbXhsWm5RdUlpa3NJSFJvYVhNdWMyaGhaRzkzTG1OaGJXVnlZUzVzWldaMElEMGdjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2MyaGhaRzkzUTJGdFpYSmhVbWxuYUhRNklIc0tJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TWFXZG9kRG9nTG5Ob1lXUnZkME5oYldWeVlWSnBaMmgwSUdseklHNXZkeUF1YzJoaFpHOTNMbU5oYldWeVlTNXlhV2RvZEM0aUtTd2dkR2hwY3k1emFHRmtiM2N1WTJGdFpYSmhMbkpwWjJoMElEMGdjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2MyaGhaRzkzUTJGdFpYSmhWRzl3T2lCN0NpQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaWh6S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VEdsbmFIUTZJQzV6YUdGa2IzZERZVzFsY21GVWIzQWdhWE1nYm05M0lDNXphR0ZrYjNjdVkyRnRaWEpoTG5SdmNDNGlLU3dnZEdocGN5NXphR0ZrYjNjdVkyRnRaWEpoTG5SdmNDQTlJSE03Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lITm9ZV1J2ZDBOaGJXVnlZVUp2ZEhSdmJUb2dld29nSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxreHBaMmgwT2lBdWMyaGhaRzkzUTJGdFpYSmhRbTkwZEc5dElHbHpJRzV2ZHlBdWMyaGhaRzkzTG1OaGJXVnlZUzVpYjNSMGIyMHVJaWtzSUhSb2FYTXVjMmhoWkc5M0xtTmhiV1Z5WVM1aWIzUjBiMjBnUFNCek93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0J6YUdGa2IzZERZVzFsY21GT1pXRnlPaUI3Q2lBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVUR2xuYUhRNklDNXphR0ZrYjNkRFlXMWxjbUZPWldGeUlHbHpJRzV2ZHlBdWMyaGhaRzkzTG1OaGJXVnlZUzV1WldGeUxpSXBMQ0IwYUdsekxuTm9ZV1J2ZHk1allXMWxjbUV1Ym1WaGNpQTlJSE03Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lITm9ZV1J2ZDBOaGJXVnlZVVpoY2pvZ2V3b2dJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGt4cFoyaDBPaUF1YzJoaFpHOTNRMkZ0WlhKaFJtRnlJR2x6SUc1dmR5QXVjMmhoWkc5M0xtTmhiV1Z5WVM1bVlYSXVJaWtzSUhSb2FYTXVjMmhoWkc5M0xtTmhiV1Z5WVM1bVlYSWdQU0J6T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBzQ2lBZ0lDQnphR0ZrYjNkRFlXMWxjbUZXYVhOcFlteGxPaUI3Q2lBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNU1hV2RvZERvZ0xuTm9ZV1J2ZDBOaGJXVnlZVlpwYzJsaWJHVWdhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWWE5sSUc1bGR5QlVTRkpGUlM1RFlXMWxjbUZJWld4d1pYSW9JR3hwWjJoMExuTm9ZV1J2ZHk1allXMWxjbUVnS1NCcGJuTjBaV0ZrTGlJcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0J6YUdGa2IzZENhV0Z6T2lCN0NpQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaWh6S1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VEdsbmFIUTZJQzV6YUdGa2IzZENhV0Z6SUdseklHNXZkeUF1YzJoaFpHOTNMbUpwWVhNdUlpa3NJSFJvYVhNdWMyaGhaRzkzTG1KcFlYTWdQU0J6T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBzQ2lBZ0lDQnphR0ZrYjNkRVlYSnJibVZ6Y3pvZ2V3b2dJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VEdsbmFIUTZJQzV6YUdGa2IzZEVZWEpyYm1WemN5Qm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMHNDaUFnSUNCemFHRmtiM2ROWVhCWGFXUjBhRG9nZXdvZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMa3hwWjJoME9pQXVjMmhoWkc5M1RXRndWMmxrZEdnZ2FYTWdibTkzSUM1emFHRmtiM2N1YldGd1UybDZaUzUzYVdSMGFDNGlLU3dnZEdocGN5NXphR0ZrYjNjdWJXRndVMmw2WlM1M2FXUjBhQ0E5SUhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJSE5vWVdSdmQwMWhjRWhsYVdkb2REb2dld29nSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxreHBaMmgwT2lBdWMyaGhaRzkzVFdGd1NHVnBaMmgwSUdseklHNXZkeUF1YzJoaFpHOTNMbTFoY0ZOcGVtVXVhR1ZwWjJoMExpSXBMQ0IwYUdsekxuTm9ZV1J2ZHk1dFlYQlRhWHBsTG1obGFXZG9kQ0E5SUhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFwOUtUc0tUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb1ZXVXVjSEp2ZEc5MGVYQmxMQ0I3Q2lBZ0lDQnNaVzVuZEdnNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVDZFdabVpYSkJkSFJ5YVdKMWRHVTZJQzVzWlc1bmRHZ2dhR0Z6SUdKbFpXNGdaR1Z3Y21WallYUmxaQzRnVlhObElDNWpiM1Z1ZENCcGJuTjBaV0ZrTGlJcExDQjBhR2x6TG1GeWNtRjVMbXhsYm1kMGFEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnWkhsdVlXMXBZem9nZXdvZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrSjFabVpsY2tGMGRISnBZblYwWlRvZ0xtUjVibUZ0YVdNZ2FHRnpJR0psWlc0Z1pHVndjbVZqWVhSbFpDNGdWWE5sSUM1MWMyRm5aU0JwYm5OMFpXRmtMaUlwTENCMGFHbHpMblZ6WVdkbElEMDlQU0IxY2pzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UW5WbVptVnlRWFIwY21saWRYUmxPaUF1WkhsdVlXMXBZeUJvWVhNZ1ltVmxiaUJrWlhCeVpXTmhkR1ZrTGlCVmMyVWdMblZ6WVdkbElHbHVjM1JsWVdRdUlpa3NJSFJvYVhNdWMyVjBWWE5oWjJVb2RYSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtmU2s3Q2xWbExuQnliM1J2ZEhsd1pTNXpaWFJFZVc1aGJXbGpJRDBnWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UW5WbVptVnlRWFIwY21saWRYUmxPaUF1YzJWMFJIbHVZVzFwWXlncElHaGhjeUJpWldWdUlHUmxjSEpsWTJGMFpXUXVJRlZ6WlNBdWMyVjBWWE5oWjJVb0tTQnBibk4wWldGa0xpSXBMQ0IwYUdsekxuTmxkRlZ6WVdkbEtITWdQVDA5SUNFd0lEOGdkWElnT2lCb2Npa3NJSFJvYVhNN0NuMDdDbFZsTG5CeWIzUnZkSGx3WlM1amIzQjVTVzVrYVdObGMwRnljbUY1SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ0pVU0ZKRlJTNUNkV1ptWlhKQmRIUnlhV0oxZEdVNklDNWpiM0I1U1c1a2FXTmxjMEZ5Y21GNUtDa2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGlLVHNLZlN3Z1ZXVXVjSEp2ZEc5MGVYQmxMbk5sZEVGeWNtRjVJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1Q2RXWm1aWEpCZEhSeWFXSjFkR1U2SUM1elpYUkJjbkpoZVNCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVmMyVWdRblZtWm1WeVIyVnZiV1YwY25rZ0xuTmxkRUYwZEhKcFluVjBaU0IwYnlCeVpYQnNZV05sTDNKbGMybDZaU0JoZEhSeWFXSjFkR1VnWW5WbVptVnljeUlwT3dwOU93cGZaUzV3Y205MGIzUjVjR1V1WVdSa1NXNWtaWGdnUFNCbWRXNWpkR2x2YmloektTQjdDaUFnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrSjFabVpsY2tkbGIyMWxkSEo1T2lBdVlXUmtTVzVrWlhnb0tTQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lIUnZJQzV6WlhSSmJtUmxlQ2dwTGlJcExDQjBhR2x6TG5ObGRFbHVaR1Y0S0hNcE93cDlPd3BmWlM1d2NtOTBiM1I1Y0dVdVlXUmtRWFIwY21saWRYUmxJRDBnWm5WdVkzUnBiMjRvY3l3Z1pTa2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFuVm1abVZ5UjJWdmJXVjBjbms2SUM1aFpHUkJkSFJ5YVdKMWRHVW9LU0JvWVhNZ1ltVmxiaUJ5Wlc1aGJXVmtJSFJ2SUM1elpYUkJkSFJ5YVdKMWRHVW9LUzRpS1N3Z0lTaGxJQ1ltSUdVdWFYTkNkV1ptWlhKQmRIUnlhV0oxZEdVcElDWW1JQ0VvWlNBbUppQmxMbWx6U1c1MFpYSnNaV0YyWldSQ2RXWm1aWEpCZEhSeWFXSjFkR1VwSUQ4Z0tHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRblZtWm1WeVIyVnZiV1YwY25rNklDNWhaR1JCZEhSeWFXSjFkR1VvS1NCdWIzY2daWGh3WldOMGN5QW9JRzVoYldVc0lHRjBkSEpwWW5WMFpTQXBMaUlwTENCMGFHbHpMbk5sZEVGMGRISnBZblYwWlNoekxDQnVaWGNnVldVb1lYSm5kVzFsYm5Seld6RmRMQ0JoY21kMWJXVnVkSE5iTWwwcEtTa2dPaUJ6SUQwOVBTQWlhVzVrWlhnaUlEOGdLR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNua3VZV1JrUVhSMGNtbGlkWFJsT2lCVmMyVWdMbk5sZEVsdVpHVjRLQ2tnWm05eUlHbHVaR1Y0SUdGMGRISnBZblYwWlM0aUtTd2dkR2hwY3k1elpYUkpibVJsZUNobEtTd2dkR2hwY3lrZ09pQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTaHpMQ0JsS1RzS2ZUc0tYMlV1Y0hKdmRHOTBlWEJsTG1Ga1pFUnlZWGREWVd4c0lEMGdablZ1WTNScGIyNG9jeXdnWlN3Z2RDa2dld29nSUNBZ2RDQWhQVDBnZG05cFpDQXdJQ1ltSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFuVm1abVZ5UjJWdmJXVjBjbms2SUM1aFpHUkVjbUYzUTJGc2JDZ3BJRzV2SUd4dmJtZGxjaUJ6ZFhCd2IzSjBjeUJwYm1SbGVFOW1abk5sZEM0aUtTd2dZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVDZFdabVpYSkhaVzl0WlhSeWVUb2dMbUZrWkVSeVlYZERZV3hzS0NrZ2FYTWdibTkzSUM1aFpHUkhjbTkxY0NncExpSXBMQ0IwYUdsekxtRmtaRWR5YjNWd0tITXNJR1VwT3dwOU93cGZaUzV3Y205MGIzUjVjR1V1WTJ4bFlYSkVjbUYzUTJGc2JITWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1UW5WbVptVnlSMlZ2YldWMGNuazZJQzVqYkdWaGNrUnlZWGREWVd4c2N5Z3BJR2x6SUc1dmR5QXVZMnhsWVhKSGNtOTFjSE1vS1M0aUtTd2dkR2hwY3k1amJHVmhja2R5YjNWd2N5Z3BPd3A5T3dwZlpTNXdjbTkwYjNSNWNHVXVZMjl0Y0hWMFpVOW1abk5sZEhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRblZtWm1WeVIyVnZiV1YwY25rNklDNWpiMjF3ZFhSbFQyWm1jMlYwY3lncElHaGhjeUJpWldWdUlISmxiVzkyWldRdUlpazdDbjA3Q2w5bExuQnliM1J2ZEhsd1pTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUNkV1ptWlhKSFpXOXRaWFJ5ZVRvZ0xuSmxiVzkyWlVGMGRISnBZblYwWlNncElHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbVJsYkdWMFpVRjBkSEpwWW5WMFpTZ3BMaUlwTENCMGFHbHpMbVJsYkdWMFpVRjBkSEpwWW5WMFpTaHpLVHNLZlRzS1gyVXVjSEp2ZEc5MGVYQmxMbUZ3Y0d4NVRXRjBjbWw0SUQwZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVFuVm1abVZ5UjJWdmJXVjBjbms2SUM1aGNIQnNlVTFoZEhKcGVDZ3BJR2hoY3lCaVpXVnVJSEpsYm1GdFpXUWdkRzhnTG1Gd2NHeDVUV0YwY21sNE5DZ3BMaUlwTENCMGFHbHpMbUZ3Y0d4NVRXRjBjbWw0TkNoektUc0tmVHNLVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9YMlV1Y0hKdmRHOTBlWEJsTENCN0NpQWdJQ0JrY21GM1kyRnNiSE02SUhzS0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVRblZtWm1WeVIyVnZiV1YwY25rNklDNWtjbUYzWTJGc2JITWdhR0Z6SUdKbFpXNGdjbVZ1WVcxbFpDQjBieUF1WjNKdmRYQnpMaUlwTENCMGFHbHpMbWR5YjNWd2N6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnYjJabWMyVjBjem9nZXdvZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrSjFabVpsY2tkbGIyMWxkSEo1T2lBdWIyWm1jMlYwY3lCb1lYTWdZbVZsYmlCeVpXNWhiV1ZrSUhSdklDNW5jbTkxY0hNdUlpa3NJSFJvYVhNdVozSnZkWEJ6T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlNrN0NpUnVMbkJ5YjNSdmRIbHdaUzV6WlhSRWVXNWhiV2xqSUQwZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVNXNTBaWEpzWldGMlpXUkNkV1ptWlhJNklDNXpaWFJFZVc1aGJXbGpLQ2tnYUdGeklHSmxaVzRnWkdWd2NtVmpZWFJsWkM0Z1ZYTmxJQzV6WlhSVmMyRm5aU2dwSUdsdWMzUmxZV1F1SWlrc0lIUm9hWE11YzJWMFZYTmhaMlVvY3lBOVBUMGdJVEFnUHlCMWNpQTZJR2h5S1N3Z2RHaHBjenNLZlRzS0pHNHVjSEp2ZEc5MGVYQmxMbk5sZEVGeWNtRjVJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1SmJuUmxjbXhsWVhabFpFSjFabVpsY2pvZ0xuTmxkRUZ5Y21GNUlHaGhjeUJpWldWdUlISmxiVzkyWldRdUlGVnpaU0JDZFdabVpYSkhaVzl0WlhSeWVTQXVjMlYwUVhSMGNtbGlkWFJsSUhSdklISmxjR3hoWTJVdmNtVnphWHBsSUdGMGRISnBZblYwWlNCaWRXWm1aWEp6SWlrN0NuMDdDbXh1TG5CeWIzUnZkSGx3WlM1blpYUkJjbkpoZVhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSWxSSVVrVkZMa1Y0ZEhKMVpHVkhaVzl0WlhSeWVUb2dMbWRsZEVGeWNtRjVjeWdwSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SWlrN0NuMDdDbXh1TG5CeWIzUnZkSGx3WlM1aFpHUlRhR0Z3WlV4cGMzUWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGtWNGRISjFaR1ZIWlc5dFpYUnllVG9nTG1Ga1pGTm9ZWEJsVEdsemRDZ3BJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJaWs3Q24wN0NteHVMbkJ5YjNSdmRIbHdaUzVoWkdSVGFHRndaU0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVJYaDBjblZrWlVkbGIyMWxkSEo1T2lBdVlXUmtVMmhoY0dVb0tTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpSXBPd3A5T3dwdWJ5NXdjbTkwYjNSNWNHVXVaR2x6Y0c5elpTQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnaVZFaFNSVVV1VTJObGJtVTZJQzVrYVhOd2IzTmxLQ2tnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRpS1RzS2ZUc0taMjh1Y0hKdmRHOTBlWEJsTG05dVZYQmtZWFJsSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1VmJtbG1iM0p0T2lBdWIyNVZjR1JoZEdVb0tTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlZjMlVnYjJKcVpXTjBMbTl1UW1WbWIzSmxVbVZ1WkdWeUtDa2dhVzV6ZEdWaFpDNGlLU3dnZEdocGN6c0tmVHNLVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9aSFF1Y0hKdmRHOTBlWEJsTENCN0NpQWdJQ0IzY21Gd1FYSnZkVzVrT2lCN0NpQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVOWVhSbGNtbGhiRG9nTG5keVlYQkJjbTkxYm1RZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0aUtUc0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVRXRjBaWEpwWVd3NklDNTNjbUZ3UVhKdmRXNWtJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJaWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lHOTJaWEprY21GM09pQjdDaUFnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1TllYUmxjbWxoYkRvZ0xtOTJaWEprY21GM0lHaGhjeUJpWldWdUlISmxiVzkyWldRdUlpazdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxrMWhkR1Z5YVdGc09pQXViM1psY21SeVlYY2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGlLVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2QzSmhjRkpIUWpvZ2V3b2dJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMazFoZEdWeWFXRnNPaUF1ZDNKaGNGSkhRaUJvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUlwTENCdVpYY2dZV1U3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lITm9ZV1JwYm1jNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM0aUlDc2dkR2hwY3k1MGVYQmxJQ3NnSWpvZ0xuTm9ZV1JwYm1jZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1ZYTmxJSFJvWlNCaWIyOXNaV0Z1SUM1bWJHRjBVMmhoWkdsdVp5QnBibk4wWldGa0xpSXBPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVJaUFySUhSb2FYTXVkSGx3WlNBcklDSTZJQzV6YUdGa2FXNW5JR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNCMGFHVWdZbTl2YkdWaGJpQXVabXhoZEZOb1lXUnBibWNnYVc1emRHVmhaQzRpS1N3Z2RHaHBjeTVtYkdGMFUyaGhaR2x1WnlBOUlITWdQVDA5SUd0ak93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0J6ZEdWdVkybHNUV0Z6YXpvZ2V3b2dJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMaUlnS3lCMGFHbHpMblI1Y0dVZ0t5QWlPaUF1YzNSbGJtTnBiRTFoYzJzZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1ZYTmxJQzV6ZEdWdVkybHNSblZ1WTAxaGMyc2dhVzV6ZEdWaFpDNGlLU3dnZEdocGN5NXpkR1Z1WTJsc1JuVnVZMDFoYzJzN0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM0aUlDc2dkR2hwY3k1MGVYQmxJQ3NnSWpvZ0xuTjBaVzVqYVd4TllYTnJJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRlZ6WlNBdWMzUmxibU5wYkVaMWJtTk5ZWE5ySUdsdWMzUmxZV1F1SWlrc0lIUm9hWE11YzNSbGJtTnBiRVoxYm1OTllYTnJJRDBnY3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdkbVZ5ZEdWNFZHRnVaMlZ1ZEhNNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGlJZ0t5QjBhR2x6TG5SNWNHVWdLeUFpT2lBdWRtVnlkR1Y0VkdGdVoyVnVkSE1nYUdGeklHSmxaVzRnY21WdGIzWmxaQzRpS1RzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1SWlBcklIUm9hWE11ZEhsd1pTQXJJQ0k2SUM1MlpYSjBaWGhVWVc1blpXNTBjeUJvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBLZlNrN0NrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0hOdUxuQnliM1J2ZEhsd1pTd2dld29nSUNBZ1pHVnlhWFpoZEdsMlpYTTZJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1VGFHRmtaWEpOWVhSbGNtbGhiRG9nTG1SbGNtbDJZWFJwZG1WeklHaGhjeUJpWldWdUlHMXZkbVZrSUhSdklDNWxlSFJsYm5OcGIyNXpMbVJsY21sMllYUnBkbVZ6TGlJcExDQjBhR2x6TG1WNGRHVnVjMmx2Ym5NdVpHVnlhWFpoZEdsMlpYTTdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNGdVMmhoWkdWeVRXRjBaWEpwWVd3NklDNWtaWEpwZG1GMGFYWmxjeUJvWVhNZ1ltVmxiaUJ0YjNabFpDQjBieUF1WlhoMFpXNXphVzl1Y3k1a1pYSnBkbUYwYVhabGN5NGlLU3dnZEdocGN5NWxlSFJsYm5OcGIyNXpMbVJsY21sMllYUnBkbVZ6SUQwZ2N6c0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUNuMHBPd3B4WlM1d2NtOTBiM1I1Y0dVdVkyeGxZWEpVWVhKblpYUWdQU0JtZFc1amRHbHZiaWh6TENCbExDQjBMQ0J1S1NCN0NpQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQzVqYkdWaGNsUmhjbWRsZENncElHaGhjeUJpWldWdUlHUmxjSEpsWTJGMFpXUXVJRlZ6WlNBdWMyVjBVbVZ1WkdWeVZHRnlaMlYwS0NrZ1lXNWtJQzVqYkdWaGNpZ3BJR2x1YzNSbFlXUXVJaWtzSUhSb2FYTXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtITXBMQ0IwYUdsekxtTnNaV0Z5S0dVc0lIUXNJRzRwT3dwOU93cHhaUzV3Y205MGIzUjVjR1V1WVc1cGJXRjBaU0E5SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nTG1GdWFXMWhkR1VvS1NCcGN5QnViM2NnTG5ObGRFRnVhVzFoZEdsdmJreHZiM0FvS1M0aUtTd2dkR2hwY3k1elpYUkJibWx0WVhScGIyNU1iMjl3S0hNcE93cDlPd3B4WlM1d2NtOTBiM1I1Y0dVdVoyVjBRM1Z5Y21WdWRGSmxibVJsY2xSaGNtZGxkQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dMbWRsZEVOMWNuSmxiblJTWlc1a1pYSlVZWEpuWlhRb0tTQnBjeUJ1YjNjZ0xtZGxkRkpsYm1SbGNsUmhjbWRsZENncExpSXBMQ0IwYUdsekxtZGxkRkpsYm1SbGNsUmhjbWRsZENncE93cDlPd3B4WlM1d2NtOTBiM1I1Y0dVdVoyVjBUV0Y0UVc1cGMyOTBjbTl3ZVNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nTG1kbGRFMWhlRUZ1YVhOdmRISnZjSGtvS1NCcGN5QnViM2NnTG1OaGNHRmlhV3hwZEdsbGN5NW5aWFJOWVhoQmJtbHpiM1J5YjNCNUtDa3VJaWtzSUhSb2FYTXVZMkZ3WVdKcGJHbDBhV1Z6TG1kbGRFMWhlRUZ1YVhOdmRISnZjSGtvS1RzS2ZUc0tjV1V1Y0hKdmRHOTBlWEJsTG1kbGRGQnlaV05wYzJsdmJpQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ0xtZGxkRkJ5WldOcGMybHZiaWdwSUdseklHNXZkeUF1WTJGd1lXSnBiR2wwYVdWekxuQnlaV05wYzJsdmJpNGlLU3dnZEdocGN5NWpZWEJoWW1sc2FYUnBaWE11Y0hKbFkybHphVzl1T3dwOU93cHhaUzV3Y205MGIzUjVjR1V1Y21WelpYUkhURk4wWVhSbElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lBdWNtVnpaWFJIVEZOMFlYUmxLQ2tnYVhNZ2JtOTNJQzV6ZEdGMFpTNXlaWE5sZENncExpSXBMQ0IwYUdsekxuTjBZWFJsTG5KbGMyVjBLQ2s3Q24wN0NuRmxMbkJ5YjNSdmRIbHdaUzV6ZFhCd2IzSjBjMFpzYjJGMFZHVjRkSFZ5WlhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUM1emRYQndiM0owYzBac2IyRjBWR1Y0ZEhWeVpYTW9LU0JwY3lCdWIzY2dMbVY0ZEdWdWMybHZibk11WjJWMEtDQW5UMFZUWDNSbGVIUjFjbVZmWm14dllYUW5JQ2t1SWlrc0lIUm9hWE11WlhoMFpXNXphVzl1Y3k1blpYUW9JazlGVTE5MFpYaDBkWEpsWDJac2IyRjBJaWs3Q24wN0NuRmxMbkJ5YjNSdmRIbHdaUzV6ZFhCd2IzSjBjMGhoYkdaR2JHOWhkRlJsZUhSMWNtVnpJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQXVjM1Z3Y0c5eWRITklZV3htUm14dllYUlVaWGgwZFhKbGN5Z3BJR2x6SUc1dmR5QXVaWGgwWlc1emFXOXVjeTVuWlhRb0lDZFBSVk5mZEdWNGRIVnlaVjlvWVd4bVgyWnNiMkYwSnlBcExpSXBMQ0IwYUdsekxtVjRkR1Z1YzJsdmJuTXVaMlYwS0NKUFJWTmZkR1Y0ZEhWeVpWOW9ZV3htWDJac2IyRjBJaWs3Q24wN0NuRmxMbkJ5YjNSdmRIbHdaUzV6ZFhCd2IzSjBjMU4wWVc1a1lYSmtSR1Z5YVhaaGRHbDJaWE1nUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQzV6ZFhCd2IzSjBjMU4wWVc1a1lYSmtSR1Z5YVhaaGRHbDJaWE1vS1NCcGN5QnViM2NnTG1WNGRHVnVjMmx2Ym5NdVoyVjBLQ0FuVDBWVFgzTjBZVzVrWVhKa1gyUmxjbWwyWVhScGRtVnpKeUFwTGlJcExDQjBhR2x6TG1WNGRHVnVjMmx2Ym5NdVoyVjBLQ0pQUlZOZmMzUmhibVJoY21SZlpHVnlhWFpoZEdsMlpYTWlLVHNLZlRzS2NXVXVjSEp2ZEc5MGVYQmxMbk4xY0hCdmNuUnpRMjl0Y0hKbGMzTmxaRlJsZUhSMWNtVlRNMVJESUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUF1YzNWd2NHOXlkSE5EYjIxd2NtVnpjMlZrVkdWNGRIVnlaVk16VkVNb0tTQnBjeUJ1YjNjZ0xtVjRkR1Z1YzJsdmJuTXVaMlYwS0NBblYwVkNSMHhmWTI5dGNISmxjM05sWkY5MFpYaDBkWEpsWDNNemRHTW5JQ2t1SWlrc0lIUm9hWE11WlhoMFpXNXphVzl1Y3k1blpYUW9JbGRGUWtkTVgyTnZiWEJ5WlhOelpXUmZkR1Y0ZEhWeVpWOXpNM1JqSWlrN0NuMDdDbkZsTG5CeWIzUnZkSGx3WlM1emRYQndiM0owYzBOdmJYQnlaWE56WldSVVpYaDBkWEpsVUZaU1ZFTWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklDNXpkWEJ3YjNKMGMwTnZiWEJ5WlhOelpXUlVaWGgwZFhKbFVGWlNWRU1vS1NCcGN5QnViM2NnTG1WNGRHVnVjMmx2Ym5NdVoyVjBLQ0FuVjBWQ1IweGZZMjl0Y0hKbGMzTmxaRjkwWlhoMGRYSmxYM0IyY25Sakp5QXBMaUlwTENCMGFHbHpMbVY0ZEdWdWMybHZibk11WjJWMEtDSlhSVUpIVEY5amIyMXdjbVZ6YzJWa1gzUmxlSFIxY21WZmNIWnlkR01pS1RzS2ZUc0tjV1V1Y0hKdmRHOTBlWEJsTG5OMWNIQnZjblJ6UW14bGJtUk5hVzVOWVhnZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUM1emRYQndiM0owYzBKc1pXNWtUV2x1VFdGNEtDa2dhWE1nYm05M0lDNWxlSFJsYm5OcGIyNXpMbWRsZENnZ0owVllWRjlpYkdWdVpGOXRhVzV0WVhnbklDa3VJaWtzSUhSb2FYTXVaWGgwWlc1emFXOXVjeTVuWlhRb0lrVllWRjlpYkdWdVpGOXRhVzV0WVhnaUtUc0tmVHNLY1dVdWNISnZkRzkwZVhCbExuTjFjSEJ2Y25SelZtVnlkR1Y0VkdWNGRIVnlaWE1nUFNCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQzV6ZFhCd2IzSjBjMVpsY25SbGVGUmxlSFIxY21WektDa2dhWE1nYm05M0lDNWpZWEJoWW1sc2FYUnBaWE11ZG1WeWRHVjRWR1Y0ZEhWeVpYTXVJaWtzSUhSb2FYTXVZMkZ3WVdKcGJHbDBhV1Z6TG5abGNuUmxlRlJsZUhSMWNtVnpPd3A5T3dweFpTNXdjbTkwYjNSNWNHVXVjM1Z3Y0c5eWRITkpibk4wWVc1alpXUkJjbkpoZVhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUM1emRYQndiM0owYzBsdWMzUmhibU5sWkVGeWNtRjVjeWdwSUdseklHNXZkeUF1WlhoMFpXNXphVzl1Y3k1blpYUW9JQ2RCVGtkTVJWOXBibk4wWVc1alpXUmZZWEp5WVhsekp5QXBMaUlwTENCMGFHbHpMbVY0ZEdWdWMybHZibk11WjJWMEtDSkJUa2RNUlY5cGJuTjBZVzVqWldSZllYSnlZWGx6SWlrN0NuMDdDbkZsTG5CeWIzUnZkSGx3WlM1bGJtRmliR1ZUWTJsemMyOXlWR1Z6ZENBOUlHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ0xtVnVZV0pzWlZOamFYTnpiM0pVWlhOMEtDa2dhWE1nYm05M0lDNXpaWFJUWTJsemMyOXlWR1Z6ZENncExpSXBMQ0IwYUdsekxuTmxkRk5qYVhOemIzSlVaWE4wS0hNcE93cDlPd3B4WlM1d2NtOTBiM1I1Y0dVdWFXNXBkRTFoZEdWeWFXRnNJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQzVwYm1sMFRXRjBaWEpwWVd3b0tTQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpSXBPd3A5T3dweFpTNXdjbTkwYjNSNWNHVXVZV1JrVUhKbFVHeDFaMmx1SUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUM1aFpHUlFjbVZRYkhWbmFXNG9LU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUlwT3dwOU93cHhaUzV3Y205MGIzUjVjR1V1WVdSa1VHOXpkRkJzZFdkcGJpQTlJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQXVZV1JrVUc5emRGQnNkV2RwYmlncElHaGhjeUJpWldWdUlISmxiVzkyWldRdUlpazdDbjA3Q25GbExuQnliM1J2ZEhsd1pTNTFjR1JoZEdWVGFHRmtiM2ROWVhBZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ0xuVndaR0YwWlZOb1lXUnZkMDFoY0NncElHaGhjeUJpWldWdUlISmxiVzkyWldRdUlpazdDbjA3Q25GbExuQnliM1J2ZEhsd1pTNXpaWFJHWVdObFEzVnNiR2x1WnlBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lBdWMyVjBSbUZqWlVOMWJHeHBibWNvS1NCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlJcE93cDlPd3B4WlM1d2NtOTBiM1I1Y0dVdVlXeHNiMk5VWlhoMGRYSmxWVzVwZENBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lBdVlXeHNiMk5VWlhoMGRYSmxWVzVwZENncElHaGhjeUJpWldWdUlISmxiVzkyWldRdUlpazdDbjA3Q25GbExuQnliM1J2ZEhsd1pTNXpaWFJVWlhoMGRYSmxJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQzV6WlhSVVpYaDBkWEpsS0NrZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0aUtUc0tmVHNLY1dVdWNISnZkRzkwZVhCbExuTmxkRlJsZUhSMWNtVXlSQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUF1YzJWMFZHVjRkSFZ5WlRKRUtDa2dhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGlLVHNLZlRzS2NXVXVjSEp2ZEc5MGVYQmxMbk5sZEZSbGVIUjFjbVZEZFdKbElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklDNXpaWFJVWlhoMGRYSmxRM1ZpWlNncElHaGhjeUJpWldWdUlISmxiVzkyWldRdUlpazdDbjA3Q25GbExuQnliM1J2ZEhsd1pTNW5aWFJCWTNScGRtVk5hWEJOWVhCTVpYWmxiQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dMbWRsZEVGamRHbDJaVTFwY0UxaGNFeGxkbVZzS0NrZ2FYTWdibTkzSUM1blpYUkJZM1JwZG1WTmFYQnRZWEJNWlhabGJDZ3BMaUlwTENCMGFHbHpMbWRsZEVGamRHbDJaVTFwY0cxaGNFeGxkbVZzS0NrN0NuMDdDazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektIRmxMbkJ5YjNSdmRIbHdaU3dnZXdvZ0lDQWdjMmhoWkc5M1RXRndSVzVoWW14bFpEb2dld29nSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTm9ZV1J2ZDAxaGNDNWxibUZpYkdWa093b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmloektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nTG5Ob1lXUnZkMDFoY0VWdVlXSnNaV1FnYVhNZ2JtOTNJQzV6YUdGa2IzZE5ZWEF1Wlc1aFlteGxaQzRpS1N3Z2RHaHBjeTV6YUdGa2IzZE5ZWEF1Wlc1aFlteGxaQ0E5SUhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJSE5vWVdSdmQwMWhjRlI1Y0dVNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emFHRmtiM2ROWVhBdWRIbHdaVHNLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNG9jeWtnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklDNXphR0ZrYjNkTllYQlVlWEJsSUdseklHNXZkeUF1YzJoaFpHOTNUV0Z3TG5SNWNHVXVJaWtzSUhSb2FYTXVjMmhoWkc5M1RXRndMblI1Y0dVZ1BTQnpPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMHNDaUFnSUNCemFHRmtiM2ROWVhCRGRXeHNSbUZqWlRvZ2V3b2dJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dMbk5vWVdSdmQwMWhjRU4xYkd4R1lXTmxJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRk5sZENCTllYUmxjbWxoYkM1emFHRmtiM2RUYVdSbElHbHVjM1JsWVdRdUlpazdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUM1emFHRmtiM2ROWVhCRGRXeHNSbUZqWlNCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlCVFpYUWdUV0YwWlhKcFlXd3VjMmhoWkc5M1UybGtaU0JwYm5OMFpXRmtMaUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBzQ2lBZ0lDQmpiMjUwWlhoME9pQjdDaUFnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dMbU52Ym5SbGVIUWdhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdWWE5sSUM1blpYUkRiMjUwWlhoMEtDa2dhVzV6ZEdWaFpDNGlLU3dnZEdocGN5NW5aWFJEYjI1MFpYaDBLQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lIWnlPaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nTG5aeUlHaGhjeUJpWldWdUlISmxibUZ0WldRZ2RHOGdMbmh5SWlrc0lIUm9hWE11ZUhJN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJR2RoYlcxaFNXNXdkWFE2SUhzS0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbVZ5T2lBdVoyRnRiV0ZKYm5CMWRDQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQlRaWFFnZEdobElHVnVZMjlrYVc1bklHWnZjaUIwWlhoMGRYSmxjeUIyYVdFZ1ZHVjRkSFZ5WlM1bGJtTnZaR2x1WnlCcGJuTjBaV0ZrTGlJcExDQWhNVHNLSUNBZ0lDQWdJQ0I5TEFvZ0lDQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ0xtZGhiVzFoU1c1d2RYUWdhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdVMlYwSUhSb1pTQmxibU52WkdsdVp5Qm1iM0lnZEdWNGRIVnlaWE1nZG1saElGUmxlSFIxY21VdVpXNWpiMlJwYm1jZ2FXNXpkR1ZoWkM0aUtUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNCOUxBb2dJQ0FnWjJGdGJXRlBkWFJ3ZFhRNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQXVaMkZ0YldGUGRYUndkWFFnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVTJWMElGZGxZa2RNVW1WdVpHVnlaWEl1YjNWMGNIVjBSVzVqYjJScGJtY2dhVzV6ZEdWaFpDNGlLU3dnSVRFN0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNtVnlPaUF1WjJGdGJXRlBkWFJ3ZFhRZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1UyVjBJRmRsWWtkTVVtVnVaR1Z5WlhJdWIzVjBjSFYwUlc1amIyUnBibWNnYVc1emRHVmhaQzRpS1N3Z2RHaHBjeTV2ZFhSd2RYUkZibU52WkdsdVp5QTlJSE1nUFQwOUlDRXdJRDhnVDJrZ09pQk9kRHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlMQW9nSUNBZ2RHOXVaVTFoY0hCcGJtZFhhR2wwWlZCdmFXNTBPaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSmxjam9nTG5SdmJtVk5ZWEJ3YVc1blYyaHBkR1ZRYjJsdWRDQm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpSXBMQ0F4T3dvZ0lDQWdJQ0FnSUgwc0NpQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQXVkRzl1WlUxaGNIQnBibWRYYUdsMFpWQnZhVzUwSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SWlrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJR2RoYlcxaFJtRmpkRzl5T2lCN0NpQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpsY2pvZ0xtZGhiVzFoUm1GamRHOXlJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJaWtzSURJN0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQzVuWVcxdFlVWmhZM1J2Y2lCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlJcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS2ZTazdDazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektIbG9MbkJ5YjNSdmRIbHdaU3dnZXdvZ0lDQWdZM1ZzYkVaaFkyVTZJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUM1emFHRmtiM2ROWVhBdVkzVnNiRVpoWTJVZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1UyVjBJRTFoZEdWeWFXRnNMbk5vWVdSdmQxTnBaR1VnYVc1emRHVmhaQzRpS1RzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKbGNqb2dMbk5vWVdSdmQwMWhjQzVqZFd4c1JtRmpaU0JvWVhNZ1ltVmxiaUJ5WlcxdmRtVmtMaUJUWlhRZ1RXRjBaWEpwWVd3dWMyaGhaRzkzVTJsa1pTQnBibk4wWldGa0xpSXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMHNDaUFnSUNCeVpXNWtaWEpTWlhabGNuTmxVMmxrWldRNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVpYSTZJQzV6YUdGa2IzZE5ZWEF1Y21WdVpHVnlVbVYyWlhKelpWTnBaR1ZrSUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1F1SUZObGRDQk5ZWFJsY21saGJDNXphR0ZrYjNkVGFXUmxJR2x1YzNSbFlXUXVJaWs3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxSSVVrVkZMbGRsWWtkTVVtVnVaR1Z5WlhJNklDNXphR0ZrYjNkTllYQXVjbVZ1WkdWeVVtVjJaWEp6WlZOcFpHVmtJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRk5sZENCTllYUmxjbWxoYkM1emFHRmtiM2RUYVdSbElHbHVjM1JsWVdRdUlpazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZTd0tJQ0FnSUhKbGJtUmxjbE5wYm1kc1pWTnBaR1ZrT2lCN0NpQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY21WeU9pQXVjMmhoWkc5M1RXRndMbkpsYm1SbGNsTnBibWRzWlZOcFpHVmtJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJRk5sZENCTllYUmxjbWxoYkM1emFHRmtiM2RUYVdSbElHbHVjM1JsWVdRdUlpazdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlaWEk2SUM1emFHRmtiM2ROWVhBdWNtVnVaR1Z5VTJsdVoyeGxVMmxrWldRZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1UyVjBJRTFoZEdWeWFXRnNMbk5vWVdSdmQxTnBaR1VnYVc1emRHVmhaQzRpS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q24wcE93cG1kVzVqZEdsdmJpQlJNQ2h6TENCbExDQjBLU0I3Q2lBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbFJoY21kbGRFTjFZbVVvSUhkcFpIUm9MQ0JvWldsbmFIUXNJRzl3ZEdsdmJuTWdLU0JwY3lCdWIzY2dWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwS0NCemFYcGxMQ0J2Y0hScGIyNXpJQ2t1SWlrc0lHNWxkeUJxY3loekxDQjBLVHNLZlFwUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhCZEM1d2NtOTBiM1I1Y0dVc0lIc0tJQ0FnSUhkeVlYQlRPaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSlVZWEpuWlhRNklDNTNjbUZ3VXlCcGN5QnViM2NnTG5SbGVIUjFjbVV1ZDNKaGNGTXVJaWtzSUhSb2FYTXVkR1Y0ZEhWeVpTNTNjbUZ3VXpzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwT2lBdWQzSmhjRk1nYVhNZ2JtOTNJQzUwWlhoMGRYSmxMbmR5WVhCVExpSXBMQ0IwYUdsekxuUmxlSFIxY21VdWQzSmhjRk1nUFNCek93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwc0NpQWdJQ0IzY21Gd1ZEb2dld29nSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwT2lBdWQzSmhjRlFnYVhNZ2JtOTNJQzUwWlhoMGRYSmxMbmR5WVhCVUxpSXBMQ0IwYUdsekxuUmxlSFIxY21VdWQzSmhjRlE3Q2lBZ0lDQWdJQ0FnZlN3S0lDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVLSE1wSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY2xSaGNtZGxkRG9nTG5keVlYQlVJR2x6SUc1dmR5QXVkR1Y0ZEhWeVpTNTNjbUZ3VkM0aUtTd2dkR2hwY3k1MFpYaDBkWEpsTG5keVlYQlVJRDBnY3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdiV0ZuUm1sc2RHVnlPaUI3Q2lBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSlVZWEpuWlhRNklDNXRZV2RHYVd4MFpYSWdhWE1nYm05M0lDNTBaWGgwZFhKbExtMWhaMFpwYkhSbGNpNGlLU3dnZEdocGN5NTBaWGgwZFhKbExtMWhaMFpwYkhSbGNqc0tJQ0FnSUNBZ0lDQjlMQW9nSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0b2N5a2dld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlWR0Z5WjJWME9pQXViV0ZuUm1sc2RHVnlJR2x6SUc1dmR5QXVkR1Y0ZEhWeVpTNXRZV2RHYVd4MFpYSXVJaWtzSUhSb2FYTXVkR1Y0ZEhWeVpTNXRZV2RHYVd4MFpYSWdQU0J6T3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBzQ2lBZ0lDQnRhVzVHYVd4MFpYSTZJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNsUmhjbWRsZERvZ0xtMXBia1pwYkhSbGNpQnBjeUJ1YjNjZ0xuUmxlSFIxY21VdWJXbHVSbWxzZEdWeUxpSXBMQ0IwYUdsekxuUmxlSFIxY21VdWJXbHVSbWxzZEdWeU93b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmloektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSlVZWEpuWlhRNklDNXRhVzVHYVd4MFpYSWdhWE1nYm05M0lDNTBaWGgwZFhKbExtMXBia1pwYkhSbGNpNGlLU3dnZEdocGN5NTBaWGgwZFhKbExtMXBia1pwYkhSbGNpQTlJSE03Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU3dLSUNBZ0lHRnVhWE52ZEhKdmNIazZJSHNLSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNsUmhjbWRsZERvZ0xtRnVhWE52ZEhKdmNIa2dhWE1nYm05M0lDNTBaWGgwZFhKbExtRnVhWE52ZEhKdmNIa3VJaWtzSUhSb2FYTXVkR1Y0ZEhWeVpTNWhibWx6YjNSeWIzQjVPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpVWVhKblpYUTZJQzVoYm1semIzUnliM0I1SUdseklHNXZkeUF1ZEdWNGRIVnlaUzVoYm1semIzUnliM0I1TGlJcExDQjBhR2x6TG5SbGVIUjFjbVV1WVc1cGMyOTBjbTl3ZVNBOUlITTdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZTd0tJQ0FnSUc5bVpuTmxkRG9nZXdvZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNXpiMnhsTG5kaGNtNG9JbFJJVWtWRkxsZGxZa2RNVW1WdVpHVnlWR0Z5WjJWME9pQXViMlptYzJWMElHbHpJRzV2ZHlBdWRHVjRkSFZ5WlM1dlptWnpaWFF1SWlrc0lIUm9hWE11ZEdWNGRIVnlaUzV2Wm1aelpYUTdDaUFnSUNBZ0lDQWdmU3dLSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbFJoY21kbGREb2dMbTltWm5ObGRDQnBjeUJ1YjNjZ0xuUmxlSFIxY21VdWIyWm1jMlYwTGlJcExDQjBhR2x6TG5SbGVIUjFjbVV1YjJabWMyVjBJRDBnY3pzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5TEFvZ0lDQWdjbVZ3WldGME9pQjdDaUFnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVkMkZ5YmlnaVZFaFNSVVV1VjJWaVIweFNaVzVrWlhKVVlYSm5aWFE2SUM1eVpYQmxZWFFnYVhNZ2JtOTNJQzUwWlhoMGRYSmxMbkpsY0dWaGRDNGlLU3dnZEdocGN5NTBaWGgwZFhKbExuSmxjR1ZoZERzS0lDQWdJQ0FnSUNCOUxBb2dJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRvY3lrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwT2lBdWNtVndaV0YwSUdseklHNXZkeUF1ZEdWNGRIVnlaUzV5WlhCbFlYUXVJaWtzSUhSb2FYTXVkR1Y0ZEhWeVpTNXlaWEJsWVhRZ1BTQnpPd29nSUNBZ0lDQWdJSDBLSUNBZ0lIMHNDaUFnSUNCbWIzSnRZWFE2SUhzS0lDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNVhaV0pIVEZKbGJtUmxjbFJoY21kbGREb2dMbVp2Y20xaGRDQnBjeUJ1YjNjZ0xuUmxlSFIxY21VdVptOXliV0YwTGlJcExDQjBhR2x6TG5SbGVIUjFjbVV1Wm05eWJXRjBPd29nSUNBZ0lDQWdJSDBzQ2lBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpaHpLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVWMlZpUjB4U1pXNWtaWEpVWVhKblpYUTZJQzVtYjNKdFlYUWdhWE1nYm05M0lDNTBaWGgwZFhKbExtWnZjbTFoZEM0aUtTd2dkR2hwY3k1MFpYaDBkWEpsTG1admNtMWhkQ0E5SUhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJSFI1Y0dVNklIc0tJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVYWldKSFRGSmxibVJsY2xSaGNtZGxkRG9nTG5SNWNHVWdhWE1nYm05M0lDNTBaWGgwZFhKbExuUjVjR1V1SWlrc0lIUm9hWE11ZEdWNGRIVnlaUzUwZVhCbE93b2dJQ0FnSUNBZ0lIMHNDaUFnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmloektTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVYyVmlSMHhTWlc1a1pYSlVZWEpuWlhRNklDNTBlWEJsSUdseklHNXZkeUF1ZEdWNGRIVnlaUzUwZVhCbExpSXBMQ0IwYUdsekxuUmxlSFIxY21VdWRIbHdaU0E5SUhNN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlN3S0lDQWdJR2RsYm1WeVlYUmxUV2x3YldGd2N6b2dld29nSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbmRoY200b0lsUklVa1ZGTGxkbFlrZE1VbVZ1WkdWeVZHRnlaMlYwT2lBdVoyVnVaWEpoZEdWTmFYQnRZWEJ6SUdseklHNXZkeUF1ZEdWNGRIVnlaUzVuWlc1bGNtRjBaVTFwY0cxaGNITXVJaWtzSUhSb2FYTXVkR1Y0ZEhWeVpTNW5aVzVsY21GMFpVMXBjRzFoY0hNN0NpQWdJQ0FnSUNBZ2ZTd0tJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1S0hNcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1WFpXSkhURkpsYm1SbGNsUmhjbWRsZERvZ0xtZGxibVZ5WVhSbFRXbHdiV0Z3Y3lCcGN5QnViM2NnTG5SbGVIUjFjbVV1WjJWdVpYSmhkR1ZOYVhCdFlYQnpMaUlwTENCMGFHbHpMblJsZUhSMWNtVXVaMlZ1WlhKaGRHVk5hWEJ0WVhCeklEMGdjenNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDbjBwT3dwYVlTNXdjbTkwYjNSNWNHVXViRzloWkNBOUlHWjFibU4wYVc5dUtITXBJSHNLSUNBZ0lHTnZibk52YkdVdWQyRnliaWdpVkVoU1JVVXVRWFZrYVc4NklDNXNiMkZrSUdoaGN5QmlaV1Z1SUdSbGNISmxZMkYwWldRdUlGVnpaU0JVU0ZKRlJTNUJkV1JwYjB4dllXUmxjaUJwYm5OMFpXRmtMaUlwT3dvZ0lDQWdiR1YwSUdVZ1BTQjBhR2x6T3dvZ0lDQWdjbVYwZFhKdUlHNWxkeUJyYUNncExteHZZV1FvY3l3Z1puVnVZM1JwYjI0b2Jpa2dld29nSUNBZ0lDQWdJR1V1YzJWMFFuVm1abVZ5S0c0cE93b2dJQ0FnZlNrc0lIUm9hWE03Q24wN0NuRm9MbkJ5YjNSdmRIbHdaUzVuWlhSRVlYUmhJRDBnWm5WdVkzUnBiMjRvS1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVCZFdScGIwRnVZV3g1YzJWeU9pQXVaMlYwUkdGMFlTZ3BJR2x6SUc1dmR5QXVaMlYwUm5KbGNYVmxibU41UkdGMFlTZ3BMaUlwTENCMGFHbHpMbWRsZEVaeVpYRjFaVzVqZVVSaGRHRW9LVHNLZlRzS0pITXVjSEp2ZEc5MGVYQmxMblZ3WkdGMFpVTjFZbVZOWVhBZ1BTQm1kVzVqZEdsdmJpaHpMQ0JsS1NCN0NpQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNTNZWEp1S0NKVVNGSkZSUzVEZFdKbFEyRnRaWEpoT2lBdWRYQmtZWFJsUTNWaVpVMWhjQ2dwSUdseklHNXZkeUF1ZFhCa1lYUmxLQ2t1SWlrc0lIUm9hWE11ZFhCa1lYUmxLSE1zSUdVcE93cDlPd29rY3k1d2NtOTBiM1I1Y0dVdVkyeGxZWElnUFNCbWRXNWpkR2x2YmloekxDQmxMQ0IwTENCdUtTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDSlVTRkpGUlM1RGRXSmxRMkZ0WlhKaE9pQXVZMnhsWVhJb0tTQnBjeUJ1YjNjZ0xuSmxibVJsY2xSaGNtZGxkQzVqYkdWaGNpZ3BMaUlwTENCMGFHbHpMbkpsYm1SbGNsUmhjbWRsZEM1amJHVmhjaWh6TENCbExDQjBMQ0J1S1RzS2ZUc0tXVzR1WTNKdmMzTlBjbWxuYVc0Z1BTQjJiMmxrSURBN0NsbHVMbXh2WVdSVVpYaDBkWEpsSUQwZ1puVnVZM1JwYjI0b2N5d2daU3dnZEN3Z2Jpa2dld29nSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ0pVU0ZKRlJTNUpiV0ZuWlZWMGFXeHpMbXh2WVdSVVpYaDBkWEpsSUdoaGN5QmlaV1Z1SUdSbGNISmxZMkYwWldRdUlGVnpaU0JVU0ZKRlJTNVVaWGgwZFhKbFRHOWhaR1Z5S0NrZ2FXNXpkR1ZoWkM0aUtUc0tJQ0FnSUd4bGRDQnBJRDBnYm1WM0lFSm9Pd29nSUNBZ2FTNXpaWFJEY205emMwOXlhV2RwYmloMGFHbHpMbU55YjNOelQzSnBaMmx1S1RzS0lDQWdJR3hsZENCeUlEMGdhUzVzYjJGa0tITXNJSFFzSUhadmFXUWdNQ3dnYmlrN0NpQWdJQ0J5WlhSMWNtNGdaU0FtSmlBb2NpNXRZWEJ3YVc1bklEMGdaU2tzSUhJN0NuMDdDbGx1TG14dllXUlVaWGgwZFhKbFEzVmlaU0E5SUdaMWJtTjBhVzl1S0hNc0lHVXNJSFFzSUc0cElIc0tJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWRWhTUlVVdVNXMWhaMlZWZEdsc2N5NXNiMkZrVkdWNGRIVnlaVU4xWW1VZ2FHRnpJR0psWlc0Z1pHVndjbVZqWVhSbFpDNGdWWE5sSUZSSVVrVkZMa04xWW1WVVpYaDBkWEpsVEc5aFpHVnlLQ2tnYVc1emRHVmhaQzRpS1RzS0lDQWdJR3hsZENCcElEMGdibVYzSUVab093b2dJQ0FnYVM1elpYUkRjbTl6YzA5eWFXZHBiaWgwYUdsekxtTnliM056VDNKcFoybHVLVHNLSUNBZ0lHeGxkQ0J5SUQwZ2FTNXNiMkZrS0hNc0lIUXNJSFp2YVdRZ01Dd2diaWs3Q2lBZ0lDQnlaWFIxY200Z1pTQW1KaUFvY2k1dFlYQndhVzVuSUQwZ1pTa3NJSEk3Q24wN0NsbHVMbXh2WVdSRGIyMXdjbVZ6YzJWa1ZHVjRkSFZ5WlNBOUlHWjFibU4wYVc5dUtDa2dld29nSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVTVzFoWjJWVmRHbHNjeTVzYjJGa1EyOXRjSEpsYzNObFpGUmxlSFIxY21VZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0Z1ZYTmxJRlJJVWtWRkxrUkVVMHh2WVdSbGNpQnBibk4wWldGa0xpSXBPd3A5T3dwWmJpNXNiMkZrUTI5dGNISmxjM05sWkZSbGVIUjFjbVZEZFdKbElEMGdablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NKVVNGSkZSUzVKYldGblpWVjBhV3h6TG14dllXUkRiMjF3Y21WemMyVmtWR1Y0ZEhWeVpVTjFZbVVnYUdGeklHSmxaVzRnY21WdGIzWmxaQzRnVlhObElGUklVa1ZGTGtSRVUweHZZV1JsY2lCcGJuTjBaV0ZrTGlJcE93cDlPd3BtZFc1amRHbHZiaUJMTUNncElIc0tJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxrTmhiblpoYzFKbGJtUmxjbVZ5SUdoaGN5QmlaV1Z1SUhKbGJXOTJaV1FpS1RzS2ZRcG1kVzVqZEdsdmJpQmxkaWdwSUhzS0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0lsUklVa1ZGTGtwVFQwNU1iMkZrWlhJZ2FHRnpJR0psWlc0Z2NtVnRiM1psWkM0aUtUc0tmUXAyWVhJZ2RIWWdQU0I3Q2lBZ0lDQmpjbVZoZEdWTmRXeDBhVTFoZEdWeWFXRnNUMkpxWldOME9pQm1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1VFkyVnVaVlYwYVd4eklHaGhjeUJpWldWdUlHMXZkbVZrSUhSdklDOWxlR0Z0Y0d4bGN5OXFjMjB2ZFhScGJITXZVMk5sYm1WVmRHbHNjeTVxY3lJcE93b2dJQ0FnZlN3S0lDQWdJR1JsZEdGamFEb2dablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVUyTmxibVZWZEdsc2N5Qm9ZWE1nWW1WbGJpQnRiM1psWkNCMGJ5QXZaWGhoYlhCc1pYTXZhbk50TDNWMGFXeHpMMU5qWlc1bFZYUnBiSE11YW5NaUtUc0tJQ0FnSUgwc0NpQWdJQ0JoZEhSaFkyZzZJR1oxYm1OMGFXOXVLQ2tnZXdvZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9JbFJJVWtWRkxsTmpaVzVsVlhScGJITWdhR0Z6SUdKbFpXNGdiVzkyWldRZ2RHOGdMMlY0WVcxd2JHVnpMMnB6YlM5MWRHbHNjeTlUWTJWdVpWVjBhV3h6TG1weklpazdDaUFnSUNCOUNuMDdDbVoxYm1OMGFXOXVJRzUyS0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVRHVnVjMFpzWVhKbElHaGhjeUJpWldWdUlHMXZkbVZrSUhSdklDOWxlR0Z0Y0d4bGN5OXFjMjB2YjJKcVpXTjBjeTlNWlc1elpteGhjbVV1YW5NaUtUc0tmUXBtZFc1amRHbHZiaUJwZGlncElIc0tJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbVZ5Y205eUtDSlVTRkpGUlM1UVlYSmhiV1YwY21salIyVnZiV1YwY25rZ2FHRnpJR0psWlc0Z2JXOTJaV1FnZEc4Z0wyVjRZVzF3YkdWekwycHpiUzluWlc5dFpYUnlhV1Z6TDFCaGNtRnRaWFJ5YVdOSFpXOXRaWFJ5ZVM1cWN5SXBMQ0J1WlhjZ1gyVTdDbjBLWm5WdVkzUnBiMjRnY25Zb0tTQjdDaUFnSUNCeVpYUjFjbTRnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVZHVjRkRWRsYjIxbGRISjVJR2hoY3lCaVpXVnVJRzF2ZG1Wa0lIUnZJQzlsZUdGdGNHeGxjeTlxYzIwdloyVnZiV1YwY21sbGN5OVVaWGgwUjJWdmJXVjBjbmt1YW5NaUtTd2dibVYzSUY5bE93cDlDbVoxYm1OMGFXOXVJSE4yS0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVJtOXVkRXh2WVdSbGNpQm9ZWE1nWW1WbGJpQnRiM1psWkNCMGJ5QXZaWGhoYlhCc1pYTXZhbk50TDJ4dllXUmxjbk12Um05dWRFeHZZV1JsY2k1cWN5SXBPd3A5Q21aMWJtTjBhVzl1SUc5MktDa2dld29nSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdpVkVoU1JVVXVSbTl1ZENCb1lYTWdZbVZsYmlCdGIzWmxaQ0IwYnlBdlpYaGhiWEJzWlhNdmFuTnRMMnh2WVdSbGNuTXZSbTl1ZEV4dllXUmxjaTVxY3lJcE93cDlDbVoxYm1OMGFXOXVJR0YyS0NrZ2V3b2dJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ2lWRWhTUlVVdVNXMXRaV1JwWVhSbFVtVnVaR1Z5VDJKcVpXTjBJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUXVJaWs3Q24wS2RIbHdaVzltSUY5ZlZFaFNSVVZmUkVWV1ZFOVBURk5mWHlBOElDSjFJaUFtSmlCZlgxUklVa1ZGWDBSRlZsUlBUMHhUWDE4dVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9JbkpsWjJsemRHVnlJaXdnZXdvZ0lDQWdaR1YwWVdsc09pQjdDaUFnSUNBZ0lDQWdjbVYyYVhOcGIyNDZJR05oQ2lBZ0lDQjlDbjBwS1RzS2RIbHdaVzltSUhkcGJtUnZkeUE4SUNKMUlpQW1KaUFvZDJsdVpHOTNMbDlmVkVoU1JVVmZYeUEvSUdOdmJuTnZiR1V1ZDJGeWJpZ2lWMEZTVGtsT1J6b2dUWFZzZEdsd2JHVWdhVzV6ZEdGdVkyVnpJRzltSUZSb2NtVmxMbXB6SUdKbGFXNW5JR2x0Y0c5eWRHVmtMaUlwSURvZ2QybHVaRzkzTGw5ZlZFaFNSVVZmWHlBOUlHTmhLVHNLWTI5dWMzUWdiVzlrSUQwZ2V3b2dJQ0FnUVVORlUwWnBiRzFwWTFSdmJtVk5ZWEJ3YVc1bk9pQlZkU3dLSUNBZ0lFRmtaRVZ4ZFdGMGFXOXVPaUJmYVN3S0lDQWdJRUZrWkU5d1pYSmhkR2x2YmpvZ1JuVXNDaUFnSUNCQlpHUnBkR2wyWlVGdWFXMWhkR2x2YmtKc1pXNWtUVzlrWlRvZ2NXTXNDaUFnSUNCQlpHUnBkR2wyWlVKc1pXNWthVzVuT2lCdWJDd0tJQ0FnSUVGc2NHaGhSbTl5YldGME9pQllkU3dLSUNBZ0lFRnNkMkY1YzBSbGNIUm9PaUJCZFN3S0lDQWdJRUZzZDJGNWMxTjBaVzVqYVd4R2RXNWpPaUJWWkN3S0lDQWdJRUZ0WW1sbGJuUk1hV2RvZERvZ2NXRXNDaUFnSUNCQmJXSnBaVzUwVEdsbmFIUlFjbTlpWlRvZ1ZtZ3NDaUFnSUNCQmJtbHRZWFJwYjI1RGJHbHdPaUJNY2l3S0lDQWdJRUZ1YVcxaGRHbHZia3h2WVdSbGNqb2dZM2tzQ2lBZ0lDQkJibWx0WVhScGIyNU5hWGhsY2pvZ0pHZ3NDaUFnSUNCQmJtbHRZWFJwYjI1UFltcGxZM1JIY205MWNEb2dXV2dzQ2lBZ0lDQkJibWx0WVhScGIyNVZkR2xzY3pvZ1dtVXNDaUFnSUNCQmNtTkRkWEoyWlRvZ1RXRXNDaUFnSUNCQmNuSmhlVU5oYldWeVlUb2daMkVzQ2lBZ0lDQkJjbkp2ZDBobGJIQmxjam9nVlhrc0NpQWdJQ0JCZFdScGJ6b2dXbUVzQ2lBZ0lDQkJkV1JwYjBGdVlXeDVjMlZ5T2lCeGFDd0tJQ0FnSUVGMVpHbHZRMjl1ZEdWNGREb2dTR2dzQ2lBZ0lDQkJkV1JwYjB4cGMzUmxibVZ5T2lCdGVTd0tJQ0FnSUVGMVpHbHZURzloWkdWeU9pQnJhQ3dLSUNBZ0lFRjRaWE5JWld4d1pYSTZJSEoxTEFvZ0lDQWdRWGhwYzBobGJIQmxjam9nV0RBc0NpQWdJQ0JDWVdOclUybGtaVG9nYVhRc0NpQWdJQ0JDWVhOcFkwUmxjSFJvVUdGamEybHVaem9nVG1Rc0NpQWdJQ0JDWVhOcFkxTm9ZV1J2ZDAxaGNEb2djWGtzQ2lBZ0lDQkNhVzVoY25sVVpYaDBkWEpsVEc5aFpHVnlPaUJxTUN3S0lDQWdJRUp2Ym1VNklHOXZMQW9nSUNBZ1FtOXZiR1ZoYmt0bGVXWnlZVzFsVkhKaFkyczZJRkZ1TEFvZ0lDQWdRbTkxYm1ScGJtZENiM2hJWld4d1pYSTZJRW93TEFvZ0lDQWdRbTk0TWpvZ2NXa3NDaUFnSUNCQ2IzZ3pPaUJNZEN3S0lDQWdJRUp2ZUROSVpXeHdaWEk2SUVKNUxBb2dJQ0FnUW05NFFuVm1abVZ5UjJWdmJXVjBjbms2SUhkdUxBb2dJQ0FnUW05NFIyVnZiV1YwY25rNklIZHVMQW9nSUNBZ1FtOTRTR1ZzY0dWeU9pQnBkU3dLSUNBZ0lFSjFabVpsY2tGMGRISnBZblYwWlRvZ1ZXVXNDaUFnSUNCQ2RXWm1aWEpIWlc5dFpYUnllVG9nWDJVc0NpQWdJQ0JDZFdabVpYSkhaVzl0WlhSeWVVeHZZV1JsY2pvZ1ZXZ3NDaUFnSUNCQ2VYUmxWSGx3WlRvZ1NIVXNDaUFnSUNCRFlXTm9aVG9nVG1rc0NpQWdJQ0JEWVcxbGNtRTZJRWx5TEFvZ0lDQWdRMkZ0WlhKaFNHVnNjR1Z5T2lCT2VTd0tJQ0FnSUVOaGJuWmhjMUpsYm1SbGNtVnlPaUJMTUN3S0lDQWdJRU5oYm5aaGMxUmxlSFIxY21VNklGUm9MQW9nSUNBZ1EyRjBiWFZzYkZKdmJVTjFjblpsTXpvZ2QyRXNDaUFnSUNCRGFXNWxiMjVVYjI1bFRXRndjR2x1WnpvZ2VuVXNDaUFnSUNCRGFYSmpiR1ZDZFdabVpYSkhaVzl0WlhSeWVUb2dabklzQ2lBZ0lDQkRhWEpqYkdWSFpXOXRaWFJ5ZVRvZ1puSXNDaUFnSUNCRGJHRnRjRlJ2UldSblpWZHlZWEJ3YVc1bk9pQjJkQ3dLSUNBZ0lFTnNiMk5yT2lCWGFDd0tJQ0FnSUVOdmJHOXlPaUJoWlN3S0lDQWdJRU52Ykc5eVMyVjVabkpoYldWVWNtRmphem9nUW1Fc0NpQWdJQ0JEYjIxd2NtVnpjMlZrVkdWNGRIVnlaVG9nZG1Fc0NpQWdJQ0JEYjIxd2NtVnpjMlZrVkdWNGRIVnlaVXh2WVdSbGNqb2dhSGtzQ2lBZ0lDQkRiMjVsUW5WbVptVnlSMlZ2YldWMGNuazZJSEJ5TEFvZ0lDQWdRMjl1WlVkbGIyMWxkSEo1T2lCd2Npd0tJQ0FnSUVOMVltVkRZVzFsY21FNklDUnpMQW9nSUNBZ1EzVmlaVkpsWm14bFkzUnBiMjVOWVhCd2FXNW5PaUJDYVN3S0lDQWdJRU4xWW1WU1pXWnlZV04wYVc5dVRXRndjR2x1WnpvZ2Vta3NDaUFnSUNCRGRXSmxWR1Y0ZEhWeVpUb2dhMmtzQ2lBZ0lDQkRkV0psVkdWNGRIVnlaVXh2WVdSbGNqb2dSbWdzQ2lBZ0lDQkRkV0psVlZaU1pXWnNaV04wYVc5dVRXRndjR2x1WnpvZ1VISXNDaUFnSUNCRGRXSmxWVlpTWldaeVlXTjBhVzl1VFdGd2NHbHVaem9nVjNNc0NpQWdJQ0JEZFdKcFkwSmxlbWxsY2tOMWNuWmxPaUJzYnl3S0lDQWdJRU4xWW1salFtVjZhV1Z5UTNWeWRtVXpPaUJUWVN3S0lDQWdJRU4xWW1salNXNTBaWEp3YjJ4aGJuUTZJRkJvTEFvZ0lDQWdRM1ZzYkVaaFkyVkNZV05yT2lCMGJDd0tJQ0FnSUVOMWJHeEdZV05sUm5KdmJuUTZJR1IxTEFvZ0lDQWdRM1ZzYkVaaFkyVkdjbTl1ZEVKaFkyczZJRmQ1TEFvZ0lDQWdRM1ZzYkVaaFkyVk9iMjVsT2lCMWRTd0tJQ0FnSUVOMWNuWmxPaUJEZEN3S0lDQWdJRU4xY25abFVHRjBhRG9nUVdnc0NpQWdJQ0JEZFhOMGIyMUNiR1Z1WkdsdVp6b2djSFVzQ2lBZ0lDQkRkWE4wYjIxVWIyNWxUV0Z3Y0dsdVp6b2dUM1VzQ2lBZ0lDQkRlV3hwYm1SbGNrSjFabVpsY2tkbGIyMWxkSEo1T2lCS2Jpd0tJQ0FnSUVONWJHbHVaR1Z5UjJWdmJXVjBjbms2SUVwdUxBb2dJQ0FnUTNsc2FXNWtjbWxqWVd3NklFTjVMQW9nSUNBZ1JHRjBZVlJsZUhSMWNtVTZJSEZ1TEFvZ0lDQWdSR0YwWVZSbGVIUjFjbVV5UkVGeWNtRjVPaUJSY3l3S0lDQWdJRVJoZEdGVVpYaDBkWEpsTTBRNklHMWhMQW9nSUNBZ1JHRjBZVlJsZUhSMWNtVk1iMkZrWlhJNklFNW9MQW9nSUNBZ1JHRjBZVlYwYVd4ek9pQnJlU3dLSUNBZ0lFUmxZM0psYldWdWRGTjBaVzVqYVd4UGNEb2diakFzQ2lBZ0lDQkVaV055WlcxbGJuUlhjbUZ3VTNSbGJtTnBiRTl3T2lCeU1Dd0tJQ0FnSUVSbFptRjFiSFJNYjJGa2FXNW5UV0Z1WVdkbGNqb2diSGtzQ2lBZ0lDQkVaWEIwYUVadmNtMWhkRG9nVm00c0NpQWdJQ0JFWlhCMGFGTjBaVzVqYVd4R2IzSnRZWFE2SUV4cExBb2dJQ0FnUkdWd2RHaFVaWGgwZFhKbE9pQnJjeXdLSUNBZ0lFUnBjbVZqZEdsdmJtRnNUR2xuYUhRNklGZGhMQW9nSUNBZ1JHbHlaV04wYVc5dVlXeE1hV2RvZEVobGJIQmxjam9nUm5rc0NpQWdJQ0JFYVhOamNtVjBaVWx1ZEdWeWNHOXNZVzUwT2lCSmFDd0tJQ0FnSUVSdlpHVmpZV2hsWkhKdmJrSjFabVpsY2tkbGIyMWxkSEo1T2lCdGNpd0tJQ0FnSUVSdlpHVmpZV2hsWkhKdmJrZGxiMjFsZEhKNU9pQnRjaXdLSUNBZ0lFUnZkV0pzWlZOcFpHVTZJRU5wTEFvZ0lDQWdSSE4wUVd4d2FHRkdZV04wYjNJNklFMTFMQW9nSUNBZ1JITjBRMjlzYjNKR1lXTjBiM0k2SUhkMUxBb2dJQ0FnUkhsdVlXMXBZMEoxWm1abGNrRjBkSEpwWW5WMFpUb2dRakFzQ2lBZ0lDQkVlVzVoYldsalEyOXdlVlZ6WVdkbE9pQjVNQ3dLSUNBZ0lFUjVibUZ0YVdORWNtRjNWWE5oWjJVNklIVnlMQW9nSUNBZ1JIbHVZVzFwWTFKbFlXUlZjMkZuWlRvZ2JUQXNDaUFnSUNCRlpHZGxjMGRsYjIxbGRISjVPaUJmWVN3S0lDQWdJRVZrWjJWelNHVnNjR1Z5T2lCWk1Dd0tJQ0FnSUVWc2JHbHdjMlZEZFhKMlpUb2dWWElzQ2lBZ0lDQkZjWFZoYkVSbGNIUm9PaUJNZFN3S0lDQWdJRVZ4ZFdGc1UzUmxibU5wYkVaMWJtTTZJR3d3TEFvZ0lDQWdSWEYxYVhKbFkzUmhibWQxYkdGeVVtVm1iR1ZqZEdsdmJrMWhjSEJwYm1jNklFUnpMQW9nSUNBZ1JYRjFhWEpsWTNSaGJtZDFiR0Z5VW1WbWNtRmpkR2x2YmsxaGNIQnBibWM2SUVaekxBb2dJQ0FnUlhWc1pYSTZJRnB1TEFvZ0lDQWdSWFpsYm5SRWFYTndZWFJqYUdWeU9pQkZiaXdLSUNBZ0lFVjRkSEoxWkdWQ2RXWm1aWEpIWlc5dFpYUnllVG9nYkc0c0NpQWdJQ0JGZUhSeWRXUmxSMlZ2YldWMGNuazZJR3h1TEFvZ0lDQWdSbUZqWlVOdmJHOXljem9nVkRBc0NpQWdJQ0JHYVd4bFRHOWhaR1Z5T2lCWmRDd0tJQ0FnSUVac1lYUlRhR0ZrYVc1bk9pQnJZeXdLSUNBZ0lFWnNiMkYwTVRaQ2RXWm1aWEpCZEhSeWFXSjFkR1U2SUc1b0xBb2dJQ0FnUm14dllYUXpNa0YwZEhKcFluVjBaVG9nVnpBc0NpQWdJQ0JHYkc5aGRETXlRblZtWm1WeVFYUjBjbWxpZFhSbE9pQmtaU3dLSUNBZ0lFWnNiMkYwTmpSQmRIUnlhV0oxZEdVNklIRXdMQW9nSUNBZ1JteHZZWFEyTkVKMVptWmxja0YwZEhKcFluVjBaVG9nYVdnc0NpQWdJQ0JHYkc5aGRGUjVjR1U2SUc1dUxBb2dJQ0FnUm05bk9pQkNjaXdLSUNBZ0lFWnZaMFY0Y0RJNklFNXlMQW9nSUNBZ1JtOXVkRG9nYjNZc0NpQWdJQ0JHYjI1MFRHOWhaR1Z5T2lCemRpd0tJQ0FnSUVaeVlXMWxZblZtWm1WeVZHVjRkSFZ5WlRvZ1UyZ3NDaUFnSUNCR2NtOXVkRk5wWkdVNklFRnBMQW9nSUNBZ1JuSjFjM1IxYlRvZ1JISXNDaUFnSUNCSFRFSjFabVpsY2tGMGRISnBZblYwWlRvZ1VXZ3NDaUFnSUNCSFRGTk1NVG9nWHpBc0NpQWdJQ0JIVEZOTU16b2dlR3dzQ2lBZ0lDQkhjbVZoZEdWeVJHVndkR2c2SUZCMUxBb2dJQ0FnUjNKbFlYUmxja1Z4ZFdGc1JHVndkR2c2SUZKMUxBb2dJQ0FnUjNKbFlYUmxja1Z4ZFdGc1UzUmxibU5wYkVaMWJtTTZJR1F3TEFvZ0lDQWdSM0psWVhSbGNsTjBaVzVqYVd4R2RXNWpPaUJvTUN3S0lDQWdJRWR5YVdSSVpXeHdaWEk2SUc1MUxBb2dJQ0FnUjNKdmRYQTZJRWh1TEFvZ0lDQWdTR0ZzWmtac2IyRjBWSGx3WlRvZ2EyNHNDaUFnSUNCSVpXMXBjM0JvWlhKbFRHbG5hSFE2SUZWaExBb2dJQ0FnU0dWdGFYTndhR1Z5WlV4cFoyaDBTR1ZzY0dWeU9pQkplU3dLSUNBZ0lFaGxiV2x6Y0dobGNtVk1hV2RvZEZCeWIySmxPaUJIYUN3S0lDQWdJRWxqYjNOaGFHVmtjbTl1UW5WbVptVnlSMlZ2YldWMGNuazZJRjl5TEFvZ0lDQWdTV052YzJGb1pXUnliMjVIWlc5dFpYUnllVG9nWDNJc0NpQWdJQ0JKYldGblpVSnBkRzFoY0V4dllXUmxjam9nVDJnc0NpQWdJQ0JKYldGblpVeHZZV1JsY2pvZ1VuSXNDaUFnSUNCSmJXRm5aVlYwYVd4ek9pQlpiaXdLSUNBZ0lFbHRiV1ZrYVdGMFpWSmxibVJsY2s5aWFtVmpkRG9nWVhZc0NpQWdJQ0JKYm1OeVpXMWxiblJUZEdWdVkybHNUM0E2SUhRd0xBb2dJQ0FnU1c1amNtVnRaVzUwVjNKaGNGTjBaVzVqYVd4UGNEb2dhVEFzQ2lBZ0lDQkpibk4wWVc1alpXUkNkV1ptWlhKQmRIUnlhV0oxZEdVNklGaHVMQW9nSUNBZ1NXNXpkR0Z1WTJWa1FuVm1abVZ5UjJWdmJXVjBjbms2SUZsaExBb2dJQ0FnU1c1emRHRnVZMlZrU1c1MFpYSnNaV0YyWldSQ2RXWm1aWEk2SUdwb0xBb2dJQ0FnU1c1emRHRnVZMlZrVFdWemFEb2dlR0VzQ2lBZ0lDQkpiblF4TmtGMGRISnBZblYwWlRvZ1NEQXNDaUFnSUNCSmJuUXhOa0oxWm1abGNrRjBkSEpwWW5WMFpUb2daV2dzQ2lBZ0lDQkpiblF6TWtGMGRISnBZblYwWlRvZ1J6QXNDaUFnSUNCSmJuUXpNa0oxWm1abGNrRjBkSEpwWW5WMFpUb2dkR2dzQ2lBZ0lDQkpiblE0UVhSMGNtbGlkWFJsT2lCNk1Dd0tJQ0FnSUVsdWREaENkV1ptWlhKQmRIUnlhV0oxZEdVNklHcGpMQW9nSUNBZ1NXNTBWSGx3WlRvZ1IzVXNDaUFnSUNCSmJuUmxjbXhsWVhabFpFSjFabVpsY2pvZ0pHNHNDaUFnSUNCSmJuUmxjbXhsWVhabFpFSjFabVpsY2tGMGRISnBZblYwWlRvZ1UyNHNDaUFnSUNCSmJuUmxjbkJ2YkdGdWREb2dZMjRzQ2lBZ0lDQkpiblJsY25CdmJHRjBaVVJwYzJOeVpYUmxPaUI2Y3l3S0lDQWdJRWx1ZEdWeWNHOXNZWFJsVEdsdVpXRnlPaUJWY3l3S0lDQWdJRWx1ZEdWeWNHOXNZWFJsVTIxdmIzUm9PaUI1Ynl3S0lDQWdJRWx1ZG1WeWRGTjBaVzVqYVd4UGNEb2djekFzQ2lBZ0lDQktVMDlPVEc5aFpHVnlPaUJsZGl3S0lDQWdJRXRsWlhCVGRHVnVZMmxzVDNBNklIWnZMQW9nSUNBZ1MyVjVabkpoYldWVWNtRmphem9nZW5Rc0NpQWdJQ0JNVDBRNklHSm9MQW9nSUNBZ1RHRjBhR1ZDZFdabVpYSkhaVzl0WlhSeWVUb2dUWElzQ2lBZ0lDQk1ZWFJvWlVkbGIyMWxkSEo1T2lCTmNpd0tJQ0FnSUV4aGVXVnljem9nU25Nc0NpQWdJQ0JNWlc1elJteGhjbVU2SUc1MkxBb2dJQ0FnVEdWemMwUmxjSFJvT2lCRGRTd0tJQ0FnSUV4bGMzTkZjWFZoYkVSbGNIUm9PaUJsWVN3S0lDQWdJRXhsYzNORmNYVmhiRk4wWlc1amFXeEdkVzVqT2lCak1Dd0tJQ0FnSUV4bGMzTlRkR1Z1WTJsc1JuVnVZem9nWVRBc0NpQWdJQ0JNYVdkb2REb2dRblFzQ2lBZ0lDQk1hV2RvZEZCeWIySmxPaUJJY2l3S0lDQWdJRXhwYm1VNklHOXVMQW9nSUNBZ1RHbHVaVE02SUV0b0xBb2dJQ0FnVEdsdVpVSmhjMmxqVFdGMFpYSnBZV3c2SUdaMExBb2dJQ0FnVEdsdVpVTjFjblpsT2lCUGNpd0tJQ0FnSUV4cGJtVkRkWEoyWlRNNklFVm9MQW9nSUNBZ1RHbHVaVVJoYzJobFpFMWhkR1Z5YVdGc09pQkdZU3dLSUNBZ0lFeHBibVZNYjI5d09pQjVZU3dLSUNBZ0lFeHBibVZRYVdWalpYTTZJSGN3TEFvZ0lDQWdUR2x1WlZObFoyMWxiblJ6T2lCM2RDd0tJQ0FnSUV4cGJtVlRkSEpwY0RvZ1lqQXNDaUFnSUNCTWFXNWxZWEpGYm1OdlpHbHVaem9nVG5Rc0NpQWdJQ0JNYVc1bFlYSkdhV3gwWlhJNklIUjBMQW9nSUNBZ1RHbHVaV0Z5U1c1MFpYSndiMnhoYm5RNklFNWhMQW9nSUNBZ1RHbHVaV0Z5VFdsd1RXRndUR2x1WldGeVJtbHNkR1Z5T2lBa2VTd0tJQ0FnSUV4cGJtVmhjazFwY0UxaGNFNWxZWEpsYzNSR2FXeDBaWEk2SUZwNUxBb2dJQ0FnVEdsdVpXRnlUV2x3YldGd1RHbHVaV0Z5Um1sc2RHVnlPaUJWYVN3S0lDQWdJRXhwYm1WaGNrMXBjRzFoY0U1bFlYSmxjM1JHYVd4MFpYSTZJRmRqTEFvZ0lDQWdUR2x1WldGeVZHOXVaVTFoY0hCcGJtYzZJRTUxTEFvZ0lDQWdURzloWkdWeU9pQmlkQ3dLSUNBZ0lFeHZZV1JsY2xWMGFXeHpPaUJIY3l3S0lDQWdJRXh2WVdScGJtZE5ZVzVoWjJWeU9pQjZZU3dLSUNBZ0lFeHZiM0JQYm1ObE9pQlFaQ3dLSUNBZ0lFeHZiM0JRYVc1blVHOXVaem9nUkdRc0NpQWdJQ0JNYjI5d1VtVndaV0YwT2lCSlpDd0tJQ0FnSUV4MWJXbHVZVzVqWlVGc2NHaGhSbTl5YldGME9pQlpkU3dLSUNBZ0lFeDFiV2x1WVc1alpVWnZjbTFoZERvZ1NuVXNDaUFnSUNCTlQxVlRSVG9nUjNrc0NpQWdJQ0JOWVhSbGNtbGhiRG9nWkhRc0NpQWdJQ0JOWVhSbGNtbGhiRXh2WVdSbGNqb2dlbWdzQ2lBZ0lDQk5ZWFJvT2lCTk1Dd0tJQ0FnSUUxaGRHaFZkR2xzY3pvZ1RUQXNDaUFnSUNCTllYUnlhWGd6T2lCc2RDd0tJQ0FnSUUxaGRISnBlRFE2SUhCbExBb2dJQ0FnVFdGNFJYRjFZWFJwYjI0NklHOXNMQW9nSUNBZ1RXVnphRG9nYzNRc0NpQWdJQ0JOWlhOb1FtRnphV05OWVhSbGNtbGhiRG9nYUc0c0NpQWdJQ0JOWlhOb1JHVndkR2hOWVhSbGNtbGhiRG9nWlc4c0NpQWdJQ0JOWlhOb1JHbHpkR0Z1WTJWTllYUmxjbWxoYkRvZ2RHOHNDaUFnSUNCTlpYTm9SbUZqWlUxaGRHVnlhV0ZzT2lCQk1Dd0tJQ0FnSUUxbGMyaE1ZVzFpWlhKMFRXRjBaWEpwWVd3NklFbGhMQW9nSUNBZ1RXVnphRTFoZEdOaGNFMWhkR1Z5YVdGc09pQkVZU3dLSUNBZ0lFMWxjMmhPYjNKdFlXeE5ZWFJsY21saGJEb2dVR0VzQ2lBZ0lDQk5aWE5vVUdodmJtZE5ZWFJsY21saGJEb2dUR0VzQ2lBZ0lDQk5aWE5vVUdoNWMybGpZV3hOWVhSbGNtbGhiRG9nUTJFc0NpQWdJQ0JOWlhOb1UzUmhibVJoY21STllYUmxjbWxoYkRvZ2NHOHNDaUFnSUNCTlpYTm9WRzl2YmsxaGRHVnlhV0ZzT2lCU1lTd0tJQ0FnSUUxcGJrVnhkV0YwYVc5dU9pQnpiQ3dLSUNBZ0lFMXBjbkp2Y21Wa1VtVndaV0YwVjNKaGNIQnBibWM2SUVKekxBb2dJQ0FnVFdsNFQzQmxjbUYwYVc5dU9pQkVkU3dLSUNBZ0lFMTFiSFJwVFdGMFpYSnBZV3c2SUVNd0xBb2dJQ0FnVFhWc2RHbHdiSGxDYkdWdVpHbHVaem9nY213c0NpQWdJQ0JOZFd4MGFYQnNlVTl3WlhKaGRHbHZiam9nVm5Nc0NpQWdJQ0JPWldGeVpYTjBSbWxzZEdWeU9pQnlkQ3dLSUNBZ0lFNWxZWEpsYzNSTmFYQk5ZWEJNYVc1bFlYSkdhV3gwWlhJNklGbDVMQW9nSUNBZ1RtVmhjbVZ6ZEUxcGNFMWhjRTVsWVhKbGMzUkdhV3gwWlhJNklFcDVMQW9nSUNBZ1RtVmhjbVZ6ZEUxcGNHMWhjRXhwYm1WaGNrWnBiSFJsY2pvZ2JtRXNDaUFnSUNCT1pXRnlaWE4wVFdsd2JXRndUbVZoY21WemRFWnBiSFJsY2pvZ2RHRXNDaUFnSUNCT1pYWmxja1JsY0hSb09pQkZkU3dLSUNBZ0lFNWxkbVZ5VTNSbGJtTnBiRVoxYm1NNklHOHdMQW9nSUNBZ1RtOUNiR1Z1WkdsdVp6b2dkbTRzQ2lBZ0lDQk9iME52Ykc5eWN6b2dVekFzQ2lBZ0lDQk9iMVJ2Ym1WTllYQndhVzVuT2lCZmJpd0tJQ0FnSUU1dmNtMWhiRUZ1YVcxaGRHbHZia0pzWlc1a1RXOWtaVG9nZFdFc0NpQWdJQ0JPYjNKdFlXeENiR1Z1WkdsdVp6b2djM0lzQ2lBZ0lDQk9iM1JGY1hWaGJFUmxjSFJvT2lCSmRTd0tJQ0FnSUU1dmRFVnhkV0ZzVTNSbGJtTnBiRVoxYm1NNklIVXdMQW9nSUNBZ1RuVnRZbVZ5UzJWNVpuSmhiV1ZVY21GamF6b2dRWElzQ2lBZ0lDQlBZbXBsWTNRelJEb2dUbVVzQ2lBZ0lDQlBZbXBsWTNSTWIyRmtaWEk2SUhWNUxBb2dJQ0FnVDJKcVpXTjBVM0JoWTJWT2IzSnRZV3hOWVhBNklIcGtMQW9nSUNBZ1QyTjBZV2hsWkhKdmJrSjFabVpsY2tkbGIyMWxkSEo1T2lCSmFTd0tJQ0FnSUU5amRHRm9aV1J5YjI1SFpXOXRaWFJ5ZVRvZ1NXa3NDaUFnSUNCUGJtVkdZV04wYjNJNklIbDFMQW9nSUNBZ1QyNWxUV2x1ZFhORWMzUkJiSEJvWVVaaFkzUnZjam9nWW5Vc0NpQWdJQ0JQYm1WTmFXNTFjMFJ6ZEVOdmJHOXlSbUZqZEc5eU9pQlRkU3dLSUNBZ0lFOXVaVTFwYm5WelUzSmpRV3h3YUdGR1lXTjBiM0k2SUZaakxBb2dJQ0FnVDI1bFRXbHVkWE5UY21ORGIyeHZja1poWTNSdmNqb2dYM1VzQ2lBZ0lDQlBjblJvYjJkeVlYQm9hV05EWVcxbGNtRTZJRVp5TEFvZ0lDQWdVRU5HVTJoaFpHOTNUV0Z3T2lCSVl5d0tJQ0FnSUZCRFJsTnZablJUYUdGa2IzZE5ZWEE2SUdaMUxBb2dJQ0FnVUUxU1JVMUhaVzVsY21GMGIzSTZJR0ZvTEFvZ0lDQWdVR0Z5WVcxbGRISnBZMGRsYjIxbGRISjVPaUJwZGl3S0lDQWdJRkJoY25ScFkyeGxPaUJTTUN3S0lDQWdJRkJoY25ScFkyeGxRbUZ6YVdOTllYUmxjbWxoYkRvZ1JEQXNDaUFnSUNCUVlYSjBhV05zWlZONWMzUmxiVG9nVURBc0NpQWdJQ0JRWVhKMGFXTnNaVk41YzNSbGJVMWhkR1Z5YVdGc09pQkdNQ3dLSUNBZ0lGQmhkR2c2SUdkeUxBb2dJQ0FnVUdWeWMzQmxZM1JwZG1WRFlXMWxjbUU2SUhWMExBb2dJQ0FnVUd4aGJtVTZJRmQwTEFvZ0lDQWdVR3hoYm1WQ2RXWm1aWEpIWlc5dFpYUnllVG9nVUdrc0NpQWdJQ0JRYkdGdVpVZGxiMjFsZEhKNU9pQlFhU3dLSUNBZ0lGQnNZVzVsU0dWc2NHVnlPaUI2ZVN3S0lDQWdJRkJ2YVc1MFEyeHZkV1E2SUV3d0xBb2dJQ0FnVUc5cGJuUkRiRzkxWkUxaGRHVnlhV0ZzT2lCSk1Dd0tJQ0FnSUZCdmFXNTBUR2xuYUhRNklFZGhMQW9nSUNBZ1VHOXBiblJNYVdkb2RFaGxiSEJsY2pvZ1Vua3NDaUFnSUNCUWIybHVkSE02SUhweUxBb2dJQ0FnVUc5cGJuUnpUV0YwWlhKcFlXdzZJR3B1TEFvZ0lDQWdVRzlzWVhKSGNtbGtTR1ZzY0dWeU9pQkVlU3dLSUNBZ0lGQnZiSGxvWldSeWIyNUNkV1ptWlhKSFpXOXRaWFJ5ZVRvZ1lXNHNDaUFnSUNCUWIyeDVhR1ZrY205dVIyVnZiV1YwY25rNklHRnVMQW9nSUNBZ1VHOXphWFJwYjI1aGJFRjFaR2x2T2lCNGVTd0tJQ0FnSUZCeWIzQmxjblI1UW1sdVpHbHVaem9nYTJVc0NpQWdJQ0JRY205d1pYSjBlVTFwZUdWeU9pQllhQ3dLSUNBZ0lGRjFZV1J5WVhScFkwSmxlbWxsY2tOMWNuWmxPaUJqYnl3S0lDQWdJRkYxWVdSeVlYUnBZMEpsZW1sbGNrTjFjblpsTXpvZ2FHOHNDaUFnSUNCUmRXRjBaWEp1YVc5dU9pQm5kQ3dLSUNBZ0lGRjFZWFJsY201cGIyNUxaWGxtY21GdFpWUnlZV05yT2lCWGFTd0tJQ0FnSUZGMVlYUmxjbTVwYjI1TWFXNWxZWEpKYm5SbGNuQnZiR0Z1ZERvZ1JHZ3NDaUFnSUNCU1JWWkpVMGxQVGpvZ1kyRXNDaUFnSUNCU1IwSkJSR1Z3ZEdoUVlXTnJhVzVuT2lCQ1pDd0tJQ0FnSUZKSFFrRkdiM0p0WVhRNklHTjBMQW9nSUNBZ1VrZENRVWx1ZEdWblpYSkdiM0p0WVhRNklHVmtMQW9nSUNBZ1VrZENRVjlCVTFSRFh6RXdlREV3WDBadmNtMWhkRG9nWm1Rc0NpQWdJQ0JTUjBKQlgwRlRWRU5mTVRCNE5WOUdiM0p0WVhRNklHaGtMQW9nSUNBZ1VrZENRVjlCVTFSRFh6RXdlRFpmUm05eWJXRjBPaUIxWkN3S0lDQWdJRkpIUWtGZlFWTlVRMTh4TUhnNFgwWnZjbTFoZERvZ1pHUXNDaUFnSUNCU1IwSkJYMEZUVkVOZk1USjRNVEJmUm05eWJXRjBPaUJ3WkN3S0lDQWdJRkpIUWtGZlFWTlVRMTh4TW5neE1sOUdiM0p0WVhRNklHMWtMQW9nSUNBZ1VrZENRVjlCVTFSRFh6UjRORjlHYjNKdFlYUTZJRzVrTEFvZ0lDQWdVa2RDUVY5QlUxUkRYelY0TkY5R2IzSnRZWFE2SUdsa0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpWNE5WOUdiM0p0WVhRNklISmtMQW9nSUNBZ1VrZENRVjlCVTFSRFh6WjROVjlHYjNKdFlYUTZJSE5rTEFvZ0lDQWdVa2RDUVY5QlUxUkRYelo0Tmw5R2IzSnRZWFE2SUc5a0xBb2dJQ0FnVWtkQ1FWOUJVMVJEWHpoNE5WOUdiM0p0WVhRNklHRmtMQW9nSUNBZ1VrZENRVjlCVTFSRFh6aDRObDlHYjNKdFlYUTZJR3hrTEFvZ0lDQWdVa2RDUVY5QlUxUkRYemg0T0Y5R2IzSnRZWFE2SUdOa0xBb2dJQ0FnVWtkQ1FWOUNVRlJEWDBadmNtMWhkRG9nWjJRc0NpQWdJQ0JTUjBKQlgwVlVRekpmUlVGRFgwWnZjbTFoZERvZ1oyd3NDaUFnSUNCU1IwSkJYMUJXVWxSRFh6SkNVRkJXTVY5R2IzSnRZWFE2SUhCc0xBb2dJQ0FnVWtkQ1FWOVFWbEpVUTE4MFFsQlFWakZmUm05eWJXRjBPaUJtYkN3S0lDQWdJRkpIUWtGZlV6TlVRMTlFV0ZReFgwWnZjbTFoZERvZ2JHd3NDaUFnSUNCU1IwSkJYMU16VkVOZlJGaFVNMTlHYjNKdFlYUTZJR05zTEFvZ0lDQWdVa2RDUVY5VE0xUkRYMFJZVkRWZlJtOXliV0YwT2lCb2JDd0tJQ0FnSUZKSFFrWnZjbTFoZERvZ1IyNHNDaUFnSUNCU1IwSkpiblJsWjJWeVJtOXliV0YwT2lCTGRTd0tJQ0FnSUZKSFFsOUZWRU14WDBadmNtMWhkRG9nZEdRc0NpQWdJQ0JTUjBKZlJWUkRNbDlHYjNKdFlYUTZJRzFzTEFvZ0lDQWdVa2RDWDFCV1VsUkRYekpDVUZCV01WOUdiM0p0WVhRNklHUnNMQW9nSUNBZ1VrZENYMUJXVWxSRFh6UkNVRkJXTVY5R2IzSnRZWFE2SUhWc0xBb2dJQ0FnVWtkQ1gxTXpWRU5mUkZoVU1WOUdiM0p0WVhRNklHRnNMQW9nSUNBZ1VrZEdiM0p0WVhRNklHcDFMQW9nSUNBZ1VrZEpiblJsWjJWeVJtOXliV0YwT2lCUmRTd0tJQ0FnSUZKaGQxTm9ZV1JsY2sxaGRHVnlhV0ZzT2lCSGFTd0tJQ0FnSUZKaGVUb2dRMjRzQ2lBZ0lDQlNZWGxqWVhOMFpYSTZJRVY1TEFvZ0lDQWdVbVZqZEVGeVpXRk1hV2RvZERvZ1dHRXNDaUFnSUNCU1pXUkdiM0p0WVhRNklGcDFMQW9nSUNBZ1VtVmtTVzUwWldkbGNrWnZjbTFoZERvZ0pIVXNDaUFnSUNCU1pXbHVhR0Z5WkZSdmJtVk5ZWEJ3YVc1bk9pQkNkU3dLSUNBZ0lGSmxjR1ZoZEZkeVlYQndhVzVuT2lCT2N5d0tJQ0FnSUZKbGNHeGhZMlZUZEdWdVkybHNUM0E2SUdVd0xBb2dJQ0FnVW1WMlpYSnpaVk4xWW5SeVlXTjBSWEYxWVhScGIyNDZJR2QxTEFvZ0lDQWdVbWx1WjBKMVptWmxja2RsYjIxbGRISjVPaUJpY2l3S0lDQWdJRkpwYm1kSFpXOXRaWFJ5ZVRvZ1luSXNDaUFnSUNCVFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4eE1IZ3hNRjlHYjNKdFlYUTZJRU5rTEFvZ0lDQWdVMUpIUWpoZlFVeFFTRUU0WDBGVFZFTmZNVEI0TlY5R2IzSnRZWFE2SUZSa0xBb2dJQ0FnVTFKSFFqaGZRVXhRU0VFNFgwRlRWRU5mTVRCNE5sOUdiM0p0WVhRNklFVmtMQW9nSUNBZ1UxSkhRamhmUVV4UVNFRTRYMEZUVkVOZk1UQjRPRjlHYjNKdFlYUTZJRUZrTEFvZ0lDQWdVMUpIUWpoZlFVeFFTRUU0WDBGVFZFTmZNVEo0TVRCZlJtOXliV0YwT2lCTVpDd0tJQ0FnSUZOU1IwSTRYMEZNVUVoQk9GOUJVMVJEWHpFeWVERXlYMFp2Y20xaGREb2dVbVFzQ2lBZ0lDQlRVa2RDT0Y5QlRGQklRVGhmUVZOVVExODBlRFJmUm05eWJXRjBPaUI0WkN3S0lDQWdJRk5TUjBJNFgwRk1VRWhCT0Y5QlUxUkRYelY0TkY5R2IzSnRZWFE2SUhsa0xBb2dJQ0FnVTFKSFFqaGZRVXhRU0VFNFgwRlRWRU5mTlhnMVgwWnZjbTFoZERvZ2RtUXNDaUFnSUNCVFVrZENPRjlCVEZCSVFUaGZRVk5VUTE4MmVEVmZSbTl5YldGME9pQmZaQ3dLSUNBZ0lGTlNSMEk0WDBGTVVFaEJPRjlCVTFSRFh6WjRObDlHYjNKdFlYUTZJRTFrTEFvZ0lDQWdVMUpIUWpoZlFVeFFTRUU0WDBGVFZFTmZPSGcxWDBadmNtMWhkRG9nWW1Rc0NpQWdJQ0JUVWtkQ09GOUJURkJJUVRoZlFWTlVRMTg0ZURaZlJtOXliV0YwT2lCM1pDd0tJQ0FnSUZOU1IwSTRYMEZNVUVoQk9GOUJVMVJEWHpoNE9GOUdiM0p0WVhRNklGTmtMQW9nSUNBZ1UyTmxibVU2SUc1dkxBb2dJQ0FnVTJObGJtVlZkR2xzY3pvZ2RIWXNDaUFnSUNCVGFHRmtaWEpEYUhWdWF6b2dSbVVzQ2lBZ0lDQlRhR0ZrWlhKTWFXSTZJSEYwTEFvZ0lDQWdVMmhoWkdWeVRXRjBaWEpwWVd3NklITnVMQW9nSUNBZ1UyaGhaRzkzVFdGMFpYSnBZV3c2SUVGaExBb2dJQ0FnVTJoaGNHVTZJRmgwTEFvZ0lDQWdVMmhoY0dWQ2RXWm1aWEpIWlc5dFpYUnllVG9nUkdrc0NpQWdJQ0JUYUdGd1pVZGxiMjFsZEhKNU9pQkVhU3dLSUNBZ0lGTm9ZWEJsVUdGMGFEb2dUM2tzQ2lBZ0lDQlRhR0Z3WlZWMGFXeHpPaUJLZEN3S0lDQWdJRk5vYjNKMFZIbHdaVG9nYTNVc0NpQWdJQ0JUYTJWc1pYUnZiam9nWVc4c0NpQWdJQ0JUYTJWc1pYUnZia2hsYkhCbGNqb2daWFVzQ2lBZ0lDQlRhMmx1Ym1Wa1RXVnphRG9nYzI4c0NpQWdJQ0JUYlc5dmRHaFRhR0ZrYVc1bk9pQlllU3dLSUNBZ0lGTndhR1Z5WlRvZ1FXNHNDaUFnSUNCVGNHaGxjbVZDZFdabVpYSkhaVzl0WlhSeWVUb2dSbWtzQ2lBZ0lDQlRjR2hsY21WSFpXOXRaWFJ5ZVRvZ1Jta3NDaUFnSUNCVGNHaGxjbWxqWVd3NklFRjVMQW9nSUNBZ1UzQm9aWEpwWTJGc1NHRnliVzl1YVdOek16b2dTbUVzQ2lBZ0lDQlRjR3hwYm1WRGRYSjJaVG9nZFc4c0NpQWdJQ0JUY0c5MFRHbG5hSFE2SUVoaExBb2dJQ0FnVTNCdmRFeHBaMmgwU0dWc2NHVnlPaUJNZVN3S0lDQWdJRk53Y21sMFpUb2djbThzQ2lBZ0lDQlRjSEpwZEdWTllYUmxjbWxoYkRvZ2FXOHNDaUFnSUNCVGNtTkJiSEJvWVVaaFkzUnZjam9nUjJNc0NpQWdJQ0JUY21OQmJIQm9ZVk5oZEhWeVlYUmxSbUZqZEc5eU9pQlVkU3dLSUNBZ0lGTnlZME52Ykc5eVJtRmpkRzl5T2lCMmRTd0tJQ0FnSUZOMFlYUnBZME52Y0hsVmMyRm5aVG9nZURBc0NpQWdJQ0JUZEdGMGFXTkVjbUYzVlhOaFoyVTZJR2h5TEFvZ0lDQWdVM1JoZEdsalVtVmhaRlZ6WVdkbE9pQndNQ3dLSUNBZ0lGTjBaWEpsYjBOaGJXVnlZVG9nWm5rc0NpQWdJQ0JUZEhKbFlXMURiM0I1VlhOaFoyVTZJSFl3TEFvZ0lDQWdVM1J5WldGdFJISmhkMVZ6WVdkbE9pQm1NQ3dLSUNBZ0lGTjBjbVZoYlZKbFlXUlZjMkZuWlRvZ1p6QXNDaUFnSUNCVGRISnBibWRMWlhsbWNtRnRaVlJ5WVdOck9pQkxiaXdLSUNBZ0lGTjFZblJ5WVdOMFJYRjFZWFJwYjI0NklHMTFMQW9nSUNBZ1UzVmlkSEpoWTNScGRtVkNiR1Z1WkdsdVp6b2dhV3dzQ2lBZ0lDQlVUMVZEU0RvZ1Zua3NDaUFnSUNCVVlXNW5aVzUwVTNCaFkyVk9iM0p0WVd4TllYQTZJRWhwTEFvZ0lDQWdWR1YwY21Gb1pXUnliMjVDZFdabVpYSkhaVzl0WlhSeWVUb2dkM0lzQ2lBZ0lDQlVaWFJ5WVdobFpISnZia2RsYjIxbGRISjVPaUIzY2l3S0lDQWdJRlJsZUhSSFpXOXRaWFJ5ZVRvZ2NuWXNDaUFnSUNCVVpYaDBkWEpsT2lCdmRDd0tJQ0FnSUZSbGVIUjFjbVZNYjJGa1pYSTZJRUpvTEFvZ0lDQWdWRzl5ZFhOQ2RXWm1aWEpIWlc5dFpYUnllVG9nVTNJc0NpQWdJQ0JVYjNKMWMwZGxiMjFsZEhKNU9pQlRjaXdLSUNBZ0lGUnZjblZ6UzI1dmRFSjFabVpsY2tkbGIyMWxkSEo1T2lCVWNpd0tJQ0FnSUZSdmNuVnpTMjV2ZEVkbGIyMWxkSEo1T2lCVWNpd0tJQ0FnSUZSeWFXRnVaMnhsT2lCdWRDd0tJQ0FnSUZSeWFXRnVaMnhsUm1GdVJISmhkMDF2WkdVNklGRjVMQW9nSUNBZ1ZISnBZVzVuYkdWVGRISnBjRVJ5WVhkTmIyUmxPaUJxZVN3S0lDQWdJRlJ5YVdGdVoyeGxjMFJ5WVhkTmIyUmxPaUJHWkN3S0lDQWdJRlIxWW1WQ2RXWm1aWEpIWlc5dFpYUnllVG9nUlhJc0NpQWdJQ0JVZFdKbFIyVnZiV1YwY25rNklFVnlMQW9nSUNBZ1ZWWk5ZWEJ3YVc1bk9pQm9ZU3dLSUNBZ0lGVnBiblF4TmtGMGRISnBZblYwWlRvZ2F6QXNDaUFnSUNCVmFXNTBNVFpDZFdabVpYSkJkSFJ5YVdKMWRHVTZJRmx6TEFvZ0lDQWdWV2x1ZERNeVFYUjBjbWxpZFhSbE9pQldNQ3dLSUNBZ0lGVnBiblF6TWtKMVptWmxja0YwZEhKcFluVjBaVG9nV25Nc0NpQWdJQ0JWYVc1ME9FRjBkSEpwWW5WMFpUb2dWVEFzQ2lBZ0lDQlZhVzUwT0VKMVptWmxja0YwZEhKcFluVjBaVG9nVVdNc0NpQWdJQ0JWYVc1ME9FTnNZVzF3WldSQmRIUnlhV0oxZEdVNklFOHdMQW9nSUNBZ1ZXbHVkRGhEYkdGdGNHVmtRblZtWm1WeVFYUjBjbWxpZFhSbE9pQkxZeXdLSUNBZ0lGVnVhV1p2Y20wNklHZHZMQW9nSUNBZ1ZXNXBabTl5YlhOTWFXSTZJR2xsTEFvZ0lDQWdWVzVwWm05eWJYTlZkR2xzY3pvZ2RXWXNDaUFnSUNCVmJuTnBaMjVsWkVKNWRHVlVlWEJsT2lCeWJpd0tJQ0FnSUZWdWMybG5ibVZrU1c1ME1qUTRWSGx3WlRvZ1ZHa3NDaUFnSUNCVmJuTnBaMjVsWkVsdWRGUjVjR1U2SUZCekxBb2dJQ0FnVlc1emFXZHVaV1JUYUc5eWREUTBORFJVZVhCbE9pQldkU3dLSUNBZ0lGVnVjMmxuYm1Wa1UyaHZjblExTlRVeFZIbHdaVG9nVjNVc0NpQWdJQ0JWYm5OcFoyNWxaRk5vYjNKME5UWTFWSGx3WlRvZ2NYVXNDaUFnSUNCVmJuTnBaMjVsWkZOb2IzSjBWSGx3WlRvZ1kzSXNDaUFnSUNCV1UwMVRhR0ZrYjNkTllYQTZJR2x5TEFvZ0lDQWdWbVZqZEc5eU1qb2dXQ3dLSUNBZ0lGWmxZM1J2Y2pNNklFMHNDaUFnSUNCV1pXTjBiM0kwT2lCV1pTd0tJQ0FnSUZabFkzUnZja3RsZVdaeVlXMWxWSEpoWTJzNklFTnlMQW9nSUNBZ1ZtVnlkR1Y0T2lCT01Dd0tJQ0FnSUZabGNuUmxlRU52Ykc5eWN6b2dSVEFzQ2lBZ0lDQldhV1JsYjFSbGVIUjFjbVU2SUhkb0xBb2dJQ0FnVjJWaVIwd3hVbVZ1WkdWeVpYSTZJRjlvTEFvZ0lDQWdWMlZpUjB4RGRXSmxVbVZ1WkdWeVZHRnlaMlYwT2lCcWN5d0tJQ0FnSUZkbFlrZE1UWFZzZEdsd2JHVlNaVzVrWlhKVVlYSm5aWFJ6T2lCYVl5d0tJQ0FnSUZkbFlrZE1UWFZzZEdsellXMXdiR1ZTWlc1a1pYSlVZWEpuWlhRNklGaHpMQW9nSUNBZ1YyVmlSMHhTWlc1a1pYSlVZWEpuWlhRNklFRjBMQW9nSUNBZ1YyVmlSMHhTWlc1a1pYSlVZWEpuWlhSRGRXSmxPaUJSTUN3S0lDQWdJRmRsWWtkTVVtVnVaR1Z5WlhJNklIRmxMQW9nSUNBZ1YyVmlSMHhWZEdsc2N6b2dSWGdzQ2lBZ0lDQlhhWEpsWm5KaGJXVkhaVzl0WlhSeWVUb2dSV0VzQ2lBZ0lDQlhhWEpsWm5KaGJXVklaV3h3WlhJNklGb3dMQW9nSUNBZ1YzSmhjRUZ5YjNWdVpFVnVaR2x1WnpvZ1QzTXNDaUFnSUNCWVNGSk1iMkZrWlhJNklDUXdMQW9nSUNBZ1dtVnliME4xY25aaGRIVnlaVVZ1WkdsdVp6b2dUV2tzQ2lBZ0lDQmFaWEp2Um1GamRHOXlPaUI0ZFN3S0lDQWdJRnBsY205VGJHOXdaVVZ1WkdsdVp6b2dZbWtzQ2lBZ0lDQmFaWEp2VTNSbGJtTnBiRTl3T2lCTGVTd0tJQ0FnSUhOU1IwSkZibU52WkdsdVp6b2dUMmtLZlRzS1puVnVZM1JwYjI0Z1oyVjBWMlZpUjB4RmNuSnZjazFsYzNOaFoyVW9LU0I3Q2lBZ0lDQnlaWFIxY200Z1oyVjBSWEp5YjNKTlpYTnpZV2RsS0RFcE93cDlDbVoxYm1OMGFXOXVJR2RsZEVWeWNtOXlUV1Z6YzJGblpTaDJaWEp6YVc5dUtTQjdDaUFnSUNCMllYSWdibUZ0WlhNZ1BTQjdDaUFnSUNBZ0lDQWdNVG9nSWxkbFlrZE1JaXdLSUNBZ0lDQWdJQ0F5T2lBaVYyVmlSMHdnTWlJS0lDQWdJSDA3Q2lBZ0lDQjJZWElnWTI5dWRHVjRkSE1nUFNCN0NpQWdJQ0FnSUNBZ01Ub2dkMmx1Wkc5M0xsZGxZa2RNVW1WdVpHVnlhVzVuUTI5dWRHVjRkQ3dLSUNBZ0lDQWdJQ0F5T2lCM2FXNWtiM2N1VjJWaVIwd3lVbVZ1WkdWeWFXNW5RMjl1ZEdWNGRBb2dJQ0FnZlRzS0lDQWdJSFpoY2lCdFpYTnpZV2RsSUQwZ0oxbHZkWElnSkRBZ1pHOWxjeUJ1YjNRZ2MyVmxiU0IwYnlCemRYQndiM0owSUR4aElHaHlaV1k5SW1oMGRIQTZMeTlyYUhKdmJtOXpMbTl5Wnk5M1pXSm5iQzkzYVd0cEwwZGxkSFJwYm1kZllWOVhaV0pIVEY5SmJYQnNaVzFsYm5SaGRHbHZiaUlnYzNSNWJHVTlJbU52Ykc5eU9pTXdNREFpUGlReFBDOWhQaWM3Q2lBZ0lDQjJZWElnWld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9JbVJwZGlJcE93b2dJQ0FnWld4bGJXVnVkQzVwWkNBOUlDSjNaV0puYkcxbGMzTmhaMlVpT3dvZ0lDQWdaV3hsYldWdWRDNXpkSGxzWlM1bWIyNTBSbUZ0YVd4NUlEMGdJbTF2Ym05emNHRmpaU0k3Q2lBZ0lDQmxiR1Z0Wlc1MExuTjBlV3hsTG1admJuUlRhWHBsSUQwZ0lqRXpjSGdpT3dvZ0lDQWdaV3hsYldWdWRDNXpkSGxzWlM1bWIyNTBWMlZwWjJoMElEMGdJbTV2Y20xaGJDSTdDaUFnSUNCbGJHVnRaVzUwTG5OMGVXeGxMblJsZUhSQmJHbG5iaUE5SUNKalpXNTBaWElpT3dvZ0lDQWdaV3hsYldWdWRDNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a0lEMGdJaU5tWm1ZaU93b2dJQ0FnWld4bGJXVnVkQzV6ZEhsc1pTNWpiMnh2Y2lBOUlDSWpNREF3SWpzS0lDQWdJR1ZzWlcxbGJuUXVjM1I1YkdVdWNHRmtaR2x1WnlBOUlDSXhMalZsYlNJN0NpQWdJQ0JsYkdWdFpXNTBMbk4wZVd4bExuZHBaSFJvSUQwZ0lqUXdNSEI0SWpzS0lDQWdJR1ZzWlcxbGJuUXVjM1I1YkdVdWJXRnlaMmx1SUQwZ0lqVmxiU0JoZFhSdklEQWlPd29nSUNBZ2FXWWdLR052Ym5SbGVIUnpXM1psY25OcGIyNWRLU0I3Q2lBZ0lDQWdJQ0FnYldWemMyRm5aU0E5SUcxbGMzTmhaMlV1Y21Wd2JHRmpaU2dpSkRBaUxDQWlaM0poY0docFkzTWdZMkZ5WkNJcE93b2dJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0J0WlhOellXZGxJRDBnYldWemMyRm5aUzV5WlhCc1lXTmxLQ0lrTUNJc0lDSmljbTkzYzJWeUlpazdDaUFnSUNCOUNpQWdJQ0J0WlhOellXZGxJRDBnYldWemMyRm5aUzV5WlhCc1lXTmxLQ0lrTVNJc0lHNWhiV1Z6VzNabGNuTnBiMjVkS1RzS0lDQWdJR1ZzWlcxbGJuUXVhVzV1WlhKSVZFMU1JRDBnYldWemMyRm5aVHNLSUNBZ0lISmxkSFZ5YmlCbGJHVnRaVzUwT3dwOUNtTnZibk4wSUhCcGVHVnNVbUYwYVc4Z1BTQjNhVzVrYjNjdVpHVjJhV05sVUdsNFpXeFNZWFJwYnlCOGZDQXhMakE3Q21aMWJtTjBhVzl1SUdWMlpXNTBNbk5qWlc1bFgzQnBlR1ZzS0hOalpXNWxMQ0JsZG1WdWRDa2dld29nSUNBZ1kyOXVjM1FnZXlCallXNTJZWE1nSUgwZ1BTQnpZMlZ1WlM1elkzSmxaVzQ3Q2lBZ0lDQmpiMjV6ZENCeVpXTjBJRDBnWTJGdWRtRnpMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE93b2dJQ0FnWTI5dWMzUWdlQ0E5SUNobGRtVnVkQzVqYkdsbGJuUllJQzBnY21WamRDNXNaV1owS1NBcUlIQnBlR1ZzVW1GMGFXODdDaUFnSUNCamIyNXpkQ0I1SUQwZ0tISmxZM1F1YUdWcFoyaDBJQzBnS0dWMlpXNTBMbU5zYVdWdWRGa2dMU0J5WldOMExuUnZjQ2twSUNvZ2NHbDRaV3hTWVhScGJ6c0tJQ0FnSUhKbGRIVnliaUJiQ2lBZ0lDQWdJQ0FnZUN3S0lDQWdJQ0FnSUNCNUNpQWdJQ0JkT3dwOUNtWjFibU4wYVc5dUlFbGtaVzUwYVhSNU5IZzBLQ2tnZXdvZ0lDQWdjbVYwZFhKdUlHNWxkeUJ3WlNncE93cDlDbVoxYm1OMGFXOXVJR2x1WDNOalpXNWxLSE5qWlc1bExDQnRiM1Z6WlY5bGRtVnVkQ2tnZXdvZ0lDQWdZMjl1YzNRZ1czZ3NJSGxkSUQwZ1pYWmxiblF5YzJObGJtVmZjR2w0Wld3b2MyTmxibVVzSUcxdmRYTmxYMlYyWlc1MEtUc0tJQ0FnSUdOdmJuTjBJRnR6ZUN3Z2Mza3NJSE4zTENCemFGMGdQU0J6WTJWdVpTNXdhWGhsYkdGeVpXRXVkbUZzZFdVN0NpQWdJQ0J5WlhSMWNtNGdlQ0ErUFNCemVDQW1KaUI0SUR3Z2MzZ2dLeUJ6ZHlBbUppQjVJRDQ5SUhONUlDWW1JSGtnUENCemVTQXJJSE5vT3dwOUNtWjFibU4wYVc5dUlHRjBkR0ZqYUY4elpGOWpZVzFsY21Fb1kyRnVkbUZ6TENCdFlXdHBaVjlqWVcxbGNtRXNJR05oYlROa0xDQnpZMlZ1WlNrZ2V3b2dJQ0FnYVdZZ0tHTmhiVE5rSUQwOVBTQjFibVJsWm1sdVpXUXBJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNCOUNpQWdJQ0JqYjI1emRDQmJkeXdnYUYwZ1BTQnRZV3RwWlY5allXMWxjbUV1Y21WemIyeDFkR2x2Ymk1MllXeDFaVHNLSUNBZ0lHTnZibk4wSUdOaGJXVnlZU0E5SUc1bGR5QjFkQ2hqWVcwelpDNW1iM1lzSUhjZ0x5Qm9MQ0JqWVcwelpDNXVaV0Z5TENCallXMHpaQzVtWVhJcE93b2dJQ0FnWTI5dWMzUWdZMlZ1ZEdWeUlEMGdibVYzSUUwb0xpNHVZMkZ0TTJRdWJHOXZhMkYwS1RzS0lDQWdJR05oYldWeVlTNTFjQ0E5SUc1bGR5Qk5LQzR1TG1OaGJUTmtMblZ3ZG1WamRHOXlLVHNLSUNBZ0lHTmhiV1Z5WVM1d2IzTnBkR2x2Ymk1elpYUW9MaTR1WTJGdE0yUXVaWGxsY0c5emFYUnBiMjRwT3dvZ0lDQWdZMkZ0WlhKaExteHZiMnRCZENoalpXNTBaWElwT3dvZ0lDQWdablZ1WTNScGIyNGdkWEJrWVhSbEtDa2dld29nSUNBZ0lDQWdJR052Ym5OMElIWnBaWGNnUFNCallXMWxjbUV1YldGMGNtbDRWMjl5YkdSSmJuWmxjbk5sT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ5YjJwbFkzUnBiMjRnUFNCallXMWxjbUV1Y0hKdmFtVmpkR2x2YmsxaGRISnBlRHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmJkMmxrZEdnc0lHaGxhV2RvZEYwZ1BTQmpZVzB6WkM1eVpYTnZiSFYwYVc5dUxuWmhiSFZsT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJRnQ0TENCNUxDQjZYU0E5SUdOaGJXVnlZUzV3YjNOcGRHbHZianNLSUNBZ0lDQWdJQ0JqWVcxbGNtRXVZWE53WldOMElEMGdkMmxrZEdnZ0x5Qm9aV2xuYUhRN0NpQWdJQ0FnSUNBZ1kyRnRaWEpoTG5Wd1pHRjBaVkJ5YjJwbFkzUnBiMjVOWVhSeWFYZ29LVHNLSUNBZ0lDQWdJQ0JqWVcxbGNtRXVkWEJrWVhSbFYyOXliR1JOWVhSeWFYZ29LVHNLSUNBZ0lDQWdJQ0J0WVd0cFpWOWpZVzFsY21FdWRYQmtZWFJsWDIxaGRISnBZMlZ6S0hacFpYY3VaV3hsYldWdWRITXNJSEJ5YjJwbFkzUnBiMjR1Wld4bGJXVnVkSE1zSUZzS0lDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnc0NpQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2RBb2dJQ0FnSUNBZ0lGMHNJRnNLSUNBZ0lDQWdJQ0FnSUNBZ2VDd0tJQ0FnSUNBZ0lDQWdJQ0FnZVN3S0lDQWdJQ0FnSUNBZ0lDQWdlZ29nSUNBZ0lDQWdJRjBwT3dvZ0lDQWdmUW9nSUNBZ1kyRnRNMlF1Y21WemIyeDFkR2x2Ymk1dmJpaDFjR1JoZEdVcE93b2dJQ0FnWm5WdVkzUnBiMjRnWVdSa1RXOTFjMlZJWVc1a2JHVnlLR1J2YlU5aWFtVmpkQ3dnWkhKaFp5d2dlbTl2YlVsdUxDQjZiMjl0VDNWMEtTQjdDaUFnSUNBZ0lDQWdiR1YwSUhOMFlYSjBSSEpoWjFnZ1BTQnVkV3hzT3dvZ0lDQWdJQ0FnSUd4bGRDQnpkR0Z5ZEVSeVlXZFpJRDBnYm5Wc2JEc0tJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnRiM1Z6WlZkb1pXVnNTR0Z1Wkd4bGNpaGxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHVWdQU0IzYVc1a2IzY3VaWFpsYm5RZ2ZId2daVHNLSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwYmw5elkyVnVaU2h6WTJWdVpTd2daU2twSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtaV3gwWVNBOUlFMWhkR2d1YzJsbmJpaGxMbVJsYkhSaFdTazdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtaV3gwWVNBOVBTQXRNU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZW05dmJVOTFkQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1JsYkhSaElEMDlJREVwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhwdmIyMUpiaWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2JXOTFjMlZFYjNkdVNHRnVaR3hsY2lobEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhVzVmYzJObGJtVW9jMk5sYm1Vc0lHVXBLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25SRWNtRm5XQ0E5SUdVdVkyeHBaVzUwV0RzS0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25SRWNtRm5XU0E5SUdVdVkyeHBaVzUwV1RzS0lDQWdJQ0FnSUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ0YjNWelpVMXZkbVZJWVc1a2JHVnlLR1VwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGcGJsOXpZMlZ1WlNoelkyVnVaU3dnWlNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmpzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1JoY25SRWNtRm5XQ0E5UFQwZ2JuVnNiQ0I4ZkNCemRHRnlkRVJ5WVdkWklEMDlQU0J1ZFd4c0tTQnlaWFIxY200N0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa2NtRm5LU0JrY21GbktHVXVZMnhwWlc1MFdDQXRJSE4wWVhKMFJISmhaMWdzSUdVdVkyeHBaVzUwV1NBdElITjBZWEowUkhKaFoxa3BPd29nSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRVJ5WVdkWUlEMGdaUzVqYkdsbGJuUllPd29nSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRVJ5WVdkWklEMGdaUzVqYkdsbGJuUlpPd29nSUNBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHMXZkWE5sVlhCSVlXNWtiR1Z5S0dVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnBibDl6WTJWdVpTaHpZMlZ1WlN3Z1pTa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlUxdmRtVklZVzVrYkdWeUxtTmhiR3dvZEdocGN5d2daU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowUkhKaFoxZ2dQU0J1ZFd4c093b2dJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWRFUnlZV2RaSUQwZ2JuVnNiRHNLSUNBZ0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQmtiMjFQWW1wbFkzUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2lkMmhsWld3aUxDQnRiM1Z6WlZkb1pXVnNTR0Z1Wkd4bGNpazdDaUFnSUNBZ0lDQWdaRzl0VDJKcVpXTjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbTF2ZFhObFpHOTNiaUlzSUcxdmRYTmxSRzkzYmtoaGJtUnNaWElwT3dvZ0lDQWdJQ0FnSUdSdmJVOWlhbVZqZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKdGIzVnpaVzF2ZG1VaUxDQnRiM1Z6WlUxdmRtVklZVzVrYkdWeUtUc0tJQ0FnSUNBZ0lDQmtiMjFQWW1wbFkzUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2liVzkxYzJWMWNDSXNJRzF2ZFhObFZYQklZVzVrYkdWeUtUc0tJQ0FnSUgwS0lDQWdJR1oxYm1OMGFXOXVJR1J5WVdjb1pHVnNkR0ZZTENCa1pXeDBZVmtwSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0J5WVdSUVpYSlFhWGhsYkNBOUlFMWhkR2d1VUVrZ0x5QTBOVEE3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZzZEdGUWFHa2dQU0J5WVdSUVpYSlFhWGhsYkNBcUlHUmxiSFJoV0RzS0lDQWdJQ0FnSUNCamIyNXpkQ0JrWld4MFlWUm9aWFJoSUQwZ2NtRmtVR1Z5VUdsNFpXd2dLaUJrWld4MFlWazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHOXpJRDBnWTJGdFpYSmhMbkJ2YzJsMGFXOXVMbk4xWWloalpXNTBaWElwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSEpoWkdsMWN5QTlJSEJ2Y3k1c1pXNW5kR2dvS1RzS0lDQWdJQ0FnSUNCc1pYUWdkR2hsZEdFZ1BTQk5ZWFJvTG1GamIzTW9jRzl6TG5vZ0x5QnlZV1JwZFhNcE93b2dJQ0FnSUNBZ0lHeGxkQ0J3YUdrZ1BTQk5ZWFJvTG1GMFlXNHlLSEJ2Y3k1NUxDQndiM011ZUNrN0NpQWdJQ0FnSUNBZ2RHaGxkR0VnUFNCTllYUm9MbTFwYmloTllYUm9MbTFoZUNoMGFHVjBZU0F0SUdSbGJIUmhWR2hsZEdFc0lEQXBMQ0JOWVhSb0xsQkpLVHNLSUNBZ0lDQWdJQ0J3YUdrZ0xUMGdaR1ZzZEdGUWFHazdDaUFnSUNBZ0lDQWdjRzl6TG5nZ1BTQnlZV1JwZFhNZ0tpQk5ZWFJvTG5OcGJpaDBhR1YwWVNrZ0tpQk5ZWFJvTG1OdmN5aHdhR2twT3dvZ0lDQWdJQ0FnSUhCdmN5NTVJRDBnY21Ga2FYVnpJQ29nVFdGMGFDNXphVzRvZEdobGRHRXBJQ29nVFdGMGFDNXphVzRvY0docEtUc0tJQ0FnSUNBZ0lDQndiM011ZWlBOUlISmhaR2wxY3lBcUlFMWhkR2d1WTI5ektIUm9aWFJoS1RzS0lDQWdJQ0FnSUNCallXMWxjbUV1Y0c5emFYUnBiMjR1WVdSa0tHTmxiblJsY2lrN0NpQWdJQ0FnSUNBZ1kyRnRaWEpoTG14dmIydEJkQ2hqWlc1MFpYSXBPd29nSUNBZ0lDQWdJSFZ3WkdGMFpTZ3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZW05dmJVbHVLQ2tnZXdvZ0lDQWdJQ0FnSUdOaGJXVnlZUzV3YjNOcGRHbHZiaTV6ZFdJb1kyVnVkR1Z5S1M1dGRXeDBhWEJzZVZOallXeGhjaWd3TGprcExtRmtaQ2hqWlc1MFpYSXBPd29nSUNBZ0lDQWdJSFZ3WkdGMFpTZ3BPd29nSUNBZ2ZRb2dJQ0FnWm5WdVkzUnBiMjRnZW05dmJVOTFkQ2dwSUhzS0lDQWdJQ0FnSUNCallXMWxjbUV1Y0c5emFYUnBiMjR1YzNWaUtHTmxiblJsY2lrdWJYVnNkR2x3YkhsVFkyRnNZWElvTVM0eEtTNWhaR1FvWTJWdWRHVnlLVHNLSUNBZ0lDQWdJQ0IxY0dSaGRHVW9LVHNLSUNBZ0lIMEtJQ0FnSUdGa1pFMXZkWE5sU0dGdVpHeGxjaWhqWVc1MllYTXNJR1J5WVdjc0lIcHZiMjFKYml3Z2VtOXZiVTkxZENrN0NuMEtablZ1WTNScGIyNGdiWFZzS0dFc0lHSXBJSHNLSUNBZ0lISmxkSFZ5YmlCaUxtTnNiMjVsS0NrdWJYVnNkR2x3Ykhrb1lTazdDbjBLWm5WdVkzUnBiMjRnYjNKMGFHOW5jbUZ3YUdsamNISnZhbVZqZEdsdmJpaHNaV1owTENCeWFXZG9kQ3dnWW05MGRHOXRMQ0IwYjNBc0lIcHVaV0Z5TENCNlptRnlLU0I3Q2lBZ0lDQnlaWFIxY200Z1d3b2dJQ0FnSUNBZ0lESWdMeUFvY21sbmFIUWdMU0JzWldaMEtTd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lESWdMeUFvZEc5d0lDMGdZbTkwZEc5dEtTd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lDMHlJQzhnS0hwbVlYSWdMU0I2Ym1WaGNpa3NDaUFnSUNBZ0lDQWdNQ3dLSUNBZ0lDQWdJQ0F0S0hKcFoyaDBJQ3NnYkdWbWRDa2dMeUFvY21sbmFIUWdMU0JzWldaMEtTd0tJQ0FnSUNBZ0lDQXRLSFJ2Y0NBcklHSnZkSFJ2YlNrZ0x5QW9kRzl3SUMwZ1ltOTBkRzl0S1N3S0lDQWdJQ0FnSUNBdEtIcG1ZWElnS3lCNmJtVmhjaWtnTHlBb2VtWmhjaUF0SUhwdVpXRnlLU3dLSUNBZ0lDQWdJQ0F4Q2lBZ0lDQmRPd3A5Q21aMWJtTjBhVzl1SUhCcGVHVnNYM053WVdObFgybHVkbVZ5YzJVb2R5d2dhQ3dnYm1WaGNpa2dld29nSUNBZ2NtVjBkWEp1SUZzS0lDQWdJQ0FnSUNBd0xqVWdLaUIzTEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUM0MUlDb2dhQ3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJRzVsWVhJc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMalVnS2lCM0xBb2dJQ0FnSUNBZ0lEQXVOU0FxSUdnc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXhDaUFnSUNCZE93cDlDbVoxYm1OMGFXOXVJSEpsYkdGMGFYWmxYM053WVdObEtDa2dld29nSUNBZ1kyOXVjM1FnY21Wc1lYUnBkbVVnUFNCSlpHVnVkR2wwZVRSNE5DZ3BPd29nSUNBZ2NtVnNZWFJwZG1VdVpuSnZiVUZ5Y21GNUtGc0tJQ0FnSUNBZ0lDQXlMQW9nSUNBZ0lDQWdJREFzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBd0xBb2dJQ0FnSUNBZ0lEQXNDaUFnSUNBZ0lDQWdNaXdLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURBc0NpQWdJQ0FnSUNBZ01Dd0tJQ0FnSUNBZ0lDQXdMQW9nSUNBZ0lDQWdJREVzQ2lBZ0lDQWdJQ0FnTUN3S0lDQWdJQ0FnSUNBdE1Td0tJQ0FnSUNBZ0lDQXRNU3dLSUNBZ0lDQWdJQ0F3TEFvZ0lDQWdJQ0FnSURFS0lDQWdJRjBwT3dvZ0lDQWdjbVYwZFhKdUlISmxiR0YwYVhabE93cDlDbU5zWVhOeklFMWhhMmxsUTJGdFpYSmhJSHNLSUNBZ0lHTnZibk4wY25WamRHOXlLQ2w3Q2lBZ0lDQWdJQ0FnZEdocGN5NTJhV1YzSUQwZ2JtVjNJR2R2S0Vsa1pXNTBhWFI1TkhnMEtDa3BPd29nSUNBZ0lDQWdJSFJvYVhNdWNISnZhbVZqZEdsdmJpQTlJRzVsZHlCbmJ5aEpaR1Z1ZEdsMGVUUjROQ2dwS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjJwbFkzUnBiMjUyYVdWM0lEMGdibVYzSUdkdktFbGtaVzUwYVhSNU5IZzBLQ2twT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4ZmMzQmhZMlVnUFNCdVpYY2daMjhvU1dSbGJuUnBkSGswZURRb0tTazdDaUFnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRjl6Y0dGalpWOXBiblpsY25ObElEMGdibVYzSUdkdktFbGtaVzUwYVhSNU5IZzBLQ2twT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2YW1WamRHbHZiblpwWlhkZmFXNTJaWEp6WlNBOUlHNWxkeUJuYnloSlpHVnVkR2wwZVRSNE5DZ3BLVHNLSUNBZ0lDQWdJQ0IwYUdsekxuSmxiR0YwYVhabFgzTndZV05sSUQwZ2JtVjNJR2R2S0hKbGJHRjBhWFpsWDNOd1lXTmxLQ2twT3dvZ0lDQWdJQ0FnSUhSb2FYTXVjbVZzWVhScGRtVmZhVzUyWlhKelpTQTlJRzVsZHlCbmJ5aHlaV3hoZEdsMlpWOXpjR0ZqWlNncExtbHVkbVZ5ZENncEtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1Oc2FYQmZjM0JoWTJVZ1BTQnVaWGNnWjI4b1NXUmxiblJwZEhrMGVEUW9LU2s3Q2lBZ0lDQWdJQ0FnZEdocGN5NXlaWE52YkhWMGFXOXVJRDBnYm1WM0lHZHZLRzVsZHlCWUtDa3BPd29nSUNBZ0lDQWdJSFJvYVhNdVpYbGxjRzl6YVhScGIyNGdQU0J1WlhjZ1oyOG9ibVYzSUUwb0tTazdDaUFnSUNBZ0lDQWdkR2hwY3k1d2NtVndjbTlxWldOMGFXOXVjeUE5SUh0OU93b2dJQ0FnZlFvZ0lDQWdZMkZzWTNWc1lYUmxYMjFoZEhKcFkyVnpLQ2tnZXdvZ0lDQWdJQ0FnSUdOdmJuTjBJRnQzTENCb1hTQTlJSFJvYVhNdWNtVnpiMngxZEdsdmJpNTJZV3gxWlRzS0lDQWdJQ0FnSUNCamIyNXpkQ0J1WldGeVkyeHBjQ0E5SUMweE1GOHdNREE3Q2lBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkY5emNHRmpaUzUyWVd4MVpTNW1jbTl0UVhKeVlYa29iM0owYUc5bmNtRndhR2xqY0hKdmFtVmpkR2x2Ymlnd0xDQjNMQ0F3TENCb0xDQnVaV0Z5WTJ4cGNDd2dNVEJmTURBd0tTazdDaUFnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRjl6Y0dGalpWOXBiblpsY25ObExuWmhiSFZsTG1aeWIyMUJjbkpoZVNod2FYaGxiRjl6Y0dGalpWOXBiblpsY25ObEtIY3NJR2dzSUc1bFlYSmpiR2x3S1NrN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKdmFsOTJhV1YzSUQwZ2JYVnNLSFJvYVhNdWRtbGxkeTUyWVd4MVpTd2dkR2hwY3k1d2NtOXFaV04wYVc5dUxuWmhiSFZsS1RzS0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjJwbFkzUnBiMjUyYVdWM0xuWmhiSFZsSUQwZ2NISnZhbDkyYVdWM093b2dJQ0FnSUNBZ0lIUm9hWE11Y0hKdmFtVmpkR2x2Ym5acFpYZGZhVzUyWlhKelpTNTJZV3gxWlNBOUlIQnliMnBmZG1sbGR5NWpiRzl1WlNncExtbHVkbVZ5ZENncE93b2dJQ0FnSUNBZ0lFOWlhbVZqZEM1clpYbHpLSFJvYVhNdWNISmxjSEp2YW1WamRHbHZibk1wTG1admNrVmhZMmdvS0d0bGVTazlQbnNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnVzNOd1lXTmxMQ0J0WVhKclpYSnpjR0ZqWlYwZ1BTQnJaWGt1YzNCc2FYUW9JaXdpS1RzS0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtVndjbTlxWldOMGFXOXVjMXRyWlhsZExuWmhiSFZsSUQwZ2RHaHBjeTVqWVd4amRXeGhkR1ZmY0hKbGNISnZhbVZqZEdsdmJsOXRZWFJ5YVhnb2MzQmhZMlVzSUcxaGNtdGxjbk53WVdObEtUc0tJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lIMEtJQ0FnSUhWd1pHRjBaVjl0WVhSeWFXTmxjeWgyYVdWM0xDQndjbTlxWldOMGFXOXVMQ0J5WlhOdmJIVjBhVzl1TENCbGVXVndiM01wSUhzS0lDQWdJQ0FnSUNCMGFHbHpMblpwWlhjdWRtRnNkV1V1Wm5KdmJVRnljbUY1S0hacFpYY3BPd29nSUNBZ0lDQWdJSFJvYVhNdWNISnZhbVZqZEdsdmJpNTJZV3gxWlM1bWNtOXRRWEp5WVhrb2NISnZhbVZqZEdsdmJpazdDaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTnZiSFYwYVc5dUxuWmhiSFZsTG1aeWIyMUJjbkpoZVNoeVpYTnZiSFYwYVc5dUtUc0tJQ0FnSUNBZ0lDQjBhR2x6TG1WNVpYQnZjMmwwYVc5dUxuWmhiSFZsTG1aeWIyMUJjbkpoZVNobGVXVndiM01wT3dvZ0lDQWdJQ0FnSUhSb2FYTXVZMkZzWTNWc1lYUmxYMjFoZEhKcFkyVnpLQ2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVPd29nSUNBZ2ZRb2dJQ0FnWTJ4cGNGOTBiMTl6Y0dGalpTaHpjR0ZqWlNrZ2V3b2dJQ0FnSUNBZ0lHbG1JQ2h6Y0dGalpTQTlQVDBnSW1SaGRHRWlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJ5YjJwbFkzUnBiMjUyYVdWM1gybHVkbVZ5YzJVdWRtRnNkV1U3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoemNHRmpaU0E5UFQwZ0luQnBlR1ZzSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2FYaGxiRjl6Y0dGalpWOXBiblpsY25ObExuWmhiSFZsT3dvZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MzQmhZMlVnUFQwOUlDSnlaV3hoZEdsMlpTSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZzWVhScGRtVmZhVzUyWlhKelpTNTJZV3gxWlRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITndZV05sSUQwOVBTQWlZMnhwY0NJcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeHBjRjl6Y0dGalpTNTJZV3gxWlRzS0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lGTndZV05sSUNSN2MzQmhZMlY5SUc1dmRDQnlaV052WjI1cGVtVmtZQ2s3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2MzQmhZMlZmZEc5ZlkyeHBjQ2h6Y0dGalpTa2dld29nSUNBZ0lDQWdJR2xtSUNoemNHRmpaU0E5UFQwZ0ltUmhkR0VpS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIycGxZM1JwYjI1MmFXVjNMblpoYkhWbE93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM0JoWTJVZ1BUMDlJQ0p3YVhobGJDSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR2w0Wld4ZmMzQmhZMlV1ZG1Gc2RXVTdDaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6Y0dGalpTQTlQVDBnSW5KbGJHRjBhWFpsSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXeGhkR2wyWlY5emNHRmpaUzUyWVd4MVpUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE53WVdObElEMDlQU0FpWTJ4cGNDSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnhwY0Y5emNHRmpaUzUyWVd4MVpUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRk53WVdObElDUjdjM0JoWTJWOUlHNXZkQ0J5WldOdloyNXBlbVZrWUNrN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnZlFvZ0lDQWdZMkZzWTNWc1lYUmxYM0J5WlhCeWIycGxZM1JwYjI1ZmJXRjBjbWw0S0hOd1lXTmxMQ0J0WVhKclpYSnpjR0ZqWlNrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdOd0lEMGdkR2hwY3k1amJHbHdYM1J2WDNOd1lXTmxLRzFoY210bGNuTndZV05sS1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J6WXlBOUlIUm9hWE11YzNCaFkyVmZkRzlmWTJ4cGNDaHpjR0ZqWlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxMWJDaHpZeXdnWTNBcE93b2dJQ0FnZlFvZ0lDQWdjSEpsY0hKdmFtVmpkR2x2Ymw5dFlYUnlhWGdvYzNCaFkyVXNJRzFoY210bGNuTndZV05sS1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNUlEMGdXd29nSUNBZ0lDQWdJQ0FnSUNCemNHRmpaU3dLSUNBZ0lDQWdJQ0FnSUNBZ2JXRnlhMlZ5YzNCaFkyVUtJQ0FnSUNBZ0lDQmRPd29nSUNBZ0lDQWdJR052Ym5OMElHMWhkSEpwZUY5MWJtbG1iM0p0SUQwZ2RHaHBjeTV3Y21Wd2NtOXFaV04wYVc5dWMxdHJaWGxkT3dvZ0lDQWdJQ0FnSUdsbUlDaHRZWFJ5YVhoZmRXNXBabTl5YlNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0YwY21sNFgzVnVhV1p2Y20wN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JXRjBjbWw0SUQwZ2RHaHBjeTVqWVd4amRXeGhkR1ZmY0hKbGNISnZhbVZqZEdsdmJsOXRZWFJ5YVhnb2MzQmhZMlVzSUcxaGNtdGxjbk53WVdObEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkVzVwWm05eWJTQTlJRzVsZHlCbmJ5aHRZWFJ5YVhncE93b2dJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWEJ5YjJwbFkzUnBiMjV6VzJ0bGVWMGdQU0IxYm1sbWIzSnRPd29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZFc1cFptOXliVHNLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlDbjBLWTI5dWMzUWdjMk5sYm1WZlkyRmphR1VnUFNCN2ZUc0tZMjl1YzNRZ2NHeHZkRjlqWVdOb1pTQTlJSHQ5T3dwamIyNXpkQ0JVUlZoVVZWSkZYMEZVVEVGVElEMGdXd29nSUNBZ2RXNWtaV1pwYm1Wa0NsMDdDbVoxYm1OMGFXOXVJR0ZrWkY5elkyVnVaU2h6WTJWdVpWOXBaQ3dnZEdoeVpXVmZjMk5sYm1VcElIc0tJQ0FnSUhOalpXNWxYMk5oWTJobFczTmpaVzVsWDJsa1hTQTlJSFJvY21WbFgzTmpaVzVsT3dwOUNtWjFibU4wYVc5dUlHWnBibVJmYzJObGJtVW9jMk5sYm1WZmFXUXBJSHNLSUNBZ0lISmxkSFZ5YmlCelkyVnVaVjlqWVdOb1pWdHpZMlZ1WlY5cFpGMDdDbjBLWm5WdVkzUnBiMjRnWkdWc1pYUmxYM05qWlc1bEtITmpaVzVsWDJsa0tTQjdDaUFnSUNCamIyNXpkQ0J6WTJWdVpTQTlJSE5qWlc1bFgyTmhZMmhsVzNOalpXNWxYMmxrWFRzS0lDQWdJR2xtSUNnaGMyTmxibVVwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTQ3Q2lBZ0lDQjlDaUFnSUNCM2FHbHNaU2h6WTJWdVpTNWphR2xzWkhKbGJpNXNaVzVuZEdnZ1BpQXdLWHNLSUNBZ0lDQWdJQ0J6WTJWdVpTNXlaVzF2ZG1Vb2MyTmxibVV1WTJocGJHUnlaVzViTUYwcE93b2dJQ0FnZlFvZ0lDQWdaR1ZzWlhSbElITmpaVzVsWDJOaFkyaGxXM05qWlc1bFgybGtYVHNLZlFwbWRXNWpkR2x2YmlCbWFXNWtYM0JzYjNSektIQnNiM1JmZFhWcFpITXBJSHNLSUNBZ0lHTnZibk4wSUhCc2IzUnpJRDBnVzEwN0NpQWdJQ0J3Ykc5MFgzVjFhV1J6TG1admNrVmhZMmdvS0dsa0tUMCtld29nSUNBZ0lDQWdJR052Ym5OMElIQnNiM1FnUFNCd2JHOTBYMk5oWTJobFcybGtYVHNLSUNBZ0lDQWdJQ0JwWmlBb2NHeHZkQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQndiRzkwY3k1d2RYTm9LSEJzYjNRcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwcE93b2dJQ0FnY21WMGRYSnVJSEJzYjNSek93cDlDbVoxYm1OMGFXOXVJR1JsYkdWMFpWOXpZMlZ1WlhNb2MyTmxibVZmZFhWcFpITXNJSEJzYjNSZmRYVnBaSE1wSUhzS0lDQWdJSEJzYjNSZmRYVnBaSE11Wm05eVJXRmphQ2dvY0d4dmRGOXBaQ2s5UG5zS0lDQWdJQ0FnSUNCa1pXeGxkR1VnY0d4dmRGOWpZV05vWlZ0d2JHOTBYMmxrWFRzS0lDQWdJSDBwT3dvZ0lDQWdjMk5sYm1WZmRYVnBaSE11Wm05eVJXRmphQ2dvYzJObGJtVmZhV1FwUFQ1N0NpQWdJQ0FnSUNBZ1pHVnNaWFJsWDNOalpXNWxLSE5qWlc1bFgybGtLVHNLSUNBZ0lIMHBPd3A5Q21aMWJtTjBhVzl1SUdsdWMyVnlkRjl3Ykc5MEtITmpaVzVsWDJsa0xDQndiRzkwWDJSaGRHRXBJSHNLSUNBZ0lHTnZibk4wSUhOalpXNWxJRDBnWm1sdVpGOXpZMlZ1WlNoelkyVnVaVjlwWkNrN0NpQWdJQ0J3Ykc5MFgyUmhkR0V1Wm05eVJXRmphQ2dvY0d4dmRDazlQbnNLSUNBZ0lDQWdJQ0JoWkdSZmNHeHZkQ2h6WTJWdVpTd2djR3h2ZENrN0NpQWdJQ0I5S1RzS2ZRcG1kVzVqZEdsdmJpQmtaV3hsZEdWZmNHeHZkSE1vYzJObGJtVmZhV1FzSUhCc2IzUmZkWFZwWkhNcElIc0tJQ0FnSUdOdmJuTnZiR1V1Ykc5bktHQmtaV3hsZEdsdVp5QndiRzkwY3lFNklDUjdjR3h2ZEY5MWRXbGtjMzFnS1RzS0lDQWdJR052Ym5OMElITmpaVzVsSUQwZ1ptbHVaRjl6WTJWdVpTaHpZMlZ1WlY5cFpDazdDaUFnSUNCamIyNXpkQ0J3Ykc5MGN5QTlJR1pwYm1SZmNHeHZkSE1vY0d4dmRGOTFkV2xrY3lrN0NpQWdJQ0J3Ykc5MGN5NW1iM0pGWVdOb0tDaHdLVDArZXdvZ0lDQWdJQ0FnSUhOalpXNWxMbkpsYlc5MlpTaHdLVHNLSUNBZ0lDQWdJQ0JrWld4bGRHVWdjR3h2ZEY5allXTm9aVnR3WFRzS0lDQWdJSDBwT3dwOUNtWjFibU4wYVc5dUlHTnZiblpsY25SZmRHVjRkSFZ5WlNoa1lYUmhLU0I3Q2lBZ0lDQmpiMjV6ZENCMFpYZ2dQU0JqY21WaGRHVmZkR1Y0ZEhWeVpTaGtZWFJoS1RzS0lDQWdJSFJsZUM1dVpXVmtjMVZ3WkdGMFpTQTlJSFJ5ZFdVN0NpQWdJQ0IwWlhndWJXbHVSbWxzZEdWeUlEMGdiVzlrVzJSaGRHRXViV2x1Um1sc2RHVnlYVHNLSUNBZ0lIUmxlQzV0WVdkR2FXeDBaWElnUFNCdGIyUmJaR0YwWVM1dFlXZEdhV3gwWlhKZE93b2dJQ0FnZEdWNExtRnVhWE52ZEhKdmNIa2dQU0JrWVhSaExtRnVhWE52ZEhKdmNIazdDaUFnSUNCMFpYZ3VkM0poY0ZNZ1BTQnRiMlJiWkdGMFlTNTNjbUZ3VTEwN0NpQWdJQ0JwWmlBb1pHRjBZUzV6YVhwbExteGxibWQwYUNBK0lERXBJSHNLSUNBZ0lDQWdJQ0IwWlhndWQzSmhjRlFnUFNCdGIyUmJaR0YwWVM1M2NtRndWRjA3Q2lBZ0lDQjlDaUFnSUNCcFppQW9aR0YwWVM1emFYcGxMbXhsYm1kMGFDQStJRElwSUhzS0lDQWdJQ0FnSUNCMFpYZ3VkM0poY0ZJZ1BTQnRiMlJiWkdGMFlTNTNjbUZ3VWwwN0NpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2RHVjRPd3A5Q21aMWJtTjBhVzl1SUdselgzUm9jbVZsWDJacGVHVmtYMkZ5Y21GNUtIWmhiSFZsS1NCN0NpQWdJQ0J5WlhSMWNtNGdkbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQnRiMlF1Vm1WamRHOXlNaUI4ZkNCMllXeDFaU0JwYm5OMFlXNWpaVzltSUcxdlpDNVdaV04wYjNJeklIeDhJSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdiVzlrTGxabFkzUnZjalFnZkh3Z2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCdGIyUXVUV0YwY21sNE5Ec0tmUXBtZFc1amRHbHZiaUIwYjE5MWJtbG1iM0p0S0dSaGRHRXBJSHNLSUNBZ0lHbG1JQ2hrWVhSaExuUjVjR1VnSVQwOUlIVnVaR1ZtYVc1bFpDa2dld29nSUNBZ0lDQWdJR2xtSUNoa1lYUmhMblI1Y0dVZ1BUMGdJbE5oYlhCc1pYSWlLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNTJaWEowWDNSbGVIUjFjbVVvWkdGMFlTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdWSGx3WlNBa2UyUmhkR0V1ZEhsd1pYMGdibTkwSUd0dWIzZHVZQ2s3Q2lBZ0lDQjlDaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoa1lYUmhLU0I4ZkNCQmNuSmhlVUoxWm1abGNpNXBjMVpwWlhjb1pHRjBZU2twSUhzS0lDQWdJQ0FnSUNCcFppQW9JV1JoZEdFdVpYWmxjbmtvS0hncFBUNTBlWEJsYjJZZ2VDQTlQVDBnSW01MWJXSmxjaUlwS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmtZWFJoT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9aR0YwWVM1c1pXNW5kR2dnUFQwZ01pa2dld29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lHMXZaQzVXWldOMGIzSXlLQ2t1Wm5KdmJVRnljbUY1S0dSaGRHRXBPd29nSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZUzVzWlc1bmRHZ2dQVDBnTXlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUcxdlpDNVdaV04wYjNJektDa3Vabkp2YlVGeWNtRjVLR1JoZEdFcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNXNaVzVuZEdnZ1BUMGdOQ2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRzF2WkM1V1pXTjBiM0kwS0NrdVpuSnZiVUZ5Y21GNUtHUmhkR0VwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNCcFppQW9aR0YwWVM1c1pXNW5kR2dnUFQwZ01UWXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYldGMElEMGdibVYzSUcxdlpDNU5ZWFJ5YVhnMEtDazdDaUFnSUNBZ0lDQWdJQ0FnSUcxaGRDNW1jbTl0UVhKeVlYa29aR0YwWVNrN0NpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnRZWFE3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUdSaGRHRTdDbjBLWm5WdVkzUnBiMjRnWkdWelpYSnBZV3hwZW1WZmRXNXBabTl5YlhNb1pHRjBZU2tnZXdvZ0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2UzMDdDaUFnSUNCbWIzSW9ZMjl1YzNRZ2JtRnRaU0JwYmlCa1lYUmhLWHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlNBOUlHUmhkR0ZiYm1GdFpWMDdDaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJR2x1YzNSaGJtTmxiMllnYlc5a0xsVnVhV1p2Y20wcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBXMjVoYldWZElEMGdkbUZzZFdVN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MyVnlJRDBnZEc5ZmRXNXBabTl5YlNoMllXeDFaU2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEZ0dVlXMWxYU0E5SUc1bGR5QnRiMlF1Vlc1cFptOXliU2h6WlhJcE93b2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN0NuMEtablZ1WTNScGIyNGdaR1Z6WlhKcFlXeHBlbVZmY0d4dmRDaGtZWFJoS1NCN0NpQWdJQ0JzWlhRZ2JXVnphRHNLSUNBZ0lHbG1JQ2dpYVc1emRHRnVZMlZmWVhSMGNtbGlkWFJsY3lJZ2FXNGdaR0YwWVNrZ2V3b2dJQ0FnSUNBZ0lHMWxjMmdnUFNCamNtVmhkR1ZmYVc1emRHRnVZMlZrWDIxbGMyZ29aR0YwWVNrN0NpQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJRzFsYzJnZ1BTQmpjbVZoZEdWZmJXVnphQ2hrWVhSaEtUc0tJQ0FnSUgwS0lDQWdJRzFsYzJndWJtRnRaU0E5SUdSaGRHRXVibUZ0WlRzS0lDQWdJRzFsYzJndVpuSjFjM1IxYlVOMWJHeGxaQ0E5SUdaaGJITmxPd29nSUNBZ2JXVnphQzV0WVhSeWFYaEJkWFJ2VlhCa1lYUmxJRDBnWm1Gc2MyVTdDaUFnSUNCdFpYTm9MbkJzYjNSZmRYVnBaQ0E5SUdSaGRHRXVkWFZwWkRzS0lDQWdJR052Ym5OMElIVndaR0YwWlY5MmFYTnBZbXhsSUQwZ0tIWXBQVDU3Q2lBZ0lDQWdJQ0FnYldWemFDNTJhWE5wWW14bElEMGdkanNLSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNCOU93b2dJQ0FnZFhCa1lYUmxYM1pwYzJsaWJHVW9aR0YwWVM1MmFYTnBZbXhsTG5aaGJIVmxLVHNLSUNBZ0lHUmhkR0V1ZG1semFXSnNaUzV2YmloMWNHUmhkR1ZmZG1semFXSnNaU2s3Q2lBZ0lDQmpiMjV1WldOMFgzVnVhV1p2Y20xektHMWxjMmdzSUdSaGRHRXVkVzVwWm05eWJWOTFjR1JoZEdWeUtUc0tJQ0FnSUdOdmJtNWxZM1JmWVhSMGNtbGlkWFJsY3lodFpYTm9MQ0JrWVhSaExtRjBkSEpwWW5WMFpWOTFjR1JoZEdWeUtUc0tJQ0FnSUhKbGRIVnliaUJ0WlhOb093cDlDbU52Ym5OMElFOU9YMDVGV0ZSZlNVNVRSVkpVSUQwZ2JtVjNJRk5sZENncE93cG1kVzVqZEdsdmJpQnZibDl1WlhoMFgybHVjMlZ5ZENobUtTQjdDaUFnSUNCUFRsOU9SVmhVWDBsT1UwVlNWQzVoWkdRb1ppazdDbjBLWm5WdVkzUnBiMjRnWVdSa1gzQnNiM1FvYzJObGJtVXNJSEJzYjNSZlpHRjBZU2tnZXdvZ0lDQWdZMjl1YzNRZ1kyRnRJRDBnYzJObGJtVXVkMmRzWDJOaGJXVnlZVHNLSUNBZ0lHTnZibk4wSUdsa1pXNTBhWFI1SUQwZ2JtVjNJRzF2WkM1VmJtbG1iM0p0S0c1bGR5QnRiMlF1VFdGMGNtbDROQ2dwS1RzS0lDQWdJR2xtSUNod2JHOTBYMlJoZEdFdVkyRnRYM053WVdObElEMDlJQ0prWVhSaElpa2dld29nSUNBZ0lDQWdJSEJzYjNSZlpHRjBZUzUxYm1sbWIzSnRjeTUyYVdWM0lEMGdZMkZ0TG5acFpYYzdDaUFnSUNBZ0lDQWdjR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMbkJ5YjJwbFkzUnBiMjRnUFNCallXMHVjSEp2YW1WamRHbHZianNLSUNBZ0lDQWdJQ0J3Ykc5MFgyUmhkR0V1ZFc1cFptOXliWE11Y0hKdmFtVmpkR2x2Ym5acFpYY2dQU0JqWVcwdWNISnZhbVZqZEdsdmJuWnBaWGM3Q2lBZ0lDQWdJQ0FnY0d4dmRGOWtZWFJoTG5WdWFXWnZjbTF6TG1WNVpYQnZjMmwwYVc5dUlEMGdZMkZ0TG1WNVpYQnZjMmwwYVc5dU93b2dJQ0FnZlNCbGJITmxJR2xtSUNod2JHOTBYMlJoZEdFdVkyRnRYM053WVdObElEMDlJQ0p3YVhobGJDSXBJSHNLSUNBZ0lDQWdJQ0J3Ykc5MFgyUmhkR0V1ZFc1cFptOXliWE11ZG1sbGR5QTlJR2xrWlc1MGFYUjVPd29nSUNBZ0lDQWdJSEJzYjNSZlpHRjBZUzUxYm1sbWIzSnRjeTV3Y205cVpXTjBhVzl1SUQwZ1kyRnRMbkJwZUdWc1gzTndZV05sT3dvZ0lDQWdJQ0FnSUhCc2IzUmZaR0YwWVM1MWJtbG1iM0p0Y3k1d2NtOXFaV04wYVc5dWRtbGxkeUE5SUdOaGJTNXdhWGhsYkY5emNHRmpaVHNLSUNBZ0lIMGdaV3h6WlNCcFppQW9jR3h2ZEY5a1lYUmhMbU5oYlY5emNHRmpaU0E5UFNBaWNtVnNZWFJwZG1VaUtTQjdDaUFnSUNBZ0lDQWdjR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMblpwWlhjZ1BTQnBaR1Z1ZEdsMGVUc0tJQ0FnSUNBZ0lDQndiRzkwWDJSaGRHRXVkVzVwWm05eWJYTXVjSEp2YW1WamRHbHZiaUE5SUdOaGJTNXlaV3hoZEdsMlpWOXpjR0ZqWlRzS0lDQWdJQ0FnSUNCd2JHOTBYMlJoZEdFdWRXNXBabTl5YlhNdWNISnZhbVZqZEdsdmJuWnBaWGNnUFNCallXMHVjbVZzWVhScGRtVmZjM0JoWTJVN0NpQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJSEJzYjNSZlpHRjBZUzUxYm1sbWIzSnRjeTUyYVdWM0lEMGdhV1JsYm5ScGRIazdDaUFnSUNBZ0lDQWdjR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMbkJ5YjJwbFkzUnBiMjRnUFNCcFpHVnVkR2wwZVRzS0lDQWdJQ0FnSUNCd2JHOTBYMlJoZEdFdWRXNXBabTl5YlhNdWNISnZhbVZqZEdsdmJuWnBaWGNnUFNCcFpHVnVkR2wwZVRzS0lDQWdJSDBLSUNBZ0lIQnNiM1JmWkdGMFlTNTFibWxtYjNKdGN5NXlaWE52YkhWMGFXOXVJRDBnWTJGdExuSmxjMjlzZFhScGIyNDdDaUFnSUNCcFppQW9jR3h2ZEY5a1lYUmhMblZ1YVdadmNtMXpMbkJ5WlhCeWIycGxZM1JwYjI0cElIc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lITndZV05sSUN3Z2JXRnlhMlZ5YzNCaFkyVWdJSDBnUFNCd2JHOTBYMlJoZEdFN0NpQWdJQ0FnSUNBZ2NHeHZkRjlrWVhSaExuVnVhV1p2Y20xekxuQnlaWEJ5YjJwbFkzUnBiMjRnUFNCallXMHVjSEpsY0hKdmFtVmpkR2x2Ymw5dFlYUnlhWGdvYzNCaFkyVXVkbUZzZFdVc0lHMWhjbXRsY25Od1lXTmxMblpoYkhWbEtUc0tJQ0FnSUgwS0lDQWdJR052Ym5OMElIQWdQU0JrWlhObGNtbGhiR2w2WlY5d2JHOTBLSEJzYjNSZlpHRjBZU2s3Q2lBZ0lDQndiRzkwWDJOaFkyaGxXM0JzYjNSZlpHRjBZUzUxZFdsa1hTQTlJSEE3Q2lBZ0lDQnpZMlZ1WlM1aFpHUW9jQ2s3Q2lBZ0lDQmpiMjV6ZENCdVpYaDBYMmx1YzJWeWRDQTlJRzVsZHlCVFpYUW9UMDVmVGtWWVZGOUpUbE5GVWxRcE93b2dJQ0FnYm1WNGRGOXBibk5sY25RdVptOXlSV0ZqYUNnb1ppazlQbVlvS1NrN0NuMEtablZ1WTNScGIyNGdZMjl1Ym1WamRGOTFibWxtYjNKdGN5aHRaWE5vTENCMWNHUmhkR1Z5S1NCN0NpQWdJQ0IxY0dSaGRHVnlMbTl1S0NoYmJtRnRaU3dnWkdGMFlWMHBQVDU3Q2lBZ0lDQWdJQ0FnYVdZZ0tHNWhiV1VnUFQwOUlDSnViMjVsSWlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR052Ym5OMElIVnVhV1p2Y20wZ1BTQnRaWE5vTG0xaGRHVnlhV0ZzTG5WdWFXWnZjbTF6VzI1aGJXVmRPd29nSUNBZ0lDQWdJR2xtSUNoMWJtbG1iM0p0TG5aaGJIVmxMbWx6VkdWNGRIVnlaU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJWOWtZWFJoSUQwZ2RXNXBabTl5YlM1MllXeDFaUzVwYldGblpUc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdXM05wZW1Vc0lIUmxlRjlrWVhSaFhTQTlJR1JoZEdFN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMFpYaGZaR0YwWVM1c1pXNW5kR2dnUFQwZ2FXMWZaR0YwWVM1a1lYUmhMbXhsYm1kMGFDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzFmWkdGMFlTNWtZWFJoTG5ObGRDaDBaWGhmWkdGMFlTazdDaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnZiR1JmZEdWNGRIVnlaU0E5SUhWdWFXWnZjbTB1ZG1Gc2RXVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFibWxtYjNKdExuWmhiSFZsSUQwZ2NtVmZZM0psWVhSbFgzUmxlSFIxY21Vb2IyeGtYM1JsZUhSMWNtVXNJSFJsZUY5a1lYUmhMQ0J6YVhwbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXNaRjkwWlhoMGRYSmxMbVJwYzNCdmMyVW9LVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRMblpoYkhWbExtNWxaV1J6VlhCa1lYUmxJRDBnZEhKMVpUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTmZkR2h5WldWZlptbDRaV1JmWVhKeVlYa29kVzVwWm05eWJTNTJZV3gxWlNrcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnVhV1p2Y20wdWRtRnNkV1V1Wm5KdmJVRnljbUY1S0dSaGRHRXBPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFc1cFptOXliUzUyWVd4MVpTQTlJR1JoZEdFN0NpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlLVHNLZlFwbWRXNWpkR2x2YmlCamNtVmhkR1ZmZEdWNGRIVnlaU2hrWVhSaEtTQjdDaUFnSUNCamIyNXpkQ0JpZFdabVpYSWdQU0JrWVhSaExtUmhkR0U3Q2lBZ0lDQnBaaUFvWkdGMFlTNXphWHBsTG14bGJtZDBhQ0E5UFNBektTQjdDaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHVjRJRDBnYm1WM0lHMXZaQzVFWVhSaFZHVjRkSFZ5WlRORUtHSjFabVpsY2l3Z1pHRjBZUzV6YVhwbFd6QmRMQ0JrWVhSaExuTnBlbVZiTVYwc0lHUmhkR0V1YzJsNlpWc3lYU2s3Q2lBZ0lDQWdJQ0FnZEdWNExtWnZjbTFoZENBOUlHMXZaRnRrWVhSaExuUm9jbVZsWDJadmNtMWhkRjA3Q2lBZ0lDQWdJQ0FnZEdWNExuUjVjR1VnUFNCdGIyUmJaR0YwWVM1MGFISmxaVjkwZVhCbFhUc0tJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVjRPd29nSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCamIyNXpkQ0IwWlhoZlpHRjBZU0E5SUdKMVptWmxjaUE5UFNBaWRHVjRkSFZ5WlY5aGRHeGhjeUlnUHlCVVJWaFVWVkpGWDBGVVRFRlRXekJkTG5aaGJIVmxJRG9nWW5WbVptVnlPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnYlc5a0xrUmhkR0ZVWlhoMGRYSmxLSFJsZUY5a1lYUmhMQ0JrWVhSaExuTnBlbVZiTUYwc0lHUmhkR0V1YzJsNlpWc3hYU3dnYlc5a1cyUmhkR0V1ZEdoeVpXVmZabTl5YldGMFhTd2diVzlrVzJSaGRHRXVkR2h5WldWZmRIbHdaVjBwT3dvZ0lDQWdmUXA5Q21aMWJtTjBhVzl1SUhKbFgyTnlaV0YwWlY5MFpYaDBkWEpsS0c5c1pGOTBaWGgwZFhKbExDQmlkV1ptWlhJc0lITnBlbVVwSUhzS0lDQWdJR2xtSUNoemFYcGxMbXhsYm1kMGFDQTlQU0F6S1NCN0NpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWNElEMGdibVYzSUcxdlpDNUVZWFJoVkdWNGRIVnlaVE5FS0dKMVptWmxjaXdnYzJsNlpWc3dYU3dnYzJsNlpWc3hYU3dnYzJsNlpWc3lYU2s3Q2lBZ0lDQWdJQ0FnZEdWNExtWnZjbTFoZENBOUlHOXNaRjkwWlhoMGRYSmxMbVp2Y20xaGREc0tJQ0FnSUNBZ0lDQjBaWGd1ZEhsd1pTQTlJRzlzWkY5MFpYaDBkWEpsTG5SNWNHVTdDaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmxlRHNLSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QnRiMlF1UkdGMFlWUmxlSFIxY21Vb1luVm1abVZ5TENCemFYcGxXekJkTENCemFYcGxXekZkSUQ4Z2MybDZaVnN4WFNBNklERXNJRzlzWkY5MFpYaDBkWEpsTG1admNtMWhkQ3dnYjJ4a1gzUmxlSFIxY21VdWRIbHdaU2s3Q2lBZ0lDQjlDbjBLWm5WdVkzUnBiMjRnUW5WbVptVnlRWFIwY21saWRYUmxLR0oxWm1abGNpa2dld29nSUNBZ1kyOXVjM1FnYW5OaWRXWm1JRDBnYm1WM0lHMXZaQzVDZFdabVpYSkJkSFJ5YVdKMWRHVW9ZblZtWm1WeUxtWnNZWFFzSUdKMVptWmxjaTUwZVhCbFgyeGxibWQwYUNrN0NpQWdJQ0JxYzJKMVptWXVjMlYwVlhOaFoyVW9iVzlrTGtSNWJtRnRhV05FY21GM1ZYTmhaMlVwT3dvZ0lDQWdjbVYwZFhKdUlHcHpZblZtWmpzS2ZRcG1kVzVqZEdsdmJpQkpibk4wWVc1alpVSjFabVpsY2tGMGRISnBZblYwWlNoaWRXWm1aWElwSUhzS0lDQWdJR052Ym5OMElHcHpZblZtWmlBOUlHNWxkeUJ0YjJRdVNXNXpkR0Z1WTJWa1FuVm1abVZ5UVhSMGNtbGlkWFJsS0dKMVptWmxjaTVtYkdGMExDQmlkV1ptWlhJdWRIbHdaVjlzWlc1bmRHZ3BPd29nSUNBZ2FuTmlkV1ptTG5ObGRGVnpZV2RsS0cxdlpDNUVlVzVoYldsalJISmhkMVZ6WVdkbEtUc0tJQ0FnSUhKbGRIVnliaUJxYzJKMVptWTdDbjBLWm5WdVkzUnBiMjRnWVhSMFlXTm9YMmRsYjIxbGRISjVLR0oxWm1abGNsOW5aVzl0WlhSeWVTd2dkbVZ5ZEdWNFlYSnlZWGx6TENCbVlXTmxjeWtnZXdvZ0lDQWdabTl5S0dOdmJuTjBJRzVoYldVZ2FXNGdkbVZ5ZEdWNFlYSnlZWGx6S1hzS0lDQWdJQ0FnSUNCamIyNXpkQ0JpZFdabUlEMGdkbVZ5ZEdWNFlYSnlZWGx6VzI1aGJXVmRPd29nSUNBZ0lDQWdJR3hsZENCaWRXWm1aWEk3Q2lBZ0lDQWdJQ0FnYVdZZ0tHSjFabVl1ZEc5ZmRYQmtZWFJsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJR0oxWm1abGNpQTlJRzVsZHlCdGIyUXVRblZtWm1WeVFYUjBjbWxpZFhSbEtHSjFabVl1ZEc5ZmRYQmtZWFJsTENCaWRXWm1MbWwwWlcxVGFYcGxLVHNLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCaWRXWm1aWElnUFNCQ2RXWm1aWEpCZEhSeWFXSjFkR1VvWW5WbVppazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJR0oxWm1abGNsOW5aVzl0WlhSeWVTNXpaWFJCZEhSeWFXSjFkR1VvYm1GdFpTd2dZblZtWm1WeUtUc0tJQ0FnSUgwS0lDQWdJR0oxWm1abGNsOW5aVzl0WlhSeWVTNXpaWFJKYm1SbGVDaG1ZV05sY3lrN0NpQWdJQ0JpZFdabVpYSmZaMlZ2YldWMGNua3VZbTkxYm1ScGJtZFRjR2hsY21VZ1BTQnVaWGNnYlc5a0xsTndhR1Z5WlNncE93b2dJQ0FnWW5WbVptVnlYMmRsYjIxbGRISjVMbUp2ZFc1a2FXNW5VM0JvWlhKbExuSmhaR2wxY3lBOUlERXdNREF3TURBd01EQXdNREF3T3dvZ0lDQWdZblZtWm1WeVgyZGxiMjFsZEhKNUxtWnlkWE4wZFcxRGRXeHNaV1FnUFNCbVlXeHpaVHNLSUNBZ0lISmxkSFZ5YmlCaWRXWm1aWEpmWjJWdmJXVjBjbms3Q24wS1puVnVZM1JwYjI0Z1lYUjBZV05vWDJsdWMzUmhibU5sWkY5blpXOXRaWFJ5ZVNoaWRXWm1aWEpmWjJWdmJXVjBjbmtzSUdsdWMzUmhibU5sWDJGMGRISnBZblYwWlhNcElIc0tJQ0FnSUdadmNpaGpiMjV6ZENCdVlXMWxJR2x1SUdsdWMzUmhibU5sWDJGMGRISnBZblYwWlhNcGV3b2dJQ0FnSUNBZ0lHTnZibk4wSUdKMVptWmxjaUE5SUVsdWMzUmhibU5sUW5WbVptVnlRWFIwY21saWRYUmxLR2x1YzNSaGJtTmxYMkYwZEhKcFluVjBaWE5iYm1GdFpWMHBPd29nSUNBZ0lDQWdJR0oxWm1abGNsOW5aVzl0WlhSeWVTNXpaWFJCZEhSeWFXSjFkR1VvYm1GdFpTd2dZblZtWm1WeUtUc0tJQ0FnSUgwS2ZRcG1kVzVqZEdsdmJpQnlaV055WldGMFpWOW5aVzl0WlhSeWVTaHRaWE5vTENCMlpYSjBaWGhoY25KaGVYTXNJR1poWTJWektTQjdDaUFnSUNCamIyNXpkQ0JpZFdabVpYSmZaMlZ2YldWMGNua2dQU0J1WlhjZ2JXOWtMa0oxWm1abGNrZGxiMjFsZEhKNUtDazdDaUFnSUNCaGRIUmhZMmhmWjJWdmJXVjBjbmtvWW5WbVptVnlYMmRsYjIxbGRISjVMQ0IyWlhKMFpYaGhjbkpoZVhNc0lHWmhZMlZ6S1RzS0lDQWdJRzFsYzJndVoyVnZiV1YwY25rdVpHbHpjRzl6WlNncE93b2dJQ0FnYldWemFDNW5aVzl0WlhSeWVTQTlJR0oxWm1abGNsOW5aVzl0WlhSeWVUc0tJQ0FnSUcxbGMyZ3VibVZsWkhOVmNHUmhkR1VnUFNCMGNuVmxPd3A5Q21aMWJtTjBhVzl1SUhKbFkzSmxZWFJsWDJsdWMzUmhibU5sWkY5blpXOXRaWFJ5ZVNodFpYTm9LU0I3Q2lBZ0lDQmpiMjV6ZENCaWRXWm1aWEpmWjJWdmJXVjBjbmtnUFNCdVpYY2diVzlrTGtsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVLQ2s3Q2lBZ0lDQmpiMjV6ZENCMlpYSjBaWGhoY25KaGVYTWdQU0I3ZlRzS0lDQWdJR052Ym5OMElHbHVjM1JoYm1ObFgyRjBkSEpwWW5WMFpYTWdQU0I3ZlRzS0lDQWdJR052Ym5OMElHWmhZMlZ6SUQwZ1d3b2dJQ0FnSUNBZ0lDNHVMbTFsYzJndVoyVnZiV1YwY25rdWFXNWtaWGd1WVhKeVlYa0tJQ0FnSUYwN0NpQWdJQ0JQWW1wbFkzUXVhMlY1Y3lodFpYTm9MbWRsYjIxbGRISjVMbUYwZEhKcFluVjBaWE1wTG1admNrVmhZMmdvS0c1aGJXVXBQVDU3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZblZtWm1WeUlEMGdiV1Z6YUM1blpXOXRaWFJ5ZVM1aGRIUnlhV0oxZEdWelcyNWhiV1ZkT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJR052Y0hrZ1BTQmlkV1ptWlhJdWRHOWZkWEJrWVhSbElEOGdZblZtWm1WeUxuUnZYM1Z3WkdGMFpTQTZJR0oxWm1abGNpNWhjbkpoZVM1dFlYQW9LSGdwUFQ1NEtUc0tJQ0FnSUNBZ0lDQnBaaUFvWW5WbVptVnlMbWx6U1c1emRHRnVZMlZrUW5WbVptVnlRWFIwY21saWRYUmxLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbHVjM1JoYm1ObFgyRjBkSEpwWW5WMFpYTmJibUZ0WlYwZ1BTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iR0YwT2lCamIzQjVMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlY5c1pXNW5kR2c2SUdKMVptWmxjaTVwZEdWdFUybDZaUW9nSUNBZ0lDQWdJQ0FnSUNCOU93b2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJSFpsY25SbGVHRnljbUY1YzF0dVlXMWxYU0E5SUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdac1lYUTZJR052Y0hrc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxYMnhsYm1kMGFEb2dZblZtWm1WeUxtbDBaVzFUYVhwbENpQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmU2s3Q2lBZ0lDQmhkSFJoWTJoZloyVnZiV1YwY25rb1luVm1abVZ5WDJkbGIyMWxkSEo1TENCMlpYSjBaWGhoY25KaGVYTXNJR1poWTJWektUc0tJQ0FnSUdGMGRHRmphRjlwYm5OMFlXNWpaV1JmWjJWdmJXVjBjbmtvWW5WbVptVnlYMmRsYjIxbGRISjVMQ0JwYm5OMFlXNWpaVjloZEhSeWFXSjFkR1Z6S1RzS0lDQWdJRzFsYzJndVoyVnZiV1YwY25rdVpHbHpjRzl6WlNncE93b2dJQ0FnYldWemFDNW5aVzl0WlhSeWVTQTlJR0oxWm1abGNsOW5aVzl0WlhSeWVUc0tJQ0FnSUcxbGMyZ3VibVZsWkhOVmNHUmhkR1VnUFNCMGNuVmxPd3A5Q21aMWJtTjBhVzl1SUdOeVpXRjBaVjl0WVhSbGNtbGhiQ2h3Y205bmNtRnRLU0I3Q2lBZ0lDQmpiMjV6ZENCcGMxOTJiMngxYldVZ1BTQWlkbTlzZFcxbFpHRjBZU0lnYVc0Z2NISnZaM0poYlM1MWJtbG1iM0p0Y3pzS0lDQWdJSEpsZEhWeWJpQnVaWGNnYlc5a0xsSmhkMU5vWVdSbGNrMWhkR1Z5YVdGc0tIc0tJQ0FnSUNBZ0lDQjFibWxtYjNKdGN6b2daR1Z6WlhKcFlXeHBlbVZmZFc1cFptOXliWE1vY0hKdlozSmhiUzUxYm1sbWIzSnRjeWtzQ2lBZ0lDQWdJQ0FnZG1WeWRHVjRVMmhoWkdWeU9pQndjbTluY21GdExuWmxjblJsZUY5emIzVnlZMlVzQ2lBZ0lDQWdJQ0FnWm5KaFoyMWxiblJUYUdGa1pYSTZJSEJ5YjJkeVlXMHVabkpoWjIxbGJuUmZjMjkxY21ObExBb2dJQ0FnSUNBZ0lITnBaR1U2SUdselgzWnZiSFZ0WlNBL0lHMXZaQzVDWVdOclUybGtaU0E2SUcxdlpDNUViM1ZpYkdWVGFXUmxMQW9nSUNBZ0lDQWdJSFJ5WVc1emNHRnlaVzUwT2lCMGNuVmxMQW9nSUNBZ0lDQWdJR1JsY0hSb1ZHVnpkRG9nSVhCeWIyZHlZVzB1YjNabGNtUnlZWGN1ZG1Gc2RXVXNDaUFnSUNBZ0lDQWdaR1Z3ZEdoWGNtbDBaVG9nSVhCeWIyZHlZVzB1ZEhKaGJuTndZWEpsYm1ONUxuWmhiSFZsQ2lBZ0lDQjlLVHNLZlFwbWRXNWpkR2x2YmlCamNtVmhkR1ZmYldWemFDaHdjbTluY21GdEtTQjdDaUFnSUNCamIyNXpkQ0JpZFdabVpYSmZaMlZ2YldWMGNua2dQU0J1WlhjZ2JXOWtMa0oxWm1abGNrZGxiMjFsZEhKNUtDazdDaUFnSUNCamIyNXpkQ0JtWVdObGN5QTlJRzVsZHlCdGIyUXVRblZtWm1WeVFYUjBjbWxpZFhSbEtIQnliMmR5WVcwdVptRmpaWE11ZG1Gc2RXVXNJREVwT3dvZ0lDQWdZWFIwWVdOb1gyZGxiMjFsZEhKNUtHSjFabVpsY2w5blpXOXRaWFJ5ZVN3Z2NISnZaM0poYlM1MlpYSjBaWGhoY25KaGVYTXNJR1poWTJWektUc0tJQ0FnSUdOdmJuTjBJRzFoZEdWeWFXRnNJRDBnWTNKbFlYUmxYMjFoZEdWeWFXRnNLSEJ5YjJkeVlXMHBPd29nSUNBZ1kyOXVjM1FnYldWemFDQTlJRzVsZHlCdGIyUXVUV1Z6YUNoaWRXWm1aWEpmWjJWdmJXVjBjbmtzSUcxaGRHVnlhV0ZzS1RzS0lDQWdJSEJ5YjJkeVlXMHVabUZqWlhNdWIyNG9LSGdwUFQ1N0NpQWdJQ0FnSUNBZ2JXVnphQzVuWlc5dFpYUnllUzV6WlhSSmJtUmxlQ2h1WlhjZ2JXOWtMa0oxWm1abGNrRjBkSEpwWW5WMFpTaDRMQ0F4S1NrN0NpQWdJQ0I5S1RzS0lDQWdJSEpsZEhWeWJpQnRaWE5vT3dwOUNtWjFibU4wYVc5dUlHTnlaV0YwWlY5cGJuTjBZVzVqWldSZmJXVnphQ2h3Y205bmNtRnRLU0I3Q2lBZ0lDQmpiMjV6ZENCaWRXWm1aWEpmWjJWdmJXVjBjbmtnUFNCdVpYY2diVzlrTGtsdWMzUmhibU5sWkVKMVptWmxja2RsYjIxbGRISjVLQ2s3Q2lBZ0lDQmpiMjV6ZENCbVlXTmxjeUE5SUc1bGR5QnRiMlF1UW5WbVptVnlRWFIwY21saWRYUmxLSEJ5YjJkeVlXMHVabUZqWlhNdWRtRnNkV1VzSURFcE93b2dJQ0FnWVhSMFlXTm9YMmRsYjIxbGRISjVLR0oxWm1abGNsOW5aVzl0WlhSeWVTd2djSEp2WjNKaGJTNTJaWEowWlhoaGNuSmhlWE1zSUdaaFkyVnpLVHNLSUNBZ0lHRjBkR0ZqYUY5cGJuTjBZVzVqWldSZloyVnZiV1YwY25rb1luVm1abVZ5WDJkbGIyMWxkSEo1TENCd2NtOW5jbUZ0TG1sdWMzUmhibU5sWDJGMGRISnBZblYwWlhNcE93b2dJQ0FnWTI5dWMzUWdiV0YwWlhKcFlXd2dQU0JqY21WaGRHVmZiV0YwWlhKcFlXd29jSEp2WjNKaGJTazdDaUFnSUNCamIyNXpkQ0J0WlhOb0lEMGdibVYzSUcxdlpDNU5aWE5vS0dKMVptWmxjbDluWlc5dFpYUnllU3dnYldGMFpYSnBZV3dwT3dvZ0lDQWdjSEp2WjNKaGJTNW1ZV05sY3k1dmJpZ29lQ2s5UG5zS0lDQWdJQ0FnSUNCdFpYTm9MbWRsYjIxbGRISjVMbk5sZEVsdVpHVjRLRzVsZHlCdGIyUXVRblZtWm1WeVFYUjBjbWxpZFhSbEtIZ3NJREVwS1RzS0lDQWdJSDBwT3dvZ0lDQWdjbVYwZFhKdUlHMWxjMmc3Q24wS1puVnVZM1JwYjI0Z1ptbHljM1FvZUNrZ2V3b2dJQ0FnY21WMGRYSnVJSGhiVDJKcVpXTjBMbXRsZVhNb2VDbGJNRjFkT3dwOUNtWjFibU4wYVc5dUlHTnZibTVsWTNSZllYUjBjbWxpZFhSbGN5aHRaWE5vTENCMWNHUmhkR1Z5S1NCN0NpQWdJQ0JqYjI1emRDQnBibk4wWVc1alpWOWlkV1ptWlhKeklEMGdlMzA3Q2lBZ0lDQmpiMjV6ZENCblpXOXRaWFJ5ZVY5aWRXWm1aWEp6SUQwZ2UzMDdDaUFnSUNCc1pYUWdabWx5YzNSZmFXNXpkR0Z1WTJWZlluVm1abVZ5T3dvZ0lDQWdZMjl1YzNRZ2NtVmhiRjlwYm5OMFlXNWpaVjlzWlc1bmRHZ2dQU0JiQ2lBZ0lDQWdJQ0FnTUFvZ0lDQWdYVHNLSUNBZ0lHeGxkQ0JtYVhKemRGOW5aVzl0WlhSeWVWOWlkV1ptWlhJN0NpQWdJQ0JqYjI1emRDQnlaV0ZzWDJkbGIyMWxkSEo1WDJ4bGJtZDBhQ0E5SUZzS0lDQWdJQ0FnSUNBd0NpQWdJQ0JkT3dvZ0lDQWdablZ1WTNScGIyNGdjbVZmWVhOemFXZHVYMkoxWm1abGNuTW9LU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdZWFIwY21saWRYUmxjeUE5SUcxbGMyZ3VaMlZ2YldWMGNua3VZWFIwY21saWRYUmxjenNLSUNBZ0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loaGRIUnlhV0oxZEdWektTNW1iM0pGWVdOb0tDaHVZVzFsS1QwK2V3b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmlkV1ptWlhJZ1BTQmhkSFJ5YVdKMWRHVnpXMjVoYldWZE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1luVm1abVZ5TG1selNXNXpkR0Z1WTJWa1FuVm1abVZ5UVhSMGNtbGlkWFJsS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuTjBZVzVqWlY5aWRXWm1aWEp6VzI1aGJXVmRJRDBnWW5WbVptVnlPd29nSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJWdmJXVjBjbmxmWW5WbVptVnljMXR1WVcxbFhTQTlJR0oxWm1abGNqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnSUNBZ0lHWnBjbk4wWDJsdWMzUmhibU5sWDJKMVptWmxjaUE5SUdacGNuTjBLR2x1YzNSaGJtTmxYMkoxWm1abGNuTXBPd29nSUNBZ0lDQWdJR2xtSUNobWFYSnpkRjlwYm5OMFlXNWpaVjlpZFdabVpYSXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NtVmhiRjlwYm5OMFlXNWpaVjlzWlc1bmRHaGJNRjBnUFNCbWFYSnpkRjlwYm5OMFlXNWpaVjlpZFdabVpYSXVZMjkxYm5RN0NpQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lHWnBjbk4wWDJkbGIyMWxkSEo1WDJKMVptWmxjaUE5SUdacGNuTjBLR2RsYjIxbGRISjVYMkoxWm1abGNuTXBPd29nSUNBZ0lDQWdJSEpsWVd4ZloyVnZiV1YwY25sZmJHVnVaM1JvV3pCZElEMGdabWx5YzNSZloyVnZiV1YwY25sZlluVm1abVZ5TG1OdmRXNTBPd29nSUNBZ2ZRb2dJQ0FnY21WZllYTnphV2R1WDJKMVptWmxjbk1vS1RzS0lDQWdJSFZ3WkdGMFpYSXViMjRvS0Z0dVlXMWxMQ0J1WlhkZmRtRnNkV1Z6TENCc1pXNW5kR2hkS1QwK2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUdKMVptWmxjaUE5SUcxbGMyZ3VaMlZ2YldWMGNua3VZWFIwY21saWRYUmxjMXR1WVcxbFhUc0tJQ0FnSUNBZ0lDQnNaWFFnWW5WbVptVnljenNLSUNBZ0lDQWdJQ0JzWlhRZ2NtVmhiRjlzWlc1bmRHZzdDaUFnSUNBZ0lDQWdiR1YwSUdselgybHVjM1JoYm1ObElEMGdabUZzYzJVN0NpQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ2FXNGdhVzV6ZEdGdVkyVmZZblZtWm1WeWN5a2dld29nSUNBZ0lDQWdJQ0FnSUNCaWRXWm1aWEp6SUQwZ2FXNXpkR0Z1WTJWZlluVm1abVZ5Y3pzS0lDQWdJQ0FnSUNBZ0lDQWdabWx5YzNSZmFXNXpkR0Z1WTJWZlluVm1abVZ5T3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaV0ZzWDJ4bGJtZDBhQ0E5SUhKbFlXeGZhVzV6ZEdGdVkyVmZiR1Z1WjNSb093b2dJQ0FnSUNBZ0lDQWdJQ0JwYzE5cGJuTjBZVzVqWlNBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1luVm1abVZ5Y3lBOUlHZGxiMjFsZEhKNVgySjFabVpsY25NN0NpQWdJQ0FnSUNBZ0lDQWdJR1pwY25OMFgyZGxiMjFsZEhKNVgySjFabVpsY2pzS0lDQWdJQ0FnSUNBZ0lDQWdjbVZoYkY5c1pXNW5kR2dnUFNCeVpXRnNYMmRsYjIxbGRISjVYMnhsYm1kMGFEc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdhV1lnS0d4bGJtZDBhQ0E4UFNCeVpXRnNYMnhsYm1kMGFGc3dYU2tnZXdvZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJdWMyVjBLRzVsZDE5MllXeDFaWE1wT3dvZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJdWJtVmxaSE5WY0dSaGRHVWdQU0IwY25WbE93b2dJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTmZhVzV6ZEdGdVkyVXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzJndVoyVnZiV1YwY25rdWFXNXpkR0Z1WTJWRGIzVnVkQ0E5SUd4bGJtZDBhRHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMGdaV3h6WlNCN0NpQWdJQ0FnSUNBZ0lDQWdJR0oxWm1abGNpNTBiMTkxY0dSaGRHVWdQU0J1WlhkZmRtRnNkV1Z6T3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGJHeGZhR0YyWlY5ellXMWxYMnhsYm1kMGFDQTlJRTlpYW1WamRDNTJZV3gxWlhNb1luVm1abVZ5Y3lrdVpYWmxjbmtvS0hncFBUNTRMblJ2WDNWd1pHRjBaU0FtSmlCNExuUnZYM1Z3WkdGMFpTNXNaVzVuZEdnZ0x5QjRMbWwwWlcxVGFYcGxJRDA5SUd4bGJtZDBhQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoYkd4ZmFHRjJaVjl6WVcxbFgyeGxibWQwYUNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6WDJsdWMzUmhibU5sS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZqY21WaGRHVmZhVzV6ZEdGdVkyVmtYMmRsYjIxbGRISjVLRzFsYzJncE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWDJGemMybG5ibDlpZFdabVpYSnpLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnphQzVuWlc5dFpYUnllUzVwYm5OMFlXNWpaVU52ZFc1MElEMGdibVYzWDNaaGJIVmxjeTVzWlc1bmRHZ2dMeUJpZFdabVpYSXVhWFJsYlZOcGVtVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWTNKbFlYUmxYMmRsYjIxbGRISjVLRzFsYzJnc0lHSjFabVpsY25Nc0lHMWxjMmd1WjJWdmJXVjBjbmt1YVc1a1pYZ3BPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFgyRnpjMmxuYmw5aWRXWm1aWEp6S0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5Q2lBZ0lDQjlLVHNLZlFwbWRXNWpkR2x2YmlCa1pYTmxjbWxoYkdsNlpWOXpZMlZ1WlNoa1lYUmhMQ0J6WTNKbFpXNHBJSHNLSUNBZ0lHTnZibk4wSUhOalpXNWxJRDBnYm1WM0lHMXZaQzVUWTJWdVpTZ3BPd29nSUNBZ2MyTmxibVV1YzJOeVpXVnVJRDBnYzJOeVpXVnVPd29nSUNBZ1kyOXVjM1FnZXlCallXNTJZWE1nSUgwZ1BTQnpZM0psWlc0N0NpQWdJQ0JoWkdSZmMyTmxibVVvWkdGMFlTNTFkV2xrTENCelkyVnVaU2s3Q2lBZ0lDQnpZMlZ1WlM1elkyVnVaVjkxZFdsa0lEMGdaR0YwWVM1MWRXbGtPd29nSUNBZ2MyTmxibVV1Wm5KMWMzUjFiVU4xYkd4bFpDQTlJR1poYkhObE93b2dJQ0FnYzJObGJtVXVjR2w0Wld4aGNtVmhJRDBnWkdGMFlTNXdhWGhsYkdGeVpXRTdDaUFnSUNCelkyVnVaUzVpWVdOclozSnZkVzVrWTI5c2IzSWdQU0JrWVhSaExtSmhZMnRuY205MWJtUmpiMnh2Y2pzS0lDQWdJSE5qWlc1bExtTnNaV0Z5YzJObGJtVWdQU0JrWVhSaExtTnNaV0Z5YzJObGJtVTdDaUFnSUNCelkyVnVaUzUyYVhOcFlteGxJRDBnWkdGMFlTNTJhWE5wWW14bE93b2dJQ0FnWTI5dWMzUWdZMkZ0WlhKaElEMGdibVYzSUUxaGEybGxRMkZ0WlhKaEtDazdDaUFnSUNCelkyVnVaUzUzWjJ4ZlkyRnRaWEpoSUQwZ1kyRnRaWEpoT3dvZ0lDQWdablZ1WTNScGIyNGdkWEJrWVhSbFgyTmhiU2hqWVcxbGNtRmZiV0YwY21salpYTXBJSHNLSUNBZ0lDQWdJQ0JqYjI1emRDQmJkbWxsZHl3Z2NISnZhbVZqZEdsdmJpd2djbVZ6YjJ4MWRHbHZiaXdnWlhsbGNHOXpYU0E5SUdOaGJXVnlZVjl0WVhSeWFXTmxjenNLSUNBZ0lDQWdJQ0JqWVcxbGNtRXVkWEJrWVhSbFgyMWhkSEpwWTJWektIWnBaWGNzSUhCeWIycGxZM1JwYjI0c0lISmxjMjlzZFhScGIyNHNJR1Y1WlhCdmN5azdDaUFnSUNCOUNpQWdJQ0IxY0dSaGRHVmZZMkZ0S0dSaGRHRXVZMkZ0WlhKaExuWmhiSFZsS1RzS0lDQWdJR2xtSUNoa1lYUmhMbU5oYlROa1gzTjBZWFJsS1NCN0NpQWdJQ0FnSUNBZ1lYUjBZV05vWHpOa1gyTmhiV1Z5WVNoallXNTJZWE1zSUdOaGJXVnlZU3dnWkdGMFlTNWpZVzB6WkY5emRHRjBaU3dnYzJObGJtVXBPd29nSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNCa1lYUmhMbU5oYldWeVlTNXZiaWgxY0dSaGRHVmZZMkZ0S1RzS0lDQWdJSDBLSUNBZ0lHUmhkR0V1Y0d4dmRITXVabTl5UldGamFDZ29jR3h2ZEY5a1lYUmhLVDArZXdvZ0lDQWdJQ0FnSUdGa1pGOXdiRzkwS0hOalpXNWxMQ0J3Ykc5MFgyUmhkR0VwT3dvZ0lDQWdmU2s3Q2lBZ0lDQnpZMlZ1WlM1elkyVnVaVjlqYUdsc1pISmxiaUE5SUdSaGRHRXVZMmhwYkdSeVpXNHViV0Z3S0NoamFHbHNaQ2s5UG1SbGMyVnlhV0ZzYVhwbFgzTmpaVzVsS0dOb2FXeGtMQ0J6WTNKbFpXNHBLVHNLSUNBZ0lISmxkSFZ5YmlCelkyVnVaVHNLZlFwbWRXNWpkR2x2YmlCa1pXeGxkR1ZmY0d4dmRDaHdiRzkwS1NCN0NpQWdJQ0JrWld4bGRHVWdjR3h2ZEY5allXTm9aVnR3Ykc5MExuQnNiM1JmZFhWcFpGMDdDaUFnSUNCamIyNXpkQ0I3SUhCaGNtVnVkQ0FnZlNBOUlIQnNiM1E3Q2lBZ0lDQnBaaUFvY0dGeVpXNTBLU0I3Q2lBZ0lDQWdJQ0FnY0dGeVpXNTBMbkpsYlc5MlpTaHdiRzkwS1RzS0lDQWdJSDBLSUNBZ0lIQnNiM1F1WjJWdmJXVjBjbmt1WkdsemNHOXpaU2dwT3dvZ0lDQWdjR3h2ZEM1dFlYUmxjbWxoYkM1a2FYTndiM05sS0NrN0NuMEtablZ1WTNScGIyNGdaR1ZzWlhSbFgzUm9jbVZsWDNOalpXNWxLSE5qWlc1bEtTQjdDaUFnSUNCa1pXeGxkR1VnYzJObGJtVmZZMkZqYUdWYmMyTmxibVV1YzJObGJtVmZkWFZwWkYwN0NpQWdJQ0J6WTJWdVpTNXpZMlZ1WlY5amFHbHNaSEpsYmk1bWIzSkZZV05vS0dSbGJHVjBaVjkwYUhKbFpWOXpZMlZ1WlNrN0NpQWdJQ0IzYUdsc1pTaHpZMlZ1WlM1amFHbHNaSEpsYmk1c1pXNW5kR2dnUGlBd0tYc0tJQ0FnSUNBZ0lDQmtaV3hsZEdWZmNHeHZkQ2h6WTJWdVpTNWphR2xzWkhKbGJsc3dYU2s3Q2lBZ0lDQjlDbjBLZDJsdVpHOTNMbFJJVWtWRklEMGdiVzlrT3dwamIyNXpkQ0J3YVhobGJGSmhkR2x2TVNBOUlIZHBibVJ2ZHk1a1pYWnBZMlZRYVhobGJGSmhkR2x2SUh4OElERXVNRHNLWm5WdVkzUnBiMjRnY21WdVpHVnlYM05qWlc1bEtITmpaVzVsTENCd2FXTnJhVzVuSUQwZ1ptRnNjMlVwSUhzS0lDQWdJR052Ym5OMElIc2dZMkZ0WlhKaElDd2djbVZ1WkdWeVpYSWdJSDBnUFNCelkyVnVaUzV6WTNKbFpXNDdDaUFnSUNCamIyNXpkQ0JqWVc1MllYTWdQU0J5Wlc1a1pYSmxjaTVrYjIxRmJHVnRaVzUwT3dvZ0lDQWdhV1lnS0NGa2IyTjFiV1Z1ZEM1aWIyUjVMbU52Ym5SaGFXNXpLR05oYm5aaGN5a3BJSHNLSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnaVJWaEpWRWxPUnlCWFIwd2lLVHNLSUNBZ0lDQWdJQ0J5Wlc1a1pYSmxjaTV6ZEdGMFpTNXlaWE5sZENncE93b2dJQ0FnSUNBZ0lISmxibVJsY21WeUxtUnBjM0J2YzJVb0tUc0tJQ0FnSUNBZ0lDQmtaV3hsZEdWZmRHaHlaV1ZmYzJObGJtVW9jMk5sYm1VcE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lIMEtJQ0FnSUdsbUlDZ2hjMk5sYm1VdWRtbHphV0pzWlM1MllXeDFaU2tnZXdvZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE93b2dJQ0FnZlFvZ0lDQWdjbVZ1WkdWeVpYSXVZWFYwYjBOc1pXRnlJRDBnYzJObGJtVXVZMnhsWVhKelkyVnVaUzUyWVd4MVpUc0tJQ0FnSUdOdmJuTjBJR0Z5WldFZ1BTQnpZMlZ1WlM1d2FYaGxiR0Z5WldFdWRtRnNkV1U3Q2lBZ0lDQnBaaUFvWVhKbFlTa2dld29nSUNBZ0lDQWdJR052Ym5OMElGdDRMQ0I1TENCM0xDQm9YU0E5SUdGeVpXRXViV0Z3S0NoMEtUMCtkQ0F2SUhCcGVHVnNVbUYwYVc4eEtUc0tJQ0FnSUNBZ0lDQnlaVzVrWlhKbGNpNXpaWFJXYVdWM2NHOXlkQ2g0TENCNUxDQjNMQ0JvS1RzS0lDQWdJQ0FnSUNCeVpXNWtaWEpsY2k1elpYUlRZMmx6YzI5eUtIZ3NJSGtzSUhjc0lHZ3BPd29nSUNBZ0lDQWdJSEpsYm1SbGNtVnlMbk5sZEZOamFYTnpiM0pVWlhOMEtIUnlkV1VwT3dvZ0lDQWdJQ0FnSUdsbUlDaHdhV05yYVc1bktTQjdDaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbVZ5TG5ObGRFTnNaV0Z5UVd4d2FHRW9NQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY21WeUxuTmxkRU5zWldGeVEyOXNiM0lvYm1WM0lHMXZaQzVEYjJ4dmNpZ3dLU3dnTUM0d0tUc0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSmxjaTV6WlhSRGJHVmhja052Ykc5eUtITmpaVzVsTG1KaFkydG5jbTkxYm1SamIyeHZjaTUyWVd4MVpTazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSEpsYm1SbGNtVnlMbkpsYm1SbGNpaHpZMlZ1WlN3Z1kyRnRaWEpoS1RzS0lDQWdJSDBLSUNBZ0lISmxkSFZ5YmlCelkyVnVaUzV6WTJWdVpWOWphR2xzWkhKbGJpNWxkbVZ5ZVNnb2VDazlQbkpsYm1SbGNsOXpZMlZ1WlNoNExDQndhV05yYVc1bktTazdDbjBLWm5WdVkzUnBiMjRnYzNSaGNuUmZjbVZ1WkdWeWJHOXZjQ2gwYUhKbFpWOXpZMlZ1WlNrZ2V3b2dJQ0FnWTI5dWMzUWdleUJtY0hNZ0lIMGdQU0IwYUhKbFpWOXpZMlZ1WlM1elkzSmxaVzQ3Q2lBZ0lDQmpiMjV6ZENCMGFXMWxYM0JsY2w5bWNtRnRaU0E5SURFZ0x5Qm1jSE1nS2lBeE1EQXdPd29nSUNBZ2JHVjBJR3hoYzNSZmRHbHRaVjl6ZEdGdGNDQTlJSEJsY21admNtMWhibU5sTG01dmR5Z3BPd29nSUNBZ1puVnVZM1JwYjI0Z2NtVnVaR1Z5Ykc5dmNDaDBhVzFsYzNSaGJYQXBJSHNLSUNBZ0lDQWdJQ0JwWmlBb2RHbHRaWE4wWVcxd0lDMGdiR0Z6ZEY5MGFXMWxYM04wWVcxd0lENGdkR2x0WlY5d1pYSmZabkpoYldVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZV3hzWDNKbGJtUmxjbVZrSUQwZ2NtVnVaR1Z5WDNOalpXNWxLSFJvY21WbFgzTmpaVzVsS1RzS0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGaGJHeGZjbVZ1WkdWeVpXUXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUNBZ0lDQnNZWE4wWDNScGJXVmZjM1JoYlhBZ1BTQndaWEptYjNKdFlXNWpaUzV1YjNjb0tUc0tJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdkMmx1Wkc5M0xuSmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2h5Wlc1a1pYSnNiMjl3S1RzS0lDQWdJSDBLSUNBZ0lISmxibVJsY2w5elkyVnVaU2gwYUhKbFpWOXpZMlZ1WlNrN0NpQWdJQ0J5Wlc1a1pYSnNiMjl3S0NrN0NuMEtablZ1WTNScGIyNGdkR2h5YjNSMGJHVmZablZ1WTNScGIyNG9ablZ1WXl3Z1pHVnNZWGtwSUhzS0lDQWdJR3hsZENCd2NtVjJJRDBnTURzS0lDQWdJR3hsZENCbWRYUjFjbVZmYVdRZ1BTQjFibVJsWm1sdVpXUTdDaUFnSUNCbWRXNWpkR2x2YmlCcGJtNWxjbDkwYUhKdmRIUnNaU2d1TGk1aGNtZHpLU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdibTkzSUQwZ2JtVjNJRVJoZEdVb0tTNW5aWFJVYVcxbEtDazdDaUFnSUNBZ0lDQWdhV1lnS0daMWRIVnlaVjlwWkNBaFBUMGdkVzVrWldacGJtVmtLU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2htZFhSMWNtVmZhV1FwT3dvZ0lDQWdJQ0FnSUNBZ0lDQm1kWFIxY21WZmFXUWdQU0IxYm1SbFptbHVaV1E3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUdsbUlDaHViM2NnTFNCd2NtVjJJRDRnWkdWc1lYa3BJSHNLSUNBZ0lDQWdJQ0FnSUNBZ2NISmxkaUE5SUc1dmR6c0tJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1Nb0xpNHVZWEpuY3lrN0NpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdablYwZFhKbFgybGtJRDBnYzJWMFZHbHRaVzkxZENnb0tUMCthVzV1WlhKZmRHaHliM1IwYkdVb0xpNHVZWEpuY3lrc0lHNXZkeUF0SUhCeVpYWWdLeUF4S1RzS0lDQWdJQ0FnSUNCOUNpQWdJQ0I5Q2lBZ0lDQnlaWFIxY200Z2FXNXVaWEpmZEdoeWIzUjBiR1U3Q24wS1puVnVZM1JwYjI0Z2RHaHlaV1ZxYzE5dGIyUjFiR1VvWTJGdWRtRnpMQ0JqYjIxdExDQjNhV1IwYUN3Z2FHVnBaMmgwTENCeVpYTnBlbVZmZEc5ZlltOWtlU2tnZXdvZ0lDQWdiR1YwSUdOdmJuUmxlSFFnUFNCallXNTJZWE11WjJWMFEyOXVkR1Y0ZENnaWQyVmlaMnd5SWl3Z2V3b2dJQ0FnSUNBZ0lIQnlaWE5sY25abFJISmhkMmx1WjBKMVptWmxjam9nZEhKMVpRb2dJQ0FnZlNrN0NpQWdJQ0JwWmlBb0lXTnZiblJsZUhRcElIc0tJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSWxkbFlrZE1JREl1TUNCdWIzUWdjM1Z3Y0c5eWRHVmtJR0o1SUdKeWIzZHpaWElzSUdaaGJHeHBibWNnWW1GamF5QjBieUJYWldKSFRDQXhMakFnS0ZadmJIVnRaU0J3Ykc5MGN5QjNhV3hzSUc1dmRDQjNiM0pyS1NJcE93b2dJQ0FnSUNBZ0lHTnZiblJsZUhRZ1BTQmpZVzUyWVhNdVoyVjBRMjl1ZEdWNGRDZ2lkMlZpWjJ3aUxDQjdDaUFnSUNBZ0lDQWdJQ0FnSUhCeVpYTmxjblpsUkhKaGQybHVaMEoxWm1abGNqb2dkSEoxWlFvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnZlFvZ0lDQWdhV1lnS0NGamIyNTBaWGgwS1NCN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1T3dvZ0lDQWdmUW9nSUNBZ1kyOXVjM1FnY21WdVpHVnlaWElnUFNCdVpYY2diVzlrTGxkbFlrZE1VbVZ1WkdWeVpYSW9ld29nSUNBZ0lDQWdJR0Z1ZEdsaGJHbGhjem9nZEhKMVpTd0tJQ0FnSUNBZ0lDQmpZVzUyWVhNNklHTmhiblpoY3l3S0lDQWdJQ0FnSUNCamIyNTBaWGgwT2lCamIyNTBaWGgwTEFvZ0lDQWdJQ0FnSUhCdmQyVnlVSEpsWm1WeVpXNWpaVG9nSW1ocFoyZ3RjR1Z5Wm05eWJXRnVZMlVpQ2lBZ0lDQjlLVHNLSUNBZ0lISmxibVJsY21WeUxuTmxkRU5zWldGeVEyOXNiM0lvSWlObVptWm1abVlpS1RzS0lDQWdJSEpsYm1SbGNtVnlMbk5sZEZCcGVHVnNVbUYwYVc4b2NHbDRaV3hTWVhScGJ6RXBPd29nSUNBZ2NtVnVaR1Z5WlhJdWMyVjBVMmw2WlNoM2FXUjBhQ0F2SUhCcGVHVnNVbUYwYVc4eExDQm9aV2xuYUhRZ0x5QndhWGhsYkZKaGRHbHZNU2s3Q2lBZ0lDQmpiMjV6ZENCdGIzVnpaVjlqWVd4c1ltRmpheUE5SUNoNExDQjVLVDArWTI5dGJTNXViM1JwWm5rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpYQnZjMmwwYVc5dU9pQmJDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlUW9nSUNBZ0lDQWdJQ0FnSUNCZENpQWdJQ0FnSUNBZ2ZTazdDaUFnSUNCamIyNXpkQ0J1YjNScFpubGZiVzkxYzJWZmRHaHliM1IwYkdWa0lEMGdkR2h5YjNSMGJHVmZablZ1WTNScGIyNG9iVzkxYzJWZlkyRnNiR0poWTJzc0lEUXdLVHNLSUNBZ0lHWjFibU4wYVc5dUlHMXZkWE5sYlc5MlpTaGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lIWmhjaUJ5WldOMElEMGdZMkZ1ZG1GekxtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwT3dvZ0lDQWdJQ0FnSUhaaGNpQjRJRDBnS0dWMlpXNTBMbU5zYVdWdWRGZ2dMU0J5WldOMExteGxablFwSUNvZ2NHbDRaV3hTWVhScGJ6RTdDaUFnSUNBZ0lDQWdkbUZ5SUhrZ1BTQW9aWFpsYm5RdVkyeHBaVzUwV1NBdElISmxZM1F1ZEc5d0tTQXFJSEJwZUdWc1VtRjBhVzh4T3dvZ0lDQWdJQ0FnSUc1dmRHbG1lVjl0YjNWelpWOTBhSEp2ZEhSc1pXUW9lQ3dnZVNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPd29nSUNBZ2ZRb2dJQ0FnWTJGdWRtRnpMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbTF2ZFhObGJXOTJaU0lzSUcxdmRYTmxiVzkyWlNrN0NpQWdJQ0JtZFc1amRHbHZiaUJ0YjNWelpXUnZkMjRvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0JqYjIxdExtNXZkR2xtZVNoN0NpQWdJQ0FnSUNBZ0lDQWdJRzF2ZFhObFpHOTNiam9nWlhabGJuUXVZblYwZEc5dWN3b2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlRzS0lDQWdJSDBLSUNBZ0lHTmhiblpoY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKdGIzVnpaV1J2ZDI0aUxDQnRiM1Z6WldSdmQyNHBPd29nSUNBZ1puVnVZM1JwYjI0Z2JXOTFjMlYxY0NobGRtVnVkQ2tnZXdvZ0lDQWdJQ0FnSUdOdmJXMHVibTkwYVdaNUtIc0tJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVjFjRG9nWlhabGJuUXVZblYwZEc5dWN3b2dJQ0FnSUNBZ0lIMHBPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlRzS0lDQWdJSDBLSUNBZ0lHTmhiblpoY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NKdGIzVnpaWFZ3SWl3Z2JXOTFjMlYxY0NrN0NpQWdJQ0JtZFc1amRHbHZiaUIzYUdWbGJDaGxkbVZ1ZENrZ2V3b2dJQ0FnSUNBZ0lHTnZiVzB1Ym05MGFXWjVLSHNLSUNBZ0lDQWdJQ0FnSUNBZ2MyTnliMnhzT2lCYkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkQzVrWld4MFlWZ3NDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXRaWFpsYm5RdVpHVnNkR0ZaQ2lBZ0lDQWdJQ0FnSUNBZ0lGMEtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE93b2dJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNBZ0lIMEtJQ0FnSUdOaGJuWmhjeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0ozYUdWbGJDSXNJSGRvWldWc0tUc0tJQ0FnSUdaMWJtTjBhVzl1SUd0bGVXUnZkMjRvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0JqYjIxdExtNXZkR2xtZVNoN0NpQWdJQ0FnSUNBZ0lDQWdJR3RsZVdSdmQyNDZJR1YyWlc1MExtTnZaR1VLSUNBZ0lDQWdJQ0I5S1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdDaUFnSUNCOUNpQWdJQ0JqWVc1MllYTXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2lhMlY1Wkc5M2JpSXNJR3RsZVdSdmQyNHBPd29nSUNBZ1puVnVZM1JwYjI0Z2EyVjVkWEFvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0JqYjIxdExtNXZkR2xtZVNoN0NpQWdJQ0FnSUNBZ0lDQWdJR3RsZVhWd09pQmxkbVZ1ZEM1amIyUmxDaUFnSUNBZ0lDQWdmU2s3Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE93b2dJQ0FnZlFvZ0lDQWdZMkZ1ZG1GekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltdGxlWFZ3SWl3Z2EyVjVkWEFwT3dvZ0lDQWdablZ1WTNScGIyNGdZMjl1ZEdWNGRHMWxiblVvWlhabGJuUXBJSHNLSUNBZ0lDQWdJQ0JqYjIxdExtNXZkR2xtZVNoN0NpQWdJQ0FnSUNBZ0lDQWdJR3RsZVhWd09pQWlaR1ZzWlhSbFgydGxlWE1pQ2lBZ0lDQWdJQ0FnZlNrN0NpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPd29nSUNBZ2ZRb2dJQ0FnWTJGdWRtRnpMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JbU52Ym5SbGVIUnRaVzUxSWl3Z0tHVXBQVDVsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2twT3dvZ0lDQWdZMkZ1ZG1GekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltWnZZM1Z6YjNWMElpd2dZMjl1ZEdWNGRHMWxiblVwT3dvZ0lDQWdablZ1WTNScGIyNGdjbVZ6YVhwbFgyTmhiR3hpWVdOcktDa2dld29nSUNBZ0lDQWdJR052Ym5OMElHSnZaSGxUZEhsc1pTQTlJSGRwYm1SdmR5NW5aWFJEYjIxd2RYUmxaRk4wZVd4bEtHUnZZM1Z0Wlc1MExtSnZaSGtwT3dvZ0lDQWdJQ0FnSUdOdmJuTjBJSGRwWkhSb1gzQmhaR1JwYm1jZ1BTQndZWEp6WlVsdWRDaGliMlI1VTNSNWJHVXVjR0ZrWkdsdVoweGxablFzSURFd0tTQXJJSEJoY25ObFNXNTBLR0p2WkhsVGRIbHNaUzV3WVdSa2FXNW5VbWxuYUhRc0lERXdLU0FySUhCaGNuTmxTVzUwS0dKdlpIbFRkSGxzWlM1dFlYSm5hVzVNWldaMExDQXhNQ2tnS3lCd1lYSnpaVWx1ZENoaWIyUjVVM1I1YkdVdWJXRnlaMmx1VW1sbmFIUXNJREV3S1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0JvWldsbmFIUmZjR0ZrWkdsdVp5QTlJSEJoY25ObFNXNTBLR0p2WkhsVGRIbHNaUzV3WVdSa2FXNW5WRzl3TENBeE1Da2dLeUJ3WVhKelpVbHVkQ2hpYjJSNVUzUjViR1V1Y0dGa1pHbHVaMEp2ZEhSdmJTd2dNVEFwSUNzZ2NHRnljMlZKYm5Rb1ltOWtlVk4wZVd4bExtMWhjbWRwYmxSdmNDd2dNVEFwSUNzZ2NHRnljMlZKYm5Rb1ltOWtlVk4wZVd4bExtMWhjbWRwYmtKdmRIUnZiU3dnTVRBcE93b2dJQ0FnSUNBZ0lHTnZibk4wSUhkcFpIUm9JRDBnS0hkcGJtUnZkeTVwYm01bGNsZHBaSFJvSUMwZ2QybGtkR2hmY0dGa1pHbHVaeWtnS2lCd2FYaGxiRkpoZEdsdk1Uc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCb1pXbG5hSFFnUFNBb2QybHVaRzkzTG1sdWJtVnlTR1ZwWjJoMElDMGdhR1ZwWjJoMFgzQmhaR1JwYm1jcElDb2djR2w0Wld4U1lYUnBiekU3Q2lBZ0lDQWdJQ0FnWTI5dGJTNXViM1JwWm5rb2V3b2dJQ0FnSUNBZ0lDQWdJQ0J5WlhOcGVtVTZJRnNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb0xBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwQ2lBZ0lDQWdJQ0FnSUNBZ0lGMEtJQ0FnSUNBZ0lDQjlLVHNLSUNBZ0lIMEtJQ0FnSUdsbUlDaHlaWE5wZW1WZmRHOWZZbTlrZVNrZ2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUhKbGMybDZaVjlqWVd4c1ltRmphMTkwYUhKdmRIUnNaV1FnUFNCMGFISnZkSFJzWlY5bWRXNWpkR2x2YmloeVpYTnBlbVZmWTJGc2JHSmhZMnNzSURFd01DazdDaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0luSmxjMmw2WlNJc0lDaGxkbVZ1ZENrOVBuSmxjMmw2WlY5allXeHNZbUZqYTE5MGFISnZkSFJzWldRb0tTazdDaUFnSUNBZ0lDQWdjbVZ6YVhwbFgyTmhiR3hpWVdOclgzUm9jbTkwZEd4bFpDZ3BPd29nSUNBZ2ZRb2dJQ0FnY21WMGRYSnVJSEpsYm1SbGNtVnlPd3A5Q21aMWJtTjBhVzl1SUdOeVpXRjBaVjl6WTJWdVpTaDNjbUZ3Y0dWeUxDQmpZVzUyWVhNc0lHTmhiblpoYzE5M2FXUjBhQ3dnYzJObGJtVnpMQ0JqYjIxdExDQjNhV1IwYUN3Z2FHVnBaMmgwTENCMFpYaDBkWEpsWDJGMGJHRnpYMjlpY3l3Z1puQnpMQ0J5WlhOcGVtVmZkRzlmWW05a2VTa2dld29nSUNBZ1kyOXVjM1FnY21WdVpHVnlaWElnUFNCMGFISmxaV3B6WDIxdlpIVnNaU2hqWVc1MllYTXNJR052Ylcwc0lIZHBaSFJvTENCb1pXbG5hSFFzSUhKbGMybDZaVjkwYjE5aWIyUjVLVHNLSUNBZ0lGUkZXRlJWVWtWZlFWUk1RVk5iTUYwZ1BTQjBaWGgwZFhKbFgyRjBiR0Z6WDI5aWN6c0tJQ0FnSUdsbUlDaHlaVzVrWlhKbGNpa2dld29nSUNBZ0lDQWdJR052Ym5OMElHTmhiV1Z5WVNBOUlHNWxkeUJ0YjJRdVVHVnljM0JsWTNScGRtVkRZVzFsY21Fb05EVXNJREVzSURBc0lERXdNQ2s3Q2lBZ0lDQWdJQ0FnWTJGdFpYSmhMblZ3WkdGMFpWQnliMnBsWTNScGIyNU5ZWFJ5YVhnb0tUc0tJQ0FnSUNBZ0lDQmpiMjV6ZENCemFYcGxJRDBnYm1WM0lHMXZaQzVXWldOMGIzSXlLQ2s3Q2lBZ0lDQWdJQ0FnY21WdVpHVnlaWEl1WjJWMFJISmhkMmx1WjBKMVptWmxjbE5wZW1Vb2MybDZaU2s3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdjR2xqYTJsdVoxOTBZWEpuWlhRZ1BTQnVaWGNnYlc5a0xsZGxZa2RNVW1WdVpHVnlWR0Z5WjJWMEtITnBlbVV1ZUN3Z2MybDZaUzU1S1RzS0lDQWdJQ0FnSUNCamIyNXpkQ0J6WTNKbFpXNGdQU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY21WeUxBb2dJQ0FnSUNBZ0lDQWdJQ0J3YVdOcmFXNW5YM1JoY21kbGRDd0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGdFpYSmhMQW9nSUNBZ0lDQWdJQ0FnSUNCbWNITXNDaUFnSUNBZ0lDQWdJQ0FnSUdOaGJuWmhjd29nSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnWTI5dWMzUWdkR2h5WldWZmMyTmxibVVnUFNCa1pYTmxjbWxoYkdsNlpWOXpZMlZ1WlNoelkyVnVaWE1zSUhOamNtVmxiaWs3Q2lBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb2RHaHlaV1ZmYzJObGJtVXBPd29nSUNBZ0lDQWdJSE4wWVhKMFgzSmxibVJsY214dmIzQW9kR2h5WldWZmMyTmxibVVwT3dvZ0lDQWdJQ0FnSUdOaGJuWmhjMTkzYVdSMGFDNXZiaWdvZDE5b0tUMCtld29nSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3YVhobGJGSmhkR2x2SUQwZ2NtVnVaR1Z5WlhJdVoyVjBVR2w0Wld4U1lYUnBieWdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQnlaVzVrWlhKbGNpNXpaWFJUYVhwbEtIZGZhRnN3WFNBdklIQnBlR1ZzVW1GMGFXOHNJSGRmYUZzeFhTQXZJSEJwZUdWc1VtRjBhVzhwT3dvZ0lDQWdJQ0FnSUgwcE93b2dJQ0FnZlNCbGJITmxJSHNLSUNBZ0lDQWdJQ0JqYjI1emRDQjNZWEp1YVc1bklEMGdaMlYwVjJWaVIweEZjbkp2Y2sxbGMzTmhaMlVvS1RzS0lDQWdJQ0FnSUNCM2NtRndjR1Z5TG1Gd2NHVnVaRU5vYVd4a0tIZGhjbTVwYm1jcE93b2dJQ0FnZlFwOUNtWjFibU4wYVc5dUlITmxkRjl3YVdOcmFXNW5YM1Z1YVdadmNtMXpLSE5qWlc1bExDQnNZWE4wWDJsa0xDQndhV05yYVc1bkxDQndhV05yWldSZmNHeHZkSE1zSUhCc2IzUnpMQ0JwWkY5MGIxOXdiRzkwS1NCN0NpQWdJQ0J6WTJWdVpTNWphR2xzWkhKbGJpNW1iM0pGWVdOb0tDaHdiRzkwTENCcGJtUmxlQ2s5UG5zS0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUcxaGRHVnlhV0ZzSUNCOUlEMGdjR3h2ZERzS0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUhWdWFXWnZjbTF6SUNCOUlEMGdiV0YwWlhKcFlXdzdDaUFnSUNBZ0lDQWdhV1lnS0hCcFkydHBibWNwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdkVzVwWm05eWJYTXViMkpxWldOMFgybGtMblpoYkhWbElEMGdiR0Z6ZEY5cFpDQXJJR2x1WkdWNE93b2dJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjeTV3YVdOcmFXNW5MblpoYkhWbElEMGdkSEoxWlRzS0lDQWdJQ0FnSUNBZ0lDQWdiV0YwWlhKcFlXd3VZbXhsYm1ScGJtY2dQU0J0YjJRdVRtOUNiR1Z1WkdsdVp6c0tJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0IxYm1sbWIzSnRjeTV3YVdOcmFXNW5MblpoYkhWbElEMGdabUZzYzJVN0NpQWdJQ0FnSUNBZ0lDQWdJRzFoZEdWeWFXRnNMbUpzWlc1a2FXNW5JRDBnYlc5a0xrNXZjbTFoYkVKc1pXNWthVzVuT3dvZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcFpDQTlJSFZ1YVdadmNtMXpMbTlpYW1WamRGOXBaQzUyWVd4MVpUc0tJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbGtJR2x1SUhCcFkydGxaRjl3Ykc5MGN5a2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR3h2ZEhNdWNIVnphQ2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHeHZkQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2FXTnJaV1JmY0d4dmRITmJhV1JkQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa1gzUnZYM0JzYjNSYmFXUmRJRDBnY0d4dmREc0tJQ0FnSUNBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBwT3dvZ0lDQWdiR1YwSUc1bGVIUmZhV1FnUFNCc1lYTjBYMmxrSUNzZ2MyTmxibVV1WTJocGJHUnlaVzR1YkdWdVozUm9Pd29nSUNBZ2MyTmxibVV1YzJObGJtVmZZMmhwYkdSeVpXNHVabTl5UldGamFDZ29jMk5sYm1VcFBUNTdDaUFnSUNBZ0lDQWdibVY0ZEY5cFpDQTlJSE5sZEY5d2FXTnJhVzVuWDNWdWFXWnZjbTF6S0hOalpXNWxMQ0J1WlhoMFgybGtMQ0J3YVdOcmFXNW5MQ0J3YVdOclpXUmZjR3h2ZEhNc0lIQnNiM1J6TENCcFpGOTBiMTl3Ykc5MEtUc0tJQ0FnSUgwcE93b2dJQ0FnY21WMGRYSnVJRzVsZUhSZmFXUTdDbjBLWm5WdVkzUnBiMjRnY0dsamExOXVZWFJwZG1Vb2MyTmxibVVzSUhnc0lIa3NJSGNzSUdncElIc0tJQ0FnSUdOdmJuTjBJSHNnY21WdVpHVnlaWElnTENCd2FXTnJhVzVuWDNSaGNtZGxkQ0FnZlNBOUlITmpaVzVsTG5OamNtVmxianNLSUNBZ0lISmxibVJsY21WeUxuTmxkRkpsYm1SbGNsUmhjbWRsZENod2FXTnJhVzVuWDNSaGNtZGxkQ2s3Q2lBZ0lDQnpaWFJmY0dsamEybHVaMTkxYm1sbWIzSnRjeWh6WTJWdVpTd2dNU3dnZEhKMVpTazdDaUFnSUNCeVpXNWtaWEpmYzJObGJtVW9jMk5sYm1Vc0lIUnlkV1VwT3dvZ0lDQWdjbVZ1WkdWeVpYSXVjMlYwVW1WdVpHVnlWR0Z5WjJWMEtHNTFiR3dwT3dvZ0lDQWdZMjl1YzNRZ2JtSjVkR1Z6SUQwZ2R5QXFJR2dnS2lBME93b2dJQ0FnWTI5dWMzUWdjR2w0Wld4ZllubDBaWE1nUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2h1WW5sMFpYTXBPd29nSUNBZ2NtVnVaR1Z5WlhJdWNtVmhaRkpsYm1SbGNsUmhjbWRsZEZCcGVHVnNjeWh3YVdOcmFXNW5YM1JoY21kbGRDd2dlQ3dnZVN3Z2R5d2dhQ3dnY0dsNFpXeGZZbmwwWlhNcE93b2dJQ0FnWTI5dWMzUWdjR2xqYTJWa1gzQnNiM1J6SUQwZ2UzMDdDaUFnSUNCamIyNXpkQ0J3YVdOclpXUmZjR3h2ZEhOZllYSnlZWGtnUFNCYlhUc0tJQ0FnSUdOdmJuTjBJSEpsYVc1MFpYSndjbVYwWDNacFpYY2dQU0J1WlhjZ1JHRjBZVlpwWlhjb2NHbDRaV3hmWW5sMFpYTXVZblZtWm1WeUtUc0tJQ0FnSUdadmNpaHNaWFFnYVNBOUlEQTdJR2tnUENCd2FYaGxiRjlpZVhSbGN5NXNaVzVuZEdnZ0x5QTBPeUJwS3lzcGV3b2dJQ0FnSUNBZ0lHTnZibk4wSUdsa0lEMGdjbVZwYm5SbGNuQnlaWFJmZG1sbGR5NW5aWFJWYVc1ME1UWW9hU0FxSURRcE93b2dJQ0FnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnY21WcGJuUmxjbkJ5WlhSZmRtbGxkeTVuWlhSVmFXNTBNVFlvYVNBcUlEUWdLeUF5S1RzS0lDQWdJQ0FnSUNCd2FXTnJaV1JmY0d4dmRITmZZWEp5WVhrdWNIVnphQ2hiQ2lBZ0lDQWdJQ0FnSUNBZ0lHbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQW9nSUNBZ0lDQWdJRjBwT3dvZ0lDQWdJQ0FnSUhCcFkydGxaRjl3Ykc5MGMxdHBaRjBnUFNCcGJtUmxlRHNLSUNBZ0lIMEtJQ0FnSUdOdmJuTjBJSEJzYjNSeklEMGdXMTA3Q2lBZ0lDQmpiMjV6ZENCcFpGOTBiMTl3Ykc5MElEMGdlMzA3Q2lBZ0lDQnpaWFJmY0dsamEybHVaMTkxYm1sbWIzSnRjeWh6WTJWdVpTd2dNQ3dnWm1Gc2MyVXNJSEJwWTJ0bFpGOXdiRzkwY3l3Z2NHeHZkSE1zSUdsa1gzUnZYM0JzYjNRcE93b2dJQ0FnWTI5dWMzUWdjR2xqYTJWa1gzQnNiM1J6WDIxaGRISnBlQ0E5SUhCcFkydGxaRjl3Ykc5MGMxOWhjbkpoZVM1dFlYQW9LRnRwWkN3Z2FXNWtaWGhkS1QwK2V3b2dJQ0FnSUNBZ0lHTnZibk4wSUhBZ1BTQnBaRjkwYjE5d2JHOTBXMmxrWFRzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUNBZ0lDQndJRDhnY0M1d2JHOTBYM1YxYVdRZ09pQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUFvZ0lDQWdJQ0FnSUYwN0NpQWdJQ0I5S1RzS0lDQWdJR052Ym5OMElIQnNiM1JmYldGMGNtbDRJRDBnZXdvZ0lDQWdJQ0FnSUdSaGRHRTZJSEJwWTJ0bFpGOXdiRzkwYzE5dFlYUnlhWGdzQ2lBZ0lDQWdJQ0FnYzJsNlpUb2dXd29nSUNBZ0lDQWdJQ0FnSUNCM0xBb2dJQ0FnSUNBZ0lDQWdJQ0JvQ2lBZ0lDQWdJQ0FnWFFvZ0lDQWdmVHNLSUNBZ0lISmxkSFZ5YmlCYkNpQWdJQ0FnSUNBZ2NHeHZkRjl0WVhSeWFYZ3NDaUFnSUNBZ0lDQWdjR3h2ZEhNS0lDQWdJRjA3Q24wS1puVnVZM1JwYjI0Z2NHbGphMTlqYkc5elpYTjBLSE5qWlc1bExDQjRlU3dnY21GdVoyVXBJSHNLSUNBZ0lHTnZibk4wSUhzZ2NHbGphMmx1WjE5MFlYSm5aWFFnSUgwZ1BTQnpZMlZ1WlM1elkzSmxaVzQ3Q2lBZ0lDQmpiMjV6ZENCN0lIZHBaSFJvSUN3Z2FHVnBaMmgwSUNCOUlEMGdjR2xqYTJsdVoxOTBZWEpuWlhRN0NpQWdJQ0JwWmlBb0lTZ3hMakFnUEQwZ2VIbGJNRjBnUEQwZ2QybGtkR2dnSmlZZ01TNHdJRHc5SUhoNVd6RmRJRHc5SUdobGFXZG9kQ2twSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3dvZ0lDQWdJQ0FnSUNBZ0lDQnVkV3hzTEFvZ0lDQWdJQ0FnSUNBZ0lDQXdDaUFnSUNBZ0lDQWdYVHNLSUNBZ0lIMEtJQ0FnSUdOdmJuTjBJSGd3SUQwZ1RXRjBhQzV0WVhnb01Td2dlSGxiTUYwZ0xTQnlZVzVuWlNrN0NpQWdJQ0JqYjI1emRDQjVNQ0E5SUUxaGRHZ3ViV0Y0S0RFc0lIaDVXekZkSUMwZ2NtRnVaMlVwT3dvZ0lDQWdZMjl1YzNRZ2VERWdQU0JOWVhSb0xtMXBiaWgzYVdSMGFDd2dUV0YwYUM1bWJHOXZjaWg0ZVZzd1hTQXJJSEpoYm1kbEtTazdDaUFnSUNCamIyNXpkQ0I1TVNBOUlFMWhkR2d1YldsdUtHaGxhV2RvZEN3Z1RXRjBhQzVtYkc5dmNpaDRlVnN4WFNBcklISmhibWRsS1NrN0NpQWdJQ0JqYjI1emRDQmtlQ0E5SUhneElDMGdlREE3Q2lBZ0lDQmpiMjV6ZENCa2VTQTlJSGt4SUMwZ2VUQTdDaUFnSUNCamIyNXpkQ0JiY0d4dmRGOWtZWFJoTENCZlhTQTlJSEJwWTJ0ZmJtRjBhWFpsS0hOalpXNWxMQ0I0TUN3Z2VUQXNJR1I0TENCa2VTazdDaUFnSUNCamIyNXpkQ0J3Ykc5MFgyMWhkSEpwZUNBOUlIQnNiM1JmWkdGMFlTNWtZWFJoT3dvZ0lDQWdiR1YwSUcxcGJsOWthWE4wSUQwZ2NtRnVaMlVnWGlBeU93b2dJQ0FnYkdWMElITmxiR1ZqZEdsdmJpQTlJRnNLSUNBZ0lDQWdJQ0J1ZFd4c0xBb2dJQ0FnSUNBZ0lEQUtJQ0FnSUYwN0NpQWdJQ0JqYjI1emRDQjRJRDBnZUhsYk1GMGdLeUF4SUMwZ2VEQTdDaUFnSUNCamIyNXpkQ0I1SUQwZ2VIbGJNVjBnS3lBeElDMGdlVEE3Q2lBZ0lDQnNaWFFnY0dsdVpHVjRJRDBnTURzS0lDQWdJR1p2Y2loc1pYUWdhU0E5SURFN0lHa2dQRDBnWkhnN0lHa3JLeWw3Q2lBZ0lDQWdJQ0FnWm05eUtHeGxkQ0JxSUQwZ01Uc2dhaUE4UFNCa2VEc2dhaXNyS1hzS0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pDQTlJSGdnTFNCcElGNGdNaUFySUNoNUlDMGdhaWtnWGlBeU93b2dJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmJjR3h2ZEY5MWRXbGtMQ0JwYm1SbGVGMGdQU0J3Ykc5MFgyMWhkSEpwZUZ0d2FXNWtaWGhkT3dvZ0lDQWdJQ0FnSUNBZ0lDQndhVzVrWlhnZ1BTQndhVzVrWlhnZ0t5QXhPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9aQ0E4SUcxcGJsOWthWE4wSUNZbUlIQnNiM1JmZFhWcFpDa2dld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1WDJScGMzUWdQU0JrT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBhVzl1SUQwZ1d3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJzYjNSZmRYVnBaQ3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYVHNLSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lIMEtJQ0FnSUgwS0lDQWdJSEpsZEhWeWJpQnpaV3hsWTNScGIyNDdDbjBLWm5WdVkzUnBiMjRnY0dsamExOXpiM0owWldRb2MyTmxibVVzSUhoNUxDQnlZVzVuWlNrZ2V3b2dJQ0FnWTI5dWMzUWdleUJ3YVdOcmFXNW5YM1JoY21kbGRDQWdmU0E5SUhOalpXNWxMbk5qY21WbGJqc0tJQ0FnSUdOdmJuTjBJSHNnZDJsa2RHZ2dMQ0JvWldsbmFIUWdJSDBnUFNCd2FXTnJhVzVuWDNSaGNtZGxkRHNLSUNBZ0lHbG1JQ2doS0RFdU1DQThQU0I0ZVZzd1hTQThQU0IzYVdSMGFDQW1KaUF4TGpBZ1BEMGdlSGxiTVYwZ1BEMGdhR1ZwWjJoMEtTa2dld29nSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzT3dvZ0lDQWdmUW9nSUNBZ1kyOXVjM1FnZURBZ1BTQk5ZWFJvTG0xaGVDZ3hMQ0I0ZVZzd1hTQXRJSEpoYm1kbEtUc0tJQ0FnSUdOdmJuTjBJSGt3SUQwZ1RXRjBhQzV0WVhnb01Td2dlSGxiTVYwZ0xTQnlZVzVuWlNrN0NpQWdJQ0JqYjI1emRDQjRNU0E5SUUxaGRHZ3ViV2x1S0hkcFpIUm9MQ0JOWVhSb0xtWnNiMjl5S0hoNVd6QmRJQ3NnY21GdVoyVXBLVHNLSUNBZ0lHTnZibk4wSUhreElEMGdUV0YwYUM1dGFXNG9hR1ZwWjJoMExDQk5ZWFJvTG1ac2IyOXlLSGg1V3pGZElDc2djbUZ1WjJVcEtUc0tJQ0FnSUdOdmJuTjBJR1I0SUQwZ2VERWdMU0I0TURzS0lDQWdJR052Ym5OMElHUjVJRDBnZVRFZ0xTQjVNRHNLSUNBZ0lHTnZibk4wSUZ0d2JHOTBYMlJoZEdFc0lITmxiR1ZqZEdWa1hTQTlJSEJwWTJ0ZmJtRjBhWFpsS0hOalpXNWxMQ0I0TUN3Z2VUQXNJR1I0TENCa2VTazdDaUFnSUNCcFppQW9jMlZzWldOMFpXUXViR1Z1WjNSb0lEMDlJREFwSUhzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEc0tJQ0FnSUgwS0lDQWdJR052Ym5OMElIQnNiM1JmYldGMGNtbDRJRDBnY0d4dmRGOWtZWFJoTG1SaGRHRTdDaUFnSUNCamIyNXpkQ0JrYVhOMFlXNWpaWE1nUFNCelpXeGxZM1JsWkM1dFlYQW9LSGdwUFQ1eVlXNW5aU0JlSURJcE93b2dJQ0FnWTI5dWMzUWdlQ0E5SUhoNVd6QmRJQ3NnTVNBdElIZ3dPd29nSUNBZ1kyOXVjM1FnZVNBOUlIaDVXekZkSUNzZ01TQXRJSGt3T3dvZ0lDQWdiR1YwSUhCcGJtUmxlQ0E5SURBN0NpQWdJQ0JtYjNJb2JHVjBJR2tnUFNBeE95QnBJRHc5SUdSNE95QnBLeXNwZXdvZ0lDQWdJQ0FnSUdadmNpaHNaWFFnYWlBOUlERTdJR29nUEQwZ1pIZzdJR29yS3lsN0NpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUWdQU0I0SUMwZ2FTQmVJRElnS3lBb2VTQXRJR29wSUY0Z01qc0tJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdXM0JzYjNSZmRYVnBaQ3dnYVc1a1pYaGRJRDBnY0d4dmRGOXRZWFJ5YVhoYmNHbHVaR1Y0WFRzS0lDQWdJQ0FnSUNBZ0lDQWdjR2x1WkdWNElEMGdjR2x1WkdWNElDc2dNVHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0d4dmRGOXBibVJsZUNBOUlITmxiR1ZqZEdWa0xtWnBibVJKYm1SbGVDZ29lQ2s5UG5oYk1GMHVjR3h2ZEY5MWRXbGtJRDA5SUhCc2IzUmZkWFZwWkNrN0NpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2JHOTBYMmx1WkdWNElENDlJREFnSmlZZ1pDQThJR1JwYzNSaGJtTmxjMXR3Ykc5MFgybHVaR1Y0WFNrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpkR0Z1WTJWelczQnNiM1JmYVc1a1pYaGRJRDBnWkRzS0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJSDBLSUNBZ0lIMEtJQ0FnSUdOdmJuTjBJSE52Y25SbFpGOXBibVJwWTJWeklEMGdRWEp5WVhrdVpuSnZiU2hCY25KaGVTaGthWE4wWVc1alpYTXViR1Z1WjNSb0tTNXJaWGx6S0NrcExuTnZjblFvS0dFc0lHSXBQVDVrYVhOMFlXNWpaWE5iWVYwZ1BDQmthWE4wWVc1alpYTmJZbDBnUHlBdE1TQTZJR1JwYzNSaGJtTmxjMXRpWFNBOElHUnBjM1JoYm1ObGMxdGhYU0I4SURBcE93b2dJQ0FnY21WMGRYSnVJSE52Y25SbFpGOXBibVJwWTJWekxtMWhjQ2dvYVdSNEtUMCtld29nSUNBZ0lDQWdJR052Ym5OMElGdHdiRzkwTENCcGJtUmxlRjBnUFNCelpXeGxZM1JsWkZ0cFpIaGRPd29nSUNBZ0lDQWdJSEpsZEhWeWJpQmJDaUFnSUNBZ0lDQWdJQ0FnSUhCc2IzUXVjR3h2ZEY5MWRXbGtMQW9nSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQW9nSUNBZ0lDQWdJRjA3Q2lBZ0lDQjlLVHNLZlFwbWRXNWpkR2x2YmlCd2FXTnJYMjVoZEdsMlpWOTFkV2xrS0hOalpXNWxMQ0I0TENCNUxDQjNMQ0JvS1NCN0NpQWdJQ0JqYjI1emRDQmJYeXdnY0dsamEyVmtYM0JzYjNSelhTQTlJSEJwWTJ0ZmJtRjBhWFpsS0hOalpXNWxMQ0I0TENCNUxDQjNMQ0JvS1RzS0lDQWdJSEpsZEhWeWJpQndhV05yWldSZmNHeHZkSE11YldGd0tDaGJjQ3dnYVc1a1pYaGRLVDArV3dvZ0lDQWdJQ0FnSUNBZ0lDQndMbkJzYjNSZmRYVnBaQ3dLSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdLSUNBZ0lDQWdJQ0JkS1RzS2ZRcG1kVzVqZEdsdmJpQndhV05yWDI1aGRHbDJaVjl0WVhSeWFYZ29jMk5sYm1Vc0lIZ3NJSGtzSUhjc0lHZ3BJSHNLSUNBZ0lHTnZibk4wSUZ0dFlYUnlhWGdzSUY5ZElEMGdjR2xqYTE5dVlYUnBkbVVvYzJObGJtVXNJSGdzSUhrc0lIY3NJR2dwT3dvZ0lDQWdjbVYwZFhKdUlHMWhkSEpwZURzS2ZRcG1kVzVqZEdsdmJpQnlaV2RwYzNSbGNsOXdiM0IxY0Nod2IzQjFjQ3dnYzJObGJtVXNJSEJzYjNSelgzUnZYM0JwWTJzc0lHTmhiR3hpWVdOcktTQjdDaUFnSUNCcFppQW9JWE5qWlc1bElIeDhJQ0Z6WTJWdVpTNXpZM0psWlc0cElIc0tJQ0FnSUNBZ0lDQnlaWFIxY200N0NpQWdJQ0I5Q2lBZ0lDQmpiMjV6ZENCN0lHTmhiblpoY3lBZ2ZTQTlJSE5qWlc1bExuTmpjbVZsYmpzS0lDQWdJR05oYm5aaGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDSnRiM1Z6WldSdmQyNGlMQ0FvWlhabGJuUXBQVDU3Q2lBZ0lDQWdJQ0FnYVdZZ0tDRndiM0IxY0M1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb0luTm9iM2NpS1NrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0J3YjNCMWNDNWpiR0Z6YzB4cGMzUXVZV1JrS0NKemFHOTNJaWs3Q2lBZ0lDQWdJQ0FnZlFvZ0lDQWdJQ0FnSUhCdmNIVndMbk4wZVd4bExteGxablFnUFNCbGRtVnVkQzV3WVdkbFdDQXJJQ0p3ZUNJN0NpQWdJQ0FnSUNBZ2NHOXdkWEF1YzNSNWJHVXVkRzl3SUQwZ1pYWmxiblF1Y0dGblpWa2dLeUFpY0hnaU93b2dJQ0FnSUNBZ0lHTnZibk4wSUZ0NExDQjVYU0E5SUdWMlpXNTBNbk5qWlc1bFgzQnBlR1ZzS0hOalpXNWxMQ0JsZG1WdWRDazdDaUFnSUNBZ0lDQWdZMjl1YzNRZ1cxOHNJSEJwWTJ0elhTQTlJSEJwWTJ0ZmJtRjBhWFpsS0hOalpXNWxMQ0I0TENCNUxDQXhMQ0F4S1RzS0lDQWdJQ0FnSUNCcFppQW9jR2xqYTNNdWJHVnVaM1JvSUQwOUlERXBJSHNLSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnVzNCc2IzUXNJR2x1WkdWNFhTQTlJSEJwWTJ0eld6QmRPd29nSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR3h2ZEhOZmRHOWZjR2xqYXk1b1lYTW9jR3h2ZEM1d2JHOTBYM1YxYVdRcEtTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTjFiSFFnUFNCallXeHNZbUZqYXlod2JHOTBMQ0JwYm1SbGVDazdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSEpsYzNWc2RDQTlQVDBnSW5OMGNtbHVaeUlnZkh3Z2NtVnpkV3gwSUdsdWMzUmhibU5sYjJZZ1UzUnlhVzVuS1NCN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl3ZFhBdWFXNXVaWEpVWlhoMElEMGdjbVZ6ZFd4ME93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM0IxY0M1cGJtNWxja2hVVFV3Z1BTQnlaWE4xYkhRN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUNpQWdJQ0FnSUNBZ0lDQWdJSDBLSUNBZ0lDQWdJQ0I5SUdWc2MyVWdld29nSUNBZ0lDQWdJQ0FnSUNCd2IzQjFjQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ0p6YUc5M0lpazdDaUFnSUNBZ0lDQWdmUW9nSUNBZ2ZTazdDaUFnSUNCallXNTJZWE11WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdpYTJWNWRYQWlMQ0FvWlhabGJuUXBQVDU3Q2lBZ0lDQWdJQ0FnYVdZZ0tHVjJaVzUwTG10bGVTQTlQVDBnSWtWelkyRndaU0lwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdjRzl3ZFhBdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnaWMyaHZkeUlwT3dvZ0lDQWdJQ0FnSUgwS0lDQWdJSDBwT3dwOUNuZHBibVJ2ZHk1WFIwd2dQU0I3Q2lBZ0lDQmtaWE5sY21saGJHbDZaVjl6WTJWdVpTd0tJQ0FnSUhSb2NtVmxhbk5mYlc5a2RXeGxMQW9nSUNBZ2MzUmhjblJmY21WdVpHVnliRzl2Y0N3S0lDQWdJR1JsYkdWMFpWOXdiRzkwY3l3S0lDQWdJR2x1YzJWeWRGOXdiRzkwTEFvZ0lDQWdabWx1WkY5d2JHOTBjeXdLSUNBZ0lHUmxiR1YwWlY5elkyVnVaU3dLSUNBZ0lHWnBibVJmYzJObGJtVXNDaUFnSUNCelkyVnVaVjlqWVdOb1pTd0tJQ0FnSUhCc2IzUmZZMkZqYUdVc0NpQWdJQ0JrWld4bGRHVmZjMk5sYm1WekxBb2dJQ0FnWTNKbFlYUmxYM05qWlc1bExBb2dJQ0FnWlhabGJuUXljMk5sYm1WZmNHbDRaV3dzQ2lBZ0lDQnZibDl1WlhoMFgybHVjMlZ5ZEN3S0lDQWdJSEpsWjJsemRHVnlYM0J2Y0hWd0xBb2dJQ0FnY21WdVpHVnlYM05qWlc1bENuMDdDbVY0Y0c5eWRDQjdJR1JsYzJWeWFXRnNhWHBsWDNOalpXNWxJR0Z6SUdSbGMyVnlhV0ZzYVhwbFgzTmpaVzVsTENCMGFISmxaV3B6WDIxdlpIVnNaU0JoY3lCMGFISmxaV3B6WDIxdlpIVnNaU3dnYzNSaGNuUmZjbVZ1WkdWeWJHOXZjQ0JoY3lCemRHRnlkRjl5Wlc1a1pYSnNiMjl3TENCa1pXeGxkR1ZmY0d4dmRITWdZWE1nWkdWc1pYUmxYM0JzYjNSekxDQnBibk5sY25SZmNHeHZkQ0JoY3lCcGJuTmxjblJmY0d4dmRDd2dabWx1WkY5d2JHOTBjeUJoY3lCbWFXNWtYM0JzYjNSekxDQmtaV3hsZEdWZmMyTmxibVVnWVhNZ1pHVnNaWFJsWDNOalpXNWxMQ0JtYVc1a1gzTmpaVzVsSUdGeklHWnBibVJmYzJObGJtVXNJSE5qWlc1bFgyTmhZMmhsSUdGeklITmpaVzVsWDJOaFkyaGxMQ0J3Ykc5MFgyTmhZMmhsSUdGeklIQnNiM1JmWTJGamFHVXNJR1JsYkdWMFpWOXpZMlZ1WlhNZ1lYTWdaR1ZzWlhSbFgzTmpaVzVsY3l3Z1kzSmxZWFJsWDNOalpXNWxJR0Z6SUdOeVpXRjBaVjl6WTJWdVpTd2daWFpsYm5ReWMyTmxibVZmY0dsNFpXd2dZWE1nWlhabGJuUXljMk5sYm1WZmNHbDRaV3dzSUc5dVgyNWxlSFJmYVc1elpYSjBJR0Z6SUc5dVgyNWxlSFJmYVc1elpYSjBJSDA3Q21WNGNHOXlkQ0I3SUhKbGJtUmxjbDl6WTJWdVpTQmhjeUJ5Wlc1a1pYSmZjMk5sYm1VZ2ZUc0taWGh3YjNKMElIc2djR2xqYTE5dVlYUnBkbVVnWVhNZ2NHbGphMTl1WVhScGRtVWdmVHNLWlhod2IzSjBJSHNnY0dsamExOWpiRzl6WlhOMElHRnpJSEJwWTJ0ZlkyeHZjMlZ6ZENCOU93cGxlSEJ2Y25RZ2V5QndhV05yWDNOdmNuUmxaQ0JoY3lCd2FXTnJYM052Y25SbFpDQjlPd3BsZUhCdmNuUWdleUJ3YVdOclgyNWhkR2wyWlY5MWRXbGtJR0Z6SUhCcFkydGZibUYwYVhabFgzVjFhV1FnZlRzS1pYaHdiM0owSUhzZ2NHbGphMTl1WVhScGRtVmZiV0YwY21sNElHRnpJSEJwWTJ0ZmJtRjBhWFpsWDIxaGRISnBlQ0I5T3dwbGVIQnZjblFnZXlCeVpXZHBjM1JsY2w5d2IzQjFjQ0JoY3lCeVpXZHBjM1JsY2w5d2IzQjFjQ0I5T3dvS2A7CiAgICAgICAgICAgIHJldHVybiBpbXBvcnQoSlNTRVJWRV9JTVBPUlRTWydjYzRjNmFhNmExZjA2YTFiNTAxM2JjYTAxNzAyZjM2YTE4NGMwNDM5LXdnbG1ha2llLmpzJ10pOwogICAgICAgIH0pKCkudGhlbihXR0w9PiB7CiAgICAgICAgY29uc3QgZmluZCA9ICgpPT4gewogICAgICAgICAgICBjb25zdCBwbG90cyA9IFdHTC5maW5kX3Bsb3RzKF9fbG9va3VwX2ludGVycG9sYXRlZCgnNjU2NDUxMzk2NTM0NTk3NzUyMycpKQogICAgICAgICAgICBpZiAocGxvdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgcmVzb2x2ZShwbG90cykKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIFdHTC5vbl9uZXh0X2luc2VydChmaW5kKQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBmaW5kKCkKICAgIH0pCn0pKS50aGVuKHBsb3RzPT57CiAgICAgICAgY29uc3Qgc2NhdHRlcl9wbG90ID0gcGxvdHNbMF0KICAgICAgICAvLyBjaGFuZ2UgZmlyc3QgcG9pbnQgeCArIHkgdmFsdWUKICAgICAgICBzY2F0dGVyX3Bsb3QuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3MuYXJyYXlbMF0gPSAobmV3X3ZhbHVlLzEwMCkgKiA0CiAgICAgICAgc2NhdHRlcl9wbG90Lmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zLmFycmF5WzFdID0gKG5ld192YWx1ZS8xMDApICogNAogICAgICAgIC8vIHRoaXMgYWx3YXlzIG5lZWRzIHRvIGJlIHNldCBvZiBnZW9tZXRyeSBhdHRyaWJ1dGVzIGFmdGVyIGFuIHVwZGF0ZQogICAgICAgIHNjYXR0ZXJfcGxvdC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvcy5uZWVkc1VwZGF0ZSA9IHRydWUKICAgIH0pCn0Kp25vbmU6MzCobXNnX3R5cGWhMcgD22uSx2Fqk9kkNzY4ZDgzMjItNDM5Mi00NzMwLTg0OWUtZDYwM2M1YTcwY2EygbM0Njg2MTA0MzYyNTYwNjUzNjM2xx5lkrM0Njg2MTA0MzYyNTYwNjUzNjM2ywAAAAAAAAAAo3N1YoOjb2JzxxRoszQ2ODYxMDQzNjI1NjA2NTM2MzancGF5bG9hZMgDQ2aTgbM2NTY0NTEzOTY1MzQ1OTc3NTIzkbQxMDE0MTk2MDkwNzc1MzQ1NDY0NNoDDHJldHVybiBmdW5jdGlvbiBvbl91cGRhdGUoaHVlKSB7CiAgICAobmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICBpbXBvcnQoSlNTRVJWRV9JTVBPUlRTWydjYzRjNmFhNmExZjA2YTFiNTAxM2JjYTAxNzAyZjM2YTE4NGMwNDM5LXdnbG1ha2llLmpzJ10pLnRoZW4oV0dMPT4gewogICAgICAgIGNvbnN0IGZpbmQgPSAoKT0+IHsKICAgICAgICAgICAgY29uc3QgcGxvdHMgPSBXR0wuZmluZF9wbG90cyhfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzY1NjQ1MTM5NjUzNDU5Nzc1MjMnKSkKICAgICAgICAgICAgaWYgKHBsb3RzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHJlc29sdmUocGxvdHMpCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBXR0wub25fbmV4dF9pbnNlcnQoZmluZCkKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgZmluZCgpCiAgICB9KQp9KSkudGhlbihwbG90cz0+ewogICAgICAgIGNvbnN0IHNjYXR0ZXJfcGxvdCA9IHBsb3RzWzBdCiAgICAgICAgY29uc3QgY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKQogICAgICAgIGNvbG9yLnNldEhTTChodWUsIDEuMCwgMC41KQogICAgICAgIHNjYXR0ZXJfcGxvdC5tYXRlcmlhbC51bmlmb3Jtcy5jb2xvci52YWx1ZS54ID0gY29sb3IucgogICAgICAgIHNjYXR0ZXJfcGxvdC5tYXRlcmlhbC51bmlmb3Jtcy5jb2xvci52YWx1ZS55ID0gY29sb3IuZwogICAgICAgIHNjYXR0ZXJfcGxvdC5tYXRlcmlhbC51bmlmb3Jtcy5jb2xvci52YWx1ZS56ID0gY29sb3IuYgogICAgfSkKfadub25lOjQzqG1zZ190eXBloTHIA01rksdZapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoGzNjk4MzI0ODIyMzY1NzYwMDIyN8cWZZKzNjk4MzI0ODIyMzY1NzYwMDIyNwGjc3Vig6NvYnPHFGizNjk4MzI0ODIyMzY1NzYwMDIyN6dwYXlsb2FkyAK9ZpOBszY1NjQ1MTM5NjUzNDU5Nzc1MjORtDEwMTQxOTYwOTA3NzUzNDU0NjQ02gKGcmV0dXJuIGZ1bmN0aW9uIG9uX3VwZGF0ZShzaXplKSB7CiAgICAobmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICBpbXBvcnQoSlNTRVJWRV9JTVBPUlRTWydjYzRjNmFhNmExZjA2YTFiNTAxM2JjYTAxNzAyZjM2YTE4NGMwNDM5LXdnbG1ha2llLmpzJ10pLnRoZW4oV0dMPT4gewogICAgICAgIGNvbnN0IGZpbmQgPSAoKT0+IHsKICAgICAgICAgICAgY29uc3QgcGxvdHMgPSBXR0wuZmluZF9wbG90cyhfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzY1NjQ1MTM5NjUzNDU5Nzc1MjMnKSkKICAgICAgICAgICAgaWYgKHBsb3RzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHJlc29sdmUocGxvdHMpCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBXR0wub25fbmV4dF9pbnNlcnQoZmluZCkKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgZmluZCgpCiAgICB9KQp9KSkudGhlbihwbG90cz0+ewogICAgICAgIGNvbnN0IHNjYXR0ZXJfcGxvdCA9IHBsb3RzWzBdCiAgICAgICAgc2NhdHRlcl9wbG90Lm1hdGVyaWFsLnVuaWZvcm1zLm1hcmtlcnNpemUudmFsdWUueCA9IHNpemUKICAgICAgICBzY2F0dGVyX3Bsb3QubWF0ZXJpYWwudW5pZm9ybXMubWFya2Vyc2l6ZS52YWx1ZS55ID0gc2l6ZQogICAgfSkKfadub25lOjU1qG1zZ190eXBloTHIAmxrksfwapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoK0MTQ5OTkwMDQ4MTY0NzQ5NDcwODfHfWWStDE0OTk5MDA0ODE2NDc0OTQ3MDg33ABkAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZLQxMzM5MDIyMjQ2ODA4NTgyNzEwMMcXZZK0MTMzOTAyMjI0NjgwODU4MjcxMDABo3N1YoOjb2JzxxVotDEzMzkwMjIyNDY4MDg1ODI3MTAwp3BheWxvYWTIAURmk4K0MTgzMzI3Mjg3MTc3Mzc4MzM1NzHHFWi0MTQ5OTkwMDQ4MTY0NzQ5NDcwODe0MTY3MDQ1NDIxMTY5NTI0MDI0ODTHFGizMjk2ODA0NDUzNDE2NDg1Nzc3N9mpcmV0dXJuIChpbmRleCkgPT4gewogICAgY29uc3QgdmFsdWVzID0gX19sb29rdXBfaW50ZXJwb2xhdGVkKCcxODMzMjcyODcxNzczNzgzMzU3MScpLnZhbHVlCiAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzE2NzA0NTQyMTE2OTUyNDAyNDg0Jykubm90aWZ5KHZhbHVlc1tpbmRleCAtIDFdKQp9Ctk8L2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL3R1RERZL3NyYy93aWRnZXRzLmpsOjU1qG1zZ190eXBloTHIAVlrksdcapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoGzNTQ4MTUzNTk4MDQ3NDkwNTY4N8cZZZKzNTQ4MTUzNTk4MDQ3NDkwNTY4N6MxMDCjc3Vig6NvYnPHFGizNTQ4MTUzNTk4MDQ3NDkwNTY4N6dwYXlsb2Fkx8dmk4DZa3JldHVybiB2YWx1ZT0+IEpTU2VydmUudXBkYXRlX25vZGVfYXR0cmlidXRlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMTUiXScpLCAnbWF4JywgdmFsdWUp2VYvaG9tZS9ydW5uZXIvLmp1bGlhL3BhY2thZ2VzL0pTU2VydmUvdHVERFkvc3JjL3JlbmRlcmluZy9oeXBlcnNjcmlwdF9pbnRlZ3JhdGlvbi5qbDo5Mahtc2dfdHlwZaExyAFca5LHXGqT2SQ3NjhkODMyMi00MzkyLTQ3MzAtODQ5ZS1kNjAzYzVhNzBjYTKBtDEwOTI1NDM5NjEyMzEyMDk2NzM1xxhlkrQxMDkyNTQzOTYxMjMxMjA5NjczNaExo3N1YoOjb2JzxxVotDEwOTI1NDM5NjEyMzEyMDk2NzM1p3BheWxvYWTHyWaTgNltcmV0dXJuIHZhbHVlPT4gSlNTZXJ2ZS51cGRhdGVfbm9kZV9hdHRyaWJ1dGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSIxNSJdJyksICd2YWx1ZScsIHZhbHVlKdlWL2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL3R1RERZL3NyYy9yZW5kZXJpbmcvaHlwZXJzY3JpcHRfaW50ZWdyYXRpb24uamw6OTGobXNnX3R5cGWhMcgFJmuSyAOsapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoK0MTQ4MjU1OTY4Mzg5NDE1MjE5MDnIAzplkrQxNDgyNTU5NjgzODk0MTUyMTkwOcgDIBgAAAAAAAAAAFu/UqDWr4Q/W79SoNavlD8IH3zwwQefP1u/UqDWr6Q/MW9nSMzbqT8IH3zwwQevP29nSMzbGbI/W79SoNavtD9GF1100UW3PzFvZ0jM27k/HMdxHMdxvD8IH3zwwQe/P3o7Q2LezsA/b2dIzNsZwj9lk0022WTDP1u/UqDWr8Q/UOtXCtT6xT9GF1100UXHPztDYt7OkMg/MW9nSMzbyT8nm2yyySbLPxzHcRzHccw/EvN2hsS8zT8IH3zwwQfPP3+lQK1fKdA/ejtDYt7O0D900UUXXXTRP29nSMzbGdI/av1KgVq/0j9lk0022WTTP2ApUOtXCtQ/W79SoNav1D9VVVVVVVXVP1DrVwrU+tU/S4Fav1Kg1j9GF1100UXXP0GtXylQ69c/O0Ni3s6Q2D822WSTTTbZPzFvZ0jM29k/LAVq/UqB2j8nm2yyySbbPyIxb2dIzNs/HMdxHMdx3D8XXXTRRRfdPxLzdobEvN0/DYl5O0Ni3j8IH3zwwQffPwO1fqVArd8/f6VArV8p4D988MEHH3zgP3o7Q2LezuA/d4bEvJ0h4T900UUXXXThP3Icx3Ecx+E/b2dIzNsZ4j9tsskmm2ziP2r9SoFav+I/Z0jM2xkS4z9lk0022WTjP2LezpCYt+M/YClQ61cK5D9ddNFFF13kP1u/UqDWr+Q/WArU+pUC5T9VVVVVVVXlP1Og1q8UqOU/UOtXCtT65T9ONtlkk03mP0uBWr9SoOY/SMzbGRLz5j9GF1100UXnP0Ni3s6QmOc/Qa1fKVDr5z8++OCDDz7oPztDYt7OkOg/OY7jOI7j6D822WSTTTbpPzQk5u0Miek/MW9nSMzb6T8vuuiiiy7qPywFav1Kgeo/KVDrVwrU6j8nm2yyySbrPyTm7QyJees/IjFvZ0jM6z8ffPDBBx/sPxzHcRzHcew/GhLzdobE7D8XXXTRRRftPxWo9SsFau0/EvN2hsS87T8QPvjggw/uPw2JeTtDYu4/CtT6lQK17j8IH3zwwQfvPwVq/UqBWu8/A7V+pUCt7z8AAAAAAADwP7M5MjM0MzUzNTYzNjcyNzI2Mjk3xxZlkrM5MjM0MzUzNTYzNjcyNzI2Mjk3AaNzdWKDo29ic8cUaLM5MjM0MzUzNTYzNjcyNzI2Mjk3p3BheWxvYWTIAUJmk4KzNTgyMjQwNjA4MDUwNTA1ODA4N8cVaLQxNDgyNTU5NjgzODk0MTUyMTkwObQxNDAwMjI3NzcwNDk2ODQwMjM4MMcUaLM0Njg2MTA0MzYyNTYwNjUzNjM22ahyZXR1cm4gKGluZGV4KSA9PiB7CiAgICBjb25zdCB2YWx1ZXMgPSBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzU4MjI0MDYwODA1MDUwNTgwODcnKS52YWx1ZQogICAgX19sb29rdXBfaW50ZXJwb2xhdGVkKCcxNDAwMjI3NzcwNDk2ODQwMjM4MCcpLm5vdGlmeSh2YWx1ZXNbaW5kZXggLSAxXSkKfQrZPC9ob21lL3J1bm5lci8uanVsaWEvcGFja2FnZXMvSlNTZXJ2ZS90dUREWS9zcmMvd2lkZ2V0cy5qbDo1Nahtc2dfdHlwZaExyAFca5LHXmqT2SQ3NjhkODMyMi00MzkyLTQ3MzAtODQ5ZS1kNjAzYzVhNzBjYTKBtDExOTIwNjA2NjU3MTYwMDkwNTE4xxplkrQxMTkyMDYwNjY1NzE2MDA5MDUxOKMxMDCjc3Vig6NvYnPHFWi0MTE5MjA2MDY2NTcxNjAwOTA1MTincGF5bG9hZMfHZpOA2WtyZXR1cm4gdmFsdWU9PiBKU1NlcnZlLnVwZGF0ZV9ub2RlX2F0dHJpYnV0ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qc2NhbGwtaWQ9IjE2Il0nKSwgJ21heCcsIHZhbHVlKdlWL2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL3R1RERZL3NyYy9yZW5kZXJpbmcvaHlwZXJzY3JpcHRfaW50ZWdyYXRpb24uamw6OTGobXNnX3R5cGWhMcgBXGuSx1xqk9kkNzY4ZDgzMjItNDM5Mi00NzMwLTg0OWUtZDYwM2M1YTcwY2EygbQxMTQ3ODYwNDQ0OTMxOTY1MDExN8cYZZK0MTE0Nzg2MDQ0NDkzMTk2NTAxMTehMaNzdWKDo29ic8cVaLQxMTQ3ODYwNDQ0OTMxOTY1MDExN6dwYXlsb2Fkx8lmk4DZbXJldHVybiB2YWx1ZT0+IEpTU2VydmUudXBkYXRlX25vZGVfYXR0cmlidXRlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMTYiXScpLCAndmFsdWUnLCB2YWx1ZSnZVi9ob21lL3J1bm5lci8uanVsaWEvcGFja2FnZXMvSlNTZXJ2ZS90dUREWS9zcmMvcmVuZGVyaW5nL2h5cGVyc2NyaXB0X2ludGVncmF0aW9uLmpsOjkxqG1zZ190eXBloTHIAmxrksfwapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoK0MTIwMzU2NTQxNDY2MzY0MjQ5MjDHfWWStDEyMDM1NjU0MTQ2NjM2NDI0OTIw3ABkAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZLQxNDM4NDg4NDk0NjYzMzAzODA0MscXZZK0MTQzODQ4ODQ5NDY2MzMwMzgwNDIBo3N1YoOjb2JzxxVotDE0Mzg0ODg0OTQ2NjMzMDM4MDQyp3BheWxvYWTIAURmk4K0MTgxNDkxMTM2NzM1MDQ2NDM0MTHHFGizNjk4MzI0ODIyMzY1NzYwMDIyN7QxNTMwOTAxODg2NDMxODMwNjE5NscVaLQxMjAzNTY1NDE0NjYzNjQyNDkyMNmpcmV0dXJuIChpbmRleCkgPT4gewogICAgY29uc3QgdmFsdWVzID0gX19sb29rdXBfaW50ZXJwb2xhdGVkKCcxNTMwOTAxODg2NDMxODMwNjE5NicpLnZhbHVlCiAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzE4MTQ5MTEzNjczNTA0NjQzNDExJykubm90aWZ5KHZhbHVlc1tpbmRleCAtIDFdKQp9Ctk8L2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL3R1RERZL3NyYy93aWRnZXRzLmpsOjU1qG1zZ190eXBloTHIAVxrksdeapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoG0MTEyNDg0MjkyNTMzNzQ5ODI1MzHHGmWStDExMjQ4NDI5MjUzMzc0OTgyNTMxozEwMKNzdWKDo29ic8cVaLQxMTI0ODQyOTI1MzM3NDk4MjUzMadwYXlsb2Fkx8dmk4DZa3JldHVybiB2YWx1ZT0+IEpTU2VydmUudXBkYXRlX25vZGVfYXR0cmlidXRlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMTciXScpLCAnbWF4JywgdmFsdWUp2VYvaG9tZS9ydW5uZXIvLmp1bGlhL3BhY2thZ2VzL0pTU2VydmUvdHVERFkvc3JjL3JlbmRlcmluZy9oeXBlcnNjcmlwdF9pbnRlZ3JhdGlvbi5qbDo5Mahtc2dfdHlwZaExyAFZa5LHWmqT2SQ3NjhkODMyMi00MzkyLTQ3MzAtODQ5ZS1kNjAzYzVhNzBjYTKBszM1NTk2NTkwNTg2OTY3Njc0NjLHF2WSszM1NTk2NTkwNTg2OTY3Njc0NjKhMaNzdWKDo29ic8cUaLMzNTU5NjU5MDU4Njk2NzY3NDYyp3BheWxvYWTHyWaTgNltcmV0dXJuIHZhbHVlPT4gSlNTZXJ2ZS51cGRhdGVfbm9kZV9hdHRyaWJ1dGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSIxNyJdJyksICd2YWx1ZScsIHZhbHVlKdlWL2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL3R1RERZL3NyYy9yZW5kZXJpbmcvaHlwZXJzY3JpcHRfaW50ZWdyYXRpb24uamw6OTGobXNnX3R5cGWhMckAA7oba5LIM5tqk9kkNzY4ZDgzMjItNDM5Mi00NzMwLTg0OWUtZDYwM2M1YTcwY2Ey3gD2tDEzNDIxMjc5ODQ2ODEzODMyODMxxzFlkrQxMzQyMTI3OTg0NjgxMzgzMjgzMccYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAALM2MjUxMzM2MzM1MjY3MTg4MTc5xxZlkrM2MjUxMzM2MzM1MjY3MTg4MTc5wrQxMDAyODQ1ODU5OTM3MTk1MjE3OMcXZZK0MTAwMjg0NTg1OTkzNzE5NTIxNzjCtDEzMjAwNzEwODM0OTU2NDc3MDQ1xxdlkrQxMzIwMDcxMDgzNDk1NjQ3NzA0NcOzMzY0OTYzNTA2MDkwNjQwNDk1OccwZZKzMzY0OTYzNTA2MDkwNjQwNDk1OccYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALMzMDE2OTk5MTU1NDM5NjUwNTY1xxxlkrMzMDE2OTk5MTU1NDM5NjUwNTY1kqRub25lkLM2NTg3ODY2MTg5MjYxNjIwNTk2xzBlkrM2NTg3ODY2MTg5MjYxNjIwNTk2xxgWAAAAAAEAAAACAAAAAQAAAAMAAAACAAAAszI5NjcxNTg3MzE0NDIxNjEwNDjHFmWSszI5NjcxNTg3MzE0NDIxNjEwNDjDszk5ODUzOTExODE5MTQ3NDkxNzfHGWWSszk5ODUzOTExODE5MTQ3NDkxNzeToJAAtDE0MTkwNDMxMTYxMTQ1MzQ5MzM0xzFlkrQxNDE5MDQzMTE2MTE0NTM0OTMzNMcYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALMzNTA0MzkwMDc1MTc0ODI0ODAwxxxlkrMzNTA0MzkwMDc1MTc0ODI0ODAwkqRub25lkLQxNDQ3OTc3Mzc1NTgxNzQ1NjI3OccbZZK0MTQ0Nzk3NzM3NTU4MTc0NTYyNzmkZGF0YbMxOTUyNjcxMTE5ODIxMTIzMDQyxxZlkrMxOTUyNjcxMTE5ODIxMTIzMDQyw7QxNzEzMjgxODc5OTkzNzc5Mzk2NccaZZK0MTcxMzI4MTg3OTk5Mzc3OTM5NjWToJAAtDE2MTE4OTM5NDgyMzE2MTc5MTI5xx1lkrQxNjExODkzOTQ4MjMxNjE3OTEyOZKkbm9uZZC0MTY4MDUyMTY1MjUwMDM1NzAyMDjHGmWStDE2ODA1MjE2NTI1MDAzNTcwMjA4k6CQALQxNzAzNjM5ODQ5NTczNzY1NzI3OMcXZZK0MTcwMzYzOTg0OTU3Mzc2NTcyNzjCszI2ODQ4NjAyMjg5NTQ5NzIyOTfHHGWSszI2ODQ4NjAyMjg5NTQ5NzIyOTeSpG5vbmWQtDE1MTI1MzEwMzgxNTQzNjkyODY3xxdlkrQxNTEyNTMxMDM4MTU0MzY5Mjg2N8KzNjEyMzU3OTA3OTgyNjM2MDc4N8cWZZKzNjEyMzU3OTA3OTgyNjM2MDc4N8K0MTczOTI3NDUyOTIzMzc5NjYyNjbHHWWStDE3MzkyNzQ1MjkyMzM3OTY2MjY2kqRub25lkLI4MDEwNzI0NjIzNTg1NjI4OTPHHGWSsjgwMTA3MjQ2MjM1ODU2Mjg5M6cjRkZGRkZGtDEzMzM5NzAxNDIwNDkyMzQ0NzE2xxplkrQxMzMzOTcwMTQyMDQ5MjM0NDcxNpOgkACzMTk2NDk1NDg2MzcyMDg4Mzc0NscaZZKzMTk2NDk1NDg2MzcyMDg4Mzc0NqRkYXRhszgzOTE5NjY5OTAyODUzNTc4NjnHFmWSszgzOTE5NjY5OTAyODUzNTc4NjnCtDEzNzkxMTE3MDg0MjUzMjk0MjYzxzFlkrQxMzc5MTExNzA4NDI1MzI5NDI2M8cYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAALQxNjY1NjAzNzkxNjE2MTAyODU0NccxZZK0MTY2NTYwMzc5MTYxNjEwMjg1NDXHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAACzMjQ2NjgwNTk2NTU0NDY1Nzk4MMcWZZKzMjQ2NjgwNTk2NTU0NDY1Nzk4MMOzNjk3MjIwODM5Njc5NTIyMjU5OccWZZKzNjk3MjIwODM5Njc5NTIyMjU5OcK0MTczNDk4OTM5MDk3NzM4MzA4MjDHHGWStDE3MzQ5ODkzOTA5NzczODMwODIwpXBpeGVsszU1NTA5NjUwNTQ1OTA5NDc4MjPHFmWSszU1NTA5NjUwNTQ1OTA5NDc4MjPCszE0MTAzMTI0MDk2NDI1NjcyNDPHHWWSszE0MTAzMTI0MDk2NDI1NjcyNDOnI0ZGRkZGRrQxNjI3MTI4NjY2MDMyODk5NzYyNMcdZZK0MTYyNzEyODY2NjAzMjg5OTc2MjSSpG5vbmWQszIyOTgwMDI4MDkzMDk1NTAyMTPHFmWSszIyOTgwMDI4MDkzMDk1NTAyMTPCszU3OTgxMzg4NzQyNjI0NTAwMzjHFmWSszU3OTgxMzg4NzQyNjI0NTAwMzjCsjcxNzAyMDU2NjYwNTgyMTk1MccVZZKyNzE3MDIwNTY2NjA1ODIxOTUxwrM3ODYwMTUwNDc5MjA4ODQ5NTg4xxxlkrM3ODYwMTUwNDc5MjA4ODQ5NTg4kqRub25lkLIyMzYwMDA1OTA4MTc0Nzg3NzTHL2WSsjIzNjAwMDU5MDgxNzQ3ODc3NMcYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALQxMjMzMzcxNTE0MDQ2NDM1ODkwNsccZZK0MTIzMzM3MTUxNDA0NjQzNTg5MDalcGl4ZWyzNzAwNjUwNTQ3ODA1NjMxODE4MscWZZKzNzAwNjUwNTQ3ODA1NjMxODE4MsOyNTA4NTgxNzgxMzA2OTk5OTMwxxhlkrI1MDg1ODE3ODEzMDY5OTk5MzCToJAAszUzMTYwMzc0NzMwNDQ0NTM1MDfHGmWSszUzMTYwMzc0NzMwNDQ0NTM1MDekZGF0YbQxNjk1MTM5MTE1NDI2MDU5OTM3OMcaZZK0MTY5NTEzOTExNTQyNjA1OTkzNziToJAAtDExODYxODgwNTA2MjgzMzczMjQzxx1lkrQxMTg2MTg4MDUwNjI4MzM3MzI0M5Kkbm9uZZCzNzg2Mjk1MDczNzg1MjU5MzAxMscWZZKzNzg2Mjk1MDczNzg1MjU5MzAxMsOzNzgxNjY0OTA5ODQ0MDMzMTgxNccWZZKzNzgxNjY0OTA5ODQ0MDMzMTgxNcKzODAxMzEzMzU5NjEzMjk2NjczNq10cmFja2luZy1vbmx5tDEzMTU5NDMzNzEyNDM3MTQwODcxxxdlkrQxMzE1OTQzMzcxMjQzNzE0MDg3McK0MTU2OTQyMjg1NTczNTY1ODM0MzfHF2WStDE1Njk0MjI4NTU3MzU2NTgzNDM3wrM0MDY2MDI0NzQ4ODEwMjA4Nzk3xxllkrM0MDY2MDI0NzQ4ODEwMjA4Nzk3k6CQALM0MjAxMDkyNDIwOTM2NTU2NTk1xxZlkrM0MjAxMDkyNDIwOTM2NTU2NTk1wrQxODA2ODkyMjEzNTQwNjUxMTYzM8cbZZK0MTgwNjg5MjIxMzU0MDY1MTE2MzOkZGF0YbQxNDg4NjExNTEzNzg0OTU3NDE4NscaZZK0MTQ4ODYxMTUxMzc4NDk1NzQxODaToJAAtDEwNjk2MjkxMDk2MTI1NzU2MjMwxxtlkrQxMDY5NjI5MTA5NjEyNTc1NjIzMKRkYXRhszEwNzYwODg5MzE2MTc2NDgzNTLHGmWSszEwNzYwODg5MzE2MTc2NDgzNTKkZGF0YbQxNTM0ODA3MDQ1ODA4OTI4NjMxOccaZZK0MTUzNDgwNzA0NTgwODkyODYzMTmToJAAtDE2MjYyNTQ3OTM3MzMwMzA1MzU5xxplkrQxNjI2MjU0NzkzNzMzMDMwNTM1OZOgkACzODkzMTU2NzQ3ODcxMDc1ODYwM8cwZZKzODkzMTU2NzQ3ODcxMDc1ODYwM8cYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAALMzMjcwNjUyMzE1NTI1Nzk0Mjc4xxllkrMzMjcwNjUyMzE1NTI1Nzk0Mjc4k6CQALQxMTg0MDA0OTMxMjE2MjU4MjY0MccXZZK0MTE4NDAwNDkzMTIxNjI1ODI2NDHCtDE3MTA1NDA1MjMyNzk3Mzg1NjUyxxdlkrQxNzEwNTQwNTIzMjc5NzM4NTY1MsO0MTQ1Mjk4NDk2Mjc4MDA5OTgzMzTHF2WStDE0NTI5ODQ5NjI3ODAwOTk4MzM0wrM2ODYxMzIzNjIxODk5MzE3MzQ0xxZlkrM2ODYxMzIzNjIxODk5MzE3MzQ0wrQxMzg3NzQxMzE4MjIxMDgyNjQ4M8cXZZK0MTM4Nzc0MTMxODIyMTA4MjY0ODPCszY4MjA4NzE1NjY3OTMwNTA5ODjHMGWSszY4MjA4NzE1NjY3OTMwNTA5ODjHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAAC0MTU5OTI0MDU5NTEyMTA0MjEzNTDHF2WStDE1OTkyNDA1OTUxMjEwNDIxMzUwwrQxODMwNjEzNjg5MjI3ODMzNjM0MscbZZK0MTgzMDYxMzY4OTIyNzgzMzYzNDKkZGF0YbM1MzQ0MTI3OTc0MzU0ODk0NDU0xxZlkrM1MzQ0MTI3OTc0MzU0ODk0NDU0wrM5OTU4Mjg2ODY5NTA1NTU0MjU2xxxlkrM5OTU4Mjg2ODY5NTA1NTU0MjU2kqRub25lkLM5ODIwMzE5ODY2OTIwODIzNjE2xxxlkrM5ODIwMzE5ODY2OTIwODIzNjE2kqRub25lkLM2MDg4MDk5MDIwNzAzMDE1NTg5xxZlkrM2MDg4MDk5MDIwNzAzMDE1NTg5w7M3ODgwNTAzNTMwMzY4Mjc2NzYwxzBlkrM3ODgwNTAzNTMwMzY4Mjc2NzYwxxgWAAAAAAEAAAACAAAAAQAAAAMAAAACAAAAszY5MzM4NDI4NTE5NDA5MzM5MTDHFmWSszY5MzM4NDI4NTE5NDA5MzM5MTDCszk1ODYyMzM2NTIzNzQxOTMwMzbHGmWSszk1ODYyMzM2NTIzNzQxOTMwMzakZGF0YbMxMTUzNTA3ODQxMDI0OTcwMTYxxxZlkrMxMTUzNTA3ODQxMDI0OTcwMTYxw7IyOTUyNDI5MjgwMzYwMjQ5NDXHG2WSsjI5NTI0MjkyODAzNjAyNDk0NZKkbm9uZZCzOTI3NjYyMTQ0NDg3Mjc3NjQzN8d4ZZKzOTI3NjYyMTQ0NDg3Mjc3NjQzN8dgFgAAAAABAAAABAAAAAQAAAABAAAABQAAAAEAAAACAAAABQAAAAUAAAACAAAABgAAAAIAAAADAAAABgAAAAYAAAADAAAABwAAAAMAAAAAAAAABwAAAAcAAAAAAAAABAAAALM5Nzc1MTA1NzkwNTY5MDYzNDM0xxZlkrM5Nzc1MTA1NzkwNTY5MDYzNDM0w7QxNzU0MTExMzczMDYxNDMyMjM5NccXZZK0MTc1NDExMTM3MzA2MTQzMjIzOTXCtDE3MTMzNDc2NzQ1OTc4Mzg0Mzg1xx1lkrQxNzEzMzQ3Njc0NTk3ODM4NDM4NZKkbm9uZZC0MTY0NTkyMjU3ODM2MTE0OTkwMTTHG2WStDE2NDU5MjI1NzgzNjExNDk5MDE0pGRhdGGzNjU0MzMxODc1NjMzMDcwNDIxM8caZZKzNjU0MzMxODc1NjMzMDcwNDIxM6RkYXRhszQ2MjU4OTgxNjE1ODM0MzE2NzHHMGWSszQ2MjU4OTgxNjE1ODM0MzE2NzHHGBYAAAAAAQAAAAIAAAABAAAAAwAAAAIAAACzMjUwNTk2MjY5NDgyNTU1ODc2NccwZZKzMjUwNTk2MjY5NDgyNTU1ODc2NccYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALM5NjkzNjUwMDUyMTE0Nzg4MDUxx7VlkrM5NjkzNjUwMDUyMTE0Nzg4MDUxlMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD/HQBcK1yM7AAAAAAAAAAAAAAAAAAAAAA50WjsAAAAAAAAAAAAAAAAAAAAAF7fRuAAAAAAAAIC/AACAvwAAAIAAAIA/1xcAAEhEAAAWRMcMFwAAgD8AAIA/AACAP7QxNzE0NTI2NDA2Njg1ODYyNzY4M8cXZZK0MTcxNDUyNjQwNjY4NTg2Mjc2ODPCtDE1ODQxNzQ5MDcyNjAxNDU3MTYyxxtlkrQxNTg0MTc0OTA3MjYwMTQ1NzE2MqRkYXRhtDE3Njc5NzcxMjkzMzIxNDY0NTMxxxtlkrQxNzY3OTc3MTI5MzMyMTQ2NDUzMaRkYXRhtDE4MTk2NDYyNDMyNzE3OTA3NTA4xxdlkrQxODE5NjQ2MjQzMjcxNzkwNzUwOMOzMzYyOTE0OTI2NTE5MDgxMzM5N8cZZZKzMzYyOTE0OTI2NTE5MDgxMzM5N5OgkACzNTI5NDQ0NTEzMDU0NDY5OTEyMccWZZKzNTI5NDQ0NTEzMDU0NDY5OTEyMcKzNDYzMjQzNDkyMTQyMTA5MzY1MccZZZKzNDYzMjQzNDkyMTQyMTA5MzY1MZOgkACzNDIzOTE5MjIwMTgwNTk1MDg4MMcWZZKzNDIzOTE5MjIwMTgwNTk1MDg4MMK0MTE0NjA0MDIyNTc3NDAwMTY0OTfHF2WStDExNDYwNDAyMjU3NzQwMDE2NDk3wrQxNDg3MDA1MjU0ODU2NTUyODIyMMcxZZK0MTQ4NzAwNTI1NDg1NjU1MjgyMjDHGBYAAAAAAQAAAAIAAAABAAAAAwAAAAIAAAC0MTA1OTA3MjQ1ODM4MDMwNjE4MjDHF2WStDEwNTkwNzI0NTgzODAzMDYxODIwwrM0OTkyNzcwNDE3NzQwMzMwMDU4xxllkrM0OTkyNzcwNDE3NzQwMzMwMDU4k6CQALQxNzAzMjAxNDg5MzEwNDk0NzAxNscaZZK0MTcwMzIwMTQ4OTMxMDQ5NDcwMTaToJAAtDE2MTk2MjU4ODk0NTA5NjgzODM4xzFlkrQxNjE5NjI1ODg5NDUwOTY4MzgzOMcYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALQxNTE1MjkwNjI4OTQ2Nzk1NzU4MccbZZK0MTUxNTI5MDYyODk0Njc5NTc1ODGkZGF0YbQxMzU5NzY5OTY0MjMyNjczNDUyMMcXZZK0MTM1OTc2OTk2NDIzMjY3MzQ1MjDCtDE2MDk0Mjk3NTI4NDM0ODUyOTg1xxdlkrQxNjA5NDI5NzUyODQzNDg1Mjk4NcK0MTU5NDMyMzcyMDQyMzI5MjI2OTLHF2WStDE1OTQzMjM3MjA0MjMyOTIyNjkywrM3MDkzMjQyMTkwMTU4MzEyMDIzxxZlkrM3MDkzMjQyMTkwMTU4MzEyMDIzwrM4OTI5MzA3OTAyODUzNjY5MDM4xzBlkrM4OTI5MzA3OTAyODUzNjY5MDM4xxgWAAAAAAEAAAACAAAAAQAAAAMAAAACAAAAszUzMzMzNjQ4NTQ5MzQ1ODk2MTjHMGWSszUzMzMzNjQ4NTQ5MzQ1ODk2MTjHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAACzMzM2Njc0OTMzNzYzMjQ3MzM1M8ccZZKzMzM2Njc0OTMzNzYzMjQ3MzM1M5Kkbm9uZZC0MTcwODg0ODU3NTAyMDQyNzYwNjjHMWWStDE3MDg4NDg1NzUwMjA0Mjc2MDY4xxgWAAAAAAEAAAACAAAAAQAAAAMAAAACAAAAtDEzODMzNTU2MTc4MDU3NzQxNTEwxxdlkrQxMzgzMzU1NjE3ODA1Nzc0MTUxMMKzNzYwNzM2NDg3Njc0MzI2NTUxOccZZZKzNzYwNzM2NDg3Njc0MzI2NTUxOZOgkAC0MTYxMDE1Mzk1MjgzNTU1NTU1NTbHF2WStDE2MTAxNTM5NTI4MzU1NTU1NTU2wrM1NjY4NDYxNDY3ODAwOTk2ODcwxxplkrM1NjY4NDYxNDY3ODAwOTk2ODcwpGRhdGG0MTMxODUyNzQ4NzI3MTA2OTAyNjPHHWWStDEzMTg1Mjc0ODcyNzEwNjkwMjYzkqRub25lkLM2MTQxNTU2MTkzNzM1MjI1MTg1xxZlkrM2MTQxNTU2MTkzNzM1MjI1MTg1wrQxNTkyMjYyOTcxNzA2NTQ0NTY4N8cXZZK0MTU5MjI2Mjk3MTcwNjU0NDU2ODfCszkyODEyMTM3MDU1MTI4Mzc5OTnHHGWSszkyODEyMTM3MDU1MTI4Mzc5OTmSpG5vbmWQtDEzNTExMTE2MzIwNjcyMDE0MDIzxxtlkrQxMzUxMTExNjMyMDY3MjAxNDAyM6RkYXRhtDEwMjQ0MzEyMDk3OTExODM3ODM2xxplkrQxMDI0NDMxMjA5NzkxMTgzNzgzNpOgkACzMjc4MTY5MDE1Mjk2NjkzNzYzMscWZZKzMjc4MTY5MDE1Mjk2NjkzNzYzMsKzNDk0NTE2NzcyMTA3MDc3OTA3M8ccZZKzNDk0NTE2NzcyMTA3MDc3OTA3M5Kkbm9uZZCzODk3NDc5ODEzMjgzODY3MzAwOccWZZKzODk3NDc5ODEzMjgzODY3MzAwOcKzNDAzNzI4NjM0OTYyNjQ1NTM4NccbZZKzNDAzNzI4NjM0OTYyNjQ1NTM4NaVwaXhlbLMxMjIwNTIxOTk4NzgwNjQ1OTM2xydlkrMxMjIwNTIxOTk4NzgwNjQ1OTM22BUAAAAAAAAAACADAABYAgAAszkwNTM3ODU0OTc3Mzc2NTU3OTHHFmWSszkwNTM3ODU0OTc3Mzc2NTU3OTHCtDEwMzM0MjIyNzYzMDI5OTEzNDcyxxdlkrQxMDMzNDIyMjc2MzAyOTkxMzQ3MsK0MTU2Nzg3MDQzODUxODAzNjc3NDPHF2WStDE1Njc4NzA0Mzg1MTgwMzY3NzQzwrM3MTA0OTAyMjI3NDE2NDk5NDA3xxllkrM3MTA0OTAyMjI3NDE2NDk5NDA3k6CQALQxNTQxODg3NzU1MzEwMTY0MDk4NscaZZK0MTU0MTg4Nzc1NTMxMDE2NDA5ODaToJAAszQ3MzEyOTY0MjkzMDAyNjkxMjDHMGWSszQ3MzEyOTY0MjkzMDAyNjkxMjDHGBYAAAAAAQAAAAMAAAAAAAAAAwAAAAIAAAC0MTM4NjY3Mzk0MzAzMTQ0Mjc1OTDHMWWStDEzODY2NzM5NDMwMzE0NDI3NTkwxxgWAAAAAAEAAAACAAAAAQAAAAMAAAACAAAAtDEyNDI4OTk4NjMzNDgyODU5MTMyxxdlkrQxMjQyODk5ODYzMzQ4Mjg1OTEzMsK0MTIwNzI1OTUxMTUyMDYxMzE4NzHHGmWStDEyMDcyNTk1MTE1MjA2MTMxODcxk6CQALQxNDA4OTI1NDU4NDM5MDQ1MTE0N8cXZZK0MTQwODkyNTQ1ODQzOTA0NTExNDfCszc4OTI5MTE2MTM1ODAwODU3MTLHMGWSszc4OTI5MTE2MTM1ODAwODU3MTLHGBYAAAAAAQAAAAIAAAABAAAAAwAAAAIAAACzMTk0OTE0OTk2MTc0ODgxNTkwN8cWZZKzMTk0OTE0OTk2MTc0ODgxNTkwN8OzODA1NzY2MzQ3MzE5ODU1OTAxNce1ZZKzODA1NzY2MzQ3MzE5ODU1OTAxNZTHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/x0AXySYbPwAAAAAAAAAAAAAAAAAAAADJJhs/AAAAAAAAAAAAAAAAAAAAABe30bgAAAAAe/DBv3vwwb8AAACAAACAP9cXAEA7RABAB0THDBcAAIA/AACAPwAAgD+zOTExNDg1MTI5MTI0MDc5OTUyM8caZZKzOTExNDg1MTI5MTI0MDc5OTUyM6RkYXRhszY2NDE4NTQxNDUwOTI0MDI0MDHHMGWSszY2NDE4NTQxNDUwOTI0MDI0MDHHGBYAAAAAAQAAAAIAAAABAAAAAwAAAAIAAAC0MTY3MTkzOTM3MDA0MjMzNzI3MzPHG2WStDE2NzE5MzkzNzAwNDIzMzcyNzMzpGRhdGG0MTIzMzI4Nzk0NDI5MDY3MTcwMjbHG2WStDEyMzMyODc5NDQyOTA2NzE3MDI2pGRhdGG0MTc2MTI3MzkzNzc5MTE1Njk5NTXHF2WStDE3NjEyNzM5Mzc3OTExNTY5OTU1w7QxNzQ4MzI5ODU1MTA0NjYxMDgwNccxZZK0MTc0ODMyOTg1NTEwNDY2MTA4MDXHGBYAAAAAAQAAAAIAAAABAAAAAwAAAAIAAACzMzAxNzkyMDY5MjMwODQ2Mzk2MccWZZKzMzAxNzkyMDY5MjMwODQ2Mzk2McKzNjM3MjI3ODA4NTM0MTg1MTY0NscaZZKzNjM3MjI3ODA4NTM0MTg1MTY0NqRkYXRhszkyNzU0MjQyNDg2MDMwMTkzNzPHFmWSszkyNzU0MjQyNDg2MDMwMTkzNzPCszQ2OTM4OTg4NTgzOTQxOTQ4ODfHHGWSszQ2OTM4OTg4NTgzOTQxOTQ4ODeSpG5vbmWQtDEzMDEwNzI3MTU0ODUzNjA0NjA4xxxlkrQxMzAxMDcyNzE1NDg1MzYwNDYwOKVwaXhlbLM5MDkyMTcxMDk3ODUyMjA4NjQzxxllkrM5MDkyMTcxMDk3ODUyMjA4NjQzk6CQALQxNzE1MDE2ODg3NDM4OTIzNzAyM8caZZK0MTcxNTAxNjg4NzQzODkyMzcwMjOToJAAszg3MDkwNzUzODIzNTM5OTkyMTHHGmWSszg3MDkwNzUzODIzNTM5OTkyMTGkZGF0YbM5MDIyMjMxMTM1MzUwNjM2OTEwxxZlkrM5MDIyMjMxMTM1MzUwNjM2OTEwwrQxNjA5NzMxNzcwODU0ODM1MTUxMMcdZZK0MTYwOTczMTc3MDg1NDgzNTE1MTCSpG5vbmWQszQ1MDc0OTA2MjI3MDQyOTY5NjTHFmWSszQ1MDc0OTA2MjI3MDQyOTY5NjTCszg4NzA1NzY0MjYyMjU0NjI3NTnHHGWSszg4NzA1NzY0MjYyMjU0NjI3NTmSpG5vbmWQszg1MjM3NjU0MTY4NTY2MTEyMjLHMGWSszg1MjM3NjU0MTY4NTY2MTEyMjLHGBYAAAAAAQAAAAIAAAABAAAAAwAAAAIAAACyMjAxODM0OTM1NTY0MjQ0NTI3xxtlkrIyMDE4MzQ5MzU1NjQyNDQ1MjeSpG5vbmWQtDE2MzgwMzgzNzIzODE0NDk0NDM1xzFlkrQxNjM4MDM4MzcyMzgxNDQ5NDQzNccYFgAAAAABAAAAAwAAAAAAAAADAAAAAgAAALQxNTIxMTgzNTg5NzIyMTYzNjk0NscXZZK0MTUyMTE4MzU4OTcyMjE2MzY5NDbDszczMTgxNTcwNTM5NDcyNjUzMDTHGWWSszczMTgxNTcwNTM5NDcyNjUzMDSToJAAszc2NzA0NTI2Mzc4NjAzNDEzMzXHFmWSszc2NzA0NTI2Mzc4NjAzNDEzMzXCtDEzMjIwODU4ODQyMTMxOTUyNzMyxx1lkrQxMzIyMDg1ODg0MjEzMTk1MjczMpKkbm9uZZCzODcwODczNjAwODk3NTEwMzM5NMcZZZKzODcwODczNjAwODk3NTEwMzM5NJOgkACzNjEyMjI1MDYwMzQwNDA5OTU5NccwZZKzNjEyMjI1MDYwMzQwNDA5OTU5NccYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALMyMjMwMTYzNjg5MTYyOTIyNzA5xxplkrMyMjMwMTYzNjg5MTYyOTIyNzA5pGRhdGGzMjc2ODg2NTA2OTIyNTUxODgzOccWZZKzMjc2ODg2NTA2OTIyNTUxODgzOcKzOTAxNjA5MDYyMDYwMDQ3MjQ0NscWZZKzOTAxNjA5MDYyMDYwMDQ3MjQ0NsOzNDQ5MTU4NTQ4NjkyNTQ1MjQwMscaZZKzNDQ5MTU4NTQ4NjkyNTQ1MjQwMqRkYXRhtDExODk3MDEwNDA1MzE4MDAyMTY1xx1lkrQxMTg5NzAxMDQwNTMxODAwMjE2NZKkbm9uZZCzMjkzNjIxMDM4Njc3MzQwMTQxNcccZZKzMjkzNjIxMDM4Njc3MzQwMTQxNZKkbm9uZZC0MTE2MTU5OTQzODQ0ODYyMzIyODfHF2WStDExNjE1OTk0Mzg0NDg2MjMyMjg3wrQxMTIwNzE3MTYyMzY1ODUwNDEzNMcXZZK0MTEyMDcxNzE2MjM2NTg1MDQxMzTCtDE3OTkxNTY2MjI2NjMxNjEzNTE3xx1lkrQxNzk5MTU2NjIyNjYzMTYxMzUxN5LNAyDNAlizMTA0OTIyODgxMzg2MTg0NzQ2N8cWZZKzMTA0OTIyODgxMzg2MTg0NzQ2N8KyNTk5MzUzNTY1OTAzNTMyMTE2xxVlkrI1OTkzNTM1NjU5MDM1MzIxMTbCtDE2Nzg2NjU5NTUxOTU2NTA4MTI0xxdlkrQxNjc4NjY1OTU1MTk1NjUwODEyNMKzNDY3ODgzMzE5NzY4ODAxNTc3MscWZZKzNDY3ODgzMzE5NzY4ODAxNTc3MsKzMzYzNzkxODQ0NjA0MDI5ODQwOccaZZKzMzYzNzkxODQ0NjA0MDI5ODQwOaRkYXRhszQyMTc3NDI3MjI3OTQ3NDA4NjDHGmWSszQyMTc3NDI3MjI3OTQ3NDA4NjCkZGF0YbQxMDAwNjUxMzk0Mjg1MTg2MjE5N8cXZZK0MTAwMDY1MTM5NDI4NTE4NjIxOTfCszc4MzM1MDEwNTMyMjg1ODM1NDLHGWWSszc4MzM1MDEwNTMyMjg1ODM1NDKToJAAtDE4MzUxNzAwMTM4NzQ5MzI0NjE0xxxlkrQxODM1MTcwMDEzODc0OTMyNDYxNKVwaXhlbLQxMjQ4NDM0MTk4NjUwODczMjk2OccXZZK0MTI0ODQzNDE5ODY1MDg3MzI5NjnDszgzNzIyNDkzNDA3ODE1MDgwMzXHGWWSszgzNzIyNDkzNDA3ODE1MDgwMzWToJAAszI4NTI0NTE3MzYyNjYwNzAwODLHHGWSszI4NTI0NTE3MzYyNjYwNzAwODKSpG5vbmWQtDE1NTEyNjM3MDY3MTc0Mzc1MDY2xx1lkrQxNTUxMjYzNzA2NzE3NDM3NTA2NpKkbm9uZZCyMTEyNDk3OTY0Mzc2OTgxOTczxxVlkrIxMTI0OTc5NjQzNzY5ODE5NzPCszU2NjIxNjU5NzMzNTI3NjA1NDLHHGWSszU2NjIxNjU5NzMzNTI3NjA1NDKSpG5vbmWQszY1MjgyODEzNzc4ODYxNjk1ODDHFmWSszY1MjgyODEzNzc4ODYxNjk1ODDCszgxNDYwMDE2OTkyNDkxMjgyMTnHGmWSszgxNDYwMDE2OTkyNDkxMjgyMTmkZGF0YbM2OTY1Mjk2Njc3NzE5ODk4NDE5xxplkrM2OTY1Mjk2Njc3NzE5ODk4NDE5pGRhdGGzMjAyOTI3Mzk0Njc4NjIyOTMyMccWZZKzMjAyOTI3Mzk0Njc4NjIyOTMyMcOzMzQxNDAxODQzOTkyMzI1MzI4N8cWZZKzMzQxNDAxODQzOTkyMzI1MzI4N8O0MTA1MTI2NDEzNjUzNTUxNjc1NjjHF2WStDEwNTEyNjQxMzY1MzU1MTY3NTY4w7QxNTEwNjgyMzgzMjg4MDkyNjI3M8caZZK0MTUxMDY4MjM4MzI4ODA5MjYyNzOToJAAszY4Njg1Mzg5MDI4MTU2MjgxNzPHG2WSszY4Njg1Mzg5MDI4MTU2MjgxNzOlcGl4ZWyzMzQwODYyNzgwNzIwOTU1OTYzOccWZZKzMzQwODYyNzgwNzIwOTU1OTYzOcKzNTAyMDc0NzA1MzEyOTI1NzM1NMcaZZKzNTAyMDc0NzA1MzEyOTI1NzM1NKRkYXRhszcyNTAxMDQyMTg0ODEyNTUxMDXHFmWSszcyNTAxMDQyMTg0ODEyNTUxMDXCsjQ2NTYxOTQwODEwODg1MTI4NMcYZZKyNDY1NjE5NDA4MTA4ODUxMjg0k6CQALQxMDQ4MTg5Njk4ODYxOTg4NDIxOMcoZZK0MTA0ODE4OTY5ODg2MTk4ODQyMTjYFQAAAAAAAAAAIAMAAFgCAACzNjAzMzg4MjA4NTA2NjczNDEyMMcWZZKzNjAzMzg4MjA4NTA2NjczNDEyMMOzODU3NzI3NjM1NDM4ODA1MzkwNscWZZKzODU3NzI3NjM1NDM4ODA1MzkwNsO0MTc0MjM2NDYzODM3NTAxMDg5MjDHHWWStDE3NDIzNjQ2MzgzNzUwMTA4OTIwkqRub25lkLM5MTQxMjk2Mzg0MTM5MjAwOTk1xxZlkrM5MTQxMjk2Mzg0MTM5MjAwOTk1w7MzNDM2OTkwMDgzMzIzMzkzMjM3xxZlkrMzNDM2OTkwMDgzMzIzMzkzMjM3wrM1NjE4MDc5OTc4NzI4ODQxMjI1xxxlkrM1NjE4MDc5OTc4NzI4ODQxMjI1kqRub25lkLQxMjEwMzI4MTc4MjYxODYzMTc5NscXZZK0MTIxMDMyODE3ODI2MTg2MzE3OTbCtDEyNjc0MzY1NTM4ODM0OTYxNjI1xx1lkrQxMjY3NDM2NTUzODgzNDk2MTYyNZKkbm9uZZCzNTQzNDk4ODAzMTA3NDQyNDI3M8cZZZKzNTQzNDk4ODAzMTA3NDQyNDI3M5OgkACzODIxODkzNTk0MzI5OTE1OTMwNccwZZKzODIxODkzNTk0MzI5OTE1OTMwNccYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALQxMjI2NjA3NTU1MTUyMzI2NzQwNMceZZK0MTIyNjYwNzU1NTE1MjMyNjc0MDSnI0ZGRkZGRrQxNTI1NzU0NDMzNTA4MzQ1ODI2OMcXZZK0MTUyNTc1NDQzMzUwODM0NTgyNjjCszQxNTY3ODU1MDM4MzQ4NjQ2MjfHHGWSszQxNTY3ODU1MDM4MzQ4NjQ2MjeSpG5vbmWQtDExMzY1MDk4MzIwNTc1Mzc3MzkxxxplkrQxMTM2NTA5ODMyMDU3NTM3NzM5MZOgkACzNzMyOTcyNTEwODIzMTIxODgzMccWZZKzNzMyOTcyNTEwODIzMTIxODgzMcKzNjg5NTYwMzM0NDk0Mjg1NjQ4NMccZZKzNjg5NTYwMzM0NDk0Mjg1NjQ4NJKkbm9uZZC0MTYzMjMxNDY3MDg5NzQwNDk5MTfHF2WStDE2MzIzMTQ2NzA4OTc0MDQ5OTE3gLM2ODg1NDEzMzc2MjEzNTQ0NzQ2xxZlkrM2ODg1NDEzMzc2MjEzNTQ0NzQ2wrQxMjE4NDk1OTE4ODYxNTY4MTcwMscXZZK0MTIxODQ5NTkxODg2MTU2ODE3MDLDtDE3MTU3Mjc1NTE2MjU5MzQ0OTU5xzFlkrQxNzE1NzI3NTUxNjI1OTM0NDk1OccYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALM2OTE0MjU2ODc3NjQ0NzAzNzY4xxZlkrM2OTE0MjU2ODc3NjQ0NzAzNzY4w7QxNDYwODQ4NzA5MjQ1MTE1NzUwMccXZZK0MTQ2MDg0ODcwOTI0NTExNTc1MDHDtDEyMTgzMTEyNTM5NTA5ODY5NTU3xxdlkrQxMjE4MzExMjUzOTUwOTg2OTU1N8K0MTA3Nzg5OTc1ODQ4NjY0NTM4MjjHG2WStDEwNzc4OTk3NTg0ODY2NDUzODI4pGRhdGGzMjMwMDc1MjE4NzUyMTg4MTUwMMcWZZKzMjMwMDc1MjE4NzUyMTg4MTUwMMKzMTUyMTM0Mjk1MzU4Nzg3MTk4NccwZZKzMTUyMTM0Mjk1MzU4Nzg3MTk4NccYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALM4NTE0NjAzMDQ0ODE2NjQ1MTg4xxtlkrM4NTE0NjAzMDQ0ODE2NjQ1MTg4pXBpeGVsszI2NTUwODE1MzA3MDkyMTY0MjLHFmWSszI2NTUwODE1MzA3MDkyMTY0MjLCtDExOTQzNzM1NjEwMTk5NjQ1MTQ4xxdlkrQxMTk0MzczNTYxMDE5OTY0NTE0OMK0MTMwOTU1MTY4ODczMjkzMjQxMzbHMWWStDEzMDk1NTE2ODg3MzI5MzI0MTM2xxgWAAAAAAEAAAACAAAAAQAAAAMAAAACAAAAtDE4NDM5Nzg1MTExOTYzNjI0NjY0xxtlkrQxODQzOTc4NTExMTk2MzYyNDY2NKRkYXRhszk3NTI4Nzk2NDE5Njc5ODYzNDbHGmWSszk3NTI4Nzk2NDE5Njc5ODYzNDakZGF0YbM4NjEyNzY1MDI0OTI2MzAxMTU0xxplkrM4NjEyNzY1MDI0OTI2MzAxMTU0pGRhdGGzNDY4ODAyMDkyMDc2NzY5MTA4M8cwZZKzNDY4ODAyMDkyMDc2NzY5MTA4M8cYFgAAAAABAAAAAgAAAAEAAAADAAAAAgAAALMyODEyODgyMzA1NzI0Njc2NTY2xxZlkrMyODEyODgyMzA1NzI0Njc2NTY2wrQxNjMwOTUyNzgxMDA1NDg3NzAyM8coZZK0MTYzMDk1Mjc4MTAwNTQ4NzcwMjPYFSMAAAArAAAA7QIAAB0CAAC0MTQ4NzI0MTIwNDg5ODAyNTY1MjDHMWWStDE0ODcyNDEyMDQ4OTgwMjU2NTIwxxgWAAAAAAEAAAACAAAAAQAAAAMAAAACAAAAtDExNDMyMTkxMDM1NjIxMDA0ODg3xxdlkrQxMTQzMjE5MTAzNTYyMTAwNDg4N8K0MTYyMDYwNzU0MjY2Njc4NTIzNzfHGmWStDE2MjA2MDc1NDI2NjY3ODUyMzc3k6CQALQxMjM4NzY2MDc1MjIxMjEwMjI0MccXZZK0MTIzODc2NjA3NTIyMTIxMDIyNDHCtDE0MjQ5MjE5MzQ4NTI0MzIyOTY5xxplkrQxNDI0OTIxOTM0ODUyNDMyMjk2OZOgkAC0MTAxNTc1NDkzOTQ5MDQ0OTQ1MDDHF2WStDEwMTU3NTQ5Mzk0OTA0NDk0NTAww7QxMDkzNjMwNDUzOTQ4NDM4OTI1MccdZZK0MTA5MzYzMDQ1Mzk0ODQzODkyNTGSpG5vbmWQszQ2NzAzMTcyMzUzMTI1MzI3OTTHFmWSszQ2NzAzMTcyMzUzMTI1MzI3OTTDtDEzNDQ2NzY1OTE0NDEzMzg2MDMwxxdlkrQxMzQ0Njc2NTkxNDQxMzM4NjAzMMK0MTY0OTcxMDEwMDg0NzM2OTE2ODTHtmWStDE2NDk3MTAxMDA4NDczNjkxNjg0lMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD/HQBcK1yM7AAAAAAAAAAAAAAAAAAAAAA50WjsAAAAAAAAAAAAAAAAAAAAAF7fRuAAAAAAAAIC/AACAvwAAAIAAAIA/1xcAAEhEAAAWRMcMFwAAgD8AAIA/AACAP6NzdWKCp3BheWxvYWTJAAOGYWaThbQxNTYxMDg0MDE3NjQ5MjA0NTU0MMcUaLM4MDEzMTMzNTk2MTMyOTY2NzM2tDE2NTE2MTYwODExMzUyOTA3NDY1iad2aXNpYmxlxxRoszI5NjcxNTg3MzE0NDIxNjEwNDilcGxvdHOQr2JhY2tncm91bmRjb2xvcscUaLMxNDEwMzEyNDA5NjQyNTY3MjQzqXBpeGVsYXJlYccVaLQxMDQ4MTg5Njk4ODYxOTg4NDIxOKZjYW1lcmHHFWi0MTY0OTcxMDEwMDg0NzM2OTE2ODSkdXVpZLMxNDg1OTcwNTQzMjk5MDA0ODI2q2NhbTNkX3N0YXRlwKpjbGVhcnNjZW5lxxRoszk3NzUxMDU3OTA1NjkwNjM0MzSoY2hpbGRyZW6Riad2aXNpYmxlxxRoszYwMzM4ODIwODUwNjY3MzQxMjClcGxvdHPcAB+OrHRyYW5zcGFyZW5jeccVaLQxNjc4NjY1OTU1MTk1NjUwODEyNKVzcGFjZccVaLQxNzY3OTc3MTI5MzMyMTQ2NDUzMax2ZXJ0ZXhhcnJheXOBqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAADEIAACxCAABERAAALEIAAAxCAAASRAAAREQAABJEpG5hbWW4bWVzaC03MDIwNDc5MzU2MjU0NzI0NDE3qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAXvmludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcsOpYmFja2xpZ2h0ygAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAyMIAAIA/p2RpZmZ1c2XHDBfNzMw+zczMPs3MzD6qY29sb3JyYW5nZcOnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKdhbWJpZW50xwwXzcwMP83MDD/NzAw/qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAKdwYXR0ZXJuwqxub3JtYWxtYXRyaXjHJBcAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD+idXbXFwAAAAAAAAAAp3NoYWRpbmfCqHNwZWN1bGFyxwwXzcxMPs3MTD7NzEw+p25vcm1hbHPHDBcAAAAAAAAAAAAAAACncGlja2luZ8Kpb2JqZWN0X2lkAK11bmlmb3JtX2NvbG9y2BcAAIA/AACAPwAAgD8AAIA/q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6Vjb2xvcsKpc2hpbmluZXNzykIAAACoY29sb3JtYXDDp3Zpc2libGXHFGizNzg2Mjk1MDczNzg1MjU5MzAxMrFhdHRyaWJ1dGVfdXBkYXRlcscVaLQxNTM0ODA3MDQ1ODA4OTI4NjMxOahvdmVyZHJhd8cVaLQxNTk5MjQwNTk1MTIxMDQyMTM1MK91bmlmb3JtX3VwZGF0ZXLHFWi0MTYxMTg5Mzk0ODIzMTYxNzkxMjmlZmFjZXPHFGizODkzMTU2NzQ3ODcxMDc1ODYwM6R1dWlkszcwMjA0NzkzNTYyNTQ3MjQ0MTetdmVydGV4X3NvdXJjZdoUKSN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMzIHNwZWN1bGFyOwp2ZWMzIGdldF9zcGVjdWxhcigpe3JldHVybiBzcGVjdWxhcjt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIHZlYzMgbm9ybWFsczsKdmVjMyBnZXRfbm9ybWFscygpe3JldHVybiBub3JtYWxzO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwYXR0ZXJuOwpib29sIGdldF9wYXR0ZXJuKCl7cmV0dXJuIHBhdHRlcm47fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBib29sIGludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcjsKYm9vbCBnZXRfaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyKCl7cmV0dXJuIGludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcjt9CnVuaWZvcm0gZmxvYXQgYmFja2xpZ2h0OwpmbG9hdCBnZXRfYmFja2xpZ2h0KCl7cmV0dXJuIGJhY2tsaWdodDt9CnVuaWZvcm0gdmVjMyBhbWJpZW50Owp2ZWMzIGdldF9hbWJpZW50KCl7cmV0dXJuIGFtYmllbnQ7fQp1bmlmb3JtIG1hdDMgbm9ybWFsbWF0cml4OwptYXQzIGdldF9ub3JtYWxtYXRyaXgoKXtyZXR1cm4gbm9ybWFsbWF0cml4O30KdW5pZm9ybSB2ZWMzIGxpZ2h0cG9zaXRpb247CnZlYzMgZ2V0X2xpZ2h0cG9zaXRpb24oKXtyZXR1cm4gbGlnaHRwb3NpdGlvbjt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHNoaW5pbmVzczsKZmxvYXQgZ2V0X3NoaW5pbmVzcygpe3JldHVybiBzaGluaW5lc3M7fQp1bmlmb3JtIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgY29sb3I7CmJvb2wgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSB2ZWM0IHVuaWZvcm1fY29sb3I7CnZlYzQgZ2V0X3VuaWZvcm1fY29sb3IoKXtyZXR1cm4gdW5pZm9ybV9jb2xvcjt9CnVuaWZvcm0gYm9vbCBzaGFkaW5nOwpib29sIGdldF9zaGFkaW5nKCl7cmV0dXJuIHNoYWRpbmc7fQp1bmlmb3JtIHZlYzMgZGlmZnVzZTsKdmVjMyBnZXRfZGlmZnVzZSgpe3JldHVybiBkaWZmdXNlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CgoKCm91dCB2ZWMyIGZyYWdfdXY7Cm91dCB2ZWMzIG9fbm9ybWFsOwpvdXQgdmVjMyBvX2NhbWRpcjsKb3V0IHZlYzMgb19saWdodGRpcjsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KGZsb2F0IHYpe3JldHVybiB2ZWM0KHYsIDAuMCwgMC4wLCAwLjApO30KdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgpmbG9hdCBfbm9ybWFsaXplKGZsb2F0IHZhbCwgZmxvYXQgZnJvbSwgZmxvYXQgdG8pe3JldHVybiAodmFsLWZyb20pIC8gKHRvIC0gZnJvbSk7fQoKdmVjNCBnZXRfY29sb3JfZnJvbV9jbWFwKGZsb2F0IHZhbHVlLCBzYW1wbGVyMkQgY29sb3JfbWFwLCB2ZWMyIGNvbG9ycmFuZ2UpIHsKICAgIGZsb2F0IGNtaW4gPSBjb2xvcnJhbmdlLng7CiAgICBmbG9hdCBjbWF4ID0gY29sb3JyYW5nZS55OwogICAgaWYgKHZhbHVlIDw9IGNtYXggJiYgdmFsdWUgPj0gY21pbikgewogICAgICAgIC8vIGluIHZhbHVlIHJhbmdlLCBjb250aW51ZSEKICAgIH0gZWxzZSBpZiAodmFsdWUgPCBjbWluKSB7CiAgICAgICAgcmV0dXJuIGdldF9sb3djbGlwKCk7CiAgICB9IGVsc2UgaWYgKHZhbHVlID4gY21heCkgewogICAgICAgIHJldHVybiBnZXRfaGlnaGNsaXAoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgLy8gaXNuYW4gaXMgYnJva2VuIChvZiBjb3Vyc2UpIC0uLQogICAgICAgIC8vIHNvIGlmIG91dHNpZGUgdmFsdWUgcmFuZ2UgYW5kIG5vdCBzbWFsbGVyL2JpZ2dlciBtaW4vbWF4IHdlIGFzc3VtZSBOYU4KICAgICAgICByZXR1cm4gZ2V0X25hbl9jb2xvcigpOwogICAgfQogICAgZmxvYXQgaTAxID0gY2xhbXAoKHZhbHVlIC0gY21pbikgLyAoY21heCAtIGNtaW4pLCAwLjAsIDEuMCk7CiAgICAvLyAxLzAgY29ycmVzcG9uZHMgdG8gdGhlIGNvcm5lciBvZiB0aGUgY29sb3JtYXAsIHNvIHRvIHByb3Blcmx5IGludGVycG9sYXRlCiAgICAvLyBiZXR3ZWVuIHRoZSBjb2xvcnMsIHdlIG5lZWQgdG8gc2NhbGUgaXQsIHNvIHRoYXQgdGhlIGVuZHMgYXJlIGF0IDEgLSAoc3RlcHNpemUvMikgYW5kIDArKHN0ZXBzaXplLzIpLgogICAgZmxvYXQgc3RlcHNpemUgPSAxLjAgLyBmbG9hdCh0ZXh0dXJlU2l6ZShjb2xvcl9tYXAsIDApKTsKICAgIGkwMSA9ICgxLjAgLSBzdGVwc2l6ZSkgKiBpMDEgKyAwLjUgKiBzdGVwc2l6ZTsKICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yX21hcCwgdmVjMihpMDEsIDAuMCkpOwp9Cgp2ZWM0IHZlcnRleF9jb2xvcih2ZWMzIGNvbG9yLCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIHZlYzQoY29sb3IsIDEuMCk7Cn0KdmVjNCB2ZXJ0ZXhfY29sb3IodmVjNCBjb2xvciwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBjb2xvcjsKfQp2ZWM0IHZlcnRleF9jb2xvcihib29sIGNvbG9yLCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgLy8gY29sb3Igc2FtcGxpbmcgaGFwcGVucyBpbiBmcmFnbWVudCBzaGFkZXIKICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAwLjAsIDAuMCk7Cn0KdmVjNCB2ZXJ0ZXhfY29sb3IoYm9vbCB2YWx1ZSwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgLy8gY29sb3Igc2FtcGxpbmcgaGFwcGVucyBpbiBmcmFnbWVudCBzaGFkZXIKICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAwLjAsIDAuMCk7Cn0KdmVjNCB2ZXJ0ZXhfY29sb3IoZmxvYXQgdmFsdWUsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGlmIChnZXRfaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyKCkpIHsKICAgICAgICByZXR1cm4gdmVjNCh2YWx1ZSwgMC4wLCAwLjAsIDAuMCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBnZXRfY29sb3JfZnJvbV9jbWFwKHZhbHVlLCBjb2xvcm1hcCwgY29sb3JyYW5nZSk7CiAgICB9Cn0KCnZvaWQgcmVuZGVyKHZlYzQgcG9zaXRpb25fd29ybGQsIHZlYzMgbm9ybWFsLCBtYXQ0IHZpZXcsIG1hdDQgcHJvamVjdGlvbiwgdmVjMyBsaWdodHBvc2l0aW9uKQp7CiAgICAvLyBub3JtYWwgaW4gd29ybGQgc3BhY2UKICAgIG9fbm9ybWFsID0gZ2V0X25vcm1hbG1hdHJpeCgpICogbm9ybWFsOwogICAgLy8gcG9zaXRpb24gaW4gdmlldyBzcGFjZSAoYXMgc2VlbiBmcm9tIGNhbWVyYSkKICAgIHZlYzQgdmlld19wb3MgPSB2aWV3ICogcG9zaXRpb25fd29ybGQ7CiAgICAvLyBwb3NpdGlvbiBpbiBjbGlwIHNwYWNlICh3LyBkZXB0aCkKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbiAqIHZpZXdfcG9zOwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CiAgICAvLyBkaXJlY3Rpb24gdG8gbGlnaHQKICAgIG9fbGlnaHRkaXIgPSBub3JtYWxpemUodmlldyp2ZWM0KGxpZ2h0cG9zaXRpb24sIDEuMCkgLSB2aWV3X3BvcykueHl6OwogICAgLy8gZGlyZWN0aW9uIHRvIGNhbWVyYQogICAgLy8gVGhpcyBpcyBlcXVpdmFsZW50IHRvCiAgICAvLyBub3JtYWxpemUodmlldyp2ZWM0KGV5ZXBvc2l0aW9uLCAxLjApIC0gdmlld19wb3MpLnh5egogICAgLy8gKGJ5IGRlZmluaXRpb24gYHZpZXcgKiBleWVwb3NpdGlvbiA9IDBgKQogICAgb19jYW1kaXIgPSBub3JtYWxpemUoLXZpZXdfcG9zKS54eXo7Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgLy8gZ2V0XyogZ2V0cyB0aGUgZ2xvYmFsIGlucHV0cyAodW5pZm9ybSwgc2FtcGxlciwgcG9zaXRpb24gYXJyYXkpCiAgICAvLyB0aG9zZSBmdW5jdGlvbnMgd2lsbCBnZXQgaW5zZXJ0ZWQgYnkgdGhlIHNoYWRlciBjcmVhdGlvbiBwaXBlbGluZQogICAgdmVjMyB2ZXJ0ZXhfcG9zaXRpb24gPSB0b3ZlYzMoZ2V0X3Bvc2l0aW9uKCkpOwogICAgaWYgKGlzbmFuKHZlcnRleF9wb3NpdGlvbi56KSkgewogICAgICAgIHZlcnRleF9wb3NpdGlvbi56ID0gMC4wOwogICAgfQogICAgdmVjNCBwb3NpdGlvbl93b3JsZCA9IG1vZGVsICogdmVjNCh2ZXJ0ZXhfcG9zaXRpb24sIDEpOwoKICAgIHJlbmRlcihwb3NpdGlvbl93b3JsZCwgZ2V0X25vcm1hbHMoKSwgdmlldywgcHJvamVjdGlvbiwgZ2V0X2xpZ2h0cG9zaXRpb24oKSk7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2ID0gdmVjMigxLjAgLSBmcmFnX3V2LnksIGZyYWdfdXYueCk7CiAgICBmcmFnX2NvbG9yID0gdmVydGV4X2NvbG9yKGdldF9jb2xvcigpLCBnZXRfY29sb3JyYW5nZSgpLCBjb2xvcm1hcCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfVmVydGV4SUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hVUI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzMgc3BlY3VsYXI7CnZlYzMgZ2V0X3NwZWN1bGFyKCl7cmV0dXJuIHNwZWN1bGFyO30KdW5pZm9ybSBib29sIGNvbG9ybWFwOwpib29sIGdldF9jb2xvcm1hcCgpe3JldHVybiBjb2xvcm1hcDt9CnVuaWZvcm0gdmVjMyBub3JtYWxzOwp2ZWMzIGdldF9ub3JtYWxzKCl7cmV0dXJuIG5vcm1hbHM7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBhdHRlcm47CmJvb2wgZ2V0X3BhdHRlcm4oKXtyZXR1cm4gcGF0dGVybjt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGJvb2wgaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyOwpib29sIGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKXtyZXR1cm4gaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyO30KdW5pZm9ybSBmbG9hdCBiYWNrbGlnaHQ7CmZsb2F0IGdldF9iYWNrbGlnaHQoKXtyZXR1cm4gYmFja2xpZ2h0O30KdW5pZm9ybSB2ZWMzIGFtYmllbnQ7CnZlYzMgZ2V0X2FtYmllbnQoKXtyZXR1cm4gYW1iaWVudDt9CnVuaWZvcm0gbWF0MyBub3JtYWxtYXRyaXg7Cm1hdDMgZ2V0X25vcm1hbG1hdHJpeCgpe3JldHVybiBub3JtYWxtYXRyaXg7fQp1bmlmb3JtIHZlYzMgbGlnaHRwb3NpdGlvbjsKdmVjMyBnZXRfbGlnaHRwb3NpdGlvbigpe3JldHVybiBsaWdodHBvc2l0aW9uO30KdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzOwpmbG9hdCBnZXRfc2hpbmluZXNzKCl7cmV0dXJuIHNoaW5pbmVzczt9CnVuaWZvcm0gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBjb2xvcjsKYm9vbCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIHZlYzQgdW5pZm9ybV9jb2xvcjsKdmVjNCBnZXRfdW5pZm9ybV9jb2xvcigpe3JldHVybiB1bmlmb3JtX2NvbG9yO30KdW5pZm9ybSBib29sIHNoYWRpbmc7CmJvb2wgZ2V0X3NoYWRpbmcoKXtyZXR1cm4gc2hhZGluZzt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KCmluIHZlYzIgZnJhZ191djsKaW4gdmVjNCBmcmFnX2NvbG9yOwpmbGF0IGluIGludCBzYW1wbGVfZnJhZ19jb2xvcjsKCmluIHZlYzMgb19ub3JtYWw7CmluIHZlYzMgb19jYW1kaXI7CmluIHZlYzMgb19saWdodGRpcjsKCnZlYzMgYmxpbm5waG9uZyh2ZWMzIE4sIHZlYzMgViwgdmVjMyBMLCB2ZWMzIGNvbG9yKXsKICAgIGZsb2F0IGRpZmZfY29lZmYgPSBtYXgoZG90KEwsIE4pLCAwLjApOwoKICAgIC8vIHNwZWN1bGFyIGNvZWZmaWNpZW50CiAgICB2ZWMzIEggPSBub3JtYWxpemUoTCArIFYpOwoKICAgIGZsb2F0IHNwZWNfY29lZmYgPSBwb3cobWF4KGRvdChILCBOKSwgMC4wKSwgZ2V0X3NoaW5pbmVzcygpKTsKICAgIGlmIChkaWZmX2NvZWZmIDw9IDAuMCkKICAgICAgICBzcGVjX2NvZWZmID0gMC4wOwogICAgLy8gZmluYWwgbGlnaHRpbmcgbW9kZWwKICAgIHJldHVybiB2ZWMzKAogICAgICAgIGdldF9kaWZmdXNlKCkgKiBkaWZmX2NvZWZmICogY29sb3IgKwogICAgICAgIGdldF9zcGVjdWxhcigpICogc3BlY19jb2VmZgogICAgKTsKfQoKdmVjNCBnZXRfY29sb3IodmVjMyBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiB2ZWM0KGNvbG9yLCAxLjApOwp9Cgp2ZWM0IGdldF9jb2xvcih2ZWM0IGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGNvbG9yOwp9Cgp2ZWM0IGdldF9jb2xvcihib29sIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGZyYWdfY29sb3I7ICAvLyBjb2xvciBub3QgaW4gdW5pZm9ybQp9Cgp2ZWM0IGdldF9jb2xvcihzYW1wbGVyMkQgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICBpZiAoZ2V0X3BhdHRlcm4oKSkgewogICAgICAgIHZlYzIgc2l6ZSA9IHZlYzIodGV4dHVyZVNpemUoY29sb3IsIDApKTsKICAgICAgICB2ZWMyIHBvcyA9IGdsX0ZyYWdDb29yZC54eTsKICAgICAgICByZXR1cm4gdGV4ZWxGZXRjaChjb2xvciwgaXZlYzIobW9kKHBvcy54LCBzaXplLngpLCBtb2QocG9zLnksIHNpemUueSkpLCAwKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRleHR1cmUoY29sb3IsIHV2KTsKICAgIH0KfQoKZmxvYXQgX25vcm1hbGl6ZShmbG9hdCB2YWwsIGZsb2F0IGZyb20sIGZsb2F0IHRvKXtyZXR1cm4gKHZhbC1mcm9tKSAvICh0byAtIGZyb20pO30KCnZlYzQgZ2V0X2NvbG9yX2Zyb21fY21hcChmbG9hdCB2YWx1ZSwgc2FtcGxlcjJEIGNvbG9yX21hcCwgdmVjMiBjb2xvcnJhbmdlKSB7CiAgICBmbG9hdCBjbWluID0gY29sb3JyYW5nZS54OwogICAgZmxvYXQgY21heCA9IGNvbG9ycmFuZ2UueTsKICAgIGlmICh2YWx1ZSA8PSBjbWF4ICYmIHZhbHVlID49IGNtaW4pIHsKICAgICAgICAvLyBpbiB2YWx1ZSByYW5nZSwgY29udGludWUhCiAgICB9IGVsc2UgaWYgKHZhbHVlIDwgY21pbikgewogICAgICAgIHJldHVybiBnZXRfbG93Y2xpcCgpOwogICAgfSBlbHNlIGlmICh2YWx1ZSA+IGNtYXgpIHsKICAgICAgICByZXR1cm4gZ2V0X2hpZ2hjbGlwKCk7CiAgICB9IGVsc2UgewogICAgICAgIC8vIGlzbmFuIGlzIGJyb2tlbiAob2YgY291cnNlKSAtLi0KICAgICAgICAvLyBzbyBpZiBvdXRzaWRlIHZhbHVlIHJhbmdlIGFuZCBub3Qgc21hbGxlci9iaWdnZXIgbWluL21heCB3ZSBhc3N1bWUgTmFOCiAgICAgICAgcmV0dXJuIGdldF9uYW5fY29sb3IoKTsKICAgIH0KICAgIGZsb2F0IGkwMSA9IGNsYW1wKCh2YWx1ZSAtIGNtaW4pIC8gKGNtYXggLSBjbWluKSwgMC4wLCAxLjApOwogICAgLy8gMS8wIGNvcnJlc3BvbmRzIHRvIHRoZSBjb3JuZXIgb2YgdGhlIGNvbG9ybWFwLCBzbyB0byBwcm9wZXJseSBpbnRlcnBvbGF0ZQogICAgLy8gYmV0d2VlbiB0aGUgY29sb3JzLCB3ZSBuZWVkIHRvIHNjYWxlIGl0LCBzbyB0aGF0IHRoZSBlbmRzIGFyZSBhdCAxIC0gKHN0ZXBzaXplLzIpIGFuZCAwKyhzdGVwc2l6ZS8yKS4KICAgIGZsb2F0IHN0ZXBzaXplID0gMS4wIC8gZmxvYXQodGV4dHVyZVNpemUoY29sb3JfbWFwLCAwKSk7CiAgICBpMDEgPSAoMS4wIC0gc3RlcHNpemUpICogaTAxICsgMC41ICogc3RlcHNpemU7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvcl9tYXAsIHZlYzIoaTAxLCAwLjApKTsKfQoKdmVjNCBnZXRfY29sb3IoYm9vbCBjb2xvciwgdmVjMiB1diwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgaWYgKGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKSkgewogICAgICAgIHJldHVybiBnZXRfY29sb3JfZnJvbV9jbWFwKGZyYWdfY29sb3IueCwgY29sb3JtYXAsIGNvbG9ycmFuZ2UpOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZnJhZ19jb2xvcjsKICAgIH0KfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIHZhbHVlcywgdmVjMiB1diwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgZmxvYXQgdmFsdWUgPSB0ZXh0dXJlKHZhbHVlcywgdXYpLng7CiAgICByZXR1cm4gZ2V0X2NvbG9yX2Zyb21fY21hcCh2YWx1ZSwgY29sb3JtYXAsIGNvbG9ycmFuZ2UpOwp9Cgp2ZWM0IGdldF9jb2xvcihzYW1wbGVyMkQgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yLCB1dik7Cn0KCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICB2ZWM0IHJlYWxfY29sb3IgPSBnZXRfY29sb3IodW5pZm9ybV9jb2xvciwgZnJhZ191diwgZ2V0X2NvbG9ycmFuZ2UoKSwgY29sb3JtYXApOwogICAgdmVjMyBzaGFkZWRfY29sb3IgPSByZWFsX2NvbG9yLnJnYjsKCiAgICBpZihnZXRfc2hhZGluZygpKXsKICAgICAgICB2ZWMzIEwgPSBub3JtYWxpemUob19saWdodGRpcik7CiAgICAgICAgdmVjMyBOID0gbm9ybWFsaXplKG9fbm9ybWFsKTsKICAgICAgICB2ZWMzIGxpZ2h0MSA9IGJsaW5ucGhvbmcoTiwgb19jYW1kaXIsIEwsIHJlYWxfY29sb3IucmdiKTsKICAgICAgICB2ZWMzIGxpZ2h0MiA9IGJsaW5ucGhvbmcoTiwgb19jYW1kaXIsIC1MLCByZWFsX2NvbG9yLnJnYik7CiAgICAgICAgc2hhZGVkX2NvbG9yID0gZ2V0X2FtYmllbnQoKSAqIHJlYWxfY29sb3IucmdiICsgbGlnaHQxICsgZ2V0X2JhY2tsaWdodCgpICogbGlnaHQyOwogICAgfQoKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKHJlYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAocmVhbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gdmVjNChzaGFkZWRfY29sb3IsIHJlYWxfY29sb3IuYSk7Cn0Kj6x0cmFuc3BhcmVuY3nHFWi0MTY3ODY2NTk1NTE5NTY1MDgxMjSlc3BhY2XHFWi0MTc2Nzk3NzEyOTMzMjE0NjQ1MzGsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SBsaW5lc2VnbWVudHMtNDMwNzUyNjQ5MjY4ODg2Njk1M6ljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc42rY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAyMIAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+vbGluZXdpZHRoX3N0YXJ0ygAAAACpbGluZXdpZHRoygAAAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkStbGluZXdpZHRoX2VuZMoAAAAAqW9iamVjdF9pZACpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAAAAq2RlcHRoX3NoaWZ0yrcnxaytbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6Vjb2xvctgXAAAAAAAAAAAAAAAAAAAAAKd2aXNpYmxlxxRoszc4NjI5NTA3Mzc4NTI1OTMwMTKxYXR0cmlidXRlX3VwZGF0ZXLHFGizOTk4NTM5MTE4MTkxNDc0OTE3N6hvdmVyZHJhd8cVaLQxNTk5MjQwNTk1MTIxMDQyMTM1MK91bmlmb3JtX3VwZGF0ZXLHFGizNDE1Njc4NTUwMzgzNDg2NDYyN6VmYWNlc8cUaLM3ODgwNTAzNTMwMzY4Mjc2NzYwpHV1aWSzNDMwNzUyNjQ5MjY4ODg2Njk1M612ZXJ0ZXhfc291cmNl2gpvI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgc2VnbWVudF9zdGFydDsKdmVjMiBnZXRfc2VnbWVudF9zdGFydCgpe3JldHVybiBzZWdtZW50X3N0YXJ0O30KaW4gdmVjMiBzZWdtZW50X2VuZDsKdmVjMiBnZXRfc2VnbWVudF9lbmQoKXtyZXR1cm4gc2VnbWVudF9lbmQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdmVjMiBzY3JlZW5fc3BhY2UodmVjNCBwb3NpdGlvbikKewogICAgcmV0dXJuIHZlYzIocG9zaXRpb24ueHkgLyBwb3NpdGlvbi53KSAqIGdldF9yZXNvbHV0aW9uKCk7Cn0KdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm91dCB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHB2bSA9IHByb2plY3Rpb24gKiB2aWV3ICogZ2V0X21vZGVsKCk7CiAgICB2ZWM0IHBvaW50MV9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfc3RhcnQoKSksIDEpOwogICAgdmVjNCBwb2ludDJfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X2VuZCgpKSwgMSk7CiAgICB2ZWMyIHBvaW50MV9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQxX2NsaXApOwogICAgdmVjMiBwb2ludDJfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50Ml9jbGlwKTsKICAgIHZlYzIgZGlyID0gbm9ybWFsaXplKHBvaW50Ml9zY3JlZW4gLSBwb2ludDFfc2NyZWVuKTsKICAgIHZlYzIgbm9ybWFsID0gdmVjMigtZGlyLnksIGRpci54KTsKICAgIHZlYzQgYW5jaG9yOwogICAgZmxvYXQgdGhpY2tuZXNzOwoKICAgIGlmKHBvc2l0aW9uLnggPT0gMC4wKXsKICAgICAgICBhbmNob3IgPSBwb2ludDFfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9zdGFydCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX3N0YXJ0KCk7CiAgICB9ZWxzZXsKICAgICAgICBhbmNob3IgPSBwb2ludDJfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9lbmQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9lbmQoKTsKICAgIH0KICAgIGZyYWdfY29sb3IuYSA9IGZyYWdfY29sb3IuYSAqIG1pbigxLjAsIHRoaWNrbmVzcyAqIDIuMCk7CgogICAgbm9ybWFsICo9ICh0aGlja25lc3MgLyBnZXRfcmVzb2x1dGlvbigpKSAqIGFuY2hvci53OwogICAgLy8gcXVhZHBvcyB5IChwb3NpdGlvbi55KSBnaXZlcyB1cyB0aGUgZGlyZWN0aW9uIHRvIGV4cGFuZCB0aGUgbGluZQogICAgdmVjNCBvZmZzZXQgPSB2ZWM0KG5vcm1hbCAqIHBvc2l0aW9uLnksIDAuMCwgMC4wKTsKICAgIC8vIHN0YXJ0LCBvciBlbmQgb2YgcXVhZCwgbmVlZCB0byB1c2UgY3VycmVudCBvciBuZXh0IHBvaW50IGFzIGFuY2hvcgogICAgZ2xfUG9zaXRpb24gPSBhbmNob3IgKyBvZmZzZXQ7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKCn0KCq9mcmFnbWVudF9zb3VyY2XaBeIjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKaW4gdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZyYWdfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZnJhZ19jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZnJhZ19jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4Krc2VnbWVudF9lbmSCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAABERAAALEIAAEREAAASRAAADEIAABJEAAAMQgAALEKtc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAxCAAAsQgAAREQAACxCAABERAAAEkQAAAxCAAASRI+sdHJhbnNwYXJlbmN5xxVotDEzMTU5NDMzNzEyNDM3MTQwODcxpXNwYWNlxxVotDEwNjk2MjkxMDk2MTI1NzU2MjMwrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgL8AAAAAAACAPwAAgD8AAIC/AACAPwAAgD+kbmFtZdkgbGluZXNlZ21lbnRzLTU3MzAwNjI5ODc1OTE1OTA4MDOpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXONq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAACPwvU9pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACDBAACAP6dhbWJpZW50xwwXzcwMP83MDD/NzAw/r2xpbmV3aWR0aF9zdGFydMo/gAAAqWxpbmV3aWR0aMo/gAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZErWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQAqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAj8L1PatkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+lY29sb3LYFwAAAAAAAAAAAAAAAI/C9T2ndmlzaWJsZccVaLQxMjE4NDk1OTE4ODYxNTY4MTcwMrFhdHRyaWJ1dGVfdXBkYXRlcscVaLQxMTM2NTA5ODMyMDU3NTM3NzM5MahvdmVyZHJhd8cUaLM2OTMzODQyODUxOTQwOTMzOTEwr3VuaWZvcm1fdXBkYXRlcscTaLIyOTUyNDI5MjgwMzYwMjQ5NDWlZmFjZXPHFWi0MTQxOTA0MzExNjExNDUzNDkzMzSkdXVpZLM1NzMwMDYyOTg3NTkxNTkwODAzrXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHIBdFF4pCAAASRPABlEMAABJECL8CRAAAEkQXfTtEAAASRK1zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcgF0UXikIAACxC8AGUQwAALEIIvwJEAAAsQhd9O0QAACxCj6x0cmFuc3BhcmVuY3nHFWi0MTU2Nzg3MDQzODUxODAzNjc3NDOlc3BhY2XHFWi0MTIzMzI4Nzk0NDI5MDY3MTcwMjasdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SBsaW5lc2VnbWVudHMtNzEwMzQyNDE2NzQ0NjAyNzg4MKljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc42rY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAM3MTD2lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIMEAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+vbGluZXdpZHRoX3N0YXJ0yj+AAACpbGluZXdpZHRoyj+AAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkStbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZACpY29sb3JfZW5k2BcAAAAAAAAAAAAAAADNzEw9q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6Vjb2xvctgXAAAAAAAAAAAAAAAAzcxMPad2aXNpYmxlxxRoszY4NjEzMjM2MjE4OTkzMTczNDSxYXR0cmlidXRlX3VwZGF0ZXLHFWi0MTcwMzIwMTQ4OTMxMDQ5NDcwMTaob3ZlcmRyYXfHFGizNTc5ODEzODg3NDI2MjQ1MDAzOK91bmlmb3JtX3VwZGF0ZXLHFGizNTY2MjE2NTk3MzM1Mjc2MDU0MqVmYWNlc8cVaLQxNzA4ODQ4NTc1MDIwNDI3NjA2OKR1dWlkszcxMDM0MjQxNjc0NDYwMjc4ODCtdmVydGV4X3NvdXJjZdoKbyN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9zdGFydDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9zdGFydCgpe3JldHVybiBsaW5ld2lkdGhfc3RhcnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSB2ZWM0IGNvbG9yX3N0YXJ0Owp2ZWM0IGdldF9jb2xvcl9zdGFydCgpe3JldHVybiBjb2xvcl9zdGFydDt9CnVuaWZvcm0gdmVjNCBjb2xvcl9lbmQ7CnZlYzQgZ2V0X2NvbG9yX2VuZCgpe3JldHVybiBjb2xvcl9lbmQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9lbmQ7CmZsb2F0IGdldF9saW5ld2lkdGhfZW5kKCl7cmV0dXJuIGxpbmV3aWR0aF9lbmQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aDsKZmxvYXQgZ2V0X2xpbmV3aWR0aCgpe3JldHVybiBsaW5ld2lkdGg7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIHNlZ21lbnRfc3RhcnQ7CnZlYzIgZ2V0X3NlZ21lbnRfc3RhcnQoKXtyZXR1cm4gc2VnbWVudF9zdGFydDt9CmluIHZlYzIgc2VnbWVudF9lbmQ7CnZlYzIgZ2V0X3NlZ21lbnRfZW5kKCl7cmV0dXJuIHNlZ21lbnRfZW5kO30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnZlYzIgc2NyZWVuX3NwYWNlKHZlYzQgcG9zaXRpb24pCnsKICAgIHJldHVybiB2ZWMyKHBvc2l0aW9uLnh5IC8gcG9zaXRpb24udykgKiBnZXRfcmVzb2x1dGlvbigpOwp9CnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwdm0gPSBwcm9qZWN0aW9uICogdmlldyAqIGdldF9tb2RlbCgpOwogICAgdmVjNCBwb2ludDFfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X3N0YXJ0KCkpLCAxKTsKICAgIHZlYzQgcG9pbnQyX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9lbmQoKSksIDEpOwogICAgdmVjMiBwb2ludDFfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50MV9jbGlwKTsKICAgIHZlYzIgcG9pbnQyX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDJfY2xpcCk7CiAgICB2ZWMyIGRpciA9IG5vcm1hbGl6ZShwb2ludDJfc2NyZWVuIC0gcG9pbnQxX3NjcmVlbik7CiAgICB2ZWMyIG5vcm1hbCA9IHZlYzIoLWRpci55LCBkaXIueCk7CiAgICB2ZWM0IGFuY2hvcjsKICAgIGZsb2F0IHRoaWNrbmVzczsKCiAgICBpZihwb3NpdGlvbi54ID09IDAuMCl7CiAgICAgICAgYW5jaG9yID0gcG9pbnQxX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3Jfc3RhcnQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9zdGFydCgpOwogICAgfWVsc2V7CiAgICAgICAgYW5jaG9yID0gcG9pbnQyX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3JfZW5kKCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfZW5kKCk7CiAgICB9CiAgICBmcmFnX2NvbG9yLmEgPSBmcmFnX2NvbG9yLmEgKiBtaW4oMS4wLCB0aGlja25lc3MgKiAyLjApOwoKICAgIG5vcm1hbCAqPSAodGhpY2tuZXNzIC8gZ2V0X3Jlc29sdXRpb24oKSkgKiBhbmNob3IudzsKICAgIC8vIHF1YWRwb3MgeSAocG9zaXRpb24ueSkgZ2l2ZXMgdXMgdGhlIGRpcmVjdGlvbiB0byBleHBhbmQgdGhlIGxpbmUKICAgIHZlYzQgb2Zmc2V0ID0gdmVjNChub3JtYWwgKiBwb3NpdGlvbi55LCAwLjAsIDAuMCk7CiAgICAvLyBzdGFydCwgb3IgZW5kIG9mIHF1YWQsIG5lZWQgdG8gdXNlIGN1cnJlbnQgb3IgbmV4dCBwb2ludCBhcyBhbmNob3IKICAgIGdsX1Bvc2l0aW9uID0gYW5jaG9yICsgb2Zmc2V0OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cgp9CgqvZnJhZ21lbnRfc291cmNl2gXiI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9zdGFydDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9zdGFydCgpe3JldHVybiBsaW5ld2lkdGhfc3RhcnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSB2ZWM0IGNvbG9yX3N0YXJ0Owp2ZWM0IGdldF9jb2xvcl9zdGFydCgpe3JldHVybiBjb2xvcl9zdGFydDt9CnVuaWZvcm0gdmVjNCBjb2xvcl9lbmQ7CnZlYzQgZ2V0X2NvbG9yX2VuZCgpe3JldHVybiBjb2xvcl9lbmQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9lbmQ7CmZsb2F0IGdldF9saW5ld2lkdGhfZW5kKCl7cmV0dXJuIGxpbmV3aWR0aF9lbmQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aDsKZmxvYXQgZ2V0X2xpbmV3aWR0aCgpe3JldHVybiBsaW5ld2lkdGg7fQoKCmluIHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmcmFnX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGZyYWdfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZyYWdfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOCq3NlZ21lbnRfZW5kgqt0eXBlX2xlbmd0aAKkZmxhdMcYF8GHNkMAABJE/7/MQwAAEkQQHh9EAAASRK1zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcYF8GHNkMAACxC/7/MQwAALEIQHh9EAAAsQo+sdHJhbnNwYXJlbmN5xxVotDE1OTIyNjI5NzE3MDY1NDQ1Njg3pXNwYWNlxxRoszQ0OTE1ODU0ODY5MjU0NTI0MDKsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SFsaW5lc2VnbWVudHMtMTc3Mjg3MDc3NDgxOTAzMDIyMTepY2FtX3NwYWNlpGRhdGGodW5pZm9ybXONq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAACPwvU9pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACDBAACAP6dhbWJpZW50xwwXzcwMP83MDD/NzAw/r2xpbmV3aWR0aF9zdGFydMo/gAAAqWxpbmV3aWR0aMo/gAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZErWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQAqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAj8L1PatkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+lY29sb3LYFwAAAAAAAAAAAAAAAI/C9T2ndmlzaWJsZccUaLMyMDI5MjczOTQ2Nzg2MjI5MzIxsWF0dHJpYnV0ZV91cGRhdGVyxxRoszM2MjkxNDkyNjUxOTA4MTMzOTeob3ZlcmRyYXfHFGizNjg4NTQxMzM3NjIxMzU0NDc0Nq91bmlmb3JtX3VwZGF0ZXLHFWi0MTYwOTczMTc3MDg1NDgzNTE1MTClZmFjZXPHFGizNDY4ODAyMDkyMDc2NzY5MTA4M6R1dWlktDE3NzI4NzA3NzQ4MTkwMzAyMjE3rXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAEREiy6HQgAARETBh2dDAABERB+8xUMAAERELtoLRK1zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAADEKLLodCAAAMQsGHZ0MAAAxCH7zFQwAADEIu2gtEj6x0cmFuc3BhcmVuY3nHFWi0MTM4Nzc0MTMxODIyMTA4MjY0ODOlc3BhY2XHFWi0MTgzMDYxMzY4OTIyNzgzMzYzNDKsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SBsaW5lc2VnbWVudHMtODkyNDg3MTU5MTI5NjUyMjE5MqljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc42rY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAM3MTD2lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIMEAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+vbGluZXdpZHRoX3N0YXJ0yj+AAACpbGluZXdpZHRoyj+AAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkStbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZACpY29sb3JfZW5k2BcAAAAAAAAAAAAAAADNzEw9q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6Vjb2xvctgXAAAAAAAAAAAAAAAAzcxMPad2aXNpYmxlxxVotDExNjE1OTk0Mzg0NDg2MjMyMjg3sWF0dHJpYnV0ZV91cGRhdGVyxxRoszcxMDQ5MDIyMjc0MTY0OTk0MDeob3ZlcmRyYXfHFWi0MTIzODc2NjA3NTIyMTIxMDIyNDGvdW5pZm9ybV91cGRhdGVyxxVotDE3NDIzNjQ2MzgzNzUwMTA4OTIwpWZhY2VzxxRoszY2NDE4NTQxNDUwOTI0MDI0MDGkdXVpZLM4OTI0ODcxNTkxMjk2NTIyMTkyrXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHGBcAAEREg48VQwAARET/v5xDAABERD647kOtc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTHGBcAAAxCg48VQwAADEL/v5xDAAAMQj647kOPrHRyYW5zcGFyZW5jeccVaLQxMTIwNzE3MTYyMzY1ODUwNDEzNKVzcGFjZccUaLM2MzcyMjc4MDg1MzQxODUxNjQ2rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgL8AAAAAAACAPwAAgD8AAIC/AACAPwAAgD+kbmFtZdkhbGluZXNlZ21lbnRzLTEyNzAwNTMyNDkyODg1NTM1MjIxqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjatjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP69saW5ld2lkdGhfc3RhcnTKP4AAAKlsaW5ld2lkdGjKP4AAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRK1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAKljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/pWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/p3Zpc2libGXHFWi0MTMyMDA3MTA4MzQ5NTY0NzcwNDWxYXR0cmlidXRlX3VwZGF0ZXLHFGizNTQzNDk4ODAzMTA3NDQyNDI3M6hvdmVyZHJhd8cVaLQxNTI1NzU0NDMzNTA4MzQ1ODI2OK91bmlmb3JtX3VwZGF0ZXLHFWi0MTMxODUyNzQ4NzI3MTA2OTAyNjOlZmFjZXPHFGizMzY0OTYzNTA2MDkwNjQwNDk1OaR1dWlktDEyNzAwNTMyNDkyODg1NTM1MjIxrXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHIBdFF4pCAAASQvABlEMAABJCCL8CRAAAEkIXfTtEAAASQq1zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcgF0UXikIAACpC8AGUQwAAKkIIvwJEAAAqQhd9O0QAACpCj6x0cmFuc3BhcmVuY3nHFGizNzMyOTcyNTEwODIzMTIxODgzMaVzcGFjZccVaLQxNTE1MjkwNjI4OTQ2Nzk1NzU4Max2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIGxpbmVzZWdtZW50cy05ODkyMDY5NjAwMTU1MDk2NjQxqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjatjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP69saW5ld2lkdGhfc3RhcnTKP4AAAKlsaW5ld2lkdGjKP4AAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRK1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAKljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/pWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/p3Zpc2libGXHFGizODM5MTk2Njk5MDI4NTM1Nzg2ObFhdHRyaWJ1dGVfdXBkYXRlcscUaLM0NjMyNDM0OTIxNDIxMDkzNjUxqG92ZXJkcmF3xxVotDEwMDA2NTEzOTQyODUxODYyMTk3r3VuaWZvcm1fdXBkYXRlcscVaLQxNjI3MTI4NjY2MDMyODk5NzYyNKVmYWNlc8cUaLM4OTI5MzA3OTAyODUzNjY5MDM4pHV1aWSzOTg5MjA2OTYwMDE1NTA5NjY0Ma12ZXJ0ZXhfc291cmNl2gpvI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgc2VnbWVudF9zdGFydDsKdmVjMiBnZXRfc2VnbWVudF9zdGFydCgpe3JldHVybiBzZWdtZW50X3N0YXJ0O30KaW4gdmVjMiBzZWdtZW50X2VuZDsKdmVjMiBnZXRfc2VnbWVudF9lbmQoKXtyZXR1cm4gc2VnbWVudF9lbmQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdmVjMiBzY3JlZW5fc3BhY2UodmVjNCBwb3NpdGlvbikKewogICAgcmV0dXJuIHZlYzIocG9zaXRpb24ueHkgLyBwb3NpdGlvbi53KSAqIGdldF9yZXNvbHV0aW9uKCk7Cn0KdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm91dCB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHB2bSA9IHByb2plY3Rpb24gKiB2aWV3ICogZ2V0X21vZGVsKCk7CiAgICB2ZWM0IHBvaW50MV9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfc3RhcnQoKSksIDEpOwogICAgdmVjNCBwb2ludDJfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X2VuZCgpKSwgMSk7CiAgICB2ZWMyIHBvaW50MV9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQxX2NsaXApOwogICAgdmVjMiBwb2ludDJfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50Ml9jbGlwKTsKICAgIHZlYzIgZGlyID0gbm9ybWFsaXplKHBvaW50Ml9zY3JlZW4gLSBwb2ludDFfc2NyZWVuKTsKICAgIHZlYzIgbm9ybWFsID0gdmVjMigtZGlyLnksIGRpci54KTsKICAgIHZlYzQgYW5jaG9yOwogICAgZmxvYXQgdGhpY2tuZXNzOwoKICAgIGlmKHBvc2l0aW9uLnggPT0gMC4wKXsKICAgICAgICBhbmNob3IgPSBwb2ludDFfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9zdGFydCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX3N0YXJ0KCk7CiAgICB9ZWxzZXsKICAgICAgICBhbmNob3IgPSBwb2ludDJfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9lbmQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9lbmQoKTsKICAgIH0KICAgIGZyYWdfY29sb3IuYSA9IGZyYWdfY29sb3IuYSAqIG1pbigxLjAsIHRoaWNrbmVzcyAqIDIuMCk7CgogICAgbm9ybWFsICo9ICh0aGlja25lc3MgLyBnZXRfcmVzb2x1dGlvbigpKSAqIGFuY2hvci53OwogICAgLy8gcXVhZHBvcyB5IChwb3NpdGlvbi55KSBnaXZlcyB1cyB0aGUgZGlyZWN0aW9uIHRvIGV4cGFuZCB0aGUgbGluZQogICAgdmVjNCBvZmZzZXQgPSB2ZWM0KG5vcm1hbCAqIHBvc2l0aW9uLnksIDAuMCwgMC4wKTsKICAgIC8vIHN0YXJ0LCBvciBlbmQgb2YgcXVhZCwgbmVlZCB0byB1c2UgY3VycmVudCBvciBuZXh0IHBvaW50IGFzIGFuY2hvcgogICAgZ2xfUG9zaXRpb24gPSBhbmNob3IgKyBvZmZzZXQ7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKCn0KCq9mcmFnbWVudF9zb3VyY2XaBeIjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKaW4gdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZyYWdfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZnJhZ19jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZnJhZ19jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4Krc2VnbWVudF9lbmSCq3R5cGVfbGVuZ3RoAqRmbGF0xxgXwYc2QwAAGkL/v8xDAAAaQhAeH0QAABpCrXNlZ21lbnRfc3RhcnSCq3R5cGVfbGVuZ3RoAqRmbGF0xxgXwYc2QwAAKkL/v8xDAAAqQhAeH0QAACpC3gAQrHRyYW5zcGFyZW5jeccUaLM5MDUzNzg1NDk3NzM3NjU1NzkxpXNwYWNlxxRoszU2Njg0NjE0Njc4MDA5OTY4NzCsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAPwAAgD8AAIA/AAAAAAAAAAAAAIA/AAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAC/AAAAvwAAAD8AAAC/AAAAvwAAAD8AAAA/AAAAP6RuYW1luHRleHQtNDQ2MzgyMjM4NDY0MDY1OTk3MKljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc46lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/qWJpbGxib2FyZMKtcHJlcHJvamVjdGlvbsdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP61kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZbJhdGxhc190ZXh0dXJlX3NpemXKRIAAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRKVpbWFnZcKpb2JqZWN0X2lkAKpzaGFwZV90eXBlA7B0cmFuc2Zvcm1fbWFya2Vyw6tkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+ndmlzaWJsZccVaLQxMDE1NzU0OTM5NDkwNDQ5NDUwMKttYXJrZXJzcGFjZccUaLM5NzUyODc5NjQxOTY3OTg2MzQ2sWF0dHJpYnV0ZV91cGRhdGVyxxVotDE2MjYyNTQ3OTM3MzMwMzA1MzU5qG92ZXJkcmF3xxVotDEyMTgzMTEyNTM5NTA5ODY5NTU3r3VuaWZvcm1fdXBkYXRlcscUaLM5ODIwMzE5ODY2OTIwODIzNjE2pWZhY2VzxxVotDEzNzkxMTE3MDg0MjUzMjk0MjYzpHV1aWSzNDQ2MzgyMjM4NDY0MDY1OTk3MK12ZXJ0ZXhfc291cmNl2hpNI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKXsKICAgIHZlYzIgYmJveF9zaWduZWRfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsgLy8gbm90ZTsgY29tcG9uZW50cyBtYXkgYmUgbmVnYXRpdmUuCiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9zaWduZWRfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIC8vIENvbXB1dGUgdHJhbnNmb3JtIGZvciB0aGUgb2Zmc2V0IHZlY3RvcnMgZnJvbSB0aGUgY2VudHJhbCBwb2ludAogICAgbWF0NCB0cmFucyA9IGdldF90cmFuc2Zvcm1fbWFya2VyKCkgPyBtb2RlbCA6IG1hdDQoMS4wKTsKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKCiAgICAvLyBDb21wdXRlIGNlbnRyZSBvZiBiaWxsYm9hcmQgaW4gY2xpcHBpbmcgY29vcmRpbmF0ZXMKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDMobW9kZWwpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBnZXRfcmVzb2x1dGlvbigpKSAqIG1hdDIoZF9uZGNfZF9jbGlwKnRyYW5zKTsKICAgIC8vIE5vdywgb3VyIGJ1ZmZlciBzaXplIGlzIGV4cHJlc3NlZCBpbiB2aWV3cG9ydCBwaXhlbHMgYnV0IHdlIGdldCBiYWNrIHRvCiAgICAvLyB0aGUgc3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHVzaW5nIHRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlCiAgICAvLyB0cmFuc2Zvcm1hdGlvbiAoZm9yIGlzb3Ryb3BpYyB0cmFuc2Zvcm1hdGlvbnMpLiBGb3IgYW5pc290cm9waWMKICAgIC8vIHRyYW5zZm9ybWF0aW9ucywgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB0d28gcHJpbmNpcGxlIHNjYWxlIGZhY3RvcnMKICAgIC8vIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlOgogICAgZmxvYXQgdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgPSBzcXJ0KGFicyhfZGV0ZXJtaW5hbnQoZHh5dl9keHlzKSkpOwoKICAgIC8vIEluIHRoZSBmcmFnbWVudCBzaGFkZXIgd2Ugd2FudCBvdXIgc2lnbmVkIGRpc3RhbmNlIGluIHZpZXdwb3J0IChwaXhlbCkKICAgIC8vIGNvb3JkcyBmb3IgZGlyZWN0IHVzZSBpbiBhbnRpYWxpYXNpbmcgc3RlcCBmdW5jdGlvbnMuIFdlIHRoZXJlZm9yZSBuZWVkCiAgICAvLyBhIHNjYWxpbmcgZmFjdG9yIHNpbWlsYXIgdG8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUsIGJ1dCBpbmNsdWRpbmcKICAgIC8vIHRoZSB1di0+c3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHNjYWxpbmcgZmFjdG9yIGFzIHdlbGwuICBXZSBjaG9vc2UgdG8KICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94ICp4KiB3aWR0aCBmb3IgdGhpcy4gVGhpcyBjb21lcyB3aXRoIHNvbWUKICAgIC8vIGNvbnNpc3RlbmN5IGNvbmRpdGlvbnM6CiAgICAvLyAqIEZvciBwcm9jZWR1cmFsIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0aGUgc3ByaXRlIGJvdW5kaW5nIGJveCB0byBiZQogICAgLy8gICBzcXVhcmUuIChJZiBub3QsIHRoZSB1diBjb29yZGluYXRlcyB3aWxsIGJlIGFuaXNvdHJvcGljYWxseSBzY2FsZWQgYW5kCiAgICAvLyAgIGFueSBjYWxjdWxhdGlvbiBiYXNlZCBvbiB0aGVtIHdpbGwgbm90IGJlIGEgZGlzdGFuY2UgZnVuY3Rpb24uKQogICAgLy8gKiBGb3Igc2FtcGxlZCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdG8gY29uc2lzdGVudGx5IGNob29zZSB0aGUgKngqCiAgICAvLyAgIGZvciB0aGUgc2NhbGluZyBpbiBnZXRfZGlzdGFuY2VmaWVsZF9zY2FsZSgpLgogICAgZmxvYXQgc3ByaXRlX2Zyb21fdV9zY2FsZSA9IGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpOwogICAgZnJhZ191dnNjYWxlID0gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgKiBzcHJpdGVfZnJvbV91X3NjYWxlOwogICAgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlID0gZGlzdGFuY2VmaWVsZF9zY2FsZSgpOwogICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3IoKSk7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2X29mZnNldF93aWR0aCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIC8vIHNjcmVlbiBzcGFjZSBjb29yZGluYXRlcyBvZiB0aGUgcG9zaXRpb24KICAgIHZlYzQgcXVhZF92ZXJ0ZXggPSAodHJhbnMgKiB2ZWM0KDIuMCAqIGJib3hfc2lnbmVkX3JhZGl1cyAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaEogjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgppbiB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgZnJhZ191djsKCiNkZWZpbmUgQ0lSQ0xFICAgICAgICAgICAgMAojZGVmaW5lIFJFQ1RBTkdMRSAgICAgICAgIDEKI2RlZmluZSBST1VOREVEX1JFQ1RBTkdMRSAyCiNkZWZpbmUgRElTVEFOQ0VGSUVMRCAgICAgMwojZGVmaW5lIFRSSUFOR0xFICAgICAgICAgIDQKCiNkZWZpbmUgTV9TUVJUXzIgICAgICAgICAgMS40MTQyMTM1CgoKLy8gSGFsZiB3aWR0aCBvZiBhbnRpYWxpYXNpbmcgc21vb3Roc3RlcAojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44Ci8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzLiBDb252ZXJ0IHRvIHNhbWUgZGlzdGFuY2UKICAgIC8vIHNjYWxpbmcgYXMgZl91di54IGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBwcm9jZWR1cmFsIHNpZ25lZF9kaXN0YW5jZQogICAgLy8gY2FsY3VsYXRpb25zLgogICAgcmV0dXJuIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSAqIHRleHR1cmUoZGlzdGFuY2VmaWVsZCwgdXYpLnI7Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGJvb2wgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICByZXR1cm4gMC4wOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewoKICAgIGludCBzaGFwZSA9IGdldF9zaGFwZV90eXBlKCk7CiAgICBmbG9hdCBzaWduZWRfZGlzdGFuY2UgPSAwLjA7CiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CiAgICBpZihzaGFwZSA9PSBDSVJDTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gY2lyY2xlKGZyYWdfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBESVNUQU5DRUZJRUxEKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKDAuMCwgc2lnbmVkX2Rpc3RhbmNlKTsKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6ptYXJrZXJzaXplgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMcAF6Vjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHABevdXZfb2Zmc2V0X3dpZHRogqt0eXBlX2xlbmd0aASkZmxhdMcAF6Nwb3OCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTHABePrHRyYW5zcGFyZW5jeccUaLM1Mjk0NDQ1MTMwNTQ0Njk5MTIxpXNwYWNlxxRoszQwMzcyODYzNDk2MjY0NTUzODWsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SBsaW5lc2VnbWVudHMtMzg3ODMzNTM5MTc3MzE3NjYzMqljYW1fc3BhY2WlcGl4ZWyodW5pZm9ybXOHp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZEpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+pb2JqZWN0X2lkAKdhbWJpZW50xwwXzcwMP83MDD/NzAw/p3Zpc2libGXHFWi0MTQ2MDg0ODcwOTI0NTExNTc1MDGxYXR0cmlidXRlX3VwZGF0ZXLHFWi0MTUxMDY4MjM4MzI4ODA5MjYyNzOob3ZlcmRyYXfHFGizMjI5ODAwMjgwOTMwOTU1MDIxM691bmlmb3JtX3VwZGF0ZXLHFGizOTI4MTIxMzcwNTUxMjgzNzk5OaVmYWNlc8cVaLQxNjE5NjI1ODg5NDUwOTY4MzgzOKR1dWlkszM4NzgzMzUzOTE3NzMxNzY2MzKtdmVydGV4X3NvdXJjZdoJ5SN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KaW4gdmVjNCBjb2xvcl9lbmQ7CnZlYzQgZ2V0X2NvbG9yX2VuZCgpe3JldHVybiBjb2xvcl9lbmQ7fQppbiBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWM0IGNvbG9yX3N0YXJ0Owp2ZWM0IGdldF9jb2xvcl9zdGFydCgpe3JldHVybiBjb2xvcl9zdGFydDt9CmluIHZlYzIgc2VnbWVudF9lbmQ7CnZlYzIgZ2V0X3NlZ21lbnRfZW5kKCl7cmV0dXJuIHNlZ21lbnRfZW5kO30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnZlYzIgc2NyZWVuX3NwYWNlKHZlYzQgcG9zaXRpb24pCnsKICAgIHJldHVybiB2ZWMyKHBvc2l0aW9uLnh5IC8gcG9zaXRpb24udykgKiBnZXRfcmVzb2x1dGlvbigpOwp9CnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwdm0gPSBwcm9qZWN0aW9uICogdmlldyAqIGdldF9tb2RlbCgpOwogICAgdmVjNCBwb2ludDFfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X3N0YXJ0KCkpLCAxKTsKICAgIHZlYzQgcG9pbnQyX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9lbmQoKSksIDEpOwogICAgdmVjMiBwb2ludDFfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50MV9jbGlwKTsKICAgIHZlYzIgcG9pbnQyX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDJfY2xpcCk7CiAgICB2ZWMyIGRpciA9IG5vcm1hbGl6ZShwb2ludDJfc2NyZWVuIC0gcG9pbnQxX3NjcmVlbik7CiAgICB2ZWMyIG5vcm1hbCA9IHZlYzIoLWRpci55LCBkaXIueCk7CiAgICB2ZWM0IGFuY2hvcjsKICAgIGZsb2F0IHRoaWNrbmVzczsKCiAgICBpZihwb3NpdGlvbi54ID09IDAuMCl7CiAgICAgICAgYW5jaG9yID0gcG9pbnQxX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3Jfc3RhcnQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9zdGFydCgpOwogICAgfWVsc2V7CiAgICAgICAgYW5jaG9yID0gcG9pbnQyX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3JfZW5kKCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfZW5kKCk7CiAgICB9CiAgICBmcmFnX2NvbG9yLmEgPSBmcmFnX2NvbG9yLmEgKiBtaW4oMS4wLCB0aGlja25lc3MgKiAyLjApOwoKICAgIG5vcm1hbCAqPSAodGhpY2tuZXNzIC8gZ2V0X3Jlc29sdXRpb24oKSkgKiBhbmNob3IudzsKICAgIC8vIHF1YWRwb3MgeSAocG9zaXRpb24ueSkgZ2l2ZXMgdXMgdGhlIGRpcmVjdGlvbiB0byBleHBhbmQgdGhlIGxpbmUKICAgIHZlYzQgb2Zmc2V0ID0gdmVjNChub3JtYWwgKiBwb3NpdGlvbi55LCAwLjAsIDAuMCk7CiAgICAvLyBzdGFydCwgb3IgZW5kIG9mIHF1YWQsIG5lZWQgdG8gdXNlIGN1cnJlbnQgb3IgbmV4dCBwb2ludCBhcyBhbmNob3IKICAgIGdsX1Bvc2l0aW9uID0gYW5jaG9yICsgb2Zmc2V0OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cgp9CgqvZnJhZ21lbnRfc291cmNl2gREI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQoKCmluIHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmcmFnX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGZyYWdfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZyYWdfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOGqWNvbG9yX2VuZIKrdHlwZV9sZW5ndGgEpGZsYXTHABetbGluZXdpZHRoX2VuZIKrdHlwZV9sZW5ndGgBpGZsYXTHABerY29sb3Jfc3RhcnSCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXq3NlZ21lbnRfZW5kgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF69saW5ld2lkdGhfc3RhcnSCq3R5cGVfbGVuZ3RoAaRmbGF0xwAXj6x0cmFuc3BhcmVuY3nHFWi0MTM1OTc2OTk2NDIzMjY3MzQ1MjClc3BhY2XHFGizNTMxNjAzNzQ3MzA0NDQ1MzUwN6x2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIWxpbmVzZWdtZW50cy0xNjU1NTg5Mjg1ODI5MDc0MTMyMKljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc42rY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAoEEAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+vbGluZXdpZHRoX3N0YXJ0yj+AAACpbGluZXdpZHRoyj+AAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkStbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZACpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6Vjb2xvctgXAAAAAAAAAAAAAAAAAACAP6d2aXNpYmxlxxVotDEyNDg0MzQxOTg2NTA4NzMyOTY5sWF0dHJpYnV0ZV91cGRhdGVyxxVotDEzMzM5NzAxNDIwNDkyMzQ0NzE2qG92ZXJkcmF3xxRoszI2NTUwODE1MzA3MDkyMTY0MjKvdW5pZm9ybV91cGRhdGVyxxNosjIwMTgzNDkzNTU2NDI0NDUyN6VmYWNlc8cVaLQxNzQ4MzI5ODU1MTA0NjYxMDgwNaR1dWlktDE2NTU1ODkyODU4MjkwNzQxMzIwrXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTXFwAgREQAACxCrXNlZ21lbnRfc3RhcnSCq3R5cGVfbGVuZ3RoAqRmbGF01xcAAApCAAAsQt4AEKx0cmFuc3BhcmVuY3nHFWi0MTAwMjg0NTg1OTkzNzE5NTIxNzilc3BhY2XHFGizMTA3NjA4ODkzMTYxNzY0ODM1Mqx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/pG5hbWW5dGV4dC0xMDE5MjEzMDA0OTkxMDk1MjU0OKljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc46lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/qWJpbGxib2FyZMKtcHJlcHJvamVjdGlvbsdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP61kaXN0YW5jZWZpZWxkiqltaW5GaWx0ZXKsTGluZWFyRmlsdGVyqmFuaXNvdHJvcHnKQYAAAKltYWdGaWx0ZXKsTGluZWFyRmlsdGVypXdyYXBTrlJlcGVhdFdyYXBwaW5npGRhdGGtdGV4dHVyZV9hdGxhc6x0aHJlZV9mb3JtYXSpUmVkRm9ybWF0pHNpemWSzQQAzQQApXdyYXBUrlJlcGVhdFdyYXBwaW5npHR5cGWnU2FtcGxlcqp0aHJlZV90eXBlqUZsb2F0VHlwZbJhdGxhc190ZXh0dXJlX3NpemXKRIAAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRKVpbWFnZcKpb2JqZWN0X2lkAKpzaGFwZV90eXBlA7B0cmFuc2Zvcm1fbWFya2Vyw6tkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+ndmlzaWJsZccVaLQxODE5NjQ2MjQzMjcxNzkwNzUwOKttYXJrZXJzcGFjZccUaLM5MTE0ODUxMjkxMjQwNzk5NTIzsWF0dHJpYnV0ZV91cGRhdGVyxxRoszMyNzA2NTIzMTU1MjU3OTQyNziob3ZlcmRyYXfHFWi0MTE4NDAwNDkzMTIxNjI1ODI2NDGvdW5pZm9ybV91cGRhdGVyxxRoszI5MzYyMTAzODY3NzM0MDE0MTWlZmFjZXPHFGizNjgyMDg3MTU2Njc5MzA1MDk4OKR1dWlktDEwMTkyMTMwMDQ5OTEwOTUyNTQ4rXZlcnRleF9zb3VyY2XaGk0jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBtYXJrZXJzaXplOwp2ZWMyIGdldF9tYXJrZXJzaXplKCl7cmV0dXJuIG1hcmtlcnNpemU7fQppbiB2ZWM0IHJvdGF0aW9uczsKdmVjNCBnZXRfcm90YXRpb25zKCl7cmV0dXJuIHJvdGF0aW9uczt9CmluIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KaW4gdmVjMyBwb3M7CnZlYzMgZ2V0X3Bvcygpe3JldHVybiBwb3M7fQppbiB2ZWMyIHF1YWRfb2Zmc2V0Owp2ZWMyIGdldF9xdWFkX29mZnNldCgpe3JldHVybiBxdWFkX29mZnNldDt9CmluIHZlYzQgdXZfb2Zmc2V0X3dpZHRoOwp2ZWM0IGdldF91dl9vZmZzZXRfd2lkdGgoKXtyZXR1cm4gdXZfb2Zmc2V0X3dpZHRoO30KaW4gdmVjMyBtYXJrZXJfb2Zmc2V0Owp2ZWMzIGdldF9tYXJrZXJfb2Zmc2V0KCl7cmV0dXJuIG1hcmtlcl9vZmZzZXQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdW5pZm9ybSBmbG9hdCBhdGxhc190ZXhfZGltOwoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKb3V0IHZlYzIgZnJhZ191djsKb3V0IGZsb2F0IGZyYWdfdXZzY2FsZTsKb3V0IGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKb3V0IHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgoKbWF0NCBxbWF0KHZlYzQgcXVhdCl7CiAgICBmbG9hdCBudW0gPSBxdWF0LnggKiAyLjA7CiAgICBmbG9hdCBudW0yID0gcXVhdC55ICogMi4wOwogICAgZmxvYXQgbnVtMyA9IHF1YXQueiAqIDIuMDsKICAgIGZsb2F0IG51bTQgPSBxdWF0LnggKiBudW07CiAgICBmbG9hdCBudW01ID0gcXVhdC55ICogbnVtMjsKICAgIGZsb2F0IG51bTYgPSBxdWF0LnogKiBudW0zOwogICAgZmxvYXQgbnVtNyA9IHF1YXQueCAqIG51bTI7CiAgICBmbG9hdCBudW04ID0gcXVhdC54ICogbnVtMzsKICAgIGZsb2F0IG51bTkgPSBxdWF0LnkgKiBudW0zOwogICAgZmxvYXQgbnVtMTAgPSBxdWF0LncgKiBudW07CiAgICBmbG9hdCBudW0xMSA9IHF1YXQudyAqIG51bTI7CiAgICBmbG9hdCBudW0xMiA9IHF1YXQudyAqIG51bTM7CiAgICByZXR1cm4gbWF0NCgKICAgICAgICAoMS4wIC0gKG51bTUgKyBudW02KSksIChudW03ICsgbnVtMTIpLCAgICAgICAgKG51bTggLSBudW0xMSksICAgICAgICAwLjAsCiAgICAgICAgKG51bTcgLSBudW0xMiksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW02KSksIChudW05ICsgbnVtMTApLCAgICAgICAgMC4wLAogICAgICAgIChudW04ICsgbnVtMTEpLCAgICAgICAgKG51bTkgLSBudW0xMCksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW01KSksIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAxLjAKICAgICk7Cn0KCmZsb2F0IGRpc3RhbmNlZmllbGRfc2NhbGUoKXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHM7IGNvbnZlcnQgdG8gZGltZW5zaW9ubGVzcwogICAgLy8geC1jb29yZGluYXRlIG9mIHRleHR1cmUgaW5zdGVhZCBmb3IgY29uc2lzdGVuY3kgd2l0aCBwcm9ncmFtbWF0aWMgdXYKICAgIC8vIGRpc3RhbmNlIGZpZWxkcyBpbiBmcmFnbWVudCBzaGFkZXIuIFNlZSBhbHNvIGNvbW1lbnRzIGJlbG93LgogICAgdmVjNCB1dl9yZWN0ID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgZmxvYXQgcGl4c2l6ZV94ID0gKHV2X3JlY3QueiAtIHV2X3JlY3QueCkgKiBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCk7CiAgICByZXR1cm4gLTEuMC9waXhzaXplX3g7Cn0KCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgptYXQyIGRpYWdtKHZlYzIgdil7CiAgICByZXR1cm4gbWF0Mih2LngsIDAuMCwgMC4wLCB2LnkpOwp9CgpmbG9hdCBfZGV0ZXJtaW5hbnQobWF0MiBtKSB7CiAgcmV0dXJuIG1bMF1bMF0gKiBtWzFdWzFdIC0gbVswXVsxXSAqIG1bMV1bMF07Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgdmVjMiBiYm94X3NpZ25lZF9yYWRpdXMgPSAwLjUgKiBnZXRfbWFya2Vyc2l6ZSgpOyAvLyBub3RlOyBjb21wb25lbnRzIG1heSBiZSBuZWdhdGl2ZS4KICAgIHZlYzIgc3ByaXRlX2Jib3hfY2VudHJlID0gZ2V0X3F1YWRfb2Zmc2V0KCkgKyBiYm94X3NpZ25lZF9yYWRpdXM7CgogICAgbWF0NCBwdmlldyA9IHByb2plY3Rpb24gKiB2aWV3OwogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwogICAgdHJhbnMgPSAoZ2V0X2JpbGxib2FyZCgpID8gcHJvamVjdGlvbiA6IHB2aWV3KSAqIHFtYXQoZ2V0X3JvdGF0aW9ucygpKSAqIHRyYW5zOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgdmVjNCBzcHJpdGVfY2VudGVyID0gdHJhbnMgKiB2ZWM0KHNwcml0ZV9iYm94X2NlbnRyZSwgMCwgMCk7CiAgICB2ZWM0IGRhdGFfcG9pbnQgPSBnZXRfcHJlcHJvamVjdGlvbigpICogbW9kZWwgKiB2ZWM0KHRvdmVjMyhnZXRfcG9zKCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSB2ZWM0KGRhdGFfcG9pbnQueHl6IC8gZGF0YV9wb2ludC53ICsgbWF0Myhtb2RlbCkgKiB0b3ZlYzMoZ2V0X21hcmtlcl9vZmZzZXQoKSksIDEpOwogICAgZGF0YV9wb2ludCA9IHB2aWV3ICogZGF0YV9wb2ludDsKICAgIHZlYzQgdmNsaXAgPSBkYXRhX3BvaW50ICsgc3ByaXRlX2NlbnRlcjsKCiAgICAvLyBFeHRyYSBidWZmZXJpbmcgaXMgcmVxdWlyZWQgYXJvdW5kIHNwcml0ZXMgd2hpY2ggYXJlIGFudGlhbGlhc2VkIHNvIHRoYXQKICAgIC8vIHRoZSBhbnRpYWxpYXMgYmx1ciBkb2Vzbid0IGdldCBjdXQgb2ZmIChzZWUgIzE1KS4gVGhpcyBibHVyIGZhbGxzIHRvCiAgICAvLyB6ZXJvIGF0IGEgcmFkaXVzIG9mIEFOVElBTElBU19SQURJVVMgcGl4ZWxzIGluIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlcwogICAgLy8gYW5kIHdlIHdhbnQgdG8gYnVmZmVyIHRoZSB2ZXJ0aWNlcyBpbiB0aGUgKnNvdXJjZSogc3ByaXRlIGNvb3JkaW5hdGUKICAgIC8vIHN5c3RlbSBzbyB0aGF0IHdlIGdldCB0aGlzIGFtb3VudCBpbiB0aGUgb3V0cHV0IGNvb3JkaW5hdGVzLgogICAgLy8KICAgIC8vIEhlcmUgd2UgY2FsY3VsYXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBtYXBwaW5nIGZyb20gc3ByaXRlIHh5CiAgICAvLyBjb29yZGluYXRlcyAoZGVmaW5lZCBieSBgdHJhbnNgKSBpbnRvIHRoZSB2aWV3cG9ydCBwaXhlbCBjb29yZGluYXRlcy4KICAgIC8vIFRoZSBkZXJpdmF0aXZlIG5lZWRzIHRvIGluY2x1ZGUgdGhlIHByb3BlciB0ZXJtIGZvciB0aGUgcGVyc3BlY3RpdmUKICAgIC8vIGRpdmlkZSBpbnRvIE5EQywgZXZhbHVhdGVkIGF0IHRoZSBjZW50cmUgcG9pbnQgYHZjbGlwYC4KICAgIG1hdDQgZF9uZGNfZF9jbGlwID0gbWF0NCgKICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwKICAgICAgICAtdmNsaXAueHl6Lyh2Y2xpcC53KnZjbGlwLncpLCAgICAgICAgICAwLjAKICAgICk7CiAgICBtYXQyIGR4eXZfZHh5cyA9IGRpYWdtKDAuNSAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gYWJzKGdldF9tYXJrZXJzaXplKCkueCk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CiAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcigpKTsKICAgIGZyYWdfdXYgPSBnZXRfdXYoKTsKICAgIGZyYWdfdXZfb2Zmc2V0X3dpZHRoID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogYmJveF9zaWduZWRfcmFkaXVzICogZ2V0X3Bvc2l0aW9uKCksIDAuMCwgMC4wKSk7CiAgICBnbF9Qb3NpdGlvbiA9IHZjbGlwICsgcXVhZF92ZXJ0ZXg7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKfQoKr2ZyYWdtZW50X3NvdXJjZdoSiCN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCmluIHZlYzQgZnJhZ19jb2xvcjsKaW4gdmVjMiBmcmFnX3V2OwoKI2RlZmluZSBDSVJDTEUgICAgICAgICAgICAwCiNkZWZpbmUgUkVDVEFOR0xFICAgICAgICAgMQojZGVmaW5lIFJPVU5ERURfUkVDVEFOR0xFIDIKI2RlZmluZSBESVNUQU5DRUZJRUxEICAgICAzCiNkZWZpbmUgVFJJQU5HTEUgICAgICAgICAgNAoKI2RlZmluZSBNX1NRUlRfMiAgICAgICAgICAxLjQxNDIxMzUKCgovLyBIYWxmIHdpZHRoIG9mIGFudGlhbGlhc2luZyBzbW9vdGhzdGVwCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9CgppbiBmbG9hdCBmcmFnX3V2c2NhbGU7CmluIGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKaW4gdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHMuIENvbnZlcnQgdG8gc2FtZSBkaXN0YW5jZQogICAgLy8gc2NhbGluZyBhcyBmX3V2LnggZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlIHByb2NlZHVyYWwgc2lnbmVkX2Rpc3RhbmNlCiAgICAvLyBjYWxjdWxhdGlvbnMuCiAgICByZXR1cm4gZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlICogdGV4dHVyZShkaXN0YW5jZWZpZWxkLCB1dikucjsKfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoYm9vbCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIHJldHVybiAwLjA7Cn0KCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CgogICAgaW50IHNoYXBlID0gZ2V0X3NoYXBlX3R5cGUoKTsKICAgIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSA9IDAuMDsKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKICAgIGlmKHNoYXBlID09IENJUkNMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBjaXJjbGUoZnJhZ191dik7CiAgICBlbHNlIGlmKHNoYXBlID09IERJU1RBTkNFRklFTEQpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gc2NhbGVkX2Rpc3RhbmNlZmllbGQoZGlzdGFuY2VmaWVsZCwgdGV4X3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUk9VTkRFRF9SRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gcm91bmRlZF9yZWN0YW5nbGUoZnJhZ191diwgdmVjMigwLjIpLCB2ZWMyKDAuOCkpOwogICAgZWxzZSBpZihzaGFwZSA9PSBSRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gMS4wOyAvLyByZWN0YW5nbGUoZl91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFRSSUFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHRyaWFuZ2xlKGZyYWdfdXYpOwoKICAgIHNpZ25lZF9kaXN0YW5jZSAqPSBmcmFnX3V2c2NhbGU7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoMC4wLCBzaWduZWRfZGlzdGFuY2UpOwogICAgdmVjNCBmaW5hbF9jb2xvciA9IHZlYzQoZnJhZ19jb2xvci54eXosIDApOwogICAgZmlsbChpbWFnZSwgZnJhZ19jb2xvciwgZnJhZ191diwgaW5zaWRlLCBmaW5hbF9jb2xvcik7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmaW5hbF9jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4ercXVhZF9vZmZzZXSCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXqMaLwAAAwMCNl67AAADAwLKdr8AUrsfA/KmxwAAAwMCqbWFya2Vyc2l6ZYKrdHlwZV9sZW5ndGgCpGZsYXTHIBdSuH5Bg8C6QVYOnUGDwLpBCKycQQisvEHb+Z5Bg8C6Qa1tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMcwFwRWjsCYbnLBAAAAAARWjsCYbnLBAAAAAARWjsCYbnLBAAAAAARWjsCYbnLBAAAAAKVjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHQBcAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/r3V2X29mZnNldF93aWR0aIKrdHlwZV9sZW5ndGgEpGZsYXTHQBcAgDA+ACAPPwCATz4AoBo/AMCUPgDA7z4AQKg+AGADPwDAlD4AoAM/AECoPgBgDz8AwJQ+AKAPPwBAqD4AIBs/o3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTHMBdFF4pCAAAIQgAAAADwAZRDAAAIQgAAAAAIvwJEAAAIQgAAAAAXfTtEAAAIQgAAAACpcm90YXRpb25zgqt0eXBlX2xlbmd0aASkZmxhdMdAFwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD+PrHRyYW5zcGFyZW5jeccUaLM0MjAxMDkyNDIwOTM2NTU2NTk1pXNwYWNlxxVotDEyMzMzNzE1MTQwNDY0MzU4OTA2rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgL8AAAAAAACAPwAAgD8AAIC/AACAPwAAgD+kbmFtZdkhbGluZXNlZ21lbnRzLTEyNjczOTEyOTE5NDUxNjcxMzU0qWNhbV9zcGFjZaVwaXhlbKh1bmlmb3Jtc4encGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkSlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6lvYmplY3RfaWQAp2FtYmllbnTHDBfNzAw/zcwMP83MDD+ndmlzaWJsZccUaLM3MDA2NTA1NDc4MDU2MzE4MTgysWF0dHJpYnV0ZV91cGRhdGVyxxRoszgzNzIyNDkzNDA3ODE1MDgwMzWob3ZlcmRyYXfHFGizNzI1MDEwNDIxODQ4MTI1NTEwNa91bmlmb3JtX3VwZGF0ZXLHFWi0MTMyMjA4NTg4NDIxMzE5NTI3MzKlZmFjZXPHFGizMjUwNTk2MjY5NDgyNTU1ODc2NaR1dWlktDEyNjczOTEyOTE5NDUxNjcxMzU0rXZlcnRleF9zb3VyY2XaCeUjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CmluIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KaW4gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CmluIHZlYzIgc2VnbWVudF9zdGFydDsKdmVjMiBnZXRfc2VnbWVudF9zdGFydCgpe3JldHVybiBzZWdtZW50X3N0YXJ0O30KaW4gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoERCN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzhqljb2xvcl9lbmSCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXrWxpbmV3aWR0aF9lbmSCq3R5cGVfbGVuZ3RoAaRmbGF0xwAXq2NvbG9yX3N0YXJ0gqt0eXBlX2xlbmd0aASkZmxhdMcAF6tzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHABetc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTHABevbGluZXdpZHRoX3N0YXJ0gqt0eXBlX2xlbmd0aAGkZmxhdMcAF4+sdHJhbnNwYXJlbmN5xxVotDE1OTQzMjM3MjA0MjMyOTIyNjkypXNwYWNlxxVotDEwNzc4OTk3NTg0ODY2NDUzODI4rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgL8AAAAAAACAPwAAgD8AAIC/AACAPwAAgD+kbmFtZdkgbGluZXNlZ21lbnRzLTU1ODA2NzMwNDE5NTM3NzUwODOpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXONq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAACBBAACAP6dhbWJpZW50xwwXzcwMP83MDD/NzAw/r2xpbmV3aWR0aF9zdGFydMo/gAAAqWxpbmV3aWR0aMo/gAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZErWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQAqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+lY29sb3LYFwAAAAAAAAAAAAAAAAAAgD+ndmlzaWJsZccUaLMxMTUzNTA3ODQxMDI0OTcwMTYxsWF0dHJpYnV0ZV91cGRhdGVyxxVotDEyMDcyNTk1MTE1MjA2MTMxODcxqG92ZXJkcmF3xxVotDE0MDg5MjU0NTg0MzkwNDUxMTQ3r3VuaWZvcm1fdXBkYXRlcscUaLM0OTQ1MTY3NzIxMDcwNzc5MDczpWZhY2VzxxRoszYxMjIyNTA2MDM0MDQwOTk1OTWkdXVpZLM1NTgwNjczMDQxOTUzNzc1MDgzrXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAORBiy6HQgAA5EHBh2dDAADkQR+8xUMAAORBLtoLRK1zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAACkKLLodCAAAKQsGHZ0MAAApCH7zFQwAACkIu2gtEj6x0cmFuc3BhcmVuY3nHFGizOTI3NTQyNDI0ODYwMzAxOTM3M6VzcGFjZccVaLQxNjcxOTM5MzcwMDQyMzM3MjczM6x2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIWxpbmVzZWdtZW50cy0xNTM4MzgxODE5MTI4NTczODQ3NKljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc42rY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIEEAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+vbGluZXdpZHRoX3N0YXJ0yj+AAACpbGluZXdpZHRoyj+AAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkStbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZACpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6Vjb2xvctgXAAAAAAAAAAAAAAAAAACAP6d2aXNpYmxlxxNosjU5OTM1MzU2NTkwMzUzMjExNrFhdHRyaWJ1dGVfdXBkYXRlcscVaLQxNzEzMjgxODc5OTkzNzc5Mzk2NahvdmVyZHJhd8cUaLMzMDE3OTIwNjkyMzA4NDYzOTYxr3VuaWZvcm1fdXBkYXRlcscUaLMzMDE2OTk5MTU1NDM5NjUwNTY1pWZhY2VzxxRoszY1ODc4NjYxODkyNjE2MjA1OTakdXVpZLQxNTM4MzgxODE5MTI4NTczODQ3NK12ZXJ0ZXhfc291cmNl2gpvI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgc2VnbWVudF9zdGFydDsKdmVjMiBnZXRfc2VnbWVudF9zdGFydCgpe3JldHVybiBzZWdtZW50X3N0YXJ0O30KaW4gdmVjMiBzZWdtZW50X2VuZDsKdmVjMiBnZXRfc2VnbWVudF9lbmQoKXtyZXR1cm4gc2VnbWVudF9lbmQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdmVjMiBzY3JlZW5fc3BhY2UodmVjNCBwb3NpdGlvbikKewogICAgcmV0dXJuIHZlYzIocG9zaXRpb24ueHkgLyBwb3NpdGlvbi53KSAqIGdldF9yZXNvbHV0aW9uKCk7Cn0KdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm91dCB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHB2bSA9IHByb2plY3Rpb24gKiB2aWV3ICogZ2V0X21vZGVsKCk7CiAgICB2ZWM0IHBvaW50MV9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfc3RhcnQoKSksIDEpOwogICAgdmVjNCBwb2ludDJfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X2VuZCgpKSwgMSk7CiAgICB2ZWMyIHBvaW50MV9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQxX2NsaXApOwogICAgdmVjMiBwb2ludDJfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50Ml9jbGlwKTsKICAgIHZlYzIgZGlyID0gbm9ybWFsaXplKHBvaW50Ml9zY3JlZW4gLSBwb2ludDFfc2NyZWVuKTsKICAgIHZlYzIgbm9ybWFsID0gdmVjMigtZGlyLnksIGRpci54KTsKICAgIHZlYzQgYW5jaG9yOwogICAgZmxvYXQgdGhpY2tuZXNzOwoKICAgIGlmKHBvc2l0aW9uLnggPT0gMC4wKXsKICAgICAgICBhbmNob3IgPSBwb2ludDFfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9zdGFydCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX3N0YXJ0KCk7CiAgICB9ZWxzZXsKICAgICAgICBhbmNob3IgPSBwb2ludDJfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9lbmQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9lbmQoKTsKICAgIH0KICAgIGZyYWdfY29sb3IuYSA9IGZyYWdfY29sb3IuYSAqIG1pbigxLjAsIHRoaWNrbmVzcyAqIDIuMCk7CgogICAgbm9ybWFsICo9ICh0aGlja25lc3MgLyBnZXRfcmVzb2x1dGlvbigpKSAqIGFuY2hvci53OwogICAgLy8gcXVhZHBvcyB5IChwb3NpdGlvbi55KSBnaXZlcyB1cyB0aGUgZGlyZWN0aW9uIHRvIGV4cGFuZCB0aGUgbGluZQogICAgdmVjNCBvZmZzZXQgPSB2ZWM0KG5vcm1hbCAqIHBvc2l0aW9uLnksIDAuMCwgMC4wKTsKICAgIC8vIHN0YXJ0LCBvciBlbmQgb2YgcXVhZCwgbmVlZCB0byB1c2UgY3VycmVudCBvciBuZXh0IHBvaW50IGFzIGFuY2hvcgogICAgZ2xfUG9zaXRpb24gPSBhbmNob3IgKyBvZmZzZXQ7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKCn0KCq9mcmFnbWVudF9zb3VyY2XaBeIjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKaW4gdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZyYWdfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZnJhZ19jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZnJhZ19jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4Krc2VnbWVudF9lbmSCq3R5cGVfbGVuZ3RoAqRmbGF0xxgXAAD0QYOPFUMAAPRB/7+cQwAA9EE+uO5DrXNlZ21lbnRfc3RhcnSCq3R5cGVfbGVuZ3RoAqRmbGF0xxgXAAAKQoOPFUMAAApC/7+cQwAACkI+uO5D3gAQrHRyYW5zcGFyZW5jeccUaLM2MjUxMzM2MzM1MjY3MTg4MTc5pXNwYWNlxxVotDE4MDY4OTIyMTM1NDA2NTExNjMzrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbl0ZXh0LTEwNzY4MjIwOTkxMDUyNjEyNTk3qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+pYmlsbGJvYXJkwq1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXzcwMP83MDD/NzAw/rWRpc3RhbmNlZmllbGSKqW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKqYW5pc290cm9wecpBgAAAqW1hZ0ZpbHRlcqxMaW5lYXJGaWx0ZXKld3JhcFOuUmVwZWF0V3JhcHBpbmekZGF0Ya10ZXh0dXJlX2F0bGFzrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZZLNBADNBACld3JhcFSuUmVwZWF0V3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZEpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLDq2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6d2aXNpYmxlxxRoszE5NTI2NzExMTk4MjExMjMwNDKrbWFya2Vyc3BhY2XHFGizODcwOTA3NTM4MjM1Mzk5OTIxMbFhdHRyaWJ1dGVfdXBkYXRlcscUaLM4NzA4NzM2MDA4OTc1MTAzMzk0qG92ZXJkcmF3xxVotDEzODMzNTU2MTc4MDU3NzQxNTEwr3VuaWZvcm1fdXBkYXRlcscVaLQxMTg5NzAxMDQwNTMxODAwMjE2NaVmYWNlc8cUaLM1MzMzMzY0ODU0OTM0NTg5NjE4pHV1aWS0MTA3NjgyMjA5OTEwNTI2MTI1OTetdmVydGV4X3NvdXJjZdoaTSN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleHR1cmVfc2l6ZTsKZmxvYXQgZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpe3JldHVybiBhdGxhc190ZXh0dXJlX3NpemU7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIG1hcmtlcnNpemU7CnZlYzIgZ2V0X21hcmtlcnNpemUoKXtyZXR1cm4gbWFya2Vyc2l6ZTt9CmluIHZlYzQgcm90YXRpb25zOwp2ZWM0IGdldF9yb3RhdGlvbnMoKXtyZXR1cm4gcm90YXRpb25zO30KaW4gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQppbiB2ZWMzIHBvczsKdmVjMyBnZXRfcG9zKCl7cmV0dXJuIHBvczt9CmluIHZlYzIgcXVhZF9vZmZzZXQ7CnZlYzIgZ2V0X3F1YWRfb2Zmc2V0KCl7cmV0dXJuIHF1YWRfb2Zmc2V0O30KaW4gdmVjNCB1dl9vZmZzZXRfd2lkdGg7CnZlYzQgZ2V0X3V2X29mZnNldF93aWR0aCgpe3JldHVybiB1dl9vZmZzZXRfd2lkdGg7fQppbiB2ZWMzIG1hcmtlcl9vZmZzZXQ7CnZlYzMgZ2V0X21hcmtlcl9vZmZzZXQoKXtyZXR1cm4gbWFya2VyX29mZnNldDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleF9kaW07CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwpvdXQgdmVjMiBmcmFnX3V2OwpvdXQgZmxvYXQgZnJhZ191dnNjYWxlOwpvdXQgZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwpvdXQgdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCgptYXQ0IHFtYXQodmVjNCBxdWF0KXsKICAgIGZsb2F0IG51bSA9IHF1YXQueCAqIDIuMDsKICAgIGZsb2F0IG51bTIgPSBxdWF0LnkgKiAyLjA7CiAgICBmbG9hdCBudW0zID0gcXVhdC56ICogMi4wOwogICAgZmxvYXQgbnVtNCA9IHF1YXQueCAqIG51bTsKICAgIGZsb2F0IG51bTUgPSBxdWF0LnkgKiBudW0yOwogICAgZmxvYXQgbnVtNiA9IHF1YXQueiAqIG51bTM7CiAgICBmbG9hdCBudW03ID0gcXVhdC54ICogbnVtMjsKICAgIGZsb2F0IG51bTggPSBxdWF0LnggKiBudW0zOwogICAgZmxvYXQgbnVtOSA9IHF1YXQueSAqIG51bTM7CiAgICBmbG9hdCBudW0xMCA9IHF1YXQudyAqIG51bTsKICAgIGZsb2F0IG51bTExID0gcXVhdC53ICogbnVtMjsKICAgIGZsb2F0IG51bTEyID0gcXVhdC53ICogbnVtMzsKICAgIHJldHVybiBtYXQ0KAogICAgICAgICgxLjAgLSAobnVtNSArIG51bTYpKSwgKG51bTcgKyBudW0xMiksICAgICAgICAobnVtOCAtIG51bTExKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtNyAtIG51bTEyKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTYpKSwgKG51bTkgKyBudW0xMCksICAgICAgICAwLjAsCiAgICAgICAgKG51bTggKyBudW0xMSksICAgICAgICAobnVtOSAtIG51bTEwKSwgICAgICAgICgxLjAgLSAobnVtNCArIG51bTUpKSwgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDEuMAogICAgKTsKfQoKZmxvYXQgZGlzdGFuY2VmaWVsZF9zY2FsZSgpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVsczsgY29udmVydCB0byBkaW1lbnNpb25sZXNzCiAgICAvLyB4LWNvb3JkaW5hdGUgb2YgdGV4dHVyZSBpbnN0ZWFkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHByb2dyYW1tYXRpYyB1dgogICAgLy8gZGlzdGFuY2UgZmllbGRzIGluIGZyYWdtZW50IHNoYWRlci4gU2VlIGFsc28gY29tbWVudHMgYmVsb3cuCiAgICB2ZWM0IHV2X3JlY3QgPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICBmbG9hdCBwaXhzaXplX3ggPSAodXZfcmVjdC56IC0gdXZfcmVjdC54KSAqIGdldF9hdGxhc190ZXh0dXJlX3NpemUoKTsKICAgIHJldHVybiAtMS4wL3BpeHNpemVfeDsKfQoKdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm1hdDIgZGlhZ20odmVjMiB2KXsKICAgIHJldHVybiBtYXQyKHYueCwgMC4wLCAwLjAsIHYueSk7Cn0KCmZsb2F0IF9kZXRlcm1pbmFudChtYXQyIG0pIHsKICByZXR1cm4gbVswXVswXSAqIG1bMV1bMV0gLSBtWzBdWzFdICogbVsxXVswXTsKfQoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCl7CiAgICB2ZWMyIGJib3hfc2lnbmVkX3JhZGl1cyA9IDAuNSAqIGdldF9tYXJrZXJzaXplKCk7IC8vIG5vdGU7IGNvbXBvbmVudHMgbWF5IGJlIG5lZ2F0aXZlLgogICAgdmVjMiBzcHJpdGVfYmJveF9jZW50cmUgPSBnZXRfcXVhZF9vZmZzZXQoKSArIGJib3hfc2lnbmVkX3JhZGl1czsKCiAgICBtYXQ0IHB2aWV3ID0gcHJvamVjdGlvbiAqIHZpZXc7CiAgICAvLyBDb21wdXRlIHRyYW5zZm9ybSBmb3IgdGhlIG9mZnNldCB2ZWN0b3JzIGZyb20gdGhlIGNlbnRyYWwgcG9pbnQKICAgIG1hdDQgdHJhbnMgPSBnZXRfdHJhbnNmb3JtX21hcmtlcigpID8gbW9kZWwgOiBtYXQ0KDEuMCk7CiAgICB0cmFucyA9IChnZXRfYmlsbGJvYXJkKCkgPyBwcm9qZWN0aW9uIDogcHZpZXcpICogcW1hdChnZXRfcm90YXRpb25zKCkpICogdHJhbnM7CgogICAgLy8gQ29tcHV0ZSBjZW50cmUgb2YgYmlsbGJvYXJkIGluIGNsaXBwaW5nIGNvb3JkaW5hdGVzCiAgICB2ZWM0IHNwcml0ZV9jZW50ZXIgPSB0cmFucyAqIHZlYzQoc3ByaXRlX2Jib3hfY2VudHJlLCAwLCAwKTsKICAgIHZlYzQgZGF0YV9wb2ludCA9IGdldF9wcmVwcm9qZWN0aW9uKCkgKiBtb2RlbCAqIHZlYzQodG92ZWMzKGdldF9wb3MoKSksIDEpOwogICAgZGF0YV9wb2ludCA9IHZlYzQoZGF0YV9wb2ludC54eXogLyBkYXRhX3BvaW50LncgKyBtYXQzKG1vZGVsKSAqIHRvdmVjMyhnZXRfbWFya2VyX29mZnNldCgpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gcHZpZXcgKiBkYXRhX3BvaW50OwogICAgdmVjNCB2Y2xpcCA9IGRhdGFfcG9pbnQgKyBzcHJpdGVfY2VudGVyOwoKICAgIC8vIEV4dHJhIGJ1ZmZlcmluZyBpcyByZXF1aXJlZCBhcm91bmQgc3ByaXRlcyB3aGljaCBhcmUgYW50aWFsaWFzZWQgc28gdGhhdAogICAgLy8gdGhlIGFudGlhbGlhcyBibHVyIGRvZXNuJ3QgZ2V0IGN1dCBvZmYgKHNlZSAjMTUpLiBUaGlzIGJsdXIgZmFsbHMgdG8KICAgIC8vIHplcm8gYXQgYSByYWRpdXMgb2YgQU5USUFMSUFTX1JBRElVUyBwaXhlbHMgaW4gdGhlIHZpZXdwb3J0IGNvb3JkaW5hdGVzCiAgICAvLyBhbmQgd2Ugd2FudCB0byBidWZmZXIgdGhlIHZlcnRpY2VzIGluIHRoZSAqc291cmNlKiBzcHJpdGUgY29vcmRpbmF0ZQogICAgLy8gc3lzdGVtIHNvIHRoYXQgd2UgZ2V0IHRoaXMgYW1vdW50IGluIHRoZSBvdXRwdXQgY29vcmRpbmF0ZXMuCiAgICAvLwogICAgLy8gSGVyZSB3ZSBjYWxjdWxhdGUgdGhlIGRlcml2YXRpdmUgb2YgdGhlIG1hcHBpbmcgZnJvbSBzcHJpdGUgeHkKICAgIC8vIGNvb3JkaW5hdGVzIChkZWZpbmVkIGJ5IGB0cmFuc2ApIGludG8gdGhlIHZpZXdwb3J0IHBpeGVsIGNvb3JkaW5hdGVzLgogICAgLy8gVGhlIGRlcml2YXRpdmUgbmVlZHMgdG8gaW5jbHVkZSB0aGUgcHJvcGVyIHRlcm0gZm9yIHRoZSBwZXJzcGVjdGl2ZQogICAgLy8gZGl2aWRlIGludG8gTkRDLCBldmFsdWF0ZWQgYXQgdGhlIGNlbnRyZSBwb2ludCBgdmNsaXBgLgogICAgbWF0NCBkX25kY19kX2NsaXAgPSBtYXQ0KAogICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLAogICAgICAgIC12Y2xpcC54eXovKHZjbGlwLncqdmNsaXAudyksICAgICAgICAgIDAuMAogICAgKTsKICAgIG1hdDIgZHh5dl9keHlzID0gZGlhZ20oMC41ICogZ2V0X3Jlc29sdXRpb24oKSkgKiBtYXQyKGRfbmRjX2RfY2xpcCp0cmFucyk7CiAgICAvLyBOb3csIG91ciBidWZmZXIgc2l6ZSBpcyBleHByZXNzZWQgaW4gdmlld3BvcnQgcGl4ZWxzIGJ1dCB3ZSBnZXQgYmFjayB0bwogICAgLy8gdGhlIHNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSB1c2luZyB0aGUgc2NhbGUgZmFjdG9yIG9mIHRoZQogICAgLy8gdHJhbnNmb3JtYXRpb24gKGZvciBpc290cm9waWMgdHJhbnNmb3JtYXRpb25zKS4gRm9yIGFuaXNvdHJvcGljCiAgICAvLyB0cmFuc2Zvcm1hdGlvbnMsIHRoZSBnZW9tZXRyaWMgbWVhbiBvZiB0aGUgdHdvIHByaW5jaXBsZSBzY2FsZSBmYWN0b3JzCiAgICAvLyBpcyBhIHJlYXNvbmFibGUgY29tcHJvbWlzZToKICAgIGZsb2F0IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlID0gc3FydChhYnMoX2RldGVybWluYW50KGR4eXZfZHh5cykpKTsKCiAgICAvLyBJbiB0aGUgZnJhZ21lbnQgc2hhZGVyIHdlIHdhbnQgb3VyIHNpZ25lZCBkaXN0YW5jZSBpbiB2aWV3cG9ydCAocGl4ZWwpCiAgICAvLyBjb29yZHMgZm9yIGRpcmVjdCB1c2UgaW4gYW50aWFsaWFzaW5nIHN0ZXAgZnVuY3Rpb25zLiBXZSB0aGVyZWZvcmUgbmVlZAogICAgLy8gYSBzY2FsaW5nIGZhY3RvciBzaW1pbGFyIHRvIHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlLCBidXQgaW5jbHVkaW5nCiAgICAvLyB0aGUgdXYtPnNwcml0ZSBjb29yZGluYXRlIHN5c3RlbSBzY2FsaW5nIGZhY3RvciBhcyB3ZWxsLiAgV2UgY2hvb3NlIHRvCiAgICAvLyB1c2UgdGhlIGJvdW5kaW5nIGJveCAqeCogd2lkdGggZm9yIHRoaXMuIFRoaXMgY29tZXMgd2l0aCBzb21lCiAgICAvLyBjb25zaXN0ZW5jeSBjb25kaXRpb25zOgogICAgLy8gKiBGb3IgcHJvY2VkdXJhbCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdGhlIHNwcml0ZSBib3VuZGluZyBib3ggdG8gYmUKICAgIC8vICAgc3F1YXJlLiAoSWYgbm90LCB0aGUgdXYgY29vcmRpbmF0ZXMgd2lsbCBiZSBhbmlzb3Ryb3BpY2FsbHkgc2NhbGVkIGFuZAogICAgLy8gICBhbnkgY2FsY3VsYXRpb24gYmFzZWQgb24gdGhlbSB3aWxsIG5vdCBiZSBhIGRpc3RhbmNlIGZ1bmN0aW9uLikKICAgIC8vICogRm9yIHNhbXBsZWQgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRvIGNvbnNpc3RlbnRseSBjaG9vc2UgdGhlICp4KgogICAgLy8gICBmb3IgdGhlIHNjYWxpbmcgaW4gZ2V0X2Rpc3RhbmNlZmllbGRfc2NhbGUoKS4KICAgIGZsb2F0IHNwcml0ZV9mcm9tX3Vfc2NhbGUgPSBhYnMoZ2V0X21hcmtlcnNpemUoKS54KTsKICAgIGZyYWdfdXZzY2FsZSA9IHZpZXdwb3J0X2Zyb21fc3ByaXRlX3NjYWxlICogc3ByaXRlX2Zyb21fdV9zY2FsZTsKICAgIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSA9IGRpc3RhbmNlZmllbGRfc2NhbGUoKTsKICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yKCkpOwogICAgZnJhZ191diA9IGdldF91digpOwogICAgZnJhZ191dl9vZmZzZXRfd2lkdGggPSBnZXRfdXZfb2Zmc2V0X3dpZHRoKCk7CiAgICAvLyBzY3JlZW4gc3BhY2UgY29vcmRpbmF0ZXMgb2YgdGhlIHBvc2l0aW9uCiAgICB2ZWM0IHF1YWRfdmVydGV4ID0gKHRyYW5zICogdmVjNCgyLjAgKiBiYm94X3NpZ25lZF9yYWRpdXMgKiBnZXRfcG9zaXRpb24oKSwgMC4wLCAwLjApKTsKICAgIGdsX1Bvc2l0aW9uID0gdmNsaXAgKyBxdWFkX3ZlcnRleDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwp9CgqvZnJhZ21lbnRfc291cmNl2hKII3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGZsb2F0IGF0bGFzX3RleHR1cmVfc2l6ZTsKZmxvYXQgZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpe3JldHVybiBhdGxhc190ZXh0dXJlX3NpemU7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSBtYXQ0IHByZXByb2plY3Rpb247Cm1hdDQgZ2V0X3ByZXByb2plY3Rpb24oKXtyZXR1cm4gcHJlcHJvamVjdGlvbjt9CnVuaWZvcm0gYm9vbCB0cmFuc2Zvcm1fbWFya2VyOwpib29sIGdldF90cmFuc2Zvcm1fbWFya2VyKCl7cmV0dXJuIHRyYW5zZm9ybV9tYXJrZXI7fQoKaW4gdmVjNCBmcmFnX2NvbG9yOwppbiB2ZWMyIGZyYWdfdXY7CgojZGVmaW5lIENJUkNMRSAgICAgICAgICAgIDAKI2RlZmluZSBSRUNUQU5HTEUgICAgICAgICAxCiNkZWZpbmUgUk9VTkRFRF9SRUNUQU5HTEUgMgojZGVmaW5lIERJU1RBTkNFRklFTEQgICAgIDMKI2RlZmluZSBUUklBTkdMRSAgICAgICAgICA0CgojZGVmaW5lIE1fU1FSVF8yICAgICAgICAgIDEuNDE0MjEzNQoKCi8vIEhhbGYgd2lkdGggb2YgYW50aWFsaWFzaW5nIHNtb290aHN0ZXAKI2RlZmluZSBBTlRJQUxJQVNfUkFESVVTIDAuOAovLyBUaGVzZSB2ZXJzaW9ucyBvZiBhYXN0ZXAgYXNzdW1lIHRoYXQgYGRpc3RgIGlzIGEgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9uCi8vIHdoaWNoIGhhcyBiZWVuIHNjYWxlZCB0byBiZSBpbiB1bml0cyBvZiBwaXhlbHMuCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDEgKyBBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IHRocmVzaG9sZDIsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMStBTlRJQUxJQVNfUkFESVVTLCBkaXN0KSAtCiAgICAgICAgICAgc21vb3Roc3RlcCh0aHJlc2hvbGQyLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDIrQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCi8vIFByb2NlZHVyYWwgc2lnbmVkIGRpc3RhbmNlIGZ1bmN0aW9ucyBvbiB0aGUgdXYgY29vcmRpbmF0ZSBwYXRjaCBbMCwxXXhbMCwxXQovLyBOb3RlIHRoYXQgZm9yIGFudGlhbGlhc2luZyB0byB3b3JrIHByb3Blcmx5IHRoZXNlIHNob3VsZCBiZSAqc2NhbGUgcHJlc2VydmluZyoKLy8gKElmIHlvdSBtdXN0IHJlc2NhbGUgdXYsIG1ha2Ugc3VyZSB0byBwdXQgdGhlIHNjYWxlIGZhY3RvciBiYWNrIGluIGxhdGVyLikKZmxvYXQgdHJpYW5nbGUodmVjMiBQKXsKICAgIFAgLT0gdmVjMigwLjUpOwogICAgZmxvYXQgeCA9IE1fU1FSVF8yICogKFAueCAtIFAueSk7CiAgICBmbG9hdCB5ID0gTV9TUVJUXzIgKiAoUC54ICsgUC55KTsKICAgIGZsb2F0IHIxID0gbWF4KGFicyh4KSwgYWJzKHkpKSAtIDEuMC8oMi4wKk1fU1FSVF8yKTsKICAgIGZsb2F0IHIyID0gUC55OwogICAgcmV0dXJuIC1tYXgocjEscjIpOwp9CgpmbG9hdCBjaXJjbGUodmVjMiB1dil7CiAgICByZXR1cm4gMC41LWxlbmd0aCh1di12ZWMyKDAuNSkpOwp9CgpmbG9hdCByZWN0YW5nbGUodmVjMiB1dil7CiAgICB2ZWMyIGQgPSBtYXgoLXV2LCB1di12ZWMyKDEpKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpKTsKfQoKZmxvYXQgcm91bmRlZF9yZWN0YW5nbGUodmVjMiB1diwgdmVjMiB0bCwgdmVjMiBicil7CiAgICB2ZWMyIGQgPSBtYXgodGwtdXYsIHV2LWJyKTsKICAgIHJldHVybiAtKChsZW5ndGgobWF4KHZlYzIoMC4wKSwgZCkpICsgbWluKDAuMCwgbWF4KGQueCwgZC55KSkpLXRsLngpOwp9Cgp2b2lkIGZpbGwoYm9vbCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICBjb2xvciA9IG1peChjb2xvciwgZmlsbGNvbG9yLCBpbmZpbGwpOwp9Cgp2b2lkIGZpbGwoc2FtcGxlcjJEIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIHZlYzQgaW1fY29sb3IgPSB0ZXh0dXJlKGltYWdlLCB1di55eCk7CiAgICBjb2xvciA9IG1peChjb2xvciwgaW1fY29sb3IsIGluZmlsbCk7Cn0KCmluIGZsb2F0IGZyYWdfdXZzY2FsZTsKaW4gZmxvYXQgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlOwppbiB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgLy8gR2x5cGggZGlzdGFuY2UgZmllbGQgdW5pdHMgYXJlIGluIHBpeGVscy4gQ29udmVydCB0byBzYW1lIGRpc3RhbmNlCiAgICAvLyBzY2FsaW5nIGFzIGZfdXYueCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgcHJvY2VkdXJhbCBzaWduZWRfZGlzdGFuY2UKICAgIC8vIGNhbGN1bGF0aW9ucy4KICAgIHJldHVybiBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgKiB0ZXh0dXJlKGRpc3RhbmNlZmllbGQsIHV2KS5yOwp9CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChib29sIGRpc3RhbmNlZmllbGQsIHZlYzIgdXYpewogICAgcmV0dXJuIDAuMDsKfQoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKCiAgICBpbnQgc2hhcGUgPSBnZXRfc2hhcGVfdHlwZSgpOwogICAgZmxvYXQgc2lnbmVkX2Rpc3RhbmNlID0gMC4wOwogICAgdmVjNCB1dl9vZmYgPSBmcmFnX3V2X29mZnNldF93aWR0aDsKICAgIHZlYzIgdGV4X3V2ID0gbWl4KHV2X29mZi54eSwgdXZfb2ZmLnp3LCBjbGFtcChmcmFnX3V2LCAwLjAsIDEuMCkpOwogICAgaWYoc2hhcGUgPT0gQ0lSQ0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IGNpcmNsZShmcmFnX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gRElTVEFOQ0VGSUVMRCkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBzY2FsZWRfZGlzdGFuY2VmaWVsZChkaXN0YW5jZWZpZWxkLCB0ZXhfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBST1VOREVEX1JFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSByb3VuZGVkX3JlY3RhbmdsZShmcmFnX3V2LCB2ZWMyKDAuMiksIHZlYzIoMC44KSk7CiAgICBlbHNlIGlmKHNoYXBlID09IFJFQ1RBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSAxLjA7IC8vIHJlY3RhbmdsZShmX3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gVFJJQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gdHJpYW5nbGUoZnJhZ191dik7CgogICAgc2lnbmVkX2Rpc3RhbmNlICo9IGZyYWdfdXZzY2FsZTsKICAgIGZsb2F0IGluc2lkZSA9IGFhc3RlcCgwLjAsIHNpZ25lZF9kaXN0YW5jZSk7CiAgICB2ZWM0IGZpbmFsX2NvbG9yID0gdmVjNChmcmFnX2NvbG9yLnh5eiwgMCk7CiAgICBmaWxsKGltYWdlLCBmcmFnX2NvbG9yLCBmcmFnX3V2LCBpbnNpZGUsIGZpbmFsX2NvbG9yKTsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZpbmFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CiAgICBpZiAoZmluYWxfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZpbmFsX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzh6txdWFkX29mZnNldIKrdHlwZV9sZW5ndGgCpGZsYXTHABeqbWFya2Vyc2l6ZYKrdHlwZV9sZW5ndGgCpGZsYXTHABetbWFya2VyX29mZnNldIKrdHlwZV9sZW5ndGgDpGZsYXTHABelY29sb3KCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXr3V2X29mZnNldF93aWR0aIKrdHlwZV9sZW5ndGgEpGZsYXTHABejcG9zgqt0eXBlX2xlbmd0aAOkZmxhdMcAF6lyb3RhdGlvbnOCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXj6x0cmFuc3BhcmVuY3nHFWi0MTU2OTQyMjg1NTczNTY1ODM0Mzelc3BhY2XHFGizODUxNDYwMzA0NDgxNjY0NTE4OKx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIGxpbmVzZWdtZW50cy00MzUwMDY1NDI4MzMwMDExNDg4qWNhbV9zcGFjZaVwaXhlbKh1bmlmb3Jtc4encGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkSlbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6lvYmplY3RfaWQAp2FtYmllbnTHDBfNzAw/zcwMP83MDD+ndmlzaWJsZccUaLM2MDg4MDk5MDIwNzAzMDE1NTg5sWF0dHJpYnV0ZV91cGRhdGVyxxRoszQ5OTI3NzA0MTc3NDAzMzAwNTiob3ZlcmRyYXfHFGizNTU1MDk2NTA1NDU5MDk0NzgyM691bmlmb3JtX3VwZGF0ZXLHFGizMjg1MjQ1MTczNjI2NjA3MDA4MqVmYWNlc8cVaLQxNDg3MDA1MjU0ODU2NTUyODIyMKR1dWlkszQzNTAwNjU0MjgzMzAwMTE0ODitdmVydGV4X3NvdXJjZdoJ5SN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KaW4gdmVjNCBjb2xvcl9lbmQ7CnZlYzQgZ2V0X2NvbG9yX2VuZCgpe3JldHVybiBjb2xvcl9lbmQ7fQppbiBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWM0IGNvbG9yX3N0YXJ0Owp2ZWM0IGdldF9jb2xvcl9zdGFydCgpe3JldHVybiBjb2xvcl9zdGFydDt9CmluIHZlYzIgc2VnbWVudF9lbmQ7CnZlYzIgZ2V0X3NlZ21lbnRfZW5kKCl7cmV0dXJuIHNlZ21lbnRfZW5kO30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnZlYzIgc2NyZWVuX3NwYWNlKHZlYzQgcG9zaXRpb24pCnsKICAgIHJldHVybiB2ZWMyKHBvc2l0aW9uLnh5IC8gcG9zaXRpb24udykgKiBnZXRfcmVzb2x1dGlvbigpOwp9CnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwdm0gPSBwcm9qZWN0aW9uICogdmlldyAqIGdldF9tb2RlbCgpOwogICAgdmVjNCBwb2ludDFfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X3N0YXJ0KCkpLCAxKTsKICAgIHZlYzQgcG9pbnQyX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9lbmQoKSksIDEpOwogICAgdmVjMiBwb2ludDFfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50MV9jbGlwKTsKICAgIHZlYzIgcG9pbnQyX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDJfY2xpcCk7CiAgICB2ZWMyIGRpciA9IG5vcm1hbGl6ZShwb2ludDJfc2NyZWVuIC0gcG9pbnQxX3NjcmVlbik7CiAgICB2ZWMyIG5vcm1hbCA9IHZlYzIoLWRpci55LCBkaXIueCk7CiAgICB2ZWM0IGFuY2hvcjsKICAgIGZsb2F0IHRoaWNrbmVzczsKCiAgICBpZihwb3NpdGlvbi54ID09IDAuMCl7CiAgICAgICAgYW5jaG9yID0gcG9pbnQxX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3Jfc3RhcnQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9zdGFydCgpOwogICAgfWVsc2V7CiAgICAgICAgYW5jaG9yID0gcG9pbnQyX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3JfZW5kKCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfZW5kKCk7CiAgICB9CiAgICBmcmFnX2NvbG9yLmEgPSBmcmFnX2NvbG9yLmEgKiBtaW4oMS4wLCB0aGlja25lc3MgKiAyLjApOwoKICAgIG5vcm1hbCAqPSAodGhpY2tuZXNzIC8gZ2V0X3Jlc29sdXRpb24oKSkgKiBhbmNob3IudzsKICAgIC8vIHF1YWRwb3MgeSAocG9zaXRpb24ueSkgZ2l2ZXMgdXMgdGhlIGRpcmVjdGlvbiB0byBleHBhbmQgdGhlIGxpbmUKICAgIHZlYzQgb2Zmc2V0ID0gdmVjNChub3JtYWwgKiBwb3NpdGlvbi55LCAwLjAsIDAuMCk7CiAgICAvLyBzdGFydCwgb3IgZW5kIG9mIHF1YWQsIG5lZWQgdG8gdXNlIGN1cnJlbnQgb3IgbmV4dCBwb2ludCBhcyBhbmNob3IKICAgIGdsX1Bvc2l0aW9uID0gYW5jaG9yICsgb2Zmc2V0OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cgp9CgqvZnJhZ21lbnRfc291cmNl2gREI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQoKCmluIHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmcmFnX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGZyYWdfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZyYWdfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOGqWNvbG9yX2VuZIKrdHlwZV9sZW5ndGgEpGZsYXTHABetbGluZXdpZHRoX2VuZIKrdHlwZV9sZW5ndGgBpGZsYXTHABerY29sb3Jfc3RhcnSCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXq3NlZ21lbnRfZW5kgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF69saW5ld2lkdGhfc3RhcnSCq3R5cGVfbGVuZ3RoAaRmbGF0xwAXj6x0cmFuc3BhcmVuY3nHFGizNjUyODI4MTM3Nzg4NjE2OTU4MKVzcGFjZccUaLM1MDIwNzQ3MDUzMTI5MjU3MzU0rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgL8AAAAAAACAPwAAgD8AAIC/AACAPwAAgD+kbmFtZdkhbGluZXNlZ21lbnRzLTE3MTM4MjIyMzkxMTExMDg0MDk2qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjatjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACgQQAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP69saW5ld2lkdGhfc3RhcnTKP4AAAKlsaW5ld2lkdGjKP4AAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRK1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAKljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/pWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/p3Zpc2libGXHFGizMTk0OTE0OTk2MTc0ODgxNTkwN7FhdHRyaWJ1dGVfdXBkYXRlcscUaLM3ODMzNTAxMDUzMjI4NTgzNTQyqG92ZXJkcmF3xxVotDEyMTAzMjgxNzgyNjE4NjMxNzk2r3VuaWZvcm1fdXBkYXRlcscUaLM4ODcwNTc2NDI2MjI1NDYyNzU5pWZhY2VzxxVotDEzODY2NzM5NDMwMzE0NDI3NTkwpHV1aWS0MTcxMzgyMjIzOTExMTEwODQwOTatdmVydGV4X3NvdXJjZdoKbyN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9zdGFydDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9zdGFydCgpe3JldHVybiBsaW5ld2lkdGhfc3RhcnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSB2ZWM0IGNvbG9yX3N0YXJ0Owp2ZWM0IGdldF9jb2xvcl9zdGFydCgpe3JldHVybiBjb2xvcl9zdGFydDt9CnVuaWZvcm0gdmVjNCBjb2xvcl9lbmQ7CnZlYzQgZ2V0X2NvbG9yX2VuZCgpe3JldHVybiBjb2xvcl9lbmQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9lbmQ7CmZsb2F0IGdldF9saW5ld2lkdGhfZW5kKCl7cmV0dXJuIGxpbmV3aWR0aF9lbmQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aDsKZmxvYXQgZ2V0X2xpbmV3aWR0aCgpe3JldHVybiBsaW5ld2lkdGg7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiB2ZWMyIHNlZ21lbnRfc3RhcnQ7CnZlYzIgZ2V0X3NlZ21lbnRfc3RhcnQoKXtyZXR1cm4gc2VnbWVudF9zdGFydDt9CmluIHZlYzIgc2VnbWVudF9lbmQ7CnZlYzIgZ2V0X3NlZ21lbnRfZW5kKCl7cmV0dXJuIHNlZ21lbnRfZW5kO30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnZlYzIgc2NyZWVuX3NwYWNlKHZlYzQgcG9zaXRpb24pCnsKICAgIHJldHVybiB2ZWMyKHBvc2l0aW9uLnh5IC8gcG9zaXRpb24udykgKiBnZXRfcmVzb2x1dGlvbigpOwp9CnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwdm0gPSBwcm9qZWN0aW9uICogdmlldyAqIGdldF9tb2RlbCgpOwogICAgdmVjNCBwb2ludDFfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X3N0YXJ0KCkpLCAxKTsKICAgIHZlYzQgcG9pbnQyX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9lbmQoKSksIDEpOwogICAgdmVjMiBwb2ludDFfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50MV9jbGlwKTsKICAgIHZlYzIgcG9pbnQyX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDJfY2xpcCk7CiAgICB2ZWMyIGRpciA9IG5vcm1hbGl6ZShwb2ludDJfc2NyZWVuIC0gcG9pbnQxX3NjcmVlbik7CiAgICB2ZWMyIG5vcm1hbCA9IHZlYzIoLWRpci55LCBkaXIueCk7CiAgICB2ZWM0IGFuY2hvcjsKICAgIGZsb2F0IHRoaWNrbmVzczsKCiAgICBpZihwb3NpdGlvbi54ID09IDAuMCl7CiAgICAgICAgYW5jaG9yID0gcG9pbnQxX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3Jfc3RhcnQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9zdGFydCgpOwogICAgfWVsc2V7CiAgICAgICAgYW5jaG9yID0gcG9pbnQyX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3JfZW5kKCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfZW5kKCk7CiAgICB9CiAgICBmcmFnX2NvbG9yLmEgPSBmcmFnX2NvbG9yLmEgKiBtaW4oMS4wLCB0aGlja25lc3MgKiAyLjApOwoKICAgIG5vcm1hbCAqPSAodGhpY2tuZXNzIC8gZ2V0X3Jlc29sdXRpb24oKSkgKiBhbmNob3IudzsKICAgIC8vIHF1YWRwb3MgeSAocG9zaXRpb24ueSkgZ2l2ZXMgdXMgdGhlIGRpcmVjdGlvbiB0byBleHBhbmQgdGhlIGxpbmUKICAgIHZlYzQgb2Zmc2V0ID0gdmVjNChub3JtYWwgKiBwb3NpdGlvbi55LCAwLjAsIDAuMCk7CiAgICAvLyBzdGFydCwgb3IgZW5kIG9mIHF1YWQsIG5lZWQgdG8gdXNlIGN1cnJlbnQgb3IgbmV4dCBwb2ludCBhcyBhbmNob3IKICAgIGdsX1Bvc2l0aW9uID0gYW5jaG9yICsgb2Zmc2V0OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cgp9CgqvZnJhZ21lbnRfc291cmNl2gXiI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9zdGFydDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9zdGFydCgpe3JldHVybiBsaW5ld2lkdGhfc3RhcnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSB2ZWM0IGNvbG9yX3N0YXJ0Owp2ZWM0IGdldF9jb2xvcl9zdGFydCgpe3JldHVybiBjb2xvcl9zdGFydDt9CnVuaWZvcm0gdmVjNCBjb2xvcl9lbmQ7CnZlYzQgZ2V0X2NvbG9yX2VuZCgpe3JldHVybiBjb2xvcl9lbmQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aF9lbmQ7CmZsb2F0IGdldF9saW5ld2lkdGhfZW5kKCl7cmV0dXJuIGxpbmV3aWR0aF9lbmQ7fQp1bmlmb3JtIGZsb2F0IGxpbmV3aWR0aDsKZmxvYXQgZ2V0X2xpbmV3aWR0aCgpe3JldHVybiBsaW5ld2lkdGg7fQoKCmluIHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmcmFnX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGZyYWdfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZyYWdfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOCq3NlZ21lbnRfZW5kgqt0eXBlX2xlbmd0aAKkZmxhdNcXAAAMQgAgEkStc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTXFwAADEIAACpC3gAQrHRyYW5zcGFyZW5jeccVaLQxMTk0MzczNTYxMDE5OTY0NTE0OKVzcGFjZccUaLMyMjMwMTYzNjg5MTYyOTIyNzA5rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbl0ZXh0LTEyOTY5NDIyMTAyNDQ5NDY0ODkyqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+pYmlsbGJvYXJkwq1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXzcwMP83MDD/NzAw/rWRpc3RhbmNlZmllbGSKqW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKqYW5pc290cm9wecpBgAAAqW1hZ0ZpbHRlcqxMaW5lYXJGaWx0ZXKld3JhcFOuUmVwZWF0V3JhcHBpbmekZGF0Ya10ZXh0dXJlX2F0bGFzrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZZLNBADNBACld3JhcFSuUmVwZWF0V3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZEpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLDq2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6d2aXNpYmxlxxRoszY5MTQyNTY4Nzc2NDQ3MDM3NjirbWFya2Vyc3BhY2XHFWi0MTM1MTExMTYzMjA2NzIwMTQwMjOxYXR0cmlidXRlX3VwZGF0ZXLHFWi0MTY5NTEzOTExNTQyNjA1OTkzNziob3ZlcmRyYXfHFGizMjgxMjg4MjMwNTcyNDY3NjU2Nq91bmlmb3JtX3VwZGF0ZXLHFWi0MTczOTI3NDUyOTIzMzc5NjYyNjalZmFjZXPHFWi0MTYzODAzODM3MjM4MTQ0OTQ0MzWkdXVpZLQxMjk2OTQyMjEwMjQ0OTQ2NDg5Mq12ZXJ0ZXhfc291cmNl2hpNI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKXsKICAgIHZlYzIgYmJveF9zaWduZWRfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsgLy8gbm90ZTsgY29tcG9uZW50cyBtYXkgYmUgbmVnYXRpdmUuCiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9zaWduZWRfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIC8vIENvbXB1dGUgdHJhbnNmb3JtIGZvciB0aGUgb2Zmc2V0IHZlY3RvcnMgZnJvbSB0aGUgY2VudHJhbCBwb2ludAogICAgbWF0NCB0cmFucyA9IGdldF90cmFuc2Zvcm1fbWFya2VyKCkgPyBtb2RlbCA6IG1hdDQoMS4wKTsKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKCiAgICAvLyBDb21wdXRlIGNlbnRyZSBvZiBiaWxsYm9hcmQgaW4gY2xpcHBpbmcgY29vcmRpbmF0ZXMKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDMobW9kZWwpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBnZXRfcmVzb2x1dGlvbigpKSAqIG1hdDIoZF9uZGNfZF9jbGlwKnRyYW5zKTsKICAgIC8vIE5vdywgb3VyIGJ1ZmZlciBzaXplIGlzIGV4cHJlc3NlZCBpbiB2aWV3cG9ydCBwaXhlbHMgYnV0IHdlIGdldCBiYWNrIHRvCiAgICAvLyB0aGUgc3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHVzaW5nIHRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlCiAgICAvLyB0cmFuc2Zvcm1hdGlvbiAoZm9yIGlzb3Ryb3BpYyB0cmFuc2Zvcm1hdGlvbnMpLiBGb3IgYW5pc290cm9waWMKICAgIC8vIHRyYW5zZm9ybWF0aW9ucywgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB0d28gcHJpbmNpcGxlIHNjYWxlIGZhY3RvcnMKICAgIC8vIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlOgogICAgZmxvYXQgdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgPSBzcXJ0KGFicyhfZGV0ZXJtaW5hbnQoZHh5dl9keHlzKSkpOwoKICAgIC8vIEluIHRoZSBmcmFnbWVudCBzaGFkZXIgd2Ugd2FudCBvdXIgc2lnbmVkIGRpc3RhbmNlIGluIHZpZXdwb3J0IChwaXhlbCkKICAgIC8vIGNvb3JkcyBmb3IgZGlyZWN0IHVzZSBpbiBhbnRpYWxpYXNpbmcgc3RlcCBmdW5jdGlvbnMuIFdlIHRoZXJlZm9yZSBuZWVkCiAgICAvLyBhIHNjYWxpbmcgZmFjdG9yIHNpbWlsYXIgdG8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUsIGJ1dCBpbmNsdWRpbmcKICAgIC8vIHRoZSB1di0+c3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHNjYWxpbmcgZmFjdG9yIGFzIHdlbGwuICBXZSBjaG9vc2UgdG8KICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94ICp4KiB3aWR0aCBmb3IgdGhpcy4gVGhpcyBjb21lcyB3aXRoIHNvbWUKICAgIC8vIGNvbnNpc3RlbmN5IGNvbmRpdGlvbnM6CiAgICAvLyAqIEZvciBwcm9jZWR1cmFsIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0aGUgc3ByaXRlIGJvdW5kaW5nIGJveCB0byBiZQogICAgLy8gICBzcXVhcmUuIChJZiBub3QsIHRoZSB1diBjb29yZGluYXRlcyB3aWxsIGJlIGFuaXNvdHJvcGljYWxseSBzY2FsZWQgYW5kCiAgICAvLyAgIGFueSBjYWxjdWxhdGlvbiBiYXNlZCBvbiB0aGVtIHdpbGwgbm90IGJlIGEgZGlzdGFuY2UgZnVuY3Rpb24uKQogICAgLy8gKiBGb3Igc2FtcGxlZCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdG8gY29uc2lzdGVudGx5IGNob29zZSB0aGUgKngqCiAgICAvLyAgIGZvciB0aGUgc2NhbGluZyBpbiBnZXRfZGlzdGFuY2VmaWVsZF9zY2FsZSgpLgogICAgZmxvYXQgc3ByaXRlX2Zyb21fdV9zY2FsZSA9IGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpOwogICAgZnJhZ191dnNjYWxlID0gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgKiBzcHJpdGVfZnJvbV91X3NjYWxlOwogICAgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlID0gZGlzdGFuY2VmaWVsZF9zY2FsZSgpOwogICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3IoKSk7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2X29mZnNldF93aWR0aCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIC8vIHNjcmVlbiBzcGFjZSBjb29yZGluYXRlcyBvZiB0aGUgcG9zaXRpb24KICAgIHZlYzQgcXVhZF92ZXJ0ZXggPSAodHJhbnMgKiB2ZWM0KDIuMCAqIGJib3hfc2lnbmVkX3JhZGl1cyAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaEogjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgppbiB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgZnJhZ191djsKCiNkZWZpbmUgQ0lSQ0xFICAgICAgICAgICAgMAojZGVmaW5lIFJFQ1RBTkdMRSAgICAgICAgIDEKI2RlZmluZSBST1VOREVEX1JFQ1RBTkdMRSAyCiNkZWZpbmUgRElTVEFOQ0VGSUVMRCAgICAgMwojZGVmaW5lIFRSSUFOR0xFICAgICAgICAgIDQKCiNkZWZpbmUgTV9TUVJUXzIgICAgICAgICAgMS40MTQyMTM1CgoKLy8gSGFsZiB3aWR0aCBvZiBhbnRpYWxpYXNpbmcgc21vb3Roc3RlcAojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44Ci8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzLiBDb252ZXJ0IHRvIHNhbWUgZGlzdGFuY2UKICAgIC8vIHNjYWxpbmcgYXMgZl91di54IGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBwcm9jZWR1cmFsIHNpZ25lZF9kaXN0YW5jZQogICAgLy8gY2FsY3VsYXRpb25zLgogICAgcmV0dXJuIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSAqIHRleHR1cmUoZGlzdGFuY2VmaWVsZCwgdXYpLnI7Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGJvb2wgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICByZXR1cm4gMC4wOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewoKICAgIGludCBzaGFwZSA9IGdldF9zaGFwZV90eXBlKCk7CiAgICBmbG9hdCBzaWduZWRfZGlzdGFuY2UgPSAwLjA7CiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CiAgICBpZihzaGFwZSA9PSBDSVJDTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gY2lyY2xlKGZyYWdfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBESVNUQU5DRUZJRUxEKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKDAuMCwgc2lnbmVkX2Rpc3RhbmNlKTsKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMcgF6jGi8AAAMDAjZeuwAAAwMCyna/AFK7HwPypscAAAMDAqm1hcmtlcnNpemWCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXUrh+QYPAukFWDp1Bg8C6QQisnEEIrLxB2/meQYPAukGtbWFya2VyX29mZnNldIKrdHlwZV9sZW5ndGgDpGZsYXTHMBcEVg7Bv5+6wAAAAAAEVg7Bv5+6wAAAAAAEVg7Bv5+6wAAAAAAEVg7Bv5+6wAAAAAClY29sb3KCq3R5cGVfbGVuZ3RoBKRmbGF0x0AXAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAP691dl9vZmZzZXRfd2lkdGiCq3R5cGVfbGVuZ3RoBKRmbGF0x0AXAIAwPgAgDz8AgE8+AKAaPwDAlD4AwO8+AECoPgBgAz8AwJQ+AKADPwBAqD4AYA8/AMCUPgCgDz8AQKg+ACAbP6Nwb3OCq3R5cGVfbGVuZ3RoA6RmbGF0xzAXAADAQYsuh0IAAAAAAADAQcGHZ0MAAAAAAADAQR+8xUMAAAAAAADAQS7aC0QAAAAAqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTHQBcAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAIA/j6x0cmFuc3BhcmVuY3nHFWi0MTYxMDE1Mzk1MjgzNTU1NTU1NTalc3BhY2XHFGizNjg2ODUzODkwMjgxNTYyODE3M6x2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIWxpbmVzZWdtZW50cy0xMTYxNzUyNTc3NDkzOTk0NDAxNqljYW1fc3BhY2WlcGl4ZWyodW5pZm9ybXOHp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZEpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+pb2JqZWN0X2lkAKdhbWJpZW50xwwXzcwMP83MDD/NzAw/p3Zpc2libGXHFGizMjQ2NjgwNTk2NTU0NDY1Nzk4MLFhdHRyaWJ1dGVfdXBkYXRlcscVaLQxNTQxODg3NzU1MzEwMTY0MDk4NqhvdmVyZHJhd8cVaLQxNDUyOTg0OTYyNzgwMDk5ODMzNK91bmlmb3JtX3VwZGF0ZXLHFWi0MTcxMzM0NzY3NDU5NzgzODQzODWlZmFjZXPHE2iyMjM2MDAwNTkwODE3NDc4Nzc0pHV1aWS0MTE2MTc1MjU3NzQ5Mzk5NDQwMTatdmVydGV4X3NvdXJjZdoJ5SN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQoKCgoKLy8gUGVyIGluc3RhbmNlIGF0dHJpYnV0ZXM6IAppbiBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KaW4gdmVjNCBjb2xvcl9lbmQ7CnZlYzQgZ2V0X2NvbG9yX2VuZCgpe3JldHVybiBjb2xvcl9lbmQ7fQppbiBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWM0IGNvbG9yX3N0YXJ0Owp2ZWM0IGdldF9jb2xvcl9zdGFydCgpe3JldHVybiBjb2xvcl9zdGFydDt9CmluIHZlYzIgc2VnbWVudF9lbmQ7CnZlYzIgZ2V0X3NlZ21lbnRfZW5kKCl7cmV0dXJuIHNlZ21lbnRfZW5kO30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnZlYzIgc2NyZWVuX3NwYWNlKHZlYzQgcG9zaXRpb24pCnsKICAgIHJldHVybiB2ZWMyKHBvc2l0aW9uLnh5IC8gcG9zaXRpb24udykgKiBnZXRfcmVzb2x1dGlvbigpOwp9CnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgpvdXQgdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCkKewogICAgbWF0NCBwdm0gPSBwcm9qZWN0aW9uICogdmlldyAqIGdldF9tb2RlbCgpOwogICAgdmVjNCBwb2ludDFfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X3N0YXJ0KCkpLCAxKTsKICAgIHZlYzQgcG9pbnQyX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9lbmQoKSksIDEpOwogICAgdmVjMiBwb2ludDFfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50MV9jbGlwKTsKICAgIHZlYzIgcG9pbnQyX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDJfY2xpcCk7CiAgICB2ZWMyIGRpciA9IG5vcm1hbGl6ZShwb2ludDJfc2NyZWVuIC0gcG9pbnQxX3NjcmVlbik7CiAgICB2ZWMyIG5vcm1hbCA9IHZlYzIoLWRpci55LCBkaXIueCk7CiAgICB2ZWM0IGFuY2hvcjsKICAgIGZsb2F0IHRoaWNrbmVzczsKCiAgICBpZihwb3NpdGlvbi54ID09IDAuMCl7CiAgICAgICAgYW5jaG9yID0gcG9pbnQxX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3Jfc3RhcnQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9zdGFydCgpOwogICAgfWVsc2V7CiAgICAgICAgYW5jaG9yID0gcG9pbnQyX2NsaXA7CiAgICAgICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3JfZW5kKCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfZW5kKCk7CiAgICB9CiAgICBmcmFnX2NvbG9yLmEgPSBmcmFnX2NvbG9yLmEgKiBtaW4oMS4wLCB0aGlja25lc3MgKiAyLjApOwoKICAgIG5vcm1hbCAqPSAodGhpY2tuZXNzIC8gZ2V0X3Jlc29sdXRpb24oKSkgKiBhbmNob3IudzsKICAgIC8vIHF1YWRwb3MgeSAocG9zaXRpb24ueSkgZ2l2ZXMgdXMgdGhlIGRpcmVjdGlvbiB0byBleHBhbmQgdGhlIGxpbmUKICAgIHZlYzQgb2Zmc2V0ID0gdmVjNChub3JtYWwgKiBwb3NpdGlvbi55LCAwLjAsIDAuMCk7CiAgICAvLyBzdGFydCwgb3IgZW5kIG9mIHF1YWQsIG5lZWQgdG8gdXNlIGN1cnJlbnQgb3IgbmV4dCBwb2ludCBhcyBhbmNob3IKICAgIGdsX1Bvc2l0aW9uID0gYW5jaG9yICsgb2Zmc2V0OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cgp9CgqvZnJhZ21lbnRfc291cmNl2gREI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwoKb3V0IHZlYzQgZnJhZ21lbnRfY29sb3I7CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQoKCmluIHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmcmFnX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGZyYWdfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IGZyYWdfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOGqWNvbG9yX2VuZIKrdHlwZV9sZW5ndGgEpGZsYXTHABetbGluZXdpZHRoX2VuZIKrdHlwZV9sZW5ndGgBpGZsYXTHABerY29sb3Jfc3RhcnSCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXq3NlZ21lbnRfZW5kgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF69saW5ld2lkdGhfc3RhcnSCq3R5cGVfbGVuZ3RoAaRmbGF0xwAXj6x0cmFuc3BhcmVuY3nHFGizMzQzNjk5MDA4MzMyMzM5MzIzN6VzcGFjZccVaLQxNDQ3OTc3Mzc1NTgxNzQ1NjI3Oax2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIGxpbmVzZWdtZW50cy03NDgxNTQwMTkwMjk0NTIzODg5qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjatjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP69saW5ld2lkdGhfc3RhcnTKP4AAAKlsaW5ld2lkdGjKP4AAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRK1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAKljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/pWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/p3Zpc2libGXHFGizMzQwODYyNzgwNzIwOTU1OTYzObFhdHRyaWJ1dGVfdXBkYXRlcscTaLI1MDg1ODE3ODEzMDY5OTk5MzCob3ZlcmRyYXfHFGizNDY3ODgzMzE5NzY4ODAxNTc3Mq91bmlmb3JtX3VwZGF0ZXLHFGizNjg5NTYwMzM0NDk0Mjg1NjQ4NKVmYWNlc8cUaLMxNTIxMzQyOTUzNTg3ODcxOTg1pHV1aWSzNzQ4MTU0MDE5MDI5NDUyMzg4Oa12ZXJ0ZXhfc291cmNl2gpvI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgc2VnbWVudF9zdGFydDsKdmVjMiBnZXRfc2VnbWVudF9zdGFydCgpe3JldHVybiBzZWdtZW50X3N0YXJ0O30KaW4gdmVjMiBzZWdtZW50X2VuZDsKdmVjMiBnZXRfc2VnbWVudF9lbmQoKXtyZXR1cm4gc2VnbWVudF9lbmQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdmVjMiBzY3JlZW5fc3BhY2UodmVjNCBwb3NpdGlvbikKewogICAgcmV0dXJuIHZlYzIocG9zaXRpb24ueHkgLyBwb3NpdGlvbi53KSAqIGdldF9yZXNvbHV0aW9uKCk7Cn0KdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm91dCB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHB2bSA9IHByb2plY3Rpb24gKiB2aWV3ICogZ2V0X21vZGVsKCk7CiAgICB2ZWM0IHBvaW50MV9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfc3RhcnQoKSksIDEpOwogICAgdmVjNCBwb2ludDJfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X2VuZCgpKSwgMSk7CiAgICB2ZWMyIHBvaW50MV9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQxX2NsaXApOwogICAgdmVjMiBwb2ludDJfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50Ml9jbGlwKTsKICAgIHZlYzIgZGlyID0gbm9ybWFsaXplKHBvaW50Ml9zY3JlZW4gLSBwb2ludDFfc2NyZWVuKTsKICAgIHZlYzIgbm9ybWFsID0gdmVjMigtZGlyLnksIGRpci54KTsKICAgIHZlYzQgYW5jaG9yOwogICAgZmxvYXQgdGhpY2tuZXNzOwoKICAgIGlmKHBvc2l0aW9uLnggPT0gMC4wKXsKICAgICAgICBhbmNob3IgPSBwb2ludDFfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9zdGFydCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX3N0YXJ0KCk7CiAgICB9ZWxzZXsKICAgICAgICBhbmNob3IgPSBwb2ludDJfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9lbmQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9lbmQoKTsKICAgIH0KICAgIGZyYWdfY29sb3IuYSA9IGZyYWdfY29sb3IuYSAqIG1pbigxLjAsIHRoaWNrbmVzcyAqIDIuMCk7CgogICAgbm9ybWFsICo9ICh0aGlja25lc3MgLyBnZXRfcmVzb2x1dGlvbigpKSAqIGFuY2hvci53OwogICAgLy8gcXVhZHBvcyB5IChwb3NpdGlvbi55KSBnaXZlcyB1cyB0aGUgZGlyZWN0aW9uIHRvIGV4cGFuZCB0aGUgbGluZQogICAgdmVjNCBvZmZzZXQgPSB2ZWM0KG5vcm1hbCAqIHBvc2l0aW9uLnksIDAuMCwgMC4wKTsKICAgIC8vIHN0YXJ0LCBvciBlbmQgb2YgcXVhZCwgbmVlZCB0byB1c2UgY3VycmVudCBvciBuZXh0IHBvaW50IGFzIGFuY2hvcgogICAgZ2xfUG9zaXRpb24gPSBhbmNob3IgKyBvZmZzZXQ7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKCn0KCq9mcmFnbWVudF9zb3VyY2XaBeIjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKaW4gdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZyYWdfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZnJhZ19jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZnJhZ19jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4Krc2VnbWVudF9lbmSCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXRReKQgCAE0TwAZRDAIATRAi/AkQAgBNEF307RACAE0Stc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTHIBdFF4pCAAASRPABlEMAABJECL8CRAAAEkQXfTtEAAASRI+sdHJhbnNwYXJlbmN5xxVotDEwNTkwNzI0NTgzODAzMDYxODIwpXNwYWNlxxRoszY1NDMzMTg3NTYzMzA3MDQyMTOsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SBsaW5lc2VnbWVudHMtNzU2ODgzMzcxODI2NDI4MDg5N6ljYW1fc3BhY2WkZGF0Yah1bmlmb3Jtc42rY29sb3Jfc3RhcnTYFwAAAAAAAAAAAAAAAAAAgD+lbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAIEEAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+vbGluZXdpZHRoX3N0YXJ0yj+AAACpbGluZXdpZHRoyj+AAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkStbGluZXdpZHRoX2VuZMo/gAAAqW9iamVjdF9pZACpY29sb3JfZW5k2BcAAAAAAAAAAAAAAAAAAIA/q2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6Vjb2xvctgXAAAAAAAAAAAAAAAAAACAP6d2aXNpYmxlxxVotDE1MTI1MzEwMzgxNTQzNjkyODY3sWF0dHJpYnV0ZV91cGRhdGVyxxVotDE2ODA1MjE2NTI1MDAzNTcwMjA4qG92ZXJkcmF3xxRoszkwMjIyMzExMzUzNTA2MzY5MTCvdW5pZm9ybV91cGRhdGVyxxVotDE1NTEyNjM3MDY3MTc0Mzc1MDY2pWZhY2VzxxRoszc4OTI5MTE2MTM1ODAwODU3MTKkdXVpZLM3NTY4ODMzNzE4MjY0MjgwODk3rXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAgEVEiy6HQgCARUTBh2dDAIBFRB+8xUMAgEVELtoLRK1zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAARESLLodCAABERMGHZ0MAAEREH7zFQwAAREQu2gtEj6x0cmFuc3BhcmVuY3nHFGizNDUwNzQ5MDYyMjcwNDI5Njk2NKVzcGFjZccUaLM5NTg2MjMzNjUyMzc0MTkzMDM2rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgL8AAAAAAACAPwAAgD8AAIC/AACAPwAAgD+kbmFtZdkhbGluZXNlZ21lbnRzLTE1ODIxMzM4NTczNzYyMjU0NjYwqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjatjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP69saW5ld2lkdGhfc3RhcnTKP4AAAKlsaW5ld2lkdGjKP4AAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRK1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAKljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/pWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/p3Zpc2libGXHFGizODk3NDc5ODEzMjgzODY3MzAwObFhdHRyaWJ1dGVfdXBkYXRlcscUaLM0MDY2MDI0NzQ4ODEwMjA4Nzk3qG92ZXJkcmF3xxRoszIzMDA3NTIxODc1MjE4ODE1MDCvdW5pZm9ybV91cGRhdGVyxxRoszQ2OTM4OTg4NTgzOTQxOTQ4ODelZmFjZXPHFGizODUyMzc2NTQxNjg1NjYxMTIyMqR1dWlktDE1ODIxMzM4NTczNzYyMjU0NjYwrXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHGBfBhzZDAAATRP+/zEMAABNEEB4fRAAAE0Stc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTHGBfBhzZDAAASRP+/zEMAABJEEB4fRAAAEkSPrHRyYW5zcGFyZW5jeccVaLQxMjQyODk5ODYzMzQ4Mjg1OTEzMqVzcGFjZccVaLQxNTg0MTc0OTA3MjYwMTQ1NzE2Mqx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIGxpbmVzZWdtZW50cy05OTA2NDI1Nzc1MTAyNTExNjI5qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjatjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAgQQAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP69saW5ld2lkdGhfc3RhcnTKP4AAAKlsaW5ld2lkdGjKP4AAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRK1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAKljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/pWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/p3Zpc2libGXHFGizMjc4MTY5MDE1Mjk2NjkzNzYzMrFhdHRyaWJ1dGVfdXBkYXRlcscVaLQxNjIwNjA3NTQyNjY2Nzg1MjM3N6hvdmVyZHJhd8cVaLQxNzAzNjM5ODQ5NTczNzY1NzI3OK91bmlmb3JtX3VwZGF0ZXLHFWi0MTA5MzYzMDQ1Mzk0ODQzODkyNTGlZmFjZXPHFWi0MTQ4NzI0MTIwNDg5ODAyNTY1MjCkdXVpZLM5OTA2NDI1Nzc1MTAyNTExNjI5rXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHGBcAAEVEg48VQwAARUT/v5xDAABFRD647kOtc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTHGBcAAEREg48VQwAARET/v5xDAABERD647kOPrHRyYW5zcGFyZW5jeccUaLM0MjM5MTkyMjAxODA1OTUwODgwpXNwYWNlxxRoszg2MTI3NjUwMjQ5MjYzMDExNTSsdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SFsaW5lc2VnbWVudHMtMTMzMTAyNzc3NDM2ODEyNzY2MDGpY2FtX3NwYWNlpGRhdGGodW5pZm9ybXONq2NvbG9yX3N0YXJ02BcAAAAAAAAAAAAAAAAAAIA/pW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAKBBAACAP6dhbWJpZW50xwwXzcwMP83MDD/NzAw/r2xpbmV3aWR0aF9zdGFydMo/gAAAqWxpbmV3aWR0aMo/gAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZErWxpbmV3aWR0aF9lbmTKP4AAAKlvYmplY3RfaWQAqWNvbG9yX2VuZNgXAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+lY29sb3LYFwAAAAAAAAAAAAAAAAAAgD+ndmlzaWJsZccUaLM4NTc3Mjc2MzU0Mzg4MDUzOTA2sWF0dHJpYnV0ZV91cGRhdGVyxxVotDE0ODg2MTE1MTM3ODQ5NTc0MTg2qG92ZXJkcmF3xxVotDExNDYwNDAyMjU3NzQwMDE2NDk3r3VuaWZvcm1fdXBkYXRlcscUaLMyNjg0ODYwMjI4OTU0OTcyMjk3pWZhY2VzxxRoszgyMTg5MzU5NDMyOTkxNTkzMDWkdXVpZLQxMzMxMDI3Nzc0MzY4MTI3NjYwMa12ZXJ0ZXhfc291cmNl2gpvI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgc2VnbWVudF9zdGFydDsKdmVjMiBnZXRfc2VnbWVudF9zdGFydCgpe3JldHVybiBzZWdtZW50X3N0YXJ0O30KaW4gdmVjMiBzZWdtZW50X2VuZDsKdmVjMiBnZXRfc2VnbWVudF9lbmQoKXtyZXR1cm4gc2VnbWVudF9lbmQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdmVjMiBzY3JlZW5fc3BhY2UodmVjNCBwb3NpdGlvbikKewogICAgcmV0dXJuIHZlYzIocG9zaXRpb24ueHkgLyBwb3NpdGlvbi53KSAqIGdldF9yZXNvbHV0aW9uKCk7Cn0KdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm91dCB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHB2bSA9IHByb2plY3Rpb24gKiB2aWV3ICogZ2V0X21vZGVsKCk7CiAgICB2ZWM0IHBvaW50MV9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfc3RhcnQoKSksIDEpOwogICAgdmVjNCBwb2ludDJfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X2VuZCgpKSwgMSk7CiAgICB2ZWMyIHBvaW50MV9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQxX2NsaXApOwogICAgdmVjMiBwb2ludDJfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50Ml9jbGlwKTsKICAgIHZlYzIgZGlyID0gbm9ybWFsaXplKHBvaW50Ml9zY3JlZW4gLSBwb2ludDFfc2NyZWVuKTsKICAgIHZlYzIgbm9ybWFsID0gdmVjMigtZGlyLnksIGRpci54KTsKICAgIHZlYzQgYW5jaG9yOwogICAgZmxvYXQgdGhpY2tuZXNzOwoKICAgIGlmKHBvc2l0aW9uLnggPT0gMC4wKXsKICAgICAgICBhbmNob3IgPSBwb2ludDFfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9zdGFydCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX3N0YXJ0KCk7CiAgICB9ZWxzZXsKICAgICAgICBhbmNob3IgPSBwb2ludDJfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9lbmQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9lbmQoKTsKICAgIH0KICAgIGZyYWdfY29sb3IuYSA9IGZyYWdfY29sb3IuYSAqIG1pbigxLjAsIHRoaWNrbmVzcyAqIDIuMCk7CgogICAgbm9ybWFsICo9ICh0aGlja25lc3MgLyBnZXRfcmVzb2x1dGlvbigpKSAqIGFuY2hvci53OwogICAgLy8gcXVhZHBvcyB5IChwb3NpdGlvbi55KSBnaXZlcyB1cyB0aGUgZGlyZWN0aW9uIHRvIGV4cGFuZCB0aGUgbGluZQogICAgdmVjNCBvZmZzZXQgPSB2ZWM0KG5vcm1hbCAqIHBvc2l0aW9uLnksIDAuMCwgMC4wKTsKICAgIC8vIHN0YXJ0LCBvciBlbmQgb2YgcXVhZCwgbmVlZCB0byB1c2UgY3VycmVudCBvciBuZXh0IHBvaW50IGFzIGFuY2hvcgogICAgZ2xfUG9zaXRpb24gPSBhbmNob3IgKyBvZmZzZXQ7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKCn0KCq9mcmFnbWVudF9zb3VyY2XaBeIjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CnVuaWZvcm0gZmxvYXQgbGluZXdpZHRoOwpmbG9hdCBnZXRfbGluZXdpZHRoKCl7cmV0dXJuIGxpbmV3aWR0aDt9CgoKaW4gdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZyYWdfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZnJhZ19jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZnJhZ19jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4Krc2VnbWVudF9lbmSCq3R5cGVfbGVuZ3RoAqRmbGF01xcAIEREAAASRK1zZWdtZW50X3N0YXJ0gqt0eXBlX2xlbmd0aAKkZmxhdNcXAAAKQgAAEkSPrHRyYW5zcGFyZW5jeccVaLQxMDMzNDIyMjc2MzAyOTkxMzQ3MqVzcGFjZccVaLQxODQzOTc4NTExMTk2MzYyNDY2NKx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIC/AAAAAAAAgD8AAIA/AACAvwAAgD8AAIA/pG5hbWXZIGxpbmVzZWdtZW50cy03MTQ2ODc5OTQ2NzU4NTAwMzcxqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjatjb2xvcl9zdGFydNgXAAAAAAAAAAAAAAAAAACAP6Vtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAACgQQAAgD+nYW1iaWVudMcMF83MDD/NzAw/zcwMP69saW5ld2lkdGhfc3RhcnTKP4AAAKlsaW5ld2lkdGjKP4AAAKdwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRK1saW5ld2lkdGhfZW5kyj+AAACpb2JqZWN0X2lkAKljb2xvcl9lbmTYFwAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/pWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/p3Zpc2libGXHFGizNDY3MDMxNzIzNTMxMjUzMjc5NLFhdHRyaWJ1dGVfdXBkYXRlcscVaLQxNzE1MDE2ODg3NDM4OTIzNzAyM6hvdmVyZHJhd8cUaLM1MzQ0MTI3OTc0MzU0ODk0NDU0r3VuaWZvcm1fdXBkYXRlcscUaLM5OTU4Mjg2ODY5NTA1NTU0MjU2pWZhY2VzxxRoszQ2MjU4OTgxNjE1ODM0MzE2NzGkdXVpZLM3MTQ2ODc5OTQ2NzU4NTAwMzcxrXZlcnRleF9zb3VyY2XaCm8jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBzZWdtZW50X3N0YXJ0Owp2ZWMyIGdldF9zZWdtZW50X3N0YXJ0KCl7cmV0dXJuIHNlZ21lbnRfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoF4iN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfc3RhcnQ7CmZsb2F0IGdldF9saW5ld2lkdGhfc3RhcnQoKXtyZXR1cm4gbGluZXdpZHRoX3N0YXJ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQp1bmlmb3JtIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGhfZW5kOwpmbG9hdCBnZXRfbGluZXdpZHRoX2VuZCgpe3JldHVybiBsaW5ld2lkdGhfZW5kO30KdW5pZm9ybSBmbG9hdCBsaW5ld2lkdGg7CmZsb2F0IGdldF9saW5ld2lkdGgoKXtyZXR1cm4gbGluZXdpZHRoO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzgqtzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTXFwAAREQAIBJErXNlZ21lbnRfc3RhcnSCq3R5cGVfbGVuZ3RoAqRmbGF01xcAAEREAAAqQt4AEKx0cmFuc3BhcmVuY3nHFGizNzA5MzI0MjE5MDE1ODMxMjAyM6VzcGFjZccUaLM2OTY1Mjk2Njc3NzE5ODk4NDE5rHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgD8AAIA/AACAPwAAAAAAAAAAAACAPwAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAvwAAAL8AAAA/AAAAvwAAAL8AAAA/AAAAPwAAAD+kbmFtZbh0ZXh0LTIzMjEyODYyMzA1OTAzNTU2NjapY2FtX3NwYWNlpGRhdGGodW5pZm9ybXOOpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6liaWxsYm9hcmTCrXByZXByb2plY3Rpb27HQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+tZGlzdGFuY2VmaWVsZIqpbWluRmlsdGVyrExpbmVhckZpbHRlcqphbmlzb3Ryb3B5ykGAAACpbWFnRmlsdGVyrExpbmVhckZpbHRlcqV3cmFwU65SZXBlYXRXcmFwcGluZ6RkYXRhrXRleHR1cmVfYXRsYXOsdGhyZWVfZm9ybWF0qVJlZEZvcm1hdKRzaXplks0EAM0EAKV3cmFwVK5SZXBlYXRXcmFwcGluZ6R0eXBlp1NhbXBsZXKqdGhyZWVfdHlwZalGbG9hdFR5cGWyYXRsYXNfdGV4dHVyZV9zaXplykSAAACncGlja2luZ8KqcmVzb2x1dGlvbtcXAABIRAAAFkSlaW1hZ2XCqW9iamVjdF9pZACqc2hhcGVfdHlwZQOwdHJhbnNmb3JtX21hcmtlcsOrZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/p3Zpc2libGXHFGizOTAxNjA5MDYyMDYwMDQ3MjQ0NqttYXJrZXJzcGFjZccUaLM4MTQ2MDAxNjk5MjQ5MTI4MjE5sWF0dHJpYnV0ZV91cGRhdGVyxxRoszc2MDczNjQ4NzY3NDMyNjU1MTmob3ZlcmRyYXfHFGizMjc2ODg2NTA2OTIyNTUxODgzOa91bmlmb3JtX3VwZGF0ZXLHFWi0MTE4NjE4ODA1MDYyODMzNzMyNDOlZmFjZXPHFWi0MTY2NTYwMzc5MTYxNjEwMjg1NDWkdXVpZLMyMzIxMjg2MjMwNTkwMzU1NjY2rXZlcnRleF9zb3VyY2XaGk0jdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gdmVjMiBtYXJrZXJzaXplOwp2ZWMyIGdldF9tYXJrZXJzaXplKCl7cmV0dXJuIG1hcmtlcnNpemU7fQppbiB2ZWM0IHJvdGF0aW9uczsKdmVjNCBnZXRfcm90YXRpb25zKCl7cmV0dXJuIHJvdGF0aW9uczt9CmluIHZlYzQgY29sb3I7CnZlYzQgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KaW4gdmVjMyBwb3M7CnZlYzMgZ2V0X3Bvcygpe3JldHVybiBwb3M7fQppbiB2ZWMyIHF1YWRfb2Zmc2V0Owp2ZWMyIGdldF9xdWFkX29mZnNldCgpe3JldHVybiBxdWFkX29mZnNldDt9CmluIHZlYzQgdXZfb2Zmc2V0X3dpZHRoOwp2ZWM0IGdldF91dl9vZmZzZXRfd2lkdGgoKXtyZXR1cm4gdXZfb2Zmc2V0X3dpZHRoO30KaW4gdmVjMyBtYXJrZXJfb2Zmc2V0Owp2ZWMzIGdldF9tYXJrZXJfb2Zmc2V0KCl7cmV0dXJuIG1hcmtlcl9vZmZzZXQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdW5pZm9ybSBmbG9hdCBhdGxhc190ZXhfZGltOwoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKb3V0IHZlYzIgZnJhZ191djsKb3V0IGZsb2F0IGZyYWdfdXZzY2FsZTsKb3V0IGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKb3V0IHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgoKbWF0NCBxbWF0KHZlYzQgcXVhdCl7CiAgICBmbG9hdCBudW0gPSBxdWF0LnggKiAyLjA7CiAgICBmbG9hdCBudW0yID0gcXVhdC55ICogMi4wOwogICAgZmxvYXQgbnVtMyA9IHF1YXQueiAqIDIuMDsKICAgIGZsb2F0IG51bTQgPSBxdWF0LnggKiBudW07CiAgICBmbG9hdCBudW01ID0gcXVhdC55ICogbnVtMjsKICAgIGZsb2F0IG51bTYgPSBxdWF0LnogKiBudW0zOwogICAgZmxvYXQgbnVtNyA9IHF1YXQueCAqIG51bTI7CiAgICBmbG9hdCBudW04ID0gcXVhdC54ICogbnVtMzsKICAgIGZsb2F0IG51bTkgPSBxdWF0LnkgKiBudW0zOwogICAgZmxvYXQgbnVtMTAgPSBxdWF0LncgKiBudW07CiAgICBmbG9hdCBudW0xMSA9IHF1YXQudyAqIG51bTI7CiAgICBmbG9hdCBudW0xMiA9IHF1YXQudyAqIG51bTM7CiAgICByZXR1cm4gbWF0NCgKICAgICAgICAoMS4wIC0gKG51bTUgKyBudW02KSksIChudW03ICsgbnVtMTIpLCAgICAgICAgKG51bTggLSBudW0xMSksICAgICAgICAwLjAsCiAgICAgICAgKG51bTcgLSBudW0xMiksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW02KSksIChudW05ICsgbnVtMTApLCAgICAgICAgMC4wLAogICAgICAgIChudW04ICsgbnVtMTEpLCAgICAgICAgKG51bTkgLSBudW0xMCksICAgICAgICAoMS4wIC0gKG51bTQgKyBudW01KSksIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAxLjAKICAgICk7Cn0KCmZsb2F0IGRpc3RhbmNlZmllbGRfc2NhbGUoKXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHM7IGNvbnZlcnQgdG8gZGltZW5zaW9ubGVzcwogICAgLy8geC1jb29yZGluYXRlIG9mIHRleHR1cmUgaW5zdGVhZCBmb3IgY29uc2lzdGVuY3kgd2l0aCBwcm9ncmFtbWF0aWMgdXYKICAgIC8vIGRpc3RhbmNlIGZpZWxkcyBpbiBmcmFnbWVudCBzaGFkZXIuIFNlZSBhbHNvIGNvbW1lbnRzIGJlbG93LgogICAgdmVjNCB1dl9yZWN0ID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgZmxvYXQgcGl4c2l6ZV94ID0gKHV2X3JlY3QueiAtIHV2X3JlY3QueCkgKiBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCk7CiAgICByZXR1cm4gLTEuMC9waXhzaXplX3g7Cn0KCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQodmVjMyB2KXtyZXR1cm4gdmVjNCh2LCAxLjApO30KdmVjNCB0b3ZlYzQodmVjNCB2KXtyZXR1cm4gdjt9CgptYXQyIGRpYWdtKHZlYzIgdil7CiAgICByZXR1cm4gbWF0Mih2LngsIDAuMCwgMC4wLCB2LnkpOwp9CgpmbG9hdCBfZGV0ZXJtaW5hbnQobWF0MiBtKSB7CiAgcmV0dXJuIG1bMF1bMF0gKiBtWzFdWzFdIC0gbVswXVsxXSAqIG1bMV1bMF07Cn0KCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpewogICAgdmVjMiBiYm94X3NpZ25lZF9yYWRpdXMgPSAwLjUgKiBnZXRfbWFya2Vyc2l6ZSgpOyAvLyBub3RlOyBjb21wb25lbnRzIG1heSBiZSBuZWdhdGl2ZS4KICAgIHZlYzIgc3ByaXRlX2Jib3hfY2VudHJlID0gZ2V0X3F1YWRfb2Zmc2V0KCkgKyBiYm94X3NpZ25lZF9yYWRpdXM7CgogICAgbWF0NCBwdmlldyA9IHByb2plY3Rpb24gKiB2aWV3OwogICAgLy8gQ29tcHV0ZSB0cmFuc2Zvcm0gZm9yIHRoZSBvZmZzZXQgdmVjdG9ycyBmcm9tIHRoZSBjZW50cmFsIHBvaW50CiAgICBtYXQ0IHRyYW5zID0gZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKSA/IG1vZGVsIDogbWF0NCgxLjApOwogICAgdHJhbnMgPSAoZ2V0X2JpbGxib2FyZCgpID8gcHJvamVjdGlvbiA6IHB2aWV3KSAqIHFtYXQoZ2V0X3JvdGF0aW9ucygpKSAqIHRyYW5zOwoKICAgIC8vIENvbXB1dGUgY2VudHJlIG9mIGJpbGxib2FyZCBpbiBjbGlwcGluZyBjb29yZGluYXRlcwogICAgdmVjNCBzcHJpdGVfY2VudGVyID0gdHJhbnMgKiB2ZWM0KHNwcml0ZV9iYm94X2NlbnRyZSwgMCwgMCk7CiAgICB2ZWM0IGRhdGFfcG9pbnQgPSBnZXRfcHJlcHJvamVjdGlvbigpICogbW9kZWwgKiB2ZWM0KHRvdmVjMyhnZXRfcG9zKCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSB2ZWM0KGRhdGFfcG9pbnQueHl6IC8gZGF0YV9wb2ludC53ICsgbWF0Myhtb2RlbCkgKiB0b3ZlYzMoZ2V0X21hcmtlcl9vZmZzZXQoKSksIDEpOwogICAgZGF0YV9wb2ludCA9IHB2aWV3ICogZGF0YV9wb2ludDsKICAgIHZlYzQgdmNsaXAgPSBkYXRhX3BvaW50ICsgc3ByaXRlX2NlbnRlcjsKCiAgICAvLyBFeHRyYSBidWZmZXJpbmcgaXMgcmVxdWlyZWQgYXJvdW5kIHNwcml0ZXMgd2hpY2ggYXJlIGFudGlhbGlhc2VkIHNvIHRoYXQKICAgIC8vIHRoZSBhbnRpYWxpYXMgYmx1ciBkb2Vzbid0IGdldCBjdXQgb2ZmIChzZWUgIzE1KS4gVGhpcyBibHVyIGZhbGxzIHRvCiAgICAvLyB6ZXJvIGF0IGEgcmFkaXVzIG9mIEFOVElBTElBU19SQURJVVMgcGl4ZWxzIGluIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlcwogICAgLy8gYW5kIHdlIHdhbnQgdG8gYnVmZmVyIHRoZSB2ZXJ0aWNlcyBpbiB0aGUgKnNvdXJjZSogc3ByaXRlIGNvb3JkaW5hdGUKICAgIC8vIHN5c3RlbSBzbyB0aGF0IHdlIGdldCB0aGlzIGFtb3VudCBpbiB0aGUgb3V0cHV0IGNvb3JkaW5hdGVzLgogICAgLy8KICAgIC8vIEhlcmUgd2UgY2FsY3VsYXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBtYXBwaW5nIGZyb20gc3ByaXRlIHh5CiAgICAvLyBjb29yZGluYXRlcyAoZGVmaW5lZCBieSBgdHJhbnNgKSBpbnRvIHRoZSB2aWV3cG9ydCBwaXhlbCBjb29yZGluYXRlcy4KICAgIC8vIFRoZSBkZXJpdmF0aXZlIG5lZWRzIHRvIGluY2x1ZGUgdGhlIHByb3BlciB0ZXJtIGZvciB0aGUgcGVyc3BlY3RpdmUKICAgIC8vIGRpdmlkZSBpbnRvIE5EQywgZXZhbHVhdGVkIGF0IHRoZSBjZW50cmUgcG9pbnQgYHZjbGlwYC4KICAgIG1hdDQgZF9uZGNfZF9jbGlwID0gbWF0NCgKICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwgICAgICAgICAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwKICAgICAgICAtdmNsaXAueHl6Lyh2Y2xpcC53KnZjbGlwLncpLCAgICAgICAgICAwLjAKICAgICk7CiAgICBtYXQyIGR4eXZfZHh5cyA9IGRpYWdtKDAuNSAqIGdldF9yZXNvbHV0aW9uKCkpICogbWF0MihkX25kY19kX2NsaXAqdHJhbnMpOwogICAgLy8gTm93LCBvdXIgYnVmZmVyIHNpemUgaXMgZXhwcmVzc2VkIGluIHZpZXdwb3J0IHBpeGVscyBidXQgd2UgZ2V0IGJhY2sgdG8KICAgIC8vIHRoZSBzcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gdXNpbmcgdGhlIHNjYWxlIGZhY3RvciBvZiB0aGUKICAgIC8vIHRyYW5zZm9ybWF0aW9uIChmb3IgaXNvdHJvcGljIHRyYW5zZm9ybWF0aW9ucykuIEZvciBhbmlzb3Ryb3BpYwogICAgLy8gdHJhbnNmb3JtYXRpb25zLCB0aGUgZ2VvbWV0cmljIG1lYW4gb2YgdGhlIHR3byBwcmluY2lwbGUgc2NhbGUgZmFjdG9ycwogICAgLy8gaXMgYSByZWFzb25hYmxlIGNvbXByb21pc2U6CiAgICBmbG9hdCB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSA9IHNxcnQoYWJzKF9kZXRlcm1pbmFudChkeHl2X2R4eXMpKSk7CgogICAgLy8gSW4gdGhlIGZyYWdtZW50IHNoYWRlciB3ZSB3YW50IG91ciBzaWduZWQgZGlzdGFuY2UgaW4gdmlld3BvcnQgKHBpeGVsKQogICAgLy8gY29vcmRzIGZvciBkaXJlY3QgdXNlIGluIGFudGlhbGlhc2luZyBzdGVwIGZ1bmN0aW9ucy4gV2UgdGhlcmVmb3JlIG5lZWQKICAgIC8vIGEgc2NhbGluZyBmYWN0b3Igc2ltaWxhciB0byB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSwgYnV0IGluY2x1ZGluZwogICAgLy8gdGhlIHV2LT5zcHJpdGUgY29vcmRpbmF0ZSBzeXN0ZW0gc2NhbGluZyBmYWN0b3IgYXMgd2VsbC4gIFdlIGNob29zZSB0bwogICAgLy8gdXNlIHRoZSBib3VuZGluZyBib3ggKngqIHdpZHRoIGZvciB0aGlzLiBUaGlzIGNvbWVzIHdpdGggc29tZQogICAgLy8gY29uc2lzdGVuY3kgY29uZGl0aW9uczoKICAgIC8vICogRm9yIHByb2NlZHVyYWwgZGlzdGFuY2UgZmllbGRzLCB3ZSBuZWVkIHRoZSBzcHJpdGUgYm91bmRpbmcgYm94IHRvIGJlCiAgICAvLyAgIHNxdWFyZS4gKElmIG5vdCwgdGhlIHV2IGNvb3JkaW5hdGVzIHdpbGwgYmUgYW5pc290cm9waWNhbGx5IHNjYWxlZCBhbmQKICAgIC8vICAgYW55IGNhbGN1bGF0aW9uIGJhc2VkIG9uIHRoZW0gd2lsbCBub3QgYmUgYSBkaXN0YW5jZSBmdW5jdGlvbi4pCiAgICAvLyAqIEZvciBzYW1wbGVkIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0byBjb25zaXN0ZW50bHkgY2hvb3NlIHRoZSAqeCoKICAgIC8vICAgZm9yIHRoZSBzY2FsaW5nIGluIGdldF9kaXN0YW5jZWZpZWxkX3NjYWxlKCkuCiAgICBmbG9hdCBzcHJpdGVfZnJvbV91X3NjYWxlID0gYWJzKGdldF9tYXJrZXJzaXplKCkueCk7CiAgICBmcmFnX3V2c2NhbGUgPSB2aWV3cG9ydF9mcm9tX3Nwcml0ZV9zY2FsZSAqIHNwcml0ZV9mcm9tX3Vfc2NhbGU7CiAgICBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGUgPSBkaXN0YW5jZWZpZWxkX3NjYWxlKCk7CiAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcigpKTsKICAgIGZyYWdfdXYgPSBnZXRfdXYoKTsKICAgIGZyYWdfdXZfb2Zmc2V0X3dpZHRoID0gZ2V0X3V2X29mZnNldF93aWR0aCgpOwogICAgLy8gc2NyZWVuIHNwYWNlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb3NpdGlvbgogICAgdmVjNCBxdWFkX3ZlcnRleCA9ICh0cmFucyAqIHZlYzQoMi4wICogYmJveF9zaWduZWRfcmFkaXVzICogZ2V0X3Bvc2l0aW9uKCksIDAuMCwgMC4wKSk7CiAgICBnbF9Qb3NpdGlvbiA9IHZjbGlwICsgcXVhZF92ZXJ0ZXg7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKfQoKr2ZyYWdtZW50X3NvdXJjZdoSiCN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CnVuaWZvcm0gaW50IHNoYXBlX3R5cGU7CmludCBnZXRfc2hhcGVfdHlwZSgpe3JldHVybiBzaGFwZV90eXBlO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCmluIHZlYzQgZnJhZ19jb2xvcjsKaW4gdmVjMiBmcmFnX3V2OwoKI2RlZmluZSBDSVJDTEUgICAgICAgICAgICAwCiNkZWZpbmUgUkVDVEFOR0xFICAgICAgICAgMQojZGVmaW5lIFJPVU5ERURfUkVDVEFOR0xFIDIKI2RlZmluZSBESVNUQU5DRUZJRUxEICAgICAzCiNkZWZpbmUgVFJJQU5HTEUgICAgICAgICAgNAoKI2RlZmluZSBNX1NRUlRfMiAgICAgICAgICAxLjQxNDIxMzUKCgovLyBIYWxmIHdpZHRoIG9mIGFudGlhbGlhc2luZyBzbW9vdGhzdGVwCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9CgppbiBmbG9hdCBmcmFnX3V2c2NhbGU7CmluIGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKaW4gdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHMuIENvbnZlcnQgdG8gc2FtZSBkaXN0YW5jZQogICAgLy8gc2NhbGluZyBhcyBmX3V2LnggZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlIHByb2NlZHVyYWwgc2lnbmVkX2Rpc3RhbmNlCiAgICAvLyBjYWxjdWxhdGlvbnMuCiAgICByZXR1cm4gZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlICogdGV4dHVyZShkaXN0YW5jZWZpZWxkLCB1dikucjsKfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoYm9vbCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIHJldHVybiAwLjA7Cn0KCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CgogICAgaW50IHNoYXBlID0gZ2V0X3NoYXBlX3R5cGUoKTsKICAgIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSA9IDAuMDsKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKICAgIGlmKHNoYXBlID09IENJUkNMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBjaXJjbGUoZnJhZ191dik7CiAgICBlbHNlIGlmKHNoYXBlID09IERJU1RBTkNFRklFTEQpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gc2NhbGVkX2Rpc3RhbmNlZmllbGQoZGlzdGFuY2VmaWVsZCwgdGV4X3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUk9VTkRFRF9SRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gcm91bmRlZF9yZWN0YW5nbGUoZnJhZ191diwgdmVjMigwLjIpLCB2ZWMyKDAuOCkpOwogICAgZWxzZSBpZihzaGFwZSA9PSBSRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gMS4wOyAvLyByZWN0YW5nbGUoZl91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFRSSUFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHRyaWFuZ2xlKGZyYWdfdXYpOwoKICAgIHNpZ25lZF9kaXN0YW5jZSAqPSBmcmFnX3V2c2NhbGU7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoMC4wLCBzaWduZWRfZGlzdGFuY2UpOwogICAgdmVjNCBmaW5hbF9jb2xvciA9IHZlYzQoZnJhZ19jb2xvci54eXosIDApOwogICAgZmlsbChpbWFnZSwgZnJhZ19jb2xvciwgZnJhZ191diwgaW5zaWRlLCBmaW5hbF9jb2xvcik7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmaW5hbF9jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4ercXVhZF9vZmZzZXSCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXqm1hcmtlcnNpemWCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXrW1hcmtlcl9vZmZzZXSCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXpWNvbG9ygqt0eXBlX2xlbmd0aASkZmxhdMcAF691dl9vZmZzZXRfd2lkdGiCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXo3Bvc4KrdHlwZV9sZW5ndGgDpGZsYXTHABepcm90YXRpb25zgqt0eXBlX2xlbmd0aASkZmxhdMcAF4+sdHJhbnNwYXJlbmN5xxRoszc4MTY2NDkwOTg0NDAzMzE4MTWlc3BhY2XHFWi0MTMwMTA3MjcxNTQ4NTM2MDQ2MDisdmVydGV4YXJyYXlzgqJ1doKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKhwb3NpdGlvboKrdHlwZV9sZW5ndGgCpGZsYXTHIBcAAAAAAACAvwAAAAAAAIA/AACAPwAAgL8AAIA/AACAP6RuYW1l2SBsaW5lc2VnbWVudHMtODkyNTM4NDk2NzI2MjQ0ODE0N6ljYW1fc3BhY2WlcGl4ZWyodW5pZm9ybXOHp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZEpW1vZGVsx0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6tkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+pb2JqZWN0X2lkAKdhbWJpZW50xwwXzcwMP83MDD/NzAw/p3Zpc2libGXHFGizOTE0MTI5NjM4NDEzOTIwMDk5NbFhdHRyaWJ1dGVfdXBkYXRlcscVaLQxNDI0OTIxOTM0ODUyNDMyMjk2OahvdmVyZHJhd8cUaLM2OTcyMjA4Mzk2Nzk1MjIyNTk5r3VuaWZvcm1fdXBkYXRlcscUaLMzMzY2NzQ5MzM3NjMyNDczMzUzpWZhY2VzxxVotDEzMDk1NTE2ODg3MzI5MzI0MTM2pHV1aWSzODkyNTM4NDk2NzI2MjQ0ODE0N612ZXJ0ZXhfc291cmNl2gnlI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIGZsb2F0IGxpbmV3aWR0aF9zdGFydDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9zdGFydCgpe3JldHVybiBsaW5ld2lkdGhfc3RhcnQ7fQppbiB2ZWM0IGNvbG9yX2VuZDsKdmVjNCBnZXRfY29sb3JfZW5kKCl7cmV0dXJuIGNvbG9yX2VuZDt9CmluIGZsb2F0IGxpbmV3aWR0aF9lbmQ7CmZsb2F0IGdldF9saW5ld2lkdGhfZW5kKCl7cmV0dXJuIGxpbmV3aWR0aF9lbmQ7fQppbiB2ZWMyIHNlZ21lbnRfc3RhcnQ7CnZlYzIgZ2V0X3NlZ21lbnRfc3RhcnQoKXtyZXR1cm4gc2VnbWVudF9zdGFydDt9CmluIHZlYzQgY29sb3Jfc3RhcnQ7CnZlYzQgZ2V0X2NvbG9yX3N0YXJ0KCl7cmV0dXJuIGNvbG9yX3N0YXJ0O30KaW4gdmVjMiBzZWdtZW50X2VuZDsKdmVjMiBnZXRfc2VnbWVudF9lbmQoKXtyZXR1cm4gc2VnbWVudF9lbmQ7fQoKdW5pZm9ybSBtYXQ0IHByb2plY3Rpb247CnVuaWZvcm0gbWF0NCB2aWV3OwoKdmVjMiBzY3JlZW5fc3BhY2UodmVjNCBwb3NpdGlvbikKewogICAgcmV0dXJuIHZlYzIocG9zaXRpb24ueHkgLyBwb3NpdGlvbi53KSAqIGdldF9yZXNvbHV0aW9uKCk7Cn0KdmVjMyB0b3ZlYzModmVjMiB2KXtyZXR1cm4gdmVjMyh2LCAwLjApO30KdmVjMyB0b3ZlYzModmVjMyB2KXtyZXR1cm4gdjt9Cgp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCm91dCB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKQp7CiAgICBtYXQ0IHB2bSA9IHByb2plY3Rpb24gKiB2aWV3ICogZ2V0X21vZGVsKCk7CiAgICB2ZWM0IHBvaW50MV9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfc3RhcnQoKSksIDEpOwogICAgdmVjNCBwb2ludDJfY2xpcCA9IHB2bSAqIHZlYzQodG92ZWMzKGdldF9zZWdtZW50X2VuZCgpKSwgMSk7CiAgICB2ZWMyIHBvaW50MV9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQxX2NsaXApOwogICAgdmVjMiBwb2ludDJfc2NyZWVuID0gc2NyZWVuX3NwYWNlKHBvaW50Ml9jbGlwKTsKICAgIHZlYzIgZGlyID0gbm9ybWFsaXplKHBvaW50Ml9zY3JlZW4gLSBwb2ludDFfc2NyZWVuKTsKICAgIHZlYzIgbm9ybWFsID0gdmVjMigtZGlyLnksIGRpci54KTsKICAgIHZlYzQgYW5jaG9yOwogICAgZmxvYXQgdGhpY2tuZXNzOwoKICAgIGlmKHBvc2l0aW9uLnggPT0gMC4wKXsKICAgICAgICBhbmNob3IgPSBwb2ludDFfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9zdGFydCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX3N0YXJ0KCk7CiAgICB9ZWxzZXsKICAgICAgICBhbmNob3IgPSBwb2ludDJfY2xpcDsKICAgICAgICBmcmFnX2NvbG9yID0gdG92ZWM0KGdldF9jb2xvcl9lbmQoKSk7CiAgICAgICAgdGhpY2tuZXNzID0gZ2V0X2xpbmV3aWR0aF9lbmQoKTsKICAgIH0KICAgIGZyYWdfY29sb3IuYSA9IGZyYWdfY29sb3IuYSAqIG1pbigxLjAsIHRoaWNrbmVzcyAqIDIuMCk7CgogICAgbm9ybWFsICo9ICh0aGlja25lc3MgLyBnZXRfcmVzb2x1dGlvbigpKSAqIGFuY2hvci53OwogICAgLy8gcXVhZHBvcyB5IChwb3NpdGlvbi55KSBnaXZlcyB1cyB0aGUgZGlyZWN0aW9uIHRvIGV4cGFuZCB0aGUgbGluZQogICAgdmVjNCBvZmZzZXQgPSB2ZWM0KG5vcm1hbCAqIHBvc2l0aW9uLnksIDAuMCwgMC4wKTsKICAgIC8vIHN0YXJ0LCBvciBlbmQgb2YgcXVhZCwgbmVlZCB0byB1c2UgY3VycmVudCBvciBuZXh0IHBvaW50IGFzIGFuY2hvcgogICAgZ2xfUG9zaXRpb24gPSBhbmNob3IgKyBvZmZzZXQ7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9JbnN0YW5jZUlEKTsKCn0KCq9mcmFnbWVudF9zb3VyY2XaBEQjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIHBpY2tpbmc7CmJvb2wgZ2V0X3BpY2tpbmcoKXtyZXR1cm4gcGlja2luZzt9CgoKaW4gdmVjNCBmcmFnX2NvbG9yOwoKZmxhdCBpbiB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7CnZlYzQgcGFja19pbnQodWludCBpZCwgdWludCBpbmRleCkgewogICAgdmVjNCB1bnBhY2s7CiAgICB1bnBhY2sueCA9IGZsb2F0KChpZCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay55ID0gZmxvYXQoKGlkICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgdW5wYWNrLnogPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sudyA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHJldHVybiB1bnBhY2s7Cn0KCnZvaWQgbWFpbigpIHsKICAgIGlmIChwaWNraW5nKSB7CiAgICAgICAgaWYgKGZyYWdfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZnJhZ19jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZnJhZ19jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4apY29sb3JfZW5kgqt0eXBlX2xlbmd0aASkZmxhdMcAF61saW5ld2lkdGhfZW5kgqt0eXBlX2xlbmd0aAGkZmxhdMcAF6tjb2xvcl9zdGFydIKrdHlwZV9sZW5ndGgEpGZsYXTHABerc2VnbWVudF9lbmSCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXrXNlZ21lbnRfc3RhcnSCq3R5cGVfbGVuZ3RoAqRmbGF0xwAXr2xpbmV3aWR0aF9zdGFydIKrdHlwZV9sZW5ndGgBpGZsYXTHABfeABCsdHJhbnNwYXJlbmN5xxRoszYxMjM1NzkwNzk4MjYzNjA3ODelc3BhY2XHFGizNDIxNzc0MjcyMjc5NDc0MDg2MKx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/pG5hbWW4dGV4dC04NjU3NDA3ODgzOTY4NzE4MzkxqWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1zjqVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+pYmlsbGJvYXJkwq1wcmVwcm9qZWN0aW9ux0AXAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP6dhbWJpZW50xwwXzcwMP83MDD/NzAw/rWRpc3RhbmNlZmllbGSKqW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKqYW5pc290cm9wecpBgAAAqW1hZ0ZpbHRlcqxMaW5lYXJGaWx0ZXKld3JhcFOuUmVwZWF0V3JhcHBpbmekZGF0Ya10ZXh0dXJlX2F0bGFzrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZZLNBADNBACld3JhcFSuUmVwZWF0V3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwAASEQAABZEpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLDq2RlcHRoX3NoaWZ0ygAAAACtbGlnaHRwb3NpdGlvbscMFwAAgD8AAIA/AACAP6d2aXNpYmxlxxVotDE3NjEyNzM5Mzc3OTExNTY5OTU1q21hcmtlcnNwYWNlxxRoszM2Mzc5MTg0NDYwNDAyOTg0MDmxYXR0cmlidXRlX3VwZGF0ZXLHE2iyNDY1NjE5NDA4MTA4ODUxMjg0qG92ZXJkcmF3xxVotDE2MDk0Mjk3NTI4NDM0ODUyOTg1r3VuaWZvcm1fdXBkYXRlcscUaLM1NjE4MDc5OTc4NzI4ODQxMjI1pWZhY2VzxxVotDEzNDIxMjc5ODQ2ODEzODMyODMxpHV1aWSzODY1NzQwNzg4Mzk2ODcxODM5Ma12ZXJ0ZXhfc291cmNl2hpNI3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGludDsKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIyRDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjNEOwovLyBJbnN0YW5jZSBpbnB1dHM6IAppbiB2ZWMyIHBvc2l0aW9uOwp2ZWMyIGdldF9wb3NpdGlvbigpe3JldHVybiBwb3NpdGlvbjt9CmluIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KaW4gdmVjNCByb3RhdGlvbnM7CnZlYzQgZ2V0X3JvdGF0aW9ucygpe3JldHVybiByb3RhdGlvbnM7fQppbiB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CmluIHZlYzMgcG9zOwp2ZWMzIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KaW4gdmVjMiBxdWFkX29mZnNldDsKdmVjMiBnZXRfcXVhZF9vZmZzZXQoKXtyZXR1cm4gcXVhZF9vZmZzZXQ7fQppbiB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CmluIHZlYzMgbWFya2VyX29mZnNldDsKdmVjMyBnZXRfbWFya2VyX29mZnNldCgpe3JldHVybiBtYXJrZXJfb2Zmc2V0O30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKXsKICAgIHZlYzIgYmJveF9zaWduZWRfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsgLy8gbm90ZTsgY29tcG9uZW50cyBtYXkgYmUgbmVnYXRpdmUuCiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9zaWduZWRfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIC8vIENvbXB1dGUgdHJhbnNmb3JtIGZvciB0aGUgb2Zmc2V0IHZlY3RvcnMgZnJvbSB0aGUgY2VudHJhbCBwb2ludAogICAgbWF0NCB0cmFucyA9IGdldF90cmFuc2Zvcm1fbWFya2VyKCkgPyBtb2RlbCA6IG1hdDQoMS4wKTsKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKCiAgICAvLyBDb21wdXRlIGNlbnRyZSBvZiBiaWxsYm9hcmQgaW4gY2xpcHBpbmcgY29vcmRpbmF0ZXMKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDMobW9kZWwpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBnZXRfcmVzb2x1dGlvbigpKSAqIG1hdDIoZF9uZGNfZF9jbGlwKnRyYW5zKTsKICAgIC8vIE5vdywgb3VyIGJ1ZmZlciBzaXplIGlzIGV4cHJlc3NlZCBpbiB2aWV3cG9ydCBwaXhlbHMgYnV0IHdlIGdldCBiYWNrIHRvCiAgICAvLyB0aGUgc3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHVzaW5nIHRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlCiAgICAvLyB0cmFuc2Zvcm1hdGlvbiAoZm9yIGlzb3Ryb3BpYyB0cmFuc2Zvcm1hdGlvbnMpLiBGb3IgYW5pc290cm9waWMKICAgIC8vIHRyYW5zZm9ybWF0aW9ucywgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB0d28gcHJpbmNpcGxlIHNjYWxlIGZhY3RvcnMKICAgIC8vIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlOgogICAgZmxvYXQgdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgPSBzcXJ0KGFicyhfZGV0ZXJtaW5hbnQoZHh5dl9keHlzKSkpOwoKICAgIC8vIEluIHRoZSBmcmFnbWVudCBzaGFkZXIgd2Ugd2FudCBvdXIgc2lnbmVkIGRpc3RhbmNlIGluIHZpZXdwb3J0IChwaXhlbCkKICAgIC8vIGNvb3JkcyBmb3IgZGlyZWN0IHVzZSBpbiBhbnRpYWxpYXNpbmcgc3RlcCBmdW5jdGlvbnMuIFdlIHRoZXJlZm9yZSBuZWVkCiAgICAvLyBhIHNjYWxpbmcgZmFjdG9yIHNpbWlsYXIgdG8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUsIGJ1dCBpbmNsdWRpbmcKICAgIC8vIHRoZSB1di0+c3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHNjYWxpbmcgZmFjdG9yIGFzIHdlbGwuICBXZSBjaG9vc2UgdG8KICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94ICp4KiB3aWR0aCBmb3IgdGhpcy4gVGhpcyBjb21lcyB3aXRoIHNvbWUKICAgIC8vIGNvbnNpc3RlbmN5IGNvbmRpdGlvbnM6CiAgICAvLyAqIEZvciBwcm9jZWR1cmFsIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0aGUgc3ByaXRlIGJvdW5kaW5nIGJveCB0byBiZQogICAgLy8gICBzcXVhcmUuIChJZiBub3QsIHRoZSB1diBjb29yZGluYXRlcyB3aWxsIGJlIGFuaXNvdHJvcGljYWxseSBzY2FsZWQgYW5kCiAgICAvLyAgIGFueSBjYWxjdWxhdGlvbiBiYXNlZCBvbiB0aGVtIHdpbGwgbm90IGJlIGEgZGlzdGFuY2UgZnVuY3Rpb24uKQogICAgLy8gKiBGb3Igc2FtcGxlZCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdG8gY29uc2lzdGVudGx5IGNob29zZSB0aGUgKngqCiAgICAvLyAgIGZvciB0aGUgc2NhbGluZyBpbiBnZXRfZGlzdGFuY2VmaWVsZF9zY2FsZSgpLgogICAgZmxvYXQgc3ByaXRlX2Zyb21fdV9zY2FsZSA9IGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpOwogICAgZnJhZ191dnNjYWxlID0gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgKiBzcHJpdGVfZnJvbV91X3NjYWxlOwogICAgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlID0gZGlzdGFuY2VmaWVsZF9zY2FsZSgpOwogICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3IoKSk7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2X29mZnNldF93aWR0aCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIC8vIHNjcmVlbiBzcGFjZSBjb29yZGluYXRlcyBvZiB0aGUgcG9zaXRpb24KICAgIHZlYzQgcXVhZF92ZXJ0ZXggPSAodHJhbnMgKiB2ZWM0KDIuMCAqIGJib3hfc2lnbmVkX3JhZGl1cyAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaEogjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RhbmNlZmllbGQ7CnVuaWZvcm0gYm9vbCBpbWFnZTsKYm9vbCBnZXRfaW1hZ2UoKXtyZXR1cm4gaW1hZ2U7fQp1bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjsKdmVjMiBnZXRfcmVzb2x1dGlvbigpe3JldHVybiByZXNvbHV0aW9uO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gYm9vbCBiaWxsYm9hcmQ7CmJvb2wgZ2V0X2JpbGxib2FyZCgpe3JldHVybiBiaWxsYm9hcmQ7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgppbiB2ZWM0IGZyYWdfY29sb3I7CmluIHZlYzIgZnJhZ191djsKCiNkZWZpbmUgQ0lSQ0xFICAgICAgICAgICAgMAojZGVmaW5lIFJFQ1RBTkdMRSAgICAgICAgIDEKI2RlZmluZSBST1VOREVEX1JFQ1RBTkdMRSAyCiNkZWZpbmUgRElTVEFOQ0VGSUVMRCAgICAgMwojZGVmaW5lIFRSSUFOR0xFICAgICAgICAgIDQKCiNkZWZpbmUgTV9TUVJUXzIgICAgICAgICAgMS40MTQyMTM1CgoKLy8gSGFsZiB3aWR0aCBvZiBhbnRpYWxpYXNpbmcgc21vb3Roc3RlcAojZGVmaW5lIEFOVElBTElBU19SQURJVVMgMC44Ci8vIFRoZXNlIHZlcnNpb25zIG9mIGFhc3RlcCBhc3N1bWUgdGhhdCBgZGlzdGAgaXMgYSBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24KLy8gd2hpY2ggaGFzIGJlZW4gc2NhbGVkIHRvIGJlIGluIHVuaXRzIG9mIHBpeGVscy4KZmxvYXQgYWFzdGVwKGZsb2F0IHRocmVzaG9sZDEsIGZsb2F0IGRpc3QpIHsKICAgIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZDEtQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMSArIEFOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgdGhyZXNob2xkMiwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxK0FOVElBTElBU19SQURJVVMsIGRpc3QpIC0KICAgICAgICAgICBzbW9vdGhzdGVwKHRocmVzaG9sZDItQU5USUFMSUFTX1JBRElVUywgdGhyZXNob2xkMitBTlRJQUxJQVNfUkFESVVTLCBkaXN0KTsKfQoKLy8gUHJvY2VkdXJhbCBzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb25zIG9uIHRoZSB1diBjb29yZGluYXRlIHBhdGNoIFswLDFdeFswLDFdCi8vIE5vdGUgdGhhdCBmb3IgYW50aWFsaWFzaW5nIHRvIHdvcmsgcHJvcGVybHkgdGhlc2Ugc2hvdWxkIGJlICpzY2FsZSBwcmVzZXJ2aW5nKgovLyAoSWYgeW91IG11c3QgcmVzY2FsZSB1diwgbWFrZSBzdXJlIHRvIHB1dCB0aGUgc2NhbGUgZmFjdG9yIGJhY2sgaW4gbGF0ZXIuKQpmbG9hdCB0cmlhbmdsZSh2ZWMyIFApewogICAgUCAtPSB2ZWMyKDAuNSk7CiAgICBmbG9hdCB4ID0gTV9TUVJUXzIgKiAoUC54IC0gUC55KTsKICAgIGZsb2F0IHkgPSBNX1NRUlRfMiAqIChQLnggKyBQLnkpOwogICAgZmxvYXQgcjEgPSBtYXgoYWJzKHgpLCBhYnMoeSkpIC0gMS4wLygyLjAqTV9TUVJUXzIpOwogICAgZmxvYXQgcjIgPSBQLnk7CiAgICByZXR1cm4gLW1heChyMSxyMik7Cn0KCmZsb2F0IGNpcmNsZSh2ZWMyIHV2KXsKICAgIHJldHVybiAwLjUtbGVuZ3RoKHV2LXZlYzIoMC41KSk7Cn0KCmZsb2F0IHJlY3RhbmdsZSh2ZWMyIHV2KXsKICAgIHZlYzIgZCA9IG1heCgtdXYsIHV2LXZlYzIoMSkpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSkpOwp9CgpmbG9hdCByb3VuZGVkX3JlY3RhbmdsZSh2ZWMyIHV2LCB2ZWMyIHRsLCB2ZWMyIGJyKXsKICAgIHZlYzIgZCA9IG1heCh0bC11diwgdXYtYnIpOwogICAgcmV0dXJuIC0oKGxlbmd0aChtYXgodmVjMigwLjApLCBkKSkgKyBtaW4oMC4wLCBtYXgoZC54LCBkLnkpKSktdGwueCk7Cn0KCnZvaWQgZmlsbChib29sIGltYWdlLCB2ZWM0IGZpbGxjb2xvciwgdmVjMiB1diwgZmxvYXQgaW5maWxsLCBpbm91dCB2ZWM0IGNvbG9yKXsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBmaWxsY29sb3IsIGluZmlsbCk7Cn0KCnZvaWQgZmlsbChzYW1wbGVyMkQgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgdmVjNCBpbV9jb2xvciA9IHRleHR1cmUoaW1hZ2UsIHV2Lnl4KTsKICAgIGNvbG9yID0gbWl4KGNvbG9yLCBpbV9jb2xvciwgaW5maWxsKTsKfQoKaW4gZmxvYXQgZnJhZ191dnNjYWxlOwppbiBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7CmluIHZlYzQgZnJhZ191dl9vZmZzZXRfd2lkdGg7CgpmbG9hdCBzY2FsZWRfZGlzdGFuY2VmaWVsZChzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzLiBDb252ZXJ0IHRvIHNhbWUgZGlzdGFuY2UKICAgIC8vIHNjYWxpbmcgYXMgZl91di54IGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBwcm9jZWR1cmFsIHNpZ25lZF9kaXN0YW5jZQogICAgLy8gY2FsY3VsYXRpb25zLgogICAgcmV0dXJuIGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZSAqIHRleHR1cmUoZGlzdGFuY2VmaWVsZCwgdXYpLnI7Cn0KCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGJvb2wgZGlzdGFuY2VmaWVsZCwgdmVjMiB1dil7CiAgICByZXR1cm4gMC4wOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewoKICAgIGludCBzaGFwZSA9IGdldF9zaGFwZV90eXBlKCk7CiAgICBmbG9hdCBzaWduZWRfZGlzdGFuY2UgPSAwLjA7CiAgICB2ZWM0IHV2X29mZiA9IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwogICAgdmVjMiB0ZXhfdXYgPSBtaXgodXZfb2ZmLnh5LCB1dl9vZmYuencsIGNsYW1wKGZyYWdfdXYsIDAuMCwgMS4wKSk7CiAgICBpZihzaGFwZSA9PSBDSVJDTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gY2lyY2xlKGZyYWdfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBESVNUQU5DRUZJRUxEKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHNjYWxlZF9kaXN0YW5jZWZpZWxkKGRpc3RhbmNlZmllbGQsIHRleF91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFJPVU5ERURfUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHJvdW5kZWRfcmVjdGFuZ2xlKGZyYWdfdXYsIHZlYzIoMC4yKSwgdmVjMigwLjgpKTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUkVDVEFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IDEuMDsgLy8gcmVjdGFuZ2xlKGZfdXYpOwogICAgZWxzZSBpZihzaGFwZSA9PSBUUklBTkdMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSB0cmlhbmdsZShmcmFnX3V2KTsKCiAgICBzaWduZWRfZGlzdGFuY2UgKj0gZnJhZ191dnNjYWxlOwogICAgZmxvYXQgaW5zaWRlID0gYWFzdGVwKDAuMCwgc2lnbmVkX2Rpc3RhbmNlKTsKICAgIHZlYzQgZmluYWxfY29sb3IgPSB2ZWM0KGZyYWdfY29sb3IueHl6LCAwKTsKICAgIGZpbGwoaW1hZ2UsIGZyYWdfY29sb3IsIGZyYWdfdXYsIGluc2lkZSwgZmluYWxfY29sb3IpOwogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZmluYWxfY29sb3IuYSA+IDAuMSkgewogICAgICAgICAgICBmcmFnbWVudF9jb2xvciA9IHBhY2tfaW50KG9iamVjdF9pZCwgZnJhZ19pbnN0YW5jZV9pZCk7CiAgICAgICAgfQogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChmaW5hbF9jb2xvci5hIDw9IDAuMCl7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGZyYWdtZW50X2NvbG9yID0gZmluYWxfY29sb3I7Cn0Ks2luc3RhbmNlX2F0dHJpYnV0ZXOHq3F1YWRfb2Zmc2V0gqt0eXBlX2xlbmd0aAKkZmxhdMcAF6ptYXJrZXJzaXplgqt0eXBlX2xlbmd0aAKkZmxhdMcAF61tYXJrZXJfb2Zmc2V0gqt0eXBlX2xlbmd0aAOkZmxhdMcAF6Vjb2xvcoKrdHlwZV9sZW5ndGgEpGZsYXTHABevdXZfb2Zmc2V0X3dpZHRogqt0eXBlX2xlbmd0aASkZmxhdMcAF6Nwb3OCq3R5cGVfbGVuZ3RoA6RmbGF0xwAXqXJvdGF0aW9uc4KrdHlwZV9sZW5ndGgEpGZsYXTHABePrHRyYW5zcGFyZW5jeccUaLM3NjcwNDUyNjM3ODYwMzQxMzM1pXNwYWNlxxVotDE3MzQ5ODkzOTA5NzczODMwODIwrHZlcnRleGFycmF5c4KidXaCq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACocG9zaXRpb26Cq3R5cGVfbGVuZ3RoAqRmbGF0xyAXAAAAAAAAgL8AAAAAAACAPwAAgD8AAIC/AACAPwAAgD+kbmFtZdkgbGluZXNlZ21lbnRzLTUyOTA4MjYzMTYwMTQ3NjMwNzOpY2FtX3NwYWNlpXBpeGVsqHVuaWZvcm1zh6dwaWNraW5nwqpyZXNvbHV0aW9u1xcAAEhEAAAWRKVtb2RlbMdAFwAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD+rZGVwdGhfc2hpZnTKAAAAAK1saWdodHBvc2l0aW9uxwwXAACAPwAAgD8AAIA/qW9iamVjdF9pZACnYW1iaWVudMcMF83MDD/NzAw/zcwMP6d2aXNpYmxlxxVotDE3MTA1NDA1MjMyNzk3Mzg1NjUysWF0dHJpYnV0ZV91cGRhdGVyxxVotDEwMjQ0MzEyMDk3OTExODM3ODM2qG92ZXJkcmF3xxRoszYxNDE1NTYxOTM3MzUyMjUxODWvdW5pZm9ybV91cGRhdGVyxxRoszM1MDQzOTAwNzUxNzQ4MjQ4MDClZmFjZXPHFWi0MTcxNTcyNzU1MTYyNTkzNDQ5NTmkdXVpZLM1MjkwODI2MzE2MDE0NzYzMDczrXZlcnRleF9zb3VyY2XaCeUjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzIgcG9zaXRpb247CnZlYzIgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KCgoKCi8vIFBlciBpbnN0YW5jZSBhdHRyaWJ1dGVzOiAKaW4gZmxvYXQgbGluZXdpZHRoX3N0YXJ0OwpmbG9hdCBnZXRfbGluZXdpZHRoX3N0YXJ0KCl7cmV0dXJuIGxpbmV3aWR0aF9zdGFydDt9CmluIHZlYzQgY29sb3JfZW5kOwp2ZWM0IGdldF9jb2xvcl9lbmQoKXtyZXR1cm4gY29sb3JfZW5kO30KaW4gZmxvYXQgbGluZXdpZHRoX2VuZDsKZmxvYXQgZ2V0X2xpbmV3aWR0aF9lbmQoKXtyZXR1cm4gbGluZXdpZHRoX2VuZDt9CmluIHZlYzIgc2VnbWVudF9zdGFydDsKdmVjMiBnZXRfc2VnbWVudF9zdGFydCgpe3JldHVybiBzZWdtZW50X3N0YXJ0O30KaW4gdmVjNCBjb2xvcl9zdGFydDsKdmVjNCBnZXRfY29sb3Jfc3RhcnQoKXtyZXR1cm4gY29sb3Jfc3RhcnQ7fQppbiB2ZWMyIHNlZ21lbnRfZW5kOwp2ZWMyIGdldF9zZWdtZW50X2VuZCgpe3JldHVybiBzZWdtZW50X2VuZDt9Cgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbjsKdW5pZm9ybSBtYXQ0IHZpZXc7Cgp2ZWMyIHNjcmVlbl9zcGFjZSh2ZWM0IHBvc2l0aW9uKQp7CiAgICByZXR1cm4gdmVjMihwb3NpdGlvbi54eSAvIHBvc2l0aW9uLncpICogZ2V0X3Jlc29sdXRpb24oKTsKfQp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCmZsYXQgb3V0IHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKCnZvaWQgbWFpbigpCnsKICAgIG1hdDQgcHZtID0gcHJvamVjdGlvbiAqIHZpZXcgKiBnZXRfbW9kZWwoKTsKICAgIHZlYzQgcG9pbnQxX2NsaXAgPSBwdm0gKiB2ZWM0KHRvdmVjMyhnZXRfc2VnbWVudF9zdGFydCgpKSwgMSk7CiAgICB2ZWM0IHBvaW50Ml9jbGlwID0gcHZtICogdmVjNCh0b3ZlYzMoZ2V0X3NlZ21lbnRfZW5kKCkpLCAxKTsKICAgIHZlYzIgcG9pbnQxX3NjcmVlbiA9IHNjcmVlbl9zcGFjZShwb2ludDFfY2xpcCk7CiAgICB2ZWMyIHBvaW50Ml9zY3JlZW4gPSBzY3JlZW5fc3BhY2UocG9pbnQyX2NsaXApOwogICAgdmVjMiBkaXIgPSBub3JtYWxpemUocG9pbnQyX3NjcmVlbiAtIHBvaW50MV9zY3JlZW4pOwogICAgdmVjMiBub3JtYWwgPSB2ZWMyKC1kaXIueSwgZGlyLngpOwogICAgdmVjNCBhbmNob3I7CiAgICBmbG9hdCB0aGlja25lc3M7CgogICAgaWYocG9zaXRpb24ueCA9PSAwLjApewogICAgICAgIGFuY2hvciA9IHBvaW50MV9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX3N0YXJ0KCkpOwogICAgICAgIHRoaWNrbmVzcyA9IGdldF9saW5ld2lkdGhfc3RhcnQoKTsKICAgIH1lbHNlewogICAgICAgIGFuY2hvciA9IHBvaW50Ml9jbGlwOwogICAgICAgIGZyYWdfY29sb3IgPSB0b3ZlYzQoZ2V0X2NvbG9yX2VuZCgpKTsKICAgICAgICB0aGlja25lc3MgPSBnZXRfbGluZXdpZHRoX2VuZCgpOwogICAgfQogICAgZnJhZ19jb2xvci5hID0gZnJhZ19jb2xvci5hICogbWluKDEuMCwgdGhpY2tuZXNzICogMi4wKTsKCiAgICBub3JtYWwgKj0gKHRoaWNrbmVzcyAvIGdldF9yZXNvbHV0aW9uKCkpICogYW5jaG9yLnc7CiAgICAvLyBxdWFkcG9zIHkgKHBvc2l0aW9uLnkpIGdpdmVzIHVzIHRoZSBkaXJlY3Rpb24gdG8gZXhwYW5kIHRoZSBsaW5lCiAgICB2ZWM0IG9mZnNldCA9IHZlYzQobm9ybWFsICogcG9zaXRpb24ueSwgMC4wLCAwLjApOwogICAgLy8gc3RhcnQsIG9yIGVuZCBvZiBxdWFkLCBuZWVkIHRvIHVzZSBjdXJyZW50IG9yIG5leHQgcG9pbnQgYXMgYW5jaG9yCiAgICBnbF9Qb3NpdGlvbiA9IGFuY2hvciArIG9mZnNldDsKICAgIGdsX1Bvc2l0aW9uLnogKz0gZ2xfUG9zaXRpb24udyAqIGdldF9kZXB0aF9zaGlmdCgpOwoKICAgIGZyYWdfaW5zdGFuY2VfaWQgPSB1aW50KGdsX0luc3RhbmNlSUQpOwoKfQoKr2ZyYWdtZW50X3NvdXJjZdoERCN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKCm91dCB2ZWM0IGZyYWdtZW50X2NvbG9yOwoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KCgppbiB2ZWM0IGZyYWdfY29sb3I7CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgaWYgKHBpY2tpbmcpIHsKICAgICAgICBpZiAoZnJhZ19jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChmcmFnX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmcmFnX2NvbG9yOwp9CrNpbnN0YW5jZV9hdHRyaWJ1dGVzhqljb2xvcl9lbmSCq3R5cGVfbGVuZ3RoBKRmbGF0xwAXrWxpbmV3aWR0aF9lbmSCq3R5cGVfbGVuZ3RoAaRmbGF0xwAXq2NvbG9yX3N0YXJ0gqt0eXBlX2xlbmd0aASkZmxhdMcAF6tzZWdtZW50X2VuZIKrdHlwZV9sZW5ndGgCpGZsYXTHABetc2VnbWVudF9zdGFydIKrdHlwZV9sZW5ndGgCpGZsYXTHABevbGluZXdpZHRoX3N0YXJ0gqt0eXBlX2xlbmd0aAGkZmxhdMcAF46sdHJhbnNwYXJlbmN5xxVotDE1MjExODM1ODk3MjIxNjM2OTQ2pXNwYWNlxxRoszE5NjQ5NTQ4NjM3MjA4ODM3NDasdmVydGV4YXJyYXlzgqdub3JtYWxzgqt0eXBlX2xlbmd0aAOkZmxhdMdgFwAAwP8AAMD/AADA/wAAAAAAAAAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAA//9/PwAAwP8AAMD/AADA/wAAAAAAAAAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAACAP6hwb3NpdGlvboKrdHlwZV9sZW5ndGgDpGZsYXTHYBcMABBCCAAwQgAAAAAAAERECAAwQgAAAAAAAEREAAASRAAAAAAMABBCAAASRAAAAAAMABBCCAAwQgAAAAAEAIxCCAAwQgAAAAAEAIxCSReJQgAAAAAMABBCSReJQgAAAACkbmFtZbltZXNoLTE1MzA4NTAxMTU4MDAyMDA0Mjg1qWNhbV9zcGFjZaRkYXRhqHVuaWZvcm1z3gAWvmludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcsOpYmFja2xpZ2h0ygAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAyEIAAIA/p2RpZmZ1c2XHDBfNzMw+zczMPs3MzD6qY29sb3JyYW5nZcOnbG93Y2xpcNgXAAAAAAAAAAAAAAAAAAAAAKhoaWdoY2xpcNgXAAAAAAAAAAAAAAAAAAAAAKdhbWJpZW50xwwXzcwMP83MDD/NzAw/qW5hbl9jb2xvctgXAAAAAAAAAAAAAAAAAAAAAKdwYXR0ZXJuwqxub3JtYWxtYXRyaXjHJBcAAIA/AAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAgD+idXbXFwAAAAAAAAAAp3NoYWRpbmfCqHNwZWN1bGFyxwwXzcxMPs3MTD7NzEw+p3BpY2tpbmfCqW9iamVjdF9pZACtdW5pZm9ybV9jb2xvctgXAAAAAAAAAAAAAAAAzcxMPqtkZXB0aF9zaGlmdMoAAAAArWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+lY29sb3LCqXNoaW5pbmVzc8pCAAAAqGNvbG9ybWFww6d2aXNpYmxlxxRoszEwNDkyMjg4MTM4NjE4NDc0NjexYXR0cmlidXRlX3VwZGF0ZXLHFGizNzMxODE1NzA1Mzk0NzI2NTMwNKhvdmVyZHJhd8cVaLQxMzQ0Njc2NTkxNDQxMzM4NjAzMK91bmlmb3JtX3VwZGF0ZXLHFWi0MTI2NzQzNjU1Mzg4MzQ5NjE2MjWlZmFjZXPHFGizOTI3NjYyMTQ0NDg3Mjc3NjQzN6R1dWlktDE1MzA4NTAxMTU4MDAyMDA0Mjg1rXZlcnRleF9zb3VyY2XaFCQjdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7Ci8vIEluc3RhbmNlIGlucHV0czogCmluIHZlYzMgcG9zaXRpb247CnZlYzMgZ2V0X3Bvc2l0aW9uKCl7cmV0dXJuIHBvc2l0aW9uO30KaW4gdmVjMyBub3JtYWxzOwp2ZWMzIGdldF9ub3JtYWxzKCl7cmV0dXJuIG5vcm1hbHM7fQoKLy8gVW5pZm9ybXM6IAp1bmlmb3JtIHVpbnQgb2JqZWN0X2lkOwp1aW50IGdldF9vYmplY3RfaWQoKXtyZXR1cm4gb2JqZWN0X2lkO30KdW5pZm9ybSB2ZWMzIHNwZWN1bGFyOwp2ZWMzIGdldF9zcGVjdWxhcigpe3JldHVybiBzcGVjdWxhcjt9CnVuaWZvcm0gYm9vbCBjb2xvcm1hcDsKYm9vbCBnZXRfY29sb3JtYXAoKXtyZXR1cm4gY29sb3JtYXA7fQp1bmlmb3JtIHZlYzQgaGlnaGNsaXA7CnZlYzQgZ2V0X2hpZ2hjbGlwKCl7cmV0dXJuIGhpZ2hjbGlwO30KdW5pZm9ybSBib29sIHBhdHRlcm47CmJvb2wgZ2V0X3BhdHRlcm4oKXtyZXR1cm4gcGF0dGVybjt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGJvb2wgaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyOwpib29sIGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKXtyZXR1cm4gaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyO30KdW5pZm9ybSBmbG9hdCBiYWNrbGlnaHQ7CmZsb2F0IGdldF9iYWNrbGlnaHQoKXtyZXR1cm4gYmFja2xpZ2h0O30KdW5pZm9ybSB2ZWMzIGFtYmllbnQ7CnZlYzMgZ2V0X2FtYmllbnQoKXtyZXR1cm4gYW1iaWVudDt9CnVuaWZvcm0gbWF0MyBub3JtYWxtYXRyaXg7Cm1hdDMgZ2V0X25vcm1hbG1hdHJpeCgpe3JldHVybiBub3JtYWxtYXRyaXg7fQp1bmlmb3JtIHZlYzMgbGlnaHRwb3NpdGlvbjsKdmVjMyBnZXRfbGlnaHRwb3NpdGlvbigpe3JldHVybiBsaWdodHBvc2l0aW9uO30KdW5pZm9ybSB2ZWM0IG5hbl9jb2xvcjsKdmVjNCBnZXRfbmFuX2NvbG9yKCl7cmV0dXJuIG5hbl9jb2xvcjt9CnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzOwpmbG9hdCBnZXRfc2hpbmluZXNzKCl7cmV0dXJuIHNoaW5pbmVzczt9CnVuaWZvcm0gdmVjMiB1djsKdmVjMiBnZXRfdXYoKXtyZXR1cm4gdXY7fQp1bmlmb3JtIGJvb2wgY29sb3JyYW5nZTsKYm9vbCBnZXRfY29sb3JyYW5nZSgpe3JldHVybiBjb2xvcnJhbmdlO30KdW5pZm9ybSBtYXQ0IG1vZGVsOwptYXQ0IGdldF9tb2RlbCgpe3JldHVybiBtb2RlbDt9CnVuaWZvcm0gZmxvYXQgZGVwdGhfc2hpZnQ7CmZsb2F0IGdldF9kZXB0aF9zaGlmdCgpe3JldHVybiBkZXB0aF9zaGlmdDt9CnVuaWZvcm0gYm9vbCBjb2xvcjsKYm9vbCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIHZlYzQgdW5pZm9ybV9jb2xvcjsKdmVjNCBnZXRfdW5pZm9ybV9jb2xvcigpe3JldHVybiB1bmlmb3JtX2NvbG9yO30KdW5pZm9ybSBib29sIHNoYWRpbmc7CmJvb2wgZ2V0X3NoYWRpbmcoKXtyZXR1cm4gc2hhZGluZzt9CnVuaWZvcm0gdmVjMyBkaWZmdXNlOwp2ZWMzIGdldF9kaWZmdXNlKCl7cmV0dXJuIGRpZmZ1c2U7fQp1bmlmb3JtIHZlYzQgbG93Y2xpcDsKdmVjNCBnZXRfbG93Y2xpcCgpe3JldHVybiBsb3djbGlwO30KCgoKb3V0IHZlYzIgZnJhZ191djsKb3V0IHZlYzMgb19ub3JtYWw7Cm91dCB2ZWMzIG9fY2FtZGlyOwpvdXQgdmVjMyBvX2xpZ2h0ZGlyOwoKb3V0IHZlYzQgZnJhZ19jb2xvcjsKCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnZlYzMgdG92ZWMzKHZlYzIgdil7cmV0dXJuIHZlYzModiwgMC4wKTt9CnZlYzMgdG92ZWMzKHZlYzMgdil7cmV0dXJuIHY7fQoKdmVjNCB0b3ZlYzQoZmxvYXQgdil7cmV0dXJuIHZlYzQodiwgMC4wLCAwLjAsIDAuMCk7fQp2ZWM0IHRvdmVjNCh2ZWMzIHYpe3JldHVybiB2ZWM0KHYsIDEuMCk7fQp2ZWM0IHRvdmVjNCh2ZWM0IHYpe3JldHVybiB2O30KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgdmVydGV4X2NvbG9yKHZlYzMgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcih2ZWM0IGNvbG9yLCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgcmV0dXJuIGNvbG9yOwp9CnZlYzQgdmVydGV4X2NvbG9yKGJvb2wgY29sb3IsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihib29sIHZhbHVlLCB2ZWMyIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICAvLyBjb2xvciBzYW1wbGluZyBoYXBwZW5zIGluIGZyYWdtZW50IHNoYWRlcgogICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTsKfQp2ZWM0IHZlcnRleF9jb2xvcihmbG9hdCB2YWx1ZSwgdmVjMiBjb2xvcnJhbmdlLCBzYW1wbGVyMkQgY29sb3JtYXApewogICAgaWYgKGdldF9pbnRlcnBvbGF0ZV9pbl9mcmFnbWVudF9zaGFkZXIoKSkgewogICAgICAgIHJldHVybiB2ZWM0KHZhbHVlLCAwLjAsIDAuMCwgMC4wKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0KfQoKdm9pZCByZW5kZXIodmVjNCBwb3NpdGlvbl93b3JsZCwgdmVjMyBub3JtYWwsIG1hdDQgdmlldywgbWF0NCBwcm9qZWN0aW9uLCB2ZWMzIGxpZ2h0cG9zaXRpb24pCnsKICAgIC8vIG5vcm1hbCBpbiB3b3JsZCBzcGFjZQogICAgb19ub3JtYWwgPSBnZXRfbm9ybWFsbWF0cml4KCkgKiBub3JtYWw7CiAgICAvLyBwb3NpdGlvbiBpbiB2aWV3IHNwYWNlIChhcyBzZWVuIGZyb20gY2FtZXJhKQogICAgdmVjNCB2aWV3X3BvcyA9IHZpZXcgKiBwb3NpdGlvbl93b3JsZDsKICAgIC8vIHBvc2l0aW9uIGluIGNsaXAgc3BhY2UgKHcvIGRlcHRoKQogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uICogdmlld19wb3M7CiAgICBnbF9Qb3NpdGlvbi56ICs9IGdsX1Bvc2l0aW9uLncgKiBnZXRfZGVwdGhfc2hpZnQoKTsKICAgIC8vIGRpcmVjdGlvbiB0byBsaWdodAogICAgb19saWdodGRpciA9IG5vcm1hbGl6ZSh2aWV3KnZlYzQobGlnaHRwb3NpdGlvbiwgMS4wKSAtIHZpZXdfcG9zKS54eXo7CiAgICAvLyBkaXJlY3Rpb24gdG8gY2FtZXJhCiAgICAvLyBUaGlzIGlzIGVxdWl2YWxlbnQgdG8KICAgIC8vIG5vcm1hbGl6ZSh2aWV3KnZlYzQoZXllcG9zaXRpb24sIDEuMCkgLSB2aWV3X3BvcykueHl6CiAgICAvLyAoYnkgZGVmaW5pdGlvbiBgdmlldyAqIGV5ZXBvc2l0aW9uID0gMGApCiAgICBvX2NhbWRpciA9IG5vcm1hbGl6ZSgtdmlld19wb3MpLnh5ejsKfQoKZmxhdCBvdXQgdWludCBmcmFnX2luc3RhbmNlX2lkOwoKdm9pZCBtYWluKCl7CiAgICAvLyBnZXRfKiBnZXRzIHRoZSBnbG9iYWwgaW5wdXRzICh1bmlmb3JtLCBzYW1wbGVyLCBwb3NpdGlvbiBhcnJheSkKICAgIC8vIHRob3NlIGZ1bmN0aW9ucyB3aWxsIGdldCBpbnNlcnRlZCBieSB0aGUgc2hhZGVyIGNyZWF0aW9uIHBpcGVsaW5lCiAgICB2ZWMzIHZlcnRleF9wb3NpdGlvbiA9IHRvdmVjMyhnZXRfcG9zaXRpb24oKSk7CiAgICBpZiAoaXNuYW4odmVydGV4X3Bvc2l0aW9uLnopKSB7CiAgICAgICAgdmVydGV4X3Bvc2l0aW9uLnogPSAwLjA7CiAgICB9CiAgICB2ZWM0IHBvc2l0aW9uX3dvcmxkID0gbW9kZWwgKiB2ZWM0KHZlcnRleF9wb3NpdGlvbiwgMSk7CgogICAgcmVuZGVyKHBvc2l0aW9uX3dvcmxkLCBnZXRfbm9ybWFscygpLCB2aWV3LCBwcm9qZWN0aW9uLCBnZXRfbGlnaHRwb3NpdGlvbigpKTsKICAgIGZyYWdfdXYgPSBnZXRfdXYoKTsKICAgIGZyYWdfdXYgPSB2ZWMyKDEuMCAtIGZyYWdfdXYueSwgZnJhZ191di54KTsKICAgIGZyYWdfY29sb3IgPSB2ZXJ0ZXhfY29sb3IoZ2V0X2NvbG9yKCksIGdldF9jb2xvcnJhbmdlKCksIGNvbG9ybWFwKTsKCiAgICBmcmFnX2luc3RhbmNlX2lkID0gdWludChnbF9WZXJ0ZXhJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaFRojdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjMyBzcGVjdWxhcjsKdmVjMyBnZXRfc3BlY3VsYXIoKXtyZXR1cm4gc3BlY3VsYXI7fQp1bmlmb3JtIGJvb2wgY29sb3JtYXA7CmJvb2wgZ2V0X2NvbG9ybWFwKCl7cmV0dXJuIGNvbG9ybWFwO30KdW5pZm9ybSB2ZWM0IGhpZ2hjbGlwOwp2ZWM0IGdldF9oaWdoY2xpcCgpe3JldHVybiBoaWdoY2xpcDt9CnVuaWZvcm0gYm9vbCBwYXR0ZXJuOwpib29sIGdldF9wYXR0ZXJuKCl7cmV0dXJuIHBhdHRlcm47fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBib29sIGludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcjsKYm9vbCBnZXRfaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyKCl7cmV0dXJuIGludGVycG9sYXRlX2luX2ZyYWdtZW50X3NoYWRlcjt9CnVuaWZvcm0gZmxvYXQgYmFja2xpZ2h0OwpmbG9hdCBnZXRfYmFja2xpZ2h0KCl7cmV0dXJuIGJhY2tsaWdodDt9CnVuaWZvcm0gdmVjMyBhbWJpZW50Owp2ZWMzIGdldF9hbWJpZW50KCl7cmV0dXJuIGFtYmllbnQ7fQp1bmlmb3JtIG1hdDMgbm9ybWFsbWF0cml4OwptYXQzIGdldF9ub3JtYWxtYXRyaXgoKXtyZXR1cm4gbm9ybWFsbWF0cml4O30KdW5pZm9ybSB2ZWMzIGxpZ2h0cG9zaXRpb247CnZlYzMgZ2V0X2xpZ2h0cG9zaXRpb24oKXtyZXR1cm4gbGlnaHRwb3NpdGlvbjt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIGZsb2F0IHNoaW5pbmVzczsKZmxvYXQgZ2V0X3NoaW5pbmVzcygpe3JldHVybiBzaGluaW5lc3M7fQp1bmlmb3JtIHZlYzIgdXY7CnZlYzIgZ2V0X3V2KCl7cmV0dXJuIHV2O30KdW5pZm9ybSBib29sIGNvbG9ycmFuZ2U7CmJvb2wgZ2V0X2NvbG9ycmFuZ2UoKXtyZXR1cm4gY29sb3JyYW5nZTt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgY29sb3I7CmJvb2wgZ2V0X2NvbG9yKCl7cmV0dXJuIGNvbG9yO30KdW5pZm9ybSB2ZWM0IHVuaWZvcm1fY29sb3I7CnZlYzQgZ2V0X3VuaWZvcm1fY29sb3IoKXtyZXR1cm4gdW5pZm9ybV9jb2xvcjt9CnVuaWZvcm0gYm9vbCBzaGFkaW5nOwpib29sIGdldF9zaGFkaW5nKCl7cmV0dXJuIHNoYWRpbmc7fQp1bmlmb3JtIHZlYzMgZGlmZnVzZTsKdmVjMyBnZXRfZGlmZnVzZSgpe3JldHVybiBkaWZmdXNlO30KdW5pZm9ybSB2ZWM0IGxvd2NsaXA7CnZlYzQgZ2V0X2xvd2NsaXAoKXtyZXR1cm4gbG93Y2xpcDt9CgppbiB2ZWMyIGZyYWdfdXY7CmluIHZlYzQgZnJhZ19jb2xvcjsKZmxhdCBpbiBpbnQgc2FtcGxlX2ZyYWdfY29sb3I7CgppbiB2ZWMzIG9fbm9ybWFsOwppbiB2ZWMzIG9fY2FtZGlyOwppbiB2ZWMzIG9fbGlnaHRkaXI7Cgp2ZWMzIGJsaW5ucGhvbmcodmVjMyBOLCB2ZWMzIFYsIHZlYzMgTCwgdmVjMyBjb2xvcil7CiAgICBmbG9hdCBkaWZmX2NvZWZmID0gbWF4KGRvdChMLCBOKSwgMC4wKTsKCiAgICAvLyBzcGVjdWxhciBjb2VmZmljaWVudAogICAgdmVjMyBIID0gbm9ybWFsaXplKEwgKyBWKTsKCiAgICBmbG9hdCBzcGVjX2NvZWZmID0gcG93KG1heChkb3QoSCwgTiksIDAuMCksIGdldF9zaGluaW5lc3MoKSk7CiAgICBpZiAoZGlmZl9jb2VmZiA8PSAwLjApCiAgICAgICAgc3BlY19jb2VmZiA9IDAuMDsKICAgIC8vIGZpbmFsIGxpZ2h0aW5nIG1vZGVsCiAgICByZXR1cm4gdmVjMygKICAgICAgICBnZXRfZGlmZnVzZSgpICogZGlmZl9jb2VmZiAqIGNvbG9yICsKICAgICAgICBnZXRfc3BlY3VsYXIoKSAqIHNwZWNfY29lZmYKICAgICk7Cn0KCnZlYzQgZ2V0X2NvbG9yKHZlYzMgY29sb3IsIHZlYzIgdXYsIGJvb2wgY29sb3JyYW5nZSwgYm9vbCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdmVjNChjb2xvciwgMS4wKTsKfQoKdmVjNCBnZXRfY29sb3IodmVjNCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBjb2xvcjsKfQoKdmVjNCBnZXRfY29sb3IoYm9vbCBjb2xvciwgdmVjMiB1diwgYm9vbCBjb2xvcnJhbmdlLCBib29sIGNvbG9ybWFwKXsKICAgIHJldHVybiBmcmFnX2NvbG9yOyAgLy8gY29sb3Igbm90IGluIHVuaWZvcm0KfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIGJvb2wgY29sb3JtYXApewogICAgaWYgKGdldF9wYXR0ZXJuKCkpIHsKICAgICAgICB2ZWMyIHNpemUgPSB2ZWMyKHRleHR1cmVTaXplKGNvbG9yLCAwKSk7CiAgICAgICAgdmVjMiBwb3MgPSBnbF9GcmFnQ29vcmQueHk7CiAgICAgICAgcmV0dXJuIHRleGVsRmV0Y2goY29sb3IsIGl2ZWMyKG1vZChwb3MueCwgc2l6ZS54KSwgbW9kKHBvcy55LCBzaXplLnkpKSwgMCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0ZXh0dXJlKGNvbG9yLCB1dik7CiAgICB9Cn0KCmZsb2F0IF9ub3JtYWxpemUoZmxvYXQgdmFsLCBmbG9hdCBmcm9tLCBmbG9hdCB0byl7cmV0dXJuICh2YWwtZnJvbSkgLyAodG8gLSBmcm9tKTt9Cgp2ZWM0IGdldF9jb2xvcl9mcm9tX2NtYXAoZmxvYXQgdmFsdWUsIHNhbXBsZXIyRCBjb2xvcl9tYXAsIHZlYzIgY29sb3JyYW5nZSkgewogICAgZmxvYXQgY21pbiA9IGNvbG9ycmFuZ2UueDsKICAgIGZsb2F0IGNtYXggPSBjb2xvcnJhbmdlLnk7CiAgICBpZiAodmFsdWUgPD0gY21heCAmJiB2YWx1ZSA+PSBjbWluKSB7CiAgICAgICAgLy8gaW4gdmFsdWUgcmFuZ2UsIGNvbnRpbnVlIQogICAgfSBlbHNlIGlmICh2YWx1ZSA8IGNtaW4pIHsKICAgICAgICByZXR1cm4gZ2V0X2xvd2NsaXAoKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPiBjbWF4KSB7CiAgICAgICAgcmV0dXJuIGdldF9oaWdoY2xpcCgpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyBpc25hbiBpcyBicm9rZW4gKG9mIGNvdXJzZSkgLS4tCiAgICAgICAgLy8gc28gaWYgb3V0c2lkZSB2YWx1ZSByYW5nZSBhbmQgbm90IHNtYWxsZXIvYmlnZ2VyIG1pbi9tYXggd2UgYXNzdW1lIE5hTgogICAgICAgIHJldHVybiBnZXRfbmFuX2NvbG9yKCk7CiAgICB9CiAgICBmbG9hdCBpMDEgPSBjbGFtcCgodmFsdWUgLSBjbWluKSAvIChjbWF4IC0gY21pbiksIDAuMCwgMS4wKTsKICAgIC8vIDEvMCBjb3JyZXNwb25kcyB0byB0aGUgY29ybmVyIG9mIHRoZSBjb2xvcm1hcCwgc28gdG8gcHJvcGVybHkgaW50ZXJwb2xhdGUKICAgIC8vIGJldHdlZW4gdGhlIGNvbG9ycywgd2UgbmVlZCB0byBzY2FsZSBpdCwgc28gdGhhdCB0aGUgZW5kcyBhcmUgYXQgMSAtIChzdGVwc2l6ZS8yKSBhbmQgMCsoc3RlcHNpemUvMikuCiAgICBmbG9hdCBzdGVwc2l6ZSA9IDEuMCAvIGZsb2F0KHRleHR1cmVTaXplKGNvbG9yX21hcCwgMCkpOwogICAgaTAxID0gKDEuMCAtIHN0ZXBzaXplKSAqIGkwMSArIDAuNSAqIHN0ZXBzaXplOwogICAgcmV0dXJuIHRleHR1cmUoY29sb3JfbWFwLCB2ZWMyKGkwMSwgMC4wKSk7Cn0KCnZlYzQgZ2V0X2NvbG9yKGJvb2wgY29sb3IsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGlmIChnZXRfaW50ZXJwb2xhdGVfaW5fZnJhZ21lbnRfc2hhZGVyKCkpIHsKICAgICAgICByZXR1cm4gZ2V0X2NvbG9yX2Zyb21fY21hcChmcmFnX2NvbG9yLngsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZyYWdfY29sb3I7CiAgICB9Cn0KCnZlYzQgZ2V0X2NvbG9yKHNhbXBsZXIyRCB2YWx1ZXMsIHZlYzIgdXYsIHZlYzIgY29sb3JyYW5nZSwgc2FtcGxlcjJEIGNvbG9ybWFwKXsKICAgIGZsb2F0IHZhbHVlID0gdGV4dHVyZSh2YWx1ZXMsIHV2KS54OwogICAgcmV0dXJuIGdldF9jb2xvcl9mcm9tX2NtYXAodmFsdWUsIGNvbG9ybWFwLCBjb2xvcnJhbmdlKTsKfQoKdmVjNCBnZXRfY29sb3Ioc2FtcGxlcjJEIGNvbG9yLCB2ZWMyIHV2LCBib29sIGNvbG9ycmFuZ2UsIHNhbXBsZXIyRCBjb2xvcm1hcCl7CiAgICByZXR1cm4gdGV4dHVyZShjb2xvciwgdXYpOwp9CgpmbGF0IGluIHVpbnQgZnJhZ19pbnN0YW5jZV9pZDsKdmVjNCBwYWNrX2ludCh1aW50IGlkLCB1aW50IGluZGV4KSB7CiAgICB2ZWM0IHVucGFjazsKICAgIHVucGFjay54ID0gZmxvYXQoKGlkICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLnkgPSBmbG9hdCgoaWQgJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICB1bnBhY2sueiA9IGZsb2F0KChpbmRleCAmIHVpbnQoMHhmZjAwKSkgPj4gOCkgLyAyNTUuMDsKICAgIHVucGFjay53ID0gZmxvYXQoKGluZGV4ICYgdWludCgweDAwZmYpKSA+PiAwKSAvIDI1NS4wOwogICAgcmV0dXJuIHVucGFjazsKfQoKdm9pZCBtYWluKCkgewogICAgdmVjNCByZWFsX2NvbG9yID0gZ2V0X2NvbG9yKHVuaWZvcm1fY29sb3IsIGZyYWdfdXYsIGdldF9jb2xvcnJhbmdlKCksIGNvbG9ybWFwKTsKICAgIHZlYzMgc2hhZGVkX2NvbG9yID0gcmVhbF9jb2xvci5yZ2I7CgogICAgaWYoZ2V0X3NoYWRpbmcoKSl7CiAgICAgICAgdmVjMyBMID0gbm9ybWFsaXplKG9fbGlnaHRkaXIpOwogICAgICAgIHZlYzMgTiA9IG5vcm1hbGl6ZShvX25vcm1hbCk7CiAgICAgICAgdmVjMyBsaWdodDEgPSBibGlubnBob25nKE4sIG9fY2FtZGlyLCBMLCByZWFsX2NvbG9yLnJnYik7CiAgICAgICAgdmVjMyBsaWdodDIgPSBibGlubnBob25nKE4sIG9fY2FtZGlyLCAtTCwgcmVhbF9jb2xvci5yZ2IpOwogICAgICAgIHNoYWRlZF9jb2xvciA9IGdldF9hbWJpZW50KCkgKiByZWFsX2NvbG9yLnJnYiArIGxpZ2h0MSArIGdldF9iYWNrbGlnaHQoKSAqIGxpZ2h0MjsKICAgIH0KCiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChyZWFsX2NvbG9yLmEgPiAwLjEpIHsKICAgICAgICAgICAgZnJhZ21lbnRfY29sb3IgPSBwYWNrX2ludChvYmplY3RfaWQsIGZyYWdfaW5zdGFuY2VfaWQpOwogICAgICAgIH0KICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKHJlYWxfY29sb3IuYSA8PSAwLjApewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBmcmFnbWVudF9jb2xvciA9IHZlYzQoc2hhZGVkX2NvbG9yLCByZWFsX2NvbG9yLmEpOwp9Cq9iYWNrZ3JvdW5kY29sb3LHFWi0MTIyNjYwNzU1NTE1MjMyNjc0MDSpcGl4ZWxhcmVhxxRoszEyMjA1MjE5OTg3ODA2NDU5MzamY2FtZXJhxxRoszk2OTM2NTAwNTIxMTQ3ODgwNTGkdXVpZLMxMDA2MjQzNTgwMzkwODk3MDMxq2NhbTNkX3N0YXRlwKpjbGVhcnNjZW5lxxNosjExMjQ5Nzk2NDM3Njk4MTk3M6hjaGlsZHJlbpGJp3Zpc2libGXHFGizMzQxNDAxODQzOTkyMzI1MzI4N6VwbG90c5HeABCsdHJhbnNwYXJlbmN5xxNosjcxNzAyMDU2NjYwNTgyMTk1MaVzcGFjZccVaLQxNjQ1OTIyNTc4MzYxMTQ5OTAxNKx2ZXJ0ZXhhcnJheXOConV2gqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAAAAAIA/AACAPwAAgD8AAAAAAAAAAAAAgD8AAAAAqHBvc2l0aW9ugqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAAL8AAAC/AAAAPwAAAL8AAAC/AAAAPwAAAD8AAAA/pG5hbWW8c2NhdHRlci0xMDE0MTk2MDkwNzc1MzQ1NDY0NKljYW1fc3BhY2WlcGl4ZWyodW5pZm9ybXPeABupZ2xvd2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAArW1hcmtlcl9vZmZzZXTHDBcAAAAAAAAAAAAAAAClbW9kZWzHQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/qWJpbGxib2FyZMOvdXZfb2Zmc2V0X3dpZHRo2BcA4Fc/AMCmPgBgaj8AwMs+rXByZXByb2plY3Rpb27HQBcAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/p2FtYmllbnTHDBfNzAw/zcwMP83MDD+pbmFuX2NvbG9y2BcAAAAAAAAAAAAAAAAAAAAArWRpc3RhbmNlZmllbGSKqW1pbkZpbHRlcqxMaW5lYXJGaWx0ZXKqYW5pc290cm9wecpBgAAAqW1hZ0ZpbHRlcqxMaW5lYXJGaWx0ZXKld3JhcFOuUmVwZWF0V3JhcHBpbmekZGF0Ya10ZXh0dXJlX2F0bGFzrHRocmVlX2Zvcm1hdKlSZWRGb3JtYXSkc2l6ZZLNBADNBACld3JhcFSuUmVwZWF0V3JhcHBpbmekdHlwZadTYW1wbGVyqnRocmVlX3R5cGWpRmxvYXRUeXBlsmF0bGFzX3RleHR1cmVfc2l6ZcpEgAAAqm1hcmtlcnNpemXXF5xnREGcZ0RBq3N0cm9rZXdpZHRoygAAAACpcm90YXRpb25z2BcAAAAAAAAAAAAAAAAAAIA/q3N0cm9rZWNvbG9y2BcAAAAAAAAAAAAAAAAAAIA/qWdsb3d3aWR0aMoAAAAAp3BpY2tpbmfCqnJlc29sdXRpb27XFwBAO0QAQAdEpWltYWdlwqlvYmplY3RfaWQAqnNoYXBlX3R5cGUDsHRyYW5zZm9ybV9tYXJrZXLCpHNzYW/CrWxpZ2h0cG9zaXRpb27HDBcAAIA/AACAPwAAgD+rZGVwdGhfc2hpZnTKAAAAAKVjb2xvctgXAAAAAOXk5D6zsjI/AACAP6tpbnNwZWN0YWJsZcOrcXVhZF9vZmZzZXTXF5pnxMCaZ8TAp3Zpc2libGXHFWi0MTA1MTI2NDEzNjUzNTUxNjc1NjirbWFya2Vyc3BhY2XHFWi0MTgzNTE3MDAxMzg3NDkzMjQ2MTSxYXR0cmlidXRlX3VwZGF0ZXLHFGizOTA5MjE3MTA5Nzg1MjIwODY0M6hvdmVyZHJhd8cVaLQxMTQzMjE5MTAzNTYyMTAwNDg4N691bmlmb3JtX3VwZGF0ZXLHFGizNzg2MDE1MDQ3OTIwODg0OTU4OKVmYWNlc8cUaLM0NzMxMjk2NDI5MzAwMjY5MTIwpHV1aWS0MTAxNDE5NjA5MDc3NTM0NTQ2NDStdmVydGV4X3NvdXJjZdocMiN2ZXJzaW9uIDMwMCBlcwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkQ7CnByZWNpc2lvbiBtZWRpdW1wIHNhbXBsZXIzRDsKLy8gSW5zdGFuY2UgaW5wdXRzOiAKaW4gdmVjMiBwb3NpdGlvbjsKdmVjMiBnZXRfcG9zaXRpb24oKXtyZXR1cm4gcG9zaXRpb247fQppbiB2ZWMyIHV2Owp2ZWMyIGdldF91digpe3JldHVybiB1djt9CgovLyBVbmlmb3JtczogCnVuaWZvcm0gdWludCBvYmplY3RfaWQ7CnVpbnQgZ2V0X29iamVjdF9pZCgpe3JldHVybiBvYmplY3RfaWQ7fQp1bmlmb3JtIHZlYzQgc3Ryb2tlY29sb3I7CnZlYzQgZ2V0X3N0cm9rZWNvbG9yKCl7cmV0dXJuIHN0cm9rZWNvbG9yO30KdW5pZm9ybSB2ZWMyIHF1YWRfb2Zmc2V0Owp2ZWMyIGdldF9xdWFkX29mZnNldCgpe3JldHVybiBxdWFkX29mZnNldDt9CnVuaWZvcm0gZmxvYXQgZ2xvd3dpZHRoOwpmbG9hdCBnZXRfZ2xvd3dpZHRoKCl7cmV0dXJuIGdsb3d3aWR0aDt9CnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4dHVyZV9zaXplOwpmbG9hdCBnZXRfYXRsYXNfdGV4dHVyZV9zaXplKCl7cmV0dXJuIGF0bGFzX3RleHR1cmVfc2l6ZTt9CnVuaWZvcm0gYm9vbCBzc2FvOwpib29sIGdldF9zc2FvKCl7cmV0dXJuIHNzYW87fQp1bmlmb3JtIHZlYzIgbWFya2Vyc2l6ZTsKdmVjMiBnZXRfbWFya2Vyc2l6ZSgpe3JldHVybiBtYXJrZXJzaXplO30KdW5pZm9ybSB2ZWM0IHJvdGF0aW9uczsKdmVjNCBnZXRfcm90YXRpb25zKCl7cmV0dXJuIHJvdGF0aW9uczt9CnVuaWZvcm0gdmVjMyBtYXJrZXJfb2Zmc2V0Owp2ZWMzIGdldF9tYXJrZXJfb2Zmc2V0KCl7cmV0dXJuIG1hcmtlcl9vZmZzZXQ7fQp1bmlmb3JtIGJvb2wgcGlja2luZzsKYm9vbCBnZXRfcGlja2luZygpe3JldHVybiBwaWNraW5nO30KdW5pZm9ybSBpbnQgc2hhcGVfdHlwZTsKaW50IGdldF9zaGFwZV90eXBlKCl7cmV0dXJuIHNoYXBlX3R5cGU7fQp1bmlmb3JtIHZlYzQgbmFuX2NvbG9yOwp2ZWM0IGdldF9uYW5fY29sb3IoKXtyZXR1cm4gbmFuX2NvbG9yO30KdW5pZm9ybSBzYW1wbGVyMkQgZGlzdGFuY2VmaWVsZDsKdW5pZm9ybSBmbG9hdCBzdHJva2V3aWR0aDsKZmxvYXQgZ2V0X3N0cm9rZXdpZHRoKCl7cmV0dXJuIHN0cm9rZXdpZHRoO30KdW5pZm9ybSBib29sIGltYWdlOwpib29sIGdldF9pbWFnZSgpe3JldHVybiBpbWFnZTt9CnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uOwp2ZWMyIGdldF9yZXNvbHV0aW9uKCl7cmV0dXJuIHJlc29sdXRpb247fQp1bmlmb3JtIG1hdDQgbW9kZWw7Cm1hdDQgZ2V0X21vZGVsKCl7cmV0dXJuIG1vZGVsO30KdW5pZm9ybSBmbG9hdCBkZXB0aF9zaGlmdDsKZmxvYXQgZ2V0X2RlcHRoX3NoaWZ0KCl7cmV0dXJuIGRlcHRoX3NoaWZ0O30KdW5pZm9ybSBib29sIGJpbGxib2FyZDsKYm9vbCBnZXRfYmlsbGJvYXJkKCl7cmV0dXJuIGJpbGxib2FyZDt9CnVuaWZvcm0gdmVjNCBjb2xvcjsKdmVjNCBnZXRfY29sb3IoKXtyZXR1cm4gY29sb3I7fQp1bmlmb3JtIG1hdDQgcHJlcHJvamVjdGlvbjsKbWF0NCBnZXRfcHJlcHJvamVjdGlvbigpe3JldHVybiBwcmVwcm9qZWN0aW9uO30KdW5pZm9ybSB2ZWM0IHV2X29mZnNldF93aWR0aDsKdmVjNCBnZXRfdXZfb2Zmc2V0X3dpZHRoKCl7cmV0dXJuIHV2X29mZnNldF93aWR0aDt9CnVuaWZvcm0gYm9vbCBpbnNwZWN0YWJsZTsKYm9vbCBnZXRfaW5zcGVjdGFibGUoKXtyZXR1cm4gaW5zcGVjdGFibGU7fQp1bmlmb3JtIHZlYzQgZ2xvd2NvbG9yOwp2ZWM0IGdldF9nbG93Y29sb3IoKXtyZXR1cm4gZ2xvd2NvbG9yO30KdW5pZm9ybSBib29sIHRyYW5zZm9ybV9tYXJrZXI7CmJvb2wgZ2V0X3RyYW5zZm9ybV9tYXJrZXIoKXtyZXR1cm4gdHJhbnNmb3JtX21hcmtlcjt9CgoKCgovLyBQZXIgaW5zdGFuY2UgYXR0cmlidXRlczogCmluIHZlYzIgcG9zOwp2ZWMyIGdldF9wb3MoKXtyZXR1cm4gcG9zO30KCnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uOwp1bmlmb3JtIG1hdDQgdmlldzsKCnVuaWZvcm0gZmxvYXQgYXRsYXNfdGV4X2RpbTsKCm91dCB2ZWM0IGZyYWdfY29sb3I7Cm91dCB2ZWMyIGZyYWdfdXY7Cm91dCBmbG9hdCBmcmFnX3V2c2NhbGU7Cm91dCBmbG9hdCBmcmFnX2Rpc3RhbmNlZmllbGRfc2NhbGU7Cm91dCB2ZWM0IGZyYWdfdXZfb2Zmc2V0X3dpZHRoOwoKCm1hdDQgcW1hdCh2ZWM0IHF1YXQpewogICAgZmxvYXQgbnVtID0gcXVhdC54ICogMi4wOwogICAgZmxvYXQgbnVtMiA9IHF1YXQueSAqIDIuMDsKICAgIGZsb2F0IG51bTMgPSBxdWF0LnogKiAyLjA7CiAgICBmbG9hdCBudW00ID0gcXVhdC54ICogbnVtOwogICAgZmxvYXQgbnVtNSA9IHF1YXQueSAqIG51bTI7CiAgICBmbG9hdCBudW02ID0gcXVhdC56ICogbnVtMzsKICAgIGZsb2F0IG51bTcgPSBxdWF0LnggKiBudW0yOwogICAgZmxvYXQgbnVtOCA9IHF1YXQueCAqIG51bTM7CiAgICBmbG9hdCBudW05ID0gcXVhdC55ICogbnVtMzsKICAgIGZsb2F0IG51bTEwID0gcXVhdC53ICogbnVtOwogICAgZmxvYXQgbnVtMTEgPSBxdWF0LncgKiBudW0yOwogICAgZmxvYXQgbnVtMTIgPSBxdWF0LncgKiBudW0zOwogICAgcmV0dXJuIG1hdDQoCiAgICAgICAgKDEuMCAtIChudW01ICsgbnVtNikpLCAobnVtNyArIG51bTEyKSwgICAgICAgIChudW04IC0gbnVtMTEpLCAgICAgICAgMC4wLAogICAgICAgIChudW03IC0gbnVtMTIpLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNikpLCAobnVtOSArIG51bTEwKSwgICAgICAgIDAuMCwKICAgICAgICAobnVtOCArIG51bTExKSwgICAgICAgIChudW05IC0gbnVtMTApLCAgICAgICAgKDEuMCAtIChudW00ICsgbnVtNSkpLCAwLjAsCiAgICAgICAgMC4wLCAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgICAgICAgICAgMS4wCiAgICApOwp9CgpmbG9hdCBkaXN0YW5jZWZpZWxkX3NjYWxlKCl7CiAgICAvLyBHbHlwaCBkaXN0YW5jZSBmaWVsZCB1bml0cyBhcmUgaW4gcGl4ZWxzOyBjb252ZXJ0IHRvIGRpbWVuc2lvbmxlc3MKICAgIC8vIHgtY29vcmRpbmF0ZSBvZiB0ZXh0dXJlIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggcHJvZ3JhbW1hdGljIHV2CiAgICAvLyBkaXN0YW5jZSBmaWVsZHMgaW4gZnJhZ21lbnQgc2hhZGVyLiBTZWUgYWxzbyBjb21tZW50cyBiZWxvdy4KICAgIHZlYzQgdXZfcmVjdCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIGZsb2F0IHBpeHNpemVfeCA9ICh1dl9yZWN0LnogLSB1dl9yZWN0LngpICogZ2V0X2F0bGFzX3RleHR1cmVfc2l6ZSgpOwogICAgcmV0dXJuIC0xLjAvcGl4c2l6ZV94Owp9Cgp2ZWMzIHRvdmVjMyh2ZWMyIHYpe3JldHVybiB2ZWMzKHYsIDAuMCk7fQp2ZWMzIHRvdmVjMyh2ZWMzIHYpe3JldHVybiB2O30KCnZlYzQgdG92ZWM0KHZlYzMgdil7cmV0dXJuIHZlYzQodiwgMS4wKTt9CnZlYzQgdG92ZWM0KHZlYzQgdil7cmV0dXJuIHY7fQoKbWF0MiBkaWFnbSh2ZWMyIHYpewogICAgcmV0dXJuIG1hdDIodi54LCAwLjAsIDAuMCwgdi55KTsKfQoKZmxvYXQgX2RldGVybWluYW50KG1hdDIgbSkgewogIHJldHVybiBtWzBdWzBdICogbVsxXVsxXSAtIG1bMF1bMV0gKiBtWzFdWzBdOwp9CgpmbGF0IG91dCB1aW50IGZyYWdfaW5zdGFuY2VfaWQ7Cgp2b2lkIG1haW4oKXsKICAgIHZlYzIgYmJveF9zaWduZWRfcmFkaXVzID0gMC41ICogZ2V0X21hcmtlcnNpemUoKTsgLy8gbm90ZTsgY29tcG9uZW50cyBtYXkgYmUgbmVnYXRpdmUuCiAgICB2ZWMyIHNwcml0ZV9iYm94X2NlbnRyZSA9IGdldF9xdWFkX29mZnNldCgpICsgYmJveF9zaWduZWRfcmFkaXVzOwoKICAgIG1hdDQgcHZpZXcgPSBwcm9qZWN0aW9uICogdmlldzsKICAgIC8vIENvbXB1dGUgdHJhbnNmb3JtIGZvciB0aGUgb2Zmc2V0IHZlY3RvcnMgZnJvbSB0aGUgY2VudHJhbCBwb2ludAogICAgbWF0NCB0cmFucyA9IGdldF90cmFuc2Zvcm1fbWFya2VyKCkgPyBtb2RlbCA6IG1hdDQoMS4wKTsKICAgIHRyYW5zID0gKGdldF9iaWxsYm9hcmQoKSA/IHByb2plY3Rpb24gOiBwdmlldykgKiBxbWF0KGdldF9yb3RhdGlvbnMoKSkgKiB0cmFuczsKCiAgICAvLyBDb21wdXRlIGNlbnRyZSBvZiBiaWxsYm9hcmQgaW4gY2xpcHBpbmcgY29vcmRpbmF0ZXMKICAgIHZlYzQgc3ByaXRlX2NlbnRlciA9IHRyYW5zICogdmVjNChzcHJpdGVfYmJveF9jZW50cmUsIDAsIDApOwogICAgdmVjNCBkYXRhX3BvaW50ID0gZ2V0X3ByZXByb2plY3Rpb24oKSAqIG1vZGVsICogdmVjNCh0b3ZlYzMoZ2V0X3BvcygpKSwgMSk7CiAgICBkYXRhX3BvaW50ID0gdmVjNChkYXRhX3BvaW50Lnh5eiAvIGRhdGFfcG9pbnQudyArIG1hdDMobW9kZWwpICogdG92ZWMzKGdldF9tYXJrZXJfb2Zmc2V0KCkpLCAxKTsKICAgIGRhdGFfcG9pbnQgPSBwdmlldyAqIGRhdGFfcG9pbnQ7CiAgICB2ZWM0IHZjbGlwID0gZGF0YV9wb2ludCArIHNwcml0ZV9jZW50ZXI7CgogICAgLy8gRXh0cmEgYnVmZmVyaW5nIGlzIHJlcXVpcmVkIGFyb3VuZCBzcHJpdGVzIHdoaWNoIGFyZSBhbnRpYWxpYXNlZCBzbyB0aGF0CiAgICAvLyB0aGUgYW50aWFsaWFzIGJsdXIgZG9lc24ndCBnZXQgY3V0IG9mZiAoc2VlICMxNSkuIFRoaXMgYmx1ciBmYWxscyB0bwogICAgLy8gemVybyBhdCBhIHJhZGl1cyBvZiBBTlRJQUxJQVNfUkFESVVTIHBpeGVscyBpbiB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZXMKICAgIC8vIGFuZCB3ZSB3YW50IHRvIGJ1ZmZlciB0aGUgdmVydGljZXMgaW4gdGhlICpzb3VyY2UqIHNwcml0ZSBjb29yZGluYXRlCiAgICAvLyBzeXN0ZW0gc28gdGhhdCB3ZSBnZXQgdGhpcyBhbW91bnQgaW4gdGhlIG91dHB1dCBjb29yZGluYXRlcy4KICAgIC8vCiAgICAvLyBIZXJlIHdlIGNhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgbWFwcGluZyBmcm9tIHNwcml0ZSB4eQogICAgLy8gY29vcmRpbmF0ZXMgKGRlZmluZWQgYnkgYHRyYW5zYCkgaW50byB0aGUgdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuCiAgICAvLyBUaGUgZGVyaXZhdGl2ZSBuZWVkcyB0byBpbmNsdWRlIHRoZSBwcm9wZXIgdGVybSBmb3IgdGhlIHBlcnNwZWN0aXZlCiAgICAvLyBkaXZpZGUgaW50byBOREMsIGV2YWx1YXRlZCBhdCB0aGUgY2VudHJlIHBvaW50IGB2Y2xpcGAuCiAgICBtYXQ0IGRfbmRjX2RfY2xpcCA9IG1hdDQoCiAgICAgICAgMS4wL3ZjbGlwLncsIDAuMCwgICAgICAgICAwLjAsICAgICAgICAgMC4wLAogICAgICAgIDAuMCwgICAgICAgICAxLjAvdmNsaXAudywgMC4wLCAgICAgICAgIDAuMCwKICAgICAgICAwLjAsICAgICAgICAgMC4wLCAgICAgICAgIDEuMC92Y2xpcC53LCAwLjAsCiAgICAgICAgLXZjbGlwLnh5ei8odmNsaXAudyp2Y2xpcC53KSwgICAgICAgICAgMC4wCiAgICApOwogICAgbWF0MiBkeHl2X2R4eXMgPSBkaWFnbSgwLjUgKiBnZXRfcmVzb2x1dGlvbigpKSAqIG1hdDIoZF9uZGNfZF9jbGlwKnRyYW5zKTsKICAgIC8vIE5vdywgb3VyIGJ1ZmZlciBzaXplIGlzIGV4cHJlc3NlZCBpbiB2aWV3cG9ydCBwaXhlbHMgYnV0IHdlIGdldCBiYWNrIHRvCiAgICAvLyB0aGUgc3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHVzaW5nIHRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlCiAgICAvLyB0cmFuc2Zvcm1hdGlvbiAoZm9yIGlzb3Ryb3BpYyB0cmFuc2Zvcm1hdGlvbnMpLiBGb3IgYW5pc290cm9waWMKICAgIC8vIHRyYW5zZm9ybWF0aW9ucywgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB0d28gcHJpbmNpcGxlIHNjYWxlIGZhY3RvcnMKICAgIC8vIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlOgogICAgZmxvYXQgdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgPSBzcXJ0KGFicyhfZGV0ZXJtaW5hbnQoZHh5dl9keHlzKSkpOwoKICAgIC8vIEluIHRoZSBmcmFnbWVudCBzaGFkZXIgd2Ugd2FudCBvdXIgc2lnbmVkIGRpc3RhbmNlIGluIHZpZXdwb3J0IChwaXhlbCkKICAgIC8vIGNvb3JkcyBmb3IgZGlyZWN0IHVzZSBpbiBhbnRpYWxpYXNpbmcgc3RlcCBmdW5jdGlvbnMuIFdlIHRoZXJlZm9yZSBuZWVkCiAgICAvLyBhIHNjYWxpbmcgZmFjdG9yIHNpbWlsYXIgdG8gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUsIGJ1dCBpbmNsdWRpbmcKICAgIC8vIHRoZSB1di0+c3ByaXRlIGNvb3JkaW5hdGUgc3lzdGVtIHNjYWxpbmcgZmFjdG9yIGFzIHdlbGwuICBXZSBjaG9vc2UgdG8KICAgIC8vIHVzZSB0aGUgYm91bmRpbmcgYm94ICp4KiB3aWR0aCBmb3IgdGhpcy4gVGhpcyBjb21lcyB3aXRoIHNvbWUKICAgIC8vIGNvbnNpc3RlbmN5IGNvbmRpdGlvbnM6CiAgICAvLyAqIEZvciBwcm9jZWR1cmFsIGRpc3RhbmNlIGZpZWxkcywgd2UgbmVlZCB0aGUgc3ByaXRlIGJvdW5kaW5nIGJveCB0byBiZQogICAgLy8gICBzcXVhcmUuIChJZiBub3QsIHRoZSB1diBjb29yZGluYXRlcyB3aWxsIGJlIGFuaXNvdHJvcGljYWxseSBzY2FsZWQgYW5kCiAgICAvLyAgIGFueSBjYWxjdWxhdGlvbiBiYXNlZCBvbiB0aGVtIHdpbGwgbm90IGJlIGEgZGlzdGFuY2UgZnVuY3Rpb24uKQogICAgLy8gKiBGb3Igc2FtcGxlZCBkaXN0YW5jZSBmaWVsZHMsIHdlIG5lZWQgdG8gY29uc2lzdGVudGx5IGNob29zZSB0aGUgKngqCiAgICAvLyAgIGZvciB0aGUgc2NhbGluZyBpbiBnZXRfZGlzdGFuY2VmaWVsZF9zY2FsZSgpLgogICAgZmxvYXQgc3ByaXRlX2Zyb21fdV9zY2FsZSA9IGFicyhnZXRfbWFya2Vyc2l6ZSgpLngpOwogICAgZnJhZ191dnNjYWxlID0gdmlld3BvcnRfZnJvbV9zcHJpdGVfc2NhbGUgKiBzcHJpdGVfZnJvbV91X3NjYWxlOwogICAgZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlID0gZGlzdGFuY2VmaWVsZF9zY2FsZSgpOwogICAgZnJhZ19jb2xvciA9IHRvdmVjNChnZXRfY29sb3IoKSk7CiAgICBmcmFnX3V2ID0gZ2V0X3V2KCk7CiAgICBmcmFnX3V2X29mZnNldF93aWR0aCA9IGdldF91dl9vZmZzZXRfd2lkdGgoKTsKICAgIC8vIHNjcmVlbiBzcGFjZSBjb29yZGluYXRlcyBvZiB0aGUgcG9zaXRpb24KICAgIHZlYzQgcXVhZF92ZXJ0ZXggPSAodHJhbnMgKiB2ZWM0KDIuMCAqIGJib3hfc2lnbmVkX3JhZGl1cyAqIGdldF9wb3NpdGlvbigpLCAwLjAsIDAuMCkpOwogICAgZ2xfUG9zaXRpb24gPSB2Y2xpcCArIHF1YWRfdmVydGV4OwogICAgZ2xfUG9zaXRpb24ueiArPSBnbF9Qb3NpdGlvbi53ICogZ2V0X2RlcHRoX3NoaWZ0KCk7CgogICAgZnJhZ19pbnN0YW5jZV9pZCA9IHVpbnQoZ2xfSW5zdGFuY2VJRCk7Cn0KCq9mcmFnbWVudF9zb3VyY2XaFeojdmVyc2lvbiAzMDAgZXMKcHJlY2lzaW9uIG1lZGl1bXAgaW50OwpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKcHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEOwpwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyM0Q7CgpvdXQgdmVjNCBmcmFnbWVudF9jb2xvcjsKCi8vIFVuaWZvcm1zOiAKdW5pZm9ybSB1aW50IG9iamVjdF9pZDsKdWludCBnZXRfb2JqZWN0X2lkKCl7cmV0dXJuIG9iamVjdF9pZDt9CnVuaWZvcm0gdmVjNCBzdHJva2Vjb2xvcjsKdmVjNCBnZXRfc3Ryb2tlY29sb3IoKXtyZXR1cm4gc3Ryb2tlY29sb3I7fQp1bmlmb3JtIHZlYzIgcXVhZF9vZmZzZXQ7CnZlYzIgZ2V0X3F1YWRfb2Zmc2V0KCl7cmV0dXJuIHF1YWRfb2Zmc2V0O30KdW5pZm9ybSBmbG9hdCBnbG93d2lkdGg7CmZsb2F0IGdldF9nbG93d2lkdGgoKXtyZXR1cm4gZ2xvd3dpZHRoO30KdW5pZm9ybSBmbG9hdCBhdGxhc190ZXh0dXJlX3NpemU7CmZsb2F0IGdldF9hdGxhc190ZXh0dXJlX3NpemUoKXtyZXR1cm4gYXRsYXNfdGV4dHVyZV9zaXplO30KdW5pZm9ybSBib29sIHNzYW87CmJvb2wgZ2V0X3NzYW8oKXtyZXR1cm4gc3Nhbzt9CnVuaWZvcm0gdmVjMiBtYXJrZXJzaXplOwp2ZWMyIGdldF9tYXJrZXJzaXplKCl7cmV0dXJuIG1hcmtlcnNpemU7fQp1bmlmb3JtIHZlYzQgcm90YXRpb25zOwp2ZWM0IGdldF9yb3RhdGlvbnMoKXtyZXR1cm4gcm90YXRpb25zO30KdW5pZm9ybSB2ZWMzIG1hcmtlcl9vZmZzZXQ7CnZlYzMgZ2V0X21hcmtlcl9vZmZzZXQoKXtyZXR1cm4gbWFya2VyX29mZnNldDt9CnVuaWZvcm0gYm9vbCBwaWNraW5nOwpib29sIGdldF9waWNraW5nKCl7cmV0dXJuIHBpY2tpbmc7fQp1bmlmb3JtIGludCBzaGFwZV90eXBlOwppbnQgZ2V0X3NoYXBlX3R5cGUoKXtyZXR1cm4gc2hhcGVfdHlwZTt9CnVuaWZvcm0gdmVjNCBuYW5fY29sb3I7CnZlYzQgZ2V0X25hbl9jb2xvcigpe3JldHVybiBuYW5fY29sb3I7fQp1bmlmb3JtIHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkOwp1bmlmb3JtIGZsb2F0IHN0cm9rZXdpZHRoOwpmbG9hdCBnZXRfc3Ryb2tld2lkdGgoKXtyZXR1cm4gc3Ryb2tld2lkdGg7fQp1bmlmb3JtIGJvb2wgaW1hZ2U7CmJvb2wgZ2V0X2ltYWdlKCl7cmV0dXJuIGltYWdlO30KdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247CnZlYzIgZ2V0X3Jlc29sdXRpb24oKXtyZXR1cm4gcmVzb2x1dGlvbjt9CnVuaWZvcm0gbWF0NCBtb2RlbDsKbWF0NCBnZXRfbW9kZWwoKXtyZXR1cm4gbW9kZWw7fQp1bmlmb3JtIGZsb2F0IGRlcHRoX3NoaWZ0OwpmbG9hdCBnZXRfZGVwdGhfc2hpZnQoKXtyZXR1cm4gZGVwdGhfc2hpZnQ7fQp1bmlmb3JtIGJvb2wgYmlsbGJvYXJkOwpib29sIGdldF9iaWxsYm9hcmQoKXtyZXR1cm4gYmlsbGJvYXJkO30KdW5pZm9ybSB2ZWM0IGNvbG9yOwp2ZWM0IGdldF9jb2xvcigpe3JldHVybiBjb2xvcjt9CnVuaWZvcm0gbWF0NCBwcmVwcm9qZWN0aW9uOwptYXQ0IGdldF9wcmVwcm9qZWN0aW9uKCl7cmV0dXJuIHByZXByb2plY3Rpb247fQp1bmlmb3JtIHZlYzQgdXZfb2Zmc2V0X3dpZHRoOwp2ZWM0IGdldF91dl9vZmZzZXRfd2lkdGgoKXtyZXR1cm4gdXZfb2Zmc2V0X3dpZHRoO30KdW5pZm9ybSBib29sIGluc3BlY3RhYmxlOwpib29sIGdldF9pbnNwZWN0YWJsZSgpe3JldHVybiBpbnNwZWN0YWJsZTt9CnVuaWZvcm0gdmVjNCBnbG93Y29sb3I7CnZlYzQgZ2V0X2dsb3djb2xvcigpe3JldHVybiBnbG93Y29sb3I7fQp1bmlmb3JtIGJvb2wgdHJhbnNmb3JtX21hcmtlcjsKYm9vbCBnZXRfdHJhbnNmb3JtX21hcmtlcigpe3JldHVybiB0cmFuc2Zvcm1fbWFya2VyO30KCmluIHZlYzQgZnJhZ19jb2xvcjsKaW4gdmVjMiBmcmFnX3V2OwoKI2RlZmluZSBDSVJDTEUgICAgICAgICAgICAwCiNkZWZpbmUgUkVDVEFOR0xFICAgICAgICAgMQojZGVmaW5lIFJPVU5ERURfUkVDVEFOR0xFIDIKI2RlZmluZSBESVNUQU5DRUZJRUxEICAgICAzCiNkZWZpbmUgVFJJQU5HTEUgICAgICAgICAgNAoKI2RlZmluZSBNX1NRUlRfMiAgICAgICAgICAxLjQxNDIxMzUKCgovLyBIYWxmIHdpZHRoIG9mIGFudGlhbGlhc2luZyBzbW9vdGhzdGVwCiNkZWZpbmUgQU5USUFMSUFTX1JBRElVUyAwLjgKLy8gVGhlc2UgdmVyc2lvbnMgb2YgYWFzdGVwIGFzc3VtZSB0aGF0IGBkaXN0YCBpcyBhIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbgovLyB3aGljaCBoYXMgYmVlbiBzY2FsZWQgdG8gYmUgaW4gdW5pdHMgb2YgcGl4ZWxzLgpmbG9hdCBhYXN0ZXAoZmxvYXQgdGhyZXNob2xkMSwgZmxvYXQgZGlzdCkgewogICAgcmV0dXJuIHNtb290aHN0ZXAodGhyZXNob2xkMS1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQxICsgQU5USUFMSUFTX1JBRElVUywgZGlzdCk7Cn0KCmZsb2F0IGFhc3RlcChmbG9hdCB0aHJlc2hvbGQxLCBmbG9hdCB0aHJlc2hvbGQyLCBmbG9hdCBkaXN0KSB7CiAgICByZXR1cm4gc21vb3Roc3RlcCh0aHJlc2hvbGQxLUFOVElBTElBU19SQURJVVMsIHRocmVzaG9sZDErQU5USUFMSUFTX1JBRElVUywgZGlzdCkgLQogICAgICAgICAgIHNtb290aHN0ZXAodGhyZXNob2xkMi1BTlRJQUxJQVNfUkFESVVTLCB0aHJlc2hvbGQyK0FOVElBTElBU19SQURJVVMsIGRpc3QpOwp9CgovLyBQcm9jZWR1cmFsIHNpZ25lZCBkaXN0YW5jZSBmdW5jdGlvbnMgb24gdGhlIHV2IGNvb3JkaW5hdGUgcGF0Y2ggWzAsMV14WzAsMV0KLy8gTm90ZSB0aGF0IGZvciBhbnRpYWxpYXNpbmcgdG8gd29yayBwcm9wZXJseSB0aGVzZSBzaG91bGQgYmUgKnNjYWxlIHByZXNlcnZpbmcqCi8vIChJZiB5b3UgbXVzdCByZXNjYWxlIHV2LCBtYWtlIHN1cmUgdG8gcHV0IHRoZSBzY2FsZSBmYWN0b3IgYmFjayBpbiBsYXRlci4pCmZsb2F0IHRyaWFuZ2xlKHZlYzIgUCl7CiAgICBQIC09IHZlYzIoMC41KTsKICAgIGZsb2F0IHggPSBNX1NRUlRfMiAqIChQLnggLSBQLnkpOwogICAgZmxvYXQgeSA9IE1fU1FSVF8yICogKFAueCArIFAueSk7CiAgICBmbG9hdCByMSA9IG1heChhYnMoeCksIGFicyh5KSkgLSAxLjAvKDIuMCpNX1NRUlRfMik7CiAgICBmbG9hdCByMiA9IFAueTsKICAgIHJldHVybiAtbWF4KHIxLHIyKTsKfQoKZmxvYXQgY2lyY2xlKHZlYzIgdXYpewogICAgcmV0dXJuIDAuNS1sZW5ndGgodXYtdmVjMigwLjUpKTsKfQoKZmxvYXQgcmVjdGFuZ2xlKHZlYzIgdXYpewogICAgdmVjMiBkID0gbWF4KC11diwgdXYtdmVjMigxKSk7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKSk7Cn0KCmZsb2F0IHJvdW5kZWRfcmVjdGFuZ2xlKHZlYzIgdXYsIHZlYzIgdGwsIHZlYzIgYnIpewogICAgdmVjMiBkID0gbWF4KHRsLXV2LCB1di1icik7CiAgICByZXR1cm4gLSgobGVuZ3RoKG1heCh2ZWMyKDAuMCksIGQpKSArIG1pbigwLjAsIG1heChkLngsIGQueSkpKS10bC54KTsKfQoKdm9pZCBmaWxsKGJvb2wgaW1hZ2UsIHZlYzQgZmlsbGNvbG9yLCB2ZWMyIHV2LCBmbG9hdCBpbmZpbGwsIGlub3V0IHZlYzQgY29sb3IpewogICAgY29sb3IgPSBtaXgoY29sb3IsIGZpbGxjb2xvciwgaW5maWxsKTsKfQoKdm9pZCBmaWxsKHNhbXBsZXIyRCBpbWFnZSwgdmVjNCBmaWxsY29sb3IsIHZlYzIgdXYsIGZsb2F0IGluZmlsbCwgaW5vdXQgdmVjNCBjb2xvcil7CiAgICB2ZWM0IGltX2NvbG9yID0gdGV4dHVyZShpbWFnZSwgdXYueXgpOwogICAgY29sb3IgPSBtaXgoY29sb3IsIGltX2NvbG9yLCBpbmZpbGwpOwp9CgppbiBmbG9hdCBmcmFnX3V2c2NhbGU7CmluIGZsb2F0IGZyYWdfZGlzdGFuY2VmaWVsZF9zY2FsZTsKaW4gdmVjNCBmcmFnX3V2X29mZnNldF93aWR0aDsKCmZsb2F0IHNjYWxlZF9kaXN0YW5jZWZpZWxkKHNhbXBsZXIyRCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIC8vIEdseXBoIGRpc3RhbmNlIGZpZWxkIHVuaXRzIGFyZSBpbiBwaXhlbHMuIENvbnZlcnQgdG8gc2FtZSBkaXN0YW5jZQogICAgLy8gc2NhbGluZyBhcyBmX3V2LnggZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlIHByb2NlZHVyYWwgc2lnbmVkX2Rpc3RhbmNlCiAgICAvLyBjYWxjdWxhdGlvbnMuCiAgICByZXR1cm4gZnJhZ19kaXN0YW5jZWZpZWxkX3NjYWxlICogdGV4dHVyZShkaXN0YW5jZWZpZWxkLCB1dikucjsKfQoKZmxvYXQgc2NhbGVkX2Rpc3RhbmNlZmllbGQoYm9vbCBkaXN0YW5jZWZpZWxkLCB2ZWMyIHV2KXsKICAgIHJldHVybiAwLjA7Cn0KCmZsYXQgaW4gdWludCBmcmFnX2luc3RhbmNlX2lkOwp2ZWM0IHBhY2tfaW50KHVpbnQgaWQsIHVpbnQgaW5kZXgpIHsKICAgIHZlYzQgdW5wYWNrOwogICAgdW5wYWNrLnggPSBmbG9hdCgoaWQgJiB1aW50KDB4ZmYwMCkpID4+IDgpIC8gMjU1LjA7CiAgICB1bnBhY2sueSA9IGZsb2F0KChpZCAmIHVpbnQoMHgwMGZmKSkgPj4gMCkgLyAyNTUuMDsKICAgIHVucGFjay56ID0gZmxvYXQoKGluZGV4ICYgdWludCgweGZmMDApKSA+PiA4KSAvIDI1NS4wOwogICAgdW5wYWNrLncgPSBmbG9hdCgoaW5kZXggJiB1aW50KDB4MDBmZikpID4+IDApIC8gMjU1LjA7CiAgICByZXR1cm4gdW5wYWNrOwp9Cgp2b2lkIG1haW4oKSB7CgogICAgaW50IHNoYXBlID0gZ2V0X3NoYXBlX3R5cGUoKTsKICAgIGZsb2F0IHNpZ25lZF9kaXN0YW5jZSA9IDAuMDsKICAgIHZlYzQgdXZfb2ZmID0gZnJhZ191dl9vZmZzZXRfd2lkdGg7CiAgICB2ZWMyIHRleF91diA9IG1peCh1dl9vZmYueHksIHV2X29mZi56dywgY2xhbXAoZnJhZ191diwgMC4wLCAxLjApKTsKICAgIGlmKHNoYXBlID09IENJUkNMRSkKICAgICAgICBzaWduZWRfZGlzdGFuY2UgPSBjaXJjbGUoZnJhZ191dik7CiAgICBlbHNlIGlmKHNoYXBlID09IERJU1RBTkNFRklFTEQpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gc2NhbGVkX2Rpc3RhbmNlZmllbGQoZGlzdGFuY2VmaWVsZCwgdGV4X3V2KTsKICAgIGVsc2UgaWYoc2hhcGUgPT0gUk9VTkRFRF9SRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gcm91bmRlZF9yZWN0YW5nbGUoZnJhZ191diwgdmVjMigwLjIpLCB2ZWMyKDAuOCkpOwogICAgZWxzZSBpZihzaGFwZSA9PSBSRUNUQU5HTEUpCiAgICAgICAgc2lnbmVkX2Rpc3RhbmNlID0gMS4wOyAvLyByZWN0YW5nbGUoZl91dik7CiAgICBlbHNlIGlmKHNoYXBlID09IFRSSUFOR0xFKQogICAgICAgIHNpZ25lZF9kaXN0YW5jZSA9IHRyaWFuZ2xlKGZyYWdfdXYpOwoKICAgIHNpZ25lZF9kaXN0YW5jZSAqPSBmcmFnX3V2c2NhbGU7CiAgICBmbG9hdCBpbnNpZGUgPSBhYXN0ZXAoMC4wLCBzaWduZWRfZGlzdGFuY2UpOwogICAgdmVjNCBmaW5hbF9jb2xvciA9IHZlYzQoZnJhZ19jb2xvci54eXosIDApOwogICAgZmlsbChpbWFnZSwgZnJhZ19jb2xvciwgZnJhZ191diwgaW5zaWRlLCBmaW5hbF9jb2xvcik7CiAgICBpZiAocGlja2luZykgewogICAgICAgIGlmIChmaW5hbF9jb2xvci5hID4gMC4xKSB7CiAgICAgICAgICAgIGZyYWdtZW50X2NvbG9yID0gcGFja19pbnQob2JqZWN0X2lkLCBmcmFnX2luc3RhbmNlX2lkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKGZpbmFsX2NvbG9yLmEgPD0gMC4wKXsKICAgICAgICBkaXNjYXJkOwogICAgfQogICAgZnJhZ21lbnRfY29sb3IgPSBmaW5hbF9jb2xvcjsKfQqzaW5zdGFuY2VfYXR0cmlidXRlc4GjcG9zgqt0eXBlX2xlbmd0aAKkZmxhdMcgFwAAgD8AAIA/AAAAQAAAAEAAAEBAAABAQAAAgEAAAIBAr2JhY2tncm91bmRjb2xvcscTaLI4MDEwNzI0NjIzNTg1NjI4OTOpcGl4ZWxhcmVhxxVotDE2MzA5NTI3ODEwMDU0ODc3MDIzpmNhbWVyYccUaLM4MDU3NjYzNDczMTk4NTU5MDE1pHV1aWS0MTU2MDcxNDQ5Mjk2ODYwMDY1NTCrY2FtM2Rfc3RhdGXAqmNsZWFyc2NlbmXHFWi0MTcxNDUyNjQwNjY4NTg2Mjc2ODOoY2hpbGRyZW6QtDEzMjA1OTQzMjE0ODc3Njk1Mzc2xxVotDE3OTkxNTY2MjI2NjMxNjEzNTE3tDE2MDA2ODYwNjU0OTA5MDk0MjQ0xxVotDE2MzIzMTQ2NzA4OTc0MDQ5OTE3tDEwNTM1OTY5NzA4MzcwMDcyODA4xxVotDE3NTQxMTEzNzMwNjE0MzIyMzk12gHqaW1wb3J0KEpTU0VSVkVfSU1QT1JUU1snY2M0YzZhYTZhMWYwNmExYjUwMTNiY2EwMTcwMmYzNmExODRjMDQzOS13Z2xtYWtpZS5qcyddKS50aGVuKFdHTCA9PiB7CiAgICBXR0wuY3JlYXRlX3NjZW5lKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMTgiXScpLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qc2NhbGwtaWQ9IjE5Il0nKSwgX19sb29rdXBfaW50ZXJwb2xhdGVkKCcxMzIwNTk0MzIxNDg3NzY5NTM3NicpLCBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzE2NTE2MTYwODExMzUyOTA3NDY1JyksIF9fbG9va3VwX2ludGVycG9sYXRlZCgnMTYwMDY4NjA2NTQ5MDkwOTQyNDQnKSwgODAwLCA2MDAsIF9fbG9va3VwX2ludGVycG9sYXRlZCgnMTU2MTA4NDAxNzY0OTIwNDU1NDAnKSwgMzAuMCwgZmFsc2UpCiAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzEwNTM1OTY5NzA4MzcwMDcyODA4Jykubm90aWZ5KHRydWUpCn0pCtlBL2hvbWUvcnVubmVyL3dvcmsvTWFraWUuamwvTWFraWUuamwvV0dMTWFraWUvc3JjL3RocmVlX3Bsb3Quamw6NTSobXNnX3R5cGWhMsgEZWuSxyxqk9kkNzY4ZDgzMjItNDM5Mi00NzMwLTg0OWUtZDYwM2M1YTcwY2EygKNzdWKCp3BheWxvYWTIBB1mk4GzNjU2NDUxMzk2NTM0NTk3NzUyM5G0MTAxNDE5NjA5MDc3NTM0NTQ2NDTaA+YgICAgLy8geW91IGdldCBhIHByb21pc2UgZm9yIGFuIGFycmF5IG9mIHBsb3RzLCB3aGVuIGludGVycG9sYXRpbmcgaW50byBKUzoKICAgIChuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsKICAgIGltcG9ydChKU1NFUlZFX0lNUE9SVFNbJ2NjNGM2YWE2YTFmMDZhMWI1MDEzYmNhMDE3MDJmMzZhMTg0YzA0Mzktd2dsbWFraWUuanMnXSkudGhlbihXR0w9PiB7CiAgICAgICAgY29uc3QgZmluZCA9ICgpPT4gewogICAgICAgICAgICBjb25zdCBwbG90cyA9IFdHTC5maW5kX3Bsb3RzKF9fbG9va3VwX2ludGVycG9sYXRlZCgnNjU2NDUxMzk2NTM0NTk3NzUyMycpKQogICAgICAgICAgICBpZiAocGxvdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgcmVzb2x2ZShwbG90cykKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIFdHTC5vbl9uZXh0X2luc2VydChmaW5kKQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBmaW5kKCkKICAgIH0pCn0pKS50aGVuKHBsb3RzPT57CiAgICAgICAgLy8ganVzdCBvbmUgcGxvdCBmb3IgYXRvbWljcyBsaWtlIHNjYXR0ZXIsIGJ1dCBmb3IgcmVjaXBlcyBpdCBjYW4gYmUgbXVsdGlwbGUgcGxvdHMKICAgICAgICBjb25zdCBzY2F0dGVyX3Bsb3QgPSBwbG90c1swXQogICAgICAgIC8vIG9wZW4gdGhlIGNvbnNvbGUgd2l0aCBjdHIrc2hpZnQraSwgdG8gaW5zcGVjdCB0aGUgdmFsdWVzCiAgICAgICAgLy8gdGlwIC0geW91IGNhbiByaWdodCBjbGljayBvbiB0aGUgbG9nIGFuZCBzdG9yZSB0aGUgYWN0dWFsIHZhcmlhYmxlIGFzIGEgZ2xvYmFsLCBhbmQgZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCBpdCB0byBjaGFuZ2UgdGhlIHBsb3QuCiAgICAgICAgY29uc29sZS5sb2coc2NhdHRlcl9wbG90KQogICAgICAgIGNvbnNvbGUubG9nKHNjYXR0ZXJfcGxvdC5tYXRlcmlhbC51bmlmb3JtcykKICAgICAgICBjb25zb2xlLmxvZyhzY2F0dGVyX3Bsb3QuZ2VvbWV0cnkuYXR0cmlidXRlcykKICAgIH0pCqdub25lOjE0qG1zZ190eXBloTLIAXdrkscsapPZJDc2OGQ4MzIyLTQzOTItNDczMC04NDllLWQ2MDNjNWE3MGNhMoCjc3VigqdwYXlsb2FkyAEvZpOBtDEwOTk2MzgyNDcwOTMzNjg1MDgzxxVotDEzMzkwMjIyNDY4MDg1ODI3MTAw2cAoKG5vZGUpID0+IHsKICAgIG5vZGVbJ29uaW5wdXQnXSA9IChldmVudCk9PiB7CiAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzEwOTk2MzgyNDcwOTMzNjg1MDgzJykubm90aWZ5KHBhcnNlSW50KGV2ZW50LnNyY0VsZW1lbnQudmFsdWUpKQp9Cn0pKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMTUiXScpKTvZPC9ob21lL3J1bm5lci8uanVsaWEvcGFja2FnZXMvSlNTZXJ2ZS90dUREWS9zcmMvd2lkZ2V0cy5qbDo2Nqhtc2dfdHlwZaEyyAF2a5LHLGqT2SQ3NjhkODMyMi00MzkyLTQ3MzAtODQ5ZS1kNjAzYzVhNzBjYTKAo3N1YoKncGF5bG9hZMgBLmaTgbQxNjgyNDk0MjAzOTQ1NzA2MTUzNccUaLM5MjM0MzUzNTYzNjcyNzI2Mjk32cAoKG5vZGUpID0+IHsKICAgIG5vZGVbJ29uaW5wdXQnXSA9IChldmVudCk9PiB7CiAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzE2ODI0OTQyMDM5NDU3MDYxNTM1Jykubm90aWZ5KHBhcnNlSW50KGV2ZW50LnNyY0VsZW1lbnQudmFsdWUpKQp9Cn0pKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWpzY2FsbC1pZD0iMTYiXScpKTvZPC9ob21lL3J1bm5lci8uanVsaWEvcGFja2FnZXMvSlNTZXJ2ZS90dUREWS9zcmMvd2lkZ2V0cy5qbDo2Nqhtc2dfdHlwZaEyyAF1a5LHLGqT2SQ3NjhkODMyMi00MzkyLTQ3MzAtODQ5ZS1kNjAzYzVhNzBjYTKAo3N1YoKncGF5bG9hZMgBLWaTgbM4MDMyNzI1MTQ5Njc0MTQ2MTQxxxVotDE0Mzg0ODg0OTQ2NjMzMDM4MDQy2b8oKG5vZGUpID0+IHsKICAgIG5vZGVbJ29uaW5wdXQnXSA9IChldmVudCk9PiB7CiAgICBfX2xvb2t1cF9pbnRlcnBvbGF0ZWQoJzgwMzI3MjUxNDk2NzQxNDYxNDEnKS5ub3RpZnkocGFyc2VJbnQoZXZlbnQuc3JjRWxlbWVudC52YWx1ZSkpCn0KfSkoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtanNjYWxsLWlkPSIxNyJdJykpO9k8L2hvbWUvcnVubmVyLy5qdWxpYS9wYWNrYWdlcy9KU1NlcnZlL3R1RERZL3NyYy93aWRnZXRzLmpsOjY2qG1zZ190eXBloTKobXNnX3R5cGWhOQ==').then(msgs=> JSServe.init_session('768d8322-4392-4730-849e-d603c5a70ca2', msgs, 'sub'));
    })
" type="module"></script>
    <input step="1" max="100" min="1" data-jscall-id="15" value="1" oninput="" type="range" />
    <input step="1" max="100" min="1" data-jscall-id="16" value="1" oninput="" type="range" />
    <input step="1" max="100" min="1" data-jscall-id="17" value="1" oninput="" type="range" />
    <div style="width: 100%; height: 100%" data-jscall-id="18">
      <canvas style="display: block" data-jscall-id="19" tabindex="0"></canvas>
    </div>
  </div>
</div>~~~
